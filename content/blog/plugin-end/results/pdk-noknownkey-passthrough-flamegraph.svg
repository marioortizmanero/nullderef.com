<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1157.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="123391"><g><title>std::sys::unix::futex::futex_wait (34 samples, 0.03%)</title><rect x="0.0081%" y="757" width="0.0276%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="34"/><text x="0.2581%" y="767.50"></text></g><g><title>syscall (29 samples, 0.02%)</title><rect x="0.0122%" y="741" width="0.0235%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="29"/><text x="0.2622%" y="751.50"></text></g><g><title>async-io (44 samples, 0.04%)</title><rect x="0.0008%" y="1109" width="0.0357%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1119.50"></text></g><g><title>clone (44 samples, 0.04%)</title><rect x="0.0008%" y="1093" width="0.0357%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1103.50"></text></g><g><title>start_thread (44 samples, 0.04%)</title><rect x="0.0008%" y="1077" width="0.0357%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (44 samples, 0.04%)</title><rect x="0.0008%" y="1061" width="0.0357%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44 samples, 0.04%)</title><rect x="0.0008%" y="1045" width="0.0357%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44 samples, 0.04%)</title><rect x="0.0008%" y="1029" width="0.0357%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (44 samples, 0.04%)</title><rect x="0.0008%" y="1013" width="0.0357%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (44 samples, 0.04%)</title><rect x="0.0008%" y="997" width="0.0357%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="44"/><text x="0.2508%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (44 samples, 0.04%)</title><rect x="0.0008%" y="981" width="0.0357%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="44"/><text x="0.2508%" y="991.50"></text></g><g><title>std::panicking::try (44 samples, 0.04%)</title><rect x="0.0008%" y="965" width="0.0357%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="44"/><text x="0.2508%" y="975.50"></text></g><g><title>std::panicking::try::do_call (44 samples, 0.04%)</title><rect x="0.0008%" y="949" width="0.0357%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="44"/><text x="0.2508%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44 samples, 0.04%)</title><rect x="0.0008%" y="933" width="0.0357%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="44"/><text x="0.2508%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (44 samples, 0.04%)</title><rect x="0.0008%" y="917" width="0.0357%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="44"/><text x="0.2508%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (44 samples, 0.04%)</title><rect x="0.0008%" y="901" width="0.0357%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="44"/><text x="0.2508%" y="911.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (44 samples, 0.04%)</title><rect x="0.0008%" y="885" width="0.0357%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="44"/><text x="0.2508%" y="895.50"></text></g><g><title>async_io::driver::main_loop (44 samples, 0.04%)</title><rect x="0.0008%" y="869" width="0.0357%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="44"/><text x="0.2508%" y="879.50"></text></g><g><title>parking::Parker::park_timeout (35 samples, 0.03%)</title><rect x="0.0081%" y="853" width="0.0284%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="35"/><text x="0.2581%" y="863.50"></text></g><g><title>parking::Inner::park (35 samples, 0.03%)</title><rect x="0.0081%" y="837" width="0.0284%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="35"/><text x="0.2581%" y="847.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (35 samples, 0.03%)</title><rect x="0.0081%" y="821" width="0.0284%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="35"/><text x="0.2581%" y="831.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (35 samples, 0.03%)</title><rect x="0.0081%" y="805" width="0.0284%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="35"/><text x="0.2581%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (35 samples, 0.03%)</title><rect x="0.0081%" y="789" width="0.0284%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="35"/><text x="0.2581%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (35 samples, 0.03%)</title><rect x="0.0081%" y="773" width="0.0284%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="35"/><text x="0.2581%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (45 samples, 0.04%)</title><rect x="0.0405%" y="1093" width="0.0365%" height="15" fill="rgb(241,131,45)" fg:x="50" fg:w="45"/><text x="0.2905%" y="1103.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="0.0770%" y="1093" width="0.0170%" height="15" fill="rgb(249,31,29)" fg:x="95" fg:w="21"/><text x="0.3270%" y="1103.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.0940%" y="1093" width="0.0186%" height="15" fill="rgb(225,111,53)" fg:x="116" fg:w="23"/><text x="0.3440%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.1127%" y="1093" width="0.0186%" height="15" fill="rgb(238,160,17)" fg:x="139" fg:w="23"/><text x="0.3627%" y="1103.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (45 samples, 0.04%)</title><rect x="0.1313%" y="1093" width="0.0365%" height="15" fill="rgb(214,148,48)" fg:x="162" fg:w="45"/><text x="0.3813%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.01%)</title><rect x="0.1742%" y="1093" width="0.0138%" height="15" fill="rgb(232,36,49)" fg:x="215" fg:w="17"/><text x="0.4242%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (21 samples, 0.02%)</title><rect x="0.2188%" y="1061" width="0.0170%" height="15" fill="rgb(209,103,24)" fg:x="270" fg:w="21"/><text x="0.4688%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.2358%" y="1013" width="0.0138%" height="15" fill="rgb(229,88,8)" fg:x="291" fg:w="17"/><text x="0.4858%" y="1023.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.2358%" y="997" width="0.0138%" height="15" fill="rgb(213,181,19)" fg:x="291" fg:w="17"/><text x="0.4858%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="0.2496%" y="1013" width="0.0186%" height="15" fill="rgb(254,191,54)" fg:x="308" fg:w="23"/><text x="0.4996%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (108 samples, 0.09%)</title><rect x="0.1880%" y="1077" width="0.0875%" height="15" fill="rgb(241,83,37)" fg:x="232" fg:w="108"/><text x="0.4380%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (49 samples, 0.04%)</title><rect x="0.2358%" y="1061" width="0.0397%" height="15" fill="rgb(233,36,39)" fg:x="291" fg:w="49"/><text x="0.4858%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (49 samples, 0.04%)</title><rect x="0.2358%" y="1045" width="0.0397%" height="15" fill="rgb(226,3,54)" fg:x="291" fg:w="49"/><text x="0.4858%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (49 samples, 0.04%)</title><rect x="0.2358%" y="1029" width="0.0397%" height="15" fill="rgb(245,192,40)" fg:x="291" fg:w="49"/><text x="0.4858%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (75 samples, 0.06%)</title><rect x="0.2755%" y="1077" width="0.0608%" height="15" fill="rgb(238,167,29)" fg:x="340" fg:w="75"/><text x="0.5255%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (13 samples, 0.01%)</title><rect x="0.3258%" y="1061" width="0.0105%" height="15" fill="rgb(232,182,51)" fg:x="402" fg:w="13"/><text x="0.5758%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (13 samples, 0.01%)</title><rect x="0.3258%" y="1045" width="0.0105%" height="15" fill="rgb(231,60,39)" fg:x="402" fg:w="13"/><text x="0.5758%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (13 samples, 0.01%)</title><rect x="0.3258%" y="1029" width="0.0105%" height="15" fill="rgb(208,69,12)" fg:x="402" fg:w="13"/><text x="0.5758%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="0.3258%" y="1013" width="0.0105%" height="15" fill="rgb(235,93,37)" fg:x="402" fg:w="13"/><text x="0.5758%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="0.3258%" y="997" width="0.0105%" height="15" fill="rgb(213,116,39)" fg:x="402" fg:w="13"/><text x="0.5758%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="0.3258%" y="981" width="0.0105%" height="15" fill="rgb(222,207,29)" fg:x="402" fg:w="13"/><text x="0.5758%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="0.3258%" y="965" width="0.0105%" height="15" fill="rgb(206,96,30)" fg:x="402" fg:w="13"/><text x="0.5758%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="0.3258%" y="949" width="0.0105%" height="15" fill="rgb(218,138,4)" fg:x="402" fg:w="13"/><text x="0.5758%" y="959.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="0.3258%" y="933" width="0.0105%" height="15" fill="rgb(250,191,14)" fg:x="402" fg:w="13"/><text x="0.5758%" y="943.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="0.3258%" y="917" width="0.0105%" height="15" fill="rgb(239,60,40)" fg:x="402" fg:w="13"/><text x="0.5758%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="0.3258%" y="901" width="0.0105%" height="15" fill="rgb(206,27,48)" fg:x="402" fg:w="13"/><text x="0.5758%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="0.3363%" y="1061" width="0.0113%" height="15" fill="rgb(225,35,8)" fg:x="415" fg:w="14"/><text x="0.5863%" y="1071.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="0.3363%" y="1045" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="415" fg:w="14"/><text x="0.5863%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="0.3363%" y="1029" width="0.0113%" height="15" fill="rgb(247,123,22)" fg:x="415" fg:w="14"/><text x="0.5863%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (14 samples, 0.01%)</title><rect x="0.3363%" y="1013" width="0.0113%" height="15" fill="rgb(231,138,38)" fg:x="415" fg:w="14"/><text x="0.5863%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="0.3477%" y="1061" width="0.0227%" height="15" fill="rgb(231,145,46)" fg:x="429" fg:w="28"/><text x="0.5977%" y="1071.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="0.3477%" y="1045" width="0.0227%" height="15" fill="rgb(251,118,11)" fg:x="429" fg:w="28"/><text x="0.5977%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="0.3477%" y="1029" width="0.0227%" height="15" fill="rgb(217,147,25)" fg:x="429" fg:w="28"/><text x="0.5977%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (28 samples, 0.02%)</title><rect x="0.3477%" y="1013" width="0.0227%" height="15" fill="rgb(247,81,37)" fg:x="429" fg:w="28"/><text x="0.5977%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (57 samples, 0.05%)</title><rect x="0.3363%" y="1077" width="0.0462%" height="15" fill="rgb(209,12,38)" fg:x="415" fg:w="57"/><text x="0.5863%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="0.3704%" y="1061" width="0.0122%" height="15" fill="rgb(227,1,9)" fg:x="457" fg:w="15"/><text x="0.6204%" y="1071.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="0.3922%" y="1077" width="0.0259%" height="15" fill="rgb(248,47,43)" fg:x="484" fg:w="32"/><text x="0.6422%" y="1087.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="0.4182%" y="1077" width="0.0146%" height="15" fill="rgb(221,10,30)" fg:x="516" fg:w="18"/><text x="0.6682%" y="1087.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (190 samples, 0.15%)</title><rect x="0.4328%" y="1077" width="0.1540%" height="15" fill="rgb(210,229,1)" fg:x="534" fg:w="190"/><text x="0.6828%" y="1087.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (30 samples, 0.02%)</title><rect x="0.5624%" y="1061" width="0.0243%" height="15" fill="rgb(222,148,37)" fg:x="694" fg:w="30"/><text x="0.8124%" y="1071.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.04%)</title><rect x="0.5868%" y="1077" width="0.0438%" height="15" fill="rgb(234,67,33)" fg:x="724" fg:w="54"/><text x="0.8368%" y="1087.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (22 samples, 0.02%)</title><rect x="0.6824%" y="1061" width="0.0178%" height="15" fill="rgb(247,98,35)" fg:x="842" fg:w="22"/><text x="0.9324%" y="1071.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (14 samples, 0.01%)</title><rect x="0.6889%" y="1045" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="850" fg:w="14"/><text x="0.9389%" y="1055.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (99 samples, 0.08%)</title><rect x="0.6305%" y="1077" width="0.0802%" height="15" fill="rgb(213,79,30)" fg:x="778" fg:w="99"/><text x="0.8805%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (13 samples, 0.01%)</title><rect x="0.7002%" y="1061" width="0.0105%" height="15" fill="rgb(246,177,23)" fg:x="864" fg:w="13"/><text x="0.9502%" y="1071.50"></text></g><g><title>core::mem::replace (13 samples, 0.01%)</title><rect x="0.7002%" y="1045" width="0.0105%" height="15" fill="rgb(230,62,27)" fg:x="864" fg:w="13"/><text x="0.9502%" y="1055.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="0.7002%" y="1029" width="0.0105%" height="15" fill="rgb(216,154,8)" fg:x="864" fg:w="13"/><text x="0.9502%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="0.9709%" y="1045" width="0.0284%" height="15" fill="rgb(244,35,45)" fg:x="1198" fg:w="35"/><text x="1.2209%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (35 samples, 0.03%)</title><rect x="0.9709%" y="1029" width="0.0284%" height="15" fill="rgb(251,115,12)" fg:x="1198" fg:w="35"/><text x="1.2209%" y="1039.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (92 samples, 0.07%)</title><rect x="0.9312%" y="1061" width="0.0746%" height="15" fill="rgb(240,54,50)" fg:x="1149" fg:w="92"/><text x="1.1812%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="1.0090%" y="917" width="0.0130%" height="15" fill="rgb(233,84,52)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="1.0090%" y="901" width="0.0130%" height="15" fill="rgb(207,117,47)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.01%)</title><rect x="1.0090%" y="885" width="0.0130%" height="15" fill="rgb(249,43,39)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="1.0090%" y="869" width="0.0130%" height="15" fill="rgb(209,38,44)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="1.0090%" y="853" width="0.0130%" height="15" fill="rgb(236,212,23)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="863.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="1.0090%" y="837" width="0.0130%" height="15" fill="rgb(242,79,21)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="847.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="1.0090%" y="821" width="0.0130%" height="15" fill="rgb(211,96,35)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="1.0090%" y="805" width="0.0130%" height="15" fill="rgb(253,215,40)" fg:x="1245" fg:w="16"/><text x="1.2590%" y="815.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="1.0057%" y="1045" width="0.0227%" height="15" fill="rgb(211,81,21)" fg:x="1241" fg:w="28"/><text x="1.2557%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="1.0090%" y="1029" width="0.0195%" height="15" fill="rgb(208,190,38)" fg:x="1245" fg:w="24"/><text x="1.2590%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (24 samples, 0.02%)</title><rect x="1.0090%" y="1013" width="0.0195%" height="15" fill="rgb(235,213,38)" fg:x="1245" fg:w="24"/><text x="1.2590%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (24 samples, 0.02%)</title><rect x="1.0090%" y="997" width="0.0195%" height="15" fill="rgb(237,122,38)" fg:x="1245" fg:w="24"/><text x="1.2590%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.02%)</title><rect x="1.0090%" y="981" width="0.0195%" height="15" fill="rgb(244,218,35)" fg:x="1245" fg:w="24"/><text x="1.2590%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.02%)</title><rect x="1.0090%" y="965" width="0.0195%" height="15" fill="rgb(240,68,47)" fg:x="1245" fg:w="24"/><text x="1.2590%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.02%)</title><rect x="1.0090%" y="949" width="0.0195%" height="15" fill="rgb(210,16,53)" fg:x="1245" fg:w="24"/><text x="1.2590%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.02%)</title><rect x="1.0090%" y="933" width="0.0195%" height="15" fill="rgb(235,124,12)" fg:x="1245" fg:w="24"/><text x="1.2590%" y="943.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (38 samples, 0.03%)</title><rect x="1.0057%" y="1061" width="0.0308%" height="15" fill="rgb(224,169,11)" fg:x="1241" fg:w="38"/><text x="1.2557%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (28 samples, 0.02%)</title><rect x="1.0430%" y="1029" width="0.0227%" height="15" fill="rgb(250,166,2)" fg:x="1287" fg:w="28"/><text x="1.2930%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (28 samples, 0.02%)</title><rect x="1.0430%" y="1013" width="0.0227%" height="15" fill="rgb(242,216,29)" fg:x="1287" fg:w="28"/><text x="1.2930%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="1.0430%" y="997" width="0.0227%" height="15" fill="rgb(230,116,27)" fg:x="1287" fg:w="28"/><text x="1.2930%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (31 samples, 0.03%)</title><rect x="1.0430%" y="1061" width="0.0251%" height="15" fill="rgb(228,99,48)" fg:x="1287" fg:w="31"/><text x="1.2930%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (31 samples, 0.03%)</title><rect x="1.0430%" y="1045" width="0.0251%" height="15" fill="rgb(253,11,6)" fg:x="1287" fg:w="31"/><text x="1.2930%" y="1055.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.0819%" y="1045" width="0.0113%" height="15" fill="rgb(247,143,39)" fg:x="1335" fg:w="14"/><text x="1.3319%" y="1055.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.0819%" y="1029" width="0.0113%" height="15" fill="rgb(236,97,10)" fg:x="1335" fg:w="14"/><text x="1.3319%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (40 samples, 0.03%)</title><rect x="1.0681%" y="1061" width="0.0324%" height="15" fill="rgb(233,208,19)" fg:x="1318" fg:w="40"/><text x="1.3181%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (37 samples, 0.03%)</title><rect x="1.1006%" y="1061" width="0.0300%" height="15" fill="rgb(216,164,2)" fg:x="1358" fg:w="37"/><text x="1.3506%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (25 samples, 0.02%)</title><rect x="1.1338%" y="1061" width="0.0203%" height="15" fill="rgb(220,129,5)" fg:x="1399" fg:w="25"/><text x="1.3838%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (630 samples, 0.51%)</title><rect x="0.7116%" y="1077" width="0.5106%" height="15" fill="rgb(242,17,10)" fg:x="878" fg:w="630"/><text x="0.9616%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (84 samples, 0.07%)</title><rect x="1.1541%" y="1061" width="0.0681%" height="15" fill="rgb(242,107,0)" fg:x="1424" fg:w="84"/><text x="1.4041%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (67 samples, 0.05%)</title><rect x="1.2221%" y="1077" width="0.0543%" height="15" fill="rgb(251,28,31)" fg:x="1508" fg:w="67"/><text x="1.4721%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="1.2772%" y="1077" width="0.0292%" height="15" fill="rgb(233,223,10)" fg:x="1576" fg:w="36"/><text x="1.5272%" y="1087.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="1.3064%" y="1077" width="0.0186%" height="15" fill="rgb(215,21,27)" fg:x="1612" fg:w="23"/><text x="1.5564%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (21 samples, 0.02%)</title><rect x="1.3315%" y="1077" width="0.0170%" height="15" fill="rgb(232,23,21)" fg:x="1643" fg:w="21"/><text x="1.5815%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (139 samples, 0.11%)</title><rect x="1.3486%" y="1077" width="0.1127%" height="15" fill="rgb(244,5,23)" fg:x="1664" fg:w="139"/><text x="1.5986%" y="1087.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (64 samples, 0.05%)</title><rect x="1.4093%" y="1061" width="0.0519%" height="15" fill="rgb(226,81,46)" fg:x="1739" fg:w="64"/><text x="1.6593%" y="1071.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (54 samples, 0.04%)</title><rect x="1.4174%" y="1045" width="0.0438%" height="15" fill="rgb(247,70,30)" fg:x="1749" fg:w="54"/><text x="1.6674%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.01%)</title><rect x="1.4491%" y="1029" width="0.0122%" height="15" fill="rgb(212,68,19)" fg:x="1788" fg:w="15"/><text x="1.6991%" y="1039.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (28 samples, 0.02%)</title><rect x="1.4612%" y="1077" width="0.0227%" height="15" fill="rgb(240,187,13)" fg:x="1803" fg:w="28"/><text x="1.7112%" y="1087.50"></text></g><g><title>value_trait::Builder::object (22 samples, 0.02%)</title><rect x="1.4661%" y="1061" width="0.0178%" height="15" fill="rgb(223,113,26)" fg:x="1809" fg:w="22"/><text x="1.7161%" y="1071.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (22 samples, 0.02%)</title><rect x="1.4661%" y="1045" width="0.0178%" height="15" fill="rgb(206,192,2)" fg:x="1809" fg:w="22"/><text x="1.7161%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (22 samples, 0.02%)</title><rect x="1.4661%" y="1029" width="0.0178%" height="15" fill="rgb(241,108,4)" fg:x="1809" fg:w="22"/><text x="1.7161%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="1.4839%" y="1077" width="0.0235%" height="15" fill="rgb(247,173,49)" fg:x="1831" fg:w="29"/><text x="1.7339%" y="1087.50"></text></g><g><title>[[vdso]] (20 samples, 0.02%)</title><rect x="1.5074%" y="1077" width="0.0162%" height="15" fill="rgb(224,114,35)" fg:x="1860" fg:w="20"/><text x="1.7574%" y="1087.50"></text></g><g><title>[libc-2.31.so] (78 samples, 0.06%)</title><rect x="1.5236%" y="1077" width="0.0632%" height="15" fill="rgb(245,159,27)" fg:x="1880" fg:w="78"/><text x="1.7736%" y="1087.50"></text></g><g><title>__clock_gettime (28 samples, 0.02%)</title><rect x="1.5868%" y="1077" width="0.0227%" height="15" fill="rgb(245,172,44)" fg:x="1958" fg:w="28"/><text x="1.8368%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (44 samples, 0.04%)</title><rect x="1.6152%" y="1077" width="0.0357%" height="15" fill="rgb(236,23,11)" fg:x="1993" fg:w="44"/><text x="1.8652%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (31 samples, 0.03%)</title><rect x="1.6257%" y="1061" width="0.0251%" height="15" fill="rgb(205,117,38)" fg:x="2006" fg:w="31"/><text x="1.8757%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="1.6257%" y="1045" width="0.0251%" height="15" fill="rgb(237,72,25)" fg:x="2006" fg:w="31"/><text x="1.8757%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (31 samples, 0.03%)</title><rect x="1.6257%" y="1029" width="0.0251%" height="15" fill="rgb(244,70,9)" fg:x="2006" fg:w="31"/><text x="1.8757%" y="1039.50"></text></g><g><title>abi_stable::erased_types::iterator::next (27 samples, 0.02%)</title><rect x="1.6508%" y="1077" width="0.0219%" height="15" fill="rgb(217,125,39)" fg:x="2037" fg:w="27"/><text x="1.9008%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="1.7513%" y="1061" width="0.0284%" height="15" fill="rgb(235,36,10)" fg:x="2161" fg:w="35"/><text x="2.0013%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (35 samples, 0.03%)</title><rect x="1.7513%" y="1045" width="0.0284%" height="15" fill="rgb(251,123,47)" fg:x="2161" fg:w="35"/><text x="2.0013%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.03%)</title><rect x="1.7513%" y="1029" width="0.0284%" height="15" fill="rgb(221,13,13)" fg:x="2161" fg:w="35"/><text x="2.0013%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.03%)</title><rect x="1.7513%" y="1013" width="0.0284%" height="15" fill="rgb(238,131,9)" fg:x="2161" fg:w="35"/><text x="2.0013%" y="1023.50"></text></g><g><title>__rg_dealloc (35 samples, 0.03%)</title><rect x="1.7513%" y="997" width="0.0284%" height="15" fill="rgb(211,50,8)" fg:x="2161" fg:w="35"/><text x="2.0013%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (35 samples, 0.03%)</title><rect x="1.7513%" y="981" width="0.0284%" height="15" fill="rgb(245,182,24)" fg:x="2161" fg:w="35"/><text x="2.0013%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="1.7797%" y="1061" width="0.0292%" height="15" fill="rgb(242,14,37)" fg:x="2196" fg:w="36"/><text x="2.0297%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (36 samples, 0.03%)</title><rect x="1.7797%" y="1045" width="0.0292%" height="15" fill="rgb(246,228,12)" fg:x="2196" fg:w="36"/><text x="2.0297%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36 samples, 0.03%)</title><rect x="1.7797%" y="1029" width="0.0292%" height="15" fill="rgb(213,55,15)" fg:x="2196" fg:w="36"/><text x="2.0297%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.03%)</title><rect x="1.7797%" y="1013" width="0.0292%" height="15" fill="rgb(209,9,3)" fg:x="2196" fg:w="36"/><text x="2.0297%" y="1023.50"></text></g><g><title>__rg_dealloc (36 samples, 0.03%)</title><rect x="1.7797%" y="997" width="0.0292%" height="15" fill="rgb(230,59,30)" fg:x="2196" fg:w="36"/><text x="2.0297%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (36 samples, 0.03%)</title><rect x="1.7797%" y="981" width="0.0292%" height="15" fill="rgb(209,121,21)" fg:x="2196" fg:w="36"/><text x="2.0297%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (181 samples, 0.15%)</title><rect x="1.6760%" y="1077" width="0.1467%" height="15" fill="rgb(220,109,13)" fg:x="2068" fg:w="181"/><text x="1.9260%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="1.8113%" y="1061" width="0.0113%" height="15" fill="rgb(232,18,1)" fg:x="2235" fg:w="14"/><text x="2.0613%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="1.8113%" y="1045" width="0.0113%" height="15" fill="rgb(215,41,42)" fg:x="2235" fg:w="14"/><text x="2.0613%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="1.8113%" y="1029" width="0.0113%" height="15" fill="rgb(224,123,36)" fg:x="2235" fg:w="14"/><text x="2.0613%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="1.8113%" y="1013" width="0.0113%" height="15" fill="rgb(240,125,3)" fg:x="2235" fg:w="14"/><text x="2.0613%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (14 samples, 0.01%)</title><rect x="1.8113%" y="997" width="0.0113%" height="15" fill="rgb(205,98,50)" fg:x="2235" fg:w="14"/><text x="2.0613%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="1.8113%" y="981" width="0.0113%" height="15" fill="rgb(205,185,37)" fg:x="2235" fg:w="14"/><text x="2.0613%" y="991.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (108 samples, 0.09%)</title><rect x="1.8227%" y="1077" width="0.0875%" height="15" fill="rgb(238,207,15)" fg:x="2249" fg:w="108"/><text x="2.0727%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (31 samples, 0.03%)</title><rect x="1.8851%" y="1061" width="0.0251%" height="15" fill="rgb(213,199,42)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (31 samples, 0.03%)</title><rect x="1.8851%" y="1045" width="0.0251%" height="15" fill="rgb(235,201,11)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (31 samples, 0.03%)</title><rect x="1.8851%" y="1029" width="0.0251%" height="15" fill="rgb(207,46,11)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (31 samples, 0.03%)</title><rect x="1.8851%" y="1013" width="0.0251%" height="15" fill="rgb(241,35,35)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="1.8851%" y="997" width="0.0251%" height="15" fill="rgb(243,32,47)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="1007.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="1.8851%" y="981" width="0.0251%" height="15" fill="rgb(247,202,23)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="991.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.03%)</title><rect x="1.8851%" y="965" width="0.0251%" height="15" fill="rgb(219,102,11)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.03%)</title><rect x="1.8851%" y="949" width="0.0251%" height="15" fill="rgb(243,110,44)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.03%)</title><rect x="1.8851%" y="933" width="0.0251%" height="15" fill="rgb(222,74,54)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="943.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="1.8851%" y="917" width="0.0251%" height="15" fill="rgb(216,99,12)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="927.50"></text></g><g><title>__rg_alloc (31 samples, 0.03%)</title><rect x="1.8851%" y="901" width="0.0251%" height="15" fill="rgb(226,22,26)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="911.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.03%)</title><rect x="1.8851%" y="885" width="0.0251%" height="15" fill="rgb(217,163,10)" fg:x="2326" fg:w="31"/><text x="2.1351%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (34 samples, 0.03%)</title><rect x="1.9102%" y="1077" width="0.0276%" height="15" fill="rgb(213,25,53)" fg:x="2357" fg:w="34"/><text x="2.1602%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (17 samples, 0.01%)</title><rect x="1.9240%" y="1061" width="0.0138%" height="15" fill="rgb(252,105,26)" fg:x="2374" fg:w="17"/><text x="2.1740%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (17 samples, 0.01%)</title><rect x="1.9240%" y="1045" width="0.0138%" height="15" fill="rgb(220,39,43)" fg:x="2374" fg:w="17"/><text x="2.1740%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (17 samples, 0.01%)</title><rect x="1.9240%" y="1029" width="0.0138%" height="15" fill="rgb(229,68,48)" fg:x="2374" fg:w="17"/><text x="2.1740%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (70 samples, 0.06%)</title><rect x="1.9377%" y="1077" width="0.0567%" height="15" fill="rgb(252,8,32)" fg:x="2391" fg:w="70"/><text x="2.1877%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (30 samples, 0.02%)</title><rect x="1.9945%" y="1077" width="0.0243%" height="15" fill="rgb(223,20,43)" fg:x="2461" fg:w="30"/><text x="2.2445%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 0.11%)</title><rect x="2.0974%" y="1013" width="0.1102%" height="15" fill="rgb(229,81,49)" fg:x="2588" fg:w="136"/><text x="2.3474%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (136 samples, 0.11%)</title><rect x="2.0974%" y="997" width="0.1102%" height="15" fill="rgb(236,28,36)" fg:x="2588" fg:w="136"/><text x="2.3474%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (136 samples, 0.11%)</title><rect x="2.0974%" y="981" width="0.1102%" height="15" fill="rgb(249,185,26)" fg:x="2588" fg:w="136"/><text x="2.3474%" y="991.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (136 samples, 0.11%)</title><rect x="2.0974%" y="965" width="0.1102%" height="15" fill="rgb(249,174,33)" fg:x="2588" fg:w="136"/><text x="2.3474%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (147 samples, 0.12%)</title><rect x="2.0974%" y="1029" width="0.1191%" height="15" fill="rgb(233,201,37)" fg:x="2588" fg:w="147"/><text x="2.3474%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.06%)</title><rect x="2.2165%" y="1013" width="0.0624%" height="15" fill="rgb(221,78,26)" fg:x="2735" fg:w="77"/><text x="2.4665%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (77 samples, 0.06%)</title><rect x="2.2165%" y="997" width="0.0624%" height="15" fill="rgb(250,127,30)" fg:x="2735" fg:w="77"/><text x="2.4665%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (77 samples, 0.06%)</title><rect x="2.2165%" y="981" width="0.0624%" height="15" fill="rgb(230,49,44)" fg:x="2735" fg:w="77"/><text x="2.4665%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (77 samples, 0.06%)</title><rect x="2.2165%" y="965" width="0.0624%" height="15" fill="rgb(229,67,23)" fg:x="2735" fg:w="77"/><text x="2.4665%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (77 samples, 0.06%)</title><rect x="2.2165%" y="949" width="0.0624%" height="15" fill="rgb(249,83,47)" fg:x="2735" fg:w="77"/><text x="2.4665%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (91 samples, 0.07%)</title><rect x="2.2165%" y="1029" width="0.0737%" height="15" fill="rgb(215,43,3)" fg:x="2735" fg:w="91"/><text x="2.4665%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2789%" y="1013" width="0.0113%" height="15" fill="rgb(238,154,13)" fg:x="2812" fg:w="14"/><text x="2.5289%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="2.2789%" y="997" width="0.0113%" height="15" fill="rgb(219,56,2)" fg:x="2812" fg:w="14"/><text x="2.5289%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="2.2789%" y="981" width="0.0113%" height="15" fill="rgb(233,0,4)" fg:x="2812" fg:w="14"/><text x="2.5289%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="2.2789%" y="965" width="0.0113%" height="15" fill="rgb(235,30,7)" fg:x="2812" fg:w="14"/><text x="2.5289%" y="975.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="2.2789%" y="949" width="0.0113%" height="15" fill="rgb(250,79,13)" fg:x="2812" fg:w="14"/><text x="2.5289%" y="959.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="2.2789%" y="933" width="0.0113%" height="15" fill="rgb(211,146,34)" fg:x="2812" fg:w="14"/><text x="2.5289%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (337 samples, 0.27%)</title><rect x="2.0253%" y="1077" width="0.2731%" height="15" fill="rgb(228,22,38)" fg:x="2499" fg:w="337"/><text x="2.2753%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (248 samples, 0.20%)</title><rect x="2.0974%" y="1061" width="0.2010%" height="15" fill="rgb(235,168,5)" fg:x="2588" fg:w="248"/><text x="2.3474%" y="1071.50"></text></g><g><title>core::mem::drop (248 samples, 0.20%)</title><rect x="2.0974%" y="1045" width="0.2010%" height="15" fill="rgb(221,155,16)" fg:x="2588" fg:w="248"/><text x="2.3474%" y="1055.50"></text></g><g><title>async_executor::State::notify (18 samples, 0.01%)</title><rect x="2.3114%" y="1077" width="0.0146%" height="15" fill="rgb(215,215,53)" fg:x="2852" fg:w="18"/><text x="2.5614%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (17 samples, 0.01%)</title><rect x="2.3259%" y="1077" width="0.0138%" height="15" fill="rgb(223,4,10)" fg:x="2870" fg:w="17"/><text x="2.5759%" y="1087.50"></text></g><g><title>async_executor::Ticker::wake (30 samples, 0.02%)</title><rect x="2.3397%" y="1077" width="0.0243%" height="15" fill="rgb(234,103,6)" fg:x="2887" fg:w="30"/><text x="2.5897%" y="1087.50"></text></g><g><title>async_executor::steal (220 samples, 0.18%)</title><rect x="2.3640%" y="1077" width="0.1783%" height="15" fill="rgb(227,97,0)" fg:x="2917" fg:w="220"/><text x="2.6140%" y="1087.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (36 samples, 0.03%)</title><rect x="2.5480%" y="1077" width="0.0292%" height="15" fill="rgb(234,150,53)" fg:x="3144" fg:w="36"/><text x="2.7980%" y="1087.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (13 samples, 0.01%)</title><rect x="2.5845%" y="1077" width="0.0105%" height="15" fill="rgb(228,201,54)" fg:x="3189" fg:w="13"/><text x="2.8345%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (446 samples, 0.36%)</title><rect x="2.6080%" y="1077" width="0.3615%" height="15" fill="rgb(222,22,37)" fg:x="3218" fg:w="446"/><text x="2.8580%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (53 samples, 0.04%)</title><rect x="2.9694%" y="1077" width="0.0430%" height="15" fill="rgb(237,53,32)" fg:x="3664" fg:w="53"/><text x="3.2194%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (65 samples, 0.05%)</title><rect x="3.0124%" y="1077" width="0.0527%" height="15" fill="rgb(233,25,53)" fg:x="3717" fg:w="65"/><text x="3.2624%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (13 samples, 0.01%)</title><rect x="3.0651%" y="1077" width="0.0105%" height="15" fill="rgb(210,40,34)" fg:x="3782" fg:w="13"/><text x="3.3151%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (31 samples, 0.03%)</title><rect x="3.0756%" y="1077" width="0.0251%" height="15" fill="rgb(241,220,44)" fg:x="3795" fg:w="31"/><text x="3.3256%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="3.0861%" y="1061" width="0.0146%" height="15" fill="rgb(235,28,35)" fg:x="3808" fg:w="18"/><text x="3.3361%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (18 samples, 0.01%)</title><rect x="3.0861%" y="1045" width="0.0146%" height="15" fill="rgb(210,56,17)" fg:x="3808" fg:w="18"/><text x="3.3361%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (27 samples, 0.02%)</title><rect x="3.1121%" y="1077" width="0.0219%" height="15" fill="rgb(224,130,29)" fg:x="3840" fg:w="27"/><text x="3.3621%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="3.1348%" y="1077" width="0.0186%" height="15" fill="rgb(235,212,8)" fg:x="3868" fg:w="23"/><text x="3.3848%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="3.1534%" y="1077" width="0.0195%" height="15" fill="rgb(223,33,50)" fg:x="3891" fg:w="24"/><text x="3.4034%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="3.1728%" y="1077" width="0.0162%" height="15" fill="rgb(219,149,13)" fg:x="3915" fg:w="20"/><text x="3.4228%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (20 samples, 0.02%)</title><rect x="3.1728%" y="1061" width="0.0162%" height="15" fill="rgb(250,156,29)" fg:x="3915" fg:w="20"/><text x="3.4228%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (13 samples, 0.01%)</title><rect x="3.1955%" y="1077" width="0.0105%" height="15" fill="rgb(216,193,19)" fg:x="3943" fg:w="13"/><text x="3.4455%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (42 samples, 0.03%)</title><rect x="3.2126%" y="1077" width="0.0340%" height="15" fill="rgb(216,135,14)" fg:x="3964" fg:w="42"/><text x="3.4626%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (17 samples, 0.01%)</title><rect x="3.2531%" y="1061" width="0.0138%" height="15" fill="rgb(241,47,5)" fg:x="4014" fg:w="17"/><text x="3.5031%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (17 samples, 0.01%)</title><rect x="3.2531%" y="1045" width="0.0138%" height="15" fill="rgb(233,42,35)" fg:x="4014" fg:w="17"/><text x="3.5031%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (71 samples, 0.06%)</title><rect x="3.2466%" y="1077" width="0.0575%" height="15" fill="rgb(231,13,6)" fg:x="4006" fg:w="71"/><text x="3.4966%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (31 samples, 0.03%)</title><rect x="3.2790%" y="1061" width="0.0251%" height="15" fill="rgb(207,181,40)" fg:x="4046" fg:w="31"/><text x="3.5290%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="3.2863%" y="1045" width="0.0178%" height="15" fill="rgb(254,173,49)" fg:x="4055" fg:w="22"/><text x="3.5363%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="3.2863%" y="1029" width="0.0178%" height="15" fill="rgb(221,1,38)" fg:x="4055" fg:w="22"/><text x="3.5363%" y="1039.50"></text></g><g><title>event_listener::Event::notify (146 samples, 0.12%)</title><rect x="3.3187%" y="1077" width="0.1183%" height="15" fill="rgb(206,124,46)" fg:x="4095" fg:w="146"/><text x="3.5687%" y="1087.50"></text></g><g><title>event_listener::full_fence (67 samples, 0.05%)</title><rect x="3.3827%" y="1061" width="0.0543%" height="15" fill="rgb(249,21,11)" fg:x="4174" fg:w="67"/><text x="3.6327%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (30 samples, 0.02%)</title><rect x="3.4460%" y="1077" width="0.0243%" height="15" fill="rgb(222,201,40)" fg:x="4252" fg:w="30"/><text x="3.6960%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (18 samples, 0.01%)</title><rect x="3.4703%" y="1077" width="0.0146%" height="15" fill="rgb(235,61,29)" fg:x="4282" fg:w="18"/><text x="3.7203%" y="1087.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (19 samples, 0.02%)</title><rect x="3.4849%" y="1077" width="0.0154%" height="15" fill="rgb(219,207,3)" fg:x="4300" fg:w="19"/><text x="3.7349%" y="1087.50"></text></g><g><title>parking::Unparker::unpark (33 samples, 0.03%)</title><rect x="3.5003%" y="1077" width="0.0267%" height="15" fill="rgb(222,56,46)" fg:x="4319" fg:w="33"/><text x="3.7503%" y="1087.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.05%)</title><rect x="3.5343%" y="1077" width="0.0502%" height="15" fill="rgb(239,76,54)" fg:x="4361" fg:w="62"/><text x="3.7843%" y="1087.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.03%)</title><rect x="3.5845%" y="1077" width="0.0340%" height="15" fill="rgb(231,124,27)" fg:x="4423" fg:w="42"/><text x="3.8345%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="3.6283%" y="1077" width="0.0195%" height="15" fill="rgb(249,195,6)" fg:x="4477" fg:w="24"/><text x="3.8783%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (14 samples, 0.01%)</title><rect x="3.6486%" y="1077" width="0.0113%" height="15" fill="rgb(237,174,47)" fg:x="4502" fg:w="14"/><text x="3.8986%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (39 samples, 0.03%)</title><rect x="3.6599%" y="1077" width="0.0316%" height="15" fill="rgb(206,201,31)" fg:x="4516" fg:w="39"/><text x="3.9099%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (57 samples, 0.05%)</title><rect x="3.6931%" y="1077" width="0.0462%" height="15" fill="rgb(231,57,52)" fg:x="4557" fg:w="57"/><text x="3.9431%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.03%)</title><rect x="3.7393%" y="1077" width="0.0259%" height="15" fill="rgb(248,177,22)" fg:x="4614" fg:w="32"/><text x="3.9893%" y="1087.50"></text></g><g><title>syscall (43 samples, 0.03%)</title><rect x="3.7653%" y="1077" width="0.0348%" height="15" fill="rgb(215,211,37)" fg:x="4646" fg:w="43"/><text x="4.0153%" y="1087.50"></text></g><g><title>tremor_common::time::nanotime (22 samples, 0.02%)</title><rect x="3.8001%" y="1077" width="0.0178%" height="15" fill="rgb(241,128,51)" fg:x="4689" fg:w="22"/><text x="4.0501%" y="1087.50"></text></g><g><title>std::time::SystemTime::now (15 samples, 0.01%)</title><rect x="3.8058%" y="1061" width="0.0122%" height="15" fill="rgb(227,165,31)" fg:x="4696" fg:w="15"/><text x="4.0558%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (15 samples, 0.01%)</title><rect x="3.8058%" y="1045" width="0.0122%" height="15" fill="rgb(228,167,24)" fg:x="4696" fg:w="15"/><text x="4.0558%" y="1055.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (15 samples, 0.01%)</title><rect x="3.8058%" y="1029" width="0.0122%" height="15" fill="rgb(228,143,12)" fg:x="4696" fg:w="15"/><text x="4.0558%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (45 samples, 0.04%)</title><rect x="3.8252%" y="1077" width="0.0365%" height="15" fill="rgb(249,149,8)" fg:x="4720" fg:w="45"/><text x="4.0752%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (19 samples, 0.02%)</title><rect x="3.8463%" y="1061" width="0.0154%" height="15" fill="rgb(243,35,44)" fg:x="4746" fg:w="19"/><text x="4.0963%" y="1071.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (19 samples, 0.02%)</title><rect x="3.8463%" y="1045" width="0.0154%" height="15" fill="rgb(246,89,9)" fg:x="4746" fg:w="19"/><text x="4.0963%" y="1055.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="3.8463%" y="1029" width="0.0154%" height="15" fill="rgb(233,213,13)" fg:x="4746" fg:w="19"/><text x="4.0963%" y="1039.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="3.8463%" y="1013" width="0.0154%" height="15" fill="rgb(233,141,41)" fg:x="4746" fg:w="19"/><text x="4.0963%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (13 samples, 0.01%)</title><rect x="3.8625%" y="1077" width="0.0105%" height="15" fill="rgb(239,167,4)" fg:x="4766" fg:w="13"/><text x="4.1125%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (130 samples, 0.11%)</title><rect x="3.8731%" y="1077" width="0.1054%" height="15" fill="rgb(209,217,16)" fg:x="4779" fg:w="130"/><text x="4.1231%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (85 samples, 0.07%)</title><rect x="3.9095%" y="1061" width="0.0689%" height="15" fill="rgb(219,88,35)" fg:x="4824" fg:w="85"/><text x="4.1595%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (81 samples, 0.07%)</title><rect x="3.9128%" y="1045" width="0.0656%" height="15" fill="rgb(220,193,23)" fg:x="4828" fg:w="81"/><text x="4.1628%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (18 samples, 0.01%)</title><rect x="3.9784%" y="1077" width="0.0146%" height="15" fill="rgb(230,90,52)" fg:x="4909" fg:w="18"/><text x="4.2284%" y="1087.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="4.0116%" y="1061" width="0.0162%" height="15" fill="rgb(252,106,19)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="4.0116%" y="1045" width="0.0162%" height="15" fill="rgb(206,74,20)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (20 samples, 0.02%)</title><rect x="4.0116%" y="1029" width="0.0162%" height="15" fill="rgb(230,138,44)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (20 samples, 0.02%)</title><rect x="4.0116%" y="1013" width="0.0162%" height="15" fill="rgb(235,182,43)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.02%)</title><rect x="4.0116%" y="997" width="0.0162%" height="15" fill="rgb(242,16,51)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.02%)</title><rect x="4.0116%" y="981" width="0.0162%" height="15" fill="rgb(248,9,4)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.02%)</title><rect x="4.0116%" y="965" width="0.0162%" height="15" fill="rgb(210,31,22)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.02%)</title><rect x="4.0116%" y="949" width="0.0162%" height="15" fill="rgb(239,54,39)" fg:x="4950" fg:w="20"/><text x="4.2616%" y="959.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="4.0173%" y="933" width="0.0105%" height="15" fill="rgb(230,99,41)" fg:x="4957" fg:w="13"/><text x="4.2673%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="4.0173%" y="917" width="0.0105%" height="15" fill="rgb(253,106,12)" fg:x="4957" fg:w="13"/><text x="4.2673%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (57 samples, 0.05%)</title><rect x="3.9930%" y="1077" width="0.0462%" height="15" fill="rgb(213,46,41)" fg:x="4927" fg:w="57"/><text x="4.2430%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (17 samples, 0.01%)</title><rect x="4.0392%" y="1077" width="0.0138%" height="15" fill="rgb(215,133,35)" fg:x="4984" fg:w="17"/><text x="4.2892%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (21 samples, 0.02%)</title><rect x="4.0530%" y="1077" width="0.0170%" height="15" fill="rgb(213,28,5)" fg:x="5001" fg:w="21"/><text x="4.3030%" y="1087.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (19 samples, 0.02%)</title><rect x="4.0773%" y="1077" width="0.0154%" height="15" fill="rgb(215,77,49)" fg:x="5031" fg:w="19"/><text x="4.3273%" y="1087.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (44 samples, 0.04%)</title><rect x="4.0927%" y="1077" width="0.0357%" height="15" fill="rgb(248,100,22)" fg:x="5050" fg:w="44"/><text x="4.3427%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (18 samples, 0.01%)</title><rect x="4.1138%" y="1061" width="0.0146%" height="15" fill="rgb(208,67,9)" fg:x="5076" fg:w="18"/><text x="4.3638%" y="1071.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (17 samples, 0.01%)</title><rect x="4.1413%" y="1077" width="0.0138%" height="15" fill="rgb(219,133,21)" fg:x="5110" fg:w="17"/><text x="4.3913%" y="1087.50"></text></g><g><title>[anon] (4,898 samples, 3.97%)</title><rect x="0.1880%" y="1093" width="3.9695%" height="15" fill="rgb(246,46,29)" fg:x="232" fg:w="4898"/><text x="0.4380%" y="1103.50">[ano..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (30 samples, 0.02%)</title><rect x="4.2078%" y="1077" width="0.0243%" height="15" fill="rgb(246,185,52)" fg:x="5192" fg:w="30"/><text x="4.4578%" y="1087.50"></text></g><g><title>event_listener::Event::notify (15 samples, 0.01%)</title><rect x="4.2386%" y="1077" width="0.0122%" height="15" fill="rgb(252,136,11)" fg:x="5230" fg:w="15"/><text x="4.4886%" y="1087.50"></text></g><g><title>event_listener::full_fence (15 samples, 0.01%)</title><rect x="4.2386%" y="1061" width="0.0122%" height="15" fill="rgb(219,138,53)" fg:x="5230" fg:w="15"/><text x="4.4886%" y="1071.50"></text></g><g><title>[libc-2.31.so] (116 samples, 0.09%)</title><rect x="4.1575%" y="1093" width="0.0940%" height="15" fill="rgb(211,51,23)" fg:x="5130" fg:w="116"/><text x="4.4075%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="4.2515%" y="1077" width="0.0219%" height="15" fill="rgb(247,221,28)" fg:x="5246" fg:w="27"/><text x="4.5015%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (39 samples, 0.03%)</title><rect x="4.2799%" y="1077" width="0.0316%" height="15" fill="rgb(251,222,45)" fg:x="5281" fg:w="39"/><text x="4.5299%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (26 samples, 0.02%)</title><rect x="4.3123%" y="1077" width="0.0211%" height="15" fill="rgb(217,162,53)" fg:x="5321" fg:w="26"/><text x="4.5623%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (17 samples, 0.01%)</title><rect x="4.3334%" y="1077" width="0.0138%" height="15" fill="rgb(229,93,14)" fg:x="5347" fg:w="17"/><text x="4.5834%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="4.3520%" y="1077" width="0.0203%" height="15" fill="rgb(209,67,49)" fg:x="5370" fg:w="25"/><text x="4.6020%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="4.3723%" y="1077" width="0.0113%" height="15" fill="rgb(213,87,29)" fg:x="5395" fg:w="14"/><text x="4.6223%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="4.3917%" y="1077" width="0.0178%" height="15" fill="rgb(205,151,52)" fg:x="5419" fg:w="22"/><text x="4.6417%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (38 samples, 0.03%)</title><rect x="4.4104%" y="1077" width="0.0308%" height="15" fill="rgb(253,215,39)" fg:x="5442" fg:w="38"/><text x="4.6604%" y="1087.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (14 samples, 0.01%)</title><rect x="4.4412%" y="1077" width="0.0113%" height="15" fill="rgb(221,220,41)" fg:x="5480" fg:w="14"/><text x="4.6912%" y="1087.50"></text></g><g><title>[pdk-noknownkey] (255 samples, 0.21%)</title><rect x="4.2515%" y="1093" width="0.2067%" height="15" fill="rgb(218,133,21)" fg:x="5246" fg:w="255"/><text x="4.5015%" y="1103.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (62 samples, 0.05%)</title><rect x="4.4598%" y="1077" width="0.0502%" height="15" fill="rgb(221,193,43)" fg:x="5503" fg:w="62"/><text x="4.7098%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (14 samples, 0.01%)</title><rect x="4.4987%" y="1061" width="0.0113%" height="15" fill="rgb(240,128,52)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (14 samples, 0.01%)</title><rect x="4.4987%" y="1045" width="0.0113%" height="15" fill="rgb(253,114,12)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (14 samples, 0.01%)</title><rect x="4.4987%" y="1029" width="0.0113%" height="15" fill="rgb(215,223,47)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="4.4987%" y="1013" width="0.0113%" height="15" fill="rgb(248,225,23)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="4.4987%" y="997" width="0.0113%" height="15" fill="rgb(250,108,0)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="4.4987%" y="981" width="0.0113%" height="15" fill="rgb(228,208,7)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="4.4987%" y="965" width="0.0113%" height="15" fill="rgb(244,45,10)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="4.4987%" y="949" width="0.0113%" height="15" fill="rgb(207,125,25)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="959.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="4.4987%" y="933" width="0.0113%" height="15" fill="rgb(210,195,18)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="943.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="4.4987%" y="917" width="0.0113%" height="15" fill="rgb(249,80,12)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="4.4987%" y="901" width="0.0113%" height="15" fill="rgb(221,65,9)" fg:x="5551" fg:w="14"/><text x="4.7487%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (82 samples, 0.07%)</title><rect x="4.5198%" y="1077" width="0.0665%" height="15" fill="rgb(235,49,36)" fg:x="5577" fg:w="82"/><text x="4.7698%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (20 samples, 0.02%)</title><rect x="4.6721%" y="853" width="0.0162%" height="15" fill="rgb(225,32,20)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="4.6721%" y="837" width="0.0162%" height="15" fill="rgb(215,141,46)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (20 samples, 0.02%)</title><rect x="4.6721%" y="821" width="0.0162%" height="15" fill="rgb(250,160,47)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="4.6721%" y="805" width="0.0162%" height="15" fill="rgb(216,222,40)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (20 samples, 0.02%)</title><rect x="4.6721%" y="789" width="0.0162%" height="15" fill="rgb(234,217,39)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="4.6721%" y="773" width="0.0162%" height="15" fill="rgb(207,178,40)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (20 samples, 0.02%)</title><rect x="4.6721%" y="757" width="0.0162%" height="15" fill="rgb(221,136,13)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="4.6721%" y="741" width="0.0162%" height="15" fill="rgb(249,199,10)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="751.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (20 samples, 0.02%)</title><rect x="4.6721%" y="725" width="0.0162%" height="15" fill="rgb(249,222,13)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="4.6721%" y="709" width="0.0162%" height="15" fill="rgb(244,185,38)" fg:x="5765" fg:w="20"/><text x="4.9221%" y="719.50"></text></g><g><title>[libc-2.31.so] (165 samples, 0.13%)</title><rect x="4.7175%" y="821" width="0.1337%" height="15" fill="rgb(236,202,9)" fg:x="5821" fg:w="165"/><text x="4.9675%" y="831.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (17 samples, 0.01%)</title><rect x="5.0101%" y="805" width="0.0138%" height="15" fill="rgb(250,229,37)" fg:x="6182" fg:w="17"/><text x="5.2601%" y="815.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.01%)</title><rect x="5.0239%" y="805" width="0.0122%" height="15" fill="rgb(206,174,23)" fg:x="6199" fg:w="15"/><text x="5.2739%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (14 samples, 0.01%)</title><rect x="5.0360%" y="805" width="0.0113%" height="15" fill="rgb(211,33,43)" fg:x="6214" fg:w="14"/><text x="5.2860%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.03%)</title><rect x="5.0474%" y="789" width="0.0251%" height="15" fill="rgb(245,58,50)" fg:x="6228" fg:w="31"/><text x="5.2974%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (292 samples, 0.24%)</title><rect x="5.0474%" y="805" width="0.2366%" height="15" fill="rgb(244,68,36)" fg:x="6228" fg:w="292"/><text x="5.2974%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (261 samples, 0.21%)</title><rect x="5.0725%" y="789" width="0.2115%" height="15" fill="rgb(232,229,15)" fg:x="6259" fg:w="261"/><text x="5.3225%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (260 samples, 0.21%)</title><rect x="5.0733%" y="773" width="0.2107%" height="15" fill="rgb(254,30,23)" fg:x="6260" fg:w="260"/><text x="5.3233%" y="783.50"></text></g><g><title>core::ptr::read (260 samples, 0.21%)</title><rect x="5.0733%" y="757" width="0.2107%" height="15" fill="rgb(235,160,14)" fg:x="6260" fg:w="260"/><text x="5.3233%" y="767.50"></text></g><g><title>[libc-2.31.so] (257 samples, 0.21%)</title><rect x="5.0757%" y="741" width="0.2083%" height="15" fill="rgb(212,155,44)" fg:x="6263" fg:w="257"/><text x="5.3257%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.02%)</title><rect x="5.2889%" y="677" width="0.0170%" height="15" fill="rgb(226,2,50)" fg:x="6526" fg:w="21"/><text x="5.5389%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.02%)</title><rect x="5.2889%" y="661" width="0.0170%" height="15" fill="rgb(234,177,6)" fg:x="6526" fg:w="21"/><text x="5.5389%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.02%)</title><rect x="5.2889%" y="645" width="0.0170%" height="15" fill="rgb(217,24,9)" fg:x="6526" fg:w="21"/><text x="5.5389%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="5.2905%" y="629" width="0.0154%" height="15" fill="rgb(220,13,46)" fg:x="6528" fg:w="19"/><text x="5.5405%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="5.2905%" y="613" width="0.0154%" height="15" fill="rgb(239,221,27)" fg:x="6528" fg:w="19"/><text x="5.5405%" y="623.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="5.2905%" y="597" width="0.0154%" height="15" fill="rgb(222,198,25)" fg:x="6528" fg:w="19"/><text x="5.5405%" y="607.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="5.2905%" y="581" width="0.0154%" height="15" fill="rgb(211,99,13)" fg:x="6528" fg:w="19"/><text x="5.5405%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="5.2905%" y="565" width="0.0154%" height="15" fill="rgb(232,111,31)" fg:x="6528" fg:w="19"/><text x="5.5405%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (83 samples, 0.07%)</title><rect x="5.2881%" y="805" width="0.0673%" height="15" fill="rgb(245,82,37)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (83 samples, 0.07%)</title><rect x="5.2881%" y="789" width="0.0673%" height="15" fill="rgb(227,149,46)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (83 samples, 0.07%)</title><rect x="5.2881%" y="773" width="0.0673%" height="15" fill="rgb(218,36,50)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (83 samples, 0.07%)</title><rect x="5.2881%" y="757" width="0.0673%" height="15" fill="rgb(226,80,48)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (83 samples, 0.07%)</title><rect x="5.2881%" y="741" width="0.0673%" height="15" fill="rgb(238,224,15)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (83 samples, 0.07%)</title><rect x="5.2881%" y="725" width="0.0673%" height="15" fill="rgb(241,136,10)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (83 samples, 0.07%)</title><rect x="5.2881%" y="709" width="0.0673%" height="15" fill="rgb(208,32,45)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (83 samples, 0.07%)</title><rect x="5.2881%" y="693" width="0.0673%" height="15" fill="rgb(207,135,9)" fg:x="6525" fg:w="83"/><text x="5.5381%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (61 samples, 0.05%)</title><rect x="5.3059%" y="677" width="0.0494%" height="15" fill="rgb(206,86,44)" fg:x="6547" fg:w="61"/><text x="5.5559%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61 samples, 0.05%)</title><rect x="5.3059%" y="661" width="0.0494%" height="15" fill="rgb(245,177,15)" fg:x="6547" fg:w="61"/><text x="5.5559%" y="671.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.04%)</title><rect x="5.3156%" y="645" width="0.0397%" height="15" fill="rgb(206,64,50)" fg:x="6559" fg:w="49"/><text x="5.5656%" y="655.50"></text></g><g><title>[libc-2.31.so] (981 samples, 0.80%)</title><rect x="5.3553%" y="805" width="0.7950%" height="15" fill="rgb(234,36,40)" fg:x="6608" fg:w="981"/><text x="5.6053%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (14 samples, 0.01%)</title><rect x="6.1504%" y="805" width="0.0113%" height="15" fill="rgb(213,64,8)" fg:x="7589" fg:w="14"/><text x="6.4004%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (14 samples, 0.01%)</title><rect x="6.1617%" y="805" width="0.0113%" height="15" fill="rgb(210,75,36)" fg:x="7603" fg:w="14"/><text x="6.4117%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="6.1617%" y="789" width="0.0113%" height="15" fill="rgb(229,88,21)" fg:x="7603" fg:w="14"/><text x="6.4117%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last_mut (13 samples, 0.01%)</title><rect x="6.1731%" y="805" width="0.0105%" height="15" fill="rgb(252,204,47)" fg:x="7617" fg:w="13"/><text x="6.4231%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,912 samples, 1.55%)</title><rect x="4.6721%" y="1061" width="1.5495%" height="15" fill="rgb(208,77,27)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (1,912 samples, 1.55%)</title><rect x="4.6721%" y="1045" width="1.5495%" height="15" fill="rgb(221,76,26)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,912 samples, 1.55%)</title><rect x="4.6721%" y="1029" width="1.5495%" height="15" fill="rgb(225,139,18)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,912 samples, 1.55%)</title><rect x="4.6721%" y="1013" width="1.5495%" height="15" fill="rgb(230,137,11)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,912 samples, 1.55%)</title><rect x="4.6721%" y="997" width="1.5495%" height="15" fill="rgb(212,28,1)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="1007.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,912 samples, 1.55%)</title><rect x="4.6721%" y="981" width="1.5495%" height="15" fill="rgb(248,164,17)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="991.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,912 samples, 1.55%)</title><rect x="4.6721%" y="965" width="1.5495%" height="15" fill="rgb(222,171,42)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="975.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,912 samples, 1.55%)</title><rect x="4.6721%" y="949" width="1.5495%" height="15" fill="rgb(243,84,45)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,912 samples, 1.55%)</title><rect x="4.6721%" y="933" width="1.5495%" height="15" fill="rgb(252,49,23)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,912 samples, 1.55%)</title><rect x="4.6721%" y="917" width="1.5495%" height="15" fill="rgb(215,19,7)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,912 samples, 1.55%)</title><rect x="4.6721%" y="901" width="1.5495%" height="15" fill="rgb(238,81,41)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="911.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,912 samples, 1.55%)</title><rect x="4.6721%" y="885" width="1.5495%" height="15" fill="rgb(210,199,37)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,912 samples, 1.55%)</title><rect x="4.6721%" y="869" width="1.5495%" height="15" fill="rgb(244,192,49)" fg:x="5765" fg:w="1912"/><text x="4.9221%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,892 samples, 1.53%)</title><rect x="4.6883%" y="853" width="1.5333%" height="15" fill="rgb(226,211,11)" fg:x="5785" fg:w="1892"/><text x="4.9383%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,892 samples, 1.53%)</title><rect x="4.6883%" y="837" width="1.5333%" height="15" fill="rgb(236,162,54)" fg:x="5785" fg:w="1892"/><text x="4.9383%" y="847.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,691 samples, 1.37%)</title><rect x="4.8512%" y="821" width="1.3704%" height="15" fill="rgb(220,229,9)" fg:x="5986" fg:w="1691"/><text x="5.1012%" y="831.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (47 samples, 0.04%)</title><rect x="6.1836%" y="805" width="0.0381%" height="15" fill="rgb(250,87,22)" fg:x="7630" fg:w="47"/><text x="6.4336%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (47 samples, 0.04%)</title><rect x="6.1836%" y="789" width="0.0381%" height="15" fill="rgb(239,43,17)" fg:x="7630" fg:w="47"/><text x="6.4336%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (47 samples, 0.04%)</title><rect x="6.1836%" y="773" width="0.0381%" height="15" fill="rgb(231,177,25)" fg:x="7630" fg:w="47"/><text x="6.4336%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22 samples, 0.02%)</title><rect x="6.2039%" y="757" width="0.0178%" height="15" fill="rgb(219,179,1)" fg:x="7655" fg:w="22"/><text x="6.4539%" y="767.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.11%)</title><rect x="6.2314%" y="677" width="0.1110%" height="15" fill="rgb(238,219,53)" fg:x="7689" fg:w="137"/><text x="6.4814%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="1061" width="0.1434%" height="15" fill="rgb(232,167,36)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="1045" width="0.1434%" height="15" fill="rgb(244,19,51)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="1029" width="0.1434%" height="15" fill="rgb(224,6,22)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="1039.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="1013" width="0.1434%" height="15" fill="rgb(224,145,5)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="1023.50"></text></g><g><title>async_task::runnable::Runnable::run (177 samples, 0.14%)</title><rect x="6.2217%" y="997" width="0.1434%" height="15" fill="rgb(234,130,49)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="1007.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (177 samples, 0.14%)</title><rect x="6.2217%" y="981" width="0.1434%" height="15" fill="rgb(254,6,2)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="991.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="965" width="0.1434%" height="15" fill="rgb(208,96,46)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="949" width="0.1434%" height="15" fill="rgb(239,3,39)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="959.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="933" width="0.1434%" height="15" fill="rgb(233,210,1)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="943.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="917" width="0.1434%" height="15" fill="rgb(244,137,37)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (177 samples, 0.14%)</title><rect x="6.2217%" y="901" width="0.1434%" height="15" fill="rgb(240,136,2)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (177 samples, 0.14%)</title><rect x="6.2217%" y="885" width="0.1434%" height="15" fill="rgb(239,18,37)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (177 samples, 0.14%)</title><rect x="6.2217%" y="869" width="0.1434%" height="15" fill="rgb(218,185,22)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="879.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="853" width="0.1434%" height="15" fill="rgb(225,218,4)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="863.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="837" width="0.1434%" height="15" fill="rgb(230,182,32)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="821" width="0.1434%" height="15" fill="rgb(242,56,43)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="805" width="0.1434%" height="15" fill="rgb(233,99,24)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="789" width="0.1434%" height="15" fill="rgb(234,209,42)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="773" width="0.1434%" height="15" fill="rgb(227,7,12)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="757" width="0.1434%" height="15" fill="rgb(245,203,43)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="741" width="0.1434%" height="15" fill="rgb(238,205,33)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="725" width="0.1434%" height="15" fill="rgb(231,56,7)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (177 samples, 0.14%)</title><rect x="6.2217%" y="709" width="0.1434%" height="15" fill="rgb(244,186,29)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.14%)</title><rect x="6.2217%" y="693" width="0.1434%" height="15" fill="rgb(234,111,31)" fg:x="7677" fg:w="177"/><text x="6.4717%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (28 samples, 0.02%)</title><rect x="6.3424%" y="677" width="0.0227%" height="15" fill="rgb(241,149,10)" fg:x="7826" fg:w="28"/><text x="6.5924%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (52 samples, 0.04%)</title><rect x="7.1221%" y="565" width="0.0421%" height="15" fill="rgb(249,206,44)" fg:x="8788" fg:w="52"/><text x="7.3721%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (52 samples, 0.04%)</title><rect x="7.1221%" y="549" width="0.0421%" height="15" fill="rgb(251,153,30)" fg:x="8788" fg:w="52"/><text x="7.3721%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (52 samples, 0.04%)</title><rect x="7.1221%" y="533" width="0.0421%" height="15" fill="rgb(239,152,38)" fg:x="8788" fg:w="52"/><text x="7.3721%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,500 samples, 1.22%)</title><rect x="7.2064%" y="549" width="1.2156%" height="15" fill="rgb(249,139,47)" fg:x="8892" fg:w="1500"/><text x="7.4564%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (153 samples, 0.12%)</title><rect x="8.5655%" y="533" width="0.1240%" height="15" fill="rgb(244,64,35)" fg:x="10569" fg:w="153"/><text x="8.8155%" y="543.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (1,910 samples, 1.55%)</title><rect x="7.1675%" y="565" width="1.5479%" height="15" fill="rgb(216,46,15)" fg:x="8844" fg:w="1910"/><text x="7.4175%" y="575.50"></text></g><g><title>sn_rust_alloc (362 samples, 0.29%)</title><rect x="8.4220%" y="549" width="0.2934%" height="15" fill="rgb(250,74,19)" fg:x="10392" fg:w="362"/><text x="8.6720%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (32 samples, 0.03%)</title><rect x="8.6895%" y="533" width="0.0259%" height="15" fill="rgb(249,42,33)" fg:x="10722" fg:w="32"/><text x="8.9395%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (26 samples, 0.02%)</title><rect x="8.8750%" y="437" width="0.0211%" height="15" fill="rgb(242,149,17)" fg:x="10951" fg:w="26"/><text x="9.1250%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="8.8799%" y="421" width="0.0162%" height="15" fill="rgb(244,29,21)" fg:x="10957" fg:w="20"/><text x="9.1299%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (20 samples, 0.02%)</title><rect x="8.8799%" y="405" width="0.0162%" height="15" fill="rgb(220,130,37)" fg:x="10957" fg:w="20"/><text x="9.1299%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="8.9156%" y="389" width="0.0219%" height="15" fill="rgb(211,67,2)" fg:x="11001" fg:w="27"/><text x="9.1656%" y="399.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (13 samples, 0.01%)</title><rect x="8.9447%" y="357" width="0.0105%" height="15" fill="rgb(235,68,52)" fg:x="11037" fg:w="13"/><text x="9.1947%" y="367.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (13 samples, 0.01%)</title><rect x="8.9447%" y="341" width="0.0105%" height="15" fill="rgb(246,142,3)" fg:x="11037" fg:w="13"/><text x="9.1947%" y="351.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (13 samples, 0.01%)</title><rect x="8.9447%" y="325" width="0.0105%" height="15" fill="rgb(241,25,7)" fg:x="11037" fg:w="13"/><text x="9.1947%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="8.9447%" y="309" width="0.0105%" height="15" fill="rgb(242,119,39)" fg:x="11037" fg:w="13"/><text x="9.1947%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (13 samples, 0.01%)</title><rect x="8.9447%" y="293" width="0.0105%" height="15" fill="rgb(241,98,45)" fg:x="11037" fg:w="13"/><text x="9.1947%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (146 samples, 0.12%)</title><rect x="8.9553%" y="293" width="0.1183%" height="15" fill="rgb(254,28,30)" fg:x="11050" fg:w="146"/><text x="9.2053%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (146 samples, 0.12%)</title><rect x="8.9553%" y="277" width="0.1183%" height="15" fill="rgb(241,142,54)" fg:x="11050" fg:w="146"/><text x="9.2053%" y="287.50"></text></g><g><title>__rg_dealloc (146 samples, 0.12%)</title><rect x="8.9553%" y="261" width="0.1183%" height="15" fill="rgb(222,85,15)" fg:x="11050" fg:w="146"/><text x="9.2053%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (146 samples, 0.12%)</title><rect x="8.9553%" y="245" width="0.1183%" height="15" fill="rgb(210,85,47)" fg:x="11050" fg:w="146"/><text x="9.2053%" y="255.50"></text></g><g><title>sn_rust_dealloc (130 samples, 0.11%)</title><rect x="8.9682%" y="229" width="0.1054%" height="15" fill="rgb(224,206,25)" fg:x="11066" fg:w="130"/><text x="9.2182%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (229 samples, 0.19%)</title><rect x="8.8985%" y="437" width="0.1856%" height="15" fill="rgb(243,201,19)" fg:x="10980" fg:w="229"/><text x="9.1485%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (224 samples, 0.18%)</title><rect x="8.9026%" y="421" width="0.1815%" height="15" fill="rgb(236,59,4)" fg:x="10985" fg:w="224"/><text x="9.1526%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (224 samples, 0.18%)</title><rect x="8.9026%" y="405" width="0.1815%" height="15" fill="rgb(254,179,45)" fg:x="10985" fg:w="224"/><text x="9.1526%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (174 samples, 0.14%)</title><rect x="8.9431%" y="389" width="0.1410%" height="15" fill="rgb(226,14,10)" fg:x="11035" fg:w="174"/><text x="9.1931%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (174 samples, 0.14%)</title><rect x="8.9431%" y="373" width="0.1410%" height="15" fill="rgb(244,27,41)" fg:x="11035" fg:w="174"/><text x="9.1931%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (159 samples, 0.13%)</title><rect x="8.9553%" y="357" width="0.1289%" height="15" fill="rgb(235,35,32)" fg:x="11050" fg:w="159"/><text x="9.2053%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 samples, 0.13%)</title><rect x="8.9553%" y="341" width="0.1289%" height="15" fill="rgb(218,68,31)" fg:x="11050" fg:w="159"/><text x="9.2053%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (159 samples, 0.13%)</title><rect x="8.9553%" y="325" width="0.1289%" height="15" fill="rgb(207,120,37)" fg:x="11050" fg:w="159"/><text x="9.2053%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 samples, 0.13%)</title><rect x="8.9553%" y="309" width="0.1289%" height="15" fill="rgb(227,98,0)" fg:x="11050" fg:w="159"/><text x="9.2053%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (13 samples, 0.01%)</title><rect x="9.0736%" y="293" width="0.0105%" height="15" fill="rgb(207,7,3)" fg:x="11196" fg:w="13"/><text x="9.3236%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (266 samples, 0.22%)</title><rect x="8.8702%" y="453" width="0.2156%" height="15" fill="rgb(206,98,19)" fg:x="10945" fg:w="266"/><text x="9.1202%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (73 samples, 0.06%)</title><rect x="9.0858%" y="453" width="0.0592%" height="15" fill="rgb(217,5,26)" fg:x="11211" fg:w="73"/><text x="9.3358%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (54 samples, 0.04%)</title><rect x="9.1012%" y="437" width="0.0438%" height="15" fill="rgb(235,190,38)" fg:x="11230" fg:w="54"/><text x="9.3512%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (54 samples, 0.04%)</title><rect x="9.1012%" y="421" width="0.0438%" height="15" fill="rgb(247,86,24)" fg:x="11230" fg:w="54"/><text x="9.3512%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (228 samples, 0.18%)</title><rect x="9.1571%" y="389" width="0.1848%" height="15" fill="rgb(205,101,16)" fg:x="11299" fg:w="228"/><text x="9.4071%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (228 samples, 0.18%)</title><rect x="9.1571%" y="373" width="0.1848%" height="15" fill="rgb(246,168,33)" fg:x="11299" fg:w="228"/><text x="9.4071%" y="383.50"></text></g><g><title>alloc::alloc::alloc (219 samples, 0.18%)</title><rect x="9.1644%" y="357" width="0.1775%" height="15" fill="rgb(231,114,1)" fg:x="11308" fg:w="219"/><text x="9.4144%" y="367.50"></text></g><g><title>__rg_alloc (219 samples, 0.18%)</title><rect x="9.1644%" y="341" width="0.1775%" height="15" fill="rgb(207,184,53)" fg:x="11308" fg:w="219"/><text x="9.4144%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (219 samples, 0.18%)</title><rect x="9.1644%" y="325" width="0.1775%" height="15" fill="rgb(224,95,51)" fg:x="11308" fg:w="219"/><text x="9.4144%" y="335.50"></text></g><g><title>sn_rust_alloc (208 samples, 0.17%)</title><rect x="9.1733%" y="309" width="0.1686%" height="15" fill="rgb(212,188,45)" fg:x="11319" fg:w="208"/><text x="9.4233%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (3,700 samples, 3.00%)</title><rect x="6.3676%" y="933" width="2.9986%" height="15" fill="rgb(223,154,38)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="943.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,700 samples, 3.00%)</title><rect x="6.3676%" y="917" width="2.9986%" height="15" fill="rgb(251,22,52)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="927.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (3,700 samples, 3.00%)</title><rect x="6.3676%" y="901" width="2.9986%" height="15" fill="rgb(229,209,22)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="911.50">tre..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,700 samples, 3.00%)</title><rect x="6.3676%" y="885" width="2.9986%" height="15" fill="rgb(234,138,34)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="895.50">&lt;as..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,700 samples, 3.00%)</title><rect x="6.3676%" y="869" width="2.9986%" height="15" fill="rgb(212,95,11)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="879.50">&lt;as..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,700 samples, 3.00%)</title><rect x="6.3676%" y="853" width="2.9986%" height="15" fill="rgb(240,179,47)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="863.50">&lt;co..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,700 samples, 3.00%)</title><rect x="6.3676%" y="837" width="2.9986%" height="15" fill="rgb(240,163,11)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="847.50">&lt;as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,700 samples, 3.00%)</title><rect x="6.3676%" y="821" width="2.9986%" height="15" fill="rgb(236,37,12)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="831.50">asy..</text></g><g><title>std::panic::catch_unwind (3,700 samples, 3.00%)</title><rect x="6.3676%" y="805" width="2.9986%" height="15" fill="rgb(232,164,16)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="815.50">std..</text></g><g><title>std::panicking::try (3,700 samples, 3.00%)</title><rect x="6.3676%" y="789" width="2.9986%" height="15" fill="rgb(244,205,15)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="799.50">std..</text></g><g><title>std::panicking::try::do_call (3,700 samples, 3.00%)</title><rect x="6.3676%" y="773" width="2.9986%" height="15" fill="rgb(223,117,47)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="783.50">std..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,700 samples, 3.00%)</title><rect x="6.3676%" y="757" width="2.9986%" height="15" fill="rgb(244,107,35)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="767.50">&lt;co..</text></g><g><title>core::ops::function::FnOnce::call_once (3,700 samples, 3.00%)</title><rect x="6.3676%" y="741" width="2.9986%" height="15" fill="rgb(205,140,8)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="751.50">cor..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,700 samples, 3.00%)</title><rect x="6.3676%" y="725" width="2.9986%" height="15" fill="rgb(228,84,46)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="735.50">asy..</text></g><g><title>async_ffi::FfiContext::with_context (3,700 samples, 3.00%)</title><rect x="6.3676%" y="709" width="2.9986%" height="15" fill="rgb(254,188,9)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="719.50">asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,700 samples, 3.00%)</title><rect x="6.3676%" y="693" width="2.9986%" height="15" fill="rgb(206,112,54)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="703.50">asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,700 samples, 3.00%)</title><rect x="6.3676%" y="677" width="2.9986%" height="15" fill="rgb(216,84,49)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="687.50">&lt;co..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (3,700 samples, 3.00%)</title><rect x="6.3676%" y="661" width="2.9986%" height="15" fill="rgb(214,194,35)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="671.50">&lt;tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (3,700 samples, 3.00%)</title><rect x="6.3676%" y="645" width="2.9986%" height="15" fill="rgb(249,28,3)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="655.50">tre..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (3,700 samples, 3.00%)</title><rect x="6.3676%" y="629" width="2.9986%" height="15" fill="rgb(222,56,52)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="639.50">tre..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (3,700 samples, 3.00%)</title><rect x="6.3676%" y="613" width="2.9986%" height="15" fill="rgb(245,217,50)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="623.50">tre..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (3,700 samples, 3.00%)</title><rect x="6.3676%" y="597" width="2.9986%" height="15" fill="rgb(213,201,24)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="607.50">tre..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (3,700 samples, 3.00%)</title><rect x="6.3676%" y="581" width="2.9986%" height="15" fill="rgb(248,116,28)" fg:x="7857" fg:w="3700"/><text x="6.6176%" y="591.50">&lt;tr..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (803 samples, 0.65%)</title><rect x="8.7154%" y="565" width="0.6508%" height="15" fill="rgb(219,72,43)" fg:x="10754" fg:w="803"/><text x="8.9654%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (803 samples, 0.65%)</title><rect x="8.7154%" y="549" width="0.6508%" height="15" fill="rgb(209,138,14)" fg:x="10754" fg:w="803"/><text x="8.9654%" y="559.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (803 samples, 0.65%)</title><rect x="8.7154%" y="533" width="0.6508%" height="15" fill="rgb(222,18,33)" fg:x="10754" fg:w="803"/><text x="8.9654%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (795 samples, 0.64%)</title><rect x="8.7219%" y="517" width="0.6443%" height="15" fill="rgb(213,199,7)" fg:x="10762" fg:w="795"/><text x="8.9719%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (795 samples, 0.64%)</title><rect x="8.7219%" y="501" width="0.6443%" height="15" fill="rgb(250,110,10)" fg:x="10762" fg:w="795"/><text x="8.9719%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (787 samples, 0.64%)</title><rect x="8.7284%" y="485" width="0.6378%" height="15" fill="rgb(248,123,6)" fg:x="10770" fg:w="787"/><text x="8.9784%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (618 samples, 0.50%)</title><rect x="8.8653%" y="469" width="0.5008%" height="15" fill="rgb(206,91,31)" fg:x="10939" fg:w="618"/><text x="9.1153%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (273 samples, 0.22%)</title><rect x="9.1449%" y="453" width="0.2212%" height="15" fill="rgb(211,154,13)" fg:x="11284" fg:w="273"/><text x="9.3949%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (273 samples, 0.22%)</title><rect x="9.1449%" y="437" width="0.2212%" height="15" fill="rgb(225,148,7)" fg:x="11284" fg:w="273"/><text x="9.3949%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (263 samples, 0.21%)</title><rect x="9.1530%" y="421" width="0.2131%" height="15" fill="rgb(220,160,43)" fg:x="11294" fg:w="263"/><text x="9.4030%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (263 samples, 0.21%)</title><rect x="9.1530%" y="405" width="0.2131%" height="15" fill="rgb(213,52,39)" fg:x="11294" fg:w="263"/><text x="9.4030%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (30 samples, 0.02%)</title><rect x="9.3418%" y="389" width="0.0243%" height="15" fill="rgb(243,137,7)" fg:x="11527" fg:w="30"/><text x="9.5918%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (30 samples, 0.02%)</title><rect x="9.3418%" y="373" width="0.0243%" height="15" fill="rgb(230,79,13)" fg:x="11527" fg:w="30"/><text x="9.5918%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (30 samples, 0.02%)</title><rect x="9.3418%" y="357" width="0.0243%" height="15" fill="rgb(247,105,23)" fg:x="11527" fg:w="30"/><text x="9.5918%" y="367.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (300 samples, 0.24%)</title><rect x="9.5777%" y="805" width="0.2431%" height="15" fill="rgb(223,179,41)" fg:x="11818" fg:w="300"/><text x="9.8277%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (456 samples, 0.37%)</title><rect x="9.5534%" y="821" width="0.3696%" height="15" fill="rgb(218,9,34)" fg:x="11788" fg:w="456"/><text x="9.8034%" y="831.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (126 samples, 0.10%)</title><rect x="9.8208%" y="805" width="0.1021%" height="15" fill="rgb(222,106,8)" fg:x="12118" fg:w="126"/><text x="10.0708%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (19 samples, 0.02%)</title><rect x="9.9286%" y="821" width="0.0154%" height="15" fill="rgb(211,220,0)" fg:x="12251" fg:w="19"/><text x="10.1786%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (19 samples, 0.02%)</title><rect x="9.9286%" y="805" width="0.0154%" height="15" fill="rgb(229,52,16)" fg:x="12251" fg:w="19"/><text x="10.1786%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="9.9286%" y="789" width="0.0154%" height="15" fill="rgb(212,155,18)" fg:x="12251" fg:w="19"/><text x="10.1786%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (49 samples, 0.04%)</title><rect x="9.9440%" y="821" width="0.0397%" height="15" fill="rgb(242,21,14)" fg:x="12270" fg:w="49"/><text x="10.1940%" y="831.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="9.9521%" y="805" width="0.0316%" height="15" fill="rgb(222,19,48)" fg:x="12280" fg:w="39"/><text x="10.2021%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (789 samples, 0.64%)</title><rect x="9.3662%" y="837" width="0.6394%" height="15" fill="rgb(232,45,27)" fg:x="11557" fg:w="789"/><text x="9.6162%" y="847.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (27 samples, 0.02%)</title><rect x="9.9837%" y="821" width="0.0219%" height="15" fill="rgb(249,103,42)" fg:x="12319" fg:w="27"/><text x="10.2337%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (47 samples, 0.04%)</title><rect x="10.0445%" y="821" width="0.0381%" height="15" fill="rgb(246,81,33)" fg:x="12394" fg:w="47"/><text x="10.2945%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.04%)</title><rect x="10.0445%" y="805" width="0.0381%" height="15" fill="rgb(252,33,42)" fg:x="12394" fg:w="47"/><text x="10.2945%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.04%)</title><rect x="10.0445%" y="789" width="0.0381%" height="15" fill="rgb(209,212,41)" fg:x="12394" fg:w="47"/><text x="10.2945%" y="799.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="10.0445%" y="773" width="0.0381%" height="15" fill="rgb(207,154,6)" fg:x="12394" fg:w="47"/><text x="10.2945%" y="783.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="10.0445%" y="757" width="0.0381%" height="15" fill="rgb(223,64,47)" fg:x="12394" fg:w="47"/><text x="10.2945%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="10.0445%" y="741" width="0.0381%" height="15" fill="rgb(211,161,38)" fg:x="12394" fg:w="47"/><text x="10.2945%" y="751.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="10.0550%" y="725" width="0.0276%" height="15" fill="rgb(219,138,40)" fg:x="12407" fg:w="34"/><text x="10.3050%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (900 samples, 0.73%)</title><rect x="9.3662%" y="917" width="0.7294%" height="15" fill="rgb(241,228,46)" fg:x="11557" fg:w="900"/><text x="9.6162%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (900 samples, 0.73%)</title><rect x="9.3662%" y="901" width="0.7294%" height="15" fill="rgb(223,209,38)" fg:x="11557" fg:w="900"/><text x="9.6162%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (900 samples, 0.73%)</title><rect x="9.3662%" y="885" width="0.7294%" height="15" fill="rgb(236,164,45)" fg:x="11557" fg:w="900"/><text x="9.6162%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (900 samples, 0.73%)</title><rect x="9.3662%" y="869" width="0.7294%" height="15" fill="rgb(231,15,5)" fg:x="11557" fg:w="900"/><text x="9.6162%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (900 samples, 0.73%)</title><rect x="9.3662%" y="853" width="0.7294%" height="15" fill="rgb(252,35,15)" fg:x="11557" fg:w="900"/><text x="9.6162%" y="863.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (111 samples, 0.09%)</title><rect x="10.0056%" y="837" width="0.0900%" height="15" fill="rgb(248,181,18)" fg:x="12346" fg:w="111"/><text x="10.2556%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (902 samples, 0.73%)</title><rect x="9.3662%" y="933" width="0.7310%" height="15" fill="rgb(233,39,42)" fg:x="11557" fg:w="902"/><text x="9.6162%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (22 samples, 0.02%)</title><rect x="10.1604%" y="821" width="0.0178%" height="15" fill="rgb(238,110,33)" fg:x="12537" fg:w="22"/><text x="10.4104%" y="831.50"></text></g><g><title>core::mem::replace (22 samples, 0.02%)</title><rect x="10.1604%" y="805" width="0.0178%" height="15" fill="rgb(233,195,10)" fg:x="12537" fg:w="22"/><text x="10.4104%" y="815.50"></text></g><g><title>core::ptr::read (22 samples, 0.02%)</title><rect x="10.1604%" y="789" width="0.0178%" height="15" fill="rgb(254,105,3)" fg:x="12537" fg:w="22"/><text x="10.4104%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (239 samples, 0.19%)</title><rect x="10.2252%" y="805" width="0.1937%" height="15" fill="rgb(221,225,9)" fg:x="12617" fg:w="239"/><text x="10.4752%" y="815.50"></text></g><g><title>core::mem::replace (239 samples, 0.19%)</title><rect x="10.2252%" y="789" width="0.1937%" height="15" fill="rgb(224,227,45)" fg:x="12617" fg:w="239"/><text x="10.4752%" y="799.50"></text></g><g><title>core::ptr::read (238 samples, 0.19%)</title><rect x="10.2260%" y="773" width="0.1929%" height="15" fill="rgb(229,198,43)" fg:x="12618" fg:w="238"/><text x="10.4760%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (353 samples, 0.29%)</title><rect x="10.1782%" y="821" width="0.2861%" height="15" fill="rgb(206,209,35)" fg:x="12559" fg:w="353"/><text x="10.4282%" y="831.50"></text></g><g><title>core::mem::drop (56 samples, 0.05%)</title><rect x="10.4189%" y="805" width="0.0454%" height="15" fill="rgb(245,195,53)" fg:x="12856" fg:w="56"/><text x="10.6689%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (56 samples, 0.05%)</title><rect x="10.4189%" y="789" width="0.0454%" height="15" fill="rgb(240,92,26)" fg:x="12856" fg:w="56"/><text x="10.6689%" y="799.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="10.4643%" y="805" width="0.0138%" height="15" fill="rgb(207,40,23)" fg:x="12912" fg:w="17"/><text x="10.7143%" y="815.50"></text></g><g><title>std::sync::poison::Flag::done (13 samples, 0.01%)</title><rect x="10.4886%" y="773" width="0.0105%" height="15" fill="rgb(223,111,35)" fg:x="12942" fg:w="13"/><text x="10.7386%" y="783.50"></text></g><g><title>std::thread::panicking (13 samples, 0.01%)</title><rect x="10.4886%" y="757" width="0.0105%" height="15" fill="rgb(229,147,28)" fg:x="12942" fg:w="13"/><text x="10.7386%" y="767.50"></text></g><g><title>std::panicking::panicking (13 samples, 0.01%)</title><rect x="10.4886%" y="741" width="0.0105%" height="15" fill="rgb(211,29,28)" fg:x="12942" fg:w="13"/><text x="10.7386%" y="751.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (13 samples, 0.01%)</title><rect x="10.4886%" y="725" width="0.0105%" height="15" fill="rgb(228,72,33)" fg:x="12942" fg:w="13"/><text x="10.7386%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (297 samples, 0.24%)</title><rect x="10.4643%" y="821" width="0.2407%" height="15" fill="rgb(205,214,31)" fg:x="12912" fg:w="297"/><text x="10.7143%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (280 samples, 0.23%)</title><rect x="10.4781%" y="805" width="0.2269%" height="15" fill="rgb(224,111,15)" fg:x="12929" fg:w="280"/><text x="10.7281%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (280 samples, 0.23%)</title><rect x="10.4781%" y="789" width="0.2269%" height="15" fill="rgb(253,21,26)" fg:x="12929" fg:w="280"/><text x="10.7281%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (254 samples, 0.21%)</title><rect x="10.4991%" y="773" width="0.2058%" height="15" fill="rgb(245,139,43)" fg:x="12955" fg:w="254"/><text x="10.7491%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (254 samples, 0.21%)</title><rect x="10.4991%" y="757" width="0.2058%" height="15" fill="rgb(252,170,7)" fg:x="12955" fg:w="254"/><text x="10.7491%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (254 samples, 0.21%)</title><rect x="10.4991%" y="741" width="0.2058%" height="15" fill="rgb(231,118,14)" fg:x="12955" fg:w="254"/><text x="10.7491%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (254 samples, 0.21%)</title><rect x="10.4991%" y="725" width="0.2058%" height="15" fill="rgb(238,83,0)" fg:x="12955" fg:w="254"/><text x="10.7491%" y="735.50"></text></g><g><title>core::task::wake::Waker::will_wake (39 samples, 0.03%)</title><rect x="10.7147%" y="821" width="0.0316%" height="15" fill="rgb(221,39,39)" fg:x="13221" fg:w="39"/><text x="10.9647%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (39 samples, 0.03%)</title><rect x="10.7147%" y="805" width="0.0316%" height="15" fill="rgb(222,119,46)" fg:x="13221" fg:w="39"/><text x="10.9647%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (35 samples, 0.03%)</title><rect x="10.7180%" y="789" width="0.0284%" height="15" fill="rgb(222,165,49)" fg:x="13225" fg:w="35"/><text x="10.9680%" y="799.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (35 samples, 0.03%)</title><rect x="10.7180%" y="773" width="0.0284%" height="15" fill="rgb(219,113,52)" fg:x="13225" fg:w="35"/><text x="10.9680%" y="783.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="10.7536%" y="789" width="0.0211%" height="15" fill="rgb(214,7,15)" fg:x="13269" fg:w="26"/><text x="11.0036%" y="799.50"></text></g><g><title>std::sync::poison::Flag::borrow (26 samples, 0.02%)</title><rect x="10.7536%" y="773" width="0.0211%" height="15" fill="rgb(235,32,4)" fg:x="13269" fg:w="26"/><text x="11.0036%" y="783.50"></text></g><g><title>std::thread::panicking (16 samples, 0.01%)</title><rect x="10.7617%" y="757" width="0.0130%" height="15" fill="rgb(238,90,54)" fg:x="13279" fg:w="16"/><text x="11.0117%" y="767.50"></text></g><g><title>std::panicking::panicking (16 samples, 0.01%)</title><rect x="10.7617%" y="741" width="0.0130%" height="15" fill="rgb(213,208,19)" fg:x="13279" fg:w="16"/><text x="11.0117%" y="751.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (16 samples, 0.01%)</title><rect x="10.7617%" y="725" width="0.0130%" height="15" fill="rgb(233,156,4)" fg:x="13279" fg:w="16"/><text x="11.0117%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="10.7617%" y="709" width="0.0130%" height="15" fill="rgb(207,194,5)" fg:x="13279" fg:w="16"/><text x="11.0117%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="10.7617%" y="693" width="0.0130%" height="15" fill="rgb(206,111,30)" fg:x="13279" fg:w="16"/><text x="11.0117%" y="703.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (6,905 samples, 5.60%)</title><rect x="6.3651%" y="1061" width="5.5960%" height="15" fill="rgb(243,70,54)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="1071.50">async_e..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (6,905 samples, 5.60%)</title><rect x="6.3651%" y="1045" width="5.5960%" height="15" fill="rgb(242,28,8)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="1055.50">&lt;async_..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (6,905 samples, 5.60%)</title><rect x="6.3651%" y="1029" width="5.5960%" height="15" fill="rgb(219,106,18)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="1039.50">async_s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,905 samples, 5.60%)</title><rect x="6.3651%" y="1013" width="5.5960%" height="15" fill="rgb(244,222,10)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="1023.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,905 samples, 5.60%)</title><rect x="6.3651%" y="997" width="5.5960%" height="15" fill="rgb(236,179,52)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="1007.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,905 samples, 5.60%)</title><rect x="6.3651%" y="981" width="5.5960%" height="15" fill="rgb(213,23,39)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="991.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,905 samples, 5.60%)</title><rect x="6.3651%" y="965" width="5.5960%" height="15" fill="rgb(238,48,10)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="975.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,905 samples, 5.60%)</title><rect x="6.3651%" y="949" width="5.5960%" height="15" fill="rgb(251,196,23)" fg:x="7854" fg:w="6905"/><text x="6.6151%" y="959.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,300 samples, 1.86%)</title><rect x="10.0972%" y="933" width="1.8640%" height="15" fill="rgb(250,152,24)" fg:x="12459" fg:w="2300"/><text x="10.3472%" y="943.50">t..</text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,300 samples, 1.86%)</title><rect x="10.0972%" y="917" width="1.8640%" height="15" fill="rgb(209,150,17)" fg:x="12459" fg:w="2300"/><text x="10.3472%" y="927.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,300 samples, 1.86%)</title><rect x="10.0972%" y="901" width="1.8640%" height="15" fill="rgb(234,202,34)" fg:x="12459" fg:w="2300"/><text x="10.3472%" y="911.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,300 samples, 1.86%)</title><rect x="10.0972%" y="885" width="1.8640%" height="15" fill="rgb(253,148,53)" fg:x="12459" fg:w="2300"/><text x="10.3472%" y="895.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,300 samples, 1.86%)</title><rect x="10.0972%" y="869" width="1.8640%" height="15" fill="rgb(218,129,16)" fg:x="12459" fg:w="2300"/><text x="10.3472%" y="879.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,300 samples, 1.86%)</title><rect x="10.0972%" y="853" width="1.8640%" height="15" fill="rgb(216,85,19)" fg:x="12459" fg:w="2300"/><text x="10.3472%" y="863.50">&lt;..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,300 samples, 1.86%)</title><rect x="10.0972%" y="837" width="1.8640%" height="15" fill="rgb(235,228,7)" fg:x="12459" fg:w="2300"/><text x="10.3472%" y="847.50">&lt;..</text></g><g><title>event_listener::Inner::lock (1,499 samples, 1.21%)</title><rect x="10.7463%" y="821" width="1.2148%" height="15" fill="rgb(245,175,0)" fg:x="13260" fg:w="1499"/><text x="10.9963%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,490 samples, 1.21%)</title><rect x="10.7536%" y="805" width="1.2075%" height="15" fill="rgb(208,168,36)" fg:x="13269" fg:w="1490"/><text x="11.0036%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,464 samples, 1.19%)</title><rect x="10.7747%" y="789" width="1.1865%" height="15" fill="rgb(246,171,24)" fg:x="13295" fg:w="1464"/><text x="11.0247%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (1,464 samples, 1.19%)</title><rect x="10.7747%" y="773" width="1.1865%" height="15" fill="rgb(215,142,24)" fg:x="13295" fg:w="1464"/><text x="11.0247%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1,463 samples, 1.19%)</title><rect x="10.7755%" y="757" width="1.1857%" height="15" fill="rgb(250,187,7)" fg:x="13296" fg:w="1463"/><text x="11.0255%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,463 samples, 1.19%)</title><rect x="10.7755%" y="741" width="1.1857%" height="15" fill="rgb(228,66,33)" fg:x="13296" fg:w="1463"/><text x="11.0255%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,102 samples, 7.38%)</title><rect x="4.5862%" y="1077" width="7.3766%" height="15" fill="rgb(234,215,21)" fg:x="5659" fg:w="9102"/><text x="4.8362%" y="1087.50">&lt;core::fut..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (33 samples, 0.03%)</title><rect x="11.9628%" y="1077" width="0.0267%" height="15" fill="rgb(222,191,20)" fg:x="14761" fg:w="33"/><text x="12.2128%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (15 samples, 0.01%)</title><rect x="12.0098%" y="1077" width="0.0122%" height="15" fill="rgb(245,79,54)" fg:x="14819" fg:w="15"/><text x="12.2598%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (15 samples, 0.01%)</title><rect x="12.0219%" y="1077" width="0.0122%" height="15" fill="rgb(240,10,37)" fg:x="14834" fg:w="15"/><text x="12.2719%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (53 samples, 0.04%)</title><rect x="12.0341%" y="1077" width="0.0430%" height="15" fill="rgb(214,192,32)" fg:x="14849" fg:w="53"/><text x="12.2841%" y="1087.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.14%)</title><rect x="12.0787%" y="1077" width="0.1402%" height="15" fill="rgb(209,36,54)" fg:x="14904" fg:w="173"/><text x="12.3287%" y="1087.50"></text></g><g><title>__clock_gettime (109 samples, 0.09%)</title><rect x="12.2189%" y="1077" width="0.0883%" height="15" fill="rgb(220,10,11)" fg:x="15077" fg:w="109"/><text x="12.4689%" y="1087.50"></text></g><g><title>__vdso_clock_gettime (22 samples, 0.02%)</title><rect x="12.3072%" y="1077" width="0.0178%" height="15" fill="rgb(221,106,17)" fg:x="15186" fg:w="22"/><text x="12.5572%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (23 samples, 0.02%)</title><rect x="12.3250%" y="1077" width="0.0186%" height="15" fill="rgb(251,142,44)" fg:x="15208" fg:w="23"/><text x="12.5750%" y="1087.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (24 samples, 0.02%)</title><rect x="12.3486%" y="1077" width="0.0195%" height="15" fill="rgb(238,13,15)" fg:x="15237" fg:w="24"/><text x="12.5986%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (16 samples, 0.01%)</title><rect x="12.3777%" y="1077" width="0.0130%" height="15" fill="rgb(208,107,27)" fg:x="15273" fg:w="16"/><text x="12.6277%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="12.3907%" y="1077" width="0.0130%" height="15" fill="rgb(205,136,37)" fg:x="15289" fg:w="16"/><text x="12.6407%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="12.4628%" y="869" width="0.0113%" height="15" fill="rgb(250,205,27)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="12.4628%" y="853" width="0.0113%" height="15" fill="rgb(210,80,43)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="12.4628%" y="837" width="0.0113%" height="15" fill="rgb(247,160,36)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="12.4628%" y="821" width="0.0113%" height="15" fill="rgb(234,13,49)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="12.4628%" y="805" width="0.0113%" height="15" fill="rgb(234,122,0)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="815.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="12.4628%" y="789" width="0.0113%" height="15" fill="rgb(207,146,38)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="799.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="12.4628%" y="773" width="0.0113%" height="15" fill="rgb(207,177,25)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="12.4628%" y="757" width="0.0113%" height="15" fill="rgb(211,178,42)" fg:x="15378" fg:w="14"/><text x="12.7128%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="12.4628%" y="981" width="0.0219%" height="15" fill="rgb(230,69,54)" fg:x="15378" fg:w="27"/><text x="12.7128%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="12.4628%" y="965" width="0.0219%" height="15" fill="rgb(214,135,41)" fg:x="15378" fg:w="27"/><text x="12.7128%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (27 samples, 0.02%)</title><rect x="12.4628%" y="949" width="0.0219%" height="15" fill="rgb(237,67,25)" fg:x="15378" fg:w="27"/><text x="12.7128%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="12.4628%" y="933" width="0.0219%" height="15" fill="rgb(222,189,50)" fg:x="15378" fg:w="27"/><text x="12.7128%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="12.4628%" y="917" width="0.0219%" height="15" fill="rgb(245,148,34)" fg:x="15378" fg:w="27"/><text x="12.7128%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="12.4628%" y="901" width="0.0219%" height="15" fill="rgb(222,29,6)" fg:x="15378" fg:w="27"/><text x="12.7128%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="12.4628%" y="885" width="0.0219%" height="15" fill="rgb(221,189,43)" fg:x="15378" fg:w="27"/><text x="12.7128%" y="895.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="12.4742%" y="869" width="0.0105%" height="15" fill="rgb(207,36,27)" fg:x="15392" fg:w="13"/><text x="12.7242%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="12.4742%" y="853" width="0.0105%" height="15" fill="rgb(217,90,24)" fg:x="15392" fg:w="13"/><text x="12.7242%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (108 samples, 0.09%)</title><rect x="12.4037%" y="1077" width="0.0875%" height="15" fill="rgb(224,66,35)" fg:x="15305" fg:w="108"/><text x="12.6537%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (35 samples, 0.03%)</title><rect x="12.4628%" y="1061" width="0.0284%" height="15" fill="rgb(221,13,50)" fg:x="15378" fg:w="35"/><text x="12.7128%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 0.03%)</title><rect x="12.4628%" y="1045" width="0.0284%" height="15" fill="rgb(236,68,49)" fg:x="15378" fg:w="35"/><text x="12.7128%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 0.03%)</title><rect x="12.4628%" y="1029" width="0.0284%" height="15" fill="rgb(229,146,28)" fg:x="15378" fg:w="35"/><text x="12.7128%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.03%)</title><rect x="12.4628%" y="1013" width="0.0284%" height="15" fill="rgb(225,31,38)" fg:x="15378" fg:w="35"/><text x="12.7128%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 0.03%)</title><rect x="12.4628%" y="997" width="0.0284%" height="15" fill="rgb(250,208,3)" fg:x="15378" fg:w="35"/><text x="12.7128%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (19 samples, 0.02%)</title><rect x="12.4912%" y="1077" width="0.0154%" height="15" fill="rgb(246,54,23)" fg:x="15413" fg:w="19"/><text x="12.7412%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (39 samples, 0.03%)</title><rect x="12.5066%" y="1077" width="0.0316%" height="15" fill="rgb(243,76,11)" fg:x="15432" fg:w="39"/><text x="12.7566%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (34 samples, 0.03%)</title><rect x="12.5106%" y="1061" width="0.0276%" height="15" fill="rgb(245,21,50)" fg:x="15437" fg:w="34"/><text x="12.7606%" y="1071.50"></text></g><g><title>core::mem::drop (34 samples, 0.03%)</title><rect x="12.5106%" y="1045" width="0.0276%" height="15" fill="rgb(228,9,43)" fg:x="15437" fg:w="34"/><text x="12.7606%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="12.5106%" y="1029" width="0.0276%" height="15" fill="rgb(208,100,47)" fg:x="15437" fg:w="34"/><text x="12.7606%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="12.5106%" y="1013" width="0.0276%" height="15" fill="rgb(232,26,8)" fg:x="15437" fg:w="34"/><text x="12.7606%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (34 samples, 0.03%)</title><rect x="12.5106%" y="997" width="0.0276%" height="15" fill="rgb(216,166,38)" fg:x="15437" fg:w="34"/><text x="12.7606%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (34 samples, 0.03%)</title><rect x="12.5106%" y="981" width="0.0276%" height="15" fill="rgb(251,202,51)" fg:x="15437" fg:w="34"/><text x="12.7606%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (34 samples, 0.03%)</title><rect x="12.5106%" y="965" width="0.0276%" height="15" fill="rgb(254,216,34)" fg:x="15437" fg:w="34"/><text x="12.7606%" y="975.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (22 samples, 0.02%)</title><rect x="12.5398%" y="1077" width="0.0178%" height="15" fill="rgb(251,32,27)" fg:x="15473" fg:w="22"/><text x="12.7898%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="12.5414%" y="1061" width="0.0162%" height="15" fill="rgb(208,127,28)" fg:x="15475" fg:w="20"/><text x="12.7914%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (20 samples, 0.02%)</title><rect x="12.5414%" y="1045" width="0.0162%" height="15" fill="rgb(224,137,22)" fg:x="15475" fg:w="20"/><text x="12.7914%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="12.5414%" y="1029" width="0.0162%" height="15" fill="rgb(254,70,32)" fg:x="15475" fg:w="20"/><text x="12.7914%" y="1039.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (46 samples, 0.04%)</title><rect x="12.5576%" y="1077" width="0.0373%" height="15" fill="rgb(229,75,37)" fg:x="15495" fg:w="46"/><text x="12.8076%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="12.5811%" y="1061" width="0.0138%" height="15" fill="rgb(252,64,23)" fg:x="15524" fg:w="17"/><text x="12.8311%" y="1071.50"></text></g><g><title>async_executor::Ticker::sleep (42 samples, 0.03%)</title><rect x="12.5957%" y="1077" width="0.0340%" height="15" fill="rgb(232,162,48)" fg:x="15542" fg:w="42"/><text x="12.8457%" y="1087.50"></text></g><g><title>async_executor::steal (156 samples, 0.13%)</title><rect x="12.6298%" y="1077" width="0.1264%" height="15" fill="rgb(246,160,12)" fg:x="15584" fg:w="156"/><text x="12.8798%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (715 samples, 0.58%)</title><rect x="13.1687%" y="725" width="0.5795%" height="15" fill="rgb(247,166,0)" fg:x="16249" fg:w="715"/><text x="13.4187%" y="735.50"></text></g><g><title>[libc-2.31.so] (617 samples, 0.50%)</title><rect x="13.2481%" y="709" width="0.5000%" height="15" fill="rgb(249,219,21)" fg:x="16347" fg:w="617"/><text x="13.4981%" y="719.50"></text></g><g><title>[libc-2.31.so] (268 samples, 0.22%)</title><rect x="13.7903%" y="709" width="0.2172%" height="15" fill="rgb(205,209,3)" fg:x="17016" fg:w="268"/><text x="14.0403%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (927 samples, 0.75%)</title><rect x="14.2514%" y="693" width="0.7513%" height="15" fill="rgb(243,44,1)" fg:x="17585" fg:w="927"/><text x="14.5014%" y="703.50"></text></g><g><title>[libc-2.31.so] (246 samples, 0.20%)</title><rect x="15.0197%" y="677" width="0.1994%" height="15" fill="rgb(206,159,16)" fg:x="18533" fg:w="246"/><text x="15.2697%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (470 samples, 0.38%)</title><rect x="15.0027%" y="693" width="0.3809%" height="15" fill="rgb(244,77,30)" fg:x="18512" fg:w="470"/><text x="15.2527%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (203 samples, 0.16%)</title><rect x="15.2191%" y="677" width="0.1645%" height="15" fill="rgb(218,69,12)" fg:x="18779" fg:w="203"/><text x="15.4691%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (205 samples, 0.17%)</title><rect x="15.3836%" y="661" width="0.1661%" height="15" fill="rgb(212,87,7)" fg:x="18982" fg:w="205"/><text x="15.6336%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (191 samples, 0.15%)</title><rect x="15.3950%" y="645" width="0.1548%" height="15" fill="rgb(245,114,25)" fg:x="18996" fg:w="191"/><text x="15.6450%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (191 samples, 0.15%)</title><rect x="15.3950%" y="629" width="0.1548%" height="15" fill="rgb(210,61,42)" fg:x="18996" fg:w="191"/><text x="15.6450%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (41 samples, 0.03%)</title><rect x="15.6162%" y="613" width="0.0332%" height="15" fill="rgb(211,52,33)" fg:x="19269" fg:w="41"/><text x="15.8662%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (41 samples, 0.03%)</title><rect x="15.6162%" y="597" width="0.0332%" height="15" fill="rgb(234,58,33)" fg:x="19269" fg:w="41"/><text x="15.8662%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (41 samples, 0.03%)</title><rect x="15.6162%" y="581" width="0.0332%" height="15" fill="rgb(220,115,36)" fg:x="19269" fg:w="41"/><text x="15.8662%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,215 samples, 4.23%)</title><rect x="15.5571%" y="645" width="4.2264%" height="15" fill="rgb(243,153,54)" fg:x="19196" fg:w="5215"/><text x="15.8071%" y="655.50">&lt;asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (5,179 samples, 4.20%)</title><rect x="15.5862%" y="629" width="4.1972%" height="15" fill="rgb(251,47,18)" fg:x="19232" fg:w="5179"/><text x="15.8362%" y="639.50">async..</text></g><g><title>std::panic::catch_unwind (5,101 samples, 4.13%)</title><rect x="15.6494%" y="613" width="4.1340%" height="15" fill="rgb(242,102,42)" fg:x="19310" fg:w="5101"/><text x="15.8994%" y="623.50">std::..</text></g><g><title>std::panicking::try (5,101 samples, 4.13%)</title><rect x="15.6494%" y="597" width="4.1340%" height="15" fill="rgb(234,31,38)" fg:x="19310" fg:w="5101"/><text x="15.8994%" y="607.50">std::..</text></g><g><title>std::panicking::try::do_call (5,101 samples, 4.13%)</title><rect x="15.6494%" y="581" width="4.1340%" height="15" fill="rgb(221,117,51)" fg:x="19310" fg:w="5101"/><text x="15.8994%" y="591.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (25 samples, 0.02%)</title><rect x="19.7632%" y="565" width="0.0203%" height="15" fill="rgb(212,20,18)" fg:x="24386" fg:w="25"/><text x="20.0132%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (25 samples, 0.02%)</title><rect x="19.7632%" y="549" width="0.0203%" height="15" fill="rgb(245,133,36)" fg:x="24386" fg:w="25"/><text x="20.0132%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (25 samples, 0.02%)</title><rect x="19.7632%" y="533" width="0.0203%" height="15" fill="rgb(212,6,19)" fg:x="24386" fg:w="25"/><text x="20.0132%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (25 samples, 0.02%)</title><rect x="19.7632%" y="517" width="0.0203%" height="15" fill="rgb(218,1,36)" fg:x="24386" fg:w="25"/><text x="20.0132%" y="527.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (5,230 samples, 4.24%)</title><rect x="15.5498%" y="661" width="4.2386%" height="15" fill="rgb(246,84,54)" fg:x="19187" fg:w="5230"/><text x="15.7998%" y="671.50">&lt;core..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,628 samples, 4.56%)</title><rect x="15.3836%" y="693" width="4.5611%" height="15" fill="rgb(242,110,6)" fg:x="18982" fg:w="5628"/><text x="15.6336%" y="703.50">&lt;asyn..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,628 samples, 4.56%)</title><rect x="15.3836%" y="677" width="4.5611%" height="15" fill="rgb(214,47,5)" fg:x="18982" fg:w="5628"/><text x="15.6336%" y="687.50">&lt;asyn..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (193 samples, 0.16%)</title><rect x="19.7883%" y="661" width="0.1564%" height="15" fill="rgb(218,159,25)" fg:x="24417" fg:w="193"/><text x="20.0383%" y="671.50"></text></g><g><title>[libc-2.31.so] (705 samples, 0.57%)</title><rect x="19.9447%" y="693" width="0.5714%" height="15" fill="rgb(215,211,28)" fg:x="24610" fg:w="705"/><text x="20.1947%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (113 samples, 0.09%)</title><rect x="20.5161%" y="693" width="0.0916%" height="15" fill="rgb(238,59,32)" fg:x="25315" fg:w="113"/><text x="20.7661%" y="703.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="20.6239%" y="565" width="0.0130%" height="15" fill="rgb(226,82,3)" fg:x="25448" fg:w="16"/><text x="20.8739%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="20.6239%" y="549" width="0.0130%" height="15" fill="rgb(240,164,32)" fg:x="25448" fg:w="16"/><text x="20.8739%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="20.6239%" y="533" width="0.0130%" height="15" fill="rgb(232,46,7)" fg:x="25448" fg:w="16"/><text x="20.8739%" y="543.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="20.6239%" y="517" width="0.0130%" height="15" fill="rgb(229,129,53)" fg:x="25448" fg:w="16"/><text x="20.8739%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="20.6239%" y="501" width="0.0130%" height="15" fill="rgb(234,188,29)" fg:x="25448" fg:w="16"/><text x="20.8739%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (33 samples, 0.03%)</title><rect x="20.6141%" y="645" width="0.0267%" height="15" fill="rgb(246,141,4)" fg:x="25436" fg:w="33"/><text x="20.8641%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (21 samples, 0.02%)</title><rect x="20.6239%" y="629" width="0.0170%" height="15" fill="rgb(229,23,39)" fg:x="25448" fg:w="21"/><text x="20.8739%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (21 samples, 0.02%)</title><rect x="20.6239%" y="613" width="0.0170%" height="15" fill="rgb(206,12,3)" fg:x="25448" fg:w="21"/><text x="20.8739%" y="623.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="20.6239%" y="597" width="0.0170%" height="15" fill="rgb(252,226,20)" fg:x="25448" fg:w="21"/><text x="20.8739%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="20.6239%" y="581" width="0.0170%" height="15" fill="rgb(216,123,35)" fg:x="25448" fg:w="21"/><text x="20.8739%" y="591.50"></text></g><g><title>sn_rust_dealloc (64 samples, 0.05%)</title><rect x="20.6409%" y="645" width="0.0519%" height="15" fill="rgb(212,68,40)" fg:x="25469" fg:w="64"/><text x="20.8909%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (108 samples, 0.09%)</title><rect x="20.6077%" y="693" width="0.0875%" height="15" fill="rgb(254,125,32)" fg:x="25428" fg:w="108"/><text x="20.8577%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (108 samples, 0.09%)</title><rect x="20.6077%" y="677" width="0.0875%" height="15" fill="rgb(253,97,22)" fg:x="25428" fg:w="108"/><text x="20.8577%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.09%)</title><rect x="20.6077%" y="661" width="0.0875%" height="15" fill="rgb(241,101,14)" fg:x="25428" fg:w="108"/><text x="20.8577%" y="671.50"></text></g><g><title>[libc-2.31.so] (150 samples, 0.12%)</title><rect x="21.0785%" y="677" width="0.1216%" height="15" fill="rgb(238,103,29)" fg:x="26009" fg:w="150"/><text x="21.3285%" y="687.50"></text></g><g><title>[libc-2.31.so] (247 samples, 0.20%)</title><rect x="21.2349%" y="597" width="0.2002%" height="15" fill="rgb(233,195,47)" fg:x="26202" fg:w="247"/><text x="21.4849%" y="607.50"></text></g><g><title>[libc-2.31.so] (243 samples, 0.20%)</title><rect x="21.4513%" y="581" width="0.1969%" height="15" fill="rgb(246,218,30)" fg:x="26469" fg:w="243"/><text x="21.7013%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (147 samples, 0.12%)</title><rect x="21.8979%" y="469" width="0.1191%" height="15" fill="rgb(219,145,47)" fg:x="27020" fg:w="147"/><text x="22.1479%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (1,033 samples, 0.84%)</title><rect x="21.2001%" y="677" width="0.8372%" height="15" fill="rgb(243,12,26)" fg:x="26159" fg:w="1033"/><text x="21.4501%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (1,007 samples, 0.82%)</title><rect x="21.2212%" y="661" width="0.8161%" height="15" fill="rgb(214,87,16)" fg:x="26185" fg:w="1007"/><text x="21.4712%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (1,006 samples, 0.82%)</title><rect x="21.2220%" y="645" width="0.8153%" height="15" fill="rgb(208,99,42)" fg:x="26186" fg:w="1006"/><text x="21.4720%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (1,006 samples, 0.82%)</title><rect x="21.2220%" y="629" width="0.8153%" height="15" fill="rgb(253,99,2)" fg:x="26186" fg:w="1006"/><text x="21.4720%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (1,006 samples, 0.82%)</title><rect x="21.2220%" y="613" width="0.8153%" height="15" fill="rgb(220,168,23)" fg:x="26186" fg:w="1006"/><text x="21.4720%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (743 samples, 0.60%)</title><rect x="21.4351%" y="597" width="0.6022%" height="15" fill="rgb(242,38,24)" fg:x="26449" fg:w="743"/><text x="21.6851%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (480 samples, 0.39%)</title><rect x="21.6483%" y="581" width="0.3890%" height="15" fill="rgb(225,182,9)" fg:x="26712" fg:w="480"/><text x="21.8983%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (480 samples, 0.39%)</title><rect x="21.6483%" y="565" width="0.3890%" height="15" fill="rgb(243,178,37)" fg:x="26712" fg:w="480"/><text x="21.8983%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (480 samples, 0.39%)</title><rect x="21.6483%" y="549" width="0.3890%" height="15" fill="rgb(232,139,19)" fg:x="26712" fg:w="480"/><text x="21.8983%" y="559.50"></text></g><g><title>alloc::alloc::alloc (471 samples, 0.38%)</title><rect x="21.6556%" y="533" width="0.3817%" height="15" fill="rgb(225,201,24)" fg:x="26721" fg:w="471"/><text x="21.9056%" y="543.50"></text></g><g><title>__rg_alloc (471 samples, 0.38%)</title><rect x="21.6556%" y="517" width="0.3817%" height="15" fill="rgb(221,47,46)" fg:x="26721" fg:w="471"/><text x="21.9056%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (471 samples, 0.38%)</title><rect x="21.6556%" y="501" width="0.3817%" height="15" fill="rgb(249,23,13)" fg:x="26721" fg:w="471"/><text x="21.9056%" y="511.50"></text></g><g><title>sn_rust_alloc (466 samples, 0.38%)</title><rect x="21.6596%" y="485" width="0.3777%" height="15" fill="rgb(219,9,5)" fg:x="26726" fg:w="466"/><text x="21.9096%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (25 samples, 0.02%)</title><rect x="22.0170%" y="469" width="0.0203%" height="15" fill="rgb(254,171,16)" fg:x="27167" fg:w="25"/><text x="22.2670%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,919 samples, 8.04%)</title><rect x="14.0075%" y="709" width="8.0387%" height="15" fill="rgb(230,171,20)" fg:x="17284" fg:w="9919"/><text x="14.2575%" y="719.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,667 samples, 1.35%)</title><rect x="20.6952%" y="693" width="1.3510%" height="15" fill="rgb(210,71,41)" fg:x="25536" fg:w="1667"/><text x="20.9452%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (32 samples, 0.03%)</title><rect x="22.3144%" y="677" width="0.0259%" height="15" fill="rgb(206,173,20)" fg:x="27534" fg:w="32"/><text x="22.5644%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (32 samples, 0.03%)</title><rect x="22.3144%" y="661" width="0.0259%" height="15" fill="rgb(233,88,34)" fg:x="27534" fg:w="32"/><text x="22.5644%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.03%)</title><rect x="22.3144%" y="645" width="0.0259%" height="15" fill="rgb(223,209,46)" fg:x="27534" fg:w="32"/><text x="22.5644%" y="655.50"></text></g><g><title>sn_rust_dealloc (165 samples, 0.13%)</title><rect x="22.3477%" y="613" width="0.1337%" height="15" fill="rgb(250,43,18)" fg:x="27575" fg:w="165"/><text x="22.5977%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,756 samples, 8.72%)</title><rect x="13.7660%" y="725" width="8.7170%" height="15" fill="rgb(208,13,10)" fg:x="16986" fg:w="10756"/><text x="14.0160%" y="735.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (539 samples, 0.44%)</title><rect x="22.0462%" y="709" width="0.4368%" height="15" fill="rgb(212,200,36)" fg:x="27203" fg:w="539"/><text x="22.2962%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (208 samples, 0.17%)</title><rect x="22.3144%" y="693" width="0.1686%" height="15" fill="rgb(225,90,30)" fg:x="27534" fg:w="208"/><text x="22.5644%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (176 samples, 0.14%)</title><rect x="22.3404%" y="677" width="0.1426%" height="15" fill="rgb(236,182,39)" fg:x="27566" fg:w="176"/><text x="22.5904%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (176 samples, 0.14%)</title><rect x="22.3404%" y="661" width="0.1426%" height="15" fill="rgb(212,144,35)" fg:x="27566" fg:w="176"/><text x="22.5904%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (176 samples, 0.14%)</title><rect x="22.3404%" y="645" width="0.1426%" height="15" fill="rgb(228,63,44)" fg:x="27566" fg:w="176"/><text x="22.5904%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (176 samples, 0.14%)</title><rect x="22.3404%" y="629" width="0.1426%" height="15" fill="rgb(228,109,6)" fg:x="27566" fg:w="176"/><text x="22.5904%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="22.6094%" y="453" width="0.0154%" height="15" fill="rgb(238,117,24)" fg:x="27898" fg:w="19"/><text x="22.8594%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (118 samples, 0.10%)</title><rect x="22.5308%" y="613" width="0.0956%" height="15" fill="rgb(242,26,26)" fg:x="27801" fg:w="118"/><text x="22.7808%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="22.5405%" y="597" width="0.0859%" height="15" fill="rgb(221,92,48)" fg:x="27813" fg:w="106"/><text x="22.7905%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="22.5405%" y="581" width="0.0859%" height="15" fill="rgb(209,209,32)" fg:x="27813" fg:w="106"/><text x="22.7905%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (78 samples, 0.06%)</title><rect x="22.5632%" y="565" width="0.0632%" height="15" fill="rgb(221,70,22)" fg:x="27841" fg:w="78"/><text x="22.8132%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78 samples, 0.06%)</title><rect x="22.5632%" y="549" width="0.0632%" height="15" fill="rgb(248,145,5)" fg:x="27841" fg:w="78"/><text x="22.8132%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (78 samples, 0.06%)</title><rect x="22.5632%" y="533" width="0.0632%" height="15" fill="rgb(226,116,26)" fg:x="27841" fg:w="78"/><text x="22.8132%" y="543.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 0.06%)</title><rect x="22.5665%" y="517" width="0.0600%" height="15" fill="rgb(244,5,17)" fg:x="27845" fg:w="74"/><text x="22.8165%" y="527.50"></text></g><g><title>__rg_alloc (74 samples, 0.06%)</title><rect x="22.5665%" y="501" width="0.0600%" height="15" fill="rgb(252,159,33)" fg:x="27845" fg:w="74"/><text x="22.8165%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (74 samples, 0.06%)</title><rect x="22.5665%" y="485" width="0.0600%" height="15" fill="rgb(206,71,0)" fg:x="27845" fg:w="74"/><text x="22.8165%" y="495.50"></text></g><g><title>sn_rust_alloc (70 samples, 0.06%)</title><rect x="22.5697%" y="469" width="0.0567%" height="15" fill="rgb(233,118,54)" fg:x="27849" fg:w="70"/><text x="22.8197%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.01%)</title><rect x="22.6427%" y="549" width="0.0113%" height="15" fill="rgb(234,83,48)" fg:x="27939" fg:w="14"/><text x="22.8927%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (14 samples, 0.01%)</title><rect x="22.6427%" y="533" width="0.0113%" height="15" fill="rgb(228,3,54)" fg:x="27939" fg:w="14"/><text x="22.8927%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="22.6427%" y="565" width="0.0154%" height="15" fill="rgb(226,155,13)" fg:x="27939" fg:w="19"/><text x="22.8927%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (176 samples, 0.14%)</title><rect x="22.5170%" y="693" width="0.1426%" height="15" fill="rgb(241,28,37)" fg:x="27784" fg:w="176"/><text x="22.7670%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (167 samples, 0.14%)</title><rect x="22.5243%" y="677" width="0.1353%" height="15" fill="rgb(233,93,10)" fg:x="27793" fg:w="167"/><text x="22.7743%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (167 samples, 0.14%)</title><rect x="22.5243%" y="661" width="0.1353%" height="15" fill="rgb(225,113,19)" fg:x="27793" fg:w="167"/><text x="22.7743%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (159 samples, 0.13%)</title><rect x="22.5308%" y="645" width="0.1289%" height="15" fill="rgb(241,2,18)" fg:x="27801" fg:w="159"/><text x="22.7808%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (159 samples, 0.13%)</title><rect x="22.5308%" y="629" width="0.1289%" height="15" fill="rgb(228,207,21)" fg:x="27801" fg:w="159"/><text x="22.7808%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (41 samples, 0.03%)</title><rect x="22.6264%" y="613" width="0.0332%" height="15" fill="rgb(213,211,35)" fg:x="27919" fg:w="41"/><text x="22.8764%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (33 samples, 0.03%)</title><rect x="22.6329%" y="597" width="0.0267%" height="15" fill="rgb(209,83,10)" fg:x="27927" fg:w="33"/><text x="22.8829%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (33 samples, 0.03%)</title><rect x="22.6329%" y="581" width="0.0267%" height="15" fill="rgb(209,164,1)" fg:x="27927" fg:w="33"/><text x="22.8829%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (79 samples, 0.06%)</title><rect x="23.0422%" y="613" width="0.0640%" height="15" fill="rgb(213,184,43)" fg:x="28432" fg:w="79"/><text x="23.2922%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (79 samples, 0.06%)</title><rect x="23.0422%" y="597" width="0.0640%" height="15" fill="rgb(231,61,34)" fg:x="28432" fg:w="79"/><text x="23.2922%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (60 samples, 0.05%)</title><rect x="23.0576%" y="581" width="0.0486%" height="15" fill="rgb(235,75,3)" fg:x="28451" fg:w="60"/><text x="23.3076%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (50 samples, 0.04%)</title><rect x="23.0657%" y="565" width="0.0405%" height="15" fill="rgb(220,106,47)" fg:x="28461" fg:w="50"/><text x="23.3157%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.04%)</title><rect x="23.0657%" y="549" width="0.0405%" height="15" fill="rgb(210,196,33)" fg:x="28461" fg:w="50"/><text x="23.3157%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.04%)</title><rect x="23.0657%" y="533" width="0.0405%" height="15" fill="rgb(229,154,42)" fg:x="28461" fg:w="50"/><text x="23.3157%" y="543.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.04%)</title><rect x="23.0657%" y="517" width="0.0405%" height="15" fill="rgb(228,114,26)" fg:x="28461" fg:w="50"/><text x="23.3157%" y="527.50"></text></g><g><title>__rg_alloc (50 samples, 0.04%)</title><rect x="23.0657%" y="501" width="0.0405%" height="15" fill="rgb(208,144,1)" fg:x="28461" fg:w="50"/><text x="23.3157%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (50 samples, 0.04%)</title><rect x="23.0657%" y="485" width="0.0405%" height="15" fill="rgb(239,112,37)" fg:x="28461" fg:w="50"/><text x="23.3157%" y="495.50"></text></g><g><title>sn_rust_alloc (43 samples, 0.03%)</title><rect x="23.0714%" y="469" width="0.0348%" height="15" fill="rgb(210,96,50)" fg:x="28468" fg:w="43"/><text x="23.3214%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (132 samples, 0.11%)</title><rect x="23.0130%" y="661" width="0.1070%" height="15" fill="rgb(222,178,2)" fg:x="28396" fg:w="132"/><text x="23.2630%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (120 samples, 0.10%)</title><rect x="23.0227%" y="645" width="0.0973%" height="15" fill="rgb(226,74,18)" fg:x="28408" fg:w="120"/><text x="23.2727%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (120 samples, 0.10%)</title><rect x="23.0227%" y="629" width="0.0973%" height="15" fill="rgb(225,67,54)" fg:x="28408" fg:w="120"/><text x="23.2727%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="23.1062%" y="613" width="0.0138%" height="15" fill="rgb(251,92,32)" fg:x="28511" fg:w="17"/><text x="23.3562%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="23.1062%" y="597" width="0.0138%" height="15" fill="rgb(228,149,22)" fg:x="28511" fg:w="17"/><text x="23.3562%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (17 samples, 0.01%)</title><rect x="23.1062%" y="581" width="0.0138%" height="15" fill="rgb(243,54,13)" fg:x="28511" fg:w="17"/><text x="23.3562%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (17 samples, 0.01%)</title><rect x="23.1062%" y="565" width="0.0138%" height="15" fill="rgb(243,180,28)" fg:x="28511" fg:w="17"/><text x="23.3562%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="23.1062%" y="549" width="0.0138%" height="15" fill="rgb(208,167,24)" fg:x="28511" fg:w="17"/><text x="23.3562%" y="559.50"></text></g><g><title>abi_stable::erased_types::iterator::next (29 samples, 0.02%)</title><rect x="23.1508%" y="613" width="0.0235%" height="15" fill="rgb(245,73,45)" fg:x="28566" fg:w="29"/><text x="23.4008%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (21 samples, 0.02%)</title><rect x="23.1573%" y="597" width="0.0170%" height="15" fill="rgb(237,203,48)" fg:x="28574" fg:w="21"/><text x="23.4073%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="23.1573%" y="581" width="0.0170%" height="15" fill="rgb(211,197,16)" fg:x="28574" fg:w="21"/><text x="23.4073%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="23.1573%" y="565" width="0.0170%" height="15" fill="rgb(243,99,51)" fg:x="28574" fg:w="21"/><text x="23.4073%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="23.1573%" y="549" width="0.0170%" height="15" fill="rgb(215,123,29)" fg:x="28574" fg:w="21"/><text x="23.4073%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="23.1573%" y="533" width="0.0170%" height="15" fill="rgb(239,186,37)" fg:x="28574" fg:w="21"/><text x="23.4073%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="23.1573%" y="517" width="0.0170%" height="15" fill="rgb(252,136,39)" fg:x="28574" fg:w="21"/><text x="23.4073%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.05%)</title><rect x="23.1386%" y="645" width="0.0454%" height="15" fill="rgb(223,213,32)" fg:x="28551" fg:w="56"/><text x="23.3886%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (56 samples, 0.05%)</title><rect x="23.1386%" y="629" width="0.0454%" height="15" fill="rgb(233,115,5)" fg:x="28551" fg:w="56"/><text x="23.3886%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (24 samples, 0.02%)</title><rect x="23.1937%" y="613" width="0.0195%" height="15" fill="rgb(207,226,44)" fg:x="28619" fg:w="24"/><text x="23.4437%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (23 samples, 0.02%)</title><rect x="23.1946%" y="597" width="0.0186%" height="15" fill="rgb(208,126,0)" fg:x="28620" fg:w="23"/><text x="23.4446%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (52 samples, 0.04%)</title><rect x="23.1840%" y="645" width="0.0421%" height="15" fill="rgb(244,66,21)" fg:x="28607" fg:w="52"/><text x="23.4340%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (52 samples, 0.04%)</title><rect x="23.1840%" y="629" width="0.0421%" height="15" fill="rgb(222,97,12)" fg:x="28607" fg:w="52"/><text x="23.4340%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (16 samples, 0.01%)</title><rect x="23.2132%" y="613" width="0.0130%" height="15" fill="rgb(219,213,19)" fg:x="28643" fg:w="16"/><text x="23.4632%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (16 samples, 0.01%)</title><rect x="23.2132%" y="597" width="0.0130%" height="15" fill="rgb(252,169,30)" fg:x="28643" fg:w="16"/><text x="23.4632%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (31 samples, 0.03%)</title><rect x="23.2262%" y="645" width="0.0251%" height="15" fill="rgb(206,32,51)" fg:x="28659" fg:w="31"/><text x="23.4762%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (29 samples, 0.02%)</title><rect x="23.2278%" y="629" width="0.0235%" height="15" fill="rgb(250,172,42)" fg:x="28661" fg:w="29"/><text x="23.4778%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (26 samples, 0.02%)</title><rect x="23.2302%" y="613" width="0.0211%" height="15" fill="rgb(209,34,43)" fg:x="28664" fg:w="26"/><text x="23.4802%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (25 samples, 0.02%)</title><rect x="23.2310%" y="597" width="0.0203%" height="15" fill="rgb(223,11,35)" fg:x="28665" fg:w="25"/><text x="23.4810%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (25 samples, 0.02%)</title><rect x="23.2310%" y="581" width="0.0203%" height="15" fill="rgb(251,219,26)" fg:x="28665" fg:w="25"/><text x="23.4810%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (25 samples, 0.02%)</title><rect x="23.2310%" y="565" width="0.0203%" height="15" fill="rgb(231,119,3)" fg:x="28665" fg:w="25"/><text x="23.4810%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (17 samples, 0.01%)</title><rect x="23.2375%" y="549" width="0.0138%" height="15" fill="rgb(216,97,11)" fg:x="28673" fg:w="17"/><text x="23.4875%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="23.2375%" y="533" width="0.0138%" height="15" fill="rgb(223,59,9)" fg:x="28673" fg:w="17"/><text x="23.4875%" y="543.50"></text></g><g><title>sn_rust_dealloc (70 samples, 0.06%)</title><rect x="23.2780%" y="533" width="0.0567%" height="15" fill="rgb(233,93,31)" fg:x="28723" fg:w="70"/><text x="23.5280%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,052 samples, 0.85%)</title><rect x="22.4830%" y="725" width="0.8526%" height="15" fill="rgb(239,81,33)" fg:x="27742" fg:w="1052"/><text x="22.7330%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,028 samples, 0.83%)</title><rect x="22.5025%" y="709" width="0.8331%" height="15" fill="rgb(213,120,34)" fg:x="27766" fg:w="1028"/><text x="22.7525%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (834 samples, 0.68%)</title><rect x="22.6597%" y="693" width="0.6759%" height="15" fill="rgb(243,49,53)" fg:x="27960" fg:w="834"/><text x="22.9097%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (410 samples, 0.33%)</title><rect x="23.0033%" y="677" width="0.3323%" height="15" fill="rgb(247,216,33)" fg:x="28384" fg:w="410"/><text x="23.2533%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (266 samples, 0.22%)</title><rect x="23.1200%" y="661" width="0.2156%" height="15" fill="rgb(226,26,14)" fg:x="28528" fg:w="266"/><text x="23.3700%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (104 samples, 0.08%)</title><rect x="23.2513%" y="645" width="0.0843%" height="15" fill="rgb(215,49,53)" fg:x="28690" fg:w="104"/><text x="23.5013%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (104 samples, 0.08%)</title><rect x="23.2513%" y="629" width="0.0843%" height="15" fill="rgb(245,162,40)" fg:x="28690" fg:w="104"/><text x="23.5013%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.08%)</title><rect x="23.2513%" y="613" width="0.0843%" height="15" fill="rgb(229,68,17)" fg:x="28690" fg:w="104"/><text x="23.5013%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (88 samples, 0.07%)</title><rect x="23.2643%" y="597" width="0.0713%" height="15" fill="rgb(213,182,10)" fg:x="28706" fg:w="88"/><text x="23.5143%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (88 samples, 0.07%)</title><rect x="23.2643%" y="581" width="0.0713%" height="15" fill="rgb(245,125,30)" fg:x="28706" fg:w="88"/><text x="23.5143%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (88 samples, 0.07%)</title><rect x="23.2643%" y="565" width="0.0713%" height="15" fill="rgb(232,202,2)" fg:x="28706" fg:w="88"/><text x="23.5143%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (88 samples, 0.07%)</title><rect x="23.2643%" y="549" width="0.0713%" height="15" fill="rgb(237,140,51)" fg:x="28706" fg:w="88"/><text x="23.5143%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (81 samples, 0.07%)</title><rect x="23.3502%" y="709" width="0.0656%" height="15" fill="rgb(236,157,25)" fg:x="28812" fg:w="81"/><text x="23.6002%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (44 samples, 0.04%)</title><rect x="23.3801%" y="693" width="0.0357%" height="15" fill="rgb(219,209,0)" fg:x="28849" fg:w="44"/><text x="23.6301%" y="703.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (14 samples, 0.01%)</title><rect x="23.5220%" y="581" width="0.0113%" height="15" fill="rgb(240,116,54)" fg:x="29024" fg:w="14"/><text x="23.7720%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (101 samples, 0.08%)</title><rect x="23.5220%" y="597" width="0.0819%" height="15" fill="rgb(216,10,36)" fg:x="29024" fg:w="101"/><text x="23.7720%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (87 samples, 0.07%)</title><rect x="23.5333%" y="581" width="0.0705%" height="15" fill="rgb(222,72,44)" fg:x="29038" fg:w="87"/><text x="23.7833%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (87 samples, 0.07%)</title><rect x="23.5333%" y="565" width="0.0705%" height="15" fill="rgb(232,159,9)" fg:x="29038" fg:w="87"/><text x="23.7833%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (64 samples, 0.05%)</title><rect x="23.5520%" y="549" width="0.0519%" height="15" fill="rgb(210,39,32)" fg:x="29061" fg:w="64"/><text x="23.8020%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.05%)</title><rect x="23.5520%" y="533" width="0.0519%" height="15" fill="rgb(216,194,45)" fg:x="29061" fg:w="64"/><text x="23.8020%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.05%)</title><rect x="23.5520%" y="517" width="0.0519%" height="15" fill="rgb(218,18,35)" fg:x="29061" fg:w="64"/><text x="23.8020%" y="527.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.05%)</title><rect x="23.5520%" y="501" width="0.0519%" height="15" fill="rgb(207,83,51)" fg:x="29061" fg:w="64"/><text x="23.8020%" y="511.50"></text></g><g><title>__rg_alloc (64 samples, 0.05%)</title><rect x="23.5520%" y="485" width="0.0519%" height="15" fill="rgb(225,63,43)" fg:x="29061" fg:w="64"/><text x="23.8020%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (64 samples, 0.05%)</title><rect x="23.5520%" y="469" width="0.0519%" height="15" fill="rgb(207,57,36)" fg:x="29061" fg:w="64"/><text x="23.8020%" y="479.50"></text></g><g><title>sn_rust_alloc (54 samples, 0.04%)</title><rect x="23.5601%" y="453" width="0.0438%" height="15" fill="rgb(216,99,33)" fg:x="29071" fg:w="54"/><text x="23.8101%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (42 samples, 0.03%)</title><rect x="24.3600%" y="533" width="0.0340%" height="15" fill="rgb(225,42,16)" fg:x="30058" fg:w="42"/><text x="24.6100%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (42 samples, 0.03%)</title><rect x="24.3600%" y="517" width="0.0340%" height="15" fill="rgb(220,201,45)" fg:x="30058" fg:w="42"/><text x="24.6100%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (112 samples, 0.09%)</title><rect x="24.3940%" y="533" width="0.0908%" height="15" fill="rgb(225,33,4)" fg:x="30100" fg:w="112"/><text x="24.6440%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (112 samples, 0.09%)</title><rect x="24.3940%" y="517" width="0.0908%" height="15" fill="rgb(224,33,50)" fg:x="30100" fg:w="112"/><text x="24.6440%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::invert (13 samples, 0.01%)</title><rect x="24.4848%" y="517" width="0.0105%" height="15" fill="rgb(246,198,51)" fg:x="30212" fg:w="13"/><text x="24.7348%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (204 samples, 0.17%)</title><rect x="24.3600%" y="549" width="0.1653%" height="15" fill="rgb(205,22,4)" fg:x="30058" fg:w="204"/><text x="24.6100%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (50 samples, 0.04%)</title><rect x="24.4848%" y="533" width="0.0405%" height="15" fill="rgb(206,3,8)" fg:x="30212" fg:w="50"/><text x="24.7348%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (37 samples, 0.03%)</title><rect x="24.4953%" y="517" width="0.0300%" height="15" fill="rgb(251,23,15)" fg:x="30225" fg:w="37"/><text x="24.7453%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (37 samples, 0.03%)</title><rect x="24.4953%" y="501" width="0.0300%" height="15" fill="rgb(252,88,28)" fg:x="30225" fg:w="37"/><text x="24.7453%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (1,272 samples, 1.03%)</title><rect x="23.5074%" y="677" width="1.0309%" height="15" fill="rgb(212,127,14)" fg:x="29006" fg:w="1272"/><text x="23.7574%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (1,265 samples, 1.03%)</title><rect x="23.5131%" y="661" width="1.0252%" height="15" fill="rgb(247,145,37)" fg:x="29013" fg:w="1265"/><text x="23.7631%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,257 samples, 1.02%)</title><rect x="23.5195%" y="645" width="1.0187%" height="15" fill="rgb(209,117,53)" fg:x="29021" fg:w="1257"/><text x="23.7695%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,254 samples, 1.02%)</title><rect x="23.5220%" y="629" width="1.0163%" height="15" fill="rgb(212,90,42)" fg:x="29024" fg:w="1254"/><text x="23.7720%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (1,254 samples, 1.02%)</title><rect x="23.5220%" y="613" width="1.0163%" height="15" fill="rgb(218,164,37)" fg:x="29024" fg:w="1254"/><text x="23.7720%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (1,153 samples, 0.93%)</title><rect x="23.6038%" y="597" width="0.9344%" height="15" fill="rgb(246,65,34)" fg:x="29125" fg:w="1153"/><text x="23.8538%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (258 samples, 0.21%)</title><rect x="24.3292%" y="581" width="0.2091%" height="15" fill="rgb(231,100,33)" fg:x="30020" fg:w="258"/><text x="24.5792%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (258 samples, 0.21%)</title><rect x="24.3292%" y="565" width="0.2091%" height="15" fill="rgb(228,126,14)" fg:x="30020" fg:w="258"/><text x="24.5792%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (16 samples, 0.01%)</title><rect x="24.5253%" y="549" width="0.0130%" height="15" fill="rgb(215,173,21)" fg:x="30262" fg:w="16"/><text x="24.7753%" y="559.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (82 samples, 0.07%)</title><rect x="24.7887%" y="597" width="0.0665%" height="15" fill="rgb(210,6,40)" fg:x="30587" fg:w="82"/><text x="25.0387%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (82 samples, 0.07%)</title><rect x="24.7887%" y="581" width="0.0665%" height="15" fill="rgb(212,48,18)" fg:x="30587" fg:w="82"/><text x="25.0387%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (62 samples, 0.05%)</title><rect x="24.8049%" y="565" width="0.0502%" height="15" fill="rgb(230,214,11)" fg:x="30607" fg:w="62"/><text x="25.0549%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (50 samples, 0.04%)</title><rect x="24.8146%" y="549" width="0.0405%" height="15" fill="rgb(254,105,39)" fg:x="30619" fg:w="50"/><text x="25.0646%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.04%)</title><rect x="24.8146%" y="533" width="0.0405%" height="15" fill="rgb(245,158,5)" fg:x="30619" fg:w="50"/><text x="25.0646%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.04%)</title><rect x="24.8146%" y="517" width="0.0405%" height="15" fill="rgb(249,208,11)" fg:x="30619" fg:w="50"/><text x="25.0646%" y="527.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.04%)</title><rect x="24.8146%" y="501" width="0.0405%" height="15" fill="rgb(210,39,28)" fg:x="30619" fg:w="50"/><text x="25.0646%" y="511.50"></text></g><g><title>__rg_alloc (50 samples, 0.04%)</title><rect x="24.8146%" y="485" width="0.0405%" height="15" fill="rgb(211,56,53)" fg:x="30619" fg:w="50"/><text x="25.0646%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (50 samples, 0.04%)</title><rect x="24.8146%" y="469" width="0.0405%" height="15" fill="rgb(226,201,30)" fg:x="30619" fg:w="50"/><text x="25.0646%" y="479.50"></text></g><g><title>sn_rust_alloc (41 samples, 0.03%)</title><rect x="24.8219%" y="453" width="0.0332%" height="15" fill="rgb(239,101,34)" fg:x="30628" fg:w="41"/><text x="25.0719%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (142 samples, 0.12%)</title><rect x="24.7522%" y="645" width="0.1151%" height="15" fill="rgb(226,209,5)" fg:x="30542" fg:w="142"/><text x="25.0022%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (130 samples, 0.11%)</title><rect x="24.7619%" y="629" width="0.1054%" height="15" fill="rgb(250,105,47)" fg:x="30554" fg:w="130"/><text x="25.0119%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (130 samples, 0.11%)</title><rect x="24.7619%" y="613" width="0.1054%" height="15" fill="rgb(230,72,3)" fg:x="30554" fg:w="130"/><text x="25.0119%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (15 samples, 0.01%)</title><rect x="24.8551%" y="597" width="0.0122%" height="15" fill="rgb(232,218,39)" fg:x="30669" fg:w="15"/><text x="25.1051%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="24.8551%" y="581" width="0.0122%" height="15" fill="rgb(248,166,6)" fg:x="30669" fg:w="15"/><text x="25.1051%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (14 samples, 0.01%)</title><rect x="24.8559%" y="565" width="0.0113%" height="15" fill="rgb(247,89,20)" fg:x="30670" fg:w="14"/><text x="25.1059%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (14 samples, 0.01%)</title><rect x="24.8559%" y="549" width="0.0113%" height="15" fill="rgb(248,130,54)" fg:x="30670" fg:w="14"/><text x="25.1059%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="24.8559%" y="533" width="0.0113%" height="15" fill="rgb(234,196,4)" fg:x="30670" fg:w="14"/><text x="25.1059%" y="543.50"></text></g><g><title>abi_stable::erased_types::iterator::next (34 samples, 0.03%)</title><rect x="24.9127%" y="597" width="0.0276%" height="15" fill="rgb(250,143,31)" fg:x="30740" fg:w="34"/><text x="25.1627%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (29 samples, 0.02%)</title><rect x="24.9167%" y="581" width="0.0235%" height="15" fill="rgb(211,110,34)" fg:x="30745" fg:w="29"/><text x="25.1667%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="24.9192%" y="565" width="0.0211%" height="15" fill="rgb(215,124,48)" fg:x="30748" fg:w="26"/><text x="25.1692%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="24.9192%" y="549" width="0.0211%" height="15" fill="rgb(216,46,13)" fg:x="30748" fg:w="26"/><text x="25.1692%" y="559.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="24.9200%" y="533" width="0.0203%" height="15" fill="rgb(205,184,25)" fg:x="30749" fg:w="25"/><text x="25.1700%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="24.9200%" y="517" width="0.0203%" height="15" fill="rgb(228,1,10)" fg:x="30749" fg:w="25"/><text x="25.1700%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="24.9200%" y="501" width="0.0203%" height="15" fill="rgb(213,116,27)" fg:x="30749" fg:w="25"/><text x="25.1700%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.05%)</title><rect x="24.9021%" y="629" width="0.0470%" height="15" fill="rgb(241,95,50)" fg:x="30727" fg:w="58"/><text x="25.1521%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (58 samples, 0.05%)</title><rect x="24.9021%" y="613" width="0.0470%" height="15" fill="rgb(238,48,32)" fg:x="30727" fg:w="58"/><text x="25.1521%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::tuple::Tuple2&lt;A,B&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (14 samples, 0.01%)</title><rect x="24.9491%" y="597" width="0.0113%" height="15" fill="rgb(235,113,49)" fg:x="30785" fg:w="14"/><text x="25.1991%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (46 samples, 0.04%)</title><rect x="24.9637%" y="597" width="0.0373%" height="15" fill="rgb(205,127,43)" fg:x="30803" fg:w="46"/><text x="25.2137%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (38 samples, 0.03%)</title><rect x="24.9702%" y="581" width="0.0308%" height="15" fill="rgb(250,162,2)" fg:x="30811" fg:w="38"/><text x="25.2202%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (24 samples, 0.02%)</title><rect x="24.9816%" y="565" width="0.0195%" height="15" fill="rgb(220,13,41)" fg:x="30825" fg:w="24"/><text x="25.2316%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (24 samples, 0.02%)</title><rect x="24.9816%" y="549" width="0.0195%" height="15" fill="rgb(249,221,25)" fg:x="30825" fg:w="24"/><text x="25.2316%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="25.0010%" y="565" width="0.0122%" height="15" fill="rgb(215,208,19)" fg:x="30849" fg:w="15"/><text x="25.2510%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (15 samples, 0.01%)</title><rect x="25.0010%" y="549" width="0.0122%" height="15" fill="rgb(236,175,2)" fg:x="30849" fg:w="15"/><text x="25.2510%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (88 samples, 0.07%)</title><rect x="24.9491%" y="629" width="0.0713%" height="15" fill="rgb(241,52,2)" fg:x="30785" fg:w="88"/><text x="25.1991%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (88 samples, 0.07%)</title><rect x="24.9491%" y="613" width="0.0713%" height="15" fill="rgb(248,140,14)" fg:x="30785" fg:w="88"/><text x="25.1991%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (24 samples, 0.02%)</title><rect x="25.0010%" y="597" width="0.0195%" height="15" fill="rgb(253,22,42)" fg:x="30849" fg:w="24"/><text x="25.2510%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (24 samples, 0.02%)</title><rect x="25.0010%" y="581" width="0.0195%" height="15" fill="rgb(234,61,47)" fg:x="30849" fg:w="24"/><text x="25.2510%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="25.0205%" y="629" width="0.0138%" height="15" fill="rgb(208,226,15)" fg:x="30873" fg:w="17"/><text x="25.2705%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="25.0205%" y="613" width="0.0138%" height="15" fill="rgb(217,221,4)" fg:x="30873" fg:w="17"/><text x="25.2705%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="25.0213%" y="597" width="0.0130%" height="15" fill="rgb(212,174,34)" fg:x="30874" fg:w="16"/><text x="25.2713%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (16 samples, 0.01%)</title><rect x="25.0213%" y="581" width="0.0130%" height="15" fill="rgb(253,83,4)" fg:x="30874" fg:w="16"/><text x="25.2713%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (16 samples, 0.01%)</title><rect x="25.0213%" y="565" width="0.0130%" height="15" fill="rgb(250,195,49)" fg:x="30874" fg:w="16"/><text x="25.2713%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (16 samples, 0.01%)</title><rect x="25.0213%" y="549" width="0.0130%" height="15" fill="rgb(241,192,25)" fg:x="30874" fg:w="16"/><text x="25.2713%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.02%)</title><rect x="25.0464%" y="517" width="0.0154%" height="15" fill="rgb(208,124,10)" fg:x="30905" fg:w="19"/><text x="25.2964%" y="527.50"></text></g><g><title>sn_rust_dealloc (126 samples, 0.10%)</title><rect x="25.0618%" y="517" width="0.1021%" height="15" fill="rgb(222,33,0)" fg:x="30924" fg:w="126"/><text x="25.3118%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (2,259 samples, 1.83%)</title><rect x="23.3356%" y="725" width="1.8308%" height="15" fill="rgb(234,209,28)" fg:x="28794" fg:w="2259"/><text x="23.5856%" y="735.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (2,160 samples, 1.75%)</title><rect x="23.4158%" y="709" width="1.7505%" height="15" fill="rgb(224,11,23)" fg:x="28893" fg:w="2160"/><text x="23.6658%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2,062 samples, 1.67%)</title><rect x="23.4952%" y="693" width="1.6711%" height="15" fill="rgb(232,99,1)" fg:x="28991" fg:w="2062"/><text x="23.7452%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (775 samples, 0.63%)</title><rect x="24.5383%" y="677" width="0.6281%" height="15" fill="rgb(237,95,45)" fg:x="30278" fg:w="775"/><text x="24.7883%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (524 samples, 0.42%)</title><rect x="24.7417%" y="661" width="0.4247%" height="15" fill="rgb(208,109,11)" fg:x="30529" fg:w="524"/><text x="24.9917%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (369 samples, 0.30%)</title><rect x="24.8673%" y="645" width="0.2990%" height="15" fill="rgb(216,190,48)" fg:x="30684" fg:w="369"/><text x="25.1173%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (163 samples, 0.13%)</title><rect x="25.0342%" y="629" width="0.1321%" height="15" fill="rgb(251,171,36)" fg:x="30890" fg:w="163"/><text x="25.2842%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (163 samples, 0.13%)</title><rect x="25.0342%" y="613" width="0.1321%" height="15" fill="rgb(230,62,22)" fg:x="30890" fg:w="163"/><text x="25.2842%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (163 samples, 0.13%)</title><rect x="25.0342%" y="597" width="0.1321%" height="15" fill="rgb(225,114,35)" fg:x="30890" fg:w="163"/><text x="25.2842%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (158 samples, 0.13%)</title><rect x="25.0383%" y="581" width="0.1280%" height="15" fill="rgb(215,118,42)" fg:x="30895" fg:w="158"/><text x="25.2883%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (156 samples, 0.13%)</title><rect x="25.0399%" y="565" width="0.1264%" height="15" fill="rgb(243,119,21)" fg:x="30897" fg:w="156"/><text x="25.2899%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (156 samples, 0.13%)</title><rect x="25.0399%" y="549" width="0.1264%" height="15" fill="rgb(252,177,53)" fg:x="30897" fg:w="156"/><text x="25.2899%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (156 samples, 0.13%)</title><rect x="25.0399%" y="533" width="0.1264%" height="15" fill="rgb(237,209,29)" fg:x="30897" fg:w="156"/><text x="25.2899%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,711 samples, 1.39%)</title><rect x="25.1663%" y="725" width="1.3866%" height="15" fill="rgb(212,65,23)" fg:x="31053" fg:w="1711"/><text x="25.4163%" y="735.50"></text></g><g><title>sn_rust_dealloc (243 samples, 0.20%)</title><rect x="26.5733%" y="565" width="0.1969%" height="15" fill="rgb(230,222,46)" fg:x="32789" fg:w="243"/><text x="26.8233%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (280 samples, 0.23%)</title><rect x="26.5554%" y="725" width="0.2269%" height="15" fill="rgb(215,135,32)" fg:x="32767" fg:w="280"/><text x="26.8054%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (280 samples, 0.23%)</title><rect x="26.5554%" y="709" width="0.2269%" height="15" fill="rgb(246,101,22)" fg:x="32767" fg:w="280"/><text x="26.8054%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (271 samples, 0.22%)</title><rect x="26.5627%" y="693" width="0.2196%" height="15" fill="rgb(206,107,13)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (271 samples, 0.22%)</title><rect x="26.5627%" y="677" width="0.2196%" height="15" fill="rgb(250,100,44)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (271 samples, 0.22%)</title><rect x="26.5627%" y="661" width="0.2196%" height="15" fill="rgb(231,147,38)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (271 samples, 0.22%)</title><rect x="26.5627%" y="645" width="0.2196%" height="15" fill="rgb(229,8,40)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (271 samples, 0.22%)</title><rect x="26.5627%" y="629" width="0.2196%" height="15" fill="rgb(221,135,30)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (271 samples, 0.22%)</title><rect x="26.5627%" y="613" width="0.2196%" height="15" fill="rgb(249,193,18)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="623.50"></text></g><g><title>__rg_dealloc (271 samples, 0.22%)</title><rect x="26.5627%" y="597" width="0.2196%" height="15" fill="rgb(209,133,39)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (271 samples, 0.22%)</title><rect x="26.5627%" y="581" width="0.2196%" height="15" fill="rgb(232,100,14)" fg:x="32776" fg:w="271"/><text x="26.8127%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (15 samples, 0.01%)</title><rect x="26.7702%" y="565" width="0.0122%" height="15" fill="rgb(224,185,1)" fg:x="33032" fg:w="15"/><text x="27.0202%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (92 samples, 0.07%)</title><rect x="26.7823%" y="725" width="0.0746%" height="15" fill="rgb(223,139,8)" fg:x="33047" fg:w="92"/><text x="27.0323%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (92 samples, 0.07%)</title><rect x="26.7823%" y="709" width="0.0746%" height="15" fill="rgb(232,213,38)" fg:x="33047" fg:w="92"/><text x="27.0323%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (85 samples, 0.07%)</title><rect x="26.9031%" y="709" width="0.0689%" height="15" fill="rgb(207,94,22)" fg:x="33196" fg:w="85"/><text x="27.1531%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (78 samples, 0.06%)</title><rect x="26.9720%" y="709" width="0.0632%" height="15" fill="rgb(219,183,54)" fg:x="33281" fg:w="78"/><text x="27.2220%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (280 samples, 0.23%)</title><rect x="27.0352%" y="693" width="0.2269%" height="15" fill="rgb(216,185,54)" fg:x="33359" fg:w="280"/><text x="27.2852%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (141 samples, 0.11%)</title><rect x="27.3756%" y="661" width="0.1143%" height="15" fill="rgb(254,217,39)" fg:x="33779" fg:w="141"/><text x="27.6256%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (141 samples, 0.11%)</title><rect x="27.3756%" y="645" width="0.1143%" height="15" fill="rgb(240,178,23)" fg:x="33779" fg:w="141"/><text x="27.6256%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (139 samples, 0.11%)</title><rect x="27.3772%" y="629" width="0.1127%" height="15" fill="rgb(218,11,47)" fg:x="33781" fg:w="139"/><text x="27.6272%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (72 samples, 0.06%)</title><rect x="27.4315%" y="613" width="0.0584%" height="15" fill="rgb(218,51,51)" fg:x="33848" fg:w="72"/><text x="27.6815%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (72 samples, 0.06%)</title><rect x="27.4315%" y="597" width="0.0584%" height="15" fill="rgb(238,126,27)" fg:x="33848" fg:w="72"/><text x="27.6815%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (619 samples, 0.50%)</title><rect x="27.0352%" y="709" width="0.5017%" height="15" fill="rgb(249,202,22)" fg:x="33359" fg:w="619"/><text x="27.2852%" y="719.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (339 samples, 0.27%)</title><rect x="27.2621%" y="693" width="0.2747%" height="15" fill="rgb(254,195,49)" fg:x="33639" fg:w="339"/><text x="27.5121%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (339 samples, 0.27%)</title><rect x="27.2621%" y="677" width="0.2747%" height="15" fill="rgb(208,123,14)" fg:x="33639" fg:w="339"/><text x="27.5121%" y="687.50"></text></g><g><title>core::time::Duration::new (58 samples, 0.05%)</title><rect x="27.4898%" y="661" width="0.0470%" height="15" fill="rgb(224,200,8)" fg:x="33920" fg:w="58"/><text x="27.7398%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (2,305 samples, 1.87%)</title><rect x="26.8569%" y="725" width="1.8680%" height="15" fill="rgb(217,61,36)" fg:x="33139" fg:w="2305"/><text x="27.1069%" y="735.50">t..</text></g><g><title>std::time::SystemTime::now (1,466 samples, 1.19%)</title><rect x="27.5369%" y="709" width="1.1881%" height="15" fill="rgb(206,35,45)" fg:x="33978" fg:w="1466"/><text x="27.7869%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (1,466 samples, 1.19%)</title><rect x="27.5369%" y="693" width="1.1881%" height="15" fill="rgb(217,65,33)" fg:x="33978" fg:w="1466"/><text x="27.7869%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1,466 samples, 1.19%)</title><rect x="27.5369%" y="677" width="1.1881%" height="15" fill="rgb(222,158,48)" fg:x="33978" fg:w="1466"/><text x="27.7869%" y="687.50"></text></g><g><title>__clock_gettime (1,178 samples, 0.95%)</title><rect x="27.7703%" y="661" width="0.9547%" height="15" fill="rgb(254,2,54)" fg:x="34266" fg:w="1178"/><text x="28.0203%" y="671.50"></text></g><g><title>__vdso_clock_gettime (1,105 samples, 0.90%)</title><rect x="27.8294%" y="645" width="0.8955%" height="15" fill="rgb(250,143,38)" fg:x="34339" fg:w="1105"/><text x="28.0794%" y="655.50"></text></g><g><title>[[vdso]] (972 samples, 0.79%)</title><rect x="27.9372%" y="629" width="0.7877%" height="15" fill="rgb(248,25,0)" fg:x="34472" fg:w="972"/><text x="28.1872%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (54 samples, 0.04%)</title><rect x="28.7566%" y="613" width="0.0438%" height="15" fill="rgb(206,152,27)" fg:x="35483" fg:w="54"/><text x="29.0066%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (39 samples, 0.03%)</title><rect x="28.7687%" y="597" width="0.0316%" height="15" fill="rgb(240,77,30)" fg:x="35498" fg:w="39"/><text x="29.0187%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="28.7687%" y="581" width="0.0316%" height="15" fill="rgb(231,5,3)" fg:x="35498" fg:w="39"/><text x="29.0187%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="28.7833%" y="565" width="0.0170%" height="15" fill="rgb(207,226,32)" fg:x="35516" fg:w="21"/><text x="29.0333%" y="575.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="28.7833%" y="549" width="0.0170%" height="15" fill="rgb(222,207,47)" fg:x="35516" fg:w="21"/><text x="29.0333%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="28.7833%" y="533" width="0.0170%" height="15" fill="rgb(229,115,45)" fg:x="35516" fg:w="21"/><text x="29.0333%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="28.7833%" y="517" width="0.0170%" height="15" fill="rgb(224,191,6)" fg:x="35516" fg:w="21"/><text x="29.0333%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="28.7898%" y="501" width="0.0105%" height="15" fill="rgb(230,227,24)" fg:x="35524" fg:w="13"/><text x="29.0398%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="28.8011%" y="581" width="0.0105%" height="15" fill="rgb(228,80,19)" fg:x="35538" fg:w="13"/><text x="29.0511%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="28.8011%" y="565" width="0.0105%" height="15" fill="rgb(247,229,0)" fg:x="35538" fg:w="13"/><text x="29.0511%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.07%)</title><rect x="28.7476%" y="677" width="0.0673%" height="15" fill="rgb(237,194,15)" fg:x="35472" fg:w="83"/><text x="28.9976%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.07%)</title><rect x="28.7476%" y="661" width="0.0673%" height="15" fill="rgb(219,203,20)" fg:x="35472" fg:w="83"/><text x="28.9976%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.07%)</title><rect x="28.7476%" y="645" width="0.0673%" height="15" fill="rgb(234,128,8)" fg:x="35472" fg:w="83"/><text x="28.9976%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (83 samples, 0.07%)</title><rect x="28.7476%" y="629" width="0.0673%" height="15" fill="rgb(248,202,8)" fg:x="35472" fg:w="83"/><text x="28.9976%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (18 samples, 0.01%)</title><rect x="28.8003%" y="613" width="0.0146%" height="15" fill="rgb(206,104,37)" fg:x="35537" fg:w="18"/><text x="29.0503%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (18 samples, 0.01%)</title><rect x="28.8003%" y="597" width="0.0146%" height="15" fill="rgb(223,8,27)" fg:x="35537" fg:w="18"/><text x="29.0503%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (29 samples, 0.02%)</title><rect x="28.8295%" y="613" width="0.0235%" height="15" fill="rgb(216,217,28)" fg:x="35573" fg:w="29"/><text x="29.0795%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (25 samples, 0.02%)</title><rect x="28.8327%" y="597" width="0.0203%" height="15" fill="rgb(249,199,1)" fg:x="35577" fg:w="25"/><text x="29.0827%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (28 samples, 0.02%)</title><rect x="28.8530%" y="581" width="0.0227%" height="15" fill="rgb(240,85,17)" fg:x="35602" fg:w="28"/><text x="29.1030%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (28 samples, 0.02%)</title><rect x="28.8530%" y="565" width="0.0227%" height="15" fill="rgb(206,108,45)" fg:x="35602" fg:w="28"/><text x="29.1030%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (88 samples, 0.07%)</title><rect x="28.8149%" y="677" width="0.0713%" height="15" fill="rgb(245,210,41)" fg:x="35555" fg:w="88"/><text x="29.0649%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (88 samples, 0.07%)</title><rect x="28.8149%" y="661" width="0.0713%" height="15" fill="rgb(206,13,37)" fg:x="35555" fg:w="88"/><text x="29.0649%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (88 samples, 0.07%)</title><rect x="28.8149%" y="645" width="0.0713%" height="15" fill="rgb(250,61,18)" fg:x="35555" fg:w="88"/><text x="29.0649%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (88 samples, 0.07%)</title><rect x="28.8149%" y="629" width="0.0713%" height="15" fill="rgb(235,172,48)" fg:x="35555" fg:w="88"/><text x="29.0649%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (41 samples, 0.03%)</title><rect x="28.8530%" y="613" width="0.0332%" height="15" fill="rgb(249,201,17)" fg:x="35602" fg:w="41"/><text x="29.1030%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (41 samples, 0.03%)</title><rect x="28.8530%" y="597" width="0.0332%" height="15" fill="rgb(219,208,6)" fg:x="35602" fg:w="41"/><text x="29.1030%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (13 samples, 0.01%)</title><rect x="28.8757%" y="581" width="0.0105%" height="15" fill="rgb(248,31,23)" fg:x="35630" fg:w="13"/><text x="29.1257%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (265 samples, 0.21%)</title><rect x="28.7249%" y="709" width="0.2148%" height="15" fill="rgb(245,15,42)" fg:x="35444" fg:w="265"/><text x="28.9749%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (258 samples, 0.21%)</title><rect x="28.7306%" y="693" width="0.2091%" height="15" fill="rgb(222,217,39)" fg:x="35451" fg:w="258"/><text x="28.9806%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (66 samples, 0.05%)</title><rect x="28.8862%" y="677" width="0.0535%" height="15" fill="rgb(210,219,27)" fg:x="35643" fg:w="66"/><text x="29.1362%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (58 samples, 0.05%)</title><rect x="28.8927%" y="661" width="0.0470%" height="15" fill="rgb(252,166,36)" fg:x="35651" fg:w="58"/><text x="29.1427%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (58 samples, 0.05%)</title><rect x="28.8927%" y="645" width="0.0470%" height="15" fill="rgb(245,132,34)" fg:x="35651" fg:w="58"/><text x="29.1427%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (55 samples, 0.04%)</title><rect x="28.8951%" y="629" width="0.0446%" height="15" fill="rgb(236,54,3)" fg:x="35654" fg:w="55"/><text x="29.1451%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (55 samples, 0.04%)</title><rect x="28.8951%" y="613" width="0.0446%" height="15" fill="rgb(241,173,43)" fg:x="35654" fg:w="55"/><text x="29.1451%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (55 samples, 0.04%)</title><rect x="28.8951%" y="597" width="0.0446%" height="15" fill="rgb(215,190,9)" fg:x="35654" fg:w="55"/><text x="29.1451%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (20 samples, 0.02%)</title><rect x="28.9235%" y="581" width="0.0162%" height="15" fill="rgb(242,101,16)" fg:x="35689" fg:w="20"/><text x="29.1735%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (20 samples, 0.02%)</title><rect x="28.9235%" y="565" width="0.0162%" height="15" fill="rgb(223,190,21)" fg:x="35689" fg:w="20"/><text x="29.1735%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="29.2136%" y="469" width="0.0146%" height="15" fill="rgb(215,228,25)" fg:x="36047" fg:w="18"/><text x="29.4636%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (308 samples, 0.25%)</title><rect x="28.9851%" y="629" width="0.2496%" height="15" fill="rgb(225,36,22)" fg:x="35765" fg:w="308"/><text x="29.2351%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (308 samples, 0.25%)</title><rect x="28.9851%" y="613" width="0.2496%" height="15" fill="rgb(251,106,46)" fg:x="35765" fg:w="308"/><text x="29.2351%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (288 samples, 0.23%)</title><rect x="29.0013%" y="597" width="0.2334%" height="15" fill="rgb(208,90,1)" fg:x="35785" fg:w="288"/><text x="29.2513%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (237 samples, 0.19%)</title><rect x="29.0426%" y="581" width="0.1921%" height="15" fill="rgb(243,10,4)" fg:x="35836" fg:w="237"/><text x="29.2926%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (237 samples, 0.19%)</title><rect x="29.0426%" y="565" width="0.1921%" height="15" fill="rgb(212,137,27)" fg:x="35836" fg:w="237"/><text x="29.2926%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (237 samples, 0.19%)</title><rect x="29.0426%" y="549" width="0.1921%" height="15" fill="rgb(231,220,49)" fg:x="35836" fg:w="237"/><text x="29.2926%" y="559.50"></text></g><g><title>alloc::alloc::alloc (228 samples, 0.18%)</title><rect x="29.0499%" y="533" width="0.1848%" height="15" fill="rgb(237,96,20)" fg:x="35845" fg:w="228"/><text x="29.2999%" y="543.50"></text></g><g><title>__rg_alloc (228 samples, 0.18%)</title><rect x="29.0499%" y="517" width="0.1848%" height="15" fill="rgb(239,229,30)" fg:x="35845" fg:w="228"/><text x="29.2999%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (228 samples, 0.18%)</title><rect x="29.0499%" y="501" width="0.1848%" height="15" fill="rgb(219,65,33)" fg:x="35845" fg:w="228"/><text x="29.2999%" y="511.50"></text></g><g><title>sn_rust_alloc (223 samples, 0.18%)</title><rect x="29.0540%" y="485" width="0.1807%" height="15" fill="rgb(243,134,7)" fg:x="35850" fg:w="223"/><text x="29.3040%" y="495.50"></text></g><g><title>abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt;::new (15 samples, 0.01%)</title><rect x="29.2347%" y="629" width="0.0122%" height="15" fill="rgb(216,177,54)" fg:x="36073" fg:w="15"/><text x="29.4847%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (21 samples, 0.02%)</title><rect x="29.2558%" y="565" width="0.0170%" height="15" fill="rgb(211,160,20)" fg:x="36099" fg:w="21"/><text x="29.5058%" y="575.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="29.2728%" y="565" width="0.0584%" height="15" fill="rgb(239,85,39)" fg:x="36120" fg:w="72"/><text x="29.5228%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (118 samples, 0.10%)</title><rect x="29.2469%" y="581" width="0.0956%" height="15" fill="rgb(232,125,22)" fg:x="36088" fg:w="118"/><text x="29.4969%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (14 samples, 0.01%)</title><rect x="29.3312%" y="565" width="0.0113%" height="15" fill="rgb(244,57,34)" fg:x="36192" fg:w="14"/><text x="29.5812%" y="575.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (208 samples, 0.17%)</title><rect x="29.2469%" y="629" width="0.1686%" height="15" fill="rgb(214,203,32)" fg:x="36088" fg:w="208"/><text x="29.4969%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (208 samples, 0.17%)</title><rect x="29.2469%" y="613" width="0.1686%" height="15" fill="rgb(207,58,43)" fg:x="36088" fg:w="208"/><text x="29.4969%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (208 samples, 0.17%)</title><rect x="29.2469%" y="597" width="0.1686%" height="15" fill="rgb(215,193,15)" fg:x="36088" fg:w="208"/><text x="29.4969%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (90 samples, 0.07%)</title><rect x="29.3425%" y="581" width="0.0729%" height="15" fill="rgb(232,15,44)" fg:x="36206" fg:w="90"/><text x="29.5925%" y="591.50"></text></g><g><title>core::ptr::read (90 samples, 0.07%)</title><rect x="29.3425%" y="565" width="0.0729%" height="15" fill="rgb(212,3,48)" fg:x="36206" fg:w="90"/><text x="29.5925%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (621 samples, 0.50%)</title><rect x="28.9397%" y="709" width="0.5033%" height="15" fill="rgb(218,128,7)" fg:x="35709" fg:w="621"/><text x="29.1897%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (608 samples, 0.49%)</title><rect x="28.9502%" y="693" width="0.4927%" height="15" fill="rgb(226,216,39)" fg:x="35722" fg:w="608"/><text x="29.2002%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (601 samples, 0.49%)</title><rect x="28.9559%" y="677" width="0.4871%" height="15" fill="rgb(243,47,51)" fg:x="35729" fg:w="601"/><text x="29.2059%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (592 samples, 0.48%)</title><rect x="28.9632%" y="661" width="0.4798%" height="15" fill="rgb(241,183,40)" fg:x="35738" fg:w="592"/><text x="29.2132%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (592 samples, 0.48%)</title><rect x="28.9632%" y="645" width="0.4798%" height="15" fill="rgb(231,217,32)" fg:x="35738" fg:w="592"/><text x="29.2132%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (34 samples, 0.03%)</title><rect x="29.4154%" y="629" width="0.0276%" height="15" fill="rgb(229,61,38)" fg:x="36296" fg:w="34"/><text x="29.6654%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25 samples, 0.02%)</title><rect x="29.4227%" y="613" width="0.0203%" height="15" fill="rgb(225,210,5)" fg:x="36305" fg:w="25"/><text x="29.6727%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25 samples, 0.02%)</title><rect x="29.4227%" y="597" width="0.0203%" height="15" fill="rgb(231,79,45)" fg:x="36305" fg:w="25"/><text x="29.6727%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (17 samples, 0.01%)</title><rect x="29.4292%" y="581" width="0.0138%" height="15" fill="rgb(224,100,7)" fg:x="36313" fg:w="17"/><text x="29.6792%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="29.4292%" y="565" width="0.0138%" height="15" fill="rgb(241,198,18)" fg:x="36313" fg:w="17"/><text x="29.6792%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (55 samples, 0.04%)</title><rect x="29.4641%" y="597" width="0.0446%" height="15" fill="rgb(252,97,53)" fg:x="36356" fg:w="55"/><text x="29.7141%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="29.4908%" y="581" width="0.0178%" height="15" fill="rgb(220,88,7)" fg:x="36389" fg:w="22"/><text x="29.7408%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="29.4908%" y="565" width="0.0178%" height="15" fill="rgb(213,176,14)" fg:x="36389" fg:w="22"/><text x="29.7408%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="29.4908%" y="549" width="0.0178%" height="15" fill="rgb(246,73,7)" fg:x="36389" fg:w="22"/><text x="29.7408%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="29.4908%" y="533" width="0.0178%" height="15" fill="rgb(245,64,36)" fg:x="36389" fg:w="22"/><text x="29.7408%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (22 samples, 0.02%)</title><rect x="29.4908%" y="517" width="0.0178%" height="15" fill="rgb(245,80,10)" fg:x="36389" fg:w="22"/><text x="29.7408%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="29.4908%" y="501" width="0.0178%" height="15" fill="rgb(232,107,50)" fg:x="36389" fg:w="22"/><text x="29.7408%" y="511.50"></text></g><g><title>sn_rust_dealloc (146 samples, 0.12%)</title><rect x="29.5086%" y="597" width="0.1183%" height="15" fill="rgb(253,3,0)" fg:x="36411" fg:w="146"/><text x="29.7586%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (1,116 samples, 0.90%)</title><rect x="28.7249%" y="725" width="0.9044%" height="15" fill="rgb(212,99,53)" fg:x="35444" fg:w="1116"/><text x="28.9749%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (230 samples, 0.19%)</title><rect x="29.4430%" y="709" width="0.1864%" height="15" fill="rgb(249,111,54)" fg:x="36330" fg:w="230"/><text x="29.6930%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (230 samples, 0.19%)</title><rect x="29.4430%" y="693" width="0.1864%" height="15" fill="rgb(249,55,30)" fg:x="36330" fg:w="230"/><text x="29.6930%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (230 samples, 0.19%)</title><rect x="29.4430%" y="677" width="0.1864%" height="15" fill="rgb(237,47,42)" fg:x="36330" fg:w="230"/><text x="29.6930%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (222 samples, 0.18%)</title><rect x="29.4495%" y="661" width="0.1799%" height="15" fill="rgb(211,20,18)" fg:x="36338" fg:w="222"/><text x="29.6995%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (221 samples, 0.18%)</title><rect x="29.4503%" y="645" width="0.1791%" height="15" fill="rgb(231,203,46)" fg:x="36339" fg:w="221"/><text x="29.7003%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (221 samples, 0.18%)</title><rect x="29.4503%" y="629" width="0.1791%" height="15" fill="rgb(237,142,3)" fg:x="36339" fg:w="221"/><text x="29.7003%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (221 samples, 0.18%)</title><rect x="29.4503%" y="613" width="0.1791%" height="15" fill="rgb(241,107,1)" fg:x="36339" fg:w="221"/><text x="29.7003%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (18 samples, 0.01%)</title><rect x="29.6294%" y="725" width="0.0146%" height="15" fill="rgb(229,83,13)" fg:x="36560" fg:w="18"/><text x="29.8794%" y="735.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SinkReporter::increment_in (26 samples, 0.02%)</title><rect x="29.6440%" y="725" width="0.0211%" height="15" fill="rgb(241,91,40)" fg:x="36578" fg:w="26"/><text x="29.8940%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (20,848 samples, 16.90%)</title><rect x="12.7724%" y="741" width="16.8959%" height="15" fill="rgb(225,3,45)" fg:x="15760" fg:w="20848"/><text x="13.0224%" y="751.50">tremor_runtime::connectors..</text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (27 samples, 0.02%)</title><rect x="29.6732%" y="645" width="0.0219%" height="15" fill="rgb(244,223,14)" fg:x="36614" fg:w="27"/><text x="29.9232%" y="655.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="29.6813%" y="629" width="0.0138%" height="15" fill="rgb(224,124,37)" fg:x="36624" fg:w="17"/><text x="29.9313%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (142 samples, 0.12%)</title><rect x="29.6975%" y="645" width="0.1151%" height="15" fill="rgb(251,171,30)" fg:x="36644" fg:w="142"/><text x="29.9475%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (142 samples, 0.12%)</title><rect x="29.6975%" y="629" width="0.1151%" height="15" fill="rgb(236,46,54)" fg:x="36644" fg:w="142"/><text x="29.9475%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (190 samples, 0.15%)</title><rect x="29.6683%" y="693" width="0.1540%" height="15" fill="rgb(245,213,5)" fg:x="36608" fg:w="190"/><text x="29.9183%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (190 samples, 0.15%)</title><rect x="29.6683%" y="677" width="0.1540%" height="15" fill="rgb(230,144,27)" fg:x="36608" fg:w="190"/><text x="29.9183%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (190 samples, 0.15%)</title><rect x="29.6683%" y="661" width="0.1540%" height="15" fill="rgb(220,86,6)" fg:x="36608" fg:w="190"/><text x="29.9183%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (334 samples, 0.27%)</title><rect x="29.8831%" y="373" width="0.2707%" height="15" fill="rgb(240,20,13)" fg:x="36873" fg:w="334"/><text x="30.1331%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (417 samples, 0.34%)</title><rect x="29.8223%" y="581" width="0.3380%" height="15" fill="rgb(217,89,34)" fg:x="36798" fg:w="417"/><text x="30.0723%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (416 samples, 0.34%)</title><rect x="29.8231%" y="565" width="0.3371%" height="15" fill="rgb(229,13,5)" fg:x="36799" fg:w="416"/><text x="30.0731%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (416 samples, 0.34%)</title><rect x="29.8231%" y="549" width="0.3371%" height="15" fill="rgb(244,67,35)" fg:x="36799" fg:w="416"/><text x="30.0731%" y="559.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (410 samples, 0.33%)</title><rect x="29.8279%" y="533" width="0.3323%" height="15" fill="rgb(221,40,2)" fg:x="36805" fg:w="410"/><text x="30.0779%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (410 samples, 0.33%)</title><rect x="29.8279%" y="517" width="0.3323%" height="15" fill="rgb(237,157,21)" fg:x="36805" fg:w="410"/><text x="30.0779%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (398 samples, 0.32%)</title><rect x="29.8377%" y="501" width="0.3226%" height="15" fill="rgb(222,94,11)" fg:x="36817" fg:w="398"/><text x="30.0877%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (387 samples, 0.31%)</title><rect x="29.8466%" y="485" width="0.3136%" height="15" fill="rgb(249,113,6)" fg:x="36828" fg:w="387"/><text x="30.0966%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (387 samples, 0.31%)</title><rect x="29.8466%" y="469" width="0.3136%" height="15" fill="rgb(238,137,36)" fg:x="36828" fg:w="387"/><text x="30.0966%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (387 samples, 0.31%)</title><rect x="29.8466%" y="453" width="0.3136%" height="15" fill="rgb(210,102,26)" fg:x="36828" fg:w="387"/><text x="30.0966%" y="463.50"></text></g><g><title>alloc::alloc::alloc (387 samples, 0.31%)</title><rect x="29.8466%" y="437" width="0.3136%" height="15" fill="rgb(218,30,30)" fg:x="36828" fg:w="387"/><text x="30.0966%" y="447.50"></text></g><g><title>__rg_alloc (387 samples, 0.31%)</title><rect x="29.8466%" y="421" width="0.3136%" height="15" fill="rgb(214,67,26)" fg:x="36828" fg:w="387"/><text x="30.0966%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (387 samples, 0.31%)</title><rect x="29.8466%" y="405" width="0.3136%" height="15" fill="rgb(251,9,53)" fg:x="36828" fg:w="387"/><text x="30.0966%" y="415.50"></text></g><g><title>sn_rust_alloc (382 samples, 0.31%)</title><rect x="29.8506%" y="389" width="0.3096%" height="15" fill="rgb(228,204,25)" fg:x="36833" fg:w="382"/><text x="30.1006%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (435 samples, 0.35%)</title><rect x="29.8223%" y="661" width="0.3525%" height="15" fill="rgb(207,153,8)" fg:x="36798" fg:w="435"/><text x="30.0723%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (435 samples, 0.35%)</title><rect x="29.8223%" y="645" width="0.3525%" height="15" fill="rgb(242,9,16)" fg:x="36798" fg:w="435"/><text x="30.0723%" y="655.50"></text></g><g><title>value_trait::Builder::object (435 samples, 0.35%)</title><rect x="29.8223%" y="629" width="0.3525%" height="15" fill="rgb(217,211,10)" fg:x="36798" fg:w="435"/><text x="30.0723%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (435 samples, 0.35%)</title><rect x="29.8223%" y="613" width="0.3525%" height="15" fill="rgb(219,228,52)" fg:x="36798" fg:w="435"/><text x="30.0723%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (435 samples, 0.35%)</title><rect x="29.8223%" y="597" width="0.3525%" height="15" fill="rgb(231,92,29)" fg:x="36798" fg:w="435"/><text x="30.0723%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (18 samples, 0.01%)</title><rect x="30.1602%" y="581" width="0.0146%" height="15" fill="rgb(232,8,23)" fg:x="37215" fg:w="18"/><text x="30.4102%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (18 samples, 0.01%)</title><rect x="30.1602%" y="565" width="0.0146%" height="15" fill="rgb(216,211,34)" fg:x="37215" fg:w="18"/><text x="30.4102%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="30.1635%" y="549" width="0.0113%" height="15" fill="rgb(236,151,0)" fg:x="37219" fg:w="14"/><text x="30.4135%" y="559.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="30.2170%" y="469" width="0.0397%" height="15" fill="rgb(209,168,3)" fg:x="37285" fg:w="49"/><text x="30.4670%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 0.07%)</title><rect x="30.1862%" y="549" width="0.0713%" height="15" fill="rgb(208,129,28)" fg:x="37247" fg:w="88"/><text x="30.4362%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (88 samples, 0.07%)</title><rect x="30.1862%" y="533" width="0.0713%" height="15" fill="rgb(229,78,22)" fg:x="37247" fg:w="88"/><text x="30.4362%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (73 samples, 0.06%)</title><rect x="30.1983%" y="517" width="0.0592%" height="15" fill="rgb(228,187,13)" fg:x="37262" fg:w="73"/><text x="30.4483%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (73 samples, 0.06%)</title><rect x="30.1983%" y="501" width="0.0592%" height="15" fill="rgb(240,119,24)" fg:x="37262" fg:w="73"/><text x="30.4483%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (73 samples, 0.06%)</title><rect x="30.1983%" y="485" width="0.0592%" height="15" fill="rgb(209,194,42)" fg:x="37262" fg:w="73"/><text x="30.4483%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (120 samples, 0.10%)</title><rect x="30.1748%" y="661" width="0.0973%" height="15" fill="rgb(247,200,46)" fg:x="37233" fg:w="120"/><text x="30.4248%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (120 samples, 0.10%)</title><rect x="30.1748%" y="645" width="0.0973%" height="15" fill="rgb(218,76,16)" fg:x="37233" fg:w="120"/><text x="30.4248%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (120 samples, 0.10%)</title><rect x="30.1748%" y="629" width="0.0973%" height="15" fill="rgb(225,21,48)" fg:x="37233" fg:w="120"/><text x="30.4248%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (120 samples, 0.10%)</title><rect x="30.1748%" y="613" width="0.0973%" height="15" fill="rgb(239,223,50)" fg:x="37233" fg:w="120"/><text x="30.4248%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (119 samples, 0.10%)</title><rect x="30.1756%" y="597" width="0.0964%" height="15" fill="rgb(244,45,21)" fg:x="37234" fg:w="119"/><text x="30.4256%" y="607.50"></text></g><g><title>core::mem::drop (106 samples, 0.09%)</title><rect x="30.1862%" y="581" width="0.0859%" height="15" fill="rgb(232,33,43)" fg:x="37247" fg:w="106"/><text x="30.4362%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (106 samples, 0.09%)</title><rect x="30.1862%" y="565" width="0.0859%" height="15" fill="rgb(209,8,3)" fg:x="37247" fg:w="106"/><text x="30.4362%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (18 samples, 0.01%)</title><rect x="30.2575%" y="549" width="0.0146%" height="15" fill="rgb(214,25,53)" fg:x="37335" fg:w="18"/><text x="30.5075%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="30.2575%" y="533" width="0.0146%" height="15" fill="rgb(254,186,54)" fg:x="37335" fg:w="18"/><text x="30.5075%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (25 samples, 0.02%)</title><rect x="30.2721%" y="661" width="0.0203%" height="15" fill="rgb(208,174,49)" fg:x="37353" fg:w="25"/><text x="30.5221%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (25 samples, 0.02%)</title><rect x="30.2721%" y="645" width="0.0203%" height="15" fill="rgb(233,191,51)" fg:x="37353" fg:w="25"/><text x="30.5221%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="30.2721%" y="629" width="0.0203%" height="15" fill="rgb(222,134,10)" fg:x="37353" fg:w="25"/><text x="30.5221%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="30.2721%" y="613" width="0.0203%" height="15" fill="rgb(230,226,20)" fg:x="37353" fg:w="25"/><text x="30.5221%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="30.2721%" y="597" width="0.0203%" height="15" fill="rgb(251,111,25)" fg:x="37353" fg:w="25"/><text x="30.5221%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (20 samples, 0.02%)</title><rect x="30.3053%" y="645" width="0.0162%" height="15" fill="rgb(224,40,46)" fg:x="37394" fg:w="20"/><text x="30.5553%" y="655.50"></text></g><g><title>core::time::Duration::as_nanos (16 samples, 0.01%)</title><rect x="30.3215%" y="645" width="0.0130%" height="15" fill="rgb(236,108,47)" fg:x="37414" fg:w="16"/><text x="30.5715%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (90 samples, 0.07%)</title><rect x="30.3345%" y="629" width="0.0729%" height="15" fill="rgb(234,93,0)" fg:x="37430" fg:w="90"/><text x="30.5845%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (47 samples, 0.04%)</title><rect x="30.4350%" y="597" width="0.0381%" height="15" fill="rgb(224,213,32)" fg:x="37554" fg:w="47"/><text x="30.6850%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (47 samples, 0.04%)</title><rect x="30.4350%" y="581" width="0.0381%" height="15" fill="rgb(251,11,48)" fg:x="37554" fg:w="47"/><text x="30.6850%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (47 samples, 0.04%)</title><rect x="30.4350%" y="565" width="0.0381%" height="15" fill="rgb(236,173,5)" fg:x="37554" fg:w="47"/><text x="30.6850%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (24 samples, 0.02%)</title><rect x="30.4536%" y="549" width="0.0195%" height="15" fill="rgb(230,95,12)" fg:x="37577" fg:w="24"/><text x="30.7036%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="30.4536%" y="533" width="0.0195%" height="15" fill="rgb(232,209,1)" fg:x="37577" fg:w="24"/><text x="30.7036%" y="543.50"></text></g><g><title>std::time::SystemTime::duration_since (200 samples, 0.16%)</title><rect x="30.3345%" y="645" width="0.1621%" height="15" fill="rgb(232,6,1)" fg:x="37430" fg:w="200"/><text x="30.5845%" y="655.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (110 samples, 0.09%)</title><rect x="30.4074%" y="629" width="0.0891%" height="15" fill="rgb(210,224,50)" fg:x="37520" fg:w="110"/><text x="30.6574%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (110 samples, 0.09%)</title><rect x="30.4074%" y="613" width="0.0891%" height="15" fill="rgb(228,127,35)" fg:x="37520" fg:w="110"/><text x="30.6574%" y="623.50"></text></g><g><title>core::time::Duration::new (29 samples, 0.02%)</title><rect x="30.4730%" y="597" width="0.0235%" height="15" fill="rgb(245,102,45)" fg:x="37601" fg:w="29"/><text x="30.7230%" y="607.50"></text></g><g><title>tremor_common::time::nanotime (644 samples, 0.52%)</title><rect x="30.2923%" y="661" width="0.5219%" height="15" fill="rgb(214,1,49)" fg:x="37378" fg:w="644"/><text x="30.5423%" y="671.50"></text></g><g><title>std::time::SystemTime::now (392 samples, 0.32%)</title><rect x="30.4966%" y="645" width="0.3177%" height="15" fill="rgb(226,163,40)" fg:x="37630" fg:w="392"/><text x="30.7466%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (392 samples, 0.32%)</title><rect x="30.4966%" y="629" width="0.3177%" height="15" fill="rgb(239,212,28)" fg:x="37630" fg:w="392"/><text x="30.7466%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (392 samples, 0.32%)</title><rect x="30.4966%" y="613" width="0.3177%" height="15" fill="rgb(220,20,13)" fg:x="37630" fg:w="392"/><text x="30.7466%" y="623.50"></text></g><g><title>__clock_gettime (335 samples, 0.27%)</title><rect x="30.5427%" y="597" width="0.2715%" height="15" fill="rgb(210,164,35)" fg:x="37687" fg:w="335"/><text x="30.7927%" y="607.50"></text></g><g><title>__vdso_clock_gettime (319 samples, 0.26%)</title><rect x="30.5557%" y="581" width="0.2585%" height="15" fill="rgb(248,109,41)" fg:x="37703" fg:w="319"/><text x="30.8057%" y="591.50"></text></g><g><title>[[vdso]] (285 samples, 0.23%)</title><rect x="30.5833%" y="565" width="0.2310%" height="15" fill="rgb(238,23,50)" fg:x="37737" fg:w="285"/><text x="30.8333%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,465 samples, 1.19%)</title><rect x="29.6683%" y="725" width="1.1873%" height="15" fill="rgb(211,48,49)" fg:x="36608" fg:w="1465"/><text x="29.9183%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,465 samples, 1.19%)</title><rect x="29.6683%" y="709" width="1.1873%" height="15" fill="rgb(223,36,21)" fg:x="36608" fg:w="1465"/><text x="29.9183%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,275 samples, 1.03%)</title><rect x="29.8223%" y="693" width="1.0333%" height="15" fill="rgb(207,123,46)" fg:x="36798" fg:w="1275"/><text x="30.0723%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,275 samples, 1.03%)</title><rect x="29.8223%" y="677" width="1.0333%" height="15" fill="rgb(240,218,32)" fg:x="36798" fg:w="1275"/><text x="30.0723%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (51 samples, 0.04%)</title><rect x="30.8142%" y="661" width="0.0413%" height="15" fill="rgb(252,5,43)" fg:x="38022" fg:w="51"/><text x="31.0642%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (38 samples, 0.03%)</title><rect x="30.8248%" y="645" width="0.0308%" height="15" fill="rgb(252,84,19)" fg:x="38035" fg:w="38"/><text x="31.0748%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (30 samples, 0.02%)</title><rect x="30.8313%" y="629" width="0.0243%" height="15" fill="rgb(243,152,39)" fg:x="38043" fg:w="30"/><text x="31.0813%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (30 samples, 0.02%)</title><rect x="30.8313%" y="613" width="0.0243%" height="15" fill="rgb(234,160,15)" fg:x="38043" fg:w="30"/><text x="31.0813%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (30 samples, 0.02%)</title><rect x="30.8313%" y="597" width="0.0243%" height="15" fill="rgb(237,34,20)" fg:x="38043" fg:w="30"/><text x="31.0813%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (15 samples, 0.01%)</title><rect x="30.8434%" y="581" width="0.0122%" height="15" fill="rgb(229,97,13)" fg:x="38058" fg:w="15"/><text x="31.0934%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (36 samples, 0.03%)</title><rect x="32.1020%" y="133" width="0.0292%" height="15" fill="rgb(234,71,50)" fg:x="39611" fg:w="36"/><text x="32.3520%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (381 samples, 0.31%)</title><rect x="31.8240%" y="277" width="0.3088%" height="15" fill="rgb(253,155,4)" fg:x="39268" fg:w="381"/><text x="32.0740%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (381 samples, 0.31%)</title><rect x="31.8240%" y="261" width="0.3088%" height="15" fill="rgb(222,185,37)" fg:x="39268" fg:w="381"/><text x="32.0740%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (381 samples, 0.31%)</title><rect x="31.8240%" y="245" width="0.3088%" height="15" fill="rgb(251,177,13)" fg:x="39268" fg:w="381"/><text x="32.0740%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (374 samples, 0.30%)</title><rect x="31.8297%" y="229" width="0.3031%" height="15" fill="rgb(250,179,40)" fg:x="39275" fg:w="374"/><text x="32.0797%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (374 samples, 0.30%)</title><rect x="31.8297%" y="213" width="0.3031%" height="15" fill="rgb(242,44,2)" fg:x="39275" fg:w="374"/><text x="32.0797%" y="223.50"></text></g><g><title>alloc::alloc::alloc (373 samples, 0.30%)</title><rect x="31.8305%" y="197" width="0.3023%" height="15" fill="rgb(216,177,13)" fg:x="39276" fg:w="373"/><text x="32.0805%" y="207.50"></text></g><g><title>__rg_alloc (373 samples, 0.30%)</title><rect x="31.8305%" y="181" width="0.3023%" height="15" fill="rgb(216,106,43)" fg:x="39276" fg:w="373"/><text x="32.0805%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (373 samples, 0.30%)</title><rect x="31.8305%" y="165" width="0.3023%" height="15" fill="rgb(216,183,2)" fg:x="39276" fg:w="373"/><text x="32.0805%" y="175.50"></text></g><g><title>sn_rust_alloc (357 samples, 0.29%)</title><rect x="31.8435%" y="149" width="0.2893%" height="15" fill="rgb(249,75,3)" fg:x="39292" fg:w="357"/><text x="32.0935%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (455 samples, 0.37%)</title><rect x="31.8070%" y="389" width="0.3687%" height="15" fill="rgb(219,67,39)" fg:x="39247" fg:w="455"/><text x="32.0570%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (451 samples, 0.37%)</title><rect x="31.8103%" y="373" width="0.3655%" height="15" fill="rgb(253,228,2)" fg:x="39251" fg:w="451"/><text x="32.0603%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (445 samples, 0.36%)</title><rect x="31.8151%" y="357" width="0.3606%" height="15" fill="rgb(235,138,27)" fg:x="39257" fg:w="445"/><text x="32.0651%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (434 samples, 0.35%)</title><rect x="31.8240%" y="341" width="0.3517%" height="15" fill="rgb(236,97,51)" fg:x="39268" fg:w="434"/><text x="32.0740%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (434 samples, 0.35%)</title><rect x="31.8240%" y="325" width="0.3517%" height="15" fill="rgb(240,80,30)" fg:x="39268" fg:w="434"/><text x="32.0740%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (434 samples, 0.35%)</title><rect x="31.8240%" y="309" width="0.3517%" height="15" fill="rgb(230,178,19)" fg:x="39268" fg:w="434"/><text x="32.0740%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (434 samples, 0.35%)</title><rect x="31.8240%" y="293" width="0.3517%" height="15" fill="rgb(210,190,27)" fg:x="39268" fg:w="434"/><text x="32.0740%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (53 samples, 0.04%)</title><rect x="32.1328%" y="277" width="0.0430%" height="15" fill="rgb(222,107,31)" fg:x="39649" fg:w="53"/><text x="32.3828%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.04%)</title><rect x="32.1328%" y="261" width="0.0430%" height="15" fill="rgb(216,127,34)" fg:x="39649" fg:w="53"/><text x="32.3828%" y="271.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.03%)</title><rect x="32.1409%" y="245" width="0.0348%" height="15" fill="rgb(234,116,52)" fg:x="39659" fg:w="43"/><text x="32.3909%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.02%)</title><rect x="32.1839%" y="373" width="0.0195%" height="15" fill="rgb(222,124,15)" fg:x="39712" fg:w="24"/><text x="32.4339%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (18 samples, 0.01%)</title><rect x="32.1887%" y="357" width="0.0146%" height="15" fill="rgb(231,179,28)" fg:x="39718" fg:w="18"/><text x="32.4387%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (13 samples, 0.01%)</title><rect x="32.2033%" y="245" width="0.0105%" height="15" fill="rgb(226,93,45)" fg:x="39736" fg:w="13"/><text x="32.4533%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (47 samples, 0.04%)</title><rect x="32.2941%" y="37" width="0.0381%" height="15" fill="rgb(215,8,51)" fg:x="39848" fg:w="47"/><text x="32.5441%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="32.2139%" y="181" width="0.1191%" height="15" fill="rgb(223,106,5)" fg:x="39749" fg:w="147"/><text x="32.4639%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="32.2139%" y="165" width="0.1191%" height="15" fill="rgb(250,191,5)" fg:x="39749" fg:w="147"/><text x="32.4639%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (147 samples, 0.12%)</title><rect x="32.2139%" y="149" width="0.1191%" height="15" fill="rgb(242,132,44)" fg:x="39749" fg:w="147"/><text x="32.4639%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147 samples, 0.12%)</title><rect x="32.2139%" y="133" width="0.1191%" height="15" fill="rgb(251,152,29)" fg:x="39749" fg:w="147"/><text x="32.4639%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147 samples, 0.12%)</title><rect x="32.2139%" y="117" width="0.1191%" height="15" fill="rgb(218,179,5)" fg:x="39749" fg:w="147"/><text x="32.4639%" y="127.50"></text></g><g><title>alloc::alloc::alloc (144 samples, 0.12%)</title><rect x="32.2163%" y="101" width="0.1167%" height="15" fill="rgb(227,67,19)" fg:x="39752" fg:w="144"/><text x="32.4663%" y="111.50"></text></g><g><title>__rg_alloc (144 samples, 0.12%)</title><rect x="32.2163%" y="85" width="0.1167%" height="15" fill="rgb(233,119,31)" fg:x="39752" fg:w="144"/><text x="32.4663%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (144 samples, 0.12%)</title><rect x="32.2163%" y="69" width="0.1167%" height="15" fill="rgb(241,120,22)" fg:x="39752" fg:w="144"/><text x="32.4663%" y="79.50"></text></g><g><title>sn_rust_alloc (141 samples, 0.11%)</title><rect x="32.2187%" y="53" width="0.1143%" height="15" fill="rgb(224,102,30)" fg:x="39755" fg:w="141"/><text x="32.4687%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (193 samples, 0.16%)</title><rect x="32.2033%" y="293" width="0.1564%" height="15" fill="rgb(210,164,37)" fg:x="39736" fg:w="193"/><text x="32.4533%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (193 samples, 0.16%)</title><rect x="32.2033%" y="277" width="0.1564%" height="15" fill="rgb(226,191,16)" fg:x="39736" fg:w="193"/><text x="32.4533%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (193 samples, 0.16%)</title><rect x="32.2033%" y="261" width="0.1564%" height="15" fill="rgb(214,40,45)" fg:x="39736" fg:w="193"/><text x="32.4533%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (180 samples, 0.15%)</title><rect x="32.2139%" y="245" width="0.1459%" height="15" fill="rgb(244,29,26)" fg:x="39749" fg:w="180"/><text x="32.4639%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (180 samples, 0.15%)</title><rect x="32.2139%" y="229" width="0.1459%" height="15" fill="rgb(216,16,5)" fg:x="39749" fg:w="180"/><text x="32.4639%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (180 samples, 0.15%)</title><rect x="32.2139%" y="213" width="0.1459%" height="15" fill="rgb(249,76,35)" fg:x="39749" fg:w="180"/><text x="32.4639%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (180 samples, 0.15%)</title><rect x="32.2139%" y="197" width="0.1459%" height="15" fill="rgb(207,11,44)" fg:x="39749" fg:w="180"/><text x="32.4639%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (33 samples, 0.03%)</title><rect x="32.3330%" y="181" width="0.0267%" height="15" fill="rgb(228,190,49)" fg:x="39896" fg:w="33"/><text x="32.5830%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.03%)</title><rect x="32.3330%" y="165" width="0.0267%" height="15" fill="rgb(214,173,12)" fg:x="39896" fg:w="33"/><text x="32.5830%" y="175.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="32.3370%" y="149" width="0.0227%" height="15" fill="rgb(218,26,35)" fg:x="39901" fg:w="28"/><text x="32.5870%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.03%)</title><rect x="32.3597%" y="293" width="0.0300%" height="15" fill="rgb(220,200,19)" fg:x="39929" fg:w="37"/><text x="32.6097%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="32.3654%" y="277" width="0.0243%" height="15" fill="rgb(239,95,49)" fg:x="39936" fg:w="30"/><text x="32.6154%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="32.3654%" y="261" width="0.0243%" height="15" fill="rgb(235,85,53)" fg:x="39936" fg:w="30"/><text x="32.6154%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="32.4465%" y="149" width="0.0227%" height="15" fill="rgb(233,133,31)" fg:x="40036" fg:w="28"/><text x="32.6965%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 0.07%)</title><rect x="32.4043%" y="245" width="0.0673%" height="15" fill="rgb(218,25,20)" fg:x="39984" fg:w="83"/><text x="32.6543%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 0.07%)</title><rect x="32.4043%" y="229" width="0.0673%" height="15" fill="rgb(252,210,38)" fg:x="39984" fg:w="83"/><text x="32.6543%" y="239.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.07%)</title><rect x="32.4059%" y="213" width="0.0656%" height="15" fill="rgb(242,134,21)" fg:x="39986" fg:w="81"/><text x="32.6559%" y="223.50"></text></g><g><title>__rg_alloc (81 samples, 0.07%)</title><rect x="32.4059%" y="197" width="0.0656%" height="15" fill="rgb(213,28,48)" fg:x="39986" fg:w="81"/><text x="32.6559%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (81 samples, 0.07%)</title><rect x="32.4059%" y="181" width="0.0656%" height="15" fill="rgb(250,196,2)" fg:x="39986" fg:w="81"/><text x="32.6559%" y="191.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.06%)</title><rect x="32.4084%" y="165" width="0.0632%" height="15" fill="rgb(227,5,17)" fg:x="39989" fg:w="78"/><text x="32.6584%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.08%)</title><rect x="32.3970%" y="293" width="0.0810%" height="15" fill="rgb(221,226,24)" fg:x="39975" fg:w="100"/><text x="32.6470%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (92 samples, 0.07%)</title><rect x="32.4035%" y="277" width="0.0746%" height="15" fill="rgb(211,5,48)" fg:x="39983" fg:w="92"/><text x="32.6535%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (92 samples, 0.07%)</title><rect x="32.4035%" y="261" width="0.0746%" height="15" fill="rgb(219,150,6)" fg:x="39983" fg:w="92"/><text x="32.6535%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,588 samples, 1.29%)</title><rect x="31.2016%" y="405" width="1.2870%" height="15" fill="rgb(251,46,16)" fg:x="38500" fg:w="1588"/><text x="31.4516%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (386 samples, 0.31%)</title><rect x="32.1758%" y="389" width="0.3128%" height="15" fill="rgb(220,204,40)" fg:x="39702" fg:w="386"/><text x="32.4258%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (352 samples, 0.29%)</title><rect x="32.2033%" y="373" width="0.2853%" height="15" fill="rgb(211,85,2)" fg:x="39736" fg:w="352"/><text x="32.4533%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (352 samples, 0.29%)</title><rect x="32.2033%" y="357" width="0.2853%" height="15" fill="rgb(229,17,7)" fg:x="39736" fg:w="352"/><text x="32.4533%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (352 samples, 0.29%)</title><rect x="32.2033%" y="341" width="0.2853%" height="15" fill="rgb(239,72,28)" fg:x="39736" fg:w="352"/><text x="32.4533%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (352 samples, 0.29%)</title><rect x="32.2033%" y="325" width="0.2853%" height="15" fill="rgb(230,47,54)" fg:x="39736" fg:w="352"/><text x="32.4533%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (352 samples, 0.29%)</title><rect x="32.2033%" y="309" width="0.2853%" height="15" fill="rgb(214,50,8)" fg:x="39736" fg:w="352"/><text x="32.4533%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (18 samples, 0.01%)</title><rect x="32.5494%" y="325" width="0.0146%" height="15" fill="rgb(216,198,43)" fg:x="40163" fg:w="18"/><text x="32.7994%" y="335.50"></text></g><g><title>core::time::Duration::as_nanos (26 samples, 0.02%)</title><rect x="32.5640%" y="325" width="0.0211%" height="15" fill="rgb(234,20,35)" fg:x="40181" fg:w="26"/><text x="32.8140%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (90 samples, 0.07%)</title><rect x="32.5850%" y="309" width="0.0729%" height="15" fill="rgb(254,45,19)" fg:x="40207" fg:w="90"/><text x="32.8350%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (43 samples, 0.03%)</title><rect x="32.6953%" y="277" width="0.0348%" height="15" fill="rgb(219,14,44)" fg:x="40343" fg:w="43"/><text x="32.9453%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (43 samples, 0.03%)</title><rect x="32.6953%" y="261" width="0.0348%" height="15" fill="rgb(217,220,26)" fg:x="40343" fg:w="43"/><text x="32.9453%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (41 samples, 0.03%)</title><rect x="32.6969%" y="245" width="0.0332%" height="15" fill="rgb(213,158,28)" fg:x="40345" fg:w="41"/><text x="32.9469%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (15 samples, 0.01%)</title><rect x="32.7179%" y="229" width="0.0122%" height="15" fill="rgb(252,51,52)" fg:x="40371" fg:w="15"/><text x="32.9679%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="32.7179%" y="213" width="0.0122%" height="15" fill="rgb(246,89,16)" fg:x="40371" fg:w="15"/><text x="32.9679%" y="223.50"></text></g><g><title>std::time::SystemTime::duration_since (190 samples, 0.15%)</title><rect x="32.5850%" y="325" width="0.1540%" height="15" fill="rgb(216,158,49)" fg:x="40207" fg:w="190"/><text x="32.8350%" y="335.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (100 samples, 0.08%)</title><rect x="32.6580%" y="309" width="0.0810%" height="15" fill="rgb(236,107,19)" fg:x="40297" fg:w="100"/><text x="32.9080%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (100 samples, 0.08%)</title><rect x="32.6580%" y="293" width="0.0810%" height="15" fill="rgb(228,185,30)" fg:x="40297" fg:w="100"/><text x="32.9080%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (734 samples, 0.59%)</title><rect x="32.4886%" y="405" width="0.5949%" height="15" fill="rgb(246,134,8)" fg:x="40088" fg:w="734"/><text x="32.7386%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (734 samples, 0.59%)</title><rect x="32.4886%" y="389" width="0.5949%" height="15" fill="rgb(214,143,50)" fg:x="40088" fg:w="734"/><text x="32.7386%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (688 samples, 0.56%)</title><rect x="32.5259%" y="373" width="0.5576%" height="15" fill="rgb(228,75,8)" fg:x="40134" fg:w="688"/><text x="32.7759%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (688 samples, 0.56%)</title><rect x="32.5259%" y="357" width="0.5576%" height="15" fill="rgb(207,175,4)" fg:x="40134" fg:w="688"/><text x="32.7759%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (682 samples, 0.55%)</title><rect x="32.5307%" y="341" width="0.5527%" height="15" fill="rgb(205,108,24)" fg:x="40140" fg:w="682"/><text x="32.7807%" y="351.50"></text></g><g><title>std::time::SystemTime::now (425 samples, 0.34%)</title><rect x="32.7390%" y="325" width="0.3444%" height="15" fill="rgb(244,120,49)" fg:x="40397" fg:w="425"/><text x="32.9890%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (425 samples, 0.34%)</title><rect x="32.7390%" y="309" width="0.3444%" height="15" fill="rgb(223,47,38)" fg:x="40397" fg:w="425"/><text x="32.9890%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (425 samples, 0.34%)</title><rect x="32.7390%" y="293" width="0.3444%" height="15" fill="rgb(229,179,11)" fg:x="40397" fg:w="425"/><text x="32.9890%" y="303.50"></text></g><g><title>__clock_gettime (339 samples, 0.27%)</title><rect x="32.8087%" y="277" width="0.2747%" height="15" fill="rgb(231,122,1)" fg:x="40483" fg:w="339"/><text x="33.0587%" y="287.50"></text></g><g><title>__vdso_clock_gettime (320 samples, 0.26%)</title><rect x="32.8241%" y="261" width="0.2593%" height="15" fill="rgb(245,119,9)" fg:x="40502" fg:w="320"/><text x="33.0741%" y="271.50"></text></g><g><title>[[vdso]] (294 samples, 0.24%)</title><rect x="32.8452%" y="245" width="0.2383%" height="15" fill="rgb(241,163,25)" fg:x="40528" fg:w="294"/><text x="33.0952%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (67 samples, 0.05%)</title><rect x="33.1037%" y="373" width="0.0543%" height="15" fill="rgb(217,214,3)" fg:x="40847" fg:w="67"/><text x="33.3537%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22 samples, 0.02%)</title><rect x="33.1402%" y="357" width="0.0178%" height="15" fill="rgb(240,86,28)" fg:x="40892" fg:w="22"/><text x="33.3902%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (884 samples, 0.72%)</title><rect x="33.4263%" y="181" width="0.7164%" height="15" fill="rgb(215,47,9)" fg:x="41245" fg:w="884"/><text x="33.6763%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,239 samples, 1.00%)</title><rect x="33.1580%" y="325" width="1.0041%" height="15" fill="rgb(252,25,45)" fg:x="40914" fg:w="1239"/><text x="33.4080%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,229 samples, 1.00%)</title><rect x="33.1661%" y="309" width="0.9960%" height="15" fill="rgb(251,164,9)" fg:x="40924" fg:w="1229"/><text x="33.4161%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,229 samples, 1.00%)</title><rect x="33.1661%" y="293" width="0.9960%" height="15" fill="rgb(233,194,0)" fg:x="40924" fg:w="1229"/><text x="33.4161%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,225 samples, 0.99%)</title><rect x="33.1694%" y="277" width="0.9928%" height="15" fill="rgb(249,111,24)" fg:x="40928" fg:w="1225"/><text x="33.4194%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,225 samples, 0.99%)</title><rect x="33.1694%" y="261" width="0.9928%" height="15" fill="rgb(250,223,3)" fg:x="40928" fg:w="1225"/><text x="33.4194%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1,224 samples, 0.99%)</title><rect x="33.1702%" y="245" width="0.9920%" height="15" fill="rgb(236,178,37)" fg:x="40929" fg:w="1224"/><text x="33.4202%" y="255.50"></text></g><g><title>__rg_alloc (1,224 samples, 0.99%)</title><rect x="33.1702%" y="229" width="0.9920%" height="15" fill="rgb(241,158,50)" fg:x="40929" fg:w="1224"/><text x="33.4202%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,224 samples, 0.99%)</title><rect x="33.1702%" y="213" width="0.9920%" height="15" fill="rgb(213,121,41)" fg:x="40929" fg:w="1224"/><text x="33.4202%" y="223.50"></text></g><g><title>sn_rust_alloc (1,217 samples, 0.99%)</title><rect x="33.1758%" y="197" width="0.9863%" height="15" fill="rgb(240,92,3)" fg:x="40936" fg:w="1217"/><text x="33.4258%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.02%)</title><rect x="34.1427%" y="181" width="0.0195%" height="15" fill="rgb(205,123,3)" fg:x="42129" fg:w="24"/><text x="34.3927%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,629 samples, 1.32%)</title><rect x="33.1037%" y="389" width="1.3202%" height="15" fill="rgb(205,97,47)" fg:x="40847" fg:w="1629"/><text x="33.3537%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,562 samples, 1.27%)</title><rect x="33.1580%" y="373" width="1.2659%" height="15" fill="rgb(247,152,14)" fg:x="40914" fg:w="1562"/><text x="33.4080%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,562 samples, 1.27%)</title><rect x="33.1580%" y="357" width="1.2659%" height="15" fill="rgb(248,195,53)" fg:x="40914" fg:w="1562"/><text x="33.4080%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,562 samples, 1.27%)</title><rect x="33.1580%" y="341" width="1.2659%" height="15" fill="rgb(226,201,16)" fg:x="40914" fg:w="1562"/><text x="33.4080%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (323 samples, 0.26%)</title><rect x="34.1621%" y="325" width="0.2618%" height="15" fill="rgb(205,98,0)" fg:x="42153" fg:w="323"/><text x="34.4121%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (323 samples, 0.26%)</title><rect x="34.1621%" y="309" width="0.2618%" height="15" fill="rgb(214,191,48)" fg:x="42153" fg:w="323"/><text x="34.4121%" y="319.50"></text></g><g><title>[libc-2.31.so] (322 samples, 0.26%)</title><rect x="34.1629%" y="293" width="0.2610%" height="15" fill="rgb(237,112,39)" fg:x="42154" fg:w="322"/><text x="34.4129%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,871 samples, 4.76%)</title><rect x="29.6683%" y="741" width="4.7580%" height="15" fill="rgb(247,203,27)" fg:x="36608" fg:w="5871"/><text x="29.9183%" y="751.50">tremor..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4,406 samples, 3.57%)</title><rect x="30.8556%" y="725" width="3.5708%" height="15" fill="rgb(235,124,28)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="735.50">&lt;fut..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4,406 samples, 3.57%)</title><rect x="30.8556%" y="709" width="3.5708%" height="15" fill="rgb(208,207,46)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="719.50">futu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,406 samples, 3.57%)</title><rect x="30.8556%" y="693" width="3.5708%" height="15" fill="rgb(234,176,4)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="703.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,406 samples, 3.57%)</title><rect x="30.8556%" y="677" width="3.5708%" height="15" fill="rgb(230,133,28)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="687.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (4,406 samples, 3.57%)</title><rect x="30.8556%" y="661" width="3.5708%" height="15" fill="rgb(211,137,40)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="671.50">trem..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,406 samples, 3.57%)</title><rect x="30.8556%" y="645" width="3.5708%" height="15" fill="rgb(254,35,13)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="655.50">&lt;asy..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,406 samples, 3.57%)</title><rect x="30.8556%" y="629" width="3.5708%" height="15" fill="rgb(225,49,51)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="639.50">&lt;asy..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (4,406 samples, 3.57%)</title><rect x="30.8556%" y="613" width="3.5708%" height="15" fill="rgb(251,10,15)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="623.50">&lt;cor..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,406 samples, 3.57%)</title><rect x="30.8556%" y="597" width="3.5708%" height="15" fill="rgb(228,207,15)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="607.50">&lt;asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (4,406 samples, 3.57%)</title><rect x="30.8556%" y="581" width="3.5708%" height="15" fill="rgb(241,99,19)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="591.50">asyn..</text></g><g><title>std::panic::catch_unwind (4,406 samples, 3.57%)</title><rect x="30.8556%" y="565" width="3.5708%" height="15" fill="rgb(207,104,49)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="575.50">std:..</text></g><g><title>std::panicking::try (4,406 samples, 3.57%)</title><rect x="30.8556%" y="549" width="3.5708%" height="15" fill="rgb(234,99,18)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="559.50">std:..</text></g><g><title>std::panicking::try::do_call (4,406 samples, 3.57%)</title><rect x="30.8556%" y="533" width="3.5708%" height="15" fill="rgb(213,191,49)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="543.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,406 samples, 3.57%)</title><rect x="30.8556%" y="517" width="3.5708%" height="15" fill="rgb(210,226,19)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="527.50">&lt;cor..</text></g><g><title>core::ops::function::FnOnce::call_once (4,406 samples, 3.57%)</title><rect x="30.8556%" y="501" width="3.5708%" height="15" fill="rgb(229,97,18)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="511.50">core..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (4,406 samples, 3.57%)</title><rect x="30.8556%" y="485" width="3.5708%" height="15" fill="rgb(211,167,15)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="495.50">asyn..</text></g><g><title>async_ffi::FfiContext::with_context (4,406 samples, 3.57%)</title><rect x="30.8556%" y="469" width="3.5708%" height="15" fill="rgb(210,169,34)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="479.50">asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (4,406 samples, 3.57%)</title><rect x="30.8556%" y="453" width="3.5708%" height="15" fill="rgb(241,121,31)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="463.50">asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,406 samples, 3.57%)</title><rect x="30.8556%" y="437" width="3.5708%" height="15" fill="rgb(232,40,11)" fg:x="38073" fg:w="4406"/><text x="31.1056%" y="447.50">&lt;cor..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (4,293 samples, 3.48%)</title><rect x="30.9472%" y="421" width="3.4792%" height="15" fill="rgb(205,86,26)" fg:x="38186" fg:w="4293"/><text x="31.1972%" y="431.50">&lt;tr..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,656 samples, 1.34%)</title><rect x="33.0843%" y="405" width="1.3421%" height="15" fill="rgb(231,126,28)" fg:x="40823" fg:w="1656"/><text x="33.3343%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (15 samples, 0.01%)</title><rect x="34.9491%" y="725" width="0.0122%" height="15" fill="rgb(219,221,18)" fg:x="43124" fg:w="15"/><text x="35.1991%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="34.9612%" y="725" width="0.0138%" height="15" fill="rgb(211,40,0)" fg:x="43139" fg:w="17"/><text x="35.2112%" y="735.50"></text></g><g><title>[libc-2.31.so] (504 samples, 0.41%)</title><rect x="34.9993%" y="709" width="0.4085%" height="15" fill="rgb(239,85,43)" fg:x="43186" fg:w="504"/><text x="35.2493%" y="719.50"></text></g><g><title>[libc-2.31.so] (852 samples, 0.69%)</title><rect x="35.5553%" y="693" width="0.6905%" height="15" fill="rgb(231,55,21)" fg:x="43872" fg:w="852"/><text x="35.8053%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (507 samples, 0.41%)</title><rect x="36.2458%" y="693" width="0.4109%" height="15" fill="rgb(225,184,43)" fg:x="44724" fg:w="507"/><text x="36.4958%" y="703.50"></text></g><g><title>core::ptr::write (484 samples, 0.39%)</title><rect x="36.2644%" y="677" width="0.3922%" height="15" fill="rgb(251,158,41)" fg:x="44747" fg:w="484"/><text x="36.5144%" y="687.50"></text></g><g><title>[libc-2.31.so] (478 samples, 0.39%)</title><rect x="36.2693%" y="661" width="0.3874%" height="15" fill="rgb(234,159,37)" fg:x="44753" fg:w="478"/><text x="36.5193%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.02%)</title><rect x="36.6566%" y="693" width="0.0154%" height="15" fill="rgb(216,204,22)" fg:x="45231" fg:w="19"/><text x="36.9066%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (984 samples, 0.80%)</title><rect x="36.6818%" y="693" width="0.7975%" height="15" fill="rgb(214,17,3)" fg:x="45262" fg:w="984"/><text x="36.9318%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (977 samples, 0.79%)</title><rect x="36.6874%" y="677" width="0.7918%" height="15" fill="rgb(212,111,17)" fg:x="45269" fg:w="977"/><text x="36.9374%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (956 samples, 0.77%)</title><rect x="36.7045%" y="661" width="0.7748%" height="15" fill="rgb(221,157,24)" fg:x="45290" fg:w="956"/><text x="36.9545%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (956 samples, 0.77%)</title><rect x="36.7045%" y="645" width="0.7748%" height="15" fill="rgb(252,16,13)" fg:x="45290" fg:w="956"/><text x="36.9545%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (956 samples, 0.77%)</title><rect x="36.7045%" y="629" width="0.7748%" height="15" fill="rgb(221,62,2)" fg:x="45290" fg:w="956"/><text x="36.9545%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (956 samples, 0.77%)</title><rect x="36.7045%" y="613" width="0.7748%" height="15" fill="rgb(247,87,22)" fg:x="45290" fg:w="956"/><text x="36.9545%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (956 samples, 0.77%)</title><rect x="36.7045%" y="597" width="0.7748%" height="15" fill="rgb(215,73,9)" fg:x="45290" fg:w="956"/><text x="36.9545%" y="607.50"></text></g><g><title>[libc-2.31.so] (938 samples, 0.76%)</title><rect x="36.7190%" y="581" width="0.7602%" height="15" fill="rgb(207,175,33)" fg:x="45308" fg:w="938"/><text x="36.9690%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="37.5757%" y="661" width="0.0178%" height="15" fill="rgb(243,129,54)" fg:x="46365" fg:w="22"/><text x="37.8257%" y="671.50"></text></g><g><title>[libc-2.31.so] (636 samples, 0.52%)</title><rect x="37.5935%" y="661" width="0.5154%" height="15" fill="rgb(227,119,45)" fg:x="46387" fg:w="636"/><text x="37.8435%" y="671.50"></text></g><g><title>abi_stable::std_types::option::ROption&lt;T&gt;::is_some (15 samples, 0.01%)</title><rect x="38.1089%" y="661" width="0.0122%" height="15" fill="rgb(205,109,36)" fg:x="47023" fg:w="15"/><text x="38.3589%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (394 samples, 0.32%)</title><rect x="38.1211%" y="661" width="0.3193%" height="15" fill="rgb(205,6,39)" fg:x="47038" fg:w="394"/><text x="38.3711%" y="671.50"></text></g><g><title>core::ptr::read (362 samples, 0.29%)</title><rect x="38.1470%" y="645" width="0.2934%" height="15" fill="rgb(221,32,16)" fg:x="47070" fg:w="362"/><text x="38.3970%" y="655.50"></text></g><g><title>[libc-2.31.so] (319 samples, 0.26%)</title><rect x="38.1819%" y="629" width="0.2585%" height="15" fill="rgb(228,144,50)" fg:x="47113" fg:w="319"/><text x="38.4319%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (414 samples, 0.34%)</title><rect x="38.4404%" y="661" width="0.3355%" height="15" fill="rgb(229,201,53)" fg:x="47432" fg:w="414"/><text x="38.6904%" y="671.50"></text></g><g><title>core::ptr::write (400 samples, 0.32%)</title><rect x="38.4518%" y="645" width="0.3242%" height="15" fill="rgb(249,153,27)" fg:x="47446" fg:w="400"/><text x="38.7018%" y="655.50"></text></g><g><title>[libc-2.31.so] (391 samples, 0.32%)</title><rect x="38.4590%" y="629" width="0.3169%" height="15" fill="rgb(227,106,25)" fg:x="47455" fg:w="391"/><text x="38.7090%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,166 samples, 3.38%)</title><rect x="35.4078%" y="709" width="3.3763%" height="15" fill="rgb(230,65,29)" fg:x="43690" fg:w="4166"/><text x="35.6578%" y="719.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,610 samples, 1.30%)</title><rect x="37.4792%" y="693" width="1.3048%" height="15" fill="rgb(221,57,46)" fg:x="46246" fg:w="1610"/><text x="37.7292%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,585 samples, 1.28%)</title><rect x="37.4995%" y="677" width="1.2845%" height="15" fill="rgb(229,161,17)" fg:x="46271" fg:w="1585"/><text x="37.7495%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,733 samples, 3.84%)</title><rect x="34.9791%" y="725" width="3.8358%" height="15" fill="rgb(222,213,11)" fg:x="43161" fg:w="4733"/><text x="35.2291%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (38 samples, 0.03%)</title><rect x="38.7840%" y="709" width="0.0308%" height="15" fill="rgb(235,35,13)" fg:x="47856" fg:w="38"/><text x="39.0340%" y="719.50"></text></g><g><title>[libc-2.31.so] (1,745 samples, 1.41%)</title><rect x="38.8148%" y="725" width="1.4142%" height="15" fill="rgb(233,158,34)" fg:x="47894" fg:w="1745"/><text x="39.0648%" y="735.50"></text></g><g><title>sn_rust_dealloc (119 samples, 0.10%)</title><rect x="40.2404%" y="565" width="0.0964%" height="15" fill="rgb(215,151,48)" fg:x="49653" fg:w="119"/><text x="40.4904%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (140 samples, 0.11%)</title><rect x="40.2290%" y="725" width="0.1135%" height="15" fill="rgb(229,84,14)" fg:x="49639" fg:w="140"/><text x="40.4790%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (140 samples, 0.11%)</title><rect x="40.2290%" y="709" width="0.1135%" height="15" fill="rgb(229,68,14)" fg:x="49639" fg:w="140"/><text x="40.4790%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (126 samples, 0.10%)</title><rect x="40.2404%" y="693" width="0.1021%" height="15" fill="rgb(243,106,26)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (126 samples, 0.10%)</title><rect x="40.2404%" y="677" width="0.1021%" height="15" fill="rgb(206,45,38)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (126 samples, 0.10%)</title><rect x="40.2404%" y="661" width="0.1021%" height="15" fill="rgb(226,6,15)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.10%)</title><rect x="40.2404%" y="645" width="0.1021%" height="15" fill="rgb(232,22,54)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (126 samples, 0.10%)</title><rect x="40.2404%" y="629" width="0.1021%" height="15" fill="rgb(229,222,32)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (126 samples, 0.10%)</title><rect x="40.2404%" y="613" width="0.1021%" height="15" fill="rgb(228,62,29)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="623.50"></text></g><g><title>__rg_dealloc (126 samples, 0.10%)</title><rect x="40.2404%" y="597" width="0.1021%" height="15" fill="rgb(251,103,34)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (126 samples, 0.10%)</title><rect x="40.2404%" y="581" width="0.1021%" height="15" fill="rgb(233,12,30)" fg:x="49653" fg:w="126"/><text x="40.4904%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="40.3425%" y="725" width="0.0105%" height="15" fill="rgb(238,52,0)" fg:x="49779" fg:w="13"/><text x="40.5925%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="40.3425%" y="709" width="0.0105%" height="15" fill="rgb(223,98,5)" fg:x="49779" fg:w="13"/><text x="40.5925%" y="719.50"></text></g><g><title>async_global_executor::reactor::block_on (34,045 samples, 27.59%)</title><rect x="12.7724%" y="1077" width="27.5912%" height="15" fill="rgb(228,75,37)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="1087.50">async_global_executor::reactor::block_on</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (34,045 samples, 27.59%)</title><rect x="12.7724%" y="1061" width="27.5912%" height="15" fill="rgb(205,115,49)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="1071.50">async_global_executor::reactor::block_on::{{..</text></g><g><title>async_io::driver::block_on (34,045 samples, 27.59%)</title><rect x="12.7724%" y="1045" width="27.5912%" height="15" fill="rgb(250,154,43)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="1055.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="1029" width="27.5912%" height="15" fill="rgb(226,43,29)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="1039.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="1013" width="27.5912%" height="15" fill="rgb(249,228,39)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="1023.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::run::{{closure}} (34,045 samples, 27.59%)</title><rect x="12.7724%" y="997" width="27.5912%" height="15" fill="rgb(216,79,43)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="1007.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="981" width="27.5912%" height="15" fill="rgb(228,95,12)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="991.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="965" width="27.5912%" height="15" fill="rgb(249,221,15)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="975.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (34,045 samples, 27.59%)</title><rect x="12.7724%" y="949" width="27.5912%" height="15" fill="rgb(233,34,13)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="959.50">async_executor::Executor::run::{{closure}}::..</text></g><g><title>async_task::runnable::Runnable::run (34,045 samples, 27.59%)</title><rect x="12.7724%" y="933" width="27.5912%" height="15" fill="rgb(214,103,39)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="943.50">async_task::runnable::Runnable::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (34,045 samples, 27.59%)</title><rect x="12.7724%" y="917" width="27.5912%" height="15" fill="rgb(251,126,39)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="927.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="901" width="27.5912%" height="15" fill="rgb(214,216,36)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="885" width="27.5912%" height="15" fill="rgb(220,221,8)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="895.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (34,045 samples, 27.59%)</title><rect x="12.7724%" y="869" width="27.5912%" height="15" fill="rgb(240,216,3)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="879.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="853" width="27.5912%" height="15" fill="rgb(232,218,17)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="863.50">&lt;async_std::task::builder::SupportTaskLocals..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (34,045 samples, 27.59%)</title><rect x="12.7724%" y="837" width="27.5912%" height="15" fill="rgb(229,163,45)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="847.50">async_std::task::task_locals_wrapper::TaskLo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (34,045 samples, 27.59%)</title><rect x="12.7724%" y="821" width="27.5912%" height="15" fill="rgb(231,110,42)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="831.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (34,045 samples, 27.59%)</title><rect x="12.7724%" y="805" width="27.5912%" height="15" fill="rgb(208,170,48)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="815.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (34,045 samples, 27.59%)</title><rect x="12.7724%" y="789" width="27.5912%" height="15" fill="rgb(239,116,25)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="799.50">async_std::task::task_locals_wrapper::TaskLo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (34,045 samples, 27.59%)</title><rect x="12.7724%" y="773" width="27.5912%" height="15" fill="rgb(219,200,50)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="783.50">&lt;async_std::task::builder::SupportTaskLocals..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,045 samples, 27.59%)</title><rect x="12.7724%" y="757" width="27.5912%" height="15" fill="rgb(245,200,0)" fg:x="15760" fg:w="34045"/><text x="13.0224%" y="767.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,326 samples, 5.94%)</title><rect x="34.4263%" y="741" width="5.9372%" height="15" fill="rgb(245,119,33)" fg:x="42479" fg:w="7326"/><text x="34.6763%" y="751.50">tremor_r..</text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="40.3530%" y="725" width="0.0105%" height="15" fill="rgb(231,125,12)" fg:x="49792" fg:w="13"/><text x="40.6030%" y="735.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (104 samples, 0.08%)</title><rect x="40.7364%" y="565" width="0.0843%" height="15" fill="rgb(216,96,41)" fg:x="50265" fg:w="104"/><text x="40.9864%" y="575.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.07%)</title><rect x="40.7477%" y="549" width="0.0729%" height="15" fill="rgb(248,43,45)" fg:x="50279" fg:w="90"/><text x="40.9977%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (29 samples, 0.02%)</title><rect x="40.8206%" y="565" width="0.0235%" height="15" fill="rgb(217,222,7)" fg:x="50369" fg:w="29"/><text x="41.0706%" y="575.50"></text></g><g><title>[libc-2.31.so] (236 samples, 0.19%)</title><rect x="40.8506%" y="549" width="0.1913%" height="15" fill="rgb(233,28,6)" fg:x="50406" fg:w="236"/><text x="41.1006%" y="559.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.12%)</title><rect x="41.1837%" y="533" width="0.1191%" height="15" fill="rgb(231,218,15)" fg:x="50817" fg:w="147"/><text x="41.4337%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (313 samples, 0.25%)</title><rect x="41.3069%" y="533" width="0.2537%" height="15" fill="rgb(226,171,48)" fg:x="50969" fg:w="313"/><text x="41.5569%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (306 samples, 0.25%)</title><rect x="41.3126%" y="517" width="0.2480%" height="15" fill="rgb(235,201,9)" fg:x="50976" fg:w="306"/><text x="41.5626%" y="527.50"></text></g><g><title>value_trait::Builder::object (306 samples, 0.25%)</title><rect x="41.3126%" y="501" width="0.2480%" height="15" fill="rgb(217,80,15)" fg:x="50976" fg:w="306"/><text x="41.5626%" y="511.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (293 samples, 0.24%)</title><rect x="41.3231%" y="485" width="0.2375%" height="15" fill="rgb(219,152,8)" fg:x="50989" fg:w="293"/><text x="41.5731%" y="495.50"></text></g><g><title>tremor_value::value::Value::Object (286 samples, 0.23%)</title><rect x="41.3288%" y="469" width="0.2318%" height="15" fill="rgb(243,107,38)" fg:x="50996" fg:w="286"/><text x="41.5788%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (121 samples, 0.10%)</title><rect x="41.5719%" y="517" width="0.0981%" height="15" fill="rgb(231,17,5)" fg:x="51296" fg:w="121"/><text x="41.8219%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (121 samples, 0.10%)</title><rect x="41.5719%" y="501" width="0.0981%" height="15" fill="rgb(209,25,54)" fg:x="51296" fg:w="121"/><text x="41.8219%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (121 samples, 0.10%)</title><rect x="41.5719%" y="485" width="0.0981%" height="15" fill="rgb(219,0,2)" fg:x="51296" fg:w="121"/><text x="41.8219%" y="495.50"></text></g><g><title>sn_rust_dealloc (92 samples, 0.07%)</title><rect x="41.5954%" y="469" width="0.0746%" height="15" fill="rgb(246,9,5)" fg:x="51325" fg:w="92"/><text x="41.8454%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (159 samples, 0.13%)</title><rect x="41.5719%" y="533" width="0.1289%" height="15" fill="rgb(226,159,4)" fg:x="51296" fg:w="159"/><text x="41.8219%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (38 samples, 0.03%)</title><rect x="41.6700%" y="517" width="0.0308%" height="15" fill="rgb(219,175,34)" fg:x="51417" fg:w="38"/><text x="41.9200%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (38 samples, 0.03%)</title><rect x="41.6700%" y="501" width="0.0308%" height="15" fill="rgb(236,10,46)" fg:x="51417" fg:w="38"/><text x="41.9200%" y="511.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="41.6700%" y="485" width="0.0308%" height="15" fill="rgb(240,211,16)" fg:x="51417" fg:w="38"/><text x="41.9200%" y="495.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="41.7356%" y="469" width="0.0308%" height="15" fill="rgb(205,3,43)" fg:x="51498" fg:w="38"/><text x="41.9856%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,149 samples, 0.93%)</title><rect x="40.8441%" y="565" width="0.9312%" height="15" fill="rgb(245,7,22)" fg:x="50398" fg:w="1149"/><text x="41.0941%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (905 samples, 0.73%)</title><rect x="41.0419%" y="549" width="0.7334%" height="15" fill="rgb(239,132,32)" fg:x="50642" fg:w="905"/><text x="41.2919%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (92 samples, 0.07%)</title><rect x="41.7008%" y="533" width="0.0746%" height="15" fill="rgb(228,202,34)" fg:x="51455" fg:w="92"/><text x="41.9508%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (71 samples, 0.06%)</title><rect x="41.7178%" y="517" width="0.0575%" height="15" fill="rgb(254,200,22)" fg:x="51476" fg:w="71"/><text x="41.9678%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="41.7178%" y="501" width="0.0575%" height="15" fill="rgb(219,10,39)" fg:x="51476" fg:w="71"/><text x="41.9678%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (71 samples, 0.06%)</title><rect x="41.7178%" y="485" width="0.0575%" height="15" fill="rgb(226,210,39)" fg:x="51476" fg:w="71"/><text x="41.9678%" y="495.50"></text></g><g><title>[libc-2.31.so] (474 samples, 0.38%)</title><rect x="41.7770%" y="565" width="0.3841%" height="15" fill="rgb(208,219,16)" fg:x="51549" fg:w="474"/><text x="42.0270%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,353 samples, 1.91%)</title><rect x="40.3660%" y="597" width="1.9069%" height="15" fill="rgb(216,158,51)" fg:x="49808" fg:w="2353"/><text x="40.6160%" y="607.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,353 samples, 1.91%)</title><rect x="40.3660%" y="581" width="1.9069%" height="15" fill="rgb(233,14,44)" fg:x="49808" fg:w="2353"/><text x="40.6160%" y="591.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (122 samples, 0.10%)</title><rect x="42.1741%" y="565" width="0.0989%" height="15" fill="rgb(237,97,39)" fg:x="52039" fg:w="122"/><text x="42.4241%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (174 samples, 0.14%)</title><rect x="42.2786%" y="437" width="0.1410%" height="15" fill="rgb(218,198,43)" fg:x="52168" fg:w="174"/><text x="42.5286%" y="447.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (174 samples, 0.14%)</title><rect x="42.2786%" y="421" width="0.1410%" height="15" fill="rgb(231,104,20)" fg:x="52168" fg:w="174"/><text x="42.5286%" y="431.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (174 samples, 0.14%)</title><rect x="42.2786%" y="405" width="0.1410%" height="15" fill="rgb(254,36,13)" fg:x="52168" fg:w="174"/><text x="42.5286%" y="415.50"></text></g><g><title>[libc-2.31.so] (149 samples, 0.12%)</title><rect x="42.2989%" y="389" width="0.1208%" height="15" fill="rgb(248,14,50)" fg:x="52193" fg:w="149"/><text x="42.5489%" y="399.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (375 samples, 0.30%)</title><rect x="42.2729%" y="517" width="0.3039%" height="15" fill="rgb(217,107,29)" fg:x="52161" fg:w="375"/><text x="42.5229%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (375 samples, 0.30%)</title><rect x="42.2729%" y="501" width="0.3039%" height="15" fill="rgb(251,169,33)" fg:x="52161" fg:w="375"/><text x="42.5229%" y="511.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (375 samples, 0.30%)</title><rect x="42.2729%" y="485" width="0.3039%" height="15" fill="rgb(217,108,32)" fg:x="52161" fg:w="375"/><text x="42.5229%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (375 samples, 0.30%)</title><rect x="42.2729%" y="469" width="0.3039%" height="15" fill="rgb(219,66,42)" fg:x="52161" fg:w="375"/><text x="42.5229%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (375 samples, 0.30%)</title><rect x="42.2729%" y="453" width="0.3039%" height="15" fill="rgb(206,180,7)" fg:x="52161" fg:w="375"/><text x="42.5229%" y="463.50"></text></g><g><title>std::panic::catch_unwind (194 samples, 0.16%)</title><rect x="42.4196%" y="437" width="0.1572%" height="15" fill="rgb(208,226,31)" fg:x="52342" fg:w="194"/><text x="42.6696%" y="447.50"></text></g><g><title>std::panicking::try (194 samples, 0.16%)</title><rect x="42.4196%" y="421" width="0.1572%" height="15" fill="rgb(218,26,49)" fg:x="52342" fg:w="194"/><text x="42.6696%" y="431.50"></text></g><g><title>std::panicking::try::do_call (194 samples, 0.16%)</title><rect x="42.4196%" y="405" width="0.1572%" height="15" fill="rgb(233,197,48)" fg:x="52342" fg:w="194"/><text x="42.6696%" y="415.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="42.4901%" y="389" width="0.0867%" height="15" fill="rgb(252,181,51)" fg:x="52429" fg:w="107"/><text x="42.7401%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="42.5768%" y="517" width="0.0154%" height="15" fill="rgb(253,90,19)" fg:x="52536" fg:w="19"/><text x="42.8268%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="42.5768%" y="501" width="0.0154%" height="15" fill="rgb(215,171,30)" fg:x="52536" fg:w="19"/><text x="42.8268%" y="511.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="42.5768%" y="485" width="0.0154%" height="15" fill="rgb(214,222,9)" fg:x="52536" fg:w="19"/><text x="42.8268%" y="495.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (19 samples, 0.02%)</title><rect x="42.5768%" y="469" width="0.0154%" height="15" fill="rgb(223,3,22)" fg:x="52536" fg:w="19"/><text x="42.8268%" y="479.50"></text></g><g><title>async_ffi::DropBomb::with (19 samples, 0.02%)</title><rect x="42.5768%" y="453" width="0.0154%" height="15" fill="rgb(225,196,46)" fg:x="52536" fg:w="19"/><text x="42.8268%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (13 samples, 0.01%)</title><rect x="42.5817%" y="437" width="0.0105%" height="15" fill="rgb(209,110,37)" fg:x="52542" fg:w="13"/><text x="42.8317%" y="447.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="42.5817%" y="421" width="0.0105%" height="15" fill="rgb(249,89,12)" fg:x="52542" fg:w="13"/><text x="42.8317%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="42.5817%" y="405" width="0.0105%" height="15" fill="rgb(226,27,33)" fg:x="52542" fg:w="13"/><text x="42.8317%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (133 samples, 0.11%)</title><rect x="42.6474%" y="293" width="0.1078%" height="15" fill="rgb(213,82,22)" fg:x="52623" fg:w="133"/><text x="42.8974%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,952 samples, 2.39%)</title><rect x="40.3660%" y="613" width="2.3924%" height="15" fill="rgb(248,140,0)" fg:x="49808" fg:w="2952"/><text x="40.6160%" y="623.50">tr..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (599 samples, 0.49%)</title><rect x="42.2729%" y="597" width="0.4854%" height="15" fill="rgb(228,106,3)" fg:x="52161" fg:w="599"/><text x="42.5229%" y="607.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (599 samples, 0.49%)</title><rect x="42.2729%" y="581" width="0.4854%" height="15" fill="rgb(209,23,37)" fg:x="52161" fg:w="599"/><text x="42.5229%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (599 samples, 0.49%)</title><rect x="42.2729%" y="565" width="0.4854%" height="15" fill="rgb(241,93,50)" fg:x="52161" fg:w="599"/><text x="42.5229%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (599 samples, 0.49%)</title><rect x="42.2729%" y="549" width="0.4854%" height="15" fill="rgb(253,46,43)" fg:x="52161" fg:w="599"/><text x="42.5229%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (599 samples, 0.49%)</title><rect x="42.2729%" y="533" width="0.4854%" height="15" fill="rgb(226,206,43)" fg:x="52161" fg:w="599"/><text x="42.5229%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (205 samples, 0.17%)</title><rect x="42.5922%" y="517" width="0.1661%" height="15" fill="rgb(217,54,7)" fg:x="52555" fg:w="205"/><text x="42.8422%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (205 samples, 0.17%)</title><rect x="42.5922%" y="501" width="0.1661%" height="15" fill="rgb(223,5,52)" fg:x="52555" fg:w="205"/><text x="42.8422%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (190 samples, 0.15%)</title><rect x="42.6044%" y="485" width="0.1540%" height="15" fill="rgb(206,52,46)" fg:x="52570" fg:w="190"/><text x="42.8544%" y="495.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (190 samples, 0.15%)</title><rect x="42.6044%" y="469" width="0.1540%" height="15" fill="rgb(253,136,11)" fg:x="52570" fg:w="190"/><text x="42.8544%" y="479.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (190 samples, 0.15%)</title><rect x="42.6044%" y="453" width="0.1540%" height="15" fill="rgb(208,106,33)" fg:x="52570" fg:w="190"/><text x="42.8544%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (190 samples, 0.15%)</title><rect x="42.6044%" y="437" width="0.1540%" height="15" fill="rgb(206,54,4)" fg:x="52570" fg:w="190"/><text x="42.8544%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (187 samples, 0.15%)</title><rect x="42.6068%" y="421" width="0.1516%" height="15" fill="rgb(213,3,15)" fg:x="52573" fg:w="187"/><text x="42.8568%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (185 samples, 0.15%)</title><rect x="42.6085%" y="405" width="0.1499%" height="15" fill="rgb(252,211,39)" fg:x="52575" fg:w="185"/><text x="42.8585%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (185 samples, 0.15%)</title><rect x="42.6085%" y="389" width="0.1499%" height="15" fill="rgb(223,6,36)" fg:x="52575" fg:w="185"/><text x="42.8585%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (185 samples, 0.15%)</title><rect x="42.6085%" y="373" width="0.1499%" height="15" fill="rgb(252,169,45)" fg:x="52575" fg:w="185"/><text x="42.8585%" y="383.50"></text></g><g><title>alloc::alloc::alloc (185 samples, 0.15%)</title><rect x="42.6085%" y="357" width="0.1499%" height="15" fill="rgb(212,48,26)" fg:x="52575" fg:w="185"/><text x="42.8585%" y="367.50"></text></g><g><title>__rg_alloc (185 samples, 0.15%)</title><rect x="42.6085%" y="341" width="0.1499%" height="15" fill="rgb(251,102,48)" fg:x="52575" fg:w="185"/><text x="42.8585%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (185 samples, 0.15%)</title><rect x="42.6085%" y="325" width="0.1499%" height="15" fill="rgb(243,208,16)" fg:x="52575" fg:w="185"/><text x="42.8585%" y="335.50"></text></g><g><title>sn_rust_alloc (184 samples, 0.15%)</title><rect x="42.6093%" y="309" width="0.1491%" height="15" fill="rgb(219,96,24)" fg:x="52576" fg:w="184"/><text x="42.8593%" y="319.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (2,970 samples, 2.41%)</title><rect x="40.3636%" y="1077" width="2.4070%" height="15" fill="rgb(219,33,29)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="1087.50">as..</text></g><g><title>std::panic::catch_unwind (2,970 samples, 2.41%)</title><rect x="40.3636%" y="1061" width="2.4070%" height="15" fill="rgb(223,176,5)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="1071.50">st..</text></g><g><title>std::panicking::try (2,970 samples, 2.41%)</title><rect x="40.3636%" y="1045" width="2.4070%" height="15" fill="rgb(228,140,14)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="1055.50">st..</text></g><g><title>std::panicking::try::do_call (2,970 samples, 2.41%)</title><rect x="40.3636%" y="1029" width="2.4070%" height="15" fill="rgb(217,179,31)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="1039.50">st..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="1013" width="2.4070%" height="15" fill="rgb(230,9,30)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="1023.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,970 samples, 2.41%)</title><rect x="40.3636%" y="997" width="2.4070%" height="15" fill="rgb(230,136,20)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="1007.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,970 samples, 2.41%)</title><rect x="40.3636%" y="981" width="2.4070%" height="15" fill="rgb(215,210,22)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="991.50">st..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="965" width="2.4070%" height="15" fill="rgb(218,43,5)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="975.50">as..</text></g><g><title>async_global_executor::reactor::block_on (2,970 samples, 2.41%)</title><rect x="40.3636%" y="949" width="2.4070%" height="15" fill="rgb(216,11,5)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="959.50">as..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="933" width="2.4070%" height="15" fill="rgb(209,82,29)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="943.50">as..</text></g><g><title>async_io::driver::block_on (2,970 samples, 2.41%)</title><rect x="40.3636%" y="917" width="2.4070%" height="15" fill="rgb(244,115,12)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="927.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="901" width="2.4070%" height="15" fill="rgb(222,82,18)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="911.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="885" width="2.4070%" height="15" fill="rgb(249,227,8)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="895.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="869" width="2.4070%" height="15" fill="rgb(253,141,45)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="879.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="853" width="2.4070%" height="15" fill="rgb(234,184,4)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="863.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="837" width="2.4070%" height="15" fill="rgb(218,194,23)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="847.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="821" width="2.4070%" height="15" fill="rgb(235,66,41)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="831.50">as..</text></g><g><title>async_task::runnable::Runnable::run (2,970 samples, 2.41%)</title><rect x="40.3636%" y="805" width="2.4070%" height="15" fill="rgb(245,217,1)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="815.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,970 samples, 2.41%)</title><rect x="40.3636%" y="789" width="2.4070%" height="15" fill="rgb(229,91,1)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="799.50">as..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="773" width="2.4070%" height="15" fill="rgb(207,101,30)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="783.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="757" width="2.4070%" height="15" fill="rgb(223,82,49)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="767.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="741" width="2.4070%" height="15" fill="rgb(218,167,17)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="751.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="725" width="2.4070%" height="15" fill="rgb(208,103,14)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="735.50">&lt;a..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,970 samples, 2.41%)</title><rect x="40.3636%" y="709" width="2.4070%" height="15" fill="rgb(238,20,8)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="719.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,970 samples, 2.41%)</title><rect x="40.3636%" y="693" width="2.4070%" height="15" fill="rgb(218,80,54)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="703.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,970 samples, 2.41%)</title><rect x="40.3636%" y="677" width="2.4070%" height="15" fill="rgb(240,144,17)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="687.50">st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="661" width="2.4070%" height="15" fill="rgb(245,27,50)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="671.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,970 samples, 2.41%)</title><rect x="40.3636%" y="645" width="2.4070%" height="15" fill="rgb(251,51,7)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="655.50">&lt;a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,970 samples, 2.41%)</title><rect x="40.3636%" y="629" width="2.4070%" height="15" fill="rgb(245,217,29)" fg:x="49805" fg:w="2970"/><text x="40.6136%" y="639.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15 samples, 0.01%)</title><rect x="42.7584%" y="613" width="0.0122%" height="15" fill="rgb(221,176,29)" fg:x="52760" fg:w="15"/><text x="43.0084%" y="623.50"></text></g><g><title>__rust_probestack (15 samples, 0.01%)</title><rect x="42.7584%" y="597" width="0.0122%" height="15" fill="rgb(212,180,24)" fg:x="52760" fg:w="15"/><text x="43.0084%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="43.1798%" y="485" width="0.0292%" height="15" fill="rgb(254,24,2)" fg:x="53280" fg:w="36"/><text x="43.4298%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="43.2187%" y="469" width="0.0284%" height="15" fill="rgb(230,100,2)" fg:x="53328" fg:w="35"/><text x="43.4687%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (35 samples, 0.03%)</title><rect x="43.2187%" y="453" width="0.0284%" height="15" fill="rgb(219,142,25)" fg:x="53328" fg:w="35"/><text x="43.4687%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="43.2244%" y="437" width="0.0227%" height="15" fill="rgb(240,73,43)" fg:x="53335" fg:w="28"/><text x="43.4744%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (57 samples, 0.05%)</title><rect x="43.2090%" y="485" width="0.0462%" height="15" fill="rgb(214,114,15)" fg:x="53316" fg:w="57"/><text x="43.4590%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (18 samples, 0.01%)</title><rect x="43.2552%" y="485" width="0.0146%" height="15" fill="rgb(207,130,4)" fg:x="53373" fg:w="18"/><text x="43.5052%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (18 samples, 0.01%)</title><rect x="43.2552%" y="469" width="0.0146%" height="15" fill="rgb(221,25,40)" fg:x="53373" fg:w="18"/><text x="43.5052%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (34 samples, 0.03%)</title><rect x="43.2714%" y="485" width="0.0276%" height="15" fill="rgb(241,184,7)" fg:x="53393" fg:w="34"/><text x="43.5214%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 0.03%)</title><rect x="43.2714%" y="469" width="0.0276%" height="15" fill="rgb(235,159,4)" fg:x="53393" fg:w="34"/><text x="43.5214%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="43.2989%" y="421" width="0.0186%" height="15" fill="rgb(214,87,48)" fg:x="53427" fg:w="23"/><text x="43.5489%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (47 samples, 0.04%)</title><rect x="43.2989%" y="485" width="0.0381%" height="15" fill="rgb(246,198,24)" fg:x="53427" fg:w="47"/><text x="43.5489%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (47 samples, 0.04%)</title><rect x="43.2989%" y="469" width="0.0381%" height="15" fill="rgb(209,66,40)" fg:x="53427" fg:w="47"/><text x="43.5489%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.04%)</title><rect x="43.2989%" y="453" width="0.0381%" height="15" fill="rgb(233,147,39)" fg:x="53427" fg:w="47"/><text x="43.5489%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (47 samples, 0.04%)</title><rect x="43.2989%" y="437" width="0.0381%" height="15" fill="rgb(231,145,52)" fg:x="53427" fg:w="47"/><text x="43.5489%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (24 samples, 0.02%)</title><rect x="43.3176%" y="421" width="0.0195%" height="15" fill="rgb(206,20,26)" fg:x="53450" fg:w="24"/><text x="43.5676%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (24 samples, 0.02%)</title><rect x="43.3176%" y="405" width="0.0195%" height="15" fill="rgb(238,220,4)" fg:x="53450" fg:w="24"/><text x="43.5676%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (28 samples, 0.02%)</title><rect x="43.3370%" y="485" width="0.0227%" height="15" fill="rgb(252,195,42)" fg:x="53474" fg:w="28"/><text x="43.5870%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (28 samples, 0.02%)</title><rect x="43.3370%" y="469" width="0.0227%" height="15" fill="rgb(209,10,6)" fg:x="53474" fg:w="28"/><text x="43.5870%" y="479.50"></text></g><g><title>sn_rust_dealloc (185 samples, 0.15%)</title><rect x="43.4124%" y="325" width="0.1499%" height="15" fill="rgb(229,3,52)" fg:x="53567" fg:w="185"/><text x="43.6624%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (277 samples, 0.22%)</title><rect x="43.3735%" y="389" width="0.2245%" height="15" fill="rgb(253,49,37)" fg:x="53519" fg:w="277"/><text x="43.6235%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (277 samples, 0.22%)</title><rect x="43.3735%" y="373" width="0.2245%" height="15" fill="rgb(240,103,49)" fg:x="53519" fg:w="277"/><text x="43.6235%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (249 samples, 0.20%)</title><rect x="43.3962%" y="357" width="0.2018%" height="15" fill="rgb(250,182,30)" fg:x="53547" fg:w="249"/><text x="43.6462%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (249 samples, 0.20%)</title><rect x="43.3962%" y="341" width="0.2018%" height="15" fill="rgb(248,8,30)" fg:x="53547" fg:w="249"/><text x="43.6462%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (44 samples, 0.04%)</title><rect x="43.5623%" y="325" width="0.0357%" height="15" fill="rgb(237,120,30)" fg:x="53752" fg:w="44"/><text x="43.8123%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (304 samples, 0.25%)</title><rect x="43.3646%" y="453" width="0.2464%" height="15" fill="rgb(221,146,34)" fg:x="53508" fg:w="304"/><text x="43.6146%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (298 samples, 0.24%)</title><rect x="43.3695%" y="437" width="0.2415%" height="15" fill="rgb(242,55,13)" fg:x="53514" fg:w="298"/><text x="43.6195%" y="447.50"></text></g><g><title>core::mem::drop (293 samples, 0.24%)</title><rect x="43.3735%" y="421" width="0.2375%" height="15" fill="rgb(242,112,31)" fg:x="53519" fg:w="293"/><text x="43.6235%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (293 samples, 0.24%)</title><rect x="43.3735%" y="405" width="0.2375%" height="15" fill="rgb(249,192,27)" fg:x="53519" fg:w="293"/><text x="43.6235%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="43.5980%" y="389" width="0.0130%" height="15" fill="rgb(208,204,44)" fg:x="53796" fg:w="16"/><text x="43.8480%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="43.5980%" y="373" width="0.0130%" height="15" fill="rgb(208,93,54)" fg:x="53796" fg:w="16"/><text x="43.8480%" y="383.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.05%)</title><rect x="43.6110%" y="453" width="0.0511%" height="15" fill="rgb(242,1,31)" fg:x="53812" fg:w="63"/><text x="43.8610%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (377 samples, 0.31%)</title><rect x="43.3597%" y="485" width="0.3055%" height="15" fill="rgb(241,83,25)" fg:x="53502" fg:w="377"/><text x="43.6097%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (377 samples, 0.31%)</title><rect x="43.3597%" y="469" width="0.3055%" height="15" fill="rgb(205,169,50)" fg:x="53502" fg:w="377"/><text x="43.6097%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (35 samples, 0.03%)</title><rect x="43.6831%" y="389" width="0.0284%" height="15" fill="rgb(239,186,37)" fg:x="53901" fg:w="35"/><text x="43.9331%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (35 samples, 0.03%)</title><rect x="43.6831%" y="373" width="0.0284%" height="15" fill="rgb(205,221,10)" fg:x="53901" fg:w="35"/><text x="43.9331%" y="383.50"></text></g><g><title>core::mem::drop (18 samples, 0.01%)</title><rect x="43.6969%" y="357" width="0.0146%" height="15" fill="rgb(218,196,15)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18 samples, 0.01%)</title><rect x="43.6969%" y="341" width="0.0146%" height="15" fill="rgb(218,196,35)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18 samples, 0.01%)</title><rect x="43.6969%" y="325" width="0.0146%" height="15" fill="rgb(233,63,24)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="43.6969%" y="309" width="0.0146%" height="15" fill="rgb(225,8,4)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="43.6969%" y="293" width="0.0146%" height="15" fill="rgb(234,105,35)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="43.6969%" y="277" width="0.0146%" height="15" fill="rgb(236,21,32)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="287.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="43.6969%" y="261" width="0.0146%" height="15" fill="rgb(228,109,6)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="43.6969%" y="245" width="0.0146%" height="15" fill="rgb(229,215,31)" fg:x="53918" fg:w="18"/><text x="43.9469%" y="255.50"></text></g><g><title>sn_rust_dealloc (153 samples, 0.12%)</title><rect x="43.7115%" y="389" width="0.1240%" height="15" fill="rgb(221,52,54)" fg:x="53936" fg:w="153"/><text x="43.9615%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (234 samples, 0.19%)</title><rect x="43.6661%" y="437" width="0.1896%" height="15" fill="rgb(252,129,43)" fg:x="53880" fg:w="234"/><text x="43.9161%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (234 samples, 0.19%)</title><rect x="43.6661%" y="421" width="0.1896%" height="15" fill="rgb(248,183,27)" fg:x="53880" fg:w="234"/><text x="43.9161%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (234 samples, 0.19%)</title><rect x="43.6661%" y="405" width="0.1896%" height="15" fill="rgb(250,0,22)" fg:x="53880" fg:w="234"/><text x="43.9161%" y="415.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (25 samples, 0.02%)</title><rect x="43.8354%" y="389" width="0.0203%" height="15" fill="rgb(213,166,10)" fg:x="54089" fg:w="25"/><text x="44.0854%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (19 samples, 0.02%)</title><rect x="43.8744%" y="373" width="0.0154%" height="15" fill="rgb(207,163,36)" fg:x="54137" fg:w="19"/><text x="44.1244%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (19 samples, 0.02%)</title><rect x="43.8744%" y="357" width="0.0154%" height="15" fill="rgb(208,122,22)" fg:x="54137" fg:w="19"/><text x="44.1244%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="44.5689%" y="261" width="0.0138%" height="15" fill="rgb(207,104,49)" fg:x="54994" fg:w="17"/><text x="44.8189%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (17 samples, 0.01%)</title><rect x="44.5689%" y="245" width="0.0138%" height="15" fill="rgb(248,211,50)" fg:x="54994" fg:w="17"/><text x="44.8189%" y="255.50"></text></g><g><title>sn_rust_dealloc (256 samples, 0.21%)</title><rect x="44.5827%" y="261" width="0.2075%" height="15" fill="rgb(217,13,45)" fg:x="55011" fg:w="256"/><text x="44.8327%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,135 samples, 0.92%)</title><rect x="43.8897%" y="341" width="0.9198%" height="15" fill="rgb(211,216,49)" fg:x="54156" fg:w="1135"/><text x="44.1397%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (1,135 samples, 0.92%)</title><rect x="43.8897%" y="325" width="0.9198%" height="15" fill="rgb(221,58,53)" fg:x="54156" fg:w="1135"/><text x="44.1397%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (1,116 samples, 0.90%)</title><rect x="43.9051%" y="309" width="0.9044%" height="15" fill="rgb(220,112,41)" fg:x="54175" fg:w="1116"/><text x="44.1551%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (1,116 samples, 0.90%)</title><rect x="43.9051%" y="293" width="0.9044%" height="15" fill="rgb(236,38,28)" fg:x="54175" fg:w="1116"/><text x="44.1551%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,116 samples, 0.90%)</title><rect x="43.9051%" y="277" width="0.9044%" height="15" fill="rgb(227,195,22)" fg:x="54175" fg:w="1116"/><text x="44.1551%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (24 samples, 0.02%)</title><rect x="44.7901%" y="261" width="0.0195%" height="15" fill="rgb(214,55,33)" fg:x="55267" fg:w="24"/><text x="45.0401%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="44.8096%" y="309" width="0.0105%" height="15" fill="rgb(248,80,13)" fg:x="55291" fg:w="13"/><text x="45.0596%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="44.8096%" y="293" width="0.0105%" height="15" fill="rgb(238,52,6)" fg:x="55291" fg:w="13"/><text x="45.0596%" y="303.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="44.8096%" y="277" width="0.0105%" height="15" fill="rgb(224,198,47)" fg:x="55291" fg:w="13"/><text x="45.0596%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="44.8096%" y="261" width="0.0105%" height="15" fill="rgb(233,171,20)" fg:x="55291" fg:w="13"/><text x="45.0596%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,190 samples, 0.96%)</title><rect x="43.8638%" y="405" width="0.9644%" height="15" fill="rgb(241,30,25)" fg:x="54124" fg:w="1190"/><text x="44.1138%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,187 samples, 0.96%)</title><rect x="43.8662%" y="389" width="0.9620%" height="15" fill="rgb(207,171,38)" fg:x="54127" fg:w="1187"/><text x="44.1162%" y="399.50"></text></g><g><title>core::mem::drop (1,158 samples, 0.94%)</title><rect x="43.8897%" y="373" width="0.9385%" height="15" fill="rgb(234,70,1)" fg:x="54156" fg:w="1158"/><text x="44.1397%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,158 samples, 0.94%)</title><rect x="43.8897%" y="357" width="0.9385%" height="15" fill="rgb(232,178,18)" fg:x="54156" fg:w="1158"/><text x="44.1397%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (23 samples, 0.02%)</title><rect x="44.8096%" y="341" width="0.0186%" height="15" fill="rgb(241,78,40)" fg:x="55291" fg:w="23"/><text x="45.0596%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="44.8096%" y="325" width="0.0186%" height="15" fill="rgb(222,35,25)" fg:x="55291" fg:w="23"/><text x="45.0596%" y="335.50"></text></g><g><title>sn_rust_dealloc (118 samples, 0.10%)</title><rect x="44.8282%" y="405" width="0.0956%" height="15" fill="rgb(207,92,16)" fg:x="55314" fg:w="118"/><text x="45.0782%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,603 samples, 1.30%)</title><rect x="43.6653%" y="469" width="1.2991%" height="15" fill="rgb(216,59,51)" fg:x="53879" fg:w="1603"/><text x="43.9153%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (1,602 samples, 1.30%)</title><rect x="43.6661%" y="453" width="1.2983%" height="15" fill="rgb(213,80,28)" fg:x="53880" fg:w="1602"/><text x="43.9161%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,368 samples, 1.11%)</title><rect x="43.8557%" y="437" width="1.1087%" height="15" fill="rgb(220,93,7)" fg:x="54114" fg:w="1368"/><text x="44.1057%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,368 samples, 1.11%)</title><rect x="43.8557%" y="421" width="1.1087%" height="15" fill="rgb(225,24,44)" fg:x="54114" fg:w="1368"/><text x="44.1057%" y="431.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (50 samples, 0.04%)</title><rect x="44.9239%" y="405" width="0.0405%" height="15" fill="rgb(243,74,40)" fg:x="55432" fg:w="50"/><text x="45.1739%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (25 samples, 0.02%)</title><rect x="44.9644%" y="469" width="0.0203%" height="15" fill="rgb(228,39,7)" fg:x="55482" fg:w="25"/><text x="45.2144%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (25 samples, 0.02%)</title><rect x="44.9644%" y="453" width="0.0203%" height="15" fill="rgb(227,79,8)" fg:x="55482" fg:w="25"/><text x="45.2144%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="44.9644%" y="437" width="0.0203%" height="15" fill="rgb(236,58,11)" fg:x="55482" fg:w="25"/><text x="45.2144%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="44.9725%" y="421" width="0.0122%" height="15" fill="rgb(249,63,35)" fg:x="55492" fg:w="15"/><text x="45.2225%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="44.9725%" y="405" width="0.0122%" height="15" fill="rgb(252,114,16)" fg:x="55492" fg:w="15"/><text x="45.2225%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (17 samples, 0.01%)</title><rect x="44.9846%" y="469" width="0.0138%" height="15" fill="rgb(254,151,24)" fg:x="55507" fg:w="17"/><text x="45.2346%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="44.9846%" y="453" width="0.0138%" height="15" fill="rgb(253,54,39)" fg:x="55507" fg:w="17"/><text x="45.2346%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="44.9846%" y="437" width="0.0138%" height="15" fill="rgb(243,25,45)" fg:x="55507" fg:w="17"/><text x="45.2346%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="44.9846%" y="421" width="0.0138%" height="15" fill="rgb(234,134,9)" fg:x="55507" fg:w="17"/><text x="45.2346%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (61 samples, 0.05%)</title><rect x="45.0090%" y="437" width="0.0494%" height="15" fill="rgb(227,166,31)" fg:x="55537" fg:w="61"/><text x="45.2590%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (61 samples, 0.05%)</title><rect x="45.0090%" y="421" width="0.0494%" height="15" fill="rgb(245,143,41)" fg:x="55537" fg:w="61"/><text x="45.2590%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (61 samples, 0.05%)</title><rect x="45.0090%" y="405" width="0.0494%" height="15" fill="rgb(238,181,32)" fg:x="55537" fg:w="61"/><text x="45.2590%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (78 samples, 0.06%)</title><rect x="44.9984%" y="453" width="0.0632%" height="15" fill="rgb(224,113,18)" fg:x="55524" fg:w="78"/><text x="45.2484%" y="463.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (590 samples, 0.48%)</title><rect x="45.1321%" y="293" width="0.4782%" height="15" fill="rgb(240,229,28)" fg:x="55689" fg:w="590"/><text x="45.3821%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="45.6435%" y="165" width="0.0154%" height="15" fill="rgb(250,185,3)" fg:x="56320" fg:w="19"/><text x="45.8935%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="45.6435%" y="149" width="0.0154%" height="15" fill="rgb(212,59,25)" fg:x="56320" fg:w="19"/><text x="45.8935%" y="159.50"></text></g><g><title>__rg_dealloc (19 samples, 0.02%)</title><rect x="45.6435%" y="133" width="0.0154%" height="15" fill="rgb(221,87,20)" fg:x="56320" fg:w="19"/><text x="45.8935%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (19 samples, 0.02%)</title><rect x="45.6435%" y="117" width="0.0154%" height="15" fill="rgb(213,74,28)" fg:x="56320" fg:w="19"/><text x="45.8935%" y="127.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::inner (13 samples, 0.01%)</title><rect x="45.6589%" y="165" width="0.0105%" height="15" fill="rgb(224,132,34)" fg:x="56339" fg:w="13"/><text x="45.9089%" y="175.50"></text></g><g><title>alloc::rc::is_dangling (13 samples, 0.01%)</title><rect x="45.6589%" y="149" width="0.0105%" height="15" fill="rgb(222,101,24)" fg:x="56339" fg:w="13"/><text x="45.9089%" y="159.50"></text></g><g><title>core::mem::drop (1,194 samples, 0.97%)</title><rect x="45.6435%" y="213" width="0.9677%" height="15" fill="rgb(254,142,4)" fg:x="56320" fg:w="1194"/><text x="45.8935%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,194 samples, 0.97%)</title><rect x="45.6435%" y="197" width="0.9677%" height="15" fill="rgb(230,229,49)" fg:x="56320" fg:w="1194"/><text x="45.8935%" y="207.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,194 samples, 0.97%)</title><rect x="45.6435%" y="181" width="0.9677%" height="15" fill="rgb(238,70,47)" fg:x="56320" fg:w="1194"/><text x="45.8935%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,162 samples, 0.94%)</title><rect x="45.6695%" y="165" width="0.9417%" height="15" fill="rgb(231,160,17)" fg:x="56352" fg:w="1162"/><text x="45.9195%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,162 samples, 0.94%)</title><rect x="45.6695%" y="149" width="0.9417%" height="15" fill="rgb(218,68,53)" fg:x="56352" fg:w="1162"/><text x="45.9195%" y="159.50"></text></g><g><title>sn_rust_dealloc (172 samples, 0.14%)</title><rect x="46.6468%" y="165" width="0.1394%" height="15" fill="rgb(236,111,10)" fg:x="57558" fg:w="172"/><text x="46.8968%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,825 samples, 1.48%)</title><rect x="45.6346%" y="229" width="1.4790%" height="15" fill="rgb(224,34,41)" fg:x="56309" fg:w="1825"/><text x="45.8846%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (620 samples, 0.50%)</title><rect x="46.6112%" y="213" width="0.5025%" height="15" fill="rgb(241,118,19)" fg:x="57514" fg:w="620"/><text x="46.8612%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (620 samples, 0.50%)</title><rect x="46.6112%" y="197" width="0.5025%" height="15" fill="rgb(238,129,25)" fg:x="57514" fg:w="620"/><text x="46.8612%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (620 samples, 0.50%)</title><rect x="46.6112%" y="181" width="0.5025%" height="15" fill="rgb(238,22,31)" fg:x="57514" fg:w="620"/><text x="46.8612%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (404 samples, 0.33%)</title><rect x="46.7862%" y="165" width="0.3274%" height="15" fill="rgb(222,174,48)" fg:x="57730" fg:w="404"/><text x="47.0362%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,216 samples, 0.99%)</title><rect x="47.1136%" y="229" width="0.9855%" height="15" fill="rgb(206,152,40)" fg:x="58134" fg:w="1216"/><text x="47.3636%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,216 samples, 0.99%)</title><rect x="47.1136%" y="213" width="0.9855%" height="15" fill="rgb(218,99,54)" fg:x="58134" fg:w="1216"/><text x="47.3636%" y="223.50"></text></g><g><title>sn_rust_dealloc (110 samples, 0.09%)</title><rect x="48.0991%" y="229" width="0.0891%" height="15" fill="rgb(220,174,26)" fg:x="59350" fg:w="110"/><text x="48.3491%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,850 samples, 3.12%)</title><rect x="45.0876%" y="357" width="3.1202%" height="15" fill="rgb(245,116,9)" fg:x="55634" fg:w="3850"/><text x="45.3376%" y="367.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (3,850 samples, 3.12%)</title><rect x="45.0876%" y="341" width="3.1202%" height="15" fill="rgb(209,72,35)" fg:x="55634" fg:w="3850"/><text x="45.3376%" y="351.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,824 samples, 3.10%)</title><rect x="45.1086%" y="325" width="3.0991%" height="15" fill="rgb(226,126,21)" fg:x="55660" fg:w="3824"/><text x="45.3586%" y="335.50">cor..</text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (3,824 samples, 3.10%)</title><rect x="45.1086%" y="309" width="3.0991%" height="15" fill="rgb(227,192,1)" fg:x="55660" fg:w="3824"/><text x="45.3586%" y="319.50">abi..</text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (3,205 samples, 2.60%)</title><rect x="45.6103%" y="293" width="2.5974%" height="15" fill="rgb(237,180,29)" fg:x="56279" fg:w="3205"/><text x="45.8603%" y="303.50">ab..</text></g><g><title>core::mem::drop (3,175 samples, 2.57%)</title><rect x="45.6346%" y="277" width="2.5731%" height="15" fill="rgb(230,197,35)" fg:x="56309" fg:w="3175"/><text x="45.8846%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,175 samples, 2.57%)</title><rect x="45.6346%" y="261" width="2.5731%" height="15" fill="rgb(246,193,31)" fg:x="56309" fg:w="3175"/><text x="45.8846%" y="271.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,175 samples, 2.57%)</title><rect x="45.6346%" y="245" width="2.5731%" height="15" fill="rgb(241,36,4)" fg:x="56309" fg:w="3175"/><text x="45.8846%" y="255.50">&lt;a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (24 samples, 0.02%)</title><rect x="48.1883%" y="229" width="0.0195%" height="15" fill="rgb(241,130,17)" fg:x="59460" fg:w="24"/><text x="48.4383%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="48.2077%" y="325" width="0.0138%" height="15" fill="rgb(206,137,32)" fg:x="59484" fg:w="17"/><text x="48.4577%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="48.2077%" y="309" width="0.0138%" height="15" fill="rgb(237,228,51)" fg:x="59484" fg:w="17"/><text x="48.4577%" y="319.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="48.2077%" y="293" width="0.0138%" height="15" fill="rgb(243,6,42)" fg:x="59484" fg:w="17"/><text x="48.4577%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="48.2077%" y="277" width="0.0138%" height="15" fill="rgb(251,74,28)" fg:x="59484" fg:w="17"/><text x="48.4577%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (3,909 samples, 3.17%)</title><rect x="45.0624%" y="421" width="3.1680%" height="15" fill="rgb(218,20,49)" fg:x="55603" fg:w="3909"/><text x="45.3124%" y="431.50">abi..</text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (3,897 samples, 3.16%)</title><rect x="45.0722%" y="405" width="3.1583%" height="15" fill="rgb(238,28,14)" fg:x="55615" fg:w="3897"/><text x="45.3222%" y="415.50">abi..</text></g><g><title>core::mem::drop (3,878 samples, 3.14%)</title><rect x="45.0876%" y="389" width="3.1429%" height="15" fill="rgb(229,40,46)" fg:x="55634" fg:w="3878"/><text x="45.3376%" y="399.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (3,878 samples, 3.14%)</title><rect x="45.0876%" y="373" width="3.1429%" height="15" fill="rgb(244,195,20)" fg:x="55634" fg:w="3878"/><text x="45.3376%" y="383.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="48.2077%" y="357" width="0.0227%" height="15" fill="rgb(253,56,35)" fg:x="59484" fg:w="28"/><text x="48.4577%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="48.2077%" y="341" width="0.0227%" height="15" fill="rgb(210,149,44)" fg:x="59484" fg:w="28"/><text x="48.4577%" y="351.50"></text></g><g><title>sn_rust_dealloc (112 samples, 0.09%)</title><rect x="48.2304%" y="421" width="0.0908%" height="15" fill="rgb(240,135,12)" fg:x="59512" fg:w="112"/><text x="48.4804%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,025 samples, 3.26%)</title><rect x="45.0616%" y="453" width="3.2620%" height="15" fill="rgb(251,24,50)" fg:x="55602" fg:w="4025"/><text x="45.3116%" y="463.50">cor..</text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (4,025 samples, 3.26%)</title><rect x="45.0616%" y="437" width="3.2620%" height="15" fill="rgb(243,200,47)" fg:x="55602" fg:w="4025"/><text x="45.3116%" y="447.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::slices::private::RSlice&lt;u8&gt;,abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="48.3366%" y="421" width="0.0130%" height="15" fill="rgb(224,166,26)" fg:x="59643" fg:w="16"/><text x="48.5866%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (52 samples, 0.04%)</title><rect x="48.3236%" y="453" width="0.0421%" height="15" fill="rgb(233,0,47)" fg:x="59627" fg:w="52"/><text x="48.5736%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (44 samples, 0.04%)</title><rect x="48.3301%" y="437" width="0.0357%" height="15" fill="rgb(253,80,5)" fg:x="59635" fg:w="44"/><text x="48.5801%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.02%)</title><rect x="48.3496%" y="421" width="0.0162%" height="15" fill="rgb(214,133,25)" fg:x="59659" fg:w="20"/><text x="48.5996%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="48.3496%" y="405" width="0.0162%" height="15" fill="rgb(209,27,14)" fg:x="59659" fg:w="20"/><text x="48.5996%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="48.3496%" y="389" width="0.0162%" height="15" fill="rgb(219,102,51)" fg:x="59659" fg:w="20"/><text x="48.5996%" y="399.50"></text></g><g><title>sn_rust_dealloc (88 samples, 0.07%)</title><rect x="48.3658%" y="453" width="0.0713%" height="15" fill="rgb(237,18,16)" fg:x="59679" fg:w="88"/><text x="48.6158%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,025 samples, 4.88%)</title><rect x="43.6653%" y="485" width="4.8829%" height="15" fill="rgb(241,85,17)" fg:x="53879" fg:w="6025"/><text x="43.9153%" y="495.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,380 samples, 3.55%)</title><rect x="44.9984%" y="469" width="3.5497%" height="15" fill="rgb(236,90,42)" fg:x="55524" fg:w="4380"/><text x="45.2484%" y="479.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (137 samples, 0.11%)</title><rect x="48.4371%" y="453" width="0.1110%" height="15" fill="rgb(249,57,21)" fg:x="59767" fg:w="137"/><text x="48.6871%" y="463.50"></text></g><g><title>&lt;u64 as num_traits::ops::saturating::Saturating&gt;::saturating_add (15 samples, 0.01%)</title><rect x="48.6227%" y="437" width="0.0122%" height="15" fill="rgb(243,12,36)" fg:x="59996" fg:w="15"/><text x="48.8727%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_add (15 samples, 0.01%)</title><rect x="48.6227%" y="421" width="0.0122%" height="15" fill="rgb(253,128,47)" fg:x="59996" fg:w="15"/><text x="48.8727%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (65 samples, 0.05%)</title><rect x="48.6397%" y="437" width="0.0527%" height="15" fill="rgb(207,33,20)" fg:x="60017" fg:w="65"/><text x="48.8897%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (59 samples, 0.05%)</title><rect x="48.6446%" y="421" width="0.0478%" height="15" fill="rgb(233,215,35)" fg:x="60023" fg:w="59"/><text x="48.8946%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::sub_bucket_for (21 samples, 0.02%)</title><rect x="48.6753%" y="405" width="0.0170%" height="15" fill="rgb(249,188,52)" fg:x="60061" fg:w="21"/><text x="48.9253%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (177 samples, 0.14%)</title><rect x="48.5578%" y="485" width="0.1434%" height="15" fill="rgb(225,12,32)" fg:x="59916" fg:w="177"/><text x="48.8078%" y="495.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (176 samples, 0.14%)</title><rect x="48.5586%" y="469" width="0.1426%" height="15" fill="rgb(247,98,14)" fg:x="59917" fg:w="176"/><text x="48.8086%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (176 samples, 0.14%)</title><rect x="48.5586%" y="453" width="0.1426%" height="15" fill="rgb(247,219,48)" fg:x="59917" fg:w="176"/><text x="48.8086%" y="463.50"></text></g><g><title>sn_rust_dealloc (90 samples, 0.07%)</title><rect x="48.7013%" y="485" width="0.0729%" height="15" fill="rgb(253,60,48)" fg:x="60093" fg:w="90"/><text x="48.9513%" y="495.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (146 samples, 0.12%)</title><rect x="48.7742%" y="485" width="0.1183%" height="15" fill="rgb(245,15,52)" fg:x="60183" fg:w="146"/><text x="49.0242%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (47 samples, 0.04%)</title><rect x="48.9274%" y="469" width="0.0381%" height="15" fill="rgb(220,133,28)" fg:x="60372" fg:w="47"/><text x="49.1774%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (34 samples, 0.03%)</title><rect x="48.9655%" y="469" width="0.0276%" height="15" fill="rgb(217,180,4)" fg:x="60419" fg:w="34"/><text x="49.2155%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (154 samples, 0.12%)</title><rect x="48.9930%" y="453" width="0.1248%" height="15" fill="rgb(251,24,1)" fg:x="60453" fg:w="154"/><text x="49.2430%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (65 samples, 0.05%)</title><rect x="49.1673%" y="421" width="0.0527%" height="15" fill="rgb(212,185,49)" fg:x="60668" fg:w="65"/><text x="49.4173%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (65 samples, 0.05%)</title><rect x="49.1673%" y="405" width="0.0527%" height="15" fill="rgb(215,175,22)" fg:x="60668" fg:w="65"/><text x="49.4173%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (65 samples, 0.05%)</title><rect x="49.1673%" y="389" width="0.0527%" height="15" fill="rgb(250,205,14)" fg:x="60668" fg:w="65"/><text x="49.4173%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (31 samples, 0.03%)</title><rect x="49.1948%" y="373" width="0.0251%" height="15" fill="rgb(225,211,22)" fg:x="60702" fg:w="31"/><text x="49.4448%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (31 samples, 0.03%)</title><rect x="49.1948%" y="357" width="0.0251%" height="15" fill="rgb(251,179,42)" fg:x="60702" fg:w="31"/><text x="49.4448%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (315 samples, 0.26%)</title><rect x="48.9930%" y="469" width="0.2553%" height="15" fill="rgb(208,216,51)" fg:x="60453" fg:w="315"/><text x="49.2430%" y="479.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (161 samples, 0.13%)</title><rect x="49.1178%" y="453" width="0.1305%" height="15" fill="rgb(235,36,11)" fg:x="60607" fg:w="161"/><text x="49.3678%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (161 samples, 0.13%)</title><rect x="49.1178%" y="437" width="0.1305%" height="15" fill="rgb(213,189,28)" fg:x="60607" fg:w="161"/><text x="49.3678%" y="447.50"></text></g><g><title>core::time::Duration::new (35 samples, 0.03%)</title><rect x="49.2200%" y="421" width="0.0284%" height="15" fill="rgb(227,203,42)" fg:x="60733" fg:w="35"/><text x="49.4700%" y="431.50"></text></g><g><title>tremor_common::time::nanotime (1,124 samples, 0.91%)</title><rect x="48.8925%" y="485" width="0.9109%" height="15" fill="rgb(244,72,36)" fg:x="60329" fg:w="1124"/><text x="49.1425%" y="495.50"></text></g><g><title>std::time::SystemTime::now (685 samples, 0.56%)</title><rect x="49.2483%" y="469" width="0.5551%" height="15" fill="rgb(213,53,17)" fg:x="60768" fg:w="685"/><text x="49.4983%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (685 samples, 0.56%)</title><rect x="49.2483%" y="453" width="0.5551%" height="15" fill="rgb(207,167,3)" fg:x="60768" fg:w="685"/><text x="49.4983%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (685 samples, 0.56%)</title><rect x="49.2483%" y="437" width="0.5551%" height="15" fill="rgb(216,98,30)" fg:x="60768" fg:w="685"/><text x="49.4983%" y="447.50"></text></g><g><title>__clock_gettime (566 samples, 0.46%)</title><rect x="49.3448%" y="421" width="0.4587%" height="15" fill="rgb(236,123,15)" fg:x="60887" fg:w="566"/><text x="49.5948%" y="431.50"></text></g><g><title>__vdso_clock_gettime (541 samples, 0.44%)</title><rect x="49.3650%" y="405" width="0.4384%" height="15" fill="rgb(248,81,50)" fg:x="60912" fg:w="541"/><text x="49.6150%" y="415.50"></text></g><g><title>[[vdso]] (479 samples, 0.39%)</title><rect x="49.4153%" y="389" width="0.3882%" height="15" fill="rgb(214,120,4)" fg:x="60974" fg:w="479"/><text x="49.6653%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (199 samples, 0.16%)</title><rect x="49.8245%" y="469" width="0.1613%" height="15" fill="rgb(208,179,34)" fg:x="61479" fg:w="199"/><text x="50.0745%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,911 samples, 7.22%)</title><rect x="42.7705%" y="741" width="7.2218%" height="15" fill="rgb(227,140,7)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="751.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,911 samples, 7.22%)</title><rect x="42.7705%" y="725" width="7.2218%" height="15" fill="rgb(214,22,6)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="735.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,911 samples, 7.22%)</title><rect x="42.7705%" y="709" width="7.2218%" height="15" fill="rgb(207,137,27)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="719.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,911 samples, 7.22%)</title><rect x="42.7705%" y="693" width="7.2218%" height="15" fill="rgb(210,8,46)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="703.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,911 samples, 7.22%)</title><rect x="42.7705%" y="677" width="7.2218%" height="15" fill="rgb(240,16,54)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="687.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,911 samples, 7.22%)</title><rect x="42.7705%" y="661" width="7.2218%" height="15" fill="rgb(211,209,29)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="671.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,911 samples, 7.22%)</title><rect x="42.7705%" y="645" width="7.2218%" height="15" fill="rgb(226,228,24)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="655.50">std::panic..</text></g><g><title>std::panicking::try (8,911 samples, 7.22%)</title><rect x="42.7705%" y="629" width="7.2218%" height="15" fill="rgb(222,84,9)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="639.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,911 samples, 7.22%)</title><rect x="42.7705%" y="613" width="7.2218%" height="15" fill="rgb(234,203,30)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="623.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,911 samples, 7.22%)</title><rect x="42.7705%" y="597" width="7.2218%" height="15" fill="rgb(238,109,14)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="607.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,911 samples, 7.22%)</title><rect x="42.7705%" y="581" width="7.2218%" height="15" fill="rgb(233,206,34)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="591.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,911 samples, 7.22%)</title><rect x="42.7705%" y="565" width="7.2218%" height="15" fill="rgb(220,167,47)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="575.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,911 samples, 7.22%)</title><rect x="42.7705%" y="549" width="7.2218%" height="15" fill="rgb(238,105,10)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="559.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,911 samples, 7.22%)</title><rect x="42.7705%" y="533" width="7.2218%" height="15" fill="rgb(213,227,17)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="543.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,911 samples, 7.22%)</title><rect x="42.7705%" y="517" width="7.2218%" height="15" fill="rgb(217,132,38)" fg:x="52775" fg:w="8911"/><text x="43.0205%" y="527.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,885 samples, 7.20%)</title><rect x="42.7916%" y="501" width="7.2007%" height="15" fill="rgb(242,146,4)" fg:x="52801" fg:w="8885"/><text x="43.0416%" y="511.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (233 samples, 0.19%)</title><rect x="49.8035%" y="485" width="0.1888%" height="15" fill="rgb(212,61,9)" fg:x="61453" fg:w="233"/><text x="50.0535%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="50.0126%" y="629" width="0.0413%" height="15" fill="rgb(247,126,22)" fg:x="61711" fg:w="51"/><text x="50.2626%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="50.0126%" y="613" width="0.0413%" height="15" fill="rgb(220,196,2)" fg:x="61711" fg:w="51"/><text x="50.2626%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="50.0126%" y="597" width="0.0413%" height="15" fill="rgb(208,46,4)" fg:x="61711" fg:w="51"/><text x="50.2626%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="50.0369%" y="581" width="0.0170%" height="15" fill="rgb(252,104,46)" fg:x="61741" fg:w="21"/><text x="50.2869%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (21 samples, 0.02%)</title><rect x="50.0369%" y="565" width="0.0170%" height="15" fill="rgb(237,152,48)" fg:x="61741" fg:w="21"/><text x="50.2869%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="50.0369%" y="549" width="0.0170%" height="15" fill="rgb(221,59,37)" fg:x="61741" fg:w="21"/><text x="50.2869%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (88 samples, 0.07%)</title><rect x="49.9923%" y="645" width="0.0713%" height="15" fill="rgb(209,202,51)" fg:x="61686" fg:w="88"/><text x="50.2423%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,009 samples, 7.30%)</title><rect x="42.7705%" y="757" width="7.3012%" height="15" fill="rgb(228,81,30)" fg:x="52775" fg:w="9009"/><text x="43.0205%" y="767.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (98 samples, 0.08%)</title><rect x="49.9923%" y="741" width="0.0794%" height="15" fill="rgb(227,42,39)" fg:x="61686" fg:w="98"/><text x="50.2423%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (98 samples, 0.08%)</title><rect x="49.9923%" y="725" width="0.0794%" height="15" fill="rgb(221,26,2)" fg:x="61686" fg:w="98"/><text x="50.2423%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (98 samples, 0.08%)</title><rect x="49.9923%" y="709" width="0.0794%" height="15" fill="rgb(254,61,31)" fg:x="61686" fg:w="98"/><text x="50.2423%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (98 samples, 0.08%)</title><rect x="49.9923%" y="693" width="0.0794%" height="15" fill="rgb(222,173,38)" fg:x="61686" fg:w="98"/><text x="50.2423%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (98 samples, 0.08%)</title><rect x="49.9923%" y="677" width="0.0794%" height="15" fill="rgb(218,50,12)" fg:x="61686" fg:w="98"/><text x="50.2423%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (98 samples, 0.08%)</title><rect x="49.9923%" y="661" width="0.0794%" height="15" fill="rgb(223,88,40)" fg:x="61686" fg:w="98"/><text x="50.2423%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="50.0717%" y="757" width="0.0146%" height="15" fill="rgb(237,54,19)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="50.0717%" y="741" width="0.0146%" height="15" fill="rgb(251,129,25)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.01%)</title><rect x="50.0717%" y="725" width="0.0146%" height="15" fill="rgb(238,97,19)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="50.0717%" y="709" width="0.0146%" height="15" fill="rgb(240,169,18)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (18 samples, 0.01%)</title><rect x="50.0717%" y="693" width="0.0146%" height="15" fill="rgb(230,187,49)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (18 samples, 0.01%)</title><rect x="50.0717%" y="677" width="0.0146%" height="15" fill="rgb(209,44,26)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (18 samples, 0.01%)</title><rect x="50.0717%" y="661" width="0.0146%" height="15" fill="rgb(244,0,6)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="671.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (18 samples, 0.01%)</title><rect x="50.0717%" y="645" width="0.0146%" height="15" fill="rgb(248,18,21)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="50.0717%" y="629" width="0.0146%" height="15" fill="rgb(245,180,19)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="50.0717%" y="613" width="0.0146%" height="15" fill="rgb(252,118,36)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.01%)</title><rect x="50.0717%" y="597" width="0.0146%" height="15" fill="rgb(210,224,19)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.01%)</title><rect x="50.0717%" y="581" width="0.0146%" height="15" fill="rgb(218,30,24)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.01%)</title><rect x="50.0717%" y="565" width="0.0146%" height="15" fill="rgb(219,75,50)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="575.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.01%)</title><rect x="50.0717%" y="549" width="0.0146%" height="15" fill="rgb(234,72,50)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="559.50"></text></g><g><title>__rg_alloc (18 samples, 0.01%)</title><rect x="50.0717%" y="533" width="0.0146%" height="15" fill="rgb(219,100,48)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.01%)</title><rect x="50.0717%" y="517" width="0.0146%" height="15" fill="rgb(253,5,41)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="527.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.01%)</title><rect x="50.0717%" y="501" width="0.0146%" height="15" fill="rgb(247,181,11)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="50.0717%" y="485" width="0.0146%" height="15" fill="rgb(222,223,25)" fg:x="61784" fg:w="18"/><text x="50.3217%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,113 samples, 7.39%)</title><rect x="42.7705%" y="773" width="7.3855%" height="15" fill="rgb(214,198,28)" fg:x="52775" fg:w="9113"/><text x="43.0205%" y="783.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (86 samples, 0.07%)</title><rect x="50.0863%" y="757" width="0.0697%" height="15" fill="rgb(230,46,43)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (86 samples, 0.07%)</title><rect x="50.0863%" y="741" width="0.0697%" height="15" fill="rgb(233,65,53)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (86 samples, 0.07%)</title><rect x="50.0863%" y="725" width="0.0697%" height="15" fill="rgb(221,121,27)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (86 samples, 0.07%)</title><rect x="50.0863%" y="709" width="0.0697%" height="15" fill="rgb(247,70,47)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (86 samples, 0.07%)</title><rect x="50.0863%" y="693" width="0.0697%" height="15" fill="rgb(228,85,35)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (86 samples, 0.07%)</title><rect x="50.0863%" y="677" width="0.0697%" height="15" fill="rgb(209,50,18)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (86 samples, 0.07%)</title><rect x="50.0863%" y="661" width="0.0697%" height="15" fill="rgb(250,19,35)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (86 samples, 0.07%)</title><rect x="50.0863%" y="645" width="0.0697%" height="15" fill="rgb(253,107,29)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (86 samples, 0.07%)</title><rect x="50.0863%" y="629" width="0.0697%" height="15" fill="rgb(252,179,29)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (86 samples, 0.07%)</title><rect x="50.0863%" y="613" width="0.0697%" height="15" fill="rgb(238,194,6)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (86 samples, 0.07%)</title><rect x="50.0863%" y="597" width="0.0697%" height="15" fill="rgb(238,164,29)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (86 samples, 0.07%)</title><rect x="50.0863%" y="581" width="0.0697%" height="15" fill="rgb(224,25,9)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.07%)</title><rect x="50.0863%" y="565" width="0.0697%" height="15" fill="rgb(244,153,23)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.07%)</title><rect x="50.0863%" y="549" width="0.0697%" height="15" fill="rgb(212,203,14)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="559.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.07%)</title><rect x="50.0863%" y="533" width="0.0697%" height="15" fill="rgb(220,164,20)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="543.50"></text></g><g><title>__rg_alloc (86 samples, 0.07%)</title><rect x="50.0863%" y="517" width="0.0697%" height="15" fill="rgb(222,203,48)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (86 samples, 0.07%)</title><rect x="50.0863%" y="501" width="0.0697%" height="15" fill="rgb(215,159,22)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="511.50"></text></g><g><title>sn_rust_alloc (86 samples, 0.07%)</title><rect x="50.0863%" y="485" width="0.0697%" height="15" fill="rgb(216,183,47)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (86 samples, 0.07%)</title><rect x="50.0863%" y="469" width="0.0697%" height="15" fill="rgb(229,195,25)" fg:x="61802" fg:w="86"/><text x="50.3363%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (419 samples, 0.34%)</title><rect x="50.3059%" y="661" width="0.3396%" height="15" fill="rgb(224,132,51)" fg:x="62073" fg:w="419"/><text x="50.5559%" y="671.50"></text></g><g><title>core::ptr::read (402 samples, 0.33%)</title><rect x="50.3197%" y="645" width="0.3258%" height="15" fill="rgb(240,63,7)" fg:x="62090" fg:w="402"/><text x="50.5697%" y="655.50"></text></g><g><title>[libc-2.31.so] (397 samples, 0.32%)</title><rect x="50.3238%" y="629" width="0.3217%" height="15" fill="rgb(249,182,41)" fg:x="62095" fg:w="397"/><text x="50.5738%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (232 samples, 0.19%)</title><rect x="50.6504%" y="533" width="0.1880%" height="15" fill="rgb(243,47,26)" fg:x="62498" fg:w="232"/><text x="50.9004%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (232 samples, 0.19%)</title><rect x="50.6504%" y="517" width="0.1880%" height="15" fill="rgb(233,48,2)" fg:x="62498" fg:w="232"/><text x="50.9004%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (232 samples, 0.19%)</title><rect x="50.6504%" y="501" width="0.1880%" height="15" fill="rgb(244,165,34)" fg:x="62498" fg:w="232"/><text x="50.9004%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (228 samples, 0.18%)</title><rect x="50.6536%" y="485" width="0.1848%" height="15" fill="rgb(207,89,7)" fg:x="62502" fg:w="228"/><text x="50.9036%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (228 samples, 0.18%)</title><rect x="50.6536%" y="469" width="0.1848%" height="15" fill="rgb(244,117,36)" fg:x="62502" fg:w="228"/><text x="50.9036%" y="479.50"></text></g><g><title>alloc::alloc::alloc (228 samples, 0.18%)</title><rect x="50.6536%" y="453" width="0.1848%" height="15" fill="rgb(226,144,34)" fg:x="62502" fg:w="228"/><text x="50.9036%" y="463.50"></text></g><g><title>__rg_alloc (228 samples, 0.18%)</title><rect x="50.6536%" y="437" width="0.1848%" height="15" fill="rgb(213,23,19)" fg:x="62502" fg:w="228"/><text x="50.9036%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (228 samples, 0.18%)</title><rect x="50.6536%" y="421" width="0.1848%" height="15" fill="rgb(217,75,12)" fg:x="62502" fg:w="228"/><text x="50.9036%" y="431.50"></text></g><g><title>sn_rust_alloc (222 samples, 0.18%)</title><rect x="50.6585%" y="405" width="0.1799%" height="15" fill="rgb(224,159,17)" fg:x="62508" fg:w="222"/><text x="50.9085%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="50.8238%" y="389" width="0.0146%" height="15" fill="rgb(217,118,1)" fg:x="62712" fg:w="18"/><text x="51.0738%" y="399.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (261 samples, 0.21%)</title><rect x="50.6504%" y="661" width="0.2115%" height="15" fill="rgb(232,180,48)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (261 samples, 0.21%)</title><rect x="50.6504%" y="645" width="0.2115%" height="15" fill="rgb(230,27,33)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (261 samples, 0.21%)</title><rect x="50.6504%" y="629" width="0.2115%" height="15" fill="rgb(205,31,21)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (261 samples, 0.21%)</title><rect x="50.6504%" y="613" width="0.2115%" height="15" fill="rgb(253,59,4)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (261 samples, 0.21%)</title><rect x="50.6504%" y="597" width="0.2115%" height="15" fill="rgb(224,201,9)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (261 samples, 0.21%)</title><rect x="50.6504%" y="581" width="0.2115%" height="15" fill="rgb(229,206,30)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (261 samples, 0.21%)</title><rect x="50.6504%" y="565" width="0.2115%" height="15" fill="rgb(212,67,47)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (261 samples, 0.21%)</title><rect x="50.6504%" y="549" width="0.2115%" height="15" fill="rgb(211,96,50)" fg:x="62498" fg:w="261"/><text x="50.9004%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.02%)</title><rect x="50.8384%" y="533" width="0.0235%" height="15" fill="rgb(252,114,18)" fg:x="62730" fg:w="29"/><text x="51.0884%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="50.8384%" y="517" width="0.0235%" height="15" fill="rgb(223,58,37)" fg:x="62730" fg:w="29"/><text x="51.0884%" y="527.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="50.8424%" y="501" width="0.0195%" height="15" fill="rgb(237,70,4)" fg:x="62735" fg:w="24"/><text x="51.0924%" y="511.50"></text></g><g><title>[libc-2.31.so] (605 samples, 0.49%)</title><rect x="50.8619%" y="661" width="0.4903%" height="15" fill="rgb(244,85,46)" fg:x="62759" fg:w="605"/><text x="51.1119%" y="671.50"></text></g><g><title>[libc-2.31.so] (364 samples, 0.29%)</title><rect x="51.3619%" y="645" width="0.2950%" height="15" fill="rgb(223,39,52)" fg:x="63376" fg:w="364"/><text x="51.6119%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (869 samples, 0.70%)</title><rect x="51.7064%" y="533" width="0.7043%" height="15" fill="rgb(218,200,14)" fg:x="63801" fg:w="869"/><text x="51.9564%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="52.4106%" y="533" width="0.0186%" height="15" fill="rgb(208,171,16)" fg:x="64670" fg:w="23"/><text x="52.6606%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1,330 samples, 1.08%)</title><rect x="51.3522%" y="661" width="1.0779%" height="15" fill="rgb(234,200,18)" fg:x="63364" fg:w="1330"/><text x="51.6022%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (954 samples, 0.77%)</title><rect x="51.6569%" y="645" width="0.7732%" height="15" fill="rgb(228,45,11)" fg:x="63740" fg:w="954"/><text x="51.9069%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (954 samples, 0.77%)</title><rect x="51.6569%" y="629" width="0.7732%" height="15" fill="rgb(237,182,11)" fg:x="63740" fg:w="954"/><text x="51.9069%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (954 samples, 0.77%)</title><rect x="51.6569%" y="613" width="0.7732%" height="15" fill="rgb(241,175,49)" fg:x="63740" fg:w="954"/><text x="51.9069%" y="623.50"></text></g><g><title>alloc::alloc::alloc (954 samples, 0.77%)</title><rect x="51.6569%" y="597" width="0.7732%" height="15" fill="rgb(247,38,35)" fg:x="63740" fg:w="954"/><text x="51.9069%" y="607.50"></text></g><g><title>__rg_alloc (954 samples, 0.77%)</title><rect x="51.6569%" y="581" width="0.7732%" height="15" fill="rgb(228,39,49)" fg:x="63740" fg:w="954"/><text x="51.9069%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (954 samples, 0.77%)</title><rect x="51.6569%" y="565" width="0.7732%" height="15" fill="rgb(226,101,26)" fg:x="63740" fg:w="954"/><text x="51.9069%" y="575.50"></text></g><g><title>sn_rust_alloc (953 samples, 0.77%)</title><rect x="51.6577%" y="549" width="0.7723%" height="15" fill="rgb(206,141,19)" fg:x="63741" fg:w="953"/><text x="51.9077%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (15 samples, 0.01%)</title><rect x="52.4406%" y="629" width="0.0122%" height="15" fill="rgb(211,200,13)" fg:x="64707" fg:w="15"/><text x="52.6906%" y="639.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="52.4406%" y="613" width="0.0122%" height="15" fill="rgb(241,121,6)" fg:x="64707" fg:w="15"/><text x="52.6906%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="52.4301%" y="645" width="0.0348%" height="15" fill="rgb(234,221,29)" fg:x="64694" fg:w="43"/><text x="52.6801%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (15 samples, 0.01%)</title><rect x="52.4528%" y="629" width="0.0122%" height="15" fill="rgb(229,136,5)" fg:x="64722" fg:w="15"/><text x="52.7028%" y="639.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="52.4649%" y="645" width="0.0308%" height="15" fill="rgb(238,36,11)" fg:x="64737" fg:w="38"/><text x="52.7149%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (95 samples, 0.08%)</title><rect x="52.4301%" y="661" width="0.0770%" height="15" fill="rgb(251,55,41)" fg:x="64694" fg:w="95"/><text x="52.6801%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (14 samples, 0.01%)</title><rect x="52.4957%" y="645" width="0.0113%" height="15" fill="rgb(242,34,40)" fg:x="64775" fg:w="14"/><text x="52.7457%" y="655.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (46 samples, 0.04%)</title><rect x="52.5192%" y="661" width="0.0373%" height="15" fill="rgb(215,42,17)" fg:x="64804" fg:w="46"/><text x="52.7692%" y="671.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (46 samples, 0.04%)</title><rect x="52.5192%" y="645" width="0.0373%" height="15" fill="rgb(207,44,46)" fg:x="64804" fg:w="46"/><text x="52.7692%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (42 samples, 0.03%)</title><rect x="52.5225%" y="629" width="0.0340%" height="15" fill="rgb(211,206,28)" fg:x="64808" fg:w="42"/><text x="52.7725%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (42 samples, 0.03%)</title><rect x="52.5225%" y="613" width="0.0340%" height="15" fill="rgb(237,167,16)" fg:x="64808" fg:w="42"/><text x="52.7725%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (28 samples, 0.02%)</title><rect x="52.5338%" y="597" width="0.0227%" height="15" fill="rgb(233,66,6)" fg:x="64822" fg:w="28"/><text x="52.7838%" y="607.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (28 samples, 0.02%)</title><rect x="52.5338%" y="581" width="0.0227%" height="15" fill="rgb(246,123,29)" fg:x="64822" fg:w="28"/><text x="52.7838%" y="591.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (28 samples, 0.02%)</title><rect x="52.5338%" y="565" width="0.0227%" height="15" fill="rgb(209,62,40)" fg:x="64822" fg:w="28"/><text x="52.7838%" y="575.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (27 samples, 0.02%)</title><rect x="52.5346%" y="549" width="0.0219%" height="15" fill="rgb(218,4,25)" fg:x="64823" fg:w="27"/><text x="52.7846%" y="559.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (14 samples, 0.01%)</title><rect x="52.5606%" y="661" width="0.0113%" height="15" fill="rgb(253,91,49)" fg:x="64855" fg:w="14"/><text x="52.8106%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,037 samples, 2.46%)</title><rect x="50.1560%" y="773" width="2.4613%" height="15" fill="rgb(228,155,29)" fg:x="61888" fg:w="3037"/><text x="50.4060%" y="783.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,037 samples, 2.46%)</title><rect x="50.1560%" y="757" width="2.4613%" height="15" fill="rgb(243,57,37)" fg:x="61888" fg:w="3037"/><text x="50.4060%" y="767.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,037 samples, 2.46%)</title><rect x="50.1560%" y="741" width="2.4613%" height="15" fill="rgb(244,167,17)" fg:x="61888" fg:w="3037"/><text x="50.4060%" y="751.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,037 samples, 2.46%)</title><rect x="50.1560%" y="725" width="2.4613%" height="15" fill="rgb(207,181,38)" fg:x="61888" fg:w="3037"/><text x="50.4060%" y="735.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,037 samples, 2.46%)</title><rect x="50.1560%" y="709" width="2.4613%" height="15" fill="rgb(211,8,23)" fg:x="61888" fg:w="3037"/><text x="50.4060%" y="719.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,037 samples, 2.46%)</title><rect x="50.1560%" y="693" width="2.4613%" height="15" fill="rgb(235,11,44)" fg:x="61888" fg:w="3037"/><text x="50.4060%" y="703.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,037 samples, 2.46%)</title><rect x="50.1560%" y="677" width="2.4613%" height="15" fill="rgb(248,18,52)" fg:x="61888" fg:w="3037"/><text x="50.4060%" y="687.50">tr..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (56 samples, 0.05%)</title><rect x="52.5719%" y="661" width="0.0454%" height="15" fill="rgb(208,4,7)" fg:x="64869" fg:w="56"/><text x="52.8219%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (56 samples, 0.05%)</title><rect x="52.5719%" y="645" width="0.0454%" height="15" fill="rgb(240,17,39)" fg:x="64869" fg:w="56"/><text x="52.8219%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (56 samples, 0.05%)</title><rect x="52.5719%" y="629" width="0.0454%" height="15" fill="rgb(207,170,3)" fg:x="64869" fg:w="56"/><text x="52.8219%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (35 samples, 0.03%)</title><rect x="52.5889%" y="613" width="0.0284%" height="15" fill="rgb(236,100,52)" fg:x="64890" fg:w="35"/><text x="52.8389%" y="623.50"></text></g><g><title>async_io::driver::block_on (12,151 samples, 9.85%)</title><rect x="42.7705%" y="1077" width="9.8476%" height="15" fill="rgb(246,78,51)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="1087.50">async_io::driv..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="1061" width="9.8476%" height="15" fill="rgb(211,17,15)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="1071.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="1045" width="9.8476%" height="15" fill="rgb(209,59,46)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="1055.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::run::{{closure}} (12,151 samples, 9.85%)</title><rect x="42.7705%" y="1029" width="9.8476%" height="15" fill="rgb(210,92,25)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="1039.50">async_executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="1013" width="9.8476%" height="15" fill="rgb(238,174,52)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="1023.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="997" width="9.8476%" height="15" fill="rgb(230,73,7)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="1007.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (12,151 samples, 9.85%)</title><rect x="42.7705%" y="981" width="9.8476%" height="15" fill="rgb(243,124,40)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="991.50">async_executor..</text></g><g><title>async_task::runnable::Runnable::run (12,151 samples, 9.85%)</title><rect x="42.7705%" y="965" width="9.8476%" height="15" fill="rgb(244,170,11)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="975.50">async_task::ru..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (12,151 samples, 9.85%)</title><rect x="42.7705%" y="949" width="9.8476%" height="15" fill="rgb(207,114,54)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="959.50">async_task::ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="933" width="9.8476%" height="15" fill="rgb(205,42,20)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="943.50">&lt;core::pin::Pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="917" width="9.8476%" height="15" fill="rgb(230,30,28)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="927.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (12,151 samples, 9.85%)</title><rect x="42.7705%" y="901" width="9.8476%" height="15" fill="rgb(205,73,54)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="911.50">async_executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="885" width="9.8476%" height="15" fill="rgb(254,227,23)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="895.50">&lt;async_std::ta..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (12,151 samples, 9.85%)</title><rect x="42.7705%" y="869" width="9.8476%" height="15" fill="rgb(228,202,34)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="879.50">async_std::tas..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,151 samples, 9.85%)</title><rect x="42.7705%" y="853" width="9.8476%" height="15" fill="rgb(222,225,37)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="863.50">std::thread::l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,151 samples, 9.85%)</title><rect x="42.7705%" y="837" width="9.8476%" height="15" fill="rgb(221,14,54)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="847.50">std::thread::l..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (12,151 samples, 9.85%)</title><rect x="42.7705%" y="821" width="9.8476%" height="15" fill="rgb(254,102,2)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="831.50">async_std::tas..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (12,151 samples, 9.85%)</title><rect x="42.7705%" y="805" width="9.8476%" height="15" fill="rgb(232,104,17)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="815.50">&lt;async_std::ta..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,151 samples, 9.85%)</title><rect x="42.7705%" y="789" width="9.8476%" height="15" fill="rgb(250,220,14)" fg:x="52775" fg:w="12151"/><text x="43.0205%" y="799.50">&lt;core::future:..</text></g><g><title>[libc-2.31.so] (638 samples, 0.52%)</title><rect x="52.7461%" y="821" width="0.5171%" height="15" fill="rgb(241,158,9)" fg:x="65084" fg:w="638"/><text x="52.9961%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (692 samples, 0.56%)</title><rect x="52.7105%" y="837" width="0.5608%" height="15" fill="rgb(246,9,43)" fg:x="65040" fg:w="692"/><text x="52.9605%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,143 samples, 0.93%)</title><rect x="52.6457%" y="853" width="0.9263%" height="15" fill="rgb(206,73,33)" fg:x="64960" fg:w="1143"/><text x="52.8957%" y="863.50"></text></g><g><title>[libc-2.31.so] (371 samples, 0.30%)</title><rect x="53.2713%" y="837" width="0.3007%" height="15" fill="rgb(222,79,8)" fg:x="65732" fg:w="371"/><text x="53.5213%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (1,176 samples, 0.95%)</title><rect x="52.6286%" y="901" width="0.9531%" height="15" fill="rgb(234,8,54)" fg:x="64939" fg:w="1176"/><text x="52.8786%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,176 samples, 0.95%)</title><rect x="52.6286%" y="885" width="0.9531%" height="15" fill="rgb(209,134,38)" fg:x="64939" fg:w="1176"/><text x="52.8786%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,176 samples, 0.95%)</title><rect x="52.6286%" y="869" width="0.9531%" height="15" fill="rgb(230,127,29)" fg:x="64939" fg:w="1176"/><text x="52.8786%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (323 samples, 0.26%)</title><rect x="53.7235%" y="693" width="0.2618%" height="15" fill="rgb(242,44,41)" fg:x="66290" fg:w="323"/><text x="53.9735%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (323 samples, 0.26%)</title><rect x="53.7235%" y="677" width="0.2618%" height="15" fill="rgb(222,56,43)" fg:x="66290" fg:w="323"/><text x="53.9735%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (582 samples, 0.47%)</title><rect x="53.9853%" y="693" width="0.4717%" height="15" fill="rgb(238,39,47)" fg:x="66613" fg:w="582"/><text x="54.2353%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (579 samples, 0.47%)</title><rect x="53.9877%" y="677" width="0.4692%" height="15" fill="rgb(226,79,43)" fg:x="66616" fg:w="579"/><text x="54.2377%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,038 samples, 0.84%)</title><rect x="53.6182%" y="725" width="0.8412%" height="15" fill="rgb(242,105,53)" fg:x="66160" fg:w="1038"/><text x="53.8682%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,006 samples, 0.82%)</title><rect x="53.6441%" y="709" width="0.8153%" height="15" fill="rgb(251,132,46)" fg:x="66192" fg:w="1006"/><text x="53.8941%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (71 samples, 0.06%)</title><rect x="54.4691%" y="709" width="0.0575%" height="15" fill="rgb(231,77,14)" fg:x="67210" fg:w="71"/><text x="54.7191%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (66 samples, 0.05%)</title><rect x="54.4732%" y="693" width="0.0535%" height="15" fill="rgb(240,135,9)" fg:x="67215" fg:w="66"/><text x="54.7232%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.05%)</title><rect x="54.4732%" y="677" width="0.0535%" height="15" fill="rgb(248,109,14)" fg:x="67215" fg:w="66"/><text x="54.7232%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (61 samples, 0.05%)</title><rect x="54.4772%" y="661" width="0.0494%" height="15" fill="rgb(227,146,52)" fg:x="67220" fg:w="61"/><text x="54.7272%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (61 samples, 0.05%)</title><rect x="54.4772%" y="645" width="0.0494%" height="15" fill="rgb(232,54,3)" fg:x="67220" fg:w="61"/><text x="54.7272%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (61 samples, 0.05%)</title><rect x="54.4772%" y="629" width="0.0494%" height="15" fill="rgb(229,201,43)" fg:x="67220" fg:w="61"/><text x="54.7272%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.05%)</title><rect x="54.4772%" y="613" width="0.0494%" height="15" fill="rgb(252,161,33)" fg:x="67220" fg:w="61"/><text x="54.7272%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (41 samples, 0.03%)</title><rect x="54.5267%" y="709" width="0.0332%" height="15" fill="rgb(226,146,40)" fg:x="67281" fg:w="41"/><text x="54.7767%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (41 samples, 0.03%)</title><rect x="54.5267%" y="693" width="0.0332%" height="15" fill="rgb(219,47,25)" fg:x="67281" fg:w="41"/><text x="54.7767%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (107 samples, 0.09%)</title><rect x="54.5785%" y="645" width="0.0867%" height="15" fill="rgb(250,135,13)" fg:x="67345" fg:w="107"/><text x="54.8285%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (107 samples, 0.09%)</title><rect x="54.5785%" y="629" width="0.0867%" height="15" fill="rgb(219,229,18)" fg:x="67345" fg:w="107"/><text x="54.8285%" y="639.50"></text></g><g><title>event_listener::Inner::lock (142 samples, 0.12%)</title><rect x="54.5599%" y="709" width="0.1151%" height="15" fill="rgb(217,152,27)" fg:x="67322" fg:w="142"/><text x="54.8099%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (130 samples, 0.11%)</title><rect x="54.5696%" y="693" width="0.1054%" height="15" fill="rgb(225,71,47)" fg:x="67334" fg:w="130"/><text x="54.8196%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (119 samples, 0.10%)</title><rect x="54.5785%" y="677" width="0.0964%" height="15" fill="rgb(220,139,14)" fg:x="67345" fg:w="119"/><text x="54.8285%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (119 samples, 0.10%)</title><rect x="54.5785%" y="661" width="0.0964%" height="15" fill="rgb(247,54,32)" fg:x="67345" fg:w="119"/><text x="54.8285%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (36 samples, 0.03%)</title><rect x="54.6888%" y="661" width="0.0292%" height="15" fill="rgb(252,131,39)" fg:x="67481" fg:w="36"/><text x="54.9388%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.03%)</title><rect x="54.6912%" y="645" width="0.0267%" height="15" fill="rgb(210,108,39)" fg:x="67484" fg:w="33"/><text x="54.9412%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.03%)</title><rect x="54.6912%" y="629" width="0.0267%" height="15" fill="rgb(205,23,29)" fg:x="67484" fg:w="33"/><text x="54.9412%" y="639.50"></text></g><g><title>async_executor::Sleepers::notify (37 samples, 0.03%)</title><rect x="54.7277%" y="613" width="0.0300%" height="15" fill="rgb(246,139,46)" fg:x="67529" fg:w="37"/><text x="54.9777%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (32 samples, 0.03%)</title><rect x="54.7317%" y="597" width="0.0259%" height="15" fill="rgb(250,81,26)" fg:x="67534" fg:w="32"/><text x="54.9817%" y="607.50"></text></g><g><title>core::ptr::read (30 samples, 0.02%)</title><rect x="54.7333%" y="581" width="0.0243%" height="15" fill="rgb(214,104,7)" fg:x="67536" fg:w="30"/><text x="54.9833%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (66 samples, 0.05%)</title><rect x="54.7593%" y="549" width="0.0535%" height="15" fill="rgb(233,189,8)" fg:x="67568" fg:w="66"/><text x="55.0093%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (66 samples, 0.05%)</title><rect x="54.7593%" y="533" width="0.0535%" height="15" fill="rgb(228,141,17)" fg:x="67568" fg:w="66"/><text x="55.0093%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (71 samples, 0.06%)</title><rect x="54.7576%" y="613" width="0.0575%" height="15" fill="rgb(247,157,1)" fg:x="67566" fg:w="71"/><text x="55.0076%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 0.06%)</title><rect x="54.7576%" y="597" width="0.0575%" height="15" fill="rgb(249,225,5)" fg:x="67566" fg:w="71"/><text x="55.0076%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (69 samples, 0.06%)</title><rect x="54.7593%" y="581" width="0.0559%" height="15" fill="rgb(242,55,13)" fg:x="67568" fg:w="69"/><text x="55.0093%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (69 samples, 0.06%)</title><rect x="54.7593%" y="565" width="0.0559%" height="15" fill="rgb(230,49,50)" fg:x="67568" fg:w="69"/><text x="55.0093%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (58 samples, 0.05%)</title><rect x="54.8152%" y="613" width="0.0470%" height="15" fill="rgb(241,111,38)" fg:x="67637" fg:w="58"/><text x="55.0652%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.05%)</title><rect x="54.8152%" y="597" width="0.0470%" height="15" fill="rgb(252,155,4)" fg:x="67637" fg:w="58"/><text x="55.0652%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::notify (28 samples, 0.02%)</title><rect x="54.8679%" y="565" width="0.0227%" height="15" fill="rgb(212,69,32)" fg:x="67702" fg:w="28"/><text x="55.1179%" y="575.50"></text></g><g><title>polling::Poller::notify (26 samples, 0.02%)</title><rect x="54.8695%" y="549" width="0.0211%" height="15" fill="rgb(243,107,47)" fg:x="67704" fg:w="26"/><text x="55.1195%" y="559.50"></text></g><g><title>polling::epoll::Poller::notify (14 samples, 0.01%)</title><rect x="54.8792%" y="533" width="0.0113%" height="15" fill="rgb(247,130,12)" fg:x="67716" fg:w="14"/><text x="55.1292%" y="543.50"></text></g><g><title>__libc_write (13 samples, 0.01%)</title><rect x="54.8800%" y="517" width="0.0105%" height="15" fill="rgb(233,74,16)" fg:x="67717" fg:w="13"/><text x="55.1300%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (59 samples, 0.05%)</title><rect x="54.9165%" y="533" width="0.0478%" height="15" fill="rgb(208,58,18)" fg:x="67762" fg:w="59"/><text x="55.1665%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (59 samples, 0.05%)</title><rect x="54.9165%" y="517" width="0.0478%" height="15" fill="rgb(242,225,1)" fg:x="67762" fg:w="59"/><text x="55.1665%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (22 samples, 0.02%)</title><rect x="54.9643%" y="533" width="0.0178%" height="15" fill="rgb(249,39,40)" fg:x="67821" fg:w="22"/><text x="55.2143%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (22 samples, 0.02%)</title><rect x="54.9643%" y="517" width="0.0178%" height="15" fill="rgb(207,72,44)" fg:x="67821" fg:w="22"/><text x="55.2143%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (22 samples, 0.02%)</title><rect x="54.9643%" y="501" width="0.0178%" height="15" fill="rgb(215,193,12)" fg:x="67821" fg:w="22"/><text x="55.2143%" y="511.50"></text></g><g><title>std::sys::unix::futex::futex_wake (15 samples, 0.01%)</title><rect x="54.9700%" y="485" width="0.0122%" height="15" fill="rgb(248,41,39)" fg:x="67828" fg:w="15"/><text x="55.2200%" y="495.50"></text></g><g><title>syscall (15 samples, 0.01%)</title><rect x="54.9700%" y="469" width="0.0122%" height="15" fill="rgb(253,85,4)" fg:x="67828" fg:w="15"/><text x="55.2200%" y="479.50"></text></g><g><title>parking::Unparker::unpark (115 samples, 0.09%)</title><rect x="54.8962%" y="565" width="0.0932%" height="15" fill="rgb(243,70,31)" fg:x="67737" fg:w="115"/><text x="55.1462%" y="575.50"></text></g><g><title>parking::Inner::unpark (98 samples, 0.08%)</title><rect x="54.9100%" y="549" width="0.0794%" height="15" fill="rgb(253,195,26)" fg:x="67754" fg:w="98"/><text x="55.1600%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (161 samples, 0.13%)</title><rect x="54.8638%" y="581" width="0.1305%" height="15" fill="rgb(243,42,11)" fg:x="67697" fg:w="161"/><text x="55.1138%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (241 samples, 0.20%)</title><rect x="54.8622%" y="613" width="0.1953%" height="15" fill="rgb(239,66,17)" fg:x="67695" fg:w="241"/><text x="55.1122%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (241 samples, 0.20%)</title><rect x="54.8622%" y="597" width="0.1953%" height="15" fill="rgb(217,132,21)" fg:x="67695" fg:w="241"/><text x="55.1122%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (78 samples, 0.06%)</title><rect x="54.9943%" y="581" width="0.0632%" height="15" fill="rgb(252,202,21)" fg:x="67858" fg:w="78"/><text x="55.2443%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.06%)</title><rect x="54.9943%" y="565" width="0.0632%" height="15" fill="rgb(233,98,36)" fg:x="67858" fg:w="78"/><text x="55.2443%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (77 samples, 0.06%)</title><rect x="54.9951%" y="549" width="0.0624%" height="15" fill="rgb(216,153,54)" fg:x="67859" fg:w="77"/><text x="55.2451%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (77 samples, 0.06%)</title><rect x="54.9951%" y="533" width="0.0624%" height="15" fill="rgb(250,99,7)" fg:x="67859" fg:w="77"/><text x="55.2451%" y="543.50"></text></g><g><title>std::sync::poison::Flag::get (18 samples, 0.01%)</title><rect x="55.0575%" y="565" width="0.0146%" height="15" fill="rgb(207,56,50)" fg:x="67936" fg:w="18"/><text x="55.3075%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (18 samples, 0.01%)</title><rect x="55.0575%" y="549" width="0.0146%" height="15" fill="rgb(244,61,34)" fg:x="67936" fg:w="18"/><text x="55.3075%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="55.0575%" y="533" width="0.0146%" height="15" fill="rgb(241,50,38)" fg:x="67936" fg:w="18"/><text x="55.3075%" y="543.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="55.0575%" y="597" width="0.0154%" height="15" fill="rgb(212,166,30)" fg:x="67936" fg:w="19"/><text x="55.3075%" y="607.50"></text></g><g><title>std::sync::poison::Flag::borrow (19 samples, 0.02%)</title><rect x="55.0575%" y="581" width="0.0154%" height="15" fill="rgb(249,127,32)" fg:x="67936" fg:w="19"/><text x="55.3075%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (70 samples, 0.06%)</title><rect x="55.0786%" y="565" width="0.0567%" height="15" fill="rgb(209,103,0)" fg:x="67962" fg:w="70"/><text x="55.3286%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (70 samples, 0.06%)</title><rect x="55.0786%" y="549" width="0.0567%" height="15" fill="rgb(238,209,51)" fg:x="67962" fg:w="70"/><text x="55.3286%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (23 samples, 0.02%)</title><rect x="55.1361%" y="549" width="0.0186%" height="15" fill="rgb(237,56,23)" fg:x="68033" fg:w="23"/><text x="55.3861%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="55.1361%" y="533" width="0.0186%" height="15" fill="rgb(215,153,46)" fg:x="68033" fg:w="23"/><text x="55.3861%" y="543.50"></text></g><g><title>core::hint::spin_loop (20 samples, 0.02%)</title><rect x="55.1661%" y="533" width="0.0162%" height="15" fill="rgb(224,49,31)" fg:x="68070" fg:w="20"/><text x="55.4161%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (20 samples, 0.02%)</title><rect x="55.1661%" y="517" width="0.0162%" height="15" fill="rgb(250,18,42)" fg:x="68070" fg:w="20"/><text x="55.4161%" y="527.50"></text></g><g><title>async_executor::State::notify (594 samples, 0.48%)</title><rect x="54.7220%" y="629" width="0.4814%" height="15" fill="rgb(215,176,39)" fg:x="67522" fg:w="594"/><text x="54.9720%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (180 samples, 0.15%)</title><rect x="55.0575%" y="613" width="0.1459%" height="15" fill="rgb(223,77,29)" fg:x="67936" fg:w="180"/><text x="55.3075%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (161 samples, 0.13%)</title><rect x="55.0729%" y="597" width="0.1305%" height="15" fill="rgb(234,94,52)" fg:x="67955" fg:w="161"/><text x="55.3229%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (161 samples, 0.13%)</title><rect x="55.0729%" y="581" width="0.1305%" height="15" fill="rgb(220,154,50)" fg:x="67955" fg:w="161"/><text x="55.3229%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (84 samples, 0.07%)</title><rect x="55.1353%" y="565" width="0.0681%" height="15" fill="rgb(212,11,10)" fg:x="68032" fg:w="84"/><text x="55.3853%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (48 samples, 0.04%)</title><rect x="55.1645%" y="549" width="0.0389%" height="15" fill="rgb(205,166,19)" fg:x="68068" fg:w="48"/><text x="55.4145%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (26 samples, 0.02%)</title><rect x="55.1823%" y="533" width="0.0211%" height="15" fill="rgb(244,198,16)" fg:x="68090" fg:w="26"/><text x="55.4323%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="55.1823%" y="517" width="0.0211%" height="15" fill="rgb(219,69,12)" fg:x="68090" fg:w="26"/><text x="55.4323%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (119 samples, 0.10%)</title><rect x="55.2180%" y="597" width="0.0964%" height="15" fill="rgb(245,30,7)" fg:x="68134" fg:w="119"/><text x="55.4680%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (119 samples, 0.10%)</title><rect x="55.2180%" y="581" width="0.0964%" height="15" fill="rgb(218,221,48)" fg:x="68134" fg:w="119"/><text x="55.4680%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (31 samples, 0.03%)</title><rect x="55.3160%" y="597" width="0.0251%" height="15" fill="rgb(216,66,15)" fg:x="68255" fg:w="31"/><text x="55.5660%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (31 samples, 0.03%)</title><rect x="55.3160%" y="581" width="0.0251%" height="15" fill="rgb(226,122,50)" fg:x="68255" fg:w="31"/><text x="55.5660%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (765 samples, 0.62%)</title><rect x="54.7220%" y="645" width="0.6200%" height="15" fill="rgb(239,156,16)" fg:x="67522" fg:w="765"/><text x="54.9720%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (171 samples, 0.14%)</title><rect x="55.2034%" y="629" width="0.1386%" height="15" fill="rgb(224,27,38)" fg:x="68116" fg:w="171"/><text x="55.4534%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (168 samples, 0.14%)</title><rect x="55.2058%" y="613" width="0.1362%" height="15" fill="rgb(224,39,27)" fg:x="68119" fg:w="168"/><text x="55.4558%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (119 samples, 0.10%)</title><rect x="55.3420%" y="645" width="0.0964%" height="15" fill="rgb(215,92,29)" fg:x="68287" fg:w="119"/><text x="55.5920%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (119 samples, 0.10%)</title><rect x="55.3420%" y="629" width="0.0964%" height="15" fill="rgb(207,159,16)" fg:x="68287" fg:w="119"/><text x="55.5920%" y="639.50"></text></g><g><title>event_listener::List::notify (967 samples, 0.78%)</title><rect x="54.6750%" y="709" width="0.7837%" height="15" fill="rgb(238,163,47)" fg:x="67464" fg:w="967"/><text x="54.9250%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (953 samples, 0.77%)</title><rect x="54.6863%" y="693" width="0.7723%" height="15" fill="rgb(219,91,49)" fg:x="67478" fg:w="953"/><text x="54.9363%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (952 samples, 0.77%)</title><rect x="54.6871%" y="677" width="0.7715%" height="15" fill="rgb(227,167,31)" fg:x="67479" fg:w="952"/><text x="54.9371%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (914 samples, 0.74%)</title><rect x="54.7179%" y="661" width="0.7407%" height="15" fill="rgb(234,80,54)" fg:x="67517" fg:w="914"/><text x="54.9679%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25 samples, 0.02%)</title><rect x="55.4384%" y="645" width="0.0203%" height="15" fill="rgb(212,114,2)" fg:x="68406" fg:w="25"/><text x="55.6884%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.02%)</title><rect x="55.4384%" y="629" width="0.0203%" height="15" fill="rgb(234,50,24)" fg:x="68406" fg:w="25"/><text x="55.6884%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,071 samples, 2.49%)</title><rect x="53.6012%" y="741" width="2.4888%" height="15" fill="rgb(221,68,8)" fg:x="66139" fg:w="3071"/><text x="53.8512%" y="751.50">as..</text></g><g><title>event_listener::Event::notify (2,012 samples, 1.63%)</title><rect x="54.4594%" y="725" width="1.6306%" height="15" fill="rgb(254,180,31)" fg:x="67198" fg:w="2012"/><text x="54.7094%" y="735.50"></text></g><g><title>event_listener::full_fence (779 samples, 0.63%)</title><rect x="55.4587%" y="709" width="0.6313%" height="15" fill="rgb(247,130,50)" fg:x="68431" fg:w="779"/><text x="55.7087%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (779 samples, 0.63%)</title><rect x="55.4587%" y="693" width="0.6313%" height="15" fill="rgb(211,109,4)" fg:x="68431" fg:w="779"/><text x="55.7087%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (779 samples, 0.63%)</title><rect x="55.4587%" y="677" width="0.6313%" height="15" fill="rgb(238,50,21)" fg:x="68431" fg:w="779"/><text x="55.7087%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (17 samples, 0.01%)</title><rect x="56.0900%" y="741" width="0.0138%" height="15" fill="rgb(225,57,45)" fg:x="69210" fg:w="17"/><text x="56.3400%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,247 samples, 2.63%)</title><rect x="53.5817%" y="821" width="2.6315%" height="15" fill="rgb(209,196,50)" fg:x="66115" fg:w="3247"/><text x="53.8317%" y="831.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,247 samples, 2.63%)</title><rect x="53.5817%" y="805" width="2.6315%" height="15" fill="rgb(242,140,13)" fg:x="66115" fg:w="3247"/><text x="53.8317%" y="815.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,247 samples, 2.63%)</title><rect x="53.5817%" y="789" width="2.6315%" height="15" fill="rgb(217,111,7)" fg:x="66115" fg:w="3247"/><text x="53.8317%" y="799.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (3,247 samples, 2.63%)</title><rect x="53.5817%" y="773" width="2.6315%" height="15" fill="rgb(253,193,51)" fg:x="66115" fg:w="3247"/><text x="53.8317%" y="783.50">tr..</text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,247 samples, 2.63%)</title><rect x="53.5817%" y="757" width="2.6315%" height="15" fill="rgb(252,70,29)" fg:x="66115" fg:w="3247"/><text x="53.8317%" y="767.50">&lt;a..</text></g><g><title>event_listener::Event::notify (131 samples, 0.11%)</title><rect x="56.1070%" y="741" width="0.1062%" height="15" fill="rgb(232,127,12)" fg:x="69231" fg:w="131"/><text x="56.3570%" y="751.50"></text></g><g><title>event_listener::full_fence (128 samples, 0.10%)</title><rect x="56.1094%" y="725" width="0.1037%" height="15" fill="rgb(211,180,21)" fg:x="69234" fg:w="128"/><text x="56.3594%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (128 samples, 0.10%)</title><rect x="56.1094%" y="709" width="0.1037%" height="15" fill="rgb(229,72,13)" fg:x="69234" fg:w="128"/><text x="56.3594%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (128 samples, 0.10%)</title><rect x="56.1094%" y="693" width="0.1037%" height="15" fill="rgb(240,211,49)" fg:x="69234" fg:w="128"/><text x="56.3594%" y="703.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="56.8477%" y="805" width="0.0316%" height="15" fill="rgb(219,149,40)" fg:x="70145" fg:w="39"/><text x="57.0977%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.02%)</title><rect x="57.4142%" y="533" width="0.0243%" height="15" fill="rgb(210,127,46)" fg:x="70844" fg:w="30"/><text x="57.6642%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (115 samples, 0.09%)</title><rect x="57.3462%" y="677" width="0.0932%" height="15" fill="rgb(220,106,7)" fg:x="70760" fg:w="115"/><text x="57.5962%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (115 samples, 0.09%)</title><rect x="57.3462%" y="661" width="0.0932%" height="15" fill="rgb(249,31,22)" fg:x="70760" fg:w="115"/><text x="57.5962%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (115 samples, 0.09%)</title><rect x="57.3462%" y="645" width="0.0932%" height="15" fill="rgb(253,1,49)" fg:x="70760" fg:w="115"/><text x="57.5962%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (115 samples, 0.09%)</title><rect x="57.3462%" y="629" width="0.0932%" height="15" fill="rgb(227,144,33)" fg:x="70760" fg:w="115"/><text x="57.5962%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (115 samples, 0.09%)</title><rect x="57.3462%" y="613" width="0.0932%" height="15" fill="rgb(249,163,44)" fg:x="70760" fg:w="115"/><text x="57.5962%" y="623.50"></text></g><g><title>alloc::alloc::alloc (106 samples, 0.09%)</title><rect x="57.3535%" y="597" width="0.0859%" height="15" fill="rgb(234,15,39)" fg:x="70769" fg:w="106"/><text x="57.6035%" y="607.50"></text></g><g><title>__rg_alloc (106 samples, 0.09%)</title><rect x="57.3535%" y="581" width="0.0859%" height="15" fill="rgb(207,66,16)" fg:x="70769" fg:w="106"/><text x="57.6035%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (106 samples, 0.09%)</title><rect x="57.3535%" y="565" width="0.0859%" height="15" fill="rgb(233,112,24)" fg:x="70769" fg:w="106"/><text x="57.6035%" y="575.50"></text></g><g><title>sn_rust_alloc (92 samples, 0.07%)</title><rect x="57.3648%" y="549" width="0.0746%" height="15" fill="rgb(230,90,22)" fg:x="70783" fg:w="92"/><text x="57.6148%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (178 samples, 0.14%)</title><rect x="57.3283%" y="789" width="0.1443%" height="15" fill="rgb(229,61,13)" fg:x="70738" fg:w="178"/><text x="57.5783%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (173 samples, 0.14%)</title><rect x="57.3324%" y="773" width="0.1402%" height="15" fill="rgb(225,57,24)" fg:x="70743" fg:w="173"/><text x="57.5824%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (166 samples, 0.13%)</title><rect x="57.3381%" y="757" width="0.1345%" height="15" fill="rgb(208,169,48)" fg:x="70750" fg:w="166"/><text x="57.5881%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (156 samples, 0.13%)</title><rect x="57.3462%" y="741" width="0.1264%" height="15" fill="rgb(244,218,51)" fg:x="70760" fg:w="156"/><text x="57.5962%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (156 samples, 0.13%)</title><rect x="57.3462%" y="725" width="0.1264%" height="15" fill="rgb(214,148,10)" fg:x="70760" fg:w="156"/><text x="57.5962%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (156 samples, 0.13%)</title><rect x="57.3462%" y="709" width="0.1264%" height="15" fill="rgb(225,174,27)" fg:x="70760" fg:w="156"/><text x="57.5962%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (156 samples, 0.13%)</title><rect x="57.3462%" y="693" width="0.1264%" height="15" fill="rgb(230,96,26)" fg:x="70760" fg:w="156"/><text x="57.5962%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (41 samples, 0.03%)</title><rect x="57.4394%" y="677" width="0.0332%" height="15" fill="rgb(232,10,30)" fg:x="70875" fg:w="41"/><text x="57.6894%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.03%)</title><rect x="57.4394%" y="661" width="0.0332%" height="15" fill="rgb(222,8,50)" fg:x="70875" fg:w="41"/><text x="57.6894%" y="671.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.02%)</title><rect x="57.4491%" y="645" width="0.0235%" height="15" fill="rgb(213,81,27)" fg:x="70887" fg:w="29"/><text x="57.6991%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.02%)</title><rect x="57.5431%" y="437" width="0.0243%" height="15" fill="rgb(245,50,10)" fg:x="71003" fg:w="30"/><text x="57.7931%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (86 samples, 0.07%)</title><rect x="57.4985%" y="581" width="0.0697%" height="15" fill="rgb(216,100,18)" fg:x="70948" fg:w="86"/><text x="57.7485%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (86 samples, 0.07%)</title><rect x="57.4985%" y="565" width="0.0697%" height="15" fill="rgb(236,147,54)" fg:x="70948" fg:w="86"/><text x="57.7485%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (86 samples, 0.07%)</title><rect x="57.4985%" y="549" width="0.0697%" height="15" fill="rgb(205,143,26)" fg:x="70948" fg:w="86"/><text x="57.7485%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (79 samples, 0.06%)</title><rect x="57.5042%" y="533" width="0.0640%" height="15" fill="rgb(236,26,9)" fg:x="70955" fg:w="79"/><text x="57.7542%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (79 samples, 0.06%)</title><rect x="57.5042%" y="517" width="0.0640%" height="15" fill="rgb(221,165,53)" fg:x="70955" fg:w="79"/><text x="57.7542%" y="527.50"></text></g><g><title>alloc::alloc::alloc (79 samples, 0.06%)</title><rect x="57.5042%" y="501" width="0.0640%" height="15" fill="rgb(214,110,17)" fg:x="70955" fg:w="79"/><text x="57.7542%" y="511.50"></text></g><g><title>__rg_alloc (79 samples, 0.06%)</title><rect x="57.5042%" y="485" width="0.0640%" height="15" fill="rgb(237,197,12)" fg:x="70955" fg:w="79"/><text x="57.7542%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (79 samples, 0.06%)</title><rect x="57.5042%" y="469" width="0.0640%" height="15" fill="rgb(205,84,17)" fg:x="70955" fg:w="79"/><text x="57.7542%" y="479.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.06%)</title><rect x="57.5107%" y="453" width="0.0575%" height="15" fill="rgb(237,18,45)" fg:x="70963" fg:w="71"/><text x="57.7607%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (115 samples, 0.09%)</title><rect x="57.4969%" y="693" width="0.0932%" height="15" fill="rgb(221,87,14)" fg:x="70946" fg:w="115"/><text x="57.7469%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (115 samples, 0.09%)</title><rect x="57.4969%" y="677" width="0.0932%" height="15" fill="rgb(238,186,15)" fg:x="70946" fg:w="115"/><text x="57.7469%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (115 samples, 0.09%)</title><rect x="57.4969%" y="661" width="0.0932%" height="15" fill="rgb(208,115,11)" fg:x="70946" fg:w="115"/><text x="57.7469%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (113 samples, 0.09%)</title><rect x="57.4985%" y="645" width="0.0916%" height="15" fill="rgb(254,175,0)" fg:x="70948" fg:w="113"/><text x="57.7485%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (113 samples, 0.09%)</title><rect x="57.4985%" y="629" width="0.0916%" height="15" fill="rgb(227,24,42)" fg:x="70948" fg:w="113"/><text x="57.7485%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (113 samples, 0.09%)</title><rect x="57.4985%" y="613" width="0.0916%" height="15" fill="rgb(223,211,37)" fg:x="70948" fg:w="113"/><text x="57.7485%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (113 samples, 0.09%)</title><rect x="57.4985%" y="597" width="0.0916%" height="15" fill="rgb(235,49,27)" fg:x="70948" fg:w="113"/><text x="57.7485%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27 samples, 0.02%)</title><rect x="57.5682%" y="581" width="0.0219%" height="15" fill="rgb(254,97,51)" fg:x="71034" fg:w="27"/><text x="57.8182%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.02%)</title><rect x="57.5682%" y="565" width="0.0219%" height="15" fill="rgb(249,51,40)" fg:x="71034" fg:w="27"/><text x="57.8182%" y="575.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="57.5698%" y="549" width="0.0203%" height="15" fill="rgb(210,128,45)" fg:x="71036" fg:w="25"/><text x="57.8198%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="57.5901%" y="693" width="0.0138%" height="15" fill="rgb(224,137,50)" fg:x="71061" fg:w="17"/><text x="57.8401%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.05%)</title><rect x="57.6152%" y="645" width="0.0543%" height="15" fill="rgb(242,15,9)" fg:x="71092" fg:w="67"/><text x="57.8652%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.05%)</title><rect x="57.6152%" y="629" width="0.0543%" height="15" fill="rgb(233,187,41)" fg:x="71092" fg:w="67"/><text x="57.8652%" y="639.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.05%)</title><rect x="57.6160%" y="613" width="0.0535%" height="15" fill="rgb(227,2,29)" fg:x="71093" fg:w="66"/><text x="57.8660%" y="623.50"></text></g><g><title>__rg_alloc (66 samples, 0.05%)</title><rect x="57.6160%" y="597" width="0.0535%" height="15" fill="rgb(222,70,3)" fg:x="71093" fg:w="66"/><text x="57.8660%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (66 samples, 0.05%)</title><rect x="57.6160%" y="581" width="0.0535%" height="15" fill="rgb(213,11,42)" fg:x="71093" fg:w="66"/><text x="57.8660%" y="591.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.05%)</title><rect x="57.6160%" y="565" width="0.0535%" height="15" fill="rgb(225,150,9)" fg:x="71093" fg:w="66"/><text x="57.8660%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="57.6476%" y="549" width="0.0219%" height="15" fill="rgb(230,162,45)" fg:x="71132" fg:w="27"/><text x="57.8976%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (81 samples, 0.07%)</title><rect x="57.6096%" y="693" width="0.0656%" height="15" fill="rgb(222,14,52)" fg:x="71085" fg:w="81"/><text x="57.8596%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (74 samples, 0.06%)</title><rect x="57.6152%" y="677" width="0.0600%" height="15" fill="rgb(254,198,14)" fg:x="71092" fg:w="74"/><text x="57.8652%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (74 samples, 0.06%)</title><rect x="57.6152%" y="661" width="0.0600%" height="15" fill="rgb(220,217,30)" fg:x="71092" fg:w="74"/><text x="57.8652%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (986 samples, 0.80%)</title><rect x="56.8891%" y="805" width="0.7991%" height="15" fill="rgb(215,146,41)" fg:x="70196" fg:w="986"/><text x="57.1391%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (266 samples, 0.22%)</title><rect x="57.4726%" y="789" width="0.2156%" height="15" fill="rgb(217,27,36)" fg:x="70916" fg:w="266"/><text x="57.7226%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (240 samples, 0.19%)</title><rect x="57.4937%" y="773" width="0.1945%" height="15" fill="rgb(219,218,39)" fg:x="70942" fg:w="240"/><text x="57.7437%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (240 samples, 0.19%)</title><rect x="57.4937%" y="757" width="0.1945%" height="15" fill="rgb(219,4,42)" fg:x="70942" fg:w="240"/><text x="57.7437%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (240 samples, 0.19%)</title><rect x="57.4937%" y="741" width="0.1945%" height="15" fill="rgb(249,119,36)" fg:x="70942" fg:w="240"/><text x="57.7437%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (240 samples, 0.19%)</title><rect x="57.4937%" y="725" width="0.1945%" height="15" fill="rgb(209,23,33)" fg:x="70942" fg:w="240"/><text x="57.7437%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (240 samples, 0.19%)</title><rect x="57.4937%" y="709" width="0.1945%" height="15" fill="rgb(211,10,0)" fg:x="70942" fg:w="240"/><text x="57.7437%" y="719.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="57.6882%" y="805" width="0.0867%" height="15" fill="rgb(208,99,37)" fg:x="71182" fg:w="107"/><text x="57.9382%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (285 samples, 0.23%)</title><rect x="57.7781%" y="805" width="0.2310%" height="15" fill="rgb(213,132,31)" fg:x="71293" fg:w="285"/><text x="58.0281%" y="815.50"></text></g><g><title>core::ptr::write (273 samples, 0.22%)</title><rect x="57.7878%" y="789" width="0.2212%" height="15" fill="rgb(243,129,40)" fg:x="71305" fg:w="273"/><text x="58.0378%" y="799.50"></text></g><g><title>[libc-2.31.so] (272 samples, 0.22%)</title><rect x="57.7887%" y="773" width="0.2204%" height="15" fill="rgb(210,66,33)" fg:x="71306" fg:w="272"/><text x="58.0387%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (928 samples, 0.75%)</title><rect x="58.0699%" y="645" width="0.7521%" height="15" fill="rgb(209,189,4)" fg:x="71653" fg:w="928"/><text x="58.3199%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,010 samples, 0.82%)</title><rect x="58.0180%" y="741" width="0.8185%" height="15" fill="rgb(214,107,37)" fg:x="71589" fg:w="1010"/><text x="58.2680%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,010 samples, 0.82%)</title><rect x="58.0180%" y="725" width="0.8185%" height="15" fill="rgb(245,88,54)" fg:x="71589" fg:w="1010"/><text x="58.2680%" y="735.50"></text></g><g><title>alloc::alloc::alloc (1,001 samples, 0.81%)</title><rect x="58.0253%" y="709" width="0.8112%" height="15" fill="rgb(205,146,20)" fg:x="71598" fg:w="1001"/><text x="58.2753%" y="719.50"></text></g><g><title>__rg_alloc (1,001 samples, 0.81%)</title><rect x="58.0253%" y="693" width="0.8112%" height="15" fill="rgb(220,161,25)" fg:x="71598" fg:w="1001"/><text x="58.2753%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,001 samples, 0.81%)</title><rect x="58.0253%" y="677" width="0.8112%" height="15" fill="rgb(215,152,15)" fg:x="71598" fg:w="1001"/><text x="58.2753%" y="687.50"></text></g><g><title>sn_rust_alloc (1,001 samples, 0.81%)</title><rect x="58.0253%" y="661" width="0.8112%" height="15" fill="rgb(233,192,44)" fg:x="71598" fg:w="1001"/><text x="58.2753%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="58.8220%" y="645" width="0.0146%" height="15" fill="rgb(240,170,46)" fg:x="72581" fg:w="18"/><text x="59.0720%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,026 samples, 0.83%)</title><rect x="58.0091%" y="805" width="0.8315%" height="15" fill="rgb(207,104,33)" fg:x="71578" fg:w="1026"/><text x="58.2591%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,026 samples, 0.83%)</title><rect x="58.0091%" y="789" width="0.8315%" height="15" fill="rgb(219,21,39)" fg:x="71578" fg:w="1026"/><text x="58.2591%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,021 samples, 0.83%)</title><rect x="58.0131%" y="773" width="0.8275%" height="15" fill="rgb(214,133,29)" fg:x="71583" fg:w="1021"/><text x="58.2631%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,021 samples, 0.83%)</title><rect x="58.0131%" y="757" width="0.8275%" height="15" fill="rgb(226,93,6)" fg:x="71583" fg:w="1021"/><text x="58.2631%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (50 samples, 0.04%)</title><rect x="58.8479%" y="773" width="0.0405%" height="15" fill="rgb(252,222,34)" fg:x="72613" fg:w="50"/><text x="59.0979%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="58.8479%" y="757" width="0.0405%" height="15" fill="rgb(252,92,48)" fg:x="72613" fg:w="50"/><text x="59.0979%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="58.8519%" y="741" width="0.0365%" height="15" fill="rgb(245,223,24)" fg:x="72618" fg:w="45"/><text x="59.1019%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="58.8519%" y="725" width="0.0365%" height="15" fill="rgb(205,176,3)" fg:x="72618" fg:w="45"/><text x="59.1019%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45 samples, 0.04%)</title><rect x="58.8519%" y="709" width="0.0365%" height="15" fill="rgb(235,151,15)" fg:x="72618" fg:w="45"/><text x="59.1019%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.04%)</title><rect x="58.8519%" y="693" width="0.0365%" height="15" fill="rgb(237,209,11)" fg:x="72618" fg:w="45"/><text x="59.1019%" y="703.50"></text></g><g><title>__rg_dealloc (45 samples, 0.04%)</title><rect x="58.8519%" y="677" width="0.0365%" height="15" fill="rgb(243,227,24)" fg:x="72618" fg:w="45"/><text x="59.1019%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (45 samples, 0.04%)</title><rect x="58.8519%" y="661" width="0.0365%" height="15" fill="rgb(239,193,16)" fg:x="72618" fg:w="45"/><text x="59.1019%" y="671.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.03%)</title><rect x="58.8544%" y="645" width="0.0340%" height="15" fill="rgb(231,27,9)" fg:x="72621" fg:w="42"/><text x="59.1044%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (61 samples, 0.05%)</title><rect x="58.8406%" y="805" width="0.0494%" height="15" fill="rgb(219,169,10)" fg:x="72604" fg:w="61"/><text x="59.0906%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.05%)</title><rect x="58.8406%" y="789" width="0.0494%" height="15" fill="rgb(244,229,43)" fg:x="72604" fg:w="61"/><text x="59.0906%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,561 samples, 5.32%)</title><rect x="53.5817%" y="901" width="5.3172%" height="15" fill="rgb(254,38,20)" fg:x="66115" fg:w="6561"/><text x="53.8317%" y="911.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,561 samples, 5.32%)</title><rect x="53.5817%" y="885" width="5.3172%" height="15" fill="rgb(250,47,30)" fg:x="66115" fg:w="6561"/><text x="53.8317%" y="895.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,561 samples, 5.32%)</title><rect x="53.5817%" y="869" width="5.3172%" height="15" fill="rgb(224,124,36)" fg:x="66115" fg:w="6561"/><text x="53.8317%" y="879.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,561 samples, 5.32%)</title><rect x="53.5817%" y="853" width="5.3172%" height="15" fill="rgb(246,68,51)" fg:x="66115" fg:w="6561"/><text x="53.8317%" y="863.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,561 samples, 5.32%)</title><rect x="53.5817%" y="837" width="5.3172%" height="15" fill="rgb(253,43,49)" fg:x="66115" fg:w="6561"/><text x="53.8317%" y="847.50">tremor_..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,313 samples, 2.68%)</title><rect x="56.2140%" y="821" width="2.6850%" height="15" fill="rgb(219,54,36)" fg:x="69363" fg:w="3313"/><text x="56.4640%" y="831.50">tr..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (98 samples, 0.08%)</title><rect x="59.0116%" y="837" width="0.0794%" height="15" fill="rgb(227,133,34)" fg:x="72815" fg:w="98"/><text x="59.2616%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (70 samples, 0.06%)</title><rect x="59.0343%" y="821" width="0.0567%" height="15" fill="rgb(247,227,15)" fg:x="72843" fg:w="70"/><text x="59.2843%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.01%)</title><rect x="59.0797%" y="805" width="0.0113%" height="15" fill="rgb(229,96,14)" fg:x="72899" fg:w="14"/><text x="59.3297%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (767 samples, 0.62%)</title><rect x="58.9143%" y="853" width="0.6216%" height="15" fill="rgb(220,79,17)" fg:x="72695" fg:w="767"/><text x="59.1643%" y="863.50"></text></g><g><title>[libc-2.31.so] (549 samples, 0.44%)</title><rect x="59.0910%" y="837" width="0.4449%" height="15" fill="rgb(205,131,53)" fg:x="72913" fg:w="549"/><text x="59.3410%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,141 samples, 0.92%)</title><rect x="58.8989%" y="885" width="0.9247%" height="15" fill="rgb(209,50,29)" fg:x="72676" fg:w="1141"/><text x="59.1489%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,141 samples, 0.92%)</title><rect x="58.8989%" y="869" width="0.9247%" height="15" fill="rgb(245,86,46)" fg:x="72676" fg:w="1141"/><text x="59.1489%" y="879.50"></text></g><g><title>[libc-2.31.so] (355 samples, 0.29%)</title><rect x="59.5359%" y="853" width="0.2877%" height="15" fill="rgb(235,66,46)" fg:x="73462" fg:w="355"/><text x="59.7859%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (411 samples, 0.33%)</title><rect x="59.8237%" y="853" width="0.3331%" height="15" fill="rgb(232,148,31)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (411 samples, 0.33%)</title><rect x="59.8237%" y="837" width="0.3331%" height="15" fill="rgb(217,149,8)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (411 samples, 0.33%)</title><rect x="59.8237%" y="821" width="0.3331%" height="15" fill="rgb(209,183,11)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (411 samples, 0.33%)</title><rect x="59.8237%" y="805" width="0.3331%" height="15" fill="rgb(208,55,20)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (411 samples, 0.33%)</title><rect x="59.8237%" y="789" width="0.3331%" height="15" fill="rgb(218,39,14)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (411 samples, 0.33%)</title><rect x="59.8237%" y="773" width="0.3331%" height="15" fill="rgb(216,169,33)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (411 samples, 0.33%)</title><rect x="59.8237%" y="757" width="0.3331%" height="15" fill="rgb(233,80,24)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (411 samples, 0.33%)</title><rect x="59.8237%" y="741" width="0.3331%" height="15" fill="rgb(213,179,31)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (411 samples, 0.33%)</title><rect x="59.8237%" y="725" width="0.3331%" height="15" fill="rgb(209,19,5)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (411 samples, 0.33%)</title><rect x="59.8237%" y="709" width="0.3331%" height="15" fill="rgb(219,18,35)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (411 samples, 0.33%)</title><rect x="59.8237%" y="693" width="0.3331%" height="15" fill="rgb(209,169,16)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (411 samples, 0.33%)</title><rect x="59.8237%" y="677" width="0.3331%" height="15" fill="rgb(245,90,51)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (411 samples, 0.33%)</title><rect x="59.8237%" y="661" width="0.3331%" height="15" fill="rgb(220,99,45)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="671.50"></text></g><g><title>alloc::alloc::alloc (411 samples, 0.33%)</title><rect x="59.8237%" y="645" width="0.3331%" height="15" fill="rgb(249,89,25)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="655.50"></text></g><g><title>__rg_alloc (411 samples, 0.33%)</title><rect x="59.8237%" y="629" width="0.3331%" height="15" fill="rgb(239,193,0)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (411 samples, 0.33%)</title><rect x="59.8237%" y="613" width="0.3331%" height="15" fill="rgb(231,126,1)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="623.50"></text></g><g><title>sn_rust_alloc (411 samples, 0.33%)</title><rect x="59.8237%" y="597" width="0.3331%" height="15" fill="rgb(243,166,3)" fg:x="73817" fg:w="411"/><text x="60.0737%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="60.1381%" y="581" width="0.0186%" height="15" fill="rgb(223,22,34)" fg:x="74205" fg:w="23"/><text x="60.3881%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (41 samples, 0.03%)</title><rect x="60.1567%" y="853" width="0.0332%" height="15" fill="rgb(251,52,51)" fg:x="74228" fg:w="41"/><text x="60.4067%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="60.1567%" y="837" width="0.0332%" height="15" fill="rgb(221,165,28)" fg:x="74228" fg:w="41"/><text x="60.4067%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (231 samples, 0.19%)</title><rect x="60.2191%" y="821" width="0.1872%" height="15" fill="rgb(218,121,47)" fg:x="74305" fg:w="231"/><text x="60.4691%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (231 samples, 0.19%)</title><rect x="60.2191%" y="805" width="0.1872%" height="15" fill="rgb(209,120,9)" fg:x="74305" fg:w="231"/><text x="60.4691%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (231 samples, 0.19%)</title><rect x="60.2191%" y="789" width="0.1872%" height="15" fill="rgb(236,68,12)" fg:x="74305" fg:w="231"/><text x="60.4691%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (231 samples, 0.19%)</title><rect x="60.2191%" y="773" width="0.1872%" height="15" fill="rgb(225,194,26)" fg:x="74305" fg:w="231"/><text x="60.4691%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (231 samples, 0.19%)</title><rect x="60.2191%" y="757" width="0.1872%" height="15" fill="rgb(231,84,39)" fg:x="74305" fg:w="231"/><text x="60.4691%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (231 samples, 0.19%)</title><rect x="60.2191%" y="741" width="0.1872%" height="15" fill="rgb(210,11,45)" fg:x="74305" fg:w="231"/><text x="60.4691%" y="751.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.13%)</title><rect x="60.2759%" y="725" width="0.1305%" height="15" fill="rgb(224,54,52)" fg:x="74375" fg:w="161"/><text x="60.5259%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,610 samples, 7.79%)</title><rect x="52.6254%" y="1077" width="7.7883%" height="15" fill="rgb(238,102,14)" fg:x="64935" fg:w="9610"/><text x="52.8754%" y="1087.50">async_task:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,606 samples, 7.79%)</title><rect x="52.6286%" y="1061" width="7.7850%" height="15" fill="rgb(243,160,52)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="1071.50">&lt;core::pin:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,606 samples, 7.79%)</title><rect x="52.6286%" y="1045" width="7.7850%" height="15" fill="rgb(216,114,19)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="1055.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,606 samples, 7.79%)</title><rect x="52.6286%" y="1029" width="7.7850%" height="15" fill="rgb(244,166,37)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="1039.50">async_execu..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,606 samples, 7.79%)</title><rect x="52.6286%" y="1013" width="7.7850%" height="15" fill="rgb(246,29,44)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="1023.50">&lt;async_std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,606 samples, 7.79%)</title><rect x="52.6286%" y="997" width="7.7850%" height="15" fill="rgb(215,56,53)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="1007.50">async_std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,606 samples, 7.79%)</title><rect x="52.6286%" y="981" width="7.7850%" height="15" fill="rgb(217,60,2)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="991.50">std::thread..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,606 samples, 7.79%)</title><rect x="52.6286%" y="965" width="7.7850%" height="15" fill="rgb(207,26,24)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="975.50">std::thread..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,606 samples, 7.79%)</title><rect x="52.6286%" y="949" width="7.7850%" height="15" fill="rgb(252,210,15)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="959.50">async_std::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,606 samples, 7.79%)</title><rect x="52.6286%" y="933" width="7.7850%" height="15" fill="rgb(253,209,26)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="943.50">&lt;async_std:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,606 samples, 7.79%)</title><rect x="52.6286%" y="917" width="7.7850%" height="15" fill="rgb(238,170,14)" fg:x="64939" fg:w="9606"/><text x="52.8786%" y="927.50">&lt;core::futu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,869 samples, 1.51%)</title><rect x="58.8989%" y="901" width="1.5147%" height="15" fill="rgb(216,178,15)" fg:x="72676" fg:w="1869"/><text x="59.1489%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (728 samples, 0.59%)</title><rect x="59.8237%" y="885" width="0.5900%" height="15" fill="rgb(250,197,2)" fg:x="73817" fg:w="728"/><text x="60.0737%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (728 samples, 0.59%)</title><rect x="59.8237%" y="869" width="0.5900%" height="15" fill="rgb(212,70,42)" fg:x="73817" fg:w="728"/><text x="60.0737%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (268 samples, 0.22%)</title><rect x="60.1964%" y="853" width="0.2172%" height="15" fill="rgb(227,213,9)" fg:x="74277" fg:w="268"/><text x="60.4464%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (257 samples, 0.21%)</title><rect x="60.2054%" y="837" width="0.2083%" height="15" fill="rgb(245,99,25)" fg:x="74288" fg:w="257"/><text x="60.4554%" y="847.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (14 samples, 0.01%)</title><rect x="60.4136%" y="1077" width="0.0113%" height="15" fill="rgb(250,82,29)" fg:x="74545" fg:w="14"/><text x="60.6636%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (18 samples, 0.01%)</title><rect x="60.4404%" y="1077" width="0.0146%" height="15" fill="rgb(241,226,54)" fg:x="74578" fg:w="18"/><text x="60.6904%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (18 samples, 0.01%)</title><rect x="60.4550%" y="1077" width="0.0146%" height="15" fill="rgb(221,99,41)" fg:x="74596" fg:w="18"/><text x="60.7050%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.01%)</title><rect x="60.4704%" y="1077" width="0.0122%" height="15" fill="rgb(213,90,21)" fg:x="74615" fg:w="15"/><text x="60.7204%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (141 samples, 0.11%)</title><rect x="60.5125%" y="373" width="0.1143%" height="15" fill="rgb(205,208,24)" fg:x="74667" fg:w="141"/><text x="60.7625%" y="383.50"></text></g><g><title>[libc-2.31.so] (209 samples, 0.17%)</title><rect x="60.6268%" y="357" width="0.1694%" height="15" fill="rgb(246,31,12)" fg:x="74808" fg:w="209"/><text x="60.8768%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (367 samples, 0.30%)</title><rect x="60.6268%" y="373" width="0.2974%" height="15" fill="rgb(213,154,6)" fg:x="74808" fg:w="367"/><text x="60.8768%" y="383.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (158 samples, 0.13%)</title><rect x="60.7962%" y="357" width="0.1280%" height="15" fill="rgb(222,163,29)" fg:x="75017" fg:w="158"/><text x="61.0462%" y="367.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.12%)</title><rect x="60.7994%" y="341" width="0.1248%" height="15" fill="rgb(227,201,8)" fg:x="75021" fg:w="154"/><text x="61.0494%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (175 samples, 0.14%)</title><rect x="60.9283%" y="341" width="0.1418%" height="15" fill="rgb(233,9,32)" fg:x="75180" fg:w="175"/><text x="61.1783%" y="351.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (174 samples, 0.14%)</title><rect x="60.9291%" y="325" width="0.1410%" height="15" fill="rgb(217,54,24)" fg:x="75181" fg:w="174"/><text x="61.1791%" y="335.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (174 samples, 0.14%)</title><rect x="60.9291%" y="309" width="0.1410%" height="15" fill="rgb(235,192,0)" fg:x="75181" fg:w="174"/><text x="61.1791%" y="319.50"></text></g><g><title>[libc-2.31.so] (164 samples, 0.13%)</title><rect x="60.9372%" y="293" width="0.1329%" height="15" fill="rgb(235,45,9)" fg:x="75191" fg:w="164"/><text x="61.1872%" y="303.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (17 samples, 0.01%)</title><rect x="61.0701%" y="341" width="0.0138%" height="15" fill="rgb(246,42,40)" fg:x="75355" fg:w="17"/><text x="61.3201%" y="351.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (15 samples, 0.01%)</title><rect x="61.0717%" y="325" width="0.0122%" height="15" fill="rgb(248,111,24)" fg:x="75357" fg:w="15"/><text x="61.3217%" y="335.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (386 samples, 0.31%)</title><rect x="60.9242%" y="373" width="0.3128%" height="15" fill="rgb(249,65,22)" fg:x="75175" fg:w="386"/><text x="61.1742%" y="383.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (386 samples, 0.31%)</title><rect x="60.9242%" y="357" width="0.3128%" height="15" fill="rgb(238,111,51)" fg:x="75175" fg:w="386"/><text x="61.1742%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (189 samples, 0.15%)</title><rect x="61.0839%" y="341" width="0.1532%" height="15" fill="rgb(250,118,22)" fg:x="75372" fg:w="189"/><text x="61.3339%" y="351.50"></text></g><g><title>[libc-2.31.so] (189 samples, 0.15%)</title><rect x="61.0839%" y="325" width="0.1532%" height="15" fill="rgb(234,84,26)" fg:x="75372" fg:w="189"/><text x="61.3339%" y="335.50"></text></g><g><title>[libc-2.31.so] (296 samples, 0.24%)</title><rect x="61.2370%" y="373" width="0.2399%" height="15" fill="rgb(243,172,12)" fg:x="75561" fg:w="296"/><text x="61.4870%" y="383.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (122 samples, 0.10%)</title><rect x="61.4769%" y="373" width="0.0989%" height="15" fill="rgb(236,150,49)" fg:x="75857" fg:w="122"/><text x="61.7269%" y="383.50"></text></g><g><title>[libc-2.31.so] (108 samples, 0.09%)</title><rect x="61.4883%" y="357" width="0.0875%" height="15" fill="rgb(225,197,26)" fg:x="75871" fg:w="108"/><text x="61.7383%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (205 samples, 0.17%)</title><rect x="61.5758%" y="373" width="0.1661%" height="15" fill="rgb(214,17,42)" fg:x="75979" fg:w="205"/><text x="61.8258%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (205 samples, 0.17%)</title><rect x="61.5758%" y="357" width="0.1661%" height="15" fill="rgb(224,165,40)" fg:x="75979" fg:w="205"/><text x="61.8258%" y="367.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (205 samples, 0.17%)</title><rect x="61.5758%" y="341" width="0.1661%" height="15" fill="rgb(246,100,4)" fg:x="75979" fg:w="205"/><text x="61.8258%" y="351.50"></text></g><g><title>sn_rust_dealloc (195 samples, 0.16%)</title><rect x="61.5839%" y="325" width="0.1580%" height="15" fill="rgb(222,103,0)" fg:x="75989" fg:w="195"/><text x="61.8339%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="1077" width="1.2675%" height="15" fill="rgb(227,189,26)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="1087.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="1061" width="1.2675%" height="15" fill="rgb(214,202,17)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (1,564 samples, 1.27%)</title><rect x="60.4825%" y="1045" width="1.2675%" height="15" fill="rgb(229,111,3)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="1055.50"></text></g><g><title>std::panicking::try (1,564 samples, 1.27%)</title><rect x="60.4825%" y="1029" width="1.2675%" height="15" fill="rgb(229,172,15)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (1,564 samples, 1.27%)</title><rect x="60.4825%" y="1013" width="1.2675%" height="15" fill="rgb(230,224,35)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="1023.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,564 samples, 1.27%)</title><rect x="60.4825%" y="997" width="1.2675%" height="15" fill="rgb(251,141,6)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="981" width="1.2675%" height="15" fill="rgb(225,208,6)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="991.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,564 samples, 1.27%)</title><rect x="60.4825%" y="965" width="1.2675%" height="15" fill="rgb(246,181,16)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,564 samples, 1.27%)</title><rect x="60.4825%" y="949" width="1.2675%" height="15" fill="rgb(227,129,36)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,564 samples, 1.27%)</title><rect x="60.4825%" y="933" width="1.2675%" height="15" fill="rgb(248,117,24)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="943.50"></text></g><g><title>std::panic::catch_unwind (1,564 samples, 1.27%)</title><rect x="60.4825%" y="917" width="1.2675%" height="15" fill="rgb(214,185,35)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="927.50"></text></g><g><title>std::panicking::try (1,564 samples, 1.27%)</title><rect x="60.4825%" y="901" width="1.2675%" height="15" fill="rgb(236,150,34)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1,564 samples, 1.27%)</title><rect x="60.4825%" y="885" width="1.2675%" height="15" fill="rgb(243,228,27)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="895.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="869" width="1.2675%" height="15" fill="rgb(245,77,44)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,564 samples, 1.27%)</title><rect x="60.4825%" y="853" width="1.2675%" height="15" fill="rgb(235,214,42)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,564 samples, 1.27%)</title><rect x="60.4825%" y="837" width="1.2675%" height="15" fill="rgb(221,74,3)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="847.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="821" width="1.2675%" height="15" fill="rgb(206,121,29)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="831.50"></text></g><g><title>async_global_executor::reactor::block_on (1,564 samples, 1.27%)</title><rect x="60.4825%" y="805" width="1.2675%" height="15" fill="rgb(249,131,53)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="815.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="789" width="1.2675%" height="15" fill="rgb(236,170,29)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="799.50"></text></g><g><title>async_io::driver::block_on (1,564 samples, 1.27%)</title><rect x="60.4825%" y="773" width="1.2675%" height="15" fill="rgb(247,96,15)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="783.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="757" width="1.2675%" height="15" fill="rgb(211,210,7)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="741" width="1.2675%" height="15" fill="rgb(240,88,50)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="751.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="725" width="1.2675%" height="15" fill="rgb(209,229,26)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="735.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="709" width="1.2675%" height="15" fill="rgb(210,68,23)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="693" width="1.2675%" height="15" fill="rgb(229,180,13)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="677" width="1.2675%" height="15" fill="rgb(236,53,44)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="687.50"></text></g><g><title>async_task::runnable::Runnable::run (1,564 samples, 1.27%)</title><rect x="60.4825%" y="661" width="1.2675%" height="15" fill="rgb(244,214,29)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,564 samples, 1.27%)</title><rect x="60.4825%" y="645" width="1.2675%" height="15" fill="rgb(220,75,29)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="655.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="629" width="1.2675%" height="15" fill="rgb(214,183,37)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="613" width="1.2675%" height="15" fill="rgb(239,117,29)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="623.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="597" width="1.2675%" height="15" fill="rgb(237,171,35)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="607.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="581" width="1.2675%" height="15" fill="rgb(229,178,53)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="591.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,564 samples, 1.27%)</title><rect x="60.4825%" y="565" width="1.2675%" height="15" fill="rgb(210,102,19)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,564 samples, 1.27%)</title><rect x="60.4825%" y="549" width="1.2675%" height="15" fill="rgb(235,127,22)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,564 samples, 1.27%)</title><rect x="60.4825%" y="533" width="1.2675%" height="15" fill="rgb(244,31,31)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="517" width="1.2675%" height="15" fill="rgb(231,43,21)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="501" width="1.2675%" height="15" fill="rgb(217,131,35)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="485" width="1.2675%" height="15" fill="rgb(221,149,4)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,564 samples, 1.27%)</title><rect x="60.4825%" y="469" width="1.2675%" height="15" fill="rgb(232,170,28)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="479.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="453" width="1.2675%" height="15" fill="rgb(238,56,10)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="463.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,564 samples, 1.27%)</title><rect x="60.4825%" y="437" width="1.2675%" height="15" fill="rgb(235,196,14)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="421" width="1.2675%" height="15" fill="rgb(216,45,48)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,564 samples, 1.27%)</title><rect x="60.4825%" y="405" width="1.2675%" height="15" fill="rgb(238,213,17)" fg:x="74630" fg:w="1564"/><text x="60.7325%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,558 samples, 1.26%)</title><rect x="60.4874%" y="389" width="1.2627%" height="15" fill="rgb(212,13,2)" fg:x="74636" fg:w="1558"/><text x="60.7374%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="61.7646%" y="1077" width="0.0105%" height="15" fill="rgb(240,114,20)" fg:x="76212" fg:w="13"/><text x="62.0146%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="61.7752%" y="1077" width="0.0162%" height="15" fill="rgb(228,41,40)" fg:x="76225" fg:w="20"/><text x="62.0252%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (21 samples, 0.02%)</title><rect x="61.7914%" y="1077" width="0.0170%" height="15" fill="rgb(244,132,35)" fg:x="76245" fg:w="21"/><text x="62.0414%" y="1087.50"></text></g><g><title>event_listener::Event::notify (69 samples, 0.06%)</title><rect x="61.8319%" y="1077" width="0.0559%" height="15" fill="rgb(253,189,4)" fg:x="76295" fg:w="69"/><text x="62.0819%" y="1087.50"></text></g><g><title>event_listener::full_fence (33 samples, 0.03%)</title><rect x="61.8611%" y="1061" width="0.0267%" height="15" fill="rgb(224,37,19)" fg:x="76331" fg:w="33"/><text x="62.1111%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (26 samples, 0.02%)</title><rect x="61.8903%" y="1077" width="0.0211%" height="15" fill="rgb(235,223,18)" fg:x="76367" fg:w="26"/><text x="62.1403%" y="1087.50"></text></g><g><title>parking::Inner::park (30 samples, 0.02%)</title><rect x="61.9113%" y="1077" width="0.0243%" height="15" fill="rgb(235,163,25)" fg:x="76393" fg:w="30"/><text x="62.1613%" y="1087.50"></text></g><g><title>polling::epoll::Poller::wait (33 samples, 0.03%)</title><rect x="61.9405%" y="1077" width="0.0267%" height="15" fill="rgb(217,145,28)" fg:x="76429" fg:w="33"/><text x="62.1905%" y="1087.50"></text></g><g><title>sn_rust_alloc (133 samples, 0.11%)</title><rect x="61.9672%" y="1077" width="0.1078%" height="15" fill="rgb(223,223,32)" fg:x="76462" fg:w="133"/><text x="62.2172%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (64 samples, 0.05%)</title><rect x="62.0920%" y="1077" width="0.0519%" height="15" fill="rgb(227,189,39)" fg:x="76616" fg:w="64"/><text x="62.3420%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (161 samples, 0.13%)</title><rect x="62.2169%" y="645" width="0.1305%" height="15" fill="rgb(248,10,22)" fg:x="76770" fg:w="161"/><text x="62.4669%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (231 samples, 0.19%)</title><rect x="62.1617%" y="805" width="0.1872%" height="15" fill="rgb(248,46,39)" fg:x="76702" fg:w="231"/><text x="62.4117%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (231 samples, 0.19%)</title><rect x="62.1617%" y="789" width="0.1872%" height="15" fill="rgb(248,113,48)" fg:x="76702" fg:w="231"/><text x="62.4117%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (214 samples, 0.17%)</title><rect x="62.1755%" y="773" width="0.1734%" height="15" fill="rgb(245,16,25)" fg:x="76719" fg:w="214"/><text x="62.4255%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (207 samples, 0.17%)</title><rect x="62.1812%" y="757" width="0.1678%" height="15" fill="rgb(249,152,16)" fg:x="76726" fg:w="207"/><text x="62.4312%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (207 samples, 0.17%)</title><rect x="62.1812%" y="741" width="0.1678%" height="15" fill="rgb(250,16,1)" fg:x="76726" fg:w="207"/><text x="62.4312%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (207 samples, 0.17%)</title><rect x="62.1812%" y="725" width="0.1678%" height="15" fill="rgb(249,138,3)" fg:x="76726" fg:w="207"/><text x="62.4312%" y="735.50"></text></g><g><title>alloc::alloc::alloc (203 samples, 0.16%)</title><rect x="62.1844%" y="709" width="0.1645%" height="15" fill="rgb(227,71,41)" fg:x="76730" fg:w="203"/><text x="62.4344%" y="719.50"></text></g><g><title>__rg_alloc (203 samples, 0.16%)</title><rect x="62.1844%" y="693" width="0.1645%" height="15" fill="rgb(209,184,23)" fg:x="76730" fg:w="203"/><text x="62.4344%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (203 samples, 0.16%)</title><rect x="62.1844%" y="677" width="0.1645%" height="15" fill="rgb(223,215,31)" fg:x="76730" fg:w="203"/><text x="62.4344%" y="687.50"></text></g><g><title>sn_rust_alloc (203 samples, 0.16%)</title><rect x="62.1844%" y="661" width="0.1645%" height="15" fill="rgb(210,146,28)" fg:x="76730" fg:w="203"/><text x="62.4344%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (247 samples, 0.20%)</title><rect x="62.1528%" y="869" width="0.2002%" height="15" fill="rgb(209,183,41)" fg:x="76691" fg:w="247"/><text x="62.4028%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (247 samples, 0.20%)</title><rect x="62.1528%" y="853" width="0.2002%" height="15" fill="rgb(209,224,45)" fg:x="76691" fg:w="247"/><text x="62.4028%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (247 samples, 0.20%)</title><rect x="62.1528%" y="837" width="0.2002%" height="15" fill="rgb(224,209,51)" fg:x="76691" fg:w="247"/><text x="62.4028%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (247 samples, 0.20%)</title><rect x="62.1528%" y="821" width="0.2002%" height="15" fill="rgb(223,17,39)" fg:x="76691" fg:w="247"/><text x="62.4028%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (552 samples, 0.45%)</title><rect x="62.8992%" y="581" width="0.4474%" height="15" fill="rgb(234,204,37)" fg:x="77612" fg:w="552"/><text x="63.1492%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (1,104 samples, 0.89%)</title><rect x="62.4551%" y="741" width="0.8947%" height="15" fill="rgb(236,120,5)" fg:x="77064" fg:w="1104"/><text x="62.7051%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (1,104 samples, 0.89%)</title><rect x="62.4551%" y="725" width="0.8947%" height="15" fill="rgb(248,97,27)" fg:x="77064" fg:w="1104"/><text x="62.7051%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (650 samples, 0.53%)</title><rect x="62.8231%" y="709" width="0.5268%" height="15" fill="rgb(240,66,17)" fg:x="77518" fg:w="650"/><text x="63.0731%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (626 samples, 0.51%)</title><rect x="62.8425%" y="693" width="0.5073%" height="15" fill="rgb(210,79,3)" fg:x="77542" fg:w="626"/><text x="63.0925%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (625 samples, 0.51%)</title><rect x="62.8433%" y="677" width="0.5065%" height="15" fill="rgb(214,176,27)" fg:x="77543" fg:w="625"/><text x="63.0933%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (625 samples, 0.51%)</title><rect x="62.8433%" y="661" width="0.5065%" height="15" fill="rgb(235,185,3)" fg:x="77543" fg:w="625"/><text x="63.0933%" y="671.50"></text></g><g><title>alloc::alloc::alloc (625 samples, 0.51%)</title><rect x="62.8433%" y="645" width="0.5065%" height="15" fill="rgb(227,24,12)" fg:x="77543" fg:w="625"/><text x="63.0933%" y="655.50"></text></g><g><title>__rg_alloc (625 samples, 0.51%)</title><rect x="62.8433%" y="629" width="0.5065%" height="15" fill="rgb(252,169,48)" fg:x="77543" fg:w="625"/><text x="63.0933%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (625 samples, 0.51%)</title><rect x="62.8433%" y="613" width="0.5065%" height="15" fill="rgb(212,65,1)" fg:x="77543" fg:w="625"/><text x="63.0933%" y="623.50"></text></g><g><title>sn_rust_alloc (611 samples, 0.50%)</title><rect x="62.8547%" y="597" width="0.4952%" height="15" fill="rgb(242,39,24)" fg:x="77557" fg:w="611"/><text x="63.1047%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1,154 samples, 0.94%)</title><rect x="62.4357%" y="789" width="0.9352%" height="15" fill="rgb(249,32,23)" fg:x="77040" fg:w="1154"/><text x="62.6857%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (1,154 samples, 0.94%)</title><rect x="62.4357%" y="773" width="0.9352%" height="15" fill="rgb(251,195,23)" fg:x="77040" fg:w="1154"/><text x="62.6857%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,154 samples, 0.94%)</title><rect x="62.4357%" y="757" width="0.9352%" height="15" fill="rgb(236,174,8)" fg:x="77040" fg:w="1154"/><text x="62.6857%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (26 samples, 0.02%)</title><rect x="63.3498%" y="741" width="0.0211%" height="15" fill="rgb(220,197,8)" fg:x="78168" fg:w="26"/><text x="63.5998%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (26 samples, 0.02%)</title><rect x="63.3498%" y="725" width="0.0211%" height="15" fill="rgb(240,108,37)" fg:x="78168" fg:w="26"/><text x="63.5998%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (24 samples, 0.02%)</title><rect x="63.3515%" y="709" width="0.0195%" height="15" fill="rgb(232,176,24)" fg:x="78170" fg:w="24"/><text x="63.6015%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (24 samples, 0.02%)</title><rect x="63.3515%" y="693" width="0.0195%" height="15" fill="rgb(243,35,29)" fg:x="78170" fg:w="24"/><text x="63.6015%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (24 samples, 0.02%)</title><rect x="63.3515%" y="677" width="0.0195%" height="15" fill="rgb(210,37,18)" fg:x="78170" fg:w="24"/><text x="63.6015%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,194 samples, 0.97%)</title><rect x="62.4357%" y="805" width="0.9677%" height="15" fill="rgb(224,184,40)" fg:x="77040" fg:w="1194"/><text x="62.6857%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (40 samples, 0.03%)</title><rect x="63.3709%" y="789" width="0.0324%" height="15" fill="rgb(236,39,29)" fg:x="78194" fg:w="40"/><text x="63.6209%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (25 samples, 0.02%)</title><rect x="63.3831%" y="773" width="0.0203%" height="15" fill="rgb(232,48,39)" fg:x="78209" fg:w="25"/><text x="63.6331%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="63.3920%" y="757" width="0.0113%" height="15" fill="rgb(236,34,42)" fg:x="78220" fg:w="14"/><text x="63.6420%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (14 samples, 0.01%)</title><rect x="63.3920%" y="741" width="0.0113%" height="15" fill="rgb(243,106,37)" fg:x="78220" fg:w="14"/><text x="63.6420%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (14 samples, 0.01%)</title><rect x="63.3920%" y="725" width="0.0113%" height="15" fill="rgb(218,96,6)" fg:x="78220" fg:w="14"/><text x="63.6420%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="63.3920%" y="709" width="0.0113%" height="15" fill="rgb(235,130,12)" fg:x="78220" fg:w="14"/><text x="63.6420%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,844 samples, 1.49%)</title><rect x="62.1528%" y="885" width="1.4944%" height="15" fill="rgb(231,95,0)" fg:x="76691" fg:w="1844"/><text x="62.4028%" y="895.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,597 samples, 1.29%)</title><rect x="62.3530%" y="869" width="1.2943%" height="15" fill="rgb(228,12,23)" fg:x="76938" fg:w="1597"/><text x="62.6030%" y="879.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,597 samples, 1.29%)</title><rect x="62.3530%" y="853" width="1.2943%" height="15" fill="rgb(216,12,1)" fg:x="76938" fg:w="1597"/><text x="62.6030%" y="863.50"></text></g><g><title>value_trait::Builder::object (1,495 samples, 1.21%)</title><rect x="62.4357%" y="837" width="1.2116%" height="15" fill="rgb(219,59,3)" fg:x="77040" fg:w="1495"/><text x="62.6857%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,495 samples, 1.21%)</title><rect x="62.4357%" y="821" width="1.2116%" height="15" fill="rgb(215,208,46)" fg:x="77040" fg:w="1495"/><text x="62.6857%" y="831.50"></text></g><g><title>tremor_value::value::Value::Object (301 samples, 0.24%)</title><rect x="63.4033%" y="805" width="0.2439%" height="15" fill="rgb(254,224,29)" fg:x="78234" fg:w="301"/><text x="63.6533%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="63.6473%" y="869" width="0.0138%" height="15" fill="rgb(232,14,29)" fg:x="78535" fg:w="17"/><text x="63.8973%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="63.6610%" y="869" width="0.0195%" height="15" fill="rgb(208,45,52)" fg:x="78552" fg:w="24"/><text x="63.9110%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="63.6610%" y="853" width="0.0195%" height="15" fill="rgb(234,191,28)" fg:x="78552" fg:w="24"/><text x="63.9110%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (24 samples, 0.02%)</title><rect x="63.6610%" y="837" width="0.0195%" height="15" fill="rgb(244,67,43)" fg:x="78552" fg:w="24"/><text x="63.9110%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.02%)</title><rect x="63.6651%" y="821" width="0.0154%" height="15" fill="rgb(236,189,24)" fg:x="78557" fg:w="19"/><text x="63.9151%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (26 samples, 0.02%)</title><rect x="63.7097%" y="789" width="0.0211%" height="15" fill="rgb(239,214,33)" fg:x="78612" fg:w="26"/><text x="63.9597%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (2,018 samples, 1.64%)</title><rect x="62.1528%" y="901" width="1.6355%" height="15" fill="rgb(226,176,41)" fg:x="76691" fg:w="2018"/><text x="62.4028%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (174 samples, 0.14%)</title><rect x="63.6473%" y="885" width="0.1410%" height="15" fill="rgb(248,47,8)" fg:x="78535" fg:w="174"/><text x="63.8973%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (133 samples, 0.11%)</title><rect x="63.6805%" y="869" width="0.1078%" height="15" fill="rgb(218,81,44)" fg:x="78576" fg:w="133"/><text x="63.9305%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (133 samples, 0.11%)</title><rect x="63.6805%" y="853" width="0.1078%" height="15" fill="rgb(213,98,6)" fg:x="78576" fg:w="133"/><text x="63.9305%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (106 samples, 0.09%)</title><rect x="63.7024%" y="837" width="0.0859%" height="15" fill="rgb(222,85,22)" fg:x="78603" fg:w="106"/><text x="63.9524%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (106 samples, 0.09%)</title><rect x="63.7024%" y="821" width="0.0859%" height="15" fill="rgb(239,46,39)" fg:x="78603" fg:w="106"/><text x="63.9524%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (106 samples, 0.09%)</title><rect x="63.7024%" y="805" width="0.0859%" height="15" fill="rgb(237,12,29)" fg:x="78603" fg:w="106"/><text x="63.9524%" y="815.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.06%)</title><rect x="63.7307%" y="789" width="0.0575%" height="15" fill="rgb(214,77,8)" fg:x="78638" fg:w="71"/><text x="63.9807%" y="799.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (31 samples, 0.03%)</title><rect x="63.7883%" y="901" width="0.0251%" height="15" fill="rgb(217,168,37)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.03%)</title><rect x="63.7883%" y="885" width="0.0251%" height="15" fill="rgb(221,217,23)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.03%)</title><rect x="63.7883%" y="869" width="0.0251%" height="15" fill="rgb(243,229,36)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.03%)</title><rect x="63.7883%" y="853" width="0.0251%" height="15" fill="rgb(251,163,40)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="863.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="63.7883%" y="837" width="0.0251%" height="15" fill="rgb(237,222,12)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="847.50"></text></g><g><title>__rg_alloc (31 samples, 0.03%)</title><rect x="63.7883%" y="821" width="0.0251%" height="15" fill="rgb(248,132,6)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.03%)</title><rect x="63.7883%" y="805" width="0.0251%" height="15" fill="rgb(227,167,50)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="815.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.03%)</title><rect x="63.7883%" y="789" width="0.0251%" height="15" fill="rgb(242,84,37)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.03%)</title><rect x="63.7883%" y="773" width="0.0251%" height="15" fill="rgb(212,4,50)" fg:x="78709" fg:w="31"/><text x="64.0383%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (117 samples, 0.09%)</title><rect x="64.0395%" y="885" width="0.0948%" height="15" fill="rgb(230,228,32)" fg:x="79019" fg:w="117"/><text x="64.2895%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (51 samples, 0.04%)</title><rect x="64.1878%" y="741" width="0.0413%" height="15" fill="rgb(248,217,23)" fg:x="79202" fg:w="51"/><text x="64.4378%" y="751.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (118 samples, 0.10%)</title><rect x="64.1343%" y="885" width="0.0956%" height="15" fill="rgb(238,197,32)" fg:x="79136" fg:w="118"/><text x="64.3843%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (116 samples, 0.09%)</title><rect x="64.1360%" y="869" width="0.0940%" height="15" fill="rgb(236,106,1)" fg:x="79138" fg:w="116"/><text x="64.3860%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.08%)</title><rect x="64.1489%" y="853" width="0.0810%" height="15" fill="rgb(219,228,13)" fg:x="79154" fg:w="100"/><text x="64.3989%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.08%)</title><rect x="64.1489%" y="837" width="0.0810%" height="15" fill="rgb(238,30,35)" fg:x="79154" fg:w="100"/><text x="64.3989%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.08%)</title><rect x="64.1489%" y="821" width="0.0810%" height="15" fill="rgb(236,70,23)" fg:x="79154" fg:w="100"/><text x="64.3989%" y="831.50"></text></g><g><title>alloc::alloc::alloc (98 samples, 0.08%)</title><rect x="64.1505%" y="805" width="0.0794%" height="15" fill="rgb(249,104,48)" fg:x="79156" fg:w="98"/><text x="64.4005%" y="815.50"></text></g><g><title>__rg_alloc (98 samples, 0.08%)</title><rect x="64.1505%" y="789" width="0.0794%" height="15" fill="rgb(254,117,50)" fg:x="79156" fg:w="98"/><text x="64.4005%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (98 samples, 0.08%)</title><rect x="64.1505%" y="773" width="0.0794%" height="15" fill="rgb(223,152,4)" fg:x="79156" fg:w="98"/><text x="64.4005%" y="783.50"></text></g><g><title>sn_rust_alloc (86 samples, 0.07%)</title><rect x="64.1603%" y="757" width="0.0697%" height="15" fill="rgb(245,6,2)" fg:x="79168" fg:w="86"/><text x="64.4103%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (58 samples, 0.05%)</title><rect x="64.2300%" y="885" width="0.0470%" height="15" fill="rgb(249,150,24)" fg:x="79254" fg:w="58"/><text x="64.4800%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 0.05%)</title><rect x="64.2300%" y="869" width="0.0470%" height="15" fill="rgb(228,185,42)" fg:x="79254" fg:w="58"/><text x="64.4800%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 0.05%)</title><rect x="64.2300%" y="853" width="0.0470%" height="15" fill="rgb(226,39,33)" fg:x="79254" fg:w="58"/><text x="64.4800%" y="863.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.04%)</title><rect x="64.2348%" y="837" width="0.0421%" height="15" fill="rgb(221,166,19)" fg:x="79260" fg:w="52"/><text x="64.4848%" y="847.50"></text></g><g><title>__rg_alloc (52 samples, 0.04%)</title><rect x="64.2348%" y="821" width="0.0421%" height="15" fill="rgb(209,109,2)" fg:x="79260" fg:w="52"/><text x="64.4848%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.04%)</title><rect x="64.2348%" y="805" width="0.0421%" height="15" fill="rgb(252,216,26)" fg:x="79260" fg:w="52"/><text x="64.4848%" y="815.50"></text></g><g><title>sn_rust_alloc (37 samples, 0.03%)</title><rect x="64.2470%" y="789" width="0.0300%" height="15" fill="rgb(227,173,36)" fg:x="79275" fg:w="37"/><text x="64.4970%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (59 samples, 0.05%)</title><rect x="64.7389%" y="597" width="0.0478%" height="15" fill="rgb(209,90,7)" fg:x="79882" fg:w="59"/><text x="64.9889%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (113 samples, 0.09%)</title><rect x="64.6960%" y="757" width="0.0916%" height="15" fill="rgb(250,194,11)" fg:x="79829" fg:w="113"/><text x="64.9460%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (103 samples, 0.08%)</title><rect x="64.7041%" y="741" width="0.0835%" height="15" fill="rgb(220,72,50)" fg:x="79839" fg:w="103"/><text x="64.9541%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (103 samples, 0.08%)</title><rect x="64.7041%" y="725" width="0.0835%" height="15" fill="rgb(222,106,48)" fg:x="79839" fg:w="103"/><text x="64.9541%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (91 samples, 0.07%)</title><rect x="64.7138%" y="709" width="0.0737%" height="15" fill="rgb(216,220,45)" fg:x="79851" fg:w="91"/><text x="64.9638%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (91 samples, 0.07%)</title><rect x="64.7138%" y="693" width="0.0737%" height="15" fill="rgb(234,112,18)" fg:x="79851" fg:w="91"/><text x="64.9638%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (91 samples, 0.07%)</title><rect x="64.7138%" y="677" width="0.0737%" height="15" fill="rgb(206,179,9)" fg:x="79851" fg:w="91"/><text x="64.9638%" y="687.50"></text></g><g><title>alloc::alloc::alloc (85 samples, 0.07%)</title><rect x="64.7187%" y="661" width="0.0689%" height="15" fill="rgb(215,115,40)" fg:x="79857" fg:w="85"/><text x="64.9687%" y="671.50"></text></g><g><title>__rg_alloc (85 samples, 0.07%)</title><rect x="64.7187%" y="645" width="0.0689%" height="15" fill="rgb(222,69,34)" fg:x="79857" fg:w="85"/><text x="64.9687%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (85 samples, 0.07%)</title><rect x="64.7187%" y="629" width="0.0689%" height="15" fill="rgb(209,161,10)" fg:x="79857" fg:w="85"/><text x="64.9687%" y="639.50"></text></g><g><title>sn_rust_alloc (85 samples, 0.07%)</title><rect x="64.7187%" y="613" width="0.0689%" height="15" fill="rgb(217,6,38)" fg:x="79857" fg:w="85"/><text x="64.9687%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (154 samples, 0.12%)</title><rect x="64.6789%" y="837" width="0.1248%" height="15" fill="rgb(229,229,48)" fg:x="79808" fg:w="154"/><text x="64.9289%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (134 samples, 0.11%)</title><rect x="64.6952%" y="821" width="0.1086%" height="15" fill="rgb(225,21,28)" fg:x="79828" fg:w="134"/><text x="64.9452%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (134 samples, 0.11%)</title><rect x="64.6952%" y="805" width="0.1086%" height="15" fill="rgb(206,33,13)" fg:x="79828" fg:w="134"/><text x="64.9452%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (133 samples, 0.11%)</title><rect x="64.6960%" y="789" width="0.1078%" height="15" fill="rgb(242,178,17)" fg:x="79829" fg:w="133"/><text x="64.9460%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (133 samples, 0.11%)</title><rect x="64.6960%" y="773" width="0.1078%" height="15" fill="rgb(220,162,5)" fg:x="79829" fg:w="133"/><text x="64.9460%" y="783.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (20 samples, 0.02%)</title><rect x="64.7875%" y="757" width="0.0162%" height="15" fill="rgb(210,33,43)" fg:x="79942" fg:w="20"/><text x="65.0375%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (15 samples, 0.01%)</title><rect x="64.7916%" y="741" width="0.0122%" height="15" fill="rgb(216,116,54)" fg:x="79947" fg:w="15"/><text x="65.0416%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (15 samples, 0.01%)</title><rect x="64.7916%" y="725" width="0.0122%" height="15" fill="rgb(249,92,24)" fg:x="79947" fg:w="15"/><text x="65.0416%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (293 samples, 0.24%)</title><rect x="65.0193%" y="597" width="0.2375%" height="15" fill="rgb(231,189,14)" fg:x="80228" fg:w="293"/><text x="65.2693%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (351 samples, 0.28%)</title><rect x="64.9764%" y="757" width="0.2845%" height="15" fill="rgb(230,8,41)" fg:x="80175" fg:w="351"/><text x="65.2264%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (351 samples, 0.28%)</title><rect x="64.9764%" y="741" width="0.2845%" height="15" fill="rgb(249,7,27)" fg:x="80175" fg:w="351"/><text x="65.2264%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (346 samples, 0.28%)</title><rect x="64.9804%" y="725" width="0.2804%" height="15" fill="rgb(232,86,5)" fg:x="80180" fg:w="346"/><text x="65.2304%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (330 samples, 0.27%)</title><rect x="64.9934%" y="709" width="0.2674%" height="15" fill="rgb(224,175,18)" fg:x="80196" fg:w="330"/><text x="65.2434%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (330 samples, 0.27%)</title><rect x="64.9934%" y="693" width="0.2674%" height="15" fill="rgb(220,129,12)" fg:x="80196" fg:w="330"/><text x="65.2434%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (330 samples, 0.27%)</title><rect x="64.9934%" y="677" width="0.2674%" height="15" fill="rgb(210,19,36)" fg:x="80196" fg:w="330"/><text x="65.2434%" y="687.50"></text></g><g><title>alloc::alloc::alloc (330 samples, 0.27%)</title><rect x="64.9934%" y="661" width="0.2674%" height="15" fill="rgb(219,96,14)" fg:x="80196" fg:w="330"/><text x="65.2434%" y="671.50"></text></g><g><title>__rg_alloc (330 samples, 0.27%)</title><rect x="64.9934%" y="645" width="0.2674%" height="15" fill="rgb(249,106,1)" fg:x="80196" fg:w="330"/><text x="65.2434%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (330 samples, 0.27%)</title><rect x="64.9934%" y="629" width="0.2674%" height="15" fill="rgb(249,155,20)" fg:x="80196" fg:w="330"/><text x="65.2434%" y="639.50"></text></g><g><title>sn_rust_alloc (327 samples, 0.27%)</title><rect x="64.9958%" y="613" width="0.2650%" height="15" fill="rgb(244,168,9)" fg:x="80199" fg:w="327"/><text x="65.2458%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (367 samples, 0.30%)</title><rect x="64.9691%" y="805" width="0.2974%" height="15" fill="rgb(216,23,50)" fg:x="80166" fg:w="367"/><text x="65.2191%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (367 samples, 0.30%)</title><rect x="64.9691%" y="789" width="0.2974%" height="15" fill="rgb(224,219,20)" fg:x="80166" fg:w="367"/><text x="65.2191%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (367 samples, 0.30%)</title><rect x="64.9691%" y="773" width="0.2974%" height="15" fill="rgb(222,156,15)" fg:x="80166" fg:w="367"/><text x="65.2191%" y="783.50"></text></g><g><title>abi_stable::erased_types::iterator::next (24 samples, 0.02%)</title><rect x="65.2803%" y="757" width="0.0195%" height="15" fill="rgb(231,97,17)" fg:x="80550" fg:w="24"/><text x="65.5303%" y="767.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (24 samples, 0.02%)</title><rect x="65.2803%" y="741" width="0.0195%" height="15" fill="rgb(218,70,48)" fg:x="80550" fg:w="24"/><text x="65.5303%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="65.2803%" y="725" width="0.0195%" height="15" fill="rgb(212,196,52)" fg:x="80550" fg:w="24"/><text x="65.5303%" y="735.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="65.2803%" y="709" width="0.0195%" height="15" fill="rgb(243,203,18)" fg:x="80550" fg:w="24"/><text x="65.5303%" y="719.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="65.2843%" y="693" width="0.0154%" height="15" fill="rgb(252,125,41)" fg:x="80555" fg:w="19"/><text x="65.5343%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="65.2843%" y="677" width="0.0154%" height="15" fill="rgb(223,180,33)" fg:x="80555" fg:w="19"/><text x="65.5343%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="65.2843%" y="661" width="0.0154%" height="15" fill="rgb(254,159,46)" fg:x="80555" fg:w="19"/><text x="65.5343%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="65.2779%" y="789" width="0.0284%" height="15" fill="rgb(254,38,10)" fg:x="80547" fg:w="35"/><text x="65.5279%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (35 samples, 0.03%)</title><rect x="65.2779%" y="773" width="0.0284%" height="15" fill="rgb(208,217,32)" fg:x="80547" fg:w="35"/><text x="65.5279%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (27 samples, 0.02%)</title><rect x="65.3062%" y="789" width="0.0219%" height="15" fill="rgb(221,120,13)" fg:x="80582" fg:w="27"/><text x="65.5562%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (27 samples, 0.02%)</title><rect x="65.3062%" y="773" width="0.0219%" height="15" fill="rgb(246,54,52)" fg:x="80582" fg:w="27"/><text x="65.5562%" y="783.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (15 samples, 0.01%)</title><rect x="65.3159%" y="757" width="0.0122%" height="15" fill="rgb(242,34,25)" fg:x="80594" fg:w="15"/><text x="65.5659%" y="767.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (15 samples, 0.01%)</title><rect x="65.3159%" y="741" width="0.0122%" height="15" fill="rgb(247,209,9)" fg:x="80594" fg:w="15"/><text x="65.5659%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="65.3281%" y="789" width="0.0227%" height="15" fill="rgb(228,71,26)" fg:x="80609" fg:w="28"/><text x="65.5781%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (19 samples, 0.02%)</title><rect x="65.3354%" y="773" width="0.0154%" height="15" fill="rgb(222,145,49)" fg:x="80618" fg:w="19"/><text x="65.5854%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (19 samples, 0.02%)</title><rect x="65.3354%" y="757" width="0.0154%" height="15" fill="rgb(218,121,17)" fg:x="80618" fg:w="19"/><text x="65.5854%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="65.3403%" y="741" width="0.0105%" height="15" fill="rgb(244,50,7)" fg:x="80624" fg:w="13"/><text x="65.5903%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="65.3403%" y="725" width="0.0105%" height="15" fill="rgb(246,229,37)" fg:x="80624" fg:w="13"/><text x="65.5903%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="65.3403%" y="709" width="0.0105%" height="15" fill="rgb(225,18,5)" fg:x="80624" fg:w="13"/><text x="65.5903%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="65.3403%" y="693" width="0.0105%" height="15" fill="rgb(213,204,8)" fg:x="80624" fg:w="13"/><text x="65.5903%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="65.3403%" y="677" width="0.0105%" height="15" fill="rgb(238,103,6)" fg:x="80624" fg:w="13"/><text x="65.5903%" y="687.50"></text></g><g><title>sn_rust_dealloc (61 samples, 0.05%)</title><rect x="65.3605%" y="677" width="0.0494%" height="15" fill="rgb(222,25,35)" fg:x="80649" fg:w="61"/><text x="65.6105%" y="687.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (985 samples, 0.80%)</title><rect x="64.6133%" y="869" width="0.7983%" height="15" fill="rgb(213,203,35)" fg:x="79727" fg:w="985"/><text x="64.8633%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (904 samples, 0.73%)</title><rect x="64.6789%" y="853" width="0.7326%" height="15" fill="rgb(221,79,53)" fg:x="79808" fg:w="904"/><text x="64.9289%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (750 samples, 0.61%)</title><rect x="64.8038%" y="837" width="0.6078%" height="15" fill="rgb(243,200,35)" fg:x="79962" fg:w="750"/><text x="65.0538%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (546 samples, 0.44%)</title><rect x="64.9691%" y="821" width="0.4425%" height="15" fill="rgb(248,60,25)" fg:x="80166" fg:w="546"/><text x="65.2191%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (179 samples, 0.15%)</title><rect x="65.2665%" y="805" width="0.1451%" height="15" fill="rgb(227,53,46)" fg:x="80533" fg:w="179"/><text x="65.5165%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (75 samples, 0.06%)</title><rect x="65.3508%" y="789" width="0.0608%" height="15" fill="rgb(216,120,32)" fg:x="80637" fg:w="75"/><text x="65.6008%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (75 samples, 0.06%)</title><rect x="65.3508%" y="773" width="0.0608%" height="15" fill="rgb(220,134,1)" fg:x="80637" fg:w="75"/><text x="65.6008%" y="783.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.06%)</title><rect x="65.3508%" y="757" width="0.0608%" height="15" fill="rgb(237,168,5)" fg:x="80637" fg:w="75"/><text x="65.6008%" y="767.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (72 samples, 0.06%)</title><rect x="65.3532%" y="741" width="0.0584%" height="15" fill="rgb(231,100,33)" fg:x="80640" fg:w="72"/><text x="65.6032%" y="751.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (72 samples, 0.06%)</title><rect x="65.3532%" y="725" width="0.0584%" height="15" fill="rgb(236,177,47)" fg:x="80640" fg:w="72"/><text x="65.6032%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (72 samples, 0.06%)</title><rect x="65.3532%" y="709" width="0.0584%" height="15" fill="rgb(235,7,49)" fg:x="80640" fg:w="72"/><text x="65.6032%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (72 samples, 0.06%)</title><rect x="65.3532%" y="693" width="0.0584%" height="15" fill="rgb(232,119,22)" fg:x="80640" fg:w="72"/><text x="65.6032%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,258 samples, 3.45%)</title><rect x="62.1463%" y="1077" width="3.4508%" height="15" fill="rgb(254,73,53)" fg:x="76683" fg:w="4258"/><text x="62.3963%" y="1087.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,256 samples, 3.45%)</title><rect x="62.1480%" y="1061" width="3.4492%" height="15" fill="rgb(251,35,20)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="1071.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,256 samples, 3.45%)</title><rect x="62.1480%" y="1045" width="3.4492%" height="15" fill="rgb(241,119,20)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="1055.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,256 samples, 3.45%)</title><rect x="62.1480%" y="1029" width="3.4492%" height="15" fill="rgb(207,102,14)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="1039.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,256 samples, 3.45%)</title><rect x="62.1480%" y="1013" width="3.4492%" height="15" fill="rgb(248,201,50)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="1023.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,256 samples, 3.45%)</title><rect x="62.1480%" y="997" width="3.4492%" height="15" fill="rgb(222,185,44)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="1007.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,256 samples, 3.45%)</title><rect x="62.1480%" y="981" width="3.4492%" height="15" fill="rgb(218,107,18)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="991.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,256 samples, 3.45%)</title><rect x="62.1480%" y="965" width="3.4492%" height="15" fill="rgb(237,177,39)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="975.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,256 samples, 3.45%)</title><rect x="62.1480%" y="949" width="3.4492%" height="15" fill="rgb(246,69,6)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="959.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,256 samples, 3.45%)</title><rect x="62.1480%" y="933" width="3.4492%" height="15" fill="rgb(234,208,37)" fg:x="76685" fg:w="4256"/><text x="62.3980%" y="943.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,254 samples, 3.45%)</title><rect x="62.1496%" y="917" width="3.4476%" height="15" fill="rgb(225,4,6)" fg:x="76687" fg:w="4254"/><text x="62.3996%" y="927.50">tre..</text></g><g><title>tremor_script::srs::EventPayload::try_new (2,201 samples, 1.78%)</title><rect x="63.8134%" y="901" width="1.7838%" height="15" fill="rgb(233,45,0)" fg:x="78740" fg:w="2201"/><text x="64.0634%" y="911.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (1,623 samples, 1.32%)</title><rect x="64.2818%" y="885" width="1.3153%" height="15" fill="rgb(226,136,5)" fg:x="79318" fg:w="1623"/><text x="64.5318%" y="895.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (229 samples, 0.19%)</title><rect x="65.4116%" y="869" width="0.1856%" height="15" fill="rgb(211,91,47)" fg:x="80712" fg:w="229"/><text x="65.6616%" y="879.50"></text></g><g><title>tremor_common::time::nanotime (61 samples, 0.05%)</title><rect x="65.5988%" y="1077" width="0.0494%" height="15" fill="rgb(242,88,51)" fg:x="80943" fg:w="61"/><text x="65.8488%" y="1087.50"></text></g><g><title>std::time::SystemTime::now (21 samples, 0.02%)</title><rect x="65.6312%" y="1061" width="0.0170%" height="15" fill="rgb(230,91,28)" fg:x="80983" fg:w="21"/><text x="65.8812%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (21 samples, 0.02%)</title><rect x="65.6312%" y="1045" width="0.0170%" height="15" fill="rgb(254,186,29)" fg:x="80983" fg:w="21"/><text x="65.8812%" y="1055.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (21 samples, 0.02%)</title><rect x="65.6312%" y="1029" width="0.0170%" height="15" fill="rgb(238,6,4)" fg:x="80983" fg:w="21"/><text x="65.8812%" y="1039.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="65.7147%" y="965" width="0.0170%" height="15" fill="rgb(221,151,16)" fg:x="81086" fg:w="21"/><text x="65.9647%" y="975.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (18 samples, 0.01%)</title><rect x="65.7171%" y="949" width="0.0146%" height="15" fill="rgb(251,143,52)" fg:x="81089" fg:w="18"/><text x="65.9671%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.01%)</title><rect x="65.7179%" y="933" width="0.0138%" height="15" fill="rgb(206,90,15)" fg:x="81090" fg:w="17"/><text x="65.9679%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="65.7179%" y="917" width="0.0138%" height="15" fill="rgb(218,35,8)" fg:x="81090" fg:w="17"/><text x="65.9679%" y="927.50"></text></g><g><title>core::mem::drop (28 samples, 0.02%)</title><rect x="65.7390%" y="965" width="0.0227%" height="15" fill="rgb(239,215,6)" fg:x="81116" fg:w="28"/><text x="65.9890%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (28 samples, 0.02%)</title><rect x="65.7390%" y="949" width="0.0227%" height="15" fill="rgb(245,116,39)" fg:x="81116" fg:w="28"/><text x="65.9890%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (28 samples, 0.02%)</title><rect x="65.7390%" y="933" width="0.0227%" height="15" fill="rgb(242,65,28)" fg:x="81116" fg:w="28"/><text x="65.9890%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="65.7390%" y="917" width="0.0227%" height="15" fill="rgb(252,132,53)" fg:x="81116" fg:w="28"/><text x="65.9890%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="65.7430%" y="901" width="0.0186%" height="15" fill="rgb(224,159,50)" fg:x="81121" fg:w="23"/><text x="65.9930%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (23 samples, 0.02%)</title><rect x="65.7430%" y="885" width="0.0186%" height="15" fill="rgb(224,93,4)" fg:x="81121" fg:w="23"/><text x="65.9930%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (23 samples, 0.02%)</title><rect x="65.7430%" y="869" width="0.0186%" height="15" fill="rgb(208,81,34)" fg:x="81121" fg:w="23"/><text x="65.9930%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="65.7430%" y="853" width="0.0186%" height="15" fill="rgb(233,92,54)" fg:x="81121" fg:w="23"/><text x="65.9930%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (13 samples, 0.01%)</title><rect x="65.7617%" y="965" width="0.0105%" height="15" fill="rgb(237,21,14)" fg:x="81144" fg:w="13"/><text x="66.0117%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (64 samples, 0.05%)</title><rect x="65.7787%" y="901" width="0.0519%" height="15" fill="rgb(249,128,51)" fg:x="81165" fg:w="64"/><text x="66.0287%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.05%)</title><rect x="65.7787%" y="885" width="0.0519%" height="15" fill="rgb(223,129,24)" fg:x="81165" fg:w="64"/><text x="66.0287%" y="895.50"></text></g><g><title>event_listener::Inner::lock (111 samples, 0.09%)</title><rect x="65.7738%" y="965" width="0.0900%" height="15" fill="rgb(231,168,25)" fg:x="81159" fg:w="111"/><text x="66.0238%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (108 samples, 0.09%)</title><rect x="65.7763%" y="949" width="0.0875%" height="15" fill="rgb(224,39,20)" fg:x="81162" fg:w="108"/><text x="66.0263%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (105 samples, 0.09%)</title><rect x="65.7787%" y="933" width="0.0851%" height="15" fill="rgb(225,152,53)" fg:x="81165" fg:w="105"/><text x="66.0287%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (105 samples, 0.09%)</title><rect x="65.7787%" y="917" width="0.0851%" height="15" fill="rgb(252,17,24)" fg:x="81165" fg:w="105"/><text x="66.0287%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (41 samples, 0.03%)</title><rect x="65.8306%" y="901" width="0.0332%" height="15" fill="rgb(250,114,30)" fg:x="81229" fg:w="41"/><text x="66.0806%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (40 samples, 0.03%)</title><rect x="65.8314%" y="885" width="0.0324%" height="15" fill="rgb(229,5,4)" fg:x="81230" fg:w="40"/><text x="66.0814%" y="895.50"></text></g><g><title>core::hint::spin_loop (40 samples, 0.03%)</title><rect x="65.8314%" y="869" width="0.0324%" height="15" fill="rgb(225,176,49)" fg:x="81230" fg:w="40"/><text x="66.0814%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (40 samples, 0.03%)</title><rect x="65.8314%" y="853" width="0.0324%" height="15" fill="rgb(224,221,49)" fg:x="81230" fg:w="40"/><text x="66.0814%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (247 samples, 0.20%)</title><rect x="65.6993%" y="981" width="0.2002%" height="15" fill="rgb(253,169,27)" fg:x="81067" fg:w="247"/><text x="65.9493%" y="991.50"></text></g><g><title>event_listener::List::remove (44 samples, 0.04%)</title><rect x="65.8638%" y="965" width="0.0357%" height="15" fill="rgb(211,206,16)" fg:x="81270" fg:w="44"/><text x="66.1138%" y="975.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (33 samples, 0.03%)</title><rect x="65.8727%" y="949" width="0.0267%" height="15" fill="rgb(244,87,35)" fg:x="81281" fg:w="33"/><text x="66.1227%" y="959.50"></text></g><g><title>core::mem::replace (33 samples, 0.03%)</title><rect x="65.8727%" y="933" width="0.0267%" height="15" fill="rgb(246,28,10)" fg:x="81281" fg:w="33"/><text x="66.1227%" y="943.50"></text></g><g><title>core::ptr::read (33 samples, 0.03%)</title><rect x="65.8727%" y="917" width="0.0267%" height="15" fill="rgb(229,12,44)" fg:x="81281" fg:w="33"/><text x="66.1227%" y="927.50"></text></g><g><title>[libc-2.31.so] (642 samples, 0.52%)</title><rect x="65.8995%" y="981" width="0.5203%" height="15" fill="rgb(210,145,37)" fg:x="81314" fg:w="642"/><text x="66.1495%" y="991.50"></text></g><g><title>[libc-2.31.so] (943 samples, 0.76%)</title><rect x="66.4635%" y="965" width="0.7642%" height="15" fill="rgb(227,112,52)" fg:x="82010" fg:w="943"/><text x="66.7135%" y="975.50"></text></g><g><title>[libc-2.31.so] (341 samples, 0.28%)</title><rect x="67.3793%" y="933" width="0.2764%" height="15" fill="rgb(238,155,34)" fg:x="83140" fg:w="341"/><text x="67.6293%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (75 samples, 0.06%)</title><rect x="67.6557%" y="933" width="0.0608%" height="15" fill="rgb(239,226,36)" fg:x="83481" fg:w="75"/><text x="67.9057%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (72 samples, 0.06%)</title><rect x="67.6581%" y="917" width="0.0584%" height="15" fill="rgb(230,16,23)" fg:x="83484" fg:w="72"/><text x="67.9081%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (72 samples, 0.06%)</title><rect x="67.6581%" y="901" width="0.0584%" height="15" fill="rgb(236,171,36)" fg:x="83484" fg:w="72"/><text x="67.9081%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (72 samples, 0.06%)</title><rect x="67.6581%" y="885" width="0.0584%" height="15" fill="rgb(221,22,14)" fg:x="83484" fg:w="72"/><text x="67.9081%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (820 samples, 0.66%)</title><rect x="67.7164%" y="933" width="0.6646%" height="15" fill="rgb(242,43,11)" fg:x="83556" fg:w="820"/><text x="67.9664%" y="943.50"></text></g><g><title>core::ptr::read (820 samples, 0.66%)</title><rect x="67.7164%" y="917" width="0.6646%" height="15" fill="rgb(232,69,23)" fg:x="83556" fg:w="820"/><text x="67.9664%" y="927.50"></text></g><g><title>[libc-2.31.so] (820 samples, 0.66%)</title><rect x="67.7164%" y="901" width="0.6646%" height="15" fill="rgb(216,180,54)" fg:x="83556" fg:w="820"/><text x="67.9664%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1,033 samples, 0.84%)</title><rect x="68.3810%" y="933" width="0.8372%" height="15" fill="rgb(216,5,24)" fg:x="84376" fg:w="1033"/><text x="68.6310%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1,033 samples, 0.84%)</title><rect x="68.3810%" y="917" width="0.8372%" height="15" fill="rgb(225,89,9)" fg:x="84376" fg:w="1033"/><text x="68.6310%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,705 samples, 2.19%)</title><rect x="67.2278%" y="965" width="2.1922%" height="15" fill="rgb(243,75,33)" fg:x="82953" fg:w="2705"/><text x="67.4778%" y="975.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,667 samples, 2.16%)</title><rect x="67.2586%" y="949" width="2.1614%" height="15" fill="rgb(247,141,45)" fg:x="82991" fg:w="2667"/><text x="67.5086%" y="959.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (249 samples, 0.20%)</title><rect x="69.2182%" y="933" width="0.2018%" height="15" fill="rgb(232,177,36)" fg:x="85409" fg:w="249"/><text x="69.4682%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (243 samples, 0.20%)</title><rect x="69.2230%" y="917" width="0.1969%" height="15" fill="rgb(219,125,36)" fg:x="85415" fg:w="243"/><text x="69.4730%" y="927.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (4,023 samples, 3.26%)</title><rect x="66.4198%" y="981" width="3.2604%" height="15" fill="rgb(227,94,9)" fg:x="81956" fg:w="4023"/><text x="66.6698%" y="991.50">asy..</text></g><g><title>event_listener::Event::notify (321 samples, 0.26%)</title><rect x="69.4200%" y="965" width="0.2601%" height="15" fill="rgb(240,34,52)" fg:x="85658" fg:w="321"/><text x="69.6700%" y="975.50"></text></g><g><title>event_listener::full_fence (306 samples, 0.25%)</title><rect x="69.4321%" y="949" width="0.2480%" height="15" fill="rgb(216,45,12)" fg:x="85673" fg:w="306"/><text x="69.6821%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (293 samples, 0.24%)</title><rect x="69.4427%" y="933" width="0.2375%" height="15" fill="rgb(246,21,19)" fg:x="85686" fg:w="293"/><text x="69.6927%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (293 samples, 0.24%)</title><rect x="69.4427%" y="917" width="0.2375%" height="15" fill="rgb(213,98,42)" fg:x="85686" fg:w="293"/><text x="69.6927%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (67 samples, 0.05%)</title><rect x="69.6850%" y="981" width="0.0543%" height="15" fill="rgb(250,136,47)" fg:x="85985" fg:w="67"/><text x="69.9350%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (56 samples, 0.05%)</title><rect x="69.6939%" y="965" width="0.0454%" height="15" fill="rgb(251,124,27)" fg:x="85996" fg:w="56"/><text x="69.9439%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (54 samples, 0.04%)</title><rect x="69.6955%" y="949" width="0.0438%" height="15" fill="rgb(229,180,14)" fg:x="85998" fg:w="54"/><text x="69.9455%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.04%)</title><rect x="69.6955%" y="933" width="0.0438%" height="15" fill="rgb(245,216,25)" fg:x="85998" fg:w="54"/><text x="69.9455%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (52 samples, 0.04%)</title><rect x="69.6971%" y="917" width="0.0421%" height="15" fill="rgb(251,43,5)" fg:x="86000" fg:w="52"/><text x="69.9471%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (52 samples, 0.04%)</title><rect x="69.6971%" y="901" width="0.0421%" height="15" fill="rgb(250,128,24)" fg:x="86000" fg:w="52"/><text x="69.9471%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="69.7417%" y="965" width="0.0227%" height="15" fill="rgb(217,117,27)" fg:x="86055" fg:w="28"/><text x="69.9917%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (28 samples, 0.02%)</title><rect x="69.7417%" y="949" width="0.0227%" height="15" fill="rgb(245,147,4)" fg:x="86055" fg:w="28"/><text x="69.9917%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_add (28 samples, 0.02%)</title><rect x="69.7417%" y="933" width="0.0227%" height="15" fill="rgb(242,201,35)" fg:x="86055" fg:w="28"/><text x="69.9917%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (43 samples, 0.03%)</title><rect x="69.7644%" y="965" width="0.0348%" height="15" fill="rgb(218,181,1)" fg:x="86083" fg:w="43"/><text x="70.0144%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (43 samples, 0.03%)</title><rect x="69.7644%" y="949" width="0.0348%" height="15" fill="rgb(222,6,29)" fg:x="86083" fg:w="43"/><text x="70.0144%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="69.7644%" y="933" width="0.0348%" height="15" fill="rgb(208,186,3)" fg:x="86083" fg:w="43"/><text x="70.0144%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (42 samples, 0.03%)</title><rect x="69.7652%" y="917" width="0.0340%" height="15" fill="rgb(216,36,26)" fg:x="86084" fg:w="42"/><text x="70.0152%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (42 samples, 0.03%)</title><rect x="69.7652%" y="901" width="0.0340%" height="15" fill="rgb(248,201,23)" fg:x="86084" fg:w="42"/><text x="70.0152%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (42 samples, 0.03%)</title><rect x="69.7652%" y="885" width="0.0340%" height="15" fill="rgb(251,170,31)" fg:x="86084" fg:w="42"/><text x="70.0152%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (42 samples, 0.03%)</title><rect x="69.7652%" y="869" width="0.0340%" height="15" fill="rgb(207,110,25)" fg:x="86084" fg:w="42"/><text x="70.0152%" y="879.50"></text></g><g><title>event_listener::Inner::lock (19 samples, 0.02%)</title><rect x="69.8001%" y="965" width="0.0154%" height="15" fill="rgb(250,54,15)" fg:x="86127" fg:w="19"/><text x="70.0501%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="69.8017%" y="949" width="0.0138%" height="15" fill="rgb(227,68,33)" fg:x="86129" fg:w="17"/><text x="70.0517%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.01%)</title><rect x="69.8049%" y="933" width="0.0105%" height="15" fill="rgb(238,34,41)" fg:x="86133" fg:w="13"/><text x="70.0549%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (13 samples, 0.01%)</title><rect x="69.8049%" y="917" width="0.0105%" height="15" fill="rgb(220,11,15)" fg:x="86133" fg:w="13"/><text x="70.0549%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.01%)</title><rect x="69.8049%" y="901" width="0.0105%" height="15" fill="rgb(246,111,35)" fg:x="86133" fg:w="13"/><text x="70.0549%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="69.8049%" y="885" width="0.0105%" height="15" fill="rgb(209,88,53)" fg:x="86133" fg:w="13"/><text x="70.0549%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,143 samples, 4.17%)</title><rect x="65.6588%" y="1061" width="4.1681%" height="15" fill="rgb(231,185,47)" fg:x="81017" fg:w="5143"/><text x="65.9088%" y="1071.50">&lt;asyn..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,143 samples, 4.17%)</title><rect x="65.6588%" y="1045" width="4.1681%" height="15" fill="rgb(233,154,1)" fg:x="81017" fg:w="5143"/><text x="65.9088%" y="1055.50">&lt;trem..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,143 samples, 4.17%)</title><rect x="65.6588%" y="1029" width="4.1681%" height="15" fill="rgb(225,15,46)" fg:x="81017" fg:w="5143"/><text x="65.9088%" y="1039.50">&lt;asyn..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,143 samples, 4.17%)</title><rect x="65.6588%" y="1013" width="4.1681%" height="15" fill="rgb(211,135,41)" fg:x="81017" fg:w="5143"/><text x="65.9088%" y="1023.50">&lt;asyn..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,143 samples, 4.17%)</title><rect x="65.6588%" y="997" width="4.1681%" height="15" fill="rgb(208,54,0)" fg:x="81017" fg:w="5143"/><text x="65.9088%" y="1007.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (108 samples, 0.09%)</title><rect x="69.7393%" y="981" width="0.0875%" height="15" fill="rgb(244,136,14)" fg:x="86052" fg:w="108"/><text x="69.9893%" y="991.50"></text></g><g><title>alloc::alloc::exchange_malloc (56 samples, 0.05%)</title><rect x="69.8811%" y="693" width="0.0454%" height="15" fill="rgb(241,56,14)" fg:x="86227" fg:w="56"/><text x="70.1311%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="69.8811%" y="677" width="0.0454%" height="15" fill="rgb(205,80,24)" fg:x="86227" fg:w="56"/><text x="70.1311%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="69.8811%" y="661" width="0.0454%" height="15" fill="rgb(220,57,4)" fg:x="86227" fg:w="56"/><text x="70.1311%" y="671.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.04%)</title><rect x="69.8908%" y="645" width="0.0357%" height="15" fill="rgb(226,193,50)" fg:x="86239" fg:w="44"/><text x="70.1408%" y="655.50"></text></g><g><title>__rg_alloc (44 samples, 0.04%)</title><rect x="69.8908%" y="629" width="0.0357%" height="15" fill="rgb(231,168,22)" fg:x="86239" fg:w="44"/><text x="70.1408%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.04%)</title><rect x="69.8908%" y="613" width="0.0357%" height="15" fill="rgb(254,215,14)" fg:x="86239" fg:w="44"/><text x="70.1408%" y="623.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="69.8908%" y="597" width="0.0357%" height="15" fill="rgb(211,115,16)" fg:x="86239" fg:w="44"/><text x="70.1408%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (14 samples, 0.01%)</title><rect x="69.9265%" y="693" width="0.0113%" height="15" fill="rgb(236,210,16)" fg:x="86283" fg:w="14"/><text x="70.1765%" y="703.50"></text></g><g><title>alloc::slice::hack::into_vec (14 samples, 0.01%)</title><rect x="69.9265%" y="677" width="0.0113%" height="15" fill="rgb(221,94,12)" fg:x="86283" fg:w="14"/><text x="70.1765%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (14 samples, 0.01%)</title><rect x="69.9265%" y="661" width="0.0113%" height="15" fill="rgb(235,218,49)" fg:x="86283" fg:w="14"/><text x="70.1765%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (35 samples, 0.03%)</title><rect x="69.9792%" y="677" width="0.0284%" height="15" fill="rgb(217,114,14)" fg:x="86348" fg:w="35"/><text x="70.2292%" y="687.50"></text></g><g><title>core::time::Duration::as_nanos (29 samples, 0.02%)</title><rect x="70.0075%" y="677" width="0.0235%" height="15" fill="rgb(216,145,22)" fg:x="86383" fg:w="29"/><text x="70.2575%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (142 samples, 0.12%)</title><rect x="70.0310%" y="661" width="0.1151%" height="15" fill="rgb(217,112,39)" fg:x="86412" fg:w="142"/><text x="70.2810%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (61 samples, 0.05%)</title><rect x="70.1939%" y="629" width="0.0494%" height="15" fill="rgb(225,85,32)" fg:x="86613" fg:w="61"/><text x="70.4439%" y="639.50"></text></g><g><title>core::cmp::PartialOrd::ge (61 samples, 0.05%)</title><rect x="70.1939%" y="613" width="0.0494%" height="15" fill="rgb(245,209,47)" fg:x="86613" fg:w="61"/><text x="70.4439%" y="623.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (60 samples, 0.05%)</title><rect x="70.1947%" y="597" width="0.0486%" height="15" fill="rgb(218,220,15)" fg:x="86614" fg:w="60"/><text x="70.4447%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="70.2231%" y="581" width="0.0203%" height="15" fill="rgb(222,202,31)" fg:x="86649" fg:w="25"/><text x="70.4731%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (25 samples, 0.02%)</title><rect x="70.2231%" y="565" width="0.0203%" height="15" fill="rgb(243,203,4)" fg:x="86649" fg:w="25"/><text x="70.4731%" y="575.50"></text></g><g><title>std::time::SystemTime::duration_since (283 samples, 0.23%)</title><rect x="70.0310%" y="677" width="0.2294%" height="15" fill="rgb(237,92,17)" fg:x="86412" fg:w="283"/><text x="70.2810%" y="687.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (141 samples, 0.11%)</title><rect x="70.1461%" y="661" width="0.1143%" height="15" fill="rgb(231,119,7)" fg:x="86554" fg:w="141"/><text x="70.3961%" y="671.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (141 samples, 0.11%)</title><rect x="70.1461%" y="645" width="0.1143%" height="15" fill="rgb(237,82,41)" fg:x="86554" fg:w="141"/><text x="70.3961%" y="655.50"></text></g><g><title>core::time::Duration::new (21 samples, 0.02%)</title><rect x="70.2434%" y="629" width="0.0170%" height="15" fill="rgb(226,81,48)" fg:x="86674" fg:w="21"/><text x="70.4934%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,115 samples, 0.90%)</title><rect x="69.8268%" y="1061" width="0.9036%" height="15" fill="rgb(234,70,51)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,115 samples, 0.90%)</title><rect x="69.8268%" y="1045" width="0.9036%" height="15" fill="rgb(251,86,4)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="1055.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,115 samples, 0.90%)</title><rect x="69.8268%" y="1029" width="0.9036%" height="15" fill="rgb(244,144,28)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="1039.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,115 samples, 0.90%)</title><rect x="69.8268%" y="1013" width="0.9036%" height="15" fill="rgb(232,161,39)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="1023.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,115 samples, 0.90%)</title><rect x="69.8268%" y="997" width="0.9036%" height="15" fill="rgb(247,34,51)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="1007.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,115 samples, 0.90%)</title><rect x="69.8268%" y="981" width="0.9036%" height="15" fill="rgb(225,132,2)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="991.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,115 samples, 0.90%)</title><rect x="69.8268%" y="965" width="0.9036%" height="15" fill="rgb(209,159,44)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="975.50"></text></g><g><title>std::panic::catch_unwind (1,115 samples, 0.90%)</title><rect x="69.8268%" y="949" width="0.9036%" height="15" fill="rgb(251,214,1)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="959.50"></text></g><g><title>std::panicking::try (1,115 samples, 0.90%)</title><rect x="69.8268%" y="933" width="0.9036%" height="15" fill="rgb(247,84,47)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="943.50"></text></g><g><title>std::panicking::try::do_call (1,115 samples, 0.90%)</title><rect x="69.8268%" y="917" width="0.9036%" height="15" fill="rgb(240,111,43)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,115 samples, 0.90%)</title><rect x="69.8268%" y="901" width="0.9036%" height="15" fill="rgb(215,214,35)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,115 samples, 0.90%)</title><rect x="69.8268%" y="885" width="0.9036%" height="15" fill="rgb(248,207,23)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="895.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,115 samples, 0.90%)</title><rect x="69.8268%" y="869" width="0.9036%" height="15" fill="rgb(214,186,4)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="879.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,115 samples, 0.90%)</title><rect x="69.8268%" y="853" width="0.9036%" height="15" fill="rgb(220,133,22)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="863.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,115 samples, 0.90%)</title><rect x="69.8268%" y="837" width="0.9036%" height="15" fill="rgb(239,134,19)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,115 samples, 0.90%)</title><rect x="69.8268%" y="821" width="0.9036%" height="15" fill="rgb(250,140,9)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="831.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,115 samples, 0.90%)</title><rect x="69.8268%" y="805" width="0.9036%" height="15" fill="rgb(225,59,14)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,115 samples, 0.90%)</title><rect x="69.8268%" y="789" width="0.9036%" height="15" fill="rgb(214,152,51)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="799.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,115 samples, 0.90%)</title><rect x="69.8268%" y="773" width="0.9036%" height="15" fill="rgb(251,227,43)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="783.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,115 samples, 0.90%)</title><rect x="69.8268%" y="757" width="0.9036%" height="15" fill="rgb(241,96,17)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="767.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,115 samples, 0.90%)</title><rect x="69.8268%" y="741" width="0.9036%" height="15" fill="rgb(234,198,43)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="751.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,115 samples, 0.90%)</title><rect x="69.8268%" y="725" width="0.9036%" height="15" fill="rgb(220,108,29)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="735.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (1,115 samples, 0.90%)</title><rect x="69.8268%" y="709" width="0.9036%" height="15" fill="rgb(226,163,33)" fg:x="86160" fg:w="1115"/><text x="70.0768%" y="719.50"></text></g><g><title>tremor_common::time::nanotime (957 samples, 0.78%)</title><rect x="69.9549%" y="693" width="0.7756%" height="15" fill="rgb(205,194,45)" fg:x="86318" fg:w="957"/><text x="70.2049%" y="703.50"></text></g><g><title>std::time::SystemTime::now (580 samples, 0.47%)</title><rect x="70.2604%" y="677" width="0.4701%" height="15" fill="rgb(206,143,44)" fg:x="86695" fg:w="580"/><text x="70.5104%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (580 samples, 0.47%)</title><rect x="70.2604%" y="661" width="0.4701%" height="15" fill="rgb(236,136,36)" fg:x="86695" fg:w="580"/><text x="70.5104%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (580 samples, 0.47%)</title><rect x="70.2604%" y="645" width="0.4701%" height="15" fill="rgb(249,172,42)" fg:x="86695" fg:w="580"/><text x="70.5104%" y="655.50"></text></g><g><title>__clock_gettime (471 samples, 0.38%)</title><rect x="70.3487%" y="629" width="0.3817%" height="15" fill="rgb(216,139,23)" fg:x="86804" fg:w="471"/><text x="70.5987%" y="639.50"></text></g><g><title>__vdso_clock_gettime (456 samples, 0.37%)</title><rect x="70.3609%" y="613" width="0.3696%" height="15" fill="rgb(207,166,20)" fg:x="86819" fg:w="456"/><text x="70.6109%" y="623.50"></text></g><g><title>[[vdso]] (408 samples, 0.33%)</title><rect x="70.3998%" y="597" width="0.3307%" height="15" fill="rgb(210,209,22)" fg:x="86867" fg:w="408"/><text x="70.6498%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (6,262 samples, 5.07%)</title><rect x="65.6579%" y="1077" width="5.0749%" height="15" fill="rgb(232,118,20)" fg:x="81016" fg:w="6262"/><text x="65.9079%" y="1087.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (16 samples, 0.01%)</title><rect x="70.7353%" y="1077" width="0.0130%" height="15" fill="rgb(238,113,42)" fg:x="87281" fg:w="16"/><text x="70.9853%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (26 samples, 0.02%)</title><rect x="70.7669%" y="1077" width="0.0211%" height="15" fill="rgb(231,42,5)" fg:x="87320" fg:w="26"/><text x="71.0169%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (56 samples, 0.05%)</title><rect x="71.0506%" y="901" width="0.0454%" height="15" fill="rgb(243,166,24)" fg:x="87670" fg:w="56"/><text x="71.3006%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (56 samples, 0.05%)</title><rect x="71.0506%" y="885" width="0.0454%" height="15" fill="rgb(237,226,12)" fg:x="87670" fg:w="56"/><text x="71.3006%" y="895.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (64 samples, 0.05%)</title><rect x="71.0473%" y="933" width="0.0519%" height="15" fill="rgb(229,133,24)" fg:x="87666" fg:w="64"/><text x="71.2973%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (63 samples, 0.05%)</title><rect x="71.0481%" y="917" width="0.0511%" height="15" fill="rgb(238,33,43)" fg:x="87667" fg:w="63"/><text x="71.2981%" y="927.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (25 samples, 0.02%)</title><rect x="71.0992%" y="933" width="0.0203%" height="15" fill="rgb(227,59,38)" fg:x="87730" fg:w="25"/><text x="71.3492%" y="943.50"></text></g><g><title>core::mem::replace (25 samples, 0.02%)</title><rect x="71.0992%" y="917" width="0.0203%" height="15" fill="rgb(230,97,0)" fg:x="87730" fg:w="25"/><text x="71.3492%" y="927.50"></text></g><g><title>core::ptr::read (24 samples, 0.02%)</title><rect x="71.1000%" y="901" width="0.0195%" height="15" fill="rgb(250,173,50)" fg:x="87731" fg:w="24"/><text x="71.3500%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (188 samples, 0.15%)</title><rect x="71.1705%" y="917" width="0.1524%" height="15" fill="rgb(240,15,50)" fg:x="87818" fg:w="188"/><text x="71.4205%" y="927.50"></text></g><g><title>core::mem::replace (188 samples, 0.15%)</title><rect x="71.1705%" y="901" width="0.1524%" height="15" fill="rgb(221,93,22)" fg:x="87818" fg:w="188"/><text x="71.4205%" y="911.50"></text></g><g><title>core::ptr::read (187 samples, 0.15%)</title><rect x="71.1713%" y="885" width="0.1516%" height="15" fill="rgb(245,180,53)" fg:x="87819" fg:w="187"/><text x="71.4213%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (320 samples, 0.26%)</title><rect x="71.1194%" y="933" width="0.2593%" height="15" fill="rgb(231,88,51)" fg:x="87755" fg:w="320"/><text x="71.3694%" y="943.50"></text></g><g><title>core::mem::drop (69 samples, 0.06%)</title><rect x="71.3229%" y="917" width="0.0559%" height="15" fill="rgb(240,58,21)" fg:x="88006" fg:w="69"/><text x="71.5729%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (69 samples, 0.06%)</title><rect x="71.3229%" y="901" width="0.0559%" height="15" fill="rgb(237,21,10)" fg:x="88006" fg:w="69"/><text x="71.5729%" y="911.50"></text></g><g><title>core::mem::drop (63 samples, 0.05%)</title><rect x="71.3788%" y="933" width="0.0511%" height="15" fill="rgb(218,43,11)" fg:x="88075" fg:w="63"/><text x="71.6288%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (63 samples, 0.05%)</title><rect x="71.3788%" y="917" width="0.0511%" height="15" fill="rgb(218,221,29)" fg:x="88075" fg:w="63"/><text x="71.6288%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (55 samples, 0.04%)</title><rect x="71.3853%" y="901" width="0.0446%" height="15" fill="rgb(214,118,42)" fg:x="88083" fg:w="55"/><text x="71.6353%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.04%)</title><rect x="71.3853%" y="885" width="0.0446%" height="15" fill="rgb(251,200,26)" fg:x="88083" fg:w="55"/><text x="71.6353%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (52 samples, 0.04%)</title><rect x="71.3877%" y="869" width="0.0421%" height="15" fill="rgb(237,101,39)" fg:x="88086" fg:w="52"/><text x="71.6377%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (52 samples, 0.04%)</title><rect x="71.3877%" y="853" width="0.0421%" height="15" fill="rgb(251,117,11)" fg:x="88086" fg:w="52"/><text x="71.6377%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (52 samples, 0.04%)</title><rect x="71.3877%" y="837" width="0.0421%" height="15" fill="rgb(216,223,23)" fg:x="88086" fg:w="52"/><text x="71.6377%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.04%)</title><rect x="71.3877%" y="821" width="0.0421%" height="15" fill="rgb(251,54,12)" fg:x="88086" fg:w="52"/><text x="71.6377%" y="831.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="71.4298%" y="917" width="0.0170%" height="15" fill="rgb(254,176,54)" fg:x="88138" fg:w="21"/><text x="71.6798%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (407 samples, 0.33%)</title><rect x="71.4298%" y="933" width="0.3298%" height="15" fill="rgb(210,32,8)" fg:x="88138" fg:w="407"/><text x="71.6798%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (386 samples, 0.31%)</title><rect x="71.4469%" y="917" width="0.3128%" height="15" fill="rgb(235,52,38)" fg:x="88159" fg:w="386"/><text x="71.6969%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (386 samples, 0.31%)</title><rect x="71.4469%" y="901" width="0.3128%" height="15" fill="rgb(231,4,44)" fg:x="88159" fg:w="386"/><text x="71.6969%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (358 samples, 0.29%)</title><rect x="71.4696%" y="885" width="0.2901%" height="15" fill="rgb(249,2,32)" fg:x="88187" fg:w="358"/><text x="71.7196%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (358 samples, 0.29%)</title><rect x="71.4696%" y="869" width="0.2901%" height="15" fill="rgb(224,65,26)" fg:x="88187" fg:w="358"/><text x="71.7196%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (357 samples, 0.29%)</title><rect x="71.4704%" y="853" width="0.2893%" height="15" fill="rgb(250,73,40)" fg:x="88188" fg:w="357"/><text x="71.7204%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (357 samples, 0.29%)</title><rect x="71.4704%" y="837" width="0.2893%" height="15" fill="rgb(253,177,16)" fg:x="88188" fg:w="357"/><text x="71.7204%" y="847.50"></text></g><g><title>core::task::wake::Context::waker (15 samples, 0.01%)</title><rect x="71.7613%" y="933" width="0.0122%" height="15" fill="rgb(217,32,34)" fg:x="88547" fg:w="15"/><text x="72.0113%" y="943.50"></text></g><g><title>core::task::wake::Waker::will_wake (34 samples, 0.03%)</title><rect x="71.7735%" y="933" width="0.0276%" height="15" fill="rgb(212,7,10)" fg:x="88562" fg:w="34"/><text x="72.0235%" y="943.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (34 samples, 0.03%)</title><rect x="71.7735%" y="917" width="0.0276%" height="15" fill="rgb(245,89,8)" fg:x="88562" fg:w="34"/><text x="72.0235%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (33 samples, 0.03%)</title><rect x="71.7743%" y="901" width="0.0267%" height="15" fill="rgb(237,16,53)" fg:x="88563" fg:w="33"/><text x="72.0243%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (33 samples, 0.03%)</title><rect x="71.7743%" y="885" width="0.0267%" height="15" fill="rgb(250,204,30)" fg:x="88563" fg:w="33"/><text x="72.0243%" y="895.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (37 samples, 0.03%)</title><rect x="71.8245%" y="901" width="0.0300%" height="15" fill="rgb(208,77,27)" fg:x="88625" fg:w="37"/><text x="72.0745%" y="911.50"></text></g><g><title>std::sync::poison::Flag::borrow (37 samples, 0.03%)</title><rect x="71.8245%" y="885" width="0.0300%" height="15" fill="rgb(250,204,28)" fg:x="88625" fg:w="37"/><text x="72.0745%" y="895.50"></text></g><g><title>std::thread::panicking (22 samples, 0.02%)</title><rect x="71.8367%" y="869" width="0.0178%" height="15" fill="rgb(244,63,21)" fg:x="88640" fg:w="22"/><text x="72.0867%" y="879.50"></text></g><g><title>std::panicking::panicking (22 samples, 0.02%)</title><rect x="71.8367%" y="853" width="0.0178%" height="15" fill="rgb(236,85,44)" fg:x="88640" fg:w="22"/><text x="72.0867%" y="863.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (22 samples, 0.02%)</title><rect x="71.8367%" y="837" width="0.0178%" height="15" fill="rgb(215,98,4)" fg:x="88640" fg:w="22"/><text x="72.0867%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.02%)</title><rect x="71.8367%" y="821" width="0.0178%" height="15" fill="rgb(235,38,11)" fg:x="88640" fg:w="22"/><text x="72.0867%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="71.8367%" y="805" width="0.0178%" height="15" fill="rgb(254,186,25)" fg:x="88640" fg:w="22"/><text x="72.0867%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (610 samples, 0.49%)</title><rect x="71.8594%" y="869" width="0.4944%" height="15" fill="rgb(225,55,31)" fg:x="88668" fg:w="610"/><text x="72.1094%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (610 samples, 0.49%)</title><rect x="71.8594%" y="853" width="0.4944%" height="15" fill="rgb(211,15,21)" fg:x="88668" fg:w="610"/><text x="72.1094%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (62 samples, 0.05%)</title><rect x="72.3594%" y="853" width="0.0502%" height="15" fill="rgb(215,187,41)" fg:x="89285" fg:w="62"/><text x="72.6094%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (62 samples, 0.05%)</title><rect x="72.3594%" y="837" width="0.0502%" height="15" fill="rgb(248,69,32)" fg:x="89285" fg:w="62"/><text x="72.6094%" y="847.50"></text></g><g><title>core::hint::spin_loop (1,612 samples, 1.31%)</title><rect x="72.4186%" y="837" width="1.3064%" height="15" fill="rgb(252,102,52)" fg:x="89358" fg:w="1612"/><text x="72.6686%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1,612 samples, 1.31%)</title><rect x="72.4186%" y="821" width="1.3064%" height="15" fill="rgb(253,140,32)" fg:x="89358" fg:w="1612"/><text x="72.6686%" y="831.50"></text></g><g><title>event_listener::Inner::lock (2,438 samples, 1.98%)</title><rect x="71.8010%" y="933" width="1.9758%" height="15" fill="rgb(216,56,42)" fg:x="88596" fg:w="2438"/><text x="72.0510%" y="943.50">e..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2,409 samples, 1.95%)</title><rect x="71.8245%" y="917" width="1.9523%" height="15" fill="rgb(216,184,14)" fg:x="88625" fg:w="2409"/><text x="72.0745%" y="927.50">s..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2,372 samples, 1.92%)</title><rect x="71.8545%" y="901" width="1.9223%" height="15" fill="rgb(237,187,27)" fg:x="88662" fg:w="2372"/><text x="72.1045%" y="911.50">s..</text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (2,372 samples, 1.92%)</title><rect x="71.8545%" y="885" width="1.9223%" height="15" fill="rgb(219,65,3)" fg:x="88662" fg:w="2372"/><text x="72.1045%" y="895.50">s..</text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (1,756 samples, 1.42%)</title><rect x="72.3537%" y="869" width="1.4231%" height="15" fill="rgb(245,83,25)" fg:x="89278" fg:w="1756"/><text x="72.6037%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (1,687 samples, 1.37%)</title><rect x="72.4097%" y="853" width="1.3672%" height="15" fill="rgb(214,205,45)" fg:x="89347" fg:w="1687"/><text x="72.6597%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (64 samples, 0.05%)</title><rect x="73.7250%" y="837" width="0.0519%" height="15" fill="rgb(241,20,18)" fg:x="90970" fg:w="64"/><text x="73.9750%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (64 samples, 0.05%)</title><rect x="73.7250%" y="821" width="0.0519%" height="15" fill="rgb(232,163,23)" fg:x="90970" fg:w="64"/><text x="73.9750%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (3,573 samples, 2.90%)</title><rect x="70.9768%" y="949" width="2.8957%" height="15" fill="rgb(214,5,46)" fg:x="87579" fg:w="3573"/><text x="71.2268%" y="959.50">&lt;e..</text></g><g><title>event_listener::List::remove (118 samples, 0.10%)</title><rect x="73.7769%" y="933" width="0.0956%" height="15" fill="rgb(229,78,17)" fg:x="91034" fg:w="118"/><text x="74.0269%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (84 samples, 0.07%)</title><rect x="73.8044%" y="917" width="0.0681%" height="15" fill="rgb(248,89,10)" fg:x="91068" fg:w="84"/><text x="74.0544%" y="927.50"></text></g><g><title>core::mem::replace (84 samples, 0.07%)</title><rect x="73.8044%" y="901" width="0.0681%" height="15" fill="rgb(248,54,15)" fg:x="91068" fg:w="84"/><text x="74.0544%" y="911.50"></text></g><g><title>core::ptr::read (84 samples, 0.07%)</title><rect x="73.8044%" y="885" width="0.0681%" height="15" fill="rgb(223,116,6)" fg:x="91068" fg:w="84"/><text x="74.0544%" y="895.50"></text></g><g><title>concurrent_queue::full_fence (185 samples, 0.15%)</title><rect x="74.0500%" y="901" width="0.1499%" height="15" fill="rgb(205,125,38)" fg:x="91371" fg:w="185"/><text x="74.3000%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (177 samples, 0.14%)</title><rect x="74.0565%" y="885" width="0.1434%" height="15" fill="rgb(251,78,38)" fg:x="91379" fg:w="177"/><text x="74.3065%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (177 samples, 0.14%)</title><rect x="74.0565%" y="869" width="0.1434%" height="15" fill="rgb(253,78,28)" fg:x="91379" fg:w="177"/><text x="74.3065%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (177 samples, 0.14%)</title><rect x="74.0565%" y="853" width="0.1434%" height="15" fill="rgb(209,120,3)" fg:x="91379" fg:w="177"/><text x="74.3065%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (181 samples, 0.15%)</title><rect x="74.2040%" y="901" width="0.1467%" height="15" fill="rgb(238,229,9)" fg:x="91561" fg:w="181"/><text x="74.4540%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (181 samples, 0.15%)</title><rect x="74.2040%" y="885" width="0.1467%" height="15" fill="rgb(253,159,18)" fg:x="91561" fg:w="181"/><text x="74.4540%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (420 samples, 0.34%)</title><rect x="74.3506%" y="901" width="0.3404%" height="15" fill="rgb(244,42,34)" fg:x="91742" fg:w="420"/><text x="74.6006%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (420 samples, 0.34%)</title><rect x="74.3506%" y="885" width="0.3404%" height="15" fill="rgb(224,8,7)" fg:x="91742" fg:w="420"/><text x="74.6006%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (990 samples, 0.80%)</title><rect x="73.8895%" y="933" width="0.8023%" height="15" fill="rgb(210,201,45)" fg:x="91173" fg:w="990"/><text x="74.1395%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (956 samples, 0.77%)</title><rect x="73.9171%" y="917" width="0.7748%" height="15" fill="rgb(252,185,21)" fg:x="91207" fg:w="956"/><text x="74.1671%" y="927.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,057 samples, 1.67%)</title><rect x="73.8725%" y="949" width="1.6671%" height="15" fill="rgb(223,131,1)" fg:x="91152" fg:w="2057"/><text x="74.1225%" y="959.50"></text></g><g><title>event_listener::Event::notify (1,046 samples, 0.85%)</title><rect x="74.6918%" y="933" width="0.8477%" height="15" fill="rgb(245,141,16)" fg:x="92163" fg:w="1046"/><text x="74.9418%" y="943.50"></text></g><g><title>event_listener::full_fence (1,029 samples, 0.83%)</title><rect x="74.7056%" y="917" width="0.8339%" height="15" fill="rgb(229,55,45)" fg:x="92180" fg:w="1029"/><text x="74.9556%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,027 samples, 0.83%)</title><rect x="74.7072%" y="901" width="0.8323%" height="15" fill="rgb(208,92,15)" fg:x="92182" fg:w="1027"/><text x="74.9572%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,027 samples, 0.83%)</title><rect x="74.7072%" y="885" width="0.8323%" height="15" fill="rgb(234,185,47)" fg:x="92182" fg:w="1027"/><text x="74.9572%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (17 samples, 0.01%)</title><rect x="75.5395%" y="949" width="0.0138%" height="15" fill="rgb(253,104,50)" fg:x="93209" fg:w="17"/><text x="75.7895%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (43 samples, 0.03%)</title><rect x="75.5712%" y="837" width="0.0348%" height="15" fill="rgb(205,70,7)" fg:x="93248" fg:w="43"/><text x="75.8212%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (43 samples, 0.03%)</title><rect x="75.5712%" y="821" width="0.0348%" height="15" fill="rgb(240,178,43)" fg:x="93248" fg:w="43"/><text x="75.8212%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (23 samples, 0.02%)</title><rect x="75.6068%" y="821" width="0.0186%" height="15" fill="rgb(214,112,2)" fg:x="93292" fg:w="23"/><text x="75.8568%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="75.6068%" y="805" width="0.0186%" height="15" fill="rgb(206,46,17)" fg:x="93292" fg:w="23"/><text x="75.8568%" y="815.50"></text></g><g><title>core::hint::spin_loop (24 samples, 0.02%)</title><rect x="75.6263%" y="805" width="0.0195%" height="15" fill="rgb(225,220,16)" fg:x="93316" fg:w="24"/><text x="75.8763%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (24 samples, 0.02%)</title><rect x="75.6263%" y="789" width="0.0195%" height="15" fill="rgb(238,65,40)" fg:x="93316" fg:w="24"/><text x="75.8763%" y="799.50"></text></g><g><title>event_listener::Inner::lock (122 samples, 0.10%)</title><rect x="75.5703%" y="901" width="0.0989%" height="15" fill="rgb(230,151,21)" fg:x="93247" fg:w="122"/><text x="75.8203%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (121 samples, 0.10%)</title><rect x="75.5712%" y="885" width="0.0981%" height="15" fill="rgb(218,58,49)" fg:x="93248" fg:w="121"/><text x="75.8212%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (121 samples, 0.10%)</title><rect x="75.5712%" y="869" width="0.0981%" height="15" fill="rgb(219,179,14)" fg:x="93248" fg:w="121"/><text x="75.8212%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (121 samples, 0.10%)</title><rect x="75.5712%" y="853" width="0.0981%" height="15" fill="rgb(223,72,1)" fg:x="93248" fg:w="121"/><text x="75.8212%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (78 samples, 0.06%)</title><rect x="75.6060%" y="837" width="0.0632%" height="15" fill="rgb(238,126,10)" fg:x="93291" fg:w="78"/><text x="75.8560%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (54 samples, 0.04%)</title><rect x="75.6255%" y="821" width="0.0438%" height="15" fill="rgb(224,206,38)" fg:x="93315" fg:w="54"/><text x="75.8755%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (29 samples, 0.02%)</title><rect x="75.6457%" y="805" width="0.0235%" height="15" fill="rgb(212,201,54)" fg:x="93340" fg:w="29"/><text x="75.8957%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.02%)</title><rect x="75.6457%" y="789" width="0.0235%" height="15" fill="rgb(218,154,48)" fg:x="93340" fg:w="29"/><text x="75.8957%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (144 samples, 0.12%)</title><rect x="75.5614%" y="917" width="0.1167%" height="15" fill="rgb(232,93,24)" fg:x="93236" fg:w="144"/><text x="75.8114%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (269 samples, 0.22%)</title><rect x="75.5533%" y="949" width="0.2180%" height="15" fill="rgb(245,30,21)" fg:x="93226" fg:w="269"/><text x="75.8033%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (260 samples, 0.21%)</title><rect x="75.5606%" y="933" width="0.2107%" height="15" fill="rgb(242,148,29)" fg:x="93235" fg:w="260"/><text x="75.8106%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (115 samples, 0.09%)</title><rect x="75.6781%" y="917" width="0.0932%" height="15" fill="rgb(244,153,54)" fg:x="93380" fg:w="115"/><text x="75.9281%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.09%)</title><rect x="75.6781%" y="901" width="0.0932%" height="15" fill="rgb(252,87,22)" fg:x="93380" fg:w="115"/><text x="75.9281%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (112 samples, 0.09%)</title><rect x="75.6806%" y="885" width="0.0908%" height="15" fill="rgb(210,51,29)" fg:x="93383" fg:w="112"/><text x="75.9306%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (112 samples, 0.09%)</title><rect x="75.6806%" y="869" width="0.0908%" height="15" fill="rgb(242,136,47)" fg:x="93383" fg:w="112"/><text x="75.9306%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (96 samples, 0.08%)</title><rect x="75.7778%" y="933" width="0.0778%" height="15" fill="rgb(238,68,4)" fg:x="93503" fg:w="96"/><text x="76.0278%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (96 samples, 0.08%)</title><rect x="75.7778%" y="917" width="0.0778%" height="15" fill="rgb(242,161,30)" fg:x="93503" fg:w="96"/><text x="76.0278%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (96 samples, 0.08%)</title><rect x="75.7778%" y="901" width="0.0778%" height="15" fill="rgb(218,58,44)" fg:x="93503" fg:w="96"/><text x="76.0278%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (166 samples, 0.13%)</title><rect x="75.8556%" y="933" width="0.1345%" height="15" fill="rgb(252,125,32)" fg:x="93599" fg:w="166"/><text x="76.1056%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (159 samples, 0.13%)</title><rect x="75.8613%" y="917" width="0.1289%" height="15" fill="rgb(219,178,0)" fg:x="93606" fg:w="159"/><text x="76.1113%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (159 samples, 0.13%)</title><rect x="75.8613%" y="901" width="0.1289%" height="15" fill="rgb(213,152,7)" fg:x="93606" fg:w="159"/><text x="76.1113%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (158 samples, 0.13%)</title><rect x="75.8621%" y="885" width="0.1280%" height="15" fill="rgb(249,109,34)" fg:x="93607" fg:w="158"/><text x="76.1121%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (158 samples, 0.13%)</title><rect x="75.8621%" y="869" width="0.1280%" height="15" fill="rgb(232,96,21)" fg:x="93607" fg:w="158"/><text x="76.1121%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (158 samples, 0.13%)</title><rect x="75.8621%" y="853" width="0.1280%" height="15" fill="rgb(228,27,39)" fg:x="93607" fg:w="158"/><text x="76.1121%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (158 samples, 0.13%)</title><rect x="75.8621%" y="837" width="0.1280%" height="15" fill="rgb(211,182,52)" fg:x="93607" fg:w="158"/><text x="76.1121%" y="847.50"></text></g><g><title>event_listener::Inner::lock (77 samples, 0.06%)</title><rect x="75.9926%" y="933" width="0.0624%" height="15" fill="rgb(234,178,38)" fg:x="93768" fg:w="77"/><text x="76.2426%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.06%)</title><rect x="75.9958%" y="917" width="0.0592%" height="15" fill="rgb(221,111,3)" fg:x="93772" fg:w="73"/><text x="76.2458%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (66 samples, 0.05%)</title><rect x="76.0015%" y="901" width="0.0535%" height="15" fill="rgb(228,175,21)" fg:x="93779" fg:w="66"/><text x="76.2515%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (66 samples, 0.05%)</title><rect x="76.0015%" y="885" width="0.0535%" height="15" fill="rgb(228,174,43)" fg:x="93779" fg:w="66"/><text x="76.2515%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (66 samples, 0.05%)</title><rect x="76.0015%" y="869" width="0.0535%" height="15" fill="rgb(211,191,0)" fg:x="93779" fg:w="66"/><text x="76.2515%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.05%)</title><rect x="76.0015%" y="853" width="0.0535%" height="15" fill="rgb(253,117,3)" fg:x="93779" fg:w="66"/><text x="76.2515%" y="863.50"></text></g><g><title>event_listener::List::insert (16 samples, 0.01%)</title><rect x="76.0550%" y="933" width="0.0130%" height="15" fill="rgb(241,127,19)" fg:x="93845" fg:w="16"/><text x="76.3050%" y="943.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6,441 samples, 5.22%)</title><rect x="70.8885%" y="965" width="5.2200%" height="15" fill="rgb(218,103,12)" fg:x="87470" fg:w="6441"/><text x="71.1385%" y="975.50">&lt;async..</text></g><g><title>event_listener::Event::listen (416 samples, 0.34%)</title><rect x="75.7713%" y="949" width="0.3371%" height="15" fill="rgb(236,214,43)" fg:x="93495" fg:w="416"/><text x="76.0213%" y="959.50"></text></g><g><title>event_listener::full_fence (50 samples, 0.04%)</title><rect x="76.0679%" y="933" width="0.0405%" height="15" fill="rgb(244,144,19)" fg:x="93861" fg:w="50"/><text x="76.3179%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (47 samples, 0.04%)</title><rect x="76.0704%" y="917" width="0.0381%" height="15" fill="rgb(246,188,10)" fg:x="93864" fg:w="47"/><text x="76.3204%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.04%)</title><rect x="76.0704%" y="901" width="0.0381%" height="15" fill="rgb(212,193,33)" fg:x="93864" fg:w="47"/><text x="76.3204%" y="911.50"></text></g><g><title>[libc-2.31.so] (216 samples, 0.18%)</title><rect x="76.1150%" y="949" width="0.1751%" height="15" fill="rgb(241,51,29)" fg:x="93919" fg:w="216"/><text x="76.3650%" y="959.50"></text></g><g><title>[libc-2.31.so] (1,497 samples, 1.21%)</title><rect x="76.2957%" y="917" width="1.2132%" height="15" fill="rgb(211,58,19)" fg:x="94142" fg:w="1497"/><text x="76.5457%" y="927.50"></text></g><g><title>sn_rust_dealloc (99 samples, 0.08%)</title><rect x="77.5121%" y="837" width="0.0802%" height="15" fill="rgb(229,111,26)" fg:x="95643" fg:w="99"/><text x="77.7621%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (8,613 samples, 6.98%)</title><rect x="70.8374%" y="997" width="6.9802%" height="15" fill="rgb(213,115,40)" fg:x="87407" fg:w="8613"/><text x="71.0874%" y="1007.50">&lt;async_st..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (8,585 samples, 6.96%)</title><rect x="70.8601%" y="981" width="6.9576%" height="15" fill="rgb(209,56,44)" fg:x="87435" fg:w="8585"/><text x="71.1101%" y="991.50">&lt;async_st..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,109 samples, 1.71%)</title><rect x="76.1085%" y="965" width="1.7092%" height="15" fill="rgb(230,108,32)" fg:x="93911" fg:w="2109"/><text x="76.3585%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,885 samples, 1.53%)</title><rect x="76.2900%" y="949" width="1.5277%" height="15" fill="rgb(216,165,31)" fg:x="94135" fg:w="1885"/><text x="76.5400%" y="959.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,885 samples, 1.53%)</title><rect x="76.2900%" y="933" width="1.5277%" height="15" fill="rgb(218,122,21)" fg:x="94135" fg:w="1885"/><text x="76.5400%" y="943.50"></text></g><g><title>alloc::alloc::box_free (381 samples, 0.31%)</title><rect x="77.5089%" y="917" width="0.3088%" height="15" fill="rgb(223,224,47)" fg:x="95639" fg:w="381"/><text x="77.7589%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (381 samples, 0.31%)</title><rect x="77.5089%" y="901" width="0.3088%" height="15" fill="rgb(238,102,44)" fg:x="95639" fg:w="381"/><text x="77.7589%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (381 samples, 0.31%)</title><rect x="77.5089%" y="885" width="0.3088%" height="15" fill="rgb(236,46,40)" fg:x="95639" fg:w="381"/><text x="77.7589%" y="895.50"></text></g><g><title>__rg_dealloc (381 samples, 0.31%)</title><rect x="77.5089%" y="869" width="0.3088%" height="15" fill="rgb(247,202,50)" fg:x="95639" fg:w="381"/><text x="77.7589%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (381 samples, 0.31%)</title><rect x="77.5089%" y="853" width="0.3088%" height="15" fill="rgb(209,99,20)" fg:x="95639" fg:w="381"/><text x="77.7589%" y="863.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (278 samples, 0.23%)</title><rect x="77.5924%" y="837" width="0.2253%" height="15" fill="rgb(252,27,34)" fg:x="95742" fg:w="278"/><text x="77.8424%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,996 samples, 8.10%)</title><rect x="70.7896%" y="1061" width="8.1011%" height="15" fill="rgb(215,206,23)" fg:x="87348" fg:w="9996"/><text x="71.0396%" y="1071.50">&lt;async_std:..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (9,985 samples, 8.09%)</title><rect x="70.7985%" y="1045" width="8.0922%" height="15" fill="rgb(212,135,36)" fg:x="87359" fg:w="9985"/><text x="71.0485%" y="1055.50">&lt;tremor_run..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (9,985 samples, 8.09%)</title><rect x="70.7985%" y="1029" width="8.0922%" height="15" fill="rgb(240,189,1)" fg:x="87359" fg:w="9985"/><text x="71.0485%" y="1039.50">&lt;async_std:..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (9,985 samples, 8.09%)</title><rect x="70.7985%" y="1013" width="8.0922%" height="15" fill="rgb(242,56,20)" fg:x="87359" fg:w="9985"/><text x="71.0485%" y="1023.50">&lt;tremor_run..</text></g><g><title>[libc-2.31.so] (1,324 samples, 1.07%)</title><rect x="77.8177%" y="997" width="1.0730%" height="15" fill="rgb(247,132,33)" fg:x="96020" fg:w="1324"/><text x="78.0677%" y="1007.50"></text></g><g><title>[libc-2.31.so] (171 samples, 0.14%)</title><rect x="78.8915%" y="1013" width="0.1386%" height="15" fill="rgb(208,149,11)" fg:x="97345" fg:w="171"/><text x="79.1415%" y="1023.50"></text></g><g><title>[libc-2.31.so] (358 samples, 0.29%)</title><rect x="79.3705%" y="949" width="0.2901%" height="15" fill="rgb(211,33,11)" fg:x="97936" fg:w="358"/><text x="79.6205%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (198 samples, 0.16%)</title><rect x="79.7254%" y="933" width="0.1605%" height="15" fill="rgb(221,29,38)" fg:x="98374" fg:w="198"/><text x="79.9754%" y="943.50"></text></g><g><title>core::ptr::write (198 samples, 0.16%)</title><rect x="79.7254%" y="917" width="0.1605%" height="15" fill="rgb(206,182,49)" fg:x="98374" fg:w="198"/><text x="79.9754%" y="927.50"></text></g><g><title>[libc-2.31.so] (184 samples, 0.15%)</title><rect x="79.7368%" y="901" width="0.1491%" height="15" fill="rgb(216,140,1)" fg:x="98388" fg:w="184"/><text x="79.9868%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (329 samples, 0.27%)</title><rect x="79.8859%" y="933" width="0.2666%" height="15" fill="rgb(232,57,40)" fg:x="98572" fg:w="329"/><text x="80.1359%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (329 samples, 0.27%)</title><rect x="79.8859%" y="917" width="0.2666%" height="15" fill="rgb(224,186,18)" fg:x="98572" fg:w="329"/><text x="80.1359%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (113 samples, 0.09%)</title><rect x="80.1525%" y="933" width="0.0916%" height="15" fill="rgb(215,121,11)" fg:x="98901" fg:w="113"/><text x="80.4025%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (112 samples, 0.09%)</title><rect x="80.1533%" y="917" width="0.0908%" height="15" fill="rgb(245,147,10)" fg:x="98902" fg:w="112"/><text x="80.4033%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,264 samples, 1.02%)</title><rect x="79.2286%" y="965" width="1.0244%" height="15" fill="rgb(238,153,13)" fg:x="97761" fg:w="1264"/><text x="79.4786%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (731 samples, 0.59%)</title><rect x="79.6606%" y="949" width="0.5924%" height="15" fill="rgb(233,108,0)" fg:x="98294" fg:w="731"/><text x="79.9106%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (14 samples, 0.01%)</title><rect x="80.2708%" y="949" width="0.0113%" height="15" fill="rgb(212,157,17)" fg:x="99047" fg:w="14"/><text x="80.5208%" y="959.50"></text></g><g><title>event_listener::Inner::lock (25 samples, 0.02%)</title><rect x="80.2887%" y="949" width="0.0203%" height="15" fill="rgb(225,213,38)" fg:x="99069" fg:w="25"/><text x="80.5387%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (24 samples, 0.02%)</title><rect x="80.2895%" y="933" width="0.0195%" height="15" fill="rgb(248,16,11)" fg:x="99070" fg:w="24"/><text x="80.5395%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.02%)</title><rect x="80.2911%" y="917" width="0.0178%" height="15" fill="rgb(241,33,4)" fg:x="99072" fg:w="22"/><text x="80.5411%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (22 samples, 0.02%)</title><rect x="80.2911%" y="901" width="0.0178%" height="15" fill="rgb(222,26,43)" fg:x="99072" fg:w="22"/><text x="80.5411%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="80.2911%" y="885" width="0.0178%" height="15" fill="rgb(243,29,36)" fg:x="99072" fg:w="22"/><text x="80.5411%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="80.2911%" y="869" width="0.0178%" height="15" fill="rgb(241,9,27)" fg:x="99072" fg:w="22"/><text x="80.5411%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="80.3349%" y="853" width="0.0113%" height="15" fill="rgb(205,117,26)" fg:x="99126" fg:w="14"/><text x="80.5849%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="80.3349%" y="837" width="0.0113%" height="15" fill="rgb(209,80,39)" fg:x="99126" fg:w="14"/><text x="80.5849%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (14 samples, 0.01%)</title><rect x="80.3584%" y="773" width="0.0113%" height="15" fill="rgb(239,155,6)" fg:x="99155" fg:w="14"/><text x="80.6084%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="80.3584%" y="757" width="0.0113%" height="15" fill="rgb(212,104,12)" fg:x="99155" fg:w="14"/><text x="80.6084%" y="767.50"></text></g><g><title>parking::Unparker::unpark (30 samples, 0.02%)</title><rect x="80.3495%" y="805" width="0.0243%" height="15" fill="rgb(234,204,3)" fg:x="99144" fg:w="30"/><text x="80.5995%" y="815.50"></text></g><g><title>parking::Inner::unpark (19 samples, 0.02%)</title><rect x="80.3584%" y="789" width="0.0154%" height="15" fill="rgb(251,218,7)" fg:x="99155" fg:w="19"/><text x="80.6084%" y="799.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (36 samples, 0.03%)</title><rect x="80.3462%" y="821" width="0.0292%" height="15" fill="rgb(221,81,32)" fg:x="99140" fg:w="36"/><text x="80.5962%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (42 samples, 0.03%)</title><rect x="80.3462%" y="853" width="0.0340%" height="15" fill="rgb(214,152,26)" fg:x="99140" fg:w="42"/><text x="80.5962%" y="863.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (42 samples, 0.03%)</title><rect x="80.3462%" y="837" width="0.0340%" height="15" fill="rgb(223,22,3)" fg:x="99140" fg:w="42"/><text x="80.5962%" y="847.50"></text></g><g><title>async_executor::State::notify (93 samples, 0.08%)</title><rect x="80.3203%" y="869" width="0.0754%" height="15" fill="rgb(207,174,7)" fg:x="99108" fg:w="93"/><text x="80.5703%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.02%)</title><rect x="80.3803%" y="853" width="0.0154%" height="15" fill="rgb(224,19,52)" fg:x="99182" fg:w="19"/><text x="80.6303%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="80.3803%" y="837" width="0.0154%" height="15" fill="rgb(228,24,14)" fg:x="99182" fg:w="19"/><text x="80.6303%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (19 samples, 0.02%)</title><rect x="80.3803%" y="821" width="0.0154%" height="15" fill="rgb(230,153,43)" fg:x="99182" fg:w="19"/><text x="80.6303%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.02%)</title><rect x="80.3803%" y="805" width="0.0154%" height="15" fill="rgb(231,106,12)" fg:x="99182" fg:w="19"/><text x="80.6303%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="80.3803%" y="789" width="0.0154%" height="15" fill="rgb(215,92,2)" fg:x="99182" fg:w="19"/><text x="80.6303%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (37 samples, 0.03%)</title><rect x="80.4143%" y="837" width="0.0300%" height="15" fill="rgb(249,143,25)" fg:x="99224" fg:w="37"/><text x="80.6643%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (37 samples, 0.03%)</title><rect x="80.4143%" y="821" width="0.0300%" height="15" fill="rgb(252,7,35)" fg:x="99224" fg:w="37"/><text x="80.6643%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (26 samples, 0.02%)</title><rect x="80.4451%" y="837" width="0.0211%" height="15" fill="rgb(216,69,40)" fg:x="99262" fg:w="26"/><text x="80.6951%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_or (26 samples, 0.02%)</title><rect x="80.4451%" y="821" width="0.0211%" height="15" fill="rgb(240,36,33)" fg:x="99262" fg:w="26"/><text x="80.6951%" y="831.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (183 samples, 0.15%)</title><rect x="80.3203%" y="885" width="0.1483%" height="15" fill="rgb(231,128,14)" fg:x="99108" fg:w="183"/><text x="80.5703%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (90 samples, 0.07%)</title><rect x="80.3957%" y="869" width="0.0729%" height="15" fill="rgb(245,143,14)" fg:x="99201" fg:w="90"/><text x="80.6457%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (89 samples, 0.07%)</title><rect x="80.3965%" y="853" width="0.0721%" height="15" fill="rgb(222,130,28)" fg:x="99202" fg:w="89"/><text x="80.6465%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (36 samples, 0.03%)</title><rect x="80.4686%" y="885" width="0.0292%" height="15" fill="rgb(212,10,48)" fg:x="99291" fg:w="36"/><text x="80.7186%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (36 samples, 0.03%)</title><rect x="80.4686%" y="869" width="0.0292%" height="15" fill="rgb(254,118,45)" fg:x="99291" fg:w="36"/><text x="80.7186%" y="879.50"></text></g><g><title>event_listener::List::notify (239 samples, 0.19%)</title><rect x="80.3089%" y="949" width="0.1937%" height="15" fill="rgb(228,6,45)" fg:x="99094" fg:w="239"/><text x="80.5589%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake (237 samples, 0.19%)</title><rect x="80.3106%" y="933" width="0.1921%" height="15" fill="rgb(241,18,35)" fg:x="99096" fg:w="237"/><text x="80.5606%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (236 samples, 0.19%)</title><rect x="80.3114%" y="917" width="0.1913%" height="15" fill="rgb(227,214,53)" fg:x="99097" fg:w="236"/><text x="80.5614%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (229 samples, 0.19%)</title><rect x="80.3170%" y="901" width="0.1856%" height="15" fill="rgb(224,107,51)" fg:x="99104" fg:w="229"/><text x="80.5670%" y="911.50"></text></g><g><title>event_listener::full_fence (1,297 samples, 1.05%)</title><rect x="80.5026%" y="949" width="1.0511%" height="15" fill="rgb(248,60,28)" fg:x="99333" fg:w="1297"/><text x="80.7526%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,286 samples, 1.04%)</title><rect x="80.5115%" y="933" width="1.0422%" height="15" fill="rgb(249,101,23)" fg:x="99344" fg:w="1286"/><text x="80.7615%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,286 samples, 1.04%)</title><rect x="80.5115%" y="917" width="1.0422%" height="15" fill="rgb(228,51,19)" fg:x="99344" fg:w="1286"/><text x="80.7615%" y="927.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,912 samples, 2.36%)</title><rect x="79.1954%" y="981" width="2.3600%" height="15" fill="rgb(213,20,6)" fg:x="97720" fg:w="2912"/><text x="79.4454%" y="991.50">a..</text></g><g><title>event_listener::Event::notify (1,607 samples, 1.30%)</title><rect x="80.2530%" y="965" width="1.3024%" height="15" fill="rgb(212,124,10)" fg:x="99025" fg:w="1607"/><text x="80.5030%" y="975.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (25 samples, 0.02%)</title><rect x="81.5554%" y="981" width="0.0203%" height="15" fill="rgb(248,3,40)" fg:x="100632" fg:w="25"/><text x="81.8054%" y="991.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,297 samples, 2.67%)</title><rect x="79.1460%" y="997" width="2.6720%" height="15" fill="rgb(223,178,23)" fg:x="97659" fg:w="3297"/><text x="79.3960%" y="1007.50">&lt;a..</text></g><g><title>event_listener::Event::notify (290 samples, 0.24%)</title><rect x="81.5829%" y="981" width="0.2350%" height="15" fill="rgb(240,132,45)" fg:x="100666" fg:w="290"/><text x="81.8329%" y="991.50"></text></g><g><title>event_listener::full_fence (272 samples, 0.22%)</title><rect x="81.5975%" y="965" width="0.2204%" height="15" fill="rgb(245,164,36)" fg:x="100684" fg:w="272"/><text x="81.8475%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (262 samples, 0.21%)</title><rect x="81.6056%" y="949" width="0.2123%" height="15" fill="rgb(231,188,53)" fg:x="100694" fg:w="262"/><text x="81.8556%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (262 samples, 0.21%)</title><rect x="81.6056%" y="933" width="0.2123%" height="15" fill="rgb(237,198,39)" fg:x="100694" fg:w="262"/><text x="81.8556%" y="943.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (13 samples, 0.01%)</title><rect x="81.8180%" y="997" width="0.0105%" height="15" fill="rgb(223,120,35)" fg:x="100956" fg:w="13"/><text x="82.0680%" y="1007.50"></text></g><g><title>[libc-2.31.so] (819 samples, 0.66%)</title><rect x="81.8285%" y="997" width="0.6637%" height="15" fill="rgb(253,107,49)" fg:x="100969" fg:w="819"/><text x="82.0785%" y="1007.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (14,465 samples, 11.72%)</title><rect x="70.7880%" y="1077" width="11.7229%" height="15" fill="rgb(216,44,31)" fg:x="87346" fg:w="14465"/><text x="71.0380%" y="1087.50">tremor_runtime::p..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.62%)</title><rect x="78.8907%" y="1061" width="3.6202%" height="15" fill="rgb(253,87,21)" fg:x="97344" fg:w="4467"/><text x="79.1407%" y="1071.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,467 samples, 3.62%)</title><rect x="78.8907%" y="1045" width="3.6202%" height="15" fill="rgb(226,18,2)" fg:x="97344" fg:w="4467"/><text x="79.1407%" y="1055.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.62%)</title><rect x="78.8907%" y="1029" width="3.6202%" height="15" fill="rgb(216,8,46)" fg:x="97344" fg:w="4467"/><text x="79.1407%" y="1039.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,295 samples, 3.48%)</title><rect x="79.0301%" y="1013" width="3.4808%" height="15" fill="rgb(226,140,39)" fg:x="97516" fg:w="4295"/><text x="79.2801%" y="1023.50">tre..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (23 samples, 0.02%)</title><rect x="82.4922%" y="997" width="0.0186%" height="15" fill="rgb(221,194,54)" fg:x="101788" fg:w="23"/><text x="82.7422%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (15 samples, 0.01%)</title><rect x="82.4987%" y="981" width="0.0122%" height="15" fill="rgb(213,92,11)" fg:x="101796" fg:w="15"/><text x="82.7487%" y="991.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (50 samples, 0.04%)</title><rect x="82.5109%" y="1077" width="0.0405%" height="15" fill="rgb(229,162,46)" fg:x="101811" fg:w="50"/><text x="82.7609%" y="1087.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (16 samples, 0.01%)</title><rect x="82.5514%" y="1077" width="0.0130%" height="15" fill="rgb(214,111,36)" fg:x="101861" fg:w="16"/><text x="82.8014%" y="1087.50"></text></g><g><title>[unknown] (96,400 samples, 78.13%)</title><rect x="4.4582%" y="1093" width="78.1256%" height="15" fill="rgb(207,6,21)" fg:x="5501" fg:w="96400"/><text x="4.7082%" y="1103.50">[unknown]</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="82.5838%" y="1077" width="0.0211%" height="15" fill="rgb(213,127,38)" fg:x="101901" fg:w="26"/><text x="82.8338%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="82.6049%" y="1077" width="0.0162%" height="15" fill="rgb(238,118,32)" fg:x="101927" fg:w="20"/><text x="82.8549%" y="1087.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="82.6211%" y="1077" width="0.0138%" height="15" fill="rgb(240,139,39)" fg:x="101947" fg:w="17"/><text x="82.8711%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (43 samples, 0.03%)</title><rect x="82.6349%" y="1077" width="0.0348%" height="15" fill="rgb(235,10,37)" fg:x="101964" fg:w="43"/><text x="82.8849%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="82.6414%" y="1061" width="0.0284%" height="15" fill="rgb(249,171,38)" fg:x="101972" fg:w="35"/><text x="82.8914%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (33 samples, 0.03%)</title><rect x="82.6430%" y="1045" width="0.0267%" height="15" fill="rgb(242,144,32)" fg:x="101974" fg:w="33"/><text x="82.8930%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="82.6697%" y="1077" width="0.0178%" height="15" fill="rgb(217,117,21)" fg:x="102007" fg:w="22"/><text x="82.9197%" y="1087.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (44 samples, 0.04%)</title><rect x="82.6957%" y="1077" width="0.0357%" height="15" fill="rgb(249,87,1)" fg:x="102039" fg:w="44"/><text x="82.9457%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="82.7419%" y="981" width="0.0122%" height="15" fill="rgb(248,196,48)" fg:x="102096" fg:w="15"/><text x="82.9919%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (27 samples, 0.02%)</title><rect x="82.7362%" y="1077" width="0.0219%" height="15" fill="rgb(251,206,33)" fg:x="102089" fg:w="27"/><text x="82.9862%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (27 samples, 0.02%)</title><rect x="82.7362%" y="1061" width="0.0219%" height="15" fill="rgb(232,141,28)" fg:x="102089" fg:w="27"/><text x="82.9862%" y="1071.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (27 samples, 0.02%)</title><rect x="82.7362%" y="1045" width="0.0219%" height="15" fill="rgb(209,167,14)" fg:x="102089" fg:w="27"/><text x="82.9862%" y="1055.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (27 samples, 0.02%)</title><rect x="82.7362%" y="1029" width="0.0219%" height="15" fill="rgb(225,11,50)" fg:x="102089" fg:w="27"/><text x="82.9862%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="82.7362%" y="1013" width="0.0219%" height="15" fill="rgb(209,50,20)" fg:x="102089" fg:w="27"/><text x="82.9862%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (27 samples, 0.02%)</title><rect x="82.7362%" y="997" width="0.0219%" height="15" fill="rgb(212,17,46)" fg:x="102089" fg:w="27"/><text x="82.9862%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="82.8594%" y="1061" width="0.0340%" height="15" fill="rgb(216,101,39)" fg:x="102241" fg:w="42"/><text x="83.1094%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (40 samples, 0.03%)</title><rect x="82.8610%" y="1045" width="0.0324%" height="15" fill="rgb(212,228,48)" fg:x="102243" fg:w="40"/><text x="83.1110%" y="1055.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (25 samples, 0.02%)</title><rect x="82.8731%" y="1029" width="0.0203%" height="15" fill="rgb(250,6,50)" fg:x="102258" fg:w="25"/><text x="83.1231%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (25 samples, 0.02%)</title><rect x="82.8731%" y="1013" width="0.0203%" height="15" fill="rgb(250,160,48)" fg:x="102258" fg:w="25"/><text x="83.1231%" y="1023.50"></text></g><g><title>__dso_handle (400 samples, 0.32%)</title><rect x="82.5838%" y="1093" width="0.3242%" height="15" fill="rgb(244,216,33)" fg:x="101901" fg:w="400"/><text x="82.8338%" y="1103.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (179 samples, 0.15%)</title><rect x="82.7629%" y="1077" width="0.1451%" height="15" fill="rgb(207,157,5)" fg:x="102122" fg:w="179"/><text x="83.0129%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (18 samples, 0.01%)</title><rect x="82.8934%" y="1061" width="0.0146%" height="15" fill="rgb(228,199,8)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="1071.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="82.8934%" y="1045" width="0.0146%" height="15" fill="rgb(227,80,20)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (18 samples, 0.01%)</title><rect x="82.8934%" y="1029" width="0.0146%" height="15" fill="rgb(222,9,33)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18 samples, 0.01%)</title><rect x="82.8934%" y="1013" width="0.0146%" height="15" fill="rgb(239,44,28)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18 samples, 0.01%)</title><rect x="82.8934%" y="997" width="0.0146%" height="15" fill="rgb(249,187,43)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="82.8934%" y="981" width="0.0146%" height="15" fill="rgb(216,141,28)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="82.8934%" y="965" width="0.0146%" height="15" fill="rgb(230,154,53)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="82.8934%" y="949" width="0.0146%" height="15" fill="rgb(227,82,4)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="959.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="82.8934%" y="933" width="0.0146%" height="15" fill="rgb(220,107,16)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="943.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="82.8934%" y="917" width="0.0146%" height="15" fill="rgb(207,187,2)" fg:x="102283" fg:w="18"/><text x="83.1434%" y="927.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (29 samples, 0.02%)</title><rect x="82.9145%" y="1093" width="0.0235%" height="15" fill="rgb(210,162,52)" fg:x="102309" fg:w="29"/><text x="83.1645%" y="1103.50"></text></g><g><title>abi_stable::erased_types::iterator::next (17 samples, 0.01%)</title><rect x="82.9380%" y="1093" width="0.0138%" height="15" fill="rgb(217,216,49)" fg:x="102338" fg:w="17"/><text x="83.1880%" y="1103.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="82.9518%" y="1093" width="0.0138%" height="15" fill="rgb(218,146,49)" fg:x="102355" fg:w="17"/><text x="83.2018%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (13 samples, 0.01%)</title><rect x="82.9663%" y="1093" width="0.0105%" height="15" fill="rgb(216,55,40)" fg:x="102373" fg:w="13"/><text x="83.2163%" y="1103.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (21 samples, 0.02%)</title><rect x="82.9858%" y="1093" width="0.0170%" height="15" fill="rgb(208,196,21)" fg:x="102397" fg:w="21"/><text x="83.2358%" y="1103.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (17 samples, 0.01%)</title><rect x="83.0028%" y="1093" width="0.0138%" height="15" fill="rgb(242,117,42)" fg:x="102418" fg:w="17"/><text x="83.2528%" y="1103.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (13 samples, 0.01%)</title><rect x="83.0166%" y="1093" width="0.0105%" height="15" fill="rgb(210,11,23)" fg:x="102435" fg:w="13"/><text x="83.2666%" y="1103.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (16 samples, 0.01%)</title><rect x="83.0271%" y="1077" width="0.0130%" height="15" fill="rgb(217,110,2)" fg:x="102448" fg:w="16"/><text x="83.2771%" y="1087.50"></text></g><g><title>anon.07842ee8e079d9ed68873cd915a87b2c.9.llvm.16273340636564346165 (24 samples, 0.02%)</title><rect x="83.0271%" y="1093" width="0.0195%" height="15" fill="rgb(229,77,54)" fg:x="102448" fg:w="24"/><text x="83.2771%" y="1103.50"></text></g><g><title>anon.4e27793df7385fd523f730927e4d887f.28.llvm.14818730262370577677 (14 samples, 0.01%)</title><rect x="83.0466%" y="1093" width="0.0113%" height="15" fill="rgb(218,53,16)" fg:x="102472" fg:w="14"/><text x="83.2966%" y="1103.50"></text></g><g><title>anon.806c3673e558314b3649691fa743c51c.18.llvm.3811385952936629605 (13 samples, 0.01%)</title><rect x="83.0782%" y="1093" width="0.0105%" height="15" fill="rgb(215,38,13)" fg:x="102511" fg:w="13"/><text x="83.3282%" y="1103.50"></text></g><g><title>anon.806c3673e558314b3649691fa743c51c.375.llvm.3811385952936629605 (15 samples, 0.01%)</title><rect x="83.0887%" y="1093" width="0.0122%" height="15" fill="rgb(235,42,18)" fg:x="102524" fg:w="15"/><text x="83.3387%" y="1103.50"></text></g><g><title>anon.9d5bffa143ece3cd04934c706b3d26f1.2787.llvm.10554089737244749949 (17 samples, 0.01%)</title><rect x="83.1074%" y="1093" width="0.0138%" height="15" fill="rgb(219,66,54)" fg:x="102547" fg:w="17"/><text x="83.3574%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (17 samples, 0.01%)</title><rect x="83.1074%" y="1077" width="0.0138%" height="15" fill="rgb(222,205,4)" fg:x="102547" fg:w="17"/><text x="83.3574%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (13 samples, 0.01%)</title><rect x="83.1106%" y="1061" width="0.0105%" height="15" fill="rgb(227,213,46)" fg:x="102551" fg:w="13"/><text x="83.3606%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (13 samples, 0.01%)</title><rect x="83.1106%" y="1045" width="0.0105%" height="15" fill="rgb(250,145,42)" fg:x="102551" fg:w="13"/><text x="83.3606%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (40 samples, 0.03%)</title><rect x="83.1617%" y="1061" width="0.0324%" height="15" fill="rgb(219,15,2)" fg:x="102614" fg:w="40"/><text x="83.4117%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (40 samples, 0.03%)</title><rect x="83.1617%" y="1045" width="0.0324%" height="15" fill="rgb(231,181,52)" fg:x="102614" fg:w="40"/><text x="83.4117%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (63 samples, 0.05%)</title><rect x="83.1446%" y="1077" width="0.0511%" height="15" fill="rgb(235,1,42)" fg:x="102593" fg:w="63"/><text x="83.3946%" y="1087.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (15 samples, 0.01%)</title><rect x="83.2168%" y="1029" width="0.0122%" height="15" fill="rgb(249,88,27)" fg:x="102682" fg:w="15"/><text x="83.4668%" y="1039.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="83.1957%" y="1077" width="0.0340%" height="15" fill="rgb(235,145,16)" fg:x="102656" fg:w="42"/><text x="83.4457%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (41 samples, 0.03%)</title><rect x="83.1965%" y="1061" width="0.0332%" height="15" fill="rgb(237,114,19)" fg:x="102657" fg:w="41"/><text x="83.4465%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="83.2014%" y="1045" width="0.0284%" height="15" fill="rgb(238,51,50)" fg:x="102663" fg:w="35"/><text x="83.4514%" y="1055.50"></text></g><g><title>parking::Inner::park (14 samples, 0.01%)</title><rect x="83.2508%" y="1077" width="0.0113%" height="15" fill="rgb(205,194,25)" fg:x="102724" fg:w="14"/><text x="83.5008%" y="1087.50"></text></g><g><title>polling::epoll::Poller::modify (18 samples, 0.01%)</title><rect x="83.2622%" y="1077" width="0.0146%" height="15" fill="rgb(215,203,17)" fg:x="102738" fg:w="18"/><text x="83.5122%" y="1087.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (165 samples, 0.13%)</title><rect x="83.1438%" y="1093" width="0.1337%" height="15" fill="rgb(233,112,49)" fg:x="102592" fg:w="165"/><text x="83.3938%" y="1103.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.05%)</title><rect x="83.7719%" y="485" width="0.0486%" height="15" fill="rgb(241,130,26)" fg:x="103367" fg:w="60"/><text x="84.0219%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::advance_by (15 samples, 0.01%)</title><rect x="83.8975%" y="405" width="0.0122%" height="15" fill="rgb(252,223,19)" fg:x="103522" fg:w="15"/><text x="84.1475%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (25 samples, 0.02%)</title><rect x="83.8959%" y="421" width="0.0203%" height="15" fill="rgb(211,95,25)" fg:x="103520" fg:w="25"/><text x="84.1459%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (54 samples, 0.04%)</title><rect x="84.0653%" y="389" width="0.0438%" height="15" fill="rgb(251,182,27)" fg:x="103729" fg:w="54"/><text x="84.3153%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (54 samples, 0.04%)</title><rect x="84.0653%" y="373" width="0.0438%" height="15" fill="rgb(238,24,4)" fg:x="103729" fg:w="54"/><text x="84.3153%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (46 samples, 0.04%)</title><rect x="84.0718%" y="357" width="0.0373%" height="15" fill="rgb(224,220,25)" fg:x="103737" fg:w="46"/><text x="84.3218%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (44 samples, 0.04%)</title><rect x="84.0734%" y="341" width="0.0357%" height="15" fill="rgb(239,133,26)" fg:x="103739" fg:w="44"/><text x="84.3234%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (44 samples, 0.04%)</title><rect x="84.0734%" y="325" width="0.0357%" height="15" fill="rgb(211,94,48)" fg:x="103739" fg:w="44"/><text x="84.3234%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (165 samples, 0.13%)</title><rect x="84.1091%" y="389" width="0.1337%" height="15" fill="rgb(239,87,6)" fg:x="103783" fg:w="165"/><text x="84.3591%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (608 samples, 0.49%)</title><rect x="83.8278%" y="437" width="0.4927%" height="15" fill="rgb(227,62,0)" fg:x="103436" fg:w="608"/><text x="84.0778%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (499 samples, 0.40%)</title><rect x="83.9162%" y="421" width="0.4044%" height="15" fill="rgb(211,226,4)" fg:x="103545" fg:w="499"/><text x="84.1662%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (421 samples, 0.34%)</title><rect x="83.9794%" y="405" width="0.3412%" height="15" fill="rgb(253,38,52)" fg:x="103623" fg:w="421"/><text x="84.2294%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (96 samples, 0.08%)</title><rect x="84.2428%" y="389" width="0.0778%" height="15" fill="rgb(229,126,40)" fg:x="103948" fg:w="96"/><text x="84.4928%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (96 samples, 0.08%)</title><rect x="84.2428%" y="373" width="0.0778%" height="15" fill="rgb(229,165,44)" fg:x="103948" fg:w="96"/><text x="84.4928%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (43 samples, 0.03%)</title><rect x="84.2857%" y="357" width="0.0348%" height="15" fill="rgb(247,95,47)" fg:x="104001" fg:w="43"/><text x="84.5357%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (43 samples, 0.03%)</title><rect x="84.2857%" y="341" width="0.0348%" height="15" fill="rgb(216,140,30)" fg:x="104001" fg:w="43"/><text x="84.5357%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="84.2995%" y="325" width="0.0211%" height="15" fill="rgb(246,214,8)" fg:x="104018" fg:w="26"/><text x="84.5495%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (26 samples, 0.02%)</title><rect x="84.2995%" y="309" width="0.0211%" height="15" fill="rgb(227,224,15)" fg:x="104018" fg:w="26"/><text x="84.5495%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (675 samples, 0.55%)</title><rect x="83.8205%" y="485" width="0.5470%" height="15" fill="rgb(233,175,4)" fg:x="103427" fg:w="675"/><text x="84.0705%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (675 samples, 0.55%)</title><rect x="83.8205%" y="469" width="0.5470%" height="15" fill="rgb(221,66,45)" fg:x="103427" fg:w="675"/><text x="84.0705%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (675 samples, 0.55%)</title><rect x="83.8205%" y="453" width="0.5470%" height="15" fill="rgb(221,178,18)" fg:x="103427" fg:w="675"/><text x="84.0705%" y="463.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (58 samples, 0.05%)</title><rect x="84.3206%" y="437" width="0.0470%" height="15" fill="rgb(213,81,29)" fg:x="104044" fg:w="58"/><text x="84.5706%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,413 samples, 1.15%)</title><rect x="84.7817%" y="453" width="1.1451%" height="15" fill="rgb(220,89,49)" fg:x="104613" fg:w="1413"/><text x="85.0317%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (928 samples, 0.75%)</title><rect x="85.1748%" y="437" width="0.7521%" height="15" fill="rgb(227,60,33)" fg:x="105098" fg:w="928"/><text x="85.4248%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (928 samples, 0.75%)</title><rect x="85.1748%" y="421" width="0.7521%" height="15" fill="rgb(205,113,12)" fg:x="105098" fg:w="928"/><text x="85.4248%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,791 samples, 1.45%)</title><rect x="84.4972%" y="469" width="1.4515%" height="15" fill="rgb(211,32,1)" fg:x="104262" fg:w="1791"/><text x="84.7472%" y="479.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (27 samples, 0.02%)</title><rect x="85.9269%" y="453" width="0.0219%" height="15" fill="rgb(246,2,12)" fg:x="106026" fg:w="27"/><text x="86.1769%" y="463.50"></text></g><g><title>async_executor::steal (1,955 samples, 1.58%)</title><rect x="84.3676%" y="485" width="1.5844%" height="15" fill="rgb(243,37,27)" fg:x="104102" fg:w="1955"/><text x="84.6176%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (2,403 samples, 1.95%)</title><rect x="86.8694%" y="453" width="1.9475%" height="15" fill="rgb(248,211,31)" fg:x="107189" fg:w="2403"/><text x="87.1194%" y="463.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,362 samples, 1.91%)</title><rect x="86.9026%" y="437" width="1.9142%" height="15" fill="rgb(242,146,47)" fg:x="107230" fg:w="2362"/><text x="87.1526%" y="447.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,362 samples, 1.91%)</title><rect x="86.9026%" y="421" width="1.9142%" height="15" fill="rgb(206,70,20)" fg:x="107230" fg:w="2362"/><text x="87.1526%" y="431.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,362 samples, 1.91%)</title><rect x="86.9026%" y="405" width="1.9142%" height="15" fill="rgb(215,10,51)" fg:x="107230" fg:w="2362"/><text x="87.1526%" y="415.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,351 samples, 2.72%)</title><rect x="86.2170%" y="469" width="2.7158%" height="15" fill="rgb(243,178,53)" fg:x="106384" fg:w="3351"/><text x="86.4670%" y="479.50">co..</text></g><g><title>core::sync::atomic::AtomicUsize::load (143 samples, 0.12%)</title><rect x="88.8169%" y="453" width="0.1159%" height="15" fill="rgb(233,221,20)" fg:x="109592" fg:w="143"/><text x="89.0669%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (82 samples, 0.07%)</title><rect x="88.8663%" y="437" width="0.0665%" height="15" fill="rgb(218,95,35)" fg:x="109653" fg:w="82"/><text x="89.1163%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (320 samples, 0.26%)</title><rect x="89.0081%" y="453" width="0.2593%" height="15" fill="rgb(229,13,5)" fg:x="109828" fg:w="320"/><text x="89.2581%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (320 samples, 0.26%)</title><rect x="89.0081%" y="437" width="0.2593%" height="15" fill="rgb(252,164,30)" fg:x="109828" fg:w="320"/><text x="89.2581%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (320 samples, 0.26%)</title><rect x="89.0081%" y="421" width="0.2593%" height="15" fill="rgb(232,68,36)" fg:x="109828" fg:w="320"/><text x="89.2581%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (320 samples, 0.26%)</title><rect x="89.0081%" y="405" width="0.2593%" height="15" fill="rgb(219,59,54)" fg:x="109828" fg:w="320"/><text x="89.2581%" y="415.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (65 samples, 0.05%)</title><rect x="89.2772%" y="453" width="0.0527%" height="15" fill="rgb(250,92,33)" fg:x="110160" fg:w="65"/><text x="89.5272%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (63 samples, 0.05%)</title><rect x="89.2788%" y="437" width="0.0511%" height="15" fill="rgb(229,162,54)" fg:x="110162" fg:w="63"/><text x="89.5288%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (63 samples, 0.05%)</title><rect x="89.2788%" y="421" width="0.0511%" height="15" fill="rgb(244,114,52)" fg:x="110162" fg:w="63"/><text x="89.5288%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (26 samples, 0.02%)</title><rect x="89.3380%" y="453" width="0.0211%" height="15" fill="rgb(212,211,43)" fg:x="110235" fg:w="26"/><text x="89.5880%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="89.3380%" y="437" width="0.0211%" height="15" fill="rgb(226,147,8)" fg:x="110235" fg:w="26"/><text x="89.5880%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (200 samples, 0.16%)</title><rect x="89.3590%" y="453" width="0.1621%" height="15" fill="rgb(226,23,13)" fg:x="110261" fg:w="200"/><text x="89.6090%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (200 samples, 0.16%)</title><rect x="89.3590%" y="437" width="0.1621%" height="15" fill="rgb(240,63,4)" fg:x="110261" fg:w="200"/><text x="89.6090%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (190 samples, 0.15%)</title><rect x="89.5211%" y="453" width="0.1540%" height="15" fill="rgb(221,1,32)" fg:x="110461" fg:w="190"/><text x="89.7711%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_or (190 samples, 0.15%)</title><rect x="89.5211%" y="437" width="0.1540%" height="15" fill="rgb(242,117,10)" fg:x="110461" fg:w="190"/><text x="89.7711%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,839 samples, 3.92%)</title><rect x="85.9520%" y="485" width="3.9217%" height="15" fill="rgb(249,172,44)" fg:x="106057" fg:w="4839"/><text x="86.2020%" y="495.50">conc..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,161 samples, 0.94%)</title><rect x="88.9327%" y="469" width="0.9409%" height="15" fill="rgb(244,46,45)" fg:x="109735" fg:w="1161"/><text x="89.1827%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (245 samples, 0.20%)</title><rect x="89.6751%" y="453" width="0.1986%" height="15" fill="rgb(206,43,17)" fg:x="110651" fg:w="245"/><text x="89.9251%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (245 samples, 0.20%)</title><rect x="89.6751%" y="437" width="0.1986%" height="15" fill="rgb(239,218,39)" fg:x="110651" fg:w="245"/><text x="89.9251%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (259 samples, 0.21%)</title><rect x="89.8737%" y="485" width="0.2099%" height="15" fill="rgb(208,169,54)" fg:x="110896" fg:w="259"/><text x="90.1237%" y="495.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (259 samples, 0.21%)</title><rect x="89.8737%" y="469" width="0.2099%" height="15" fill="rgb(247,25,42)" fg:x="110896" fg:w="259"/><text x="90.1237%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (259 samples, 0.21%)</title><rect x="89.8737%" y="453" width="0.2099%" height="15" fill="rgb(226,23,31)" fg:x="110896" fg:w="259"/><text x="90.1237%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (259 samples, 0.21%)</title><rect x="89.8737%" y="437" width="0.2099%" height="15" fill="rgb(247,16,28)" fg:x="110896" fg:w="259"/><text x="90.1237%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (241 samples, 0.20%)</title><rect x="89.8882%" y="421" width="0.1953%" height="15" fill="rgb(231,147,38)" fg:x="110914" fg:w="241"/><text x="90.1382%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (241 samples, 0.20%)</title><rect x="89.8882%" y="405" width="0.1953%" height="15" fill="rgb(253,81,48)" fg:x="110914" fg:w="241"/><text x="90.1382%" y="415.50"></text></g><g><title>fastrand::usize (48 samples, 0.04%)</title><rect x="90.0836%" y="485" width="0.0389%" height="15" fill="rgb(249,222,43)" fg:x="111155" fg:w="48"/><text x="90.3336%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (44 samples, 0.04%)</title><rect x="90.0868%" y="469" width="0.0357%" height="15" fill="rgb(221,3,27)" fg:x="111159" fg:w="44"/><text x="90.3368%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (44 samples, 0.04%)</title><rect x="90.0868%" y="453" width="0.0357%" height="15" fill="rgb(228,180,5)" fg:x="111159" fg:w="44"/><text x="90.3368%" y="463.50"></text></g><g><title>fastrand::usize::{{closure}} (29 samples, 0.02%)</title><rect x="90.0990%" y="437" width="0.0235%" height="15" fill="rgb(227,131,42)" fg:x="111174" fg:w="29"/><text x="90.3490%" y="447.50"></text></g><g><title>fastrand::Rng::usize (29 samples, 0.02%)</title><rect x="90.0990%" y="421" width="0.0235%" height="15" fill="rgb(212,3,39)" fg:x="111174" fg:w="29"/><text x="90.3490%" y="431.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (22 samples, 0.02%)</title><rect x="90.1046%" y="405" width="0.0178%" height="15" fill="rgb(226,45,5)" fg:x="111181" fg:w="22"/><text x="90.3546%" y="415.50"></text></g><g><title>std::sync::poison::Flag::get (47 samples, 0.04%)</title><rect x="90.1225%" y="437" width="0.0381%" height="15" fill="rgb(215,167,45)" fg:x="111203" fg:w="47"/><text x="90.3725%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (47 samples, 0.04%)</title><rect x="90.1225%" y="421" width="0.0381%" height="15" fill="rgb(250,218,53)" fg:x="111203" fg:w="47"/><text x="90.3725%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (47 samples, 0.04%)</title><rect x="90.1225%" y="405" width="0.0381%" height="15" fill="rgb(207,140,0)" fg:x="111203" fg:w="47"/><text x="90.3725%" y="415.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (57 samples, 0.05%)</title><rect x="90.1225%" y="469" width="0.0462%" height="15" fill="rgb(238,133,51)" fg:x="111203" fg:w="57"/><text x="90.3725%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (57 samples, 0.05%)</title><rect x="90.1225%" y="453" width="0.0462%" height="15" fill="rgb(218,203,53)" fg:x="111203" fg:w="57"/><text x="90.3725%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (419 samples, 0.34%)</title><rect x="90.1759%" y="437" width="0.3396%" height="15" fill="rgb(226,184,25)" fg:x="111269" fg:w="419"/><text x="90.4259%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (419 samples, 0.34%)</title><rect x="90.1759%" y="421" width="0.3396%" height="15" fill="rgb(231,121,21)" fg:x="111269" fg:w="419"/><text x="90.4259%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (100 samples, 0.08%)</title><rect x="90.5155%" y="437" width="0.0810%" height="15" fill="rgb(251,14,34)" fg:x="111688" fg:w="100"/><text x="90.7655%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (100 samples, 0.08%)</title><rect x="90.5155%" y="421" width="0.0810%" height="15" fill="rgb(249,193,11)" fg:x="111688" fg:w="100"/><text x="90.7655%" y="431.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,738 samples, 7.08%)</title><rect x="83.5264%" y="501" width="7.0816%" height="15" fill="rgb(220,172,37)" fg:x="103064" fg:w="8738"/><text x="83.7764%" y="511.50">async_exec..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (599 samples, 0.49%)</title><rect x="90.1225%" y="485" width="0.4854%" height="15" fill="rgb(231,229,43)" fg:x="111203" fg:w="599"/><text x="90.3725%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (542 samples, 0.44%)</title><rect x="90.1687%" y="469" width="0.4393%" height="15" fill="rgb(250,161,5)" fg:x="111260" fg:w="542"/><text x="90.4187%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (542 samples, 0.44%)</title><rect x="90.1687%" y="453" width="0.4393%" height="15" fill="rgb(218,225,18)" fg:x="111260" fg:w="542"/><text x="90.4187%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (49 samples, 0.04%)</title><rect x="90.6168%" y="421" width="0.0397%" height="15" fill="rgb(245,45,42)" fg:x="111813" fg:w="49"/><text x="90.8668%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (49 samples, 0.04%)</title><rect x="90.6168%" y="405" width="0.0397%" height="15" fill="rgb(211,115,1)" fg:x="111813" fg:w="49"/><text x="90.8668%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (50 samples, 0.04%)</title><rect x="90.6168%" y="485" width="0.0405%" height="15" fill="rgb(248,133,52)" fg:x="111813" fg:w="50"/><text x="90.8668%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="90.6168%" y="469" width="0.0405%" height="15" fill="rgb(238,100,21)" fg:x="111813" fg:w="50"/><text x="90.8668%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.04%)</title><rect x="90.6168%" y="453" width="0.0405%" height="15" fill="rgb(247,144,11)" fg:x="111813" fg:w="50"/><text x="90.8668%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.04%)</title><rect x="90.6168%" y="437" width="0.0405%" height="15" fill="rgb(206,164,16)" fg:x="111813" fg:w="50"/><text x="90.8668%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (93 samples, 0.08%)</title><rect x="90.6573%" y="485" width="0.0754%" height="15" fill="rgb(222,34,3)" fg:x="111863" fg:w="93"/><text x="90.9073%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (93 samples, 0.08%)</title><rect x="90.6573%" y="469" width="0.0754%" height="15" fill="rgb(248,82,4)" fg:x="111863" fg:w="93"/><text x="90.9073%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (25 samples, 0.02%)</title><rect x="90.7449%" y="405" width="0.0203%" height="15" fill="rgb(228,81,46)" fg:x="111971" fg:w="25"/><text x="90.9949%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="90.7449%" y="389" width="0.0203%" height="15" fill="rgb(227,67,47)" fg:x="111971" fg:w="25"/><text x="90.9949%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::notify (71 samples, 0.06%)</title><rect x="90.7376%" y="437" width="0.0575%" height="15" fill="rgb(215,93,53)" fg:x="111962" fg:w="71"/><text x="90.9876%" y="447.50"></text></g><g><title>polling::Poller::notify (63 samples, 0.05%)</title><rect x="90.7441%" y="421" width="0.0511%" height="15" fill="rgb(248,194,39)" fg:x="111970" fg:w="63"/><text x="90.9941%" y="431.50"></text></g><g><title>polling::epoll::Poller::notify (36 samples, 0.03%)</title><rect x="90.7659%" y="405" width="0.0292%" height="15" fill="rgb(215,5,19)" fg:x="111997" fg:w="36"/><text x="91.0159%" y="415.50"></text></g><g><title>__libc_write (35 samples, 0.03%)</title><rect x="90.7667%" y="389" width="0.0284%" height="15" fill="rgb(226,215,51)" fg:x="111998" fg:w="35"/><text x="91.0167%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (14 samples, 0.01%)</title><rect x="90.7951%" y="437" width="0.0113%" height="15" fill="rgb(225,56,26)" fg:x="112033" fg:w="14"/><text x="91.0451%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="90.7951%" y="421" width="0.0113%" height="15" fill="rgb(222,75,29)" fg:x="112033" fg:w="14"/><text x="91.0451%" y="431.50"></text></g><g><title>core::mem::drop (19 samples, 0.02%)</title><rect x="90.8437%" y="405" width="0.0154%" height="15" fill="rgb(236,139,6)" fg:x="112093" fg:w="19"/><text x="91.0937%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (19 samples, 0.02%)</title><rect x="90.8437%" y="389" width="0.0154%" height="15" fill="rgb(223,137,36)" fg:x="112093" fg:w="19"/><text x="91.0937%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="90.8437%" y="373" width="0.0154%" height="15" fill="rgb(226,99,2)" fg:x="112093" fg:w="19"/><text x="91.0937%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.01%)</title><rect x="90.8446%" y="357" width="0.0146%" height="15" fill="rgb(206,133,23)" fg:x="112094" fg:w="18"/><text x="91.0946%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (18 samples, 0.01%)</title><rect x="90.8446%" y="341" width="0.0146%" height="15" fill="rgb(243,173,15)" fg:x="112094" fg:w="18"/><text x="91.0946%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.01%)</title><rect x="90.8446%" y="325" width="0.0146%" height="15" fill="rgb(228,69,28)" fg:x="112094" fg:w="18"/><text x="91.0946%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.01%)</title><rect x="90.8446%" y="309" width="0.0146%" height="15" fill="rgb(212,51,22)" fg:x="112094" fg:w="18"/><text x="91.0946%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (139 samples, 0.11%)</title><rect x="90.8591%" y="405" width="0.1127%" height="15" fill="rgb(227,113,0)" fg:x="112112" fg:w="139"/><text x="91.1091%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (139 samples, 0.11%)</title><rect x="90.8591%" y="389" width="0.1127%" height="15" fill="rgb(252,84,27)" fg:x="112112" fg:w="139"/><text x="91.1091%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (18 samples, 0.01%)</title><rect x="90.9718%" y="357" width="0.0146%" height="15" fill="rgb(223,145,39)" fg:x="112251" fg:w="18"/><text x="91.2218%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.01%)</title><rect x="90.9718%" y="341" width="0.0146%" height="15" fill="rgb(239,219,30)" fg:x="112251" fg:w="18"/><text x="91.2218%" y="351.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (63 samples, 0.05%)</title><rect x="90.9718%" y="405" width="0.0511%" height="15" fill="rgb(224,196,39)" fg:x="112251" fg:w="63"/><text x="91.2218%" y="415.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (63 samples, 0.05%)</title><rect x="90.9718%" y="389" width="0.0511%" height="15" fill="rgb(205,35,43)" fg:x="112251" fg:w="63"/><text x="91.2218%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (63 samples, 0.05%)</title><rect x="90.9718%" y="373" width="0.0511%" height="15" fill="rgb(228,201,21)" fg:x="112251" fg:w="63"/><text x="91.2218%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wake (45 samples, 0.04%)</title><rect x="90.9864%" y="357" width="0.0365%" height="15" fill="rgb(237,118,16)" fg:x="112269" fg:w="45"/><text x="91.2364%" y="367.50"></text></g><g><title>syscall (44 samples, 0.04%)</title><rect x="90.9872%" y="341" width="0.0357%" height="15" fill="rgb(241,17,19)" fg:x="112270" fg:w="44"/><text x="91.2372%" y="351.50"></text></g><g><title>parking::Unparker::unpark (285 samples, 0.23%)</title><rect x="90.8065%" y="437" width="0.2310%" height="15" fill="rgb(214,10,25)" fg:x="112047" fg:w="285"/><text x="91.0565%" y="447.50"></text></g><g><title>parking::Inner::unpark (250 samples, 0.20%)</title><rect x="90.8348%" y="421" width="0.2026%" height="15" fill="rgb(238,37,29)" fg:x="112082" fg:w="250"/><text x="91.0848%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.01%)</title><rect x="91.0228%" y="405" width="0.0146%" height="15" fill="rgb(253,83,25)" fg:x="112314" fg:w="18"/><text x="91.2728%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.01%)</title><rect x="91.0228%" y="389" width="0.0146%" height="15" fill="rgb(234,192,12)" fg:x="112314" fg:w="18"/><text x="91.2728%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (18 samples, 0.01%)</title><rect x="91.0228%" y="373" width="0.0146%" height="15" fill="rgb(241,216,45)" fg:x="112314" fg:w="18"/><text x="91.2728%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (18 samples, 0.01%)</title><rect x="91.0228%" y="357" width="0.0146%" height="15" fill="rgb(242,22,33)" fg:x="112314" fg:w="18"/><text x="91.2728%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="91.0228%" y="341" width="0.0146%" height="15" fill="rgb(231,105,49)" fg:x="112314" fg:w="18"/><text x="91.2728%" y="351.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (16 samples, 0.01%)</title><rect x="91.0374%" y="405" width="0.0130%" height="15" fill="rgb(218,204,15)" fg:x="112332" fg:w="16"/><text x="91.2874%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="91.0374%" y="389" width="0.0130%" height="15" fill="rgb(235,138,41)" fg:x="112332" fg:w="16"/><text x="91.2874%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="91.0382%" y="373" width="0.0122%" height="15" fill="rgb(246,0,9)" fg:x="112333" fg:w="15"/><text x="91.2882%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.01%)</title><rect x="91.0382%" y="357" width="0.0122%" height="15" fill="rgb(210,74,4)" fg:x="112333" fg:w="15"/><text x="91.2882%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (395 samples, 0.32%)</title><rect x="90.7327%" y="453" width="0.3201%" height="15" fill="rgb(250,60,41)" fg:x="111956" fg:w="395"/><text x="90.9827%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (19 samples, 0.02%)</title><rect x="91.0374%" y="437" width="0.0154%" height="15" fill="rgb(220,115,12)" fg:x="112332" fg:w="19"/><text x="91.2874%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.02%)</title><rect x="91.0374%" y="421" width="0.0154%" height="15" fill="rgb(237,100,13)" fg:x="112332" fg:w="19"/><text x="91.2874%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (545 samples, 0.44%)</title><rect x="90.7327%" y="485" width="0.4417%" height="15" fill="rgb(213,55,26)" fg:x="111956" fg:w="545"/><text x="90.9827%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (545 samples, 0.44%)</title><rect x="90.7327%" y="469" width="0.4417%" height="15" fill="rgb(216,17,4)" fg:x="111956" fg:w="545"/><text x="90.9827%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (150 samples, 0.12%)</title><rect x="91.0528%" y="453" width="0.1216%" height="15" fill="rgb(220,153,47)" fg:x="112351" fg:w="150"/><text x="91.3028%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (150 samples, 0.12%)</title><rect x="91.0528%" y="437" width="0.1216%" height="15" fill="rgb(215,131,9)" fg:x="112351" fg:w="150"/><text x="91.3028%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (144 samples, 0.12%)</title><rect x="91.0577%" y="421" width="0.1167%" height="15" fill="rgb(233,46,42)" fg:x="112357" fg:w="144"/><text x="91.3077%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (144 samples, 0.12%)</title><rect x="91.0577%" y="405" width="0.1167%" height="15" fill="rgb(226,86,7)" fg:x="112357" fg:w="144"/><text x="91.3077%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (49 samples, 0.04%)</title><rect x="91.1801%" y="437" width="0.0397%" height="15" fill="rgb(239,226,21)" fg:x="112508" fg:w="49"/><text x="91.4301%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (49 samples, 0.04%)</title><rect x="91.1801%" y="421" width="0.0397%" height="15" fill="rgb(244,137,22)" fg:x="112508" fg:w="49"/><text x="91.4301%" y="431.50"></text></g><g><title>async_executor::State::notify (767 samples, 0.62%)</title><rect x="90.6079%" y="501" width="0.6216%" height="15" fill="rgb(211,139,35)" fg:x="111802" fg:w="767"/><text x="90.8579%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (68 samples, 0.06%)</title><rect x="91.1744%" y="485" width="0.0551%" height="15" fill="rgb(214,62,50)" fg:x="112501" fg:w="68"/><text x="91.4244%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.05%)</title><rect x="91.1801%" y="469" width="0.0494%" height="15" fill="rgb(212,113,44)" fg:x="112508" fg:w="61"/><text x="91.4301%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (61 samples, 0.05%)</title><rect x="91.1801%" y="453" width="0.0494%" height="15" fill="rgb(226,150,43)" fg:x="112508" fg:w="61"/><text x="91.4301%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (156 samples, 0.13%)</title><rect x="91.2563%" y="469" width="0.1264%" height="15" fill="rgb(250,71,37)" fg:x="112602" fg:w="156"/><text x="91.5063%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (156 samples, 0.13%)</title><rect x="91.2563%" y="453" width="0.1264%" height="15" fill="rgb(219,76,19)" fg:x="112602" fg:w="156"/><text x="91.5063%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (156 samples, 0.13%)</title><rect x="91.2563%" y="437" width="0.1264%" height="15" fill="rgb(250,39,11)" fg:x="112602" fg:w="156"/><text x="91.5063%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (156 samples, 0.13%)</title><rect x="91.2563%" y="421" width="0.1264%" height="15" fill="rgb(230,64,31)" fg:x="112602" fg:w="156"/><text x="91.5063%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (156 samples, 0.13%)</title><rect x="91.2563%" y="405" width="0.1264%" height="15" fill="rgb(208,222,23)" fg:x="112602" fg:w="156"/><text x="91.5063%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (156 samples, 0.13%)</title><rect x="91.2563%" y="389" width="0.1264%" height="15" fill="rgb(227,125,18)" fg:x="112602" fg:w="156"/><text x="91.5063%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (33 samples, 0.03%)</title><rect x="91.3827%" y="469" width="0.0267%" height="15" fill="rgb(234,210,9)" fg:x="112758" fg:w="33"/><text x="91.6327%" y="479.50"></text></g><g><title>async_executor::Sleepers::insert (258 samples, 0.21%)</title><rect x="91.2490%" y="485" width="0.2091%" height="15" fill="rgb(217,127,24)" fg:x="112593" fg:w="258"/><text x="91.4990%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (60 samples, 0.05%)</title><rect x="91.4094%" y="469" width="0.0486%" height="15" fill="rgb(239,141,48)" fg:x="112791" fg:w="60"/><text x="91.6594%" y="479.50"></text></g><g><title>core::ptr::write (40 samples, 0.03%)</title><rect x="91.4256%" y="453" width="0.0324%" height="15" fill="rgb(227,109,8)" fg:x="112811" fg:w="40"/><text x="91.6756%" y="463.50"></text></g><g><title>async_executor::Sleepers::is_notified (27 samples, 0.02%)</title><rect x="91.4580%" y="485" width="0.0219%" height="15" fill="rgb(235,184,23)" fg:x="112851" fg:w="27"/><text x="91.7080%" y="495.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="91.5861%" y="469" width="0.0170%" height="15" fill="rgb(227,226,48)" fg:x="113009" fg:w="21"/><text x="91.8361%" y="479.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (159 samples, 0.13%)</title><rect x="91.6031%" y="469" width="0.1289%" height="15" fill="rgb(206,150,11)" fg:x="113030" fg:w="159"/><text x="91.8531%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (156 samples, 0.13%)</title><rect x="91.6055%" y="453" width="0.1264%" height="15" fill="rgb(254,2,33)" fg:x="113033" fg:w="156"/><text x="91.8555%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (156 samples, 0.13%)</title><rect x="91.6055%" y="437" width="0.1264%" height="15" fill="rgb(243,160,20)" fg:x="113033" fg:w="156"/><text x="91.8555%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (156 samples, 0.13%)</title><rect x="91.6055%" y="421" width="0.1264%" height="15" fill="rgb(218,208,30)" fg:x="113033" fg:w="156"/><text x="91.8555%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (156 samples, 0.13%)</title><rect x="91.6055%" y="405" width="0.1264%" height="15" fill="rgb(224,120,49)" fg:x="113033" fg:w="156"/><text x="91.8555%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (156 samples, 0.13%)</title><rect x="91.6055%" y="389" width="0.1264%" height="15" fill="rgb(246,12,2)" fg:x="113033" fg:w="156"/><text x="91.8555%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.03%)</title><rect x="91.7320%" y="469" width="0.0267%" height="15" fill="rgb(236,117,3)" fg:x="113189" fg:w="33"/><text x="91.9820%" y="479.50"></text></g><g><title>core::ptr::write (26 samples, 0.02%)</title><rect x="91.7376%" y="453" width="0.0211%" height="15" fill="rgb(216,128,52)" fg:x="113196" fg:w="26"/><text x="91.9876%" y="463.50"></text></g><g><title>async_executor::Sleepers::update (365 samples, 0.30%)</title><rect x="91.4799%" y="485" width="0.2958%" height="15" fill="rgb(246,145,19)" fg:x="112878" fg:w="365"/><text x="91.7299%" y="495.50"></text></g><g><title>core::task::wake::Waker::will_wake (21 samples, 0.02%)</title><rect x="91.7587%" y="469" width="0.0170%" height="15" fill="rgb(222,11,46)" fg:x="113222" fg:w="21"/><text x="92.0087%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="91.7587%" y="453" width="0.0170%" height="15" fill="rgb(245,82,36)" fg:x="113222" fg:w="21"/><text x="92.0087%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (257 samples, 0.21%)</title><rect x="91.7855%" y="421" width="0.2083%" height="15" fill="rgb(250,73,51)" fg:x="113255" fg:w="257"/><text x="92.0355%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (257 samples, 0.21%)</title><rect x="91.7855%" y="405" width="0.2083%" height="15" fill="rgb(221,189,23)" fg:x="113255" fg:w="257"/><text x="92.0355%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (275 samples, 0.22%)</title><rect x="91.7757%" y="485" width="0.2229%" height="15" fill="rgb(210,33,7)" fg:x="113243" fg:w="275"/><text x="92.0257%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (275 samples, 0.22%)</title><rect x="91.7757%" y="469" width="0.2229%" height="15" fill="rgb(210,107,22)" fg:x="113243" fg:w="275"/><text x="92.0257%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (265 samples, 0.21%)</title><rect x="91.7838%" y="453" width="0.2148%" height="15" fill="rgb(222,116,37)" fg:x="113253" fg:w="265"/><text x="92.0338%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (265 samples, 0.21%)</title><rect x="91.7838%" y="437" width="0.2148%" height="15" fill="rgb(254,17,48)" fg:x="113253" fg:w="265"/><text x="92.0338%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (315 samples, 0.26%)</title><rect x="91.9986%" y="485" width="0.2553%" height="15" fill="rgb(224,36,32)" fg:x="113518" fg:w="315"/><text x="92.2486%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (315 samples, 0.26%)</title><rect x="91.9986%" y="469" width="0.2553%" height="15" fill="rgb(232,90,46)" fg:x="113518" fg:w="315"/><text x="92.2486%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (242 samples, 0.20%)</title><rect x="92.2539%" y="485" width="0.1961%" height="15" fill="rgb(241,66,40)" fg:x="113833" fg:w="242"/><text x="92.5039%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_store (242 samples, 0.20%)</title><rect x="92.2539%" y="469" width="0.1961%" height="15" fill="rgb(249,184,29)" fg:x="113833" fg:w="242"/><text x="92.5039%" y="479.50"></text></g><g><title>std::sync::poison::Flag::get (27 samples, 0.02%)</title><rect x="92.4516%" y="437" width="0.0219%" height="15" fill="rgb(231,181,1)" fg:x="114077" fg:w="27"/><text x="92.7016%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (27 samples, 0.02%)</title><rect x="92.4516%" y="421" width="0.0219%" height="15" fill="rgb(224,94,2)" fg:x="114077" fg:w="27"/><text x="92.7016%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="92.4516%" y="405" width="0.0219%" height="15" fill="rgb(229,170,15)" fg:x="114077" fg:w="27"/><text x="92.7016%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (36 samples, 0.03%)</title><rect x="92.4500%" y="469" width="0.0292%" height="15" fill="rgb(240,127,35)" fg:x="114075" fg:w="36"/><text x="92.7000%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (36 samples, 0.03%)</title><rect x="92.4500%" y="453" width="0.0292%" height="15" fill="rgb(248,196,34)" fg:x="114075" fg:w="36"/><text x="92.7000%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (269 samples, 0.22%)</title><rect x="92.4857%" y="437" width="0.2180%" height="15" fill="rgb(236,137,7)" fg:x="114119" fg:w="269"/><text x="92.7357%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (269 samples, 0.22%)</title><rect x="92.4857%" y="421" width="0.2180%" height="15" fill="rgb(235,127,16)" fg:x="114119" fg:w="269"/><text x="92.7357%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (47 samples, 0.04%)</title><rect x="92.7085%" y="421" width="0.0381%" height="15" fill="rgb(250,192,54)" fg:x="114394" fg:w="47"/><text x="92.9585%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.04%)</title><rect x="92.7085%" y="405" width="0.0381%" height="15" fill="rgb(218,98,20)" fg:x="114394" fg:w="47"/><text x="92.9585%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.01%)</title><rect x="92.7466%" y="421" width="0.0113%" height="15" fill="rgb(230,176,47)" fg:x="114441" fg:w="14"/><text x="92.9966%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="92.7466%" y="405" width="0.0113%" height="15" fill="rgb(244,2,33)" fg:x="114441" fg:w="14"/><text x="92.9966%" y="415.50"></text></g><g><title>core::hint::spin_loop (49 samples, 0.04%)</title><rect x="92.7661%" y="405" width="0.0397%" height="15" fill="rgb(231,100,17)" fg:x="114465" fg:w="49"/><text x="93.0161%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (49 samples, 0.04%)</title><rect x="92.7661%" y="389" width="0.0397%" height="15" fill="rgb(245,23,12)" fg:x="114465" fg:w="49"/><text x="93.0161%" y="399.50"></text></g><g><title>async_executor::Ticker::sleep (1,995 samples, 1.62%)</title><rect x="91.2295%" y="501" width="1.6168%" height="15" fill="rgb(249,55,22)" fg:x="112569" fg:w="1995"/><text x="91.4795%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (489 samples, 0.40%)</title><rect x="92.4500%" y="485" width="0.3963%" height="15" fill="rgb(207,134,9)" fg:x="114075" fg:w="489"/><text x="92.7000%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (453 samples, 0.37%)</title><rect x="92.4792%" y="469" width="0.3671%" height="15" fill="rgb(218,134,0)" fg:x="114111" fg:w="453"/><text x="92.7292%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (453 samples, 0.37%)</title><rect x="92.4792%" y="453" width="0.3671%" height="15" fill="rgb(213,212,33)" fg:x="114111" fg:w="453"/><text x="92.7292%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (176 samples, 0.14%)</title><rect x="92.7037%" y="437" width="0.1426%" height="15" fill="rgb(252,106,18)" fg:x="114388" fg:w="176"/><text x="92.9537%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (100 samples, 0.08%)</title><rect x="92.7653%" y="421" width="0.0810%" height="15" fill="rgb(208,126,42)" fg:x="114464" fg:w="100"/><text x="93.0153%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (50 samples, 0.04%)</title><rect x="92.8058%" y="405" width="0.0405%" height="15" fill="rgb(246,175,29)" fg:x="114514" fg:w="50"/><text x="93.0558%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (50 samples, 0.04%)</title><rect x="92.8058%" y="389" width="0.0405%" height="15" fill="rgb(215,13,50)" fg:x="114514" fg:w="50"/><text x="93.0558%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="92.8974%" y="469" width="0.0162%" height="15" fill="rgb(216,172,15)" fg:x="114627" fg:w="20"/><text x="93.1474%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (20 samples, 0.02%)</title><rect x="92.8974%" y="453" width="0.0162%" height="15" fill="rgb(212,103,13)" fg:x="114627" fg:w="20"/><text x="93.1474%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (20 samples, 0.02%)</title><rect x="92.8974%" y="437" width="0.0162%" height="15" fill="rgb(231,171,36)" fg:x="114627" fg:w="20"/><text x="93.1474%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (15 samples, 0.01%)</title><rect x="92.9014%" y="421" width="0.0122%" height="15" fill="rgb(250,123,20)" fg:x="114632" fg:w="15"/><text x="93.1514%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.01%)</title><rect x="92.9136%" y="469" width="0.0122%" height="15" fill="rgb(212,53,50)" fg:x="114647" fg:w="15"/><text x="93.1636%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (13 samples, 0.01%)</title><rect x="92.9257%" y="469" width="0.0105%" height="15" fill="rgb(243,54,12)" fg:x="114662" fg:w="13"/><text x="93.1757%" y="479.50"></text></g><g><title>async_executor::Sleepers::remove (199 samples, 0.16%)</title><rect x="92.8601%" y="485" width="0.1613%" height="15" fill="rgb(234,101,34)" fg:x="114581" fg:w="199"/><text x="93.1101%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (105 samples, 0.09%)</title><rect x="92.9363%" y="469" width="0.0851%" height="15" fill="rgb(254,67,22)" fg:x="114675" fg:w="105"/><text x="93.1863%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (105 samples, 0.09%)</title><rect x="92.9363%" y="453" width="0.0851%" height="15" fill="rgb(250,35,47)" fg:x="114675" fg:w="105"/><text x="93.1863%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (105 samples, 0.09%)</title><rect x="92.9363%" y="437" width="0.0851%" height="15" fill="rgb(226,126,38)" fg:x="114675" fg:w="105"/><text x="93.1863%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (105 samples, 0.09%)</title><rect x="92.9363%" y="421" width="0.0851%" height="15" fill="rgb(216,138,53)" fg:x="114675" fg:w="105"/><text x="93.1863%" y="431.50"></text></g><g><title>core::mem::drop (104 samples, 0.08%)</title><rect x="92.9371%" y="405" width="0.0843%" height="15" fill="rgb(246,199,43)" fg:x="114676" fg:w="104"/><text x="93.1871%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (104 samples, 0.08%)</title><rect x="92.9371%" y="389" width="0.0843%" height="15" fill="rgb(232,125,11)" fg:x="114676" fg:w="104"/><text x="93.1871%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.08%)</title><rect x="92.9371%" y="373" width="0.0843%" height="15" fill="rgb(218,219,45)" fg:x="114676" fg:w="104"/><text x="93.1871%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (104 samples, 0.08%)</title><rect x="92.9371%" y="357" width="0.0843%" height="15" fill="rgb(216,102,54)" fg:x="114676" fg:w="104"/><text x="93.1871%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (104 samples, 0.08%)</title><rect x="92.9371%" y="341" width="0.0843%" height="15" fill="rgb(250,228,7)" fg:x="114676" fg:w="104"/><text x="93.1871%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (67 samples, 0.05%)</title><rect x="93.0246%" y="421" width="0.0543%" height="15" fill="rgb(226,125,25)" fg:x="114784" fg:w="67"/><text x="93.2746%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (67 samples, 0.05%)</title><rect x="93.0246%" y="405" width="0.0543%" height="15" fill="rgb(224,165,27)" fg:x="114784" fg:w="67"/><text x="93.2746%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (76 samples, 0.06%)</title><rect x="93.0214%" y="485" width="0.0616%" height="15" fill="rgb(233,86,3)" fg:x="114780" fg:w="76"/><text x="93.2714%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.06%)</title><rect x="93.0214%" y="469" width="0.0616%" height="15" fill="rgb(228,116,20)" fg:x="114780" fg:w="76"/><text x="93.2714%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (72 samples, 0.06%)</title><rect x="93.0246%" y="453" width="0.0584%" height="15" fill="rgb(209,192,17)" fg:x="114784" fg:w="72"/><text x="93.2746%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (72 samples, 0.06%)</title><rect x="93.0246%" y="437" width="0.0584%" height="15" fill="rgb(224,88,34)" fg:x="114784" fg:w="72"/><text x="93.2746%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (114 samples, 0.09%)</title><rect x="93.0830%" y="485" width="0.0924%" height="15" fill="rgb(233,38,6)" fg:x="114856" fg:w="114"/><text x="93.3330%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (114 samples, 0.09%)</title><rect x="93.0830%" y="469" width="0.0924%" height="15" fill="rgb(212,59,30)" fg:x="114856" fg:w="114"/><text x="93.3330%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (137 samples, 0.11%)</title><rect x="93.1754%" y="485" width="0.1110%" height="15" fill="rgb(213,80,3)" fg:x="114970" fg:w="137"/><text x="93.4254%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (137 samples, 0.11%)</title><rect x="93.1754%" y="469" width="0.1110%" height="15" fill="rgb(251,178,7)" fg:x="114970" fg:w="137"/><text x="93.4254%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (104 samples, 0.08%)</title><rect x="93.2985%" y="437" width="0.0843%" height="15" fill="rgb(213,154,26)" fg:x="115122" fg:w="104"/><text x="93.5485%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (104 samples, 0.08%)</title><rect x="93.2985%" y="421" width="0.0843%" height="15" fill="rgb(238,165,49)" fg:x="115122" fg:w="104"/><text x="93.5485%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (21 samples, 0.02%)</title><rect x="93.3853%" y="421" width="0.0170%" height="15" fill="rgb(248,91,46)" fg:x="115229" fg:w="21"/><text x="93.6353%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.02%)</title><rect x="93.3853%" y="405" width="0.0170%" height="15" fill="rgb(244,21,52)" fg:x="115229" fg:w="21"/><text x="93.6353%" y="415.50"></text></g><g><title>core::hint::spin_loop (33 samples, 0.03%)</title><rect x="93.4055%" y="405" width="0.0267%" height="15" fill="rgb(247,122,20)" fg:x="115254" fg:w="33"/><text x="93.6555%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (33 samples, 0.03%)</title><rect x="93.4055%" y="389" width="0.0267%" height="15" fill="rgb(218,27,9)" fg:x="115254" fg:w="33"/><text x="93.6555%" y="399.50"></text></g><g><title>async_executor::Ticker::wake (753 samples, 0.61%)</title><rect x="92.8463%" y="501" width="0.6103%" height="15" fill="rgb(246,7,6)" fg:x="114564" fg:w="753"/><text x="93.0963%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (210 samples, 0.17%)</title><rect x="93.2864%" y="485" width="0.1702%" height="15" fill="rgb(227,135,54)" fg:x="115107" fg:w="210"/><text x="93.5364%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (199 samples, 0.16%)</title><rect x="93.2953%" y="469" width="0.1613%" height="15" fill="rgb(247,14,11)" fg:x="115118" fg:w="199"/><text x="93.5453%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (199 samples, 0.16%)</title><rect x="93.2953%" y="453" width="0.1613%" height="15" fill="rgb(206,149,34)" fg:x="115118" fg:w="199"/><text x="93.5453%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (91 samples, 0.07%)</title><rect x="93.3828%" y="437" width="0.0737%" height="15" fill="rgb(227,228,4)" fg:x="115226" fg:w="91"/><text x="93.6328%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (65 samples, 0.05%)</title><rect x="93.4039%" y="421" width="0.0527%" height="15" fill="rgb(238,218,28)" fg:x="115252" fg:w="65"/><text x="93.6539%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (30 samples, 0.02%)</title><rect x="93.4323%" y="405" width="0.0243%" height="15" fill="rgb(252,86,40)" fg:x="115287" fg:w="30"/><text x="93.6823%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.02%)</title><rect x="93.4323%" y="389" width="0.0243%" height="15" fill="rgb(251,225,11)" fg:x="115287" fg:w="30"/><text x="93.6823%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,312 samples, 9.98%)</title><rect x="83.4810%" y="565" width="9.9780%" height="15" fill="rgb(206,46,49)" fg:x="103008" fg:w="12312"/><text x="83.7310%" y="575.50">&lt;core::future:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (12,312 samples, 9.98%)</title><rect x="83.4810%" y="549" width="9.9780%" height="15" fill="rgb(245,128,24)" fg:x="103008" fg:w="12312"/><text x="83.7310%" y="559.50">async_executor..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (12,284 samples, 9.96%)</title><rect x="83.5037%" y="533" width="9.9553%" height="15" fill="rgb(219,177,34)" fg:x="103036" fg:w="12284"/><text x="83.7537%" y="543.50">&lt;futures_lite:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (12,278 samples, 9.95%)</title><rect x="83.5085%" y="517" width="9.9505%" height="15" fill="rgb(218,60,48)" fg:x="103042" fg:w="12278"/><text x="83.7585%" y="527.50">async_executor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,437 samples, 10.08%)</title><rect x="83.4429%" y="597" width="10.0793%" height="15" fill="rgb(221,11,5)" fg:x="102961" fg:w="12437"/><text x="83.6929%" y="607.50">&lt;core::future::..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (12,433 samples, 10.08%)</title><rect x="83.4461%" y="581" width="10.0761%" height="15" fill="rgb(220,148,13)" fg:x="102965" fg:w="12433"/><text x="83.6961%" y="591.50">async_executor:..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (76 samples, 0.06%)</title><rect x="93.4606%" y="565" width="0.0616%" height="15" fill="rgb(210,16,3)" fg:x="115322" fg:w="76"/><text x="93.7106%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (76 samples, 0.06%)</title><rect x="93.4606%" y="549" width="0.0616%" height="15" fill="rgb(236,80,2)" fg:x="115322" fg:w="76"/><text x="93.7106%" y="559.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (18 samples, 0.01%)</title><rect x="93.7921%" y="453" width="0.0146%" height="15" fill="rgb(239,129,19)" fg:x="115731" fg:w="18"/><text x="94.0421%" y="463.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="93.7961%" y="437" width="0.0105%" height="15" fill="rgb(220,106,35)" fg:x="115736" fg:w="13"/><text x="94.0461%" y="447.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="93.7961%" y="421" width="0.0105%" height="15" fill="rgb(252,139,45)" fg:x="115736" fg:w="13"/><text x="94.0461%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (13 samples, 0.01%)</title><rect x="93.7961%" y="405" width="0.0105%" height="15" fill="rgb(229,8,36)" fg:x="115736" fg:w="13"/><text x="94.0461%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (245 samples, 0.20%)</title><rect x="94.1236%" y="389" width="0.1986%" height="15" fill="rgb(230,126,33)" fg:x="116140" fg:w="245"/><text x="94.3736%" y="399.50"></text></g><g><title>[libc-2.31.so] (229 samples, 0.19%)</title><rect x="94.1365%" y="373" width="0.1856%" height="15" fill="rgb(239,140,21)" fg:x="116156" fg:w="229"/><text x="94.3865%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (239 samples, 0.19%)</title><rect x="94.3221%" y="389" width="0.1937%" height="15" fill="rgb(254,104,9)" fg:x="116385" fg:w="239"/><text x="94.5721%" y="399.50"></text></g><g><title>[libc-2.31.so] (228 samples, 0.18%)</title><rect x="94.3310%" y="373" width="0.1848%" height="15" fill="rgb(239,52,14)" fg:x="116396" fg:w="228"/><text x="94.5810%" y="383.50"></text></g><g><title>[libc-2.31.so] (362 samples, 0.29%)</title><rect x="94.6293%" y="373" width="0.2934%" height="15" fill="rgb(208,227,44)" fg:x="116764" fg:w="362"/><text x="94.8793%" y="383.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="94.9307%" y="261" width="0.0170%" height="15" fill="rgb(246,18,19)" fg:x="117136" fg:w="21"/><text x="95.1807%" y="271.50"></text></g><g><title>alloc::alloc::box_free (29 samples, 0.02%)</title><rect x="94.9259%" y="341" width="0.0235%" height="15" fill="rgb(235,228,25)" fg:x="117130" fg:w="29"/><text x="95.1759%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.02%)</title><rect x="94.9259%" y="325" width="0.0235%" height="15" fill="rgb(240,156,20)" fg:x="117130" fg:w="29"/><text x="95.1759%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.02%)</title><rect x="94.9259%" y="309" width="0.0235%" height="15" fill="rgb(224,8,20)" fg:x="117130" fg:w="29"/><text x="95.1759%" y="319.50"></text></g><g><title>__rg_dealloc (29 samples, 0.02%)</title><rect x="94.9259%" y="293" width="0.0235%" height="15" fill="rgb(214,12,52)" fg:x="117130" fg:w="29"/><text x="95.1759%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (29 samples, 0.02%)</title><rect x="94.9259%" y="277" width="0.0235%" height="15" fill="rgb(211,220,47)" fg:x="117130" fg:w="29"/><text x="95.1759%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="94.9259%" y="373" width="0.0251%" height="15" fill="rgb(250,173,5)" fg:x="117130" fg:w="31"/><text x="95.1759%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="94.9259%" y="357" width="0.0251%" height="15" fill="rgb(250,125,52)" fg:x="117130" fg:w="31"/><text x="95.1759%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (100 samples, 0.08%)</title><rect x="95.0572%" y="309" width="0.0810%" height="15" fill="rgb(209,133,18)" fg:x="117292" fg:w="100"/><text x="95.3072%" y="319.50"></text></g><g><title>core::mem::replace (100 samples, 0.08%)</title><rect x="95.0572%" y="293" width="0.0810%" height="15" fill="rgb(216,173,22)" fg:x="117292" fg:w="100"/><text x="95.3072%" y="303.50"></text></g><g><title>core::ptr::read (100 samples, 0.08%)</title><rect x="95.0572%" y="277" width="0.0810%" height="15" fill="rgb(205,3,22)" fg:x="117292" fg:w="100"/><text x="95.3072%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (166 samples, 0.13%)</title><rect x="95.0264%" y="325" width="0.1345%" height="15" fill="rgb(248,22,20)" fg:x="117254" fg:w="166"/><text x="95.2764%" y="335.50"></text></g><g><title>core::mem::drop (28 samples, 0.02%)</title><rect x="95.1382%" y="309" width="0.0227%" height="15" fill="rgb(233,6,29)" fg:x="117392" fg:w="28"/><text x="95.3882%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (28 samples, 0.02%)</title><rect x="95.1382%" y="293" width="0.0227%" height="15" fill="rgb(240,22,54)" fg:x="117392" fg:w="28"/><text x="95.3882%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (128 samples, 0.10%)</title><rect x="95.1609%" y="325" width="0.1037%" height="15" fill="rgb(231,133,32)" fg:x="117420" fg:w="128"/><text x="95.4109%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (123 samples, 0.10%)</title><rect x="95.1650%" y="309" width="0.0997%" height="15" fill="rgb(248,193,4)" fg:x="117425" fg:w="123"/><text x="95.4150%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.10%)</title><rect x="95.1650%" y="293" width="0.0997%" height="15" fill="rgb(211,178,46)" fg:x="117425" fg:w="123"/><text x="95.4150%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (115 samples, 0.09%)</title><rect x="95.1714%" y="277" width="0.0932%" height="15" fill="rgb(224,5,42)" fg:x="117433" fg:w="115"/><text x="95.4214%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (115 samples, 0.09%)</title><rect x="95.1714%" y="261" width="0.0932%" height="15" fill="rgb(239,176,25)" fg:x="117433" fg:w="115"/><text x="95.4214%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (115 samples, 0.09%)</title><rect x="95.1714%" y="245" width="0.0932%" height="15" fill="rgb(245,187,50)" fg:x="117433" fg:w="115"/><text x="95.4214%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_swap (115 samples, 0.09%)</title><rect x="95.1714%" y="229" width="0.0932%" height="15" fill="rgb(248,24,15)" fg:x="117433" fg:w="115"/><text x="95.4214%" y="239.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="95.2687%" y="325" width="0.0130%" height="15" fill="rgb(205,166,13)" fg:x="117553" fg:w="16"/><text x="95.5187%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="95.2687%" y="309" width="0.0130%" height="15" fill="rgb(208,114,23)" fg:x="117553" fg:w="16"/><text x="95.5187%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="95.2695%" y="293" width="0.0122%" height="15" fill="rgb(239,127,18)" fg:x="117554" fg:w="15"/><text x="95.5195%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="95.2695%" y="277" width="0.0122%" height="15" fill="rgb(219,154,28)" fg:x="117554" fg:w="15"/><text x="95.5195%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (515 samples, 0.42%)</title><rect x="94.9810%" y="341" width="0.4174%" height="15" fill="rgb(225,157,23)" fg:x="117198" fg:w="515"/><text x="95.2310%" y="351.50"></text></g><g><title>event_listener::Inner::lock (144 samples, 0.12%)</title><rect x="95.2817%" y="325" width="0.1167%" height="15" fill="rgb(219,8,6)" fg:x="117569" fg:w="144"/><text x="95.5317%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (142 samples, 0.12%)</title><rect x="95.2833%" y="309" width="0.1151%" height="15" fill="rgb(212,47,6)" fg:x="117571" fg:w="142"/><text x="95.5333%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (134 samples, 0.11%)</title><rect x="95.2898%" y="293" width="0.1086%" height="15" fill="rgb(224,190,4)" fg:x="117579" fg:w="134"/><text x="95.5398%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (134 samples, 0.11%)</title><rect x="95.2898%" y="277" width="0.1086%" height="15" fill="rgb(239,183,29)" fg:x="117579" fg:w="134"/><text x="95.5398%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (134 samples, 0.11%)</title><rect x="95.2898%" y="261" width="0.1086%" height="15" fill="rgb(213,57,7)" fg:x="117579" fg:w="134"/><text x="95.5398%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (134 samples, 0.11%)</title><rect x="95.2898%" y="245" width="0.1086%" height="15" fill="rgb(216,148,1)" fg:x="117579" fg:w="134"/><text x="95.5398%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (174 samples, 0.14%)</title><rect x="95.4308%" y="293" width="0.1410%" height="15" fill="rgb(236,182,29)" fg:x="117753" fg:w="174"/><text x="95.6808%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (168 samples, 0.14%)</title><rect x="95.4356%" y="277" width="0.1362%" height="15" fill="rgb(244,120,48)" fg:x="117759" fg:w="168"/><text x="95.6856%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (168 samples, 0.14%)</title><rect x="95.4356%" y="261" width="0.1362%" height="15" fill="rgb(206,71,34)" fg:x="117759" fg:w="168"/><text x="95.6856%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (168 samples, 0.14%)</title><rect x="95.4356%" y="245" width="0.1362%" height="15" fill="rgb(242,32,6)" fg:x="117759" fg:w="168"/><text x="95.6856%" y="255.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,331 samples, 1.08%)</title><rect x="94.5158%" y="389" width="1.0787%" height="15" fill="rgb(241,35,3)" fg:x="116624" fg:w="1331"/><text x="94.7658%" y="399.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (794 samples, 0.64%)</title><rect x="94.9510%" y="373" width="0.6435%" height="15" fill="rgb(222,62,19)" fg:x="117161" fg:w="794"/><text x="95.2010%" y="383.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (794 samples, 0.64%)</title><rect x="94.9510%" y="357" width="0.6435%" height="15" fill="rgb(223,110,41)" fg:x="117161" fg:w="794"/><text x="95.2010%" y="367.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (242 samples, 0.20%)</title><rect x="95.3984%" y="341" width="0.1961%" height="15" fill="rgb(208,224,4)" fg:x="117713" fg:w="242"/><text x="95.6484%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (230 samples, 0.19%)</title><rect x="95.4081%" y="325" width="0.1864%" height="15" fill="rgb(241,137,19)" fg:x="117725" fg:w="230"/><text x="95.6581%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (222 samples, 0.18%)</title><rect x="95.4146%" y="309" width="0.1799%" height="15" fill="rgb(244,24,17)" fg:x="117733" fg:w="222"/><text x="95.6646%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.01%)</title><rect x="95.5807%" y="293" width="0.0138%" height="15" fill="rgb(245,178,49)" fg:x="117938" fg:w="17"/><text x="95.8307%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="95.5807%" y="277" width="0.0138%" height="15" fill="rgb(219,160,38)" fg:x="117938" fg:w="17"/><text x="95.8307%" y="287.50"></text></g><g><title>[libc-2.31.so] (108 samples, 0.09%)</title><rect x="95.5945%" y="389" width="0.0875%" height="15" fill="rgb(228,137,14)" fg:x="117955" fg:w="108"/><text x="95.8445%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="95.8522%" y="261" width="0.0430%" height="15" fill="rgb(237,134,11)" fg:x="118273" fg:w="53"/><text x="96.1022%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (265 samples, 0.21%)</title><rect x="95.6820%" y="389" width="0.2148%" height="15" fill="rgb(211,126,44)" fg:x="118063" fg:w="265"/><text x="95.9320%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (126 samples, 0.10%)</title><rect x="95.7947%" y="373" width="0.1021%" height="15" fill="rgb(226,171,33)" fg:x="118202" fg:w="126"/><text x="96.0447%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (126 samples, 0.10%)</title><rect x="95.7947%" y="357" width="0.1021%" height="15" fill="rgb(253,99,13)" fg:x="118202" fg:w="126"/><text x="96.0447%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (126 samples, 0.10%)</title><rect x="95.7947%" y="341" width="0.1021%" height="15" fill="rgb(244,48,7)" fg:x="118202" fg:w="126"/><text x="96.0447%" y="351.50"></text></g><g><title>alloc::alloc::alloc (121 samples, 0.10%)</title><rect x="95.7987%" y="325" width="0.0981%" height="15" fill="rgb(244,217,54)" fg:x="118207" fg:w="121"/><text x="96.0487%" y="335.50"></text></g><g><title>__rg_alloc (121 samples, 0.10%)</title><rect x="95.7987%" y="309" width="0.0981%" height="15" fill="rgb(224,15,18)" fg:x="118207" fg:w="121"/><text x="96.0487%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (121 samples, 0.10%)</title><rect x="95.7987%" y="293" width="0.0981%" height="15" fill="rgb(244,99,12)" fg:x="118207" fg:w="121"/><text x="96.0487%" y="303.50"></text></g><g><title>sn_rust_alloc (116 samples, 0.09%)</title><rect x="95.8028%" y="277" width="0.0940%" height="15" fill="rgb(233,226,8)" fg:x="118212" fg:w="116"/><text x="96.0528%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (16 samples, 0.01%)</title><rect x="95.8968%" y="389" width="0.0130%" height="15" fill="rgb(229,211,3)" fg:x="118328" fg:w="16"/><text x="96.1468%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="95.9098%" y="389" width="0.0105%" height="15" fill="rgb(216,140,21)" fg:x="118344" fg:w="13"/><text x="96.1598%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="95.9098%" y="373" width="0.0105%" height="15" fill="rgb(234,122,30)" fg:x="118344" fg:w="13"/><text x="96.1598%" y="383.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,626 samples, 2.13%)</title><rect x="93.8196%" y="405" width="2.1282%" height="15" fill="rgb(236,25,46)" fg:x="115765" fg:w="2626"/><text x="94.0696%" y="415.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (25 samples, 0.02%)</title><rect x="95.9276%" y="389" width="0.0203%" height="15" fill="rgb(217,52,54)" fg:x="118366" fg:w="25"/><text x="96.1776%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (15 samples, 0.01%)</title><rect x="95.9357%" y="373" width="0.0122%" height="15" fill="rgb(222,29,26)" fg:x="118376" fg:w="15"/><text x="96.1857%" y="383.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,642 samples, 2.14%)</title><rect x="93.8107%" y="437" width="2.1412%" height="15" fill="rgb(216,177,29)" fg:x="115754" fg:w="2642"/><text x="94.0607%" y="447.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,642 samples, 2.14%)</title><rect x="93.8107%" y="421" width="2.1412%" height="15" fill="rgb(247,136,51)" fg:x="115754" fg:w="2642"/><text x="94.0607%" y="431.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,817 samples, 2.28%)</title><rect x="93.6762%" y="549" width="2.2830%" height="15" fill="rgb(231,47,47)" fg:x="115588" fg:w="2817"/><text x="93.9262%" y="559.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,815 samples, 2.28%)</title><rect x="93.6778%" y="533" width="2.2814%" height="15" fill="rgb(211,192,36)" fg:x="115590" fg:w="2815"/><text x="93.9278%" y="543.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,675 samples, 2.17%)</title><rect x="93.7913%" y="517" width="2.1679%" height="15" fill="rgb(229,156,32)" fg:x="115730" fg:w="2675"/><text x="94.0413%" y="527.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,675 samples, 2.17%)</title><rect x="93.7913%" y="501" width="2.1679%" height="15" fill="rgb(248,213,20)" fg:x="115730" fg:w="2675"/><text x="94.0413%" y="511.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,675 samples, 2.17%)</title><rect x="93.7913%" y="485" width="2.1679%" height="15" fill="rgb(217,64,7)" fg:x="115730" fg:w="2675"/><text x="94.0413%" y="495.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,675 samples, 2.17%)</title><rect x="93.7913%" y="469" width="2.1679%" height="15" fill="rgb(232,142,8)" fg:x="115730" fg:w="2675"/><text x="94.0413%" y="479.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,656 samples, 2.15%)</title><rect x="93.8067%" y="453" width="2.1525%" height="15" fill="rgb(224,92,44)" fg:x="115749" fg:w="2656"/><text x="94.0567%" y="463.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,819 samples, 2.28%)</title><rect x="93.6762%" y="565" width="2.2846%" height="15" fill="rgb(214,169,17)" fg:x="115588" fg:w="2819"/><text x="93.9262%" y="575.50">&lt;..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (58 samples, 0.05%)</title><rect x="95.9608%" y="565" width="0.0470%" height="15" fill="rgb(210,59,37)" fg:x="118407" fg:w="58"/><text x="96.2108%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (55 samples, 0.04%)</title><rect x="95.9632%" y="549" width="0.0446%" height="15" fill="rgb(214,116,48)" fg:x="118410" fg:w="55"/><text x="96.2132%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.04%)</title><rect x="95.9632%" y="533" width="0.0446%" height="15" fill="rgb(244,191,6)" fg:x="118410" fg:w="55"/><text x="96.2132%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (356 samples, 0.29%)</title><rect x="96.0175%" y="565" width="0.2885%" height="15" fill="rgb(241,50,52)" fg:x="118477" fg:w="356"/><text x="96.2675%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (356 samples, 0.29%)</title><rect x="96.0175%" y="549" width="0.2885%" height="15" fill="rgb(236,75,39)" fg:x="118477" fg:w="356"/><text x="96.2675%" y="559.50"></text></g><g><title>async_task::runnable::Runnable::run (3,444 samples, 2.79%)</title><rect x="93.5255%" y="597" width="2.7911%" height="15" fill="rgb(236,99,0)" fg:x="115402" fg:w="3444"/><text x="93.7755%" y="607.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,355 samples, 2.72%)</title><rect x="93.5976%" y="581" width="2.7190%" height="15" fill="rgb(207,202,15)" fg:x="115491" fg:w="3355"/><text x="93.8476%" y="591.50">as..</text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="96.3061%" y="565" width="0.0105%" height="15" fill="rgb(233,207,14)" fg:x="118833" fg:w="13"/><text x="96.5561%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="96.3061%" y="549" width="0.0105%" height="15" fill="rgb(226,27,51)" fg:x="118833" fg:w="13"/><text x="96.5561%" y="559.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,914 samples, 12.90%)</title><rect x="83.4307%" y="645" width="12.8972%" height="15" fill="rgb(206,104,42)" fg:x="102946" fg:w="15914"/><text x="83.6807%" y="655.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,914 samples, 12.90%)</title><rect x="83.4307%" y="629" width="12.8972%" height="15" fill="rgb(212,225,4)" fg:x="102946" fg:w="15914"/><text x="83.6807%" y="639.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15,913 samples, 12.90%)</title><rect x="83.4315%" y="613" width="12.8964%" height="15" fill="rgb(233,96,42)" fg:x="102947" fg:w="15913"/><text x="83.6815%" y="623.50">async_executor::Exe..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14 samples, 0.01%)</title><rect x="96.3166%" y="597" width="0.0113%" height="15" fill="rgb(229,21,32)" fg:x="118846" fg:w="14"/><text x="96.5666%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14 samples, 0.01%)</title><rect x="96.3166%" y="581" width="0.0113%" height="15" fill="rgb(226,216,24)" fg:x="118846" fg:w="14"/><text x="96.5666%" y="591.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (15,950 samples, 12.93%)</title><rect x="83.4056%" y="661" width="12.9264%" height="15" fill="rgb(221,163,17)" fg:x="102915" fg:w="15950"/><text x="83.6556%" y="671.50">async_executor::Exe..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (42 samples, 0.03%)</title><rect x="96.4219%" y="405" width="0.0340%" height="15" fill="rgb(216,216,42)" fg:x="118976" fg:w="42"/><text x="96.6719%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41 samples, 0.03%)</title><rect x="96.4228%" y="389" width="0.0332%" height="15" fill="rgb(240,118,7)" fg:x="118977" fg:w="41"/><text x="96.6728%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (39 samples, 0.03%)</title><rect x="96.4244%" y="373" width="0.0316%" height="15" fill="rgb(221,67,37)" fg:x="118979" fg:w="39"/><text x="96.6744%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (28 samples, 0.02%)</title><rect x="96.4333%" y="357" width="0.0227%" height="15" fill="rgb(241,32,44)" fg:x="118990" fg:w="28"/><text x="96.6833%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (28 samples, 0.02%)</title><rect x="96.4333%" y="341" width="0.0227%" height="15" fill="rgb(235,204,43)" fg:x="118990" fg:w="28"/><text x="96.6833%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (25 samples, 0.02%)</title><rect x="96.4357%" y="325" width="0.0203%" height="15" fill="rgb(213,116,10)" fg:x="118993" fg:w="25"/><text x="96.6857%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (25 samples, 0.02%)</title><rect x="96.4357%" y="309" width="0.0203%" height="15" fill="rgb(239,15,48)" fg:x="118993" fg:w="25"/><text x="96.6857%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.04%)</title><rect x="96.4219%" y="453" width="0.0357%" height="15" fill="rgb(207,123,36)" fg:x="118976" fg:w="44"/><text x="96.6719%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (44 samples, 0.04%)</title><rect x="96.4219%" y="437" width="0.0357%" height="15" fill="rgb(209,103,30)" fg:x="118976" fg:w="44"/><text x="96.6719%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 0.04%)</title><rect x="96.4219%" y="421" width="0.0357%" height="15" fill="rgb(238,100,19)" fg:x="118976" fg:w="44"/><text x="96.6719%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (78 samples, 0.06%)</title><rect x="96.4933%" y="421" width="0.0632%" height="15" fill="rgb(244,30,14)" fg:x="119064" fg:w="78"/><text x="96.7433%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (75 samples, 0.06%)</title><rect x="96.4957%" y="405" width="0.0608%" height="15" fill="rgb(249,174,6)" fg:x="119067" fg:w="75"/><text x="96.7457%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (75 samples, 0.06%)</title><rect x="96.4957%" y="389" width="0.0608%" height="15" fill="rgb(235,213,41)" fg:x="119067" fg:w="75"/><text x="96.7457%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (75 samples, 0.06%)</title><rect x="96.4957%" y="373" width="0.0608%" height="15" fill="rgb(213,118,6)" fg:x="119067" fg:w="75"/><text x="96.7457%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (194 samples, 0.16%)</title><rect x="96.4722%" y="437" width="0.1572%" height="15" fill="rgb(235,44,51)" fg:x="119038" fg:w="194"/><text x="96.7222%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (90 samples, 0.07%)</title><rect x="96.5565%" y="421" width="0.0729%" height="15" fill="rgb(217,9,53)" fg:x="119142" fg:w="90"/><text x="96.8065%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (90 samples, 0.07%)</title><rect x="96.5565%" y="405" width="0.0729%" height="15" fill="rgb(237,172,34)" fg:x="119142" fg:w="90"/><text x="96.8065%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (51 samples, 0.04%)</title><rect x="96.6391%" y="421" width="0.0413%" height="15" fill="rgb(206,206,11)" fg:x="119244" fg:w="51"/><text x="96.8891%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (51 samples, 0.04%)</title><rect x="96.6391%" y="405" width="0.0413%" height="15" fill="rgb(214,149,29)" fg:x="119244" fg:w="51"/><text x="96.8891%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (51 samples, 0.04%)</title><rect x="96.6391%" y="389" width="0.0413%" height="15" fill="rgb(208,123,3)" fg:x="119244" fg:w="51"/><text x="96.8891%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (51 samples, 0.04%)</title><rect x="96.6391%" y="373" width="0.0413%" height="15" fill="rgb(229,126,4)" fg:x="119244" fg:w="51"/><text x="96.8891%" y="383.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (305 samples, 0.25%)</title><rect x="96.4576%" y="453" width="0.2472%" height="15" fill="rgb(222,92,36)" fg:x="119020" fg:w="305"/><text x="96.7076%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (93 samples, 0.08%)</title><rect x="96.6294%" y="437" width="0.0754%" height="15" fill="rgb(216,39,41)" fg:x="119232" fg:w="93"/><text x="96.8794%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24 samples, 0.02%)</title><rect x="96.6853%" y="421" width="0.0195%" height="15" fill="rgb(253,127,28)" fg:x="119301" fg:w="24"/><text x="96.9353%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.02%)</title><rect x="96.6853%" y="405" width="0.0195%" height="15" fill="rgb(249,152,51)" fg:x="119301" fg:w="24"/><text x="96.9353%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="96.7048%" y="453" width="0.0470%" height="15" fill="rgb(209,123,42)" fg:x="119325" fg:w="58"/><text x="96.9548%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="96.7048%" y="437" width="0.0470%" height="15" fill="rgb(241,118,22)" fg:x="119325" fg:w="58"/><text x="96.9548%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (51 samples, 0.04%)</title><rect x="96.7105%" y="421" width="0.0413%" height="15" fill="rgb(208,25,7)" fg:x="119332" fg:w="51"/><text x="96.9605%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (51 samples, 0.04%)</title><rect x="96.7105%" y="405" width="0.0413%" height="15" fill="rgb(243,144,39)" fg:x="119332" fg:w="51"/><text x="96.9605%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (48 samples, 0.04%)</title><rect x="96.7129%" y="389" width="0.0389%" height="15" fill="rgb(250,50,5)" fg:x="119335" fg:w="48"/><text x="96.9629%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (48 samples, 0.04%)</title><rect x="96.7129%" y="373" width="0.0389%" height="15" fill="rgb(207,67,11)" fg:x="119335" fg:w="48"/><text x="96.9629%" y="383.50"></text></g><g><title>fastrand::RNG::__getit (23 samples, 0.02%)</title><rect x="96.7542%" y="405" width="0.0186%" height="15" fill="rgb(245,204,40)" fg:x="119386" fg:w="23"/><text x="97.0042%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (22 samples, 0.02%)</title><rect x="96.7550%" y="389" width="0.0178%" height="15" fill="rgb(238,228,24)" fg:x="119387" fg:w="22"/><text x="97.0050%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (22 samples, 0.02%)</title><rect x="96.7550%" y="373" width="0.0178%" height="15" fill="rgb(217,116,22)" fg:x="119387" fg:w="22"/><text x="97.0050%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (22 samples, 0.02%)</title><rect x="96.7550%" y="357" width="0.0178%" height="15" fill="rgb(234,98,12)" fg:x="119387" fg:w="22"/><text x="97.0050%" y="367.50"></text></g><g><title>fastrand::usize (40 samples, 0.03%)</title><rect x="96.7518%" y="453" width="0.0324%" height="15" fill="rgb(242,170,50)" fg:x="119383" fg:w="40"/><text x="97.0018%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (38 samples, 0.03%)</title><rect x="96.7534%" y="437" width="0.0308%" height="15" fill="rgb(235,7,5)" fg:x="119385" fg:w="38"/><text x="97.0034%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (38 samples, 0.03%)</title><rect x="96.7534%" y="421" width="0.0308%" height="15" fill="rgb(241,114,28)" fg:x="119385" fg:w="38"/><text x="97.0034%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (14 samples, 0.01%)</title><rect x="96.7729%" y="405" width="0.0113%" height="15" fill="rgb(246,112,42)" fg:x="119409" fg:w="14"/><text x="97.0229%" y="415.50"></text></g><g><title>fastrand::Rng::usize (14 samples, 0.01%)</title><rect x="96.7729%" y="389" width="0.0113%" height="15" fill="rgb(248,228,14)" fg:x="119409" fg:w="14"/><text x="97.0229%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (47 samples, 0.04%)</title><rect x="96.7874%" y="405" width="0.0381%" height="15" fill="rgb(208,133,18)" fg:x="119427" fg:w="47"/><text x="97.0374%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (47 samples, 0.04%)</title><rect x="96.7874%" y="389" width="0.0381%" height="15" fill="rgb(207,35,49)" fg:x="119427" fg:w="47"/><text x="97.0374%" y="399.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (510 samples, 0.41%)</title><rect x="96.4146%" y="469" width="0.4133%" height="15" fill="rgb(205,68,36)" fg:x="118967" fg:w="510"/><text x="96.6646%" y="479.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (54 samples, 0.04%)</title><rect x="96.7842%" y="453" width="0.0438%" height="15" fill="rgb(245,62,40)" fg:x="119423" fg:w="54"/><text x="97.0342%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (51 samples, 0.04%)</title><rect x="96.7866%" y="437" width="0.0413%" height="15" fill="rgb(228,27,24)" fg:x="119426" fg:w="51"/><text x="97.0366%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (51 samples, 0.04%)</title><rect x="96.7866%" y="421" width="0.0413%" height="15" fill="rgb(253,19,12)" fg:x="119426" fg:w="51"/><text x="97.0366%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (30 samples, 0.02%)</title><rect x="96.8401%" y="453" width="0.0243%" height="15" fill="rgb(232,28,20)" fg:x="119492" fg:w="30"/><text x="97.0901%" y="463.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="96.8515%" y="437" width="0.0130%" height="15" fill="rgb(218,35,51)" fg:x="119506" fg:w="16"/><text x="97.1015%" y="447.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="96.8515%" y="421" width="0.0130%" height="15" fill="rgb(212,90,40)" fg:x="119506" fg:w="16"/><text x="97.1015%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (56 samples, 0.05%)</title><rect x="96.8644%" y="453" width="0.0454%" height="15" fill="rgb(220,172,12)" fg:x="119522" fg:w="56"/><text x="97.1144%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="96.8644%" y="437" width="0.0454%" height="15" fill="rgb(226,159,20)" fg:x="119522" fg:w="56"/><text x="97.1144%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.04%)</title><rect x="96.8693%" y="421" width="0.0405%" height="15" fill="rgb(234,205,16)" fg:x="119528" fg:w="50"/><text x="97.1193%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.04%)</title><rect x="96.8693%" y="405" width="0.0405%" height="15" fill="rgb(207,9,39)" fg:x="119528" fg:w="50"/><text x="97.1193%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.04%)</title><rect x="96.8693%" y="389" width="0.0405%" height="15" fill="rgb(249,143,15)" fg:x="119528" fg:w="50"/><text x="97.1193%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.04%)</title><rect x="96.8693%" y="373" width="0.0405%" height="15" fill="rgb(253,133,29)" fg:x="119528" fg:w="50"/><text x="97.1193%" y="383.50"></text></g><g><title>async_executor::Ticker::sleep (170 samples, 0.14%)</title><rect x="96.8280%" y="469" width="0.1378%" height="15" fill="rgb(221,187,0)" fg:x="119477" fg:w="170"/><text x="97.0780%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (69 samples, 0.06%)</title><rect x="96.9098%" y="453" width="0.0559%" height="15" fill="rgb(205,204,26)" fg:x="119578" fg:w="69"/><text x="97.1598%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (64 samples, 0.05%)</title><rect x="96.9139%" y="437" width="0.0519%" height="15" fill="rgb(224,68,54)" fg:x="119583" fg:w="64"/><text x="97.1639%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (64 samples, 0.05%)</title><rect x="96.9139%" y="421" width="0.0519%" height="15" fill="rgb(209,67,4)" fg:x="119583" fg:w="64"/><text x="97.1639%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (64 samples, 0.05%)</title><rect x="96.9139%" y="405" width="0.0519%" height="15" fill="rgb(228,229,18)" fg:x="119583" fg:w="64"/><text x="97.1639%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.05%)</title><rect x="96.9139%" y="389" width="0.0519%" height="15" fill="rgb(231,89,13)" fg:x="119583" fg:w="64"/><text x="97.1639%" y="399.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (727 samples, 0.59%)</title><rect x="96.3790%" y="581" width="0.5892%" height="15" fill="rgb(210,182,18)" fg:x="118923" fg:w="727"/><text x="96.6290%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (711 samples, 0.58%)</title><rect x="96.3920%" y="565" width="0.5762%" height="15" fill="rgb(240,105,2)" fg:x="118939" fg:w="711"/><text x="96.6420%" y="575.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (710 samples, 0.58%)</title><rect x="96.3928%" y="549" width="0.5754%" height="15" fill="rgb(207,170,50)" fg:x="118940" fg:w="710"/><text x="96.6428%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (697 samples, 0.56%)</title><rect x="96.4033%" y="533" width="0.5649%" height="15" fill="rgb(232,133,24)" fg:x="118953" fg:w="697"/><text x="96.6533%" y="543.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (697 samples, 0.56%)</title><rect x="96.4033%" y="517" width="0.5649%" height="15" fill="rgb(235,166,27)" fg:x="118953" fg:w="697"/><text x="96.6533%" y="527.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (685 samples, 0.56%)</title><rect x="96.4130%" y="501" width="0.5551%" height="15" fill="rgb(209,19,13)" fg:x="118965" fg:w="685"/><text x="96.6630%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (683 samples, 0.55%)</title><rect x="96.4146%" y="485" width="0.5535%" height="15" fill="rgb(226,79,39)" fg:x="118967" fg:w="683"/><text x="96.6646%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (32 samples, 0.03%)</title><rect x="97.0338%" y="517" width="0.0259%" height="15" fill="rgb(222,163,10)" fg:x="119731" fg:w="32"/><text x="97.2838%" y="527.50"></text></g><g><title>core::mem::replace (32 samples, 0.03%)</title><rect x="97.0338%" y="501" width="0.0259%" height="15" fill="rgb(214,44,19)" fg:x="119731" fg:w="32"/><text x="97.2838%" y="511.50"></text></g><g><title>core::ptr::read (32 samples, 0.03%)</title><rect x="97.0338%" y="485" width="0.0259%" height="15" fill="rgb(210,217,13)" fg:x="119731" fg:w="32"/><text x="97.2838%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (56 samples, 0.05%)</title><rect x="97.0233%" y="533" width="0.0454%" height="15" fill="rgb(237,61,54)" fg:x="119718" fg:w="56"/><text x="97.2733%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (56 samples, 0.05%)</title><rect x="97.0687%" y="533" width="0.0454%" height="15" fill="rgb(226,184,24)" fg:x="119774" fg:w="56"/><text x="97.3187%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (54 samples, 0.04%)</title><rect x="97.0703%" y="517" width="0.0438%" height="15" fill="rgb(223,226,4)" fg:x="119776" fg:w="54"/><text x="97.3203%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.04%)</title><rect x="97.0703%" y="501" width="0.0438%" height="15" fill="rgb(210,26,41)" fg:x="119776" fg:w="54"/><text x="97.3203%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.04%)</title><rect x="97.0735%" y="485" width="0.0405%" height="15" fill="rgb(220,221,6)" fg:x="119780" fg:w="50"/><text x="97.3235%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.04%)</title><rect x="97.0735%" y="469" width="0.0405%" height="15" fill="rgb(225,89,49)" fg:x="119780" fg:w="50"/><text x="97.3235%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.04%)</title><rect x="97.0735%" y="453" width="0.0405%" height="15" fill="rgb(218,70,45)" fg:x="119780" fg:w="50"/><text x="97.3235%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.04%)</title><rect x="97.0735%" y="437" width="0.0405%" height="15" fill="rgb(238,166,21)" fg:x="119780" fg:w="50"/><text x="97.3235%" y="447.50"></text></g><g><title>core::task::wake::Waker::will_wake (20 samples, 0.02%)</title><rect x="97.1165%" y="533" width="0.0162%" height="15" fill="rgb(224,141,44)" fg:x="119833" fg:w="20"/><text x="97.3665%" y="543.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="97.1165%" y="517" width="0.0162%" height="15" fill="rgb(230,12,49)" fg:x="119833" fg:w="20"/><text x="97.3665%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="97.1205%" y="501" width="0.0122%" height="15" fill="rgb(212,174,12)" fg:x="119838" fg:w="15"/><text x="97.3705%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="97.1205%" y="485" width="0.0122%" height="15" fill="rgb(246,67,9)" fg:x="119838" fg:w="15"/><text x="97.3705%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (239 samples, 0.19%)</title><rect x="97.0006%" y="549" width="0.1937%" height="15" fill="rgb(239,35,23)" fg:x="119690" fg:w="239"/><text x="97.2506%" y="559.50"></text></g><g><title>event_listener::Inner::lock (76 samples, 0.06%)</title><rect x="97.1327%" y="533" width="0.0616%" height="15" fill="rgb(211,167,0)" fg:x="119853" fg:w="76"/><text x="97.3827%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (70 samples, 0.06%)</title><rect x="97.1376%" y="517" width="0.0567%" height="15" fill="rgb(225,119,45)" fg:x="119859" fg:w="70"/><text x="97.3876%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.05%)</title><rect x="97.1448%" y="501" width="0.0494%" height="15" fill="rgb(210,162,6)" fg:x="119868" fg:w="61"/><text x="97.3948%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (61 samples, 0.05%)</title><rect x="97.1448%" y="485" width="0.0494%" height="15" fill="rgb(208,118,35)" fg:x="119868" fg:w="61"/><text x="97.3948%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (61 samples, 0.05%)</title><rect x="97.1448%" y="469" width="0.0494%" height="15" fill="rgb(239,4,53)" fg:x="119868" fg:w="61"/><text x="97.3948%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.05%)</title><rect x="97.1448%" y="453" width="0.0494%" height="15" fill="rgb(213,130,21)" fg:x="119868" fg:w="61"/><text x="97.3948%" y="463.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (119 samples, 0.10%)</title><rect x="97.1943%" y="549" width="0.0964%" height="15" fill="rgb(235,148,0)" fg:x="119929" fg:w="119"/><text x="97.4443%" y="559.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (119 samples, 0.10%)</title><rect x="97.1943%" y="533" width="0.0964%" height="15" fill="rgb(244,224,18)" fg:x="119929" fg:w="119"/><text x="97.4443%" y="543.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (83 samples, 0.07%)</title><rect x="97.2235%" y="517" width="0.0673%" height="15" fill="rgb(211,214,4)" fg:x="119965" fg:w="83"/><text x="97.4735%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (76 samples, 0.06%)</title><rect x="97.2291%" y="501" width="0.0616%" height="15" fill="rgb(206,119,25)" fg:x="119972" fg:w="76"/><text x="97.4791%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (76 samples, 0.06%)</title><rect x="97.2291%" y="485" width="0.0616%" height="15" fill="rgb(243,93,47)" fg:x="119972" fg:w="76"/><text x="97.4791%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (76 samples, 0.06%)</title><rect x="97.2291%" y="469" width="0.0616%" height="15" fill="rgb(224,194,6)" fg:x="119972" fg:w="76"/><text x="97.4791%" y="479.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,140 samples, 0.92%)</title><rect x="96.3676%" y="613" width="0.9239%" height="15" fill="rgb(243,229,6)" fg:x="118909" fg:w="1140"/><text x="96.6176%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,131 samples, 0.92%)</title><rect x="96.3749%" y="597" width="0.9166%" height="15" fill="rgb(207,23,50)" fg:x="118918" fg:w="1131"/><text x="96.6249%" y="607.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (399 samples, 0.32%)</title><rect x="96.9682%" y="581" width="0.3234%" height="15" fill="rgb(253,192,32)" fg:x="119650" fg:w="399"/><text x="97.2182%" y="591.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (382 samples, 0.31%)</title><rect x="96.9820%" y="565" width="0.3096%" height="15" fill="rgb(213,21,6)" fg:x="119667" fg:w="382"/><text x="97.2320%" y="575.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,194 samples, 13.93%)</title><rect x="83.3635%" y="693" width="13.9346%" height="15" fill="rgb(243,151,13)" fg:x="102863" fg:w="17194"/><text x="83.6135%" y="703.50">&lt;futures_lite::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,148 samples, 13.90%)</title><rect x="83.4007%" y="677" width="13.8973%" height="15" fill="rgb(233,165,41)" fg:x="102909" fg:w="17148"/><text x="83.6507%" y="687.50">&lt;core::future::from_g..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,192 samples, 0.97%)</title><rect x="96.3320%" y="661" width="0.9660%" height="15" fill="rgb(246,176,45)" fg:x="118865" fg:w="1192"/><text x="96.5820%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,156 samples, 0.94%)</title><rect x="96.3612%" y="645" width="0.9369%" height="15" fill="rgb(217,170,52)" fg:x="118901" fg:w="1156"/><text x="96.6112%" y="655.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,156 samples, 0.94%)</title><rect x="96.3612%" y="629" width="0.9369%" height="15" fill="rgb(214,203,54)" fg:x="118901" fg:w="1156"/><text x="96.6112%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::get (16 samples, 0.01%)</title><rect x="97.3005%" y="693" width="0.0130%" height="15" fill="rgb(248,215,49)" fg:x="120060" fg:w="16"/><text x="97.5505%" y="703.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="97.3005%" y="677" width="0.0130%" height="15" fill="rgb(208,46,10)" fg:x="120060" fg:w="16"/><text x="97.5505%" y="687.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (16 samples, 0.01%)</title><rect x="97.3005%" y="661" width="0.0130%" height="15" fill="rgb(254,5,31)" fg:x="120060" fg:w="16"/><text x="97.5505%" y="671.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (16 samples, 0.01%)</title><rect x="97.3005%" y="645" width="0.0130%" height="15" fill="rgb(222,104,33)" fg:x="120060" fg:w="16"/><text x="97.5505%" y="655.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (16 samples, 0.01%)</title><rect x="97.3005%" y="629" width="0.0130%" height="15" fill="rgb(248,49,16)" fg:x="120060" fg:w="16"/><text x="97.5505%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (96 samples, 0.08%)</title><rect x="97.3134%" y="693" width="0.0778%" height="15" fill="rgb(232,198,41)" fg:x="120076" fg:w="96"/><text x="97.5634%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (96 samples, 0.08%)</title><rect x="97.3134%" y="677" width="0.0778%" height="15" fill="rgb(214,125,3)" fg:x="120076" fg:w="96"/><text x="97.5634%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (86 samples, 0.07%)</title><rect x="97.3215%" y="661" width="0.0697%" height="15" fill="rgb(229,220,28)" fg:x="120086" fg:w="86"/><text x="97.5715%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (86 samples, 0.07%)</title><rect x="97.3215%" y="645" width="0.0697%" height="15" fill="rgb(222,64,37)" fg:x="120086" fg:w="86"/><text x="97.5715%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (86 samples, 0.07%)</title><rect x="97.3215%" y="629" width="0.0697%" height="15" fill="rgb(249,184,13)" fg:x="120086" fg:w="86"/><text x="97.5715%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (86 samples, 0.07%)</title><rect x="97.3215%" y="613" width="0.0697%" height="15" fill="rgb(252,176,6)" fg:x="120086" fg:w="86"/><text x="97.5715%" y="623.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (19 samples, 0.02%)</title><rect x="97.4107%" y="677" width="0.0154%" height="15" fill="rgb(228,153,7)" fg:x="120196" fg:w="19"/><text x="97.6607%" y="687.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="97.4496%" y="517" width="0.0397%" height="15" fill="rgb(242,193,5)" fg:x="120244" fg:w="49"/><text x="97.6996%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (69 samples, 0.06%)</title><rect x="97.4480%" y="581" width="0.0559%" height="15" fill="rgb(232,140,9)" fg:x="120242" fg:w="69"/><text x="97.6980%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (68 samples, 0.06%)</title><rect x="97.4488%" y="565" width="0.0551%" height="15" fill="rgb(213,222,16)" fg:x="120243" fg:w="68"/><text x="97.6988%" y="575.50"></text></g><g><title>__rg_dealloc (68 samples, 0.06%)</title><rect x="97.4488%" y="549" width="0.0551%" height="15" fill="rgb(222,75,50)" fg:x="120243" fg:w="68"/><text x="97.6988%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (68 samples, 0.06%)</title><rect x="97.4488%" y="533" width="0.0551%" height="15" fill="rgb(205,180,2)" fg:x="120243" fg:w="68"/><text x="97.6988%" y="543.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (14 samples, 0.01%)</title><rect x="97.4925%" y="517" width="0.0113%" height="15" fill="rgb(216,34,7)" fg:x="120297" fg:w="14"/><text x="97.7425%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (75 samples, 0.06%)</title><rect x="97.4455%" y="613" width="0.0608%" height="15" fill="rgb(253,16,32)" fg:x="120239" fg:w="75"/><text x="97.6955%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (72 samples, 0.06%)</title><rect x="97.4480%" y="597" width="0.0584%" height="15" fill="rgb(208,97,28)" fg:x="120242" fg:w="72"/><text x="97.6980%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.06%)</title><rect x="97.4431%" y="661" width="0.0648%" height="15" fill="rgb(225,92,11)" fg:x="120236" fg:w="80"/><text x="97.6931%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (78 samples, 0.06%)</title><rect x="97.4447%" y="645" width="0.0632%" height="15" fill="rgb(243,38,12)" fg:x="120238" fg:w="78"/><text x="97.6947%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (77 samples, 0.06%)</title><rect x="97.4455%" y="629" width="0.0624%" height="15" fill="rgb(208,139,16)" fg:x="120239" fg:w="77"/><text x="97.6955%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="97.5079%" y="661" width="0.0146%" height="15" fill="rgb(227,24,9)" fg:x="120316" fg:w="18"/><text x="97.7579%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="97.5079%" y="645" width="0.0146%" height="15" fill="rgb(206,62,11)" fg:x="120316" fg:w="18"/><text x="97.7579%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (17 samples, 0.01%)</title><rect x="97.5087%" y="629" width="0.0138%" height="15" fill="rgb(228,134,27)" fg:x="120317" fg:w="17"/><text x="97.7587%" y="639.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::calc_split_length (13 samples, 0.01%)</title><rect x="97.5339%" y="645" width="0.0105%" height="15" fill="rgb(205,55,33)" fg:x="120348" fg:w="13"/><text x="97.7839%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (28 samples, 0.02%)</title><rect x="97.5517%" y="629" width="0.0227%" height="15" fill="rgb(243,75,43)" fg:x="120370" fg:w="28"/><text x="97.8017%" y="639.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (24 samples, 0.02%)</title><rect x="97.5549%" y="613" width="0.0195%" height="15" fill="rgb(223,27,42)" fg:x="120374" fg:w="24"/><text x="97.8049%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="97.5549%" y="597" width="0.0195%" height="15" fill="rgb(232,189,33)" fg:x="120374" fg:w="24"/><text x="97.8049%" y="607.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="97.5557%" y="581" width="0.0186%" height="15" fill="rgb(210,9,39)" fg:x="120375" fg:w="23"/><text x="97.8057%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (26 samples, 0.02%)</title><rect x="97.5801%" y="597" width="0.0211%" height="15" fill="rgb(242,85,26)" fg:x="120405" fg:w="26"/><text x="97.8301%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (41 samples, 0.03%)</title><rect x="97.5760%" y="629" width="0.0332%" height="15" fill="rgb(248,44,4)" fg:x="120400" fg:w="41"/><text x="97.8260%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (41 samples, 0.03%)</title><rect x="97.5760%" y="613" width="0.0332%" height="15" fill="rgb(250,96,46)" fg:x="120400" fg:w="41"/><text x="97.8260%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (73 samples, 0.06%)</title><rect x="97.6611%" y="421" width="0.0592%" height="15" fill="rgb(229,116,26)" fg:x="120505" fg:w="73"/><text x="97.9111%" y="431.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (219 samples, 0.18%)</title><rect x="97.5444%" y="645" width="0.1775%" height="15" fill="rgb(246,94,34)" fg:x="120361" fg:w="219"/><text x="97.7944%" y="655.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (139 samples, 0.11%)</title><rect x="97.6092%" y="629" width="0.1127%" height="15" fill="rgb(251,73,21)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (139 samples, 0.11%)</title><rect x="97.6092%" y="613" width="0.1127%" height="15" fill="rgb(254,121,25)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (139 samples, 0.11%)</title><rect x="97.6092%" y="597" width="0.1127%" height="15" fill="rgb(215,161,49)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="607.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (139 samples, 0.11%)</title><rect x="97.6092%" y="581" width="0.1127%" height="15" fill="rgb(221,43,13)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (139 samples, 0.11%)</title><rect x="97.6092%" y="565" width="0.1127%" height="15" fill="rgb(249,5,37)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (139 samples, 0.11%)</title><rect x="97.6092%" y="549" width="0.1127%" height="15" fill="rgb(226,25,44)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (139 samples, 0.11%)</title><rect x="97.6092%" y="533" width="0.1127%" height="15" fill="rgb(238,189,16)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (139 samples, 0.11%)</title><rect x="97.6092%" y="517" width="0.1127%" height="15" fill="rgb(251,186,8)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (139 samples, 0.11%)</title><rect x="97.6092%" y="501" width="0.1127%" height="15" fill="rgb(254,34,31)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="511.50"></text></g><g><title>alloc::alloc::alloc (139 samples, 0.11%)</title><rect x="97.6092%" y="485" width="0.1127%" height="15" fill="rgb(225,215,27)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="495.50"></text></g><g><title>__rg_alloc (139 samples, 0.11%)</title><rect x="97.6092%" y="469" width="0.1127%" height="15" fill="rgb(221,192,48)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (139 samples, 0.11%)</title><rect x="97.6092%" y="453" width="0.1127%" height="15" fill="rgb(219,137,20)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="463.50"></text></g><g><title>sn_rust_alloc (139 samples, 0.11%)</title><rect x="97.6092%" y="437" width="0.1127%" height="15" fill="rgb(219,84,11)" fg:x="120441" fg:w="139"/><text x="97.8592%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (238 samples, 0.19%)</title><rect x="97.5298%" y="661" width="0.1929%" height="15" fill="rgb(224,10,23)" fg:x="120343" fg:w="238"/><text x="97.7798%" y="671.50"></text></g><g><title>concurrent_queue::full_fence (18 samples, 0.01%)</title><rect x="97.7502%" y="613" width="0.0146%" height="15" fill="rgb(248,22,39)" fg:x="120615" fg:w="18"/><text x="98.0002%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (18 samples, 0.01%)</title><rect x="97.7502%" y="597" width="0.0146%" height="15" fill="rgb(212,154,20)" fg:x="120615" fg:w="18"/><text x="98.0002%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (18 samples, 0.01%)</title><rect x="97.7502%" y="581" width="0.0146%" height="15" fill="rgb(236,199,50)" fg:x="120615" fg:w="18"/><text x="98.0002%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="97.7502%" y="565" width="0.0146%" height="15" fill="rgb(211,9,17)" fg:x="120615" fg:w="18"/><text x="98.0002%" y="575.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (63 samples, 0.05%)</title><rect x="97.7227%" y="661" width="0.0511%" height="15" fill="rgb(243,216,36)" fg:x="120581" fg:w="63"/><text x="97.9727%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (48 samples, 0.04%)</title><rect x="97.7348%" y="645" width="0.0389%" height="15" fill="rgb(250,2,10)" fg:x="120596" fg:w="48"/><text x="97.9848%" y="655.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (47 samples, 0.04%)</title><rect x="97.7357%" y="629" width="0.0381%" height="15" fill="rgb(226,50,48)" fg:x="120597" fg:w="47"/><text x="97.9857%" y="639.50"></text></g><g><title>core::mem::drop (81 samples, 0.07%)</title><rect x="97.7737%" y="661" width="0.0656%" height="15" fill="rgb(243,81,16)" fg:x="120644" fg:w="81"/><text x="98.0237%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (81 samples, 0.07%)</title><rect x="97.7737%" y="645" width="0.0656%" height="15" fill="rgb(250,14,2)" fg:x="120644" fg:w="81"/><text x="98.0237%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="97.7737%" y="629" width="0.0656%" height="15" fill="rgb(233,135,29)" fg:x="120644" fg:w="81"/><text x="98.0237%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (77 samples, 0.06%)</title><rect x="97.7770%" y="613" width="0.0624%" height="15" fill="rgb(224,64,43)" fg:x="120648" fg:w="77"/><text x="98.0270%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (77 samples, 0.06%)</title><rect x="97.7770%" y="597" width="0.0624%" height="15" fill="rgb(238,84,13)" fg:x="120648" fg:w="77"/><text x="98.0270%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (76 samples, 0.06%)</title><rect x="97.7778%" y="581" width="0.0616%" height="15" fill="rgb(253,48,26)" fg:x="120649" fg:w="76"/><text x="98.0278%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (76 samples, 0.06%)</title><rect x="97.7778%" y="565" width="0.0616%" height="15" fill="rgb(205,223,31)" fg:x="120649" fg:w="76"/><text x="98.0278%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (25 samples, 0.02%)</title><rect x="97.8418%" y="661" width="0.0203%" height="15" fill="rgb(221,41,32)" fg:x="120728" fg:w="25"/><text x="98.0918%" y="671.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (19 samples, 0.02%)</title><rect x="97.8467%" y="645" width="0.0154%" height="15" fill="rgb(213,158,31)" fg:x="120734" fg:w="19"/><text x="98.0967%" y="655.50"></text></g><g><title>std::time::Instant::duration_since (19 samples, 0.02%)</title><rect x="97.8467%" y="629" width="0.0154%" height="15" fill="rgb(245,126,43)" fg:x="120734" fg:w="19"/><text x="98.0967%" y="639.50"></text></g><g><title>std::time::Instant::checked_duration_since (19 samples, 0.02%)</title><rect x="97.8467%" y="613" width="0.0154%" height="15" fill="rgb(227,7,22)" fg:x="120734" fg:w="19"/><text x="98.0967%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (19 samples, 0.02%)</title><rect x="97.8467%" y="597" width="0.0154%" height="15" fill="rgb(252,90,44)" fg:x="120734" fg:w="19"/><text x="98.0967%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (16 samples, 0.01%)</title><rect x="97.8491%" y="581" width="0.0130%" height="15" fill="rgb(253,91,0)" fg:x="120737" fg:w="16"/><text x="98.0991%" y="591.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (68 samples, 0.06%)</title><rect x="97.8669%" y="661" width="0.0551%" height="15" fill="rgb(252,175,49)" fg:x="120759" fg:w="68"/><text x="98.1169%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (66 samples, 0.05%)</title><rect x="97.8686%" y="645" width="0.0535%" height="15" fill="rgb(246,150,1)" fg:x="120761" fg:w="66"/><text x="98.1186%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (66 samples, 0.05%)</title><rect x="97.8686%" y="629" width="0.0535%" height="15" fill="rgb(241,192,25)" fg:x="120761" fg:w="66"/><text x="98.1186%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (66 samples, 0.05%)</title><rect x="97.8686%" y="613" width="0.0535%" height="15" fill="rgb(239,187,11)" fg:x="120761" fg:w="66"/><text x="98.1186%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.05%)</title><rect x="97.8686%" y="597" width="0.0535%" height="15" fill="rgb(218,202,51)" fg:x="120761" fg:w="66"/><text x="98.1186%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (689 samples, 0.56%)</title><rect x="97.4269%" y="677" width="0.5584%" height="15" fill="rgb(225,176,8)" fg:x="120216" fg:w="689"/><text x="97.6769%" y="687.50"></text></g><g><title>std::time::Instant::now (78 samples, 0.06%)</title><rect x="97.9221%" y="661" width="0.0632%" height="15" fill="rgb(219,122,41)" fg:x="120827" fg:w="78"/><text x="98.1721%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (78 samples, 0.06%)</title><rect x="97.9221%" y="645" width="0.0632%" height="15" fill="rgb(248,140,20)" fg:x="120827" fg:w="78"/><text x="98.1721%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (78 samples, 0.06%)</title><rect x="97.9221%" y="629" width="0.0632%" height="15" fill="rgb(245,41,37)" fg:x="120827" fg:w="78"/><text x="98.1721%" y="639.50"></text></g><g><title>__clock_gettime (76 samples, 0.06%)</title><rect x="97.9237%" y="613" width="0.0616%" height="15" fill="rgb(235,82,39)" fg:x="120829" fg:w="76"/><text x="98.1737%" y="623.50"></text></g><g><title>__vdso_clock_gettime (60 samples, 0.05%)</title><rect x="97.9366%" y="597" width="0.0486%" height="15" fill="rgb(230,108,42)" fg:x="120845" fg:w="60"/><text x="98.1866%" y="607.50"></text></g><g><title>[[vdso]] (52 samples, 0.04%)</title><rect x="97.9431%" y="581" width="0.0421%" height="15" fill="rgb(215,150,50)" fg:x="120853" fg:w="52"/><text x="98.1931%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (30 samples, 0.02%)</title><rect x="97.9885%" y="677" width="0.0243%" height="15" fill="rgb(233,212,5)" fg:x="120909" fg:w="30"/><text x="98.2385%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (30 samples, 0.02%)</title><rect x="97.9885%" y="661" width="0.0243%" height="15" fill="rgb(245,80,22)" fg:x="120909" fg:w="30"/><text x="98.2385%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (17 samples, 0.01%)</title><rect x="98.0639%" y="661" width="0.0138%" height="15" fill="rgb(238,129,16)" fg:x="121002" fg:w="17"/><text x="98.3139%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="98.0639%" y="645" width="0.0138%" height="15" fill="rgb(240,19,0)" fg:x="121002" fg:w="17"/><text x="98.3139%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="98.0663%" y="629" width="0.0113%" height="15" fill="rgb(232,42,35)" fg:x="121005" fg:w="14"/><text x="98.3163%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (14 samples, 0.01%)</title><rect x="98.0663%" y="613" width="0.0113%" height="15" fill="rgb(223,130,24)" fg:x="121005" fg:w="14"/><text x="98.3163%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.01%)</title><rect x="98.0663%" y="597" width="0.0113%" height="15" fill="rgb(237,16,22)" fg:x="121005" fg:w="14"/><text x="98.3163%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="98.0663%" y="581" width="0.0113%" height="15" fill="rgb(248,192,20)" fg:x="121005" fg:w="14"/><text x="98.3163%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (23 samples, 0.02%)</title><rect x="98.0777%" y="661" width="0.0186%" height="15" fill="rgb(233,167,2)" fg:x="121019" fg:w="23"/><text x="98.3277%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="98.0777%" y="645" width="0.0186%" height="15" fill="rgb(252,71,44)" fg:x="121019" fg:w="23"/><text x="98.3277%" y="655.50"></text></g><g><title>__pthread_disable_asynccancel (21 samples, 0.02%)</title><rect x="98.2349%" y="629" width="0.0170%" height="15" fill="rgb(238,37,47)" fg:x="121213" fg:w="21"/><text x="98.4849%" y="639.50"></text></g><g><title>__libc_read (141 samples, 0.11%)</title><rect x="98.1871%" y="645" width="0.1143%" height="15" fill="rgb(214,202,54)" fg:x="121154" fg:w="141"/><text x="98.4371%" y="655.50"></text></g><g><title>__pthread_enable_asynccancel (61 samples, 0.05%)</title><rect x="98.2519%" y="629" width="0.0494%" height="15" fill="rgb(254,165,40)" fg:x="121234" fg:w="61"/><text x="98.5019%" y="639.50"></text></g><g><title>epoll_wait (174 samples, 0.14%)</title><rect x="98.3013%" y="645" width="0.1410%" height="15" fill="rgb(246,173,38)" fg:x="121295" fg:w="174"/><text x="98.5513%" y="655.50"></text></g><g><title>[libc-2.31.so] (56 samples, 0.05%)</title><rect x="98.3970%" y="629" width="0.0454%" height="15" fill="rgb(215,3,27)" fg:x="121413" fg:w="56"/><text x="98.6470%" y="639.50"></text></g><g><title>polling::epoll::Poller::modify (84 samples, 0.07%)</title><rect x="98.4456%" y="645" width="0.0681%" height="15" fill="rgb(239,169,51)" fg:x="121473" fg:w="84"/><text x="98.6956%" y="655.50"></text></g><g><title>polling::epoll::Poller::ctl (74 samples, 0.06%)</title><rect x="98.4537%" y="629" width="0.0600%" height="15" fill="rgb(212,5,25)" fg:x="121483" fg:w="74"/><text x="98.7037%" y="639.50"></text></g><g><title>epoll_ctl (69 samples, 0.06%)</title><rect x="98.4577%" y="613" width="0.0559%" height="15" fill="rgb(243,45,17)" fg:x="121488" fg:w="69"/><text x="98.7077%" y="623.50"></text></g><g><title>polling::epoll::Poller::wait (551 samples, 0.45%)</title><rect x="98.0963%" y="661" width="0.4465%" height="15" fill="rgb(242,97,9)" fg:x="121042" fg:w="551"/><text x="98.3463%" y="671.50"></text></g><g><title>syscall (35 samples, 0.03%)</title><rect x="98.5145%" y="645" width="0.0284%" height="15" fill="rgb(228,71,31)" fg:x="121558" fg:w="35"/><text x="98.7645%" y="655.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,436 samples, 1.16%)</title><rect x="97.3912%" y="693" width="1.1638%" height="15" fill="rgb(252,184,16)" fg:x="120172" fg:w="1436"/><text x="97.6412%" y="703.50"></text></g><g><title>polling::Poller::wait (667 samples, 0.54%)</title><rect x="98.0144%" y="677" width="0.5406%" height="15" fill="rgb(236,169,46)" fg:x="120941" fg:w="667"/><text x="98.2644%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (15 samples, 0.01%)</title><rect x="98.5428%" y="661" width="0.0122%" height="15" fill="rgb(207,17,47)" fg:x="121593" fg:w="15"/><text x="98.7928%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (13 samples, 0.01%)</title><rect x="98.5445%" y="645" width="0.0105%" height="15" fill="rgb(206,201,28)" fg:x="121595" fg:w="13"/><text x="98.7945%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (13 samples, 0.01%)</title><rect x="98.5445%" y="629" width="0.0105%" height="15" fill="rgb(224,184,23)" fg:x="121595" fg:w="13"/><text x="98.7945%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.01%)</title><rect x="98.5445%" y="613" width="0.0105%" height="15" fill="rgb(208,139,48)" fg:x="121595" fg:w="13"/><text x="98.7945%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="98.5445%" y="597" width="0.0105%" height="15" fill="rgb(208,130,10)" fg:x="121595" fg:w="13"/><text x="98.7945%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (19 samples, 0.02%)</title><rect x="98.5550%" y="645" width="0.0154%" height="15" fill="rgb(211,213,45)" fg:x="121608" fg:w="19"/><text x="98.8050%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_store (19 samples, 0.02%)</title><rect x="98.5550%" y="629" width="0.0154%" height="15" fill="rgb(235,100,30)" fg:x="121608" fg:w="19"/><text x="98.8050%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="98.5550%" y="693" width="0.0227%" height="15" fill="rgb(206,144,31)" fg:x="121608" fg:w="28"/><text x="98.8050%" y="703.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="98.5550%" y="677" width="0.0227%" height="15" fill="rgb(224,200,26)" fg:x="121608" fg:w="28"/><text x="98.8050%" y="687.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (28 samples, 0.02%)</title><rect x="98.5550%" y="661" width="0.0227%" height="15" fill="rgb(247,104,53)" fg:x="121608" fg:w="28"/><text x="98.8050%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (23 samples, 0.02%)</title><rect x="98.5801%" y="693" width="0.0186%" height="15" fill="rgb(220,14,17)" fg:x="121639" fg:w="23"/><text x="98.8301%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_store (23 samples, 0.02%)</title><rect x="98.5801%" y="677" width="0.0186%" height="15" fill="rgb(230,140,40)" fg:x="121639" fg:w="23"/><text x="98.8301%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (34 samples, 0.03%)</title><rect x="98.6182%" y="661" width="0.0276%" height="15" fill="rgb(229,2,41)" fg:x="121686" fg:w="34"/><text x="98.8682%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="98.6182%" y="645" width="0.0276%" height="15" fill="rgb(232,89,16)" fg:x="121686" fg:w="34"/><text x="98.8682%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.02%)</title><rect x="98.6223%" y="629" width="0.0235%" height="15" fill="rgb(247,59,52)" fg:x="121691" fg:w="29"/><text x="98.8723%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (29 samples, 0.02%)</title><rect x="98.6223%" y="613" width="0.0235%" height="15" fill="rgb(226,110,21)" fg:x="121691" fg:w="29"/><text x="98.8723%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (29 samples, 0.02%)</title><rect x="98.6223%" y="597" width="0.0235%" height="15" fill="rgb(224,176,43)" fg:x="121691" fg:w="29"/><text x="98.8723%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (29 samples, 0.02%)</title><rect x="98.6223%" y="581" width="0.0235%" height="15" fill="rgb(221,73,6)" fg:x="121691" fg:w="29"/><text x="98.8723%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (128 samples, 0.10%)</title><rect x="98.6458%" y="661" width="0.1037%" height="15" fill="rgb(232,78,19)" fg:x="121720" fg:w="128"/><text x="98.8958%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (128 samples, 0.10%)</title><rect x="98.6458%" y="645" width="0.1037%" height="15" fill="rgb(233,112,48)" fg:x="121720" fg:w="128"/><text x="98.8958%" y="655.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (58 samples, 0.05%)</title><rect x="98.7625%" y="581" width="0.0470%" height="15" fill="rgb(243,131,47)" fg:x="121864" fg:w="58"/><text x="99.0125%" y="591.50"></text></g><g><title>std::sys::unix::futex::futex_wait (329 samples, 0.27%)</title><rect x="98.7568%" y="597" width="0.2666%" height="15" fill="rgb(226,51,1)" fg:x="121857" fg:w="329"/><text x="99.0068%" y="607.50"></text></g><g><title>syscall (250 samples, 0.20%)</title><rect x="98.8208%" y="581" width="0.2026%" height="15" fill="rgb(247,58,7)" fg:x="121936" fg:w="250"/><text x="99.0708%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (345 samples, 0.28%)</title><rect x="99.0234%" y="597" width="0.2796%" height="15" fill="rgb(209,7,32)" fg:x="122186" fg:w="345"/><text x="99.2734%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (345 samples, 0.28%)</title><rect x="99.0234%" y="581" width="0.2796%" height="15" fill="rgb(209,39,41)" fg:x="122186" fg:w="345"/><text x="99.2734%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (345 samples, 0.28%)</title><rect x="99.0234%" y="565" width="0.2796%" height="15" fill="rgb(226,182,46)" fg:x="122186" fg:w="345"/><text x="99.2734%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (702 samples, 0.57%)</title><rect x="98.7495%" y="661" width="0.5689%" height="15" fill="rgb(230,219,10)" fg:x="121848" fg:w="702"/><text x="98.9995%" y="671.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (700 samples, 0.57%)</title><rect x="98.7511%" y="645" width="0.5673%" height="15" fill="rgb(227,175,30)" fg:x="121850" fg:w="700"/><text x="99.0011%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (700 samples, 0.57%)</title><rect x="98.7511%" y="629" width="0.5673%" height="15" fill="rgb(217,2,50)" fg:x="121850" fg:w="700"/><text x="99.0011%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (700 samples, 0.57%)</title><rect x="98.7511%" y="613" width="0.5673%" height="15" fill="rgb(229,160,0)" fg:x="121850" fg:w="700"/><text x="99.0011%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (19 samples, 0.02%)</title><rect x="99.3030%" y="597" width="0.0154%" height="15" fill="rgb(207,78,37)" fg:x="122531" fg:w="19"/><text x="99.5530%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (19 samples, 0.02%)</title><rect x="99.3030%" y="581" width="0.0154%" height="15" fill="rgb(225,57,0)" fg:x="122531" fg:w="19"/><text x="99.5530%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.02%)</title><rect x="99.3030%" y="565" width="0.0154%" height="15" fill="rgb(232,154,2)" fg:x="122531" fg:w="19"/><text x="99.5530%" y="575.50"></text></g><g><title>parking::Parker::park (913 samples, 0.74%)</title><rect x="98.6036%" y="693" width="0.7399%" height="15" fill="rgb(241,212,25)" fg:x="121668" fg:w="913"/><text x="98.8536%" y="703.50"></text></g><g><title>parking::Inner::park (907 samples, 0.74%)</title><rect x="98.6085%" y="677" width="0.7351%" height="15" fill="rgb(226,69,20)" fg:x="121674" fg:w="907"/><text x="98.8585%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.03%)</title><rect x="99.3184%" y="661" width="0.0251%" height="15" fill="rgb(247,184,54)" fg:x="122550" fg:w="31"/><text x="99.5684%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="99.3233%" y="645" width="0.0203%" height="15" fill="rgb(210,145,0)" fg:x="122556" fg:w="25"/><text x="99.5733%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (25 samples, 0.02%)</title><rect x="99.3233%" y="629" width="0.0203%" height="15" fill="rgb(253,82,12)" fg:x="122556" fg:w="25"/><text x="99.5733%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (25 samples, 0.02%)</title><rect x="99.3233%" y="613" width="0.0203%" height="15" fill="rgb(245,42,11)" fg:x="122556" fg:w="25"/><text x="99.5733%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="99.3233%" y="597" width="0.0203%" height="15" fill="rgb(219,147,32)" fg:x="122556" fg:w="25"/><text x="99.5733%" y="607.50"></text></g><g><title>parking::Parker::park_timeout (328 samples, 0.27%)</title><rect x="99.3436%" y="693" width="0.2658%" height="15" fill="rgb(246,12,7)" fg:x="122581" fg:w="328"/><text x="99.5936%" y="703.50"></text></g><g><title>parking::Inner::park (276 samples, 0.22%)</title><rect x="99.3857%" y="677" width="0.2237%" height="15" fill="rgb(243,50,9)" fg:x="122633" fg:w="276"/><text x="99.6357%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (252 samples, 0.20%)</title><rect x="99.4051%" y="661" width="0.2042%" height="15" fill="rgb(219,149,6)" fg:x="122657" fg:w="252"/><text x="99.6551%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (252 samples, 0.20%)</title><rect x="99.4051%" y="645" width="0.2042%" height="15" fill="rgb(241,51,42)" fg:x="122657" fg:w="252"/><text x="99.6551%" y="655.50"></text></g><g><title>std::panic::catch_unwind (20,187 samples, 16.36%)</title><rect x="83.2840%" y="981" width="16.3602%" height="15" fill="rgb(226,128,27)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,187 samples, 16.36%)</title><rect x="83.2840%" y="965" width="16.3602%" height="15" fill="rgb(244,144,4)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,187 samples, 16.36%)</title><rect x="83.2840%" y="949" width="16.3602%" height="15" fill="rgb(221,4,13)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="959.50">std::panicking::try::do_c..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,187 samples, 16.36%)</title><rect x="83.2840%" y="933" width="16.3602%" height="15" fill="rgb(208,170,28)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="943.50">&lt;core::panic::unwind_safe..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,187 samples, 16.36%)</title><rect x="83.2840%" y="917" width="16.3602%" height="15" fill="rgb(226,131,13)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="927.50">std::thread::Builder::spa..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,187 samples, 16.36%)</title><rect x="83.2840%" y="901" width="16.3602%" height="15" fill="rgb(215,72,41)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="911.50">std::sys_common::backtrac..</text></g><g><title>core::ops::function::FnOnce::call_once (20,187 samples, 16.36%)</title><rect x="83.2840%" y="885" width="16.3602%" height="15" fill="rgb(243,108,20)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="895.50">core::ops::function::FnOn..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,187 samples, 16.36%)</title><rect x="83.2840%" y="869" width="16.3602%" height="15" fill="rgb(230,189,17)" fg:x="102765" fg:w="20187"/><text x="83.5340%" y="879.50">async_global_executor::th..</text></g><g><title>std::panic::catch_unwind (20,175 samples, 16.35%)</title><rect x="83.2938%" y="853" width="16.3505%" height="15" fill="rgb(220,50,17)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,175 samples, 16.35%)</title><rect x="83.2938%" y="837" width="16.3505%" height="15" fill="rgb(248,152,48)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,175 samples, 16.35%)</title><rect x="83.2938%" y="821" width="16.3505%" height="15" fill="rgb(244,91,11)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="831.50">std::panicking::try::do_c..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (20,175 samples, 16.35%)</title><rect x="83.2938%" y="805" width="16.3505%" height="15" fill="rgb(220,157,5)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="815.50">async_global_executor::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,175 samples, 16.35%)</title><rect x="83.2938%" y="789" width="16.3505%" height="15" fill="rgb(253,137,8)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="799.50">std::thread::local::Local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,175 samples, 16.35%)</title><rect x="83.2938%" y="773" width="16.3505%" height="15" fill="rgb(217,137,51)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="783.50">std::thread::local::Local..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (20,175 samples, 16.35%)</title><rect x="83.2938%" y="757" width="16.3505%" height="15" fill="rgb(218,209,53)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="767.50">async_global_executor::th..</text></g><g><title>async_global_executor::reactor::block_on (20,175 samples, 16.35%)</title><rect x="83.2938%" y="741" width="16.3505%" height="15" fill="rgb(249,137,25)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="751.50">async_global_executor::re..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,175 samples, 16.35%)</title><rect x="83.2938%" y="725" width="16.3505%" height="15" fill="rgb(239,155,26)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="735.50">async_global_executor::re..</text></g><g><title>async_io::driver::block_on (20,175 samples, 16.35%)</title><rect x="83.2938%" y="709" width="16.3505%" height="15" fill="rgb(227,85,46)" fg:x="102777" fg:w="20175"/><text x="83.5438%" y="719.50">async_io::driver::block_on</text></g><g><title>std::time::Instant::now (39 samples, 0.03%)</title><rect x="99.6126%" y="693" width="0.0316%" height="15" fill="rgb(251,107,43)" fg:x="122913" fg:w="39"/><text x="99.8626%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (39 samples, 0.03%)</title><rect x="99.6126%" y="677" width="0.0316%" height="15" fill="rgb(234,170,33)" fg:x="122913" fg:w="39"/><text x="99.8626%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (39 samples, 0.03%)</title><rect x="99.6126%" y="661" width="0.0316%" height="15" fill="rgb(206,29,35)" fg:x="122913" fg:w="39"/><text x="99.8626%" y="671.50"></text></g><g><title>__clock_gettime (35 samples, 0.03%)</title><rect x="99.6159%" y="645" width="0.0284%" height="15" fill="rgb(227,138,25)" fg:x="122917" fg:w="35"/><text x="99.8659%" y="655.50"></text></g><g><title>__vdso_clock_gettime (24 samples, 0.02%)</title><rect x="99.6248%" y="629" width="0.0195%" height="15" fill="rgb(249,131,35)" fg:x="122928" fg:w="24"/><text x="99.8748%" y="639.50"></text></g><g><title>[[vdso]] (18 samples, 0.01%)</title><rect x="99.6296%" y="613" width="0.0146%" height="15" fill="rgb(239,6,40)" fg:x="122934" fg:w="18"/><text x="99.8796%" y="623.50"></text></g><g><title>clone (20,198 samples, 16.37%)</title><rect x="83.2800%" y="1093" width="16.3691%" height="15" fill="rgb(246,136,47)" fg:x="102760" fg:w="20198"/><text x="83.5300%" y="1103.50">clone</text></g><g><title>start_thread (20,194 samples, 16.37%)</title><rect x="83.2832%" y="1077" width="16.3659%" height="15" fill="rgb(253,58,26)" fg:x="102764" fg:w="20194"/><text x="83.5332%" y="1087.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,193 samples, 16.37%)</title><rect x="83.2840%" y="1061" width="16.3651%" height="15" fill="rgb(237,141,10)" fg:x="102765" fg:w="20193"/><text x="83.5340%" y="1071.50">std::sys::unix::thread::T..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,193 samples, 16.37%)</title><rect x="83.2840%" y="1045" width="16.3651%" height="15" fill="rgb(234,156,12)" fg:x="102765" fg:w="20193"/><text x="83.5340%" y="1055.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,193 samples, 16.37%)</title><rect x="83.2840%" y="1029" width="16.3651%" height="15" fill="rgb(243,224,36)" fg:x="102765" fg:w="20193"/><text x="83.5340%" y="1039.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,193 samples, 16.37%)</title><rect x="83.2840%" y="1013" width="16.3651%" height="15" fill="rgb(205,229,51)" fg:x="102765" fg:w="20193"/><text x="83.5340%" y="1023.50">core::ops::function::FnOn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,193 samples, 16.37%)</title><rect x="83.2840%" y="997" width="16.3651%" height="15" fill="rgb(223,189,4)" fg:x="102765" fg:w="20193"/><text x="83.5340%" y="1007.50">std::thread::Builder::spa..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (26 samples, 0.02%)</title><rect x="99.6491%" y="1093" width="0.0211%" height="15" fill="rgb(249,167,54)" fg:x="122958" fg:w="26"/><text x="99.8991%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="99.6766%" y="1093" width="0.0105%" height="15" fill="rgb(218,34,28)" fg:x="122992" fg:w="13"/><text x="99.9266%" y="1103.50"></text></g><g><title>signal_hook_registry::GLOBAL_DATA (13 samples, 0.01%)</title><rect x="99.7042%" y="1093" width="0.0105%" height="15" fill="rgb(232,109,42)" fg:x="123026" fg:w="13"/><text x="99.9542%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (19 samples, 0.02%)</title><rect x="99.7277%" y="1093" width="0.0154%" height="15" fill="rgb(248,214,46)" fg:x="123055" fg:w="19"/><text x="99.9777%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (29 samples, 0.02%)</title><rect x="99.7431%" y="1093" width="0.0235%" height="15" fill="rgb(244,216,40)" fg:x="123074" fg:w="29"/><text x="99.9931%" y="1103.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (19 samples, 0.02%)</title><rect x="99.7512%" y="1077" width="0.0154%" height="15" fill="rgb(231,226,31)" fg:x="123084" fg:w="19"/><text x="100.0012%" y="1087.50"></text></g><g><title>async-std/runti (123,060 samples, 99.73%)</title><rect x="0.0405%" y="1109" width="99.7317%" height="15" fill="rgb(238,38,43)" fg:x="50" fg:w="123060"/><text x="0.2905%" y="1119.50">async-std/runti</text></g><g><title>pdk-noknownkey (194 samples, 0.16%)</title><rect x="99.7828%" y="1109" width="0.1572%" height="15" fill="rgb(208,88,43)" fg:x="123123" fg:w="194"/><text x="100.0328%" y="1119.50"></text></g><g><title>clone (178 samples, 0.14%)</title><rect x="99.7958%" y="1093" width="0.1443%" height="15" fill="rgb(205,136,37)" fg:x="123139" fg:w="178"/><text x="100.0458%" y="1103.50"></text></g><g><title>start_thread (26 samples, 0.02%)</title><rect x="99.9190%" y="1077" width="0.0211%" height="15" fill="rgb(237,34,14)" fg:x="123291" fg:w="26"/><text x="100.1690%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (63 samples, 0.05%)</title><rect x="99.9408%" y="773" width="0.0511%" height="15" fill="rgb(236,193,44)" fg:x="123318" fg:w="63"/><text x="100.1908%" y="783.50"></text></g><g><title>syscall (53 samples, 0.04%)</title><rect x="99.9489%" y="757" width="0.0430%" height="15" fill="rgb(231,48,10)" fg:x="123328" fg:w="53"/><text x="100.1989%" y="767.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (67 samples, 0.05%)</title><rect x="99.9408%" y="853" width="0.0543%" height="15" fill="rgb(213,141,34)" fg:x="123318" fg:w="67"/><text x="100.1908%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (67 samples, 0.05%)</title><rect x="99.9408%" y="837" width="0.0543%" height="15" fill="rgb(249,130,34)" fg:x="123318" fg:w="67"/><text x="100.1908%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (67 samples, 0.05%)</title><rect x="99.9408%" y="821" width="0.0543%" height="15" fill="rgb(219,42,41)" fg:x="123318" fg:w="67"/><text x="100.1908%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (67 samples, 0.05%)</title><rect x="99.9408%" y="805" width="0.0543%" height="15" fill="rgb(224,100,54)" fg:x="123318" fg:w="67"/><text x="100.1908%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (67 samples, 0.05%)</title><rect x="99.9408%" y="789" width="0.0543%" height="15" fill="rgb(229,200,27)" fg:x="123318" fg:w="67"/><text x="100.1908%" y="799.50"></text></g><g><title>std::panic::catch_unwind (68 samples, 0.06%)</title><rect x="99.9408%" y="981" width="0.0551%" height="15" fill="rgb(217,118,10)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="991.50"></text></g><g><title>std::panicking::try (68 samples, 0.06%)</title><rect x="99.9408%" y="965" width="0.0551%" height="15" fill="rgb(206,22,3)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="975.50"></text></g><g><title>std::panicking::try::do_call (68 samples, 0.06%)</title><rect x="99.9408%" y="949" width="0.0551%" height="15" fill="rgb(232,163,46)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (68 samples, 0.06%)</title><rect x="99.9408%" y="933" width="0.0551%" height="15" fill="rgb(206,95,13)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (68 samples, 0.06%)</title><rect x="99.9408%" y="917" width="0.0551%" height="15" fill="rgb(253,154,18)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (68 samples, 0.06%)</title><rect x="99.9408%" y="901" width="0.0551%" height="15" fill="rgb(219,32,23)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (68 samples, 0.06%)</title><rect x="99.9408%" y="885" width="0.0551%" height="15" fill="rgb(230,191,45)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (68 samples, 0.06%)</title><rect x="99.9408%" y="869" width="0.0551%" height="15" fill="rgb(229,64,36)" fg:x="123318" fg:w="68"/><text x="100.1908%" y="879.50"></text></g><g><title>all (123,391 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(205,129,25)" fg:x="0" fg:w="123391"/><text x="0.2500%" y="1135.50"></text></g><g><title>tokio-runtime-w (74 samples, 0.06%)</title><rect x="99.9400%" y="1109" width="0.0600%" height="15" fill="rgb(254,112,7)" fg:x="123317" fg:w="74"/><text x="100.1900%" y="1119.50"></text></g><g><title>clone (73 samples, 0.06%)</title><rect x="99.9408%" y="1093" width="0.0592%" height="15" fill="rgb(226,53,48)" fg:x="123318" fg:w="73"/><text x="100.1908%" y="1103.50"></text></g><g><title>start_thread (73 samples, 0.06%)</title><rect x="99.9408%" y="1077" width="0.0592%" height="15" fill="rgb(214,153,38)" fg:x="123318" fg:w="73"/><text x="100.1908%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (73 samples, 0.06%)</title><rect x="99.9408%" y="1061" width="0.0592%" height="15" fill="rgb(243,101,7)" fg:x="123318" fg:w="73"/><text x="100.1908%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (73 samples, 0.06%)</title><rect x="99.9408%" y="1045" width="0.0592%" height="15" fill="rgb(240,140,22)" fg:x="123318" fg:w="73"/><text x="100.1908%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (73 samples, 0.06%)</title><rect x="99.9408%" y="1029" width="0.0592%" height="15" fill="rgb(235,114,2)" fg:x="123318" fg:w="73"/><text x="100.1908%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (73 samples, 0.06%)</title><rect x="99.9408%" y="1013" width="0.0592%" height="15" fill="rgb(242,59,12)" fg:x="123318" fg:w="73"/><text x="100.1908%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (73 samples, 0.06%)</title><rect x="99.9408%" y="997" width="0.0592%" height="15" fill="rgb(252,134,9)" fg:x="123318" fg:w="73"/><text x="100.1908%" y="1007.50"></text></g></svg></svg>