<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="123446"><g><title>std::sync::condvar::Condvar::wait_timeout (45 samples, 0.04%)</title><rect x="0.0081%" y="789" width="0.0365%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="45"/><text x="0.2581%" y="799.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (43 samples, 0.03%)</title><rect x="0.0097%" y="773" width="0.0348%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="43"/><text x="0.2597%" y="783.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (43 samples, 0.03%)</title><rect x="0.0097%" y="757" width="0.0348%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="43"/><text x="0.2597%" y="767.50"></text></g><g><title>__pthread_cond_timedwait (41 samples, 0.03%)</title><rect x="0.0113%" y="741" width="0.0332%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="41"/><text x="0.2613%" y="751.50"></text></g><g><title>async-io (57 samples, 0.05%)</title><rect x="0.0000%" y="1077" width="0.0462%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="57"/><text x="0.2500%" y="1087.50"></text></g><g><title>clone (55 samples, 0.04%)</title><rect x="0.0016%" y="1061" width="0.0446%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="55"/><text x="0.2516%" y="1071.50"></text></g><g><title>start_thread (55 samples, 0.04%)</title><rect x="0.0016%" y="1045" width="0.0446%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="55"/><text x="0.2516%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (55 samples, 0.04%)</title><rect x="0.0016%" y="1029" width="0.0446%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="55"/><text x="0.2516%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (55 samples, 0.04%)</title><rect x="0.0016%" y="1013" width="0.0446%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="55"/><text x="0.2516%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (55 samples, 0.04%)</title><rect x="0.0016%" y="997" width="0.0446%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="55"/><text x="0.2516%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (55 samples, 0.04%)</title><rect x="0.0016%" y="981" width="0.0446%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="55"/><text x="0.2516%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (55 samples, 0.04%)</title><rect x="0.0016%" y="965" width="0.0446%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="55"/><text x="0.2516%" y="975.50"></text></g><g><title>std::panic::catch_unwind (55 samples, 0.04%)</title><rect x="0.0016%" y="949" width="0.0446%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="55"/><text x="0.2516%" y="959.50"></text></g><g><title>std::panicking::try (55 samples, 0.04%)</title><rect x="0.0016%" y="933" width="0.0446%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="55"/><text x="0.2516%" y="943.50"></text></g><g><title>std::panicking::try::do_call (55 samples, 0.04%)</title><rect x="0.0016%" y="917" width="0.0446%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="55"/><text x="0.2516%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (55 samples, 0.04%)</title><rect x="0.0016%" y="901" width="0.0446%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="55"/><text x="0.2516%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (55 samples, 0.04%)</title><rect x="0.0016%" y="885" width="0.0446%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="55"/><text x="0.2516%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (55 samples, 0.04%)</title><rect x="0.0016%" y="869" width="0.0446%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="55"/><text x="0.2516%" y="879.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (55 samples, 0.04%)</title><rect x="0.0016%" y="853" width="0.0446%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="55"/><text x="0.2516%" y="863.50"></text></g><g><title>async_io::driver::main_loop (55 samples, 0.04%)</title><rect x="0.0016%" y="837" width="0.0446%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="55"/><text x="0.2516%" y="847.50"></text></g><g><title>parking::Parker::park_timeout (49 samples, 0.04%)</title><rect x="0.0065%" y="821" width="0.0397%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="49"/><text x="0.2565%" y="831.50"></text></g><g><title>parking::Inner::park (49 samples, 0.04%)</title><rect x="0.0065%" y="805" width="0.0397%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="49"/><text x="0.2565%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (40 samples, 0.03%)</title><rect x="0.0470%" y="1061" width="0.0324%" height="15" fill="rgb(221,5,38)" fg:x="58" fg:w="40"/><text x="0.2970%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (19 samples, 0.02%)</title><rect x="0.0851%" y="1061" width="0.0154%" height="15" fill="rgb(247,18,42)" fg:x="105" fg:w="19"/><text x="0.3351%" y="1071.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="0.1029%" y="1061" width="0.0178%" height="15" fill="rgb(241,131,45)" fg:x="127" fg:w="22"/><text x="0.3529%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="0.1207%" y="1061" width="0.0146%" height="15" fill="rgb(249,31,29)" fg:x="149" fg:w="18"/><text x="0.3707%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (33 samples, 0.03%)</title><rect x="0.1353%" y="1061" width="0.0267%" height="15" fill="rgb(225,111,53)" fg:x="167" fg:w="33"/><text x="0.3853%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (37 samples, 0.03%)</title><rect x="0.2171%" y="1029" width="0.0300%" height="15" fill="rgb(238,160,17)" fg:x="268" fg:w="37"/><text x="0.4671%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (24 samples, 0.02%)</title><rect x="0.2495%" y="981" width="0.0194%" height="15" fill="rgb(214,148,48)" fg:x="308" fg:w="24"/><text x="0.4995%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (123 samples, 0.10%)</title><rect x="0.1815%" y="1045" width="0.0996%" height="15" fill="rgb(232,36,49)" fg:x="224" fg:w="123"/><text x="0.4315%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (42 samples, 0.03%)</title><rect x="0.2471%" y="1029" width="0.0340%" height="15" fill="rgb(209,103,24)" fg:x="305" fg:w="42"/><text x="0.4971%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (42 samples, 0.03%)</title><rect x="0.2471%" y="1013" width="0.0340%" height="15" fill="rgb(229,88,8)" fg:x="305" fg:w="42"/><text x="0.4971%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (42 samples, 0.03%)</title><rect x="0.2471%" y="997" width="0.0340%" height="15" fill="rgb(213,181,19)" fg:x="305" fg:w="42"/><text x="0.4971%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="0.2689%" y="981" width="0.0122%" height="15" fill="rgb(254,191,54)" fg:x="332" fg:w="15"/><text x="0.5189%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="0.2689%" y="965" width="0.0122%" height="15" fill="rgb(241,83,37)" fg:x="332" fg:w="15"/><text x="0.5189%" y="975.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="0.2689%" y="949" width="0.0122%" height="15" fill="rgb(233,36,39)" fg:x="332" fg:w="15"/><text x="0.5189%" y="959.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (162 samples, 0.13%)</title><rect x="0.2811%" y="1045" width="0.1312%" height="15" fill="rgb(226,3,54)" fg:x="347" fg:w="162"/><text x="0.5311%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (65 samples, 0.05%)</title><rect x="0.3597%" y="1029" width="0.0527%" height="15" fill="rgb(245,192,40)" fg:x="444" fg:w="65"/><text x="0.6097%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (65 samples, 0.05%)</title><rect x="0.3597%" y="1013" width="0.0527%" height="15" fill="rgb(238,167,29)" fg:x="444" fg:w="65"/><text x="0.6097%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (45 samples, 0.04%)</title><rect x="0.3759%" y="997" width="0.0365%" height="15" fill="rgb(232,182,51)" fg:x="464" fg:w="45"/><text x="0.6259%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="0.3759%" y="981" width="0.0365%" height="15" fill="rgb(231,60,39)" fg:x="464" fg:w="45"/><text x="0.6259%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="0.3759%" y="965" width="0.0365%" height="15" fill="rgb(208,69,12)" fg:x="464" fg:w="45"/><text x="0.6259%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.04%)</title><rect x="0.3759%" y="949" width="0.0365%" height="15" fill="rgb(235,93,37)" fg:x="464" fg:w="45"/><text x="0.6259%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="0.3759%" y="933" width="0.0365%" height="15" fill="rgb(213,116,39)" fg:x="464" fg:w="45"/><text x="0.6259%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="0.3759%" y="917" width="0.0365%" height="15" fill="rgb(222,207,29)" fg:x="464" fg:w="45"/><text x="0.6259%" y="927.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.04%)</title><rect x="0.3759%" y="901" width="0.0365%" height="15" fill="rgb(206,96,30)" fg:x="464" fg:w="45"/><text x="0.6259%" y="911.50"></text></g><g><title>__rg_alloc (45 samples, 0.04%)</title><rect x="0.3759%" y="885" width="0.0365%" height="15" fill="rgb(218,138,4)" fg:x="464" fg:w="45"/><text x="0.6259%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.04%)</title><rect x="0.3759%" y="869" width="0.0365%" height="15" fill="rgb(250,191,14)" fg:x="464" fg:w="45"/><text x="0.6259%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (29 samples, 0.02%)</title><rect x="0.4164%" y="1029" width="0.0235%" height="15" fill="rgb(239,60,40)" fg:x="514" fg:w="29"/><text x="0.6664%" y="1039.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (29 samples, 0.02%)</title><rect x="0.4164%" y="1013" width="0.0235%" height="15" fill="rgb(206,27,48)" fg:x="514" fg:w="29"/><text x="0.6664%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (29 samples, 0.02%)</title><rect x="0.4164%" y="997" width="0.0235%" height="15" fill="rgb(225,35,8)" fg:x="514" fg:w="29"/><text x="0.6664%" y="1007.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (29 samples, 0.02%)</title><rect x="0.4164%" y="981" width="0.0235%" height="15" fill="rgb(250,213,24)" fg:x="514" fg:w="29"/><text x="0.6664%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (46 samples, 0.04%)</title><rect x="0.4123%" y="1045" width="0.0373%" height="15" fill="rgb(247,123,22)" fg:x="509" fg:w="46"/><text x="0.6623%" y="1055.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="0.4544%" y="1045" width="0.0154%" height="15" fill="rgb(231,138,38)" fg:x="561" fg:w="19"/><text x="0.7044%" y="1055.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="0.4698%" y="1045" width="0.0130%" height="15" fill="rgb(231,145,46)" fg:x="580" fg:w="16"/><text x="0.7198%" y="1055.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (20 samples, 0.02%)</title><rect x="0.6140%" y="1029" width="0.0162%" height="15" fill="rgb(251,118,11)" fg:x="758" fg:w="20"/><text x="0.8640%" y="1039.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (183 samples, 0.15%)</title><rect x="0.4828%" y="1045" width="0.1482%" height="15" fill="rgb(217,147,25)" fg:x="596" fg:w="183"/><text x="0.7328%" y="1055.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (96 samples, 0.08%)</title><rect x="0.6310%" y="1045" width="0.0778%" height="15" fill="rgb(247,81,37)" fg:x="779" fg:w="96"/><text x="0.8810%" y="1055.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (31 samples, 0.03%)</title><rect x="0.7420%" y="1029" width="0.0251%" height="15" fill="rgb(209,12,38)" fg:x="916" fg:w="31"/><text x="0.9920%" y="1039.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (25 samples, 0.02%)</title><rect x="0.7469%" y="1013" width="0.0203%" height="15" fill="rgb(227,1,9)" fg:x="922" fg:w="25"/><text x="0.9969%" y="1023.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (86 samples, 0.07%)</title><rect x="0.7088%" y="1045" width="0.0697%" height="15" fill="rgb(248,47,43)" fg:x="875" fg:w="86"/><text x="0.9588%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (14 samples, 0.01%)</title><rect x="0.7671%" y="1029" width="0.0113%" height="15" fill="rgb(221,10,30)" fg:x="947" fg:w="14"/><text x="1.0171%" y="1039.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="0.7671%" y="1013" width="0.0113%" height="15" fill="rgb(210,229,1)" fg:x="947" fg:w="14"/><text x="1.0171%" y="1023.50"></text></g><g><title>core::ptr::read (14 samples, 0.01%)</title><rect x="0.7671%" y="997" width="0.0113%" height="15" fill="rgb(222,148,37)" fg:x="947" fg:w="14"/><text x="1.0171%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="1.0725%" y="1013" width="0.0154%" height="15" fill="rgb(234,67,33)" fg:x="1324" fg:w="19"/><text x="1.3225%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="1.0725%" y="997" width="0.0154%" height="15" fill="rgb(247,98,35)" fg:x="1324" fg:w="19"/><text x="1.3225%" y="1007.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (70 samples, 0.06%)</title><rect x="1.0401%" y="1029" width="0.0567%" height="15" fill="rgb(247,138,52)" fg:x="1284" fg:w="70"/><text x="1.2901%" y="1039.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (33 samples, 0.03%)</title><rect x="1.0968%" y="1013" width="0.0267%" height="15" fill="rgb(213,79,30)" fg:x="1354" fg:w="33"/><text x="1.3468%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="1.1017%" y="997" width="0.0219%" height="15" fill="rgb(246,177,23)" fg:x="1360" fg:w="27"/><text x="1.3517%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="1.1017%" y="981" width="0.0219%" height="15" fill="rgb(230,62,27)" fg:x="1360" fg:w="27"/><text x="1.3517%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (27 samples, 0.02%)</title><rect x="1.1017%" y="965" width="0.0219%" height="15" fill="rgb(216,154,8)" fg:x="1360" fg:w="27"/><text x="1.3517%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="1.1017%" y="949" width="0.0219%" height="15" fill="rgb(244,35,45)" fg:x="1360" fg:w="27"/><text x="1.3517%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="1.1017%" y="933" width="0.0219%" height="15" fill="rgb(251,115,12)" fg:x="1360" fg:w="27"/><text x="1.3517%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="1.1017%" y="917" width="0.0219%" height="15" fill="rgb(240,54,50)" fg:x="1360" fg:w="27"/><text x="1.3517%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="1.1017%" y="901" width="0.0219%" height="15" fill="rgb(233,84,52)" fg:x="1360" fg:w="27"/><text x="1.3517%" y="911.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 0.01%)</title><rect x="1.1090%" y="885" width="0.0146%" height="15" fill="rgb(207,117,47)" fg:x="1369" fg:w="18"/><text x="1.3590%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.01%)</title><rect x="1.1090%" y="869" width="0.0146%" height="15" fill="rgb(249,43,39)" fg:x="1369" fg:w="18"/><text x="1.3590%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (52 samples, 0.04%)</title><rect x="1.0968%" y="1029" width="0.0421%" height="15" fill="rgb(209,38,44)" fg:x="1354" fg:w="52"/><text x="1.3468%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (18 samples, 0.01%)</title><rect x="1.1244%" y="1013" width="0.0146%" height="15" fill="rgb(236,212,23)" fg:x="1388" fg:w="18"/><text x="1.3744%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="1.1244%" y="997" width="0.0146%" height="15" fill="rgb(242,79,21)" fg:x="1388" fg:w="18"/><text x="1.3744%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.01%)</title><rect x="1.1244%" y="981" width="0.0146%" height="15" fill="rgb(211,96,35)" fg:x="1388" fg:w="18"/><text x="1.3744%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.01%)</title><rect x="1.1244%" y="965" width="0.0146%" height="15" fill="rgb(253,215,40)" fg:x="1388" fg:w="18"/><text x="1.3744%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.01%)</title><rect x="1.1244%" y="949" width="0.0146%" height="15" fill="rgb(211,81,21)" fg:x="1388" fg:w="18"/><text x="1.3744%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (54 samples, 0.04%)</title><rect x="1.1495%" y="997" width="0.0437%" height="15" fill="rgb(208,190,38)" fg:x="1419" fg:w="54"/><text x="1.3995%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (54 samples, 0.04%)</title><rect x="1.1495%" y="981" width="0.0437%" height="15" fill="rgb(235,213,38)" fg:x="1419" fg:w="54"/><text x="1.3995%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (54 samples, 0.04%)</title><rect x="1.1495%" y="965" width="0.0437%" height="15" fill="rgb(237,122,38)" fg:x="1419" fg:w="54"/><text x="1.3995%" y="975.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (56 samples, 0.05%)</title><rect x="1.1495%" y="1029" width="0.0454%" height="15" fill="rgb(244,218,35)" fg:x="1419" fg:w="56"/><text x="1.3995%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (56 samples, 0.05%)</title><rect x="1.1495%" y="1013" width="0.0454%" height="15" fill="rgb(240,68,47)" fg:x="1419" fg:w="56"/><text x="1.3995%" y="1023.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="1.2135%" y="1013" width="0.0138%" height="15" fill="rgb(210,16,53)" fg:x="1498" fg:w="17"/><text x="1.4635%" y="1023.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="1.2135%" y="997" width="0.0138%" height="15" fill="rgb(235,124,12)" fg:x="1498" fg:w="17"/><text x="1.4635%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (56 samples, 0.05%)</title><rect x="1.1949%" y="1029" width="0.0454%" height="15" fill="rgb(224,169,11)" fg:x="1475" fg:w="56"/><text x="1.4449%" y="1039.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="1.2702%" y="1013" width="0.0122%" height="15" fill="rgb(250,166,2)" fg:x="1568" fg:w="15"/><text x="1.5202%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (55 samples, 0.04%)</title><rect x="1.2402%" y="1029" width="0.0446%" height="15" fill="rgb(242,216,29)" fg:x="1531" fg:w="55"/><text x="1.4902%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (17 samples, 0.01%)</title><rect x="1.2848%" y="1029" width="0.0138%" height="15" fill="rgb(230,116,27)" fg:x="1586" fg:w="17"/><text x="1.5348%" y="1039.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (29 samples, 0.02%)</title><rect x="1.3026%" y="1029" width="0.0235%" height="15" fill="rgb(228,99,48)" fg:x="1608" fg:w="29"/><text x="1.5526%" y="1039.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (13 samples, 0.01%)</title><rect x="1.3585%" y="1013" width="0.0105%" height="15" fill="rgb(253,11,6)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="1023.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (13 samples, 0.01%)</title><rect x="1.3585%" y="997" width="0.0105%" height="15" fill="rgb(247,143,39)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="1007.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (13 samples, 0.01%)</title><rect x="1.3585%" y="981" width="0.0105%" height="15" fill="rgb(236,97,10)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (13 samples, 0.01%)</title><rect x="1.3585%" y="965" width="0.0105%" height="15" fill="rgb(233,208,19)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.01%)</title><rect x="1.3585%" y="949" width="0.0105%" height="15" fill="rgb(216,164,2)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="1.3585%" y="933" width="0.0105%" height="15" fill="rgb(220,129,5)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="1.3585%" y="917" width="0.0105%" height="15" fill="rgb(242,17,10)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="1.3585%" y="901" width="0.0105%" height="15" fill="rgb(242,107,0)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="1.3585%" y="885" width="0.0105%" height="15" fill="rgb(251,28,31)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="1.3585%" y="869" width="0.0105%" height="15" fill="rgb(233,223,10)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.01%)</title><rect x="1.3585%" y="853" width="0.0105%" height="15" fill="rgb(215,21,27)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="1.3585%" y="837" width="0.0105%" height="15" fill="rgb(232,23,21)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="1.3585%" y="821" width="0.0105%" height="15" fill="rgb(244,5,23)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="831.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="1.3585%" y="805" width="0.0105%" height="15" fill="rgb(226,81,46)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="815.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="1.3585%" y="789" width="0.0105%" height="15" fill="rgb(247,70,30)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="1.3585%" y="773" width="0.0105%" height="15" fill="rgb(212,68,19)" fg:x="1677" fg:w="13"/><text x="1.6085%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (746 samples, 0.60%)</title><rect x="0.7785%" y="1045" width="0.6043%" height="15" fill="rgb(240,187,13)" fg:x="961" fg:w="746"/><text x="1.0285%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (70 samples, 0.06%)</title><rect x="1.3261%" y="1029" width="0.0567%" height="15" fill="rgb(223,113,26)" fg:x="1637" fg:w="70"/><text x="1.5761%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (17 samples, 0.01%)</title><rect x="1.3690%" y="1013" width="0.0138%" height="15" fill="rgb(206,192,2)" fg:x="1690" fg:w="17"/><text x="1.6190%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (30 samples, 0.02%)</title><rect x="1.4492%" y="1029" width="0.0243%" height="15" fill="rgb(241,108,4)" fg:x="1789" fg:w="30"/><text x="1.6992%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (30 samples, 0.02%)</title><rect x="1.4492%" y="1013" width="0.0243%" height="15" fill="rgb(247,173,49)" fg:x="1789" fg:w="30"/><text x="1.6992%" y="1023.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="1.4492%" y="997" width="0.0243%" height="15" fill="rgb(224,114,35)" fg:x="1789" fg:w="30"/><text x="1.6992%" y="1007.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.02%)</title><rect x="1.4492%" y="981" width="0.0243%" height="15" fill="rgb(245,159,27)" fg:x="1789" fg:w="30"/><text x="1.6992%" y="991.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.02%)</title><rect x="1.4492%" y="965" width="0.0243%" height="15" fill="rgb(245,172,44)" fg:x="1789" fg:w="30"/><text x="1.6992%" y="975.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (128 samples, 0.10%)</title><rect x="1.3828%" y="1045" width="0.1037%" height="15" fill="rgb(236,23,11)" fg:x="1707" fg:w="128"/><text x="1.6328%" y="1055.50"></text></g><g><title>event_listener::Inner::lock (16 samples, 0.01%)</title><rect x="1.4735%" y="1029" width="0.0130%" height="15" fill="rgb(205,117,38)" fg:x="1819" fg:w="16"/><text x="1.7235%" y="1039.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="1.4735%" y="1013" width="0.0130%" height="15" fill="rgb(237,72,25)" fg:x="1819" fg:w="16"/><text x="1.7235%" y="1023.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="1.4735%" y="997" width="0.0130%" height="15" fill="rgb(244,70,9)" fg:x="1819" fg:w="16"/><text x="1.7235%" y="1007.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (16 samples, 0.01%)</title><rect x="1.4735%" y="981" width="0.0130%" height="15" fill="rgb(217,125,39)" fg:x="1819" fg:w="16"/><text x="1.7235%" y="991.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="1.4873%" y="1045" width="0.0194%" height="15" fill="rgb(235,36,10)" fg:x="1836" fg:w="24"/><text x="1.7373%" y="1055.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="1.5067%" y="1045" width="0.0194%" height="15" fill="rgb(251,123,47)" fg:x="1860" fg:w="24"/><text x="1.7567%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (41 samples, 0.03%)</title><rect x="1.5335%" y="1045" width="0.0332%" height="15" fill="rgb(221,13,13)" fg:x="1893" fg:w="41"/><text x="1.7835%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (107 samples, 0.09%)</title><rect x="1.5740%" y="1045" width="0.0867%" height="15" fill="rgb(238,131,9)" fg:x="1943" fg:w="107"/><text x="1.8240%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (54 samples, 0.04%)</title><rect x="1.6169%" y="1029" width="0.0437%" height="15" fill="rgb(211,50,8)" fg:x="1996" fg:w="54"/><text x="1.8669%" y="1039.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (39 samples, 0.03%)</title><rect x="1.6291%" y="1013" width="0.0316%" height="15" fill="rgb(245,182,24)" fg:x="2011" fg:w="39"/><text x="1.8791%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.01%)</title><rect x="1.6501%" y="997" width="0.0105%" height="15" fill="rgb(242,14,37)" fg:x="2037" fg:w="13"/><text x="1.9001%" y="1007.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (30 samples, 0.02%)</title><rect x="1.6606%" y="1045" width="0.0243%" height="15" fill="rgb(246,228,12)" fg:x="2050" fg:w="30"/><text x="1.9106%" y="1055.50"></text></g><g><title>value_trait::Builder::object (30 samples, 0.02%)</title><rect x="1.6606%" y="1029" width="0.0243%" height="15" fill="rgb(213,55,15)" fg:x="2050" fg:w="30"/><text x="1.9106%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (30 samples, 0.02%)</title><rect x="1.6606%" y="1013" width="0.0243%" height="15" fill="rgb(209,9,3)" fg:x="2050" fg:w="30"/><text x="1.9106%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (30 samples, 0.02%)</title><rect x="1.6606%" y="997" width="0.0243%" height="15" fill="rgb(230,59,30)" fg:x="2050" fg:w="30"/><text x="1.9106%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (19 samples, 0.02%)</title><rect x="1.6696%" y="981" width="0.0154%" height="15" fill="rgb(209,121,21)" fg:x="2061" fg:w="19"/><text x="1.9196%" y="991.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="1.6849%" y="1045" width="0.0162%" height="15" fill="rgb(220,109,13)" fg:x="2080" fg:w="20"/><text x="1.9349%" y="1055.50"></text></g><g><title>[libc-2.31.so] (127 samples, 0.10%)</title><rect x="1.7060%" y="1045" width="0.1029%" height="15" fill="rgb(232,18,1)" fg:x="2106" fg:w="127"/><text x="1.9560%" y="1055.50"></text></g><g><title>__GI___pthread_mutex_lock (80 samples, 0.06%)</title><rect x="1.8089%" y="1045" width="0.0648%" height="15" fill="rgb(215,41,42)" fg:x="2233" fg:w="80"/><text x="2.0589%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (18 samples, 0.01%)</title><rect x="1.8842%" y="1045" width="0.0146%" height="15" fill="rgb(224,123,36)" fg:x="2326" fg:w="18"/><text x="2.1342%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_unlock (23 samples, 0.02%)</title><rect x="1.8988%" y="1045" width="0.0186%" height="15" fill="rgb(240,125,3)" fg:x="2344" fg:w="23"/><text x="2.1488%" y="1055.50"></text></g><g><title>__clock_gettime (40 samples, 0.03%)</title><rect x="1.9174%" y="1045" width="0.0324%" height="15" fill="rgb(205,98,50)" fg:x="2367" fg:w="40"/><text x="2.1674%" y="1055.50"></text></g><g><title>__pthread_cond_signal (13 samples, 0.01%)</title><rect x="1.9588%" y="1045" width="0.0105%" height="15" fill="rgb(205,185,37)" fg:x="2418" fg:w="13"/><text x="2.2088%" y="1055.50"></text></g><g><title>__pthread_cond_wait (30 samples, 0.02%)</title><rect x="1.9693%" y="1045" width="0.0243%" height="15" fill="rgb(238,207,15)" fg:x="2431" fg:w="30"/><text x="2.2193%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (73 samples, 0.06%)</title><rect x="2.0001%" y="1045" width="0.0591%" height="15" fill="rgb(213,199,42)" fg:x="2469" fg:w="73"/><text x="2.2501%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (39 samples, 0.03%)</title><rect x="2.0276%" y="1029" width="0.0316%" height="15" fill="rgb(235,201,11)" fg:x="2503" fg:w="39"/><text x="2.2776%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="2.0276%" y="1013" width="0.0316%" height="15" fill="rgb(207,46,11)" fg:x="2503" fg:w="39"/><text x="2.2776%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (39 samples, 0.03%)</title><rect x="2.0276%" y="997" width="0.0316%" height="15" fill="rgb(241,35,35)" fg:x="2503" fg:w="39"/><text x="2.2776%" y="1007.50"></text></g><g><title>abi_stable::erased_types::iterator::next (44 samples, 0.04%)</title><rect x="2.0592%" y="1045" width="0.0356%" height="15" fill="rgb(243,32,47)" fg:x="2542" fg:w="44"/><text x="2.3092%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="2.1807%" y="1029" width="0.0138%" height="15" fill="rgb(247,202,23)" fg:x="2692" fg:w="17"/><text x="2.4307%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="2.1807%" y="1013" width="0.0138%" height="15" fill="rgb(219,102,11)" fg:x="2692" fg:w="17"/><text x="2.4307%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="2.1807%" y="997" width="0.0138%" height="15" fill="rgb(243,110,44)" fg:x="2692" fg:w="17"/><text x="2.4307%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="2.1807%" y="981" width="0.0138%" height="15" fill="rgb(222,74,54)" fg:x="2692" fg:w="17"/><text x="2.4307%" y="991.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="2.1807%" y="965" width="0.0138%" height="15" fill="rgb(216,99,12)" fg:x="2692" fg:w="17"/><text x="2.4307%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="2.1807%" y="949" width="0.0138%" height="15" fill="rgb(226,22,26)" fg:x="2692" fg:w="17"/><text x="2.4307%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (138 samples, 0.11%)</title><rect x="2.1005%" y="1045" width="0.1118%" height="15" fill="rgb(217,163,10)" fg:x="2593" fg:w="138"/><text x="2.3505%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (152 samples, 0.12%)</title><rect x="2.2123%" y="1045" width="0.1231%" height="15" fill="rgb(213,25,53)" fg:x="2731" fg:w="152"/><text x="2.4623%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (28 samples, 0.02%)</title><rect x="2.3128%" y="1029" width="0.0227%" height="15" fill="rgb(252,105,26)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (28 samples, 0.02%)</title><rect x="2.3128%" y="1013" width="0.0227%" height="15" fill="rgb(220,39,43)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (28 samples, 0.02%)</title><rect x="2.3128%" y="997" width="0.0227%" height="15" fill="rgb(229,68,48)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="1007.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (28 samples, 0.02%)</title><rect x="2.3128%" y="981" width="0.0227%" height="15" fill="rgb(252,8,32)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="2.3128%" y="965" width="0.0227%" height="15" fill="rgb(223,20,43)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="975.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="2.3128%" y="949" width="0.0227%" height="15" fill="rgb(229,81,49)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="959.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="2.3128%" y="933" width="0.0227%" height="15" fill="rgb(236,28,36)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="2.3128%" y="917" width="0.0227%" height="15" fill="rgb(249,185,26)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="2.3128%" y="901" width="0.0227%" height="15" fill="rgb(249,174,33)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="911.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="2.3128%" y="885" width="0.0227%" height="15" fill="rgb(233,201,37)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="895.50"></text></g><g><title>__rg_alloc (28 samples, 0.02%)</title><rect x="2.3128%" y="869" width="0.0227%" height="15" fill="rgb(221,78,26)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.02%)</title><rect x="2.3128%" y="853" width="0.0227%" height="15" fill="rgb(250,127,30)" fg:x="2855" fg:w="28"/><text x="2.5628%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (52 samples, 0.04%)</title><rect x="2.3354%" y="1045" width="0.0421%" height="15" fill="rgb(230,49,44)" fg:x="2883" fg:w="52"/><text x="2.5854%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (30 samples, 0.02%)</title><rect x="2.3533%" y="1029" width="0.0243%" height="15" fill="rgb(229,67,23)" fg:x="2905" fg:w="30"/><text x="2.6033%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (30 samples, 0.02%)</title><rect x="2.3533%" y="1013" width="0.0243%" height="15" fill="rgb(249,83,47)" fg:x="2905" fg:w="30"/><text x="2.6033%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (30 samples, 0.02%)</title><rect x="2.3533%" y="997" width="0.0243%" height="15" fill="rgb(215,43,3)" fg:x="2905" fg:w="30"/><text x="2.6033%" y="1007.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (18 samples, 0.01%)</title><rect x="2.3630%" y="981" width="0.0146%" height="15" fill="rgb(238,154,13)" fg:x="2917" fg:w="18"/><text x="2.6130%" y="991.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.01%)</title><rect x="2.3630%" y="965" width="0.0146%" height="15" fill="rgb(219,56,2)" fg:x="2917" fg:w="18"/><text x="2.6130%" y="975.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (18 samples, 0.01%)</title><rect x="2.3630%" y="949" width="0.0146%" height="15" fill="rgb(233,0,4)" fg:x="2917" fg:w="18"/><text x="2.6130%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (18 samples, 0.01%)</title><rect x="2.3630%" y="933" width="0.0146%" height="15" fill="rgb(235,30,7)" fg:x="2917" fg:w="18"/><text x="2.6130%" y="943.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (150 samples, 0.12%)</title><rect x="2.3776%" y="1045" width="0.1215%" height="15" fill="rgb(250,79,13)" fg:x="2935" fg:w="150"/><text x="2.6276%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="2.5023%" y="1045" width="0.0219%" height="15" fill="rgb(211,146,34)" fg:x="3089" fg:w="27"/><text x="2.7523%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.06%)</title><rect x="2.5809%" y="981" width="0.0567%" height="15" fill="rgb(228,22,38)" fg:x="3186" fg:w="70"/><text x="2.8309%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (70 samples, 0.06%)</title><rect x="2.5809%" y="965" width="0.0567%" height="15" fill="rgb(235,168,5)" fg:x="3186" fg:w="70"/><text x="2.8309%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (70 samples, 0.06%)</title><rect x="2.5809%" y="949" width="0.0567%" height="15" fill="rgb(221,155,16)" fg:x="3186" fg:w="70"/><text x="2.8309%" y="959.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (70 samples, 0.06%)</title><rect x="2.5809%" y="933" width="0.0567%" height="15" fill="rgb(215,215,53)" fg:x="3186" fg:w="70"/><text x="2.8309%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (78 samples, 0.06%)</title><rect x="2.5809%" y="997" width="0.0632%" height="15" fill="rgb(223,4,10)" fg:x="3186" fg:w="78"/><text x="2.8309%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="2.6441%" y="981" width="0.0559%" height="15" fill="rgb(234,103,6)" fg:x="3264" fg:w="69"/><text x="2.8941%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (69 samples, 0.06%)</title><rect x="2.6441%" y="965" width="0.0559%" height="15" fill="rgb(227,97,0)" fg:x="3264" fg:w="69"/><text x="2.8941%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (69 samples, 0.06%)</title><rect x="2.6441%" y="949" width="0.0559%" height="15" fill="rgb(234,150,53)" fg:x="3264" fg:w="69"/><text x="2.8941%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (69 samples, 0.06%)</title><rect x="2.6441%" y="933" width="0.0559%" height="15" fill="rgb(228,201,54)" fg:x="3264" fg:w="69"/><text x="2.8941%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (69 samples, 0.06%)</title><rect x="2.6441%" y="917" width="0.0559%" height="15" fill="rgb(222,22,37)" fg:x="3264" fg:w="69"/><text x="2.8941%" y="927.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (231 samples, 0.19%)</title><rect x="2.5242%" y="1045" width="0.1871%" height="15" fill="rgb(237,53,32)" fg:x="3116" fg:w="231"/><text x="2.7742%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (161 samples, 0.13%)</title><rect x="2.5809%" y="1029" width="0.1304%" height="15" fill="rgb(233,25,53)" fg:x="3186" fg:w="161"/><text x="2.8309%" y="1039.50"></text></g><g><title>core::mem::drop (161 samples, 0.13%)</title><rect x="2.5809%" y="1013" width="0.1304%" height="15" fill="rgb(210,40,34)" fg:x="3186" fg:w="161"/><text x="2.8309%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (83 samples, 0.07%)</title><rect x="2.6441%" y="997" width="0.0672%" height="15" fill="rgb(241,220,44)" fg:x="3264" fg:w="83"/><text x="2.8941%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (14 samples, 0.01%)</title><rect x="2.7000%" y="981" width="0.0113%" height="15" fill="rgb(235,28,35)" fg:x="3333" fg:w="14"/><text x="2.9500%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="2.7000%" y="965" width="0.0113%" height="15" fill="rgb(210,56,17)" fg:x="3333" fg:w="14"/><text x="2.9500%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="2.7000%" y="949" width="0.0113%" height="15" fill="rgb(224,130,29)" fg:x="3333" fg:w="14"/><text x="2.9500%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="2.7000%" y="933" width="0.0113%" height="15" fill="rgb(235,212,8)" fg:x="3333" fg:w="14"/><text x="2.9500%" y="943.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="2.7000%" y="917" width="0.0113%" height="15" fill="rgb(223,33,50)" fg:x="3333" fg:w="14"/><text x="2.9500%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="2.7000%" y="901" width="0.0113%" height="15" fill="rgb(219,149,13)" fg:x="3333" fg:w="14"/><text x="2.9500%" y="911.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (17 samples, 0.01%)</title><rect x="2.7121%" y="1045" width="0.0138%" height="15" fill="rgb(250,156,29)" fg:x="3348" fg:w="17"/><text x="2.9621%" y="1055.50"></text></g><g><title>async_executor::State::notify (14 samples, 0.01%)</title><rect x="2.7259%" y="1045" width="0.0113%" height="15" fill="rgb(216,193,19)" fg:x="3365" fg:w="14"/><text x="2.9759%" y="1055.50"></text></g><g><title>async_executor::Ticker::sleep (67 samples, 0.05%)</title><rect x="2.7372%" y="1045" width="0.0543%" height="15" fill="rgb(216,135,14)" fg:x="3379" fg:w="67"/><text x="2.9872%" y="1055.50"></text></g><g><title>async_executor::Ticker::wake (26 samples, 0.02%)</title><rect x="2.7915%" y="1045" width="0.0211%" height="15" fill="rgb(241,47,5)" fg:x="3446" fg:w="26"/><text x="3.0415%" y="1055.50"></text></g><g><title>async_executor::steal (336 samples, 0.27%)</title><rect x="2.8126%" y="1045" width="0.2722%" height="15" fill="rgb(233,42,35)" fg:x="3472" fg:w="336"/><text x="3.0626%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (16 samples, 0.01%)</title><rect x="3.0847%" y="1045" width="0.0130%" height="15" fill="rgb(231,13,6)" fg:x="3808" fg:w="16"/><text x="3.3347%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (32 samples, 0.03%)</title><rect x="3.0977%" y="1045" width="0.0259%" height="15" fill="rgb(207,181,40)" fg:x="3824" fg:w="32"/><text x="3.3477%" y="1055.50"></text></g><g><title>async_io::driver::block_on (21 samples, 0.02%)</title><rect x="3.1236%" y="1045" width="0.0170%" height="15" fill="rgb(254,173,49)" fg:x="3856" fg:w="21"/><text x="3.3736%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (16 samples, 0.01%)</title><rect x="3.1504%" y="1045" width="0.0130%" height="15" fill="rgb(221,1,38)" fg:x="3889" fg:w="16"/><text x="3.4004%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (398 samples, 0.32%)</title><rect x="3.1690%" y="1045" width="0.3224%" height="15" fill="rgb(206,124,46)" fg:x="3912" fg:w="398"/><text x="3.4190%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (44 samples, 0.04%)</title><rect x="3.4914%" y="1045" width="0.0356%" height="15" fill="rgb(249,21,11)" fg:x="4310" fg:w="44"/><text x="3.7414%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (74 samples, 0.06%)</title><rect x="3.5270%" y="1045" width="0.0599%" height="15" fill="rgb(222,201,40)" fg:x="4354" fg:w="74"/><text x="3.7770%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (42 samples, 0.03%)</title><rect x="3.5959%" y="1045" width="0.0340%" height="15" fill="rgb(235,61,29)" fg:x="4439" fg:w="42"/><text x="3.8459%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="3.6129%" y="1029" width="0.0170%" height="15" fill="rgb(219,207,3)" fg:x="4460" fg:w="21"/><text x="3.8629%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="3.6129%" y="1013" width="0.0170%" height="15" fill="rgb(222,56,46)" fg:x="4460" fg:w="21"/><text x="3.8629%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (35 samples, 0.03%)</title><rect x="3.6388%" y="1045" width="0.0284%" height="15" fill="rgb(239,76,54)" fg:x="4492" fg:w="35"/><text x="3.8888%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="3.6534%" y="1029" width="0.0138%" height="15" fill="rgb(231,124,27)" fg:x="4510" fg:w="17"/><text x="3.9034%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (26 samples, 0.02%)</title><rect x="3.6680%" y="1045" width="0.0211%" height="15" fill="rgb(249,195,6)" fg:x="4528" fg:w="26"/><text x="3.9180%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (21 samples, 0.02%)</title><rect x="3.6891%" y="1045" width="0.0170%" height="15" fill="rgb(237,174,47)" fg:x="4554" fg:w="21"/><text x="3.9391%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (26 samples, 0.02%)</title><rect x="3.7061%" y="1045" width="0.0211%" height="15" fill="rgb(206,201,31)" fg:x="4575" fg:w="26"/><text x="3.9561%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (26 samples, 0.02%)</title><rect x="3.7061%" y="1029" width="0.0211%" height="15" fill="rgb(231,57,52)" fg:x="4575" fg:w="26"/><text x="3.9561%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (29 samples, 0.02%)</title><rect x="3.7636%" y="997" width="0.0235%" height="15" fill="rgb(248,177,22)" fg:x="4646" fg:w="29"/><text x="4.0136%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (29 samples, 0.02%)</title><rect x="3.7636%" y="981" width="0.0235%" height="15" fill="rgb(215,211,37)" fg:x="4646" fg:w="29"/><text x="4.0136%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (29 samples, 0.02%)</title><rect x="3.7636%" y="965" width="0.0235%" height="15" fill="rgb(241,128,51)" fg:x="4646" fg:w="29"/><text x="4.0136%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (36 samples, 0.03%)</title><rect x="3.7636%" y="1029" width="0.0292%" height="15" fill="rgb(227,165,31)" fg:x="4646" fg:w="36"/><text x="4.0136%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (36 samples, 0.03%)</title><rect x="3.7636%" y="1013" width="0.0292%" height="15" fill="rgb(228,167,24)" fg:x="4646" fg:w="36"/><text x="4.0136%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (14 samples, 0.01%)</title><rect x="3.7928%" y="1029" width="0.0113%" height="15" fill="rgb(228,143,12)" fg:x="4682" fg:w="14"/><text x="4.0428%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (14 samples, 0.01%)</title><rect x="3.7928%" y="1013" width="0.0113%" height="15" fill="rgb(249,149,8)" fg:x="4682" fg:w="14"/><text x="4.0428%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="3.7928%" y="997" width="0.0113%" height="15" fill="rgb(243,35,44)" fg:x="4682" fg:w="14"/><text x="4.0428%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (112 samples, 0.09%)</title><rect x="3.7466%" y="1045" width="0.0907%" height="15" fill="rgb(246,89,9)" fg:x="4625" fg:w="112"/><text x="3.9966%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (41 samples, 0.03%)</title><rect x="3.8041%" y="1029" width="0.0332%" height="15" fill="rgb(233,213,13)" fg:x="4696" fg:w="41"/><text x="4.0541%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (32 samples, 0.03%)</title><rect x="3.8114%" y="1013" width="0.0259%" height="15" fill="rgb(233,141,41)" fg:x="4705" fg:w="32"/><text x="4.0614%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.03%)</title><rect x="3.8114%" y="997" width="0.0259%" height="15" fill="rgb(239,167,4)" fg:x="4705" fg:w="32"/><text x="4.0614%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (19 samples, 0.02%)</title><rect x="3.8373%" y="1045" width="0.0154%" height="15" fill="rgb(209,217,16)" fg:x="4737" fg:w="19"/><text x="4.0873%" y="1055.50"></text></g><g><title>event_listener::Event::notify (132 samples, 0.11%)</title><rect x="3.8608%" y="1045" width="0.1069%" height="15" fill="rgb(219,88,35)" fg:x="4766" fg:w="132"/><text x="4.1108%" y="1055.50"></text></g><g><title>event_listener::full_fence (70 samples, 0.06%)</title><rect x="3.9110%" y="1029" width="0.0567%" height="15" fill="rgb(220,193,23)" fg:x="4828" fg:w="70"/><text x="4.1610%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (29 samples, 0.02%)</title><rect x="3.9791%" y="1045" width="0.0235%" height="15" fill="rgb(230,90,52)" fg:x="4912" fg:w="29"/><text x="4.2291%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (22 samples, 0.02%)</title><rect x="4.0026%" y="1045" width="0.0178%" height="15" fill="rgb(252,106,19)" fg:x="4941" fg:w="22"/><text x="4.2526%" y="1055.50"></text></g><g><title>parking::Unparker::unpark (15 samples, 0.01%)</title><rect x="4.0204%" y="1045" width="0.0122%" height="15" fill="rgb(206,74,20)" fg:x="4963" fg:w="15"/><text x="4.2704%" y="1055.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.04%)</title><rect x="4.0431%" y="1045" width="0.0446%" height="15" fill="rgb(230,138,44)" fg:x="4991" fg:w="55"/><text x="4.2931%" y="1055.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="4.0876%" y="1045" width="0.0194%" height="15" fill="rgb(235,182,43)" fg:x="5046" fg:w="24"/><text x="4.3376%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (14 samples, 0.01%)</title><rect x="4.1071%" y="1045" width="0.0113%" height="15" fill="rgb(242,16,51)" fg:x="5070" fg:w="14"/><text x="4.3571%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="4.1184%" y="1045" width="0.0130%" height="15" fill="rgb(248,9,4)" fg:x="5084" fg:w="16"/><text x="4.3684%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (38 samples, 0.03%)</title><rect x="4.1314%" y="1045" width="0.0308%" height="15" fill="rgb(210,31,22)" fg:x="5100" fg:w="38"/><text x="4.3814%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.03%)</title><rect x="4.1630%" y="1045" width="0.0259%" height="15" fill="rgb(239,54,39)" fg:x="5139" fg:w="32"/><text x="4.4130%" y="1055.50"></text></g><g><title>tremor_common::time::nanotime (46 samples, 0.04%)</title><rect x="4.1889%" y="1045" width="0.0373%" height="15" fill="rgb(230,99,41)" fg:x="5171" fg:w="46"/><text x="4.4389%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (46 samples, 0.04%)</title><rect x="4.1889%" y="1029" width="0.0373%" height="15" fill="rgb(253,106,12)" fg:x="5171" fg:w="46"/><text x="4.4389%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (46 samples, 0.04%)</title><rect x="4.1889%" y="1013" width="0.0373%" height="15" fill="rgb(213,46,41)" fg:x="5171" fg:w="46"/><text x="4.4389%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (46 samples, 0.04%)</title><rect x="4.1889%" y="997" width="0.0373%" height="15" fill="rgb(215,133,35)" fg:x="5171" fg:w="46"/><text x="4.4389%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (54 samples, 0.04%)</title><rect x="4.2261%" y="1045" width="0.0437%" height="15" fill="rgb(213,28,5)" fg:x="5217" fg:w="54"/><text x="4.4761%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (28 samples, 0.02%)</title><rect x="4.2472%" y="1029" width="0.0227%" height="15" fill="rgb(215,77,49)" fg:x="5243" fg:w="28"/><text x="4.4972%" y="1039.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (28 samples, 0.02%)</title><rect x="4.2472%" y="1013" width="0.0227%" height="15" fill="rgb(248,100,22)" fg:x="5243" fg:w="28"/><text x="4.4972%" y="1023.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="4.2472%" y="997" width="0.0227%" height="15" fill="rgb(208,67,9)" fg:x="5243" fg:w="28"/><text x="4.4972%" y="1007.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="4.2472%" y="981" width="0.0227%" height="15" fill="rgb(219,133,21)" fg:x="5243" fg:w="28"/><text x="4.4972%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="4.2569%" y="965" width="0.0130%" height="15" fill="rgb(246,46,29)" fg:x="5255" fg:w="16"/><text x="4.5069%" y="975.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (19 samples, 0.02%)</title><rect x="4.2707%" y="1045" width="0.0154%" height="15" fill="rgb(246,185,52)" fg:x="5272" fg:w="19"/><text x="4.5207%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (16 samples, 0.01%)</title><rect x="4.3622%" y="981" width="0.0130%" height="15" fill="rgb(252,136,11)" fg:x="5385" fg:w="16"/><text x="4.6122%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="4.3622%" y="965" width="0.0130%" height="15" fill="rgb(219,138,53)" fg:x="5385" fg:w="16"/><text x="4.6122%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="4.3622%" y="949" width="0.0130%" height="15" fill="rgb(211,51,23)" fg:x="5385" fg:w="16"/><text x="4.6122%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (25 samples, 0.02%)</title><rect x="4.3622%" y="997" width="0.0203%" height="15" fill="rgb(247,221,28)" fg:x="5385" fg:w="25"/><text x="4.6122%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (124 samples, 0.10%)</title><rect x="4.2861%" y="1045" width="0.1004%" height="15" fill="rgb(251,222,45)" fg:x="5291" fg:w="124"/><text x="4.5361%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (75 samples, 0.06%)</title><rect x="4.3258%" y="1029" width="0.0608%" height="15" fill="rgb(217,162,53)" fg:x="5340" fg:w="75"/><text x="4.5758%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (71 samples, 0.06%)</title><rect x="4.3290%" y="1013" width="0.0575%" height="15" fill="rgb(229,93,14)" fg:x="5344" fg:w="71"/><text x="4.5790%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (24 samples, 0.02%)</title><rect x="4.3865%" y="1045" width="0.0194%" height="15" fill="rgb(209,67,49)" fg:x="5415" fg:w="24"/><text x="4.6365%" y="1055.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="4.4400%" y="1029" width="0.0122%" height="15" fill="rgb(213,87,29)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="4.4400%" y="1013" width="0.0122%" height="15" fill="rgb(205,151,52)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="4.4400%" y="997" width="0.0122%" height="15" fill="rgb(253,215,39)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.4400%" y="981" width="0.0122%" height="15" fill="rgb(221,220,41)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.4400%" y="965" width="0.0122%" height="15" fill="rgb(218,133,21)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="4.4400%" y="949" width="0.0122%" height="15" fill="rgb(221,193,43)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="4.4400%" y="933" width="0.0122%" height="15" fill="rgb(240,128,52)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.4400%" y="917" width="0.0122%" height="15" fill="rgb(253,114,12)" fg:x="5481" fg:w="15"/><text x="4.6900%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (80 samples, 0.06%)</title><rect x="4.4060%" y="1045" width="0.0648%" height="15" fill="rgb(215,223,47)" fg:x="5439" fg:w="80"/><text x="4.6560%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (38 samples, 0.03%)</title><rect x="4.4789%" y="1045" width="0.0308%" height="15" fill="rgb(248,225,23)" fg:x="5529" fg:w="38"/><text x="4.7289%" y="1055.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (18 samples, 0.01%)</title><rect x="4.5121%" y="1045" width="0.0146%" height="15" fill="rgb(250,108,0)" fg:x="5570" fg:w="18"/><text x="4.7621%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (39 samples, 0.03%)</title><rect x="4.5275%" y="1045" width="0.0316%" height="15" fill="rgb(228,208,7)" fg:x="5589" fg:w="39"/><text x="4.7775%" y="1055.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (14 samples, 0.01%)</title><rect x="4.5664%" y="1045" width="0.0113%" height="15" fill="rgb(244,45,10)" fg:x="5637" fg:w="14"/><text x="4.8164%" y="1055.50"></text></g><g><title>[anon] (5,428 samples, 4.40%)</title><rect x="0.1815%" y="1061" width="4.3971%" height="15" fill="rgb(207,125,25)" fg:x="224" fg:w="5428"/><text x="0.4315%" y="1071.50">[anon]</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="4.6368%" y="1045" width="0.0105%" height="15" fill="rgb(210,195,18)" fg:x="5724" fg:w="13"/><text x="4.8868%" y="1055.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="4.6474%" y="1045" width="0.0113%" height="15" fill="rgb(249,80,12)" fg:x="5737" fg:w="14"/><text x="4.8974%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (13 samples, 0.01%)</title><rect x="4.6482%" y="1029" width="0.0105%" height="15" fill="rgb(221,65,9)" fg:x="5738" fg:w="13"/><text x="4.8982%" y="1039.50"></text></g><g><title>core::mem::replace (13 samples, 0.01%)</title><rect x="4.6482%" y="1013" width="0.0105%" height="15" fill="rgb(235,49,36)" fg:x="5738" fg:w="13"/><text x="4.8982%" y="1023.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="4.6482%" y="997" width="0.0105%" height="15" fill="rgb(225,32,20)" fg:x="5738" fg:w="13"/><text x="4.8982%" y="1007.50"></text></g><g><title>__clock_gettime (15 samples, 0.01%)</title><rect x="4.6676%" y="1045" width="0.0122%" height="15" fill="rgb(215,141,46)" fg:x="5762" fg:w="15"/><text x="4.9176%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (29 samples, 0.02%)</title><rect x="4.6798%" y="1045" width="0.0235%" height="15" fill="rgb(250,160,47)" fg:x="5777" fg:w="29"/><text x="4.9298%" y="1055.50"></text></g><g><title>event_listener::Event::listen (15 samples, 0.01%)</title><rect x="4.7049%" y="1045" width="0.0122%" height="15" fill="rgb(216,222,40)" fg:x="5808" fg:w="15"/><text x="4.9549%" y="1055.50"></text></g><g><title>event_listener::Event::notify (21 samples, 0.02%)</title><rect x="4.7170%" y="1045" width="0.0170%" height="15" fill="rgb(234,217,39)" fg:x="5823" fg:w="21"/><text x="4.9670%" y="1055.50"></text></g><g><title>event_listener::full_fence (21 samples, 0.02%)</title><rect x="4.7170%" y="1029" width="0.0170%" height="15" fill="rgb(207,178,40)" fg:x="5823" fg:w="21"/><text x="4.9670%" y="1039.50"></text></g><g><title>[libc-2.31.so] (193 samples, 0.16%)</title><rect x="4.5785%" y="1061" width="0.1563%" height="15" fill="rgb(221,136,13)" fg:x="5652" fg:w="193"/><text x="4.8285%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (48 samples, 0.04%)</title><rect x="4.7373%" y="1045" width="0.0389%" height="15" fill="rgb(249,199,10)" fg:x="5848" fg:w="48"/><text x="4.9873%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (28 samples, 0.02%)</title><rect x="4.7762%" y="1045" width="0.0227%" height="15" fill="rgb(249,222,13)" fg:x="5896" fg:w="28"/><text x="5.0262%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="4.7989%" y="1045" width="0.0146%" height="15" fill="rgb(244,185,38)" fg:x="5924" fg:w="18"/><text x="5.0489%" y="1055.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (24 samples, 0.02%)</title><rect x="4.8256%" y="1045" width="0.0194%" height="15" fill="rgb(236,202,9)" fg:x="5957" fg:w="24"/><text x="5.0756%" y="1055.50"></text></g><g><title>[tremor-pdk-hashbrown] (137 samples, 0.11%)</title><rect x="4.7349%" y="1061" width="0.1110%" height="15" fill="rgb(250,229,37)" fg:x="5845" fg:w="137"/><text x="4.9849%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (39 samples, 0.03%)</title><rect x="4.8475%" y="1045" width="0.0316%" height="15" fill="rgb(206,174,23)" fg:x="5984" fg:w="39"/><text x="5.0975%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (91 samples, 0.07%)</title><rect x="4.8936%" y="1045" width="0.0737%" height="15" fill="rgb(211,33,43)" fg:x="6041" fg:w="91"/><text x="5.1436%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (16 samples, 0.01%)</title><rect x="4.9544%" y="1029" width="0.0130%" height="15" fill="rgb(245,58,50)" fg:x="6116" fg:w="16"/><text x="5.2044%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (16 samples, 0.01%)</title><rect x="4.9544%" y="1013" width="0.0130%" height="15" fill="rgb(244,68,36)" fg:x="6116" fg:w="16"/><text x="5.2044%" y="1023.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (13 samples, 0.01%)</title><rect x="5.0492%" y="677" width="0.0105%" height="15" fill="rgb(232,229,15)" fg:x="6233" fg:w="13"/><text x="5.2992%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (13 samples, 0.01%)</title><rect x="5.0492%" y="661" width="0.0105%" height="15" fill="rgb(254,30,23)" fg:x="6233" fg:w="13"/><text x="5.2992%" y="671.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (13 samples, 0.01%)</title><rect x="5.0492%" y="645" width="0.0105%" height="15" fill="rgb(235,160,14)" fg:x="6233" fg:w="13"/><text x="5.2992%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="5.0492%" y="629" width="0.0105%" height="15" fill="rgb(212,155,44)" fg:x="6233" fg:w="13"/><text x="5.2992%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (13 samples, 0.01%)</title><rect x="5.0492%" y="613" width="0.0105%" height="15" fill="rgb(226,2,50)" fg:x="6233" fg:w="13"/><text x="5.2992%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="1029" width="0.0340%" height="15" fill="rgb(234,177,6)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (42 samples, 0.03%)</title><rect x="5.0451%" y="1013" width="0.0340%" height="15" fill="rgb(217,24,9)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (42 samples, 0.03%)</title><rect x="5.0451%" y="997" width="0.0340%" height="15" fill="rgb(220,13,46)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="5.0451%" y="981" width="0.0340%" height="15" fill="rgb(239,221,27)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="5.0451%" y="965" width="0.0340%" height="15" fill="rgb(222,198,25)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="975.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="949" width="0.0340%" height="15" fill="rgb(211,99,13)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="959.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="5.0451%" y="933" width="0.0340%" height="15" fill="rgb(232,111,31)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (42 samples, 0.03%)</title><rect x="5.0451%" y="917" width="0.0340%" height="15" fill="rgb(245,82,37)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (42 samples, 0.03%)</title><rect x="5.0451%" y="901" width="0.0340%" height="15" fill="rgb(227,149,46)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (42 samples, 0.03%)</title><rect x="5.0451%" y="885" width="0.0340%" height="15" fill="rgb(218,36,50)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="869" width="0.0340%" height="15" fill="rgb(226,80,48)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="853" width="0.0340%" height="15" fill="rgb(238,224,15)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="5.0451%" y="837" width="0.0340%" height="15" fill="rgb(241,136,10)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="821" width="0.0340%" height="15" fill="rgb(208,32,45)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="5.0451%" y="805" width="0.0340%" height="15" fill="rgb(207,135,9)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="789" width="0.0340%" height="15" fill="rgb(206,86,44)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="5.0451%" y="773" width="0.0340%" height="15" fill="rgb(245,177,15)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="757" width="0.0340%" height="15" fill="rgb(206,64,50)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="5.0451%" y="741" width="0.0340%" height="15" fill="rgb(234,36,40)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (42 samples, 0.03%)</title><rect x="5.0451%" y="725" width="0.0340%" height="15" fill="rgb(213,64,8)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (42 samples, 0.03%)</title><rect x="5.0451%" y="709" width="0.0340%" height="15" fill="rgb(210,75,36)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.03%)</title><rect x="5.0451%" y="693" width="0.0340%" height="15" fill="rgb(229,88,21)" fg:x="6228" fg:w="42"/><text x="5.2951%" y="703.50"></text></g><g><title>[libc-2.31.so] (660 samples, 0.53%)</title><rect x="5.2169%" y="821" width="0.5346%" height="15" fill="rgb(252,204,47)" fg:x="6440" fg:w="660"/><text x="5.4669%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (718 samples, 0.58%)</title><rect x="5.1804%" y="837" width="0.5816%" height="15" fill="rgb(208,77,27)" fg:x="6395" fg:w="718"/><text x="5.4304%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.01%)</title><rect x="5.7515%" y="821" width="0.0105%" height="15" fill="rgb(221,76,26)" fg:x="7100" fg:w="13"/><text x="6.0015%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,154 samples, 0.93%)</title><rect x="5.1132%" y="853" width="0.9348%" height="15" fill="rgb(225,139,18)" fg:x="6312" fg:w="1154"/><text x="5.3632%" y="863.50"></text></g><g><title>[libc-2.31.so] (353 samples, 0.29%)</title><rect x="5.7620%" y="837" width="0.2860%" height="15" fill="rgb(230,137,11)" fg:x="7113" fg:w="353"/><text x="6.0120%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (14 samples, 0.01%)</title><rect x="6.0480%" y="853" width="0.0113%" height="15" fill="rgb(212,28,1)" fg:x="7466" fg:w="14"/><text x="6.2980%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,200 samples, 0.97%)</title><rect x="5.0881%" y="885" width="0.9721%" height="15" fill="rgb(248,164,17)" fg:x="6281" fg:w="1200"/><text x="5.3381%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,200 samples, 0.97%)</title><rect x="5.0881%" y="869" width="0.9721%" height="15" fill="rgb(222,171,42)" fg:x="6281" fg:w="1200"/><text x="5.3381%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (54 samples, 0.04%)</title><rect x="6.7819%" y="533" width="0.0437%" height="15" fill="rgb(243,84,45)" fg:x="8372" fg:w="54"/><text x="7.0319%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (54 samples, 0.04%)</title><rect x="6.7819%" y="517" width="0.0437%" height="15" fill="rgb(252,49,23)" fg:x="8372" fg:w="54"/><text x="7.0319%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (54 samples, 0.04%)</title><rect x="6.7819%" y="501" width="0.0437%" height="15" fill="rgb(215,19,7)" fg:x="8372" fg:w="54"/><text x="7.0319%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (2,174 samples, 1.76%)</title><rect x="5.0881%" y="901" width="1.7611%" height="15" fill="rgb(238,81,41)" fg:x="6281" fg:w="2174"/><text x="5.3381%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (974 samples, 0.79%)</title><rect x="6.0601%" y="885" width="0.7890%" height="15" fill="rgb(210,199,37)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (974 samples, 0.79%)</title><rect x="6.0601%" y="869" width="0.7890%" height="15" fill="rgb(244,192,49)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="879.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (974 samples, 0.79%)</title><rect x="6.0601%" y="853" width="0.7890%" height="15" fill="rgb(226,211,11)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (974 samples, 0.79%)</title><rect x="6.0601%" y="837" width="0.7890%" height="15" fill="rgb(236,162,54)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="847.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (974 samples, 0.79%)</title><rect x="6.0601%" y="821" width="0.7890%" height="15" fill="rgb(220,229,9)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (974 samples, 0.79%)</title><rect x="6.0601%" y="805" width="0.7890%" height="15" fill="rgb(250,87,22)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (974 samples, 0.79%)</title><rect x="6.0601%" y="789" width="0.7890%" height="15" fill="rgb(239,43,17)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="799.50"></text></g><g><title>std::panic::catch_unwind (974 samples, 0.79%)</title><rect x="6.0601%" y="773" width="0.7890%" height="15" fill="rgb(231,177,25)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="783.50"></text></g><g><title>std::panicking::try (974 samples, 0.79%)</title><rect x="6.0601%" y="757" width="0.7890%" height="15" fill="rgb(219,179,1)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="767.50"></text></g><g><title>std::panicking::try::do_call (974 samples, 0.79%)</title><rect x="6.0601%" y="741" width="0.7890%" height="15" fill="rgb(238,219,53)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (974 samples, 0.79%)</title><rect x="6.0601%" y="725" width="0.7890%" height="15" fill="rgb(232,167,36)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (974 samples, 0.79%)</title><rect x="6.0601%" y="709" width="0.7890%" height="15" fill="rgb(244,19,51)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (974 samples, 0.79%)</title><rect x="6.0601%" y="693" width="0.7890%" height="15" fill="rgb(224,6,22)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="703.50"></text></g><g><title>async_ffi::FfiContext::with_context (974 samples, 0.79%)</title><rect x="6.0601%" y="677" width="0.7890%" height="15" fill="rgb(224,145,5)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (974 samples, 0.79%)</title><rect x="6.0601%" y="661" width="0.7890%" height="15" fill="rgb(234,130,49)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (974 samples, 0.79%)</title><rect x="6.0601%" y="645" width="0.7890%" height="15" fill="rgb(254,6,2)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (974 samples, 0.79%)</title><rect x="6.0601%" y="629" width="0.7890%" height="15" fill="rgb(208,96,46)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (974 samples, 0.79%)</title><rect x="6.0601%" y="613" width="0.7890%" height="15" fill="rgb(239,3,39)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (974 samples, 0.79%)</title><rect x="6.0601%" y="597" width="0.7890%" height="15" fill="rgb(233,210,1)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (974 samples, 0.79%)</title><rect x="6.0601%" y="581" width="0.7890%" height="15" fill="rgb(244,137,37)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (974 samples, 0.79%)</title><rect x="6.0601%" y="565" width="0.7890%" height="15" fill="rgb(240,136,2)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (974 samples, 0.79%)</title><rect x="6.0601%" y="549" width="0.7890%" height="15" fill="rgb(239,18,37)" fg:x="7481" fg:w="974"/><text x="6.3101%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (24 samples, 0.02%)</title><rect x="6.8297%" y="533" width="0.0194%" height="15" fill="rgb(218,185,22)" fg:x="8431" fg:w="24"/><text x="7.0797%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (24 samples, 0.02%)</title><rect x="6.8297%" y="517" width="0.0194%" height="15" fill="rgb(225,218,4)" fg:x="8431" fg:w="24"/><text x="7.0797%" y="527.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (24 samples, 0.02%)</title><rect x="6.8297%" y="501" width="0.0194%" height="15" fill="rgb(230,182,32)" fg:x="8431" fg:w="24"/><text x="7.0797%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 0.01%)</title><rect x="6.8354%" y="485" width="0.0138%" height="15" fill="rgb(242,56,43)" fg:x="8438" fg:w="17"/><text x="7.0854%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="6.8354%" y="469" width="0.0138%" height="15" fill="rgb(233,99,24)" fg:x="8438" fg:w="17"/><text x="7.0854%" y="479.50"></text></g><g><title>event_listener::Inner::lock (95 samples, 0.08%)</title><rect x="6.8491%" y="709" width="0.0770%" height="15" fill="rgb(234,209,42)" fg:x="8455" fg:w="95"/><text x="7.0991%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (95 samples, 0.08%)</title><rect x="6.8491%" y="693" width="0.0770%" height="15" fill="rgb(227,7,12)" fg:x="8455" fg:w="95"/><text x="7.0991%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (95 samples, 0.08%)</title><rect x="6.8491%" y="677" width="0.0770%" height="15" fill="rgb(245,203,43)" fg:x="8455" fg:w="95"/><text x="7.0991%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (95 samples, 0.08%)</title><rect x="6.8491%" y="661" width="0.0770%" height="15" fill="rgb(238,205,33)" fg:x="8455" fg:w="95"/><text x="7.0991%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (95 samples, 0.08%)</title><rect x="6.8491%" y="645" width="0.0770%" height="15" fill="rgb(231,56,7)" fg:x="8455" fg:w="95"/><text x="7.0991%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (36 samples, 0.03%)</title><rect x="6.9318%" y="661" width="0.0292%" height="15" fill="rgb(244,186,29)" fg:x="8557" fg:w="36"/><text x="7.1818%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (35 samples, 0.03%)</title><rect x="6.9326%" y="645" width="0.0284%" height="15" fill="rgb(234,111,31)" fg:x="8558" fg:w="35"/><text x="7.1826%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (35 samples, 0.03%)</title><rect x="6.9326%" y="629" width="0.0284%" height="15" fill="rgb(241,149,10)" fg:x="8558" fg:w="35"/><text x="7.1826%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (94 samples, 0.08%)</title><rect x="6.9707%" y="613" width="0.0761%" height="15" fill="rgb(249,206,44)" fg:x="8605" fg:w="94"/><text x="7.2207%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.08%)</title><rect x="6.9707%" y="597" width="0.0761%" height="15" fill="rgb(251,153,30)" fg:x="8605" fg:w="94"/><text x="7.2207%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (92 samples, 0.07%)</title><rect x="6.9723%" y="581" width="0.0745%" height="15" fill="rgb(239,152,38)" fg:x="8607" fg:w="92"/><text x="7.2223%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (92 samples, 0.07%)</title><rect x="6.9723%" y="565" width="0.0745%" height="15" fill="rgb(249,139,47)" fg:x="8607" fg:w="92"/><text x="7.2223%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (92 samples, 0.07%)</title><rect x="6.9723%" y="549" width="0.0745%" height="15" fill="rgb(244,64,35)" fg:x="8607" fg:w="92"/><text x="7.2223%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (29 samples, 0.02%)</title><rect x="7.0468%" y="613" width="0.0235%" height="15" fill="rgb(216,46,15)" fg:x="8699" fg:w="29"/><text x="7.2968%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="7.0468%" y="597" width="0.0235%" height="15" fill="rgb(250,74,19)" fg:x="8699" fg:w="29"/><text x="7.2968%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (13 samples, 0.01%)</title><rect x="7.0776%" y="533" width="0.0105%" height="15" fill="rgb(249,42,33)" fg:x="8737" fg:w="13"/><text x="7.3276%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="7.0776%" y="517" width="0.0105%" height="15" fill="rgb(242,149,17)" fg:x="8737" fg:w="13"/><text x="7.3276%" y="527.50"></text></g><g><title>__libc_write (13 samples, 0.01%)</title><rect x="7.0914%" y="517" width="0.0105%" height="15" fill="rgb(244,29,21)" fg:x="8754" fg:w="13"/><text x="7.3414%" y="527.50"></text></g><g><title>async_io::reactor::Reactor::notify (33 samples, 0.03%)</title><rect x="7.0760%" y="565" width="0.0267%" height="15" fill="rgb(220,130,37)" fg:x="8735" fg:w="33"/><text x="7.3260%" y="575.50"></text></g><g><title>polling::Poller::notify (32 samples, 0.03%)</title><rect x="7.0768%" y="549" width="0.0259%" height="15" fill="rgb(211,67,2)" fg:x="8736" fg:w="32"/><text x="7.3268%" y="559.50"></text></g><g><title>polling::epoll::Poller::notify (16 samples, 0.01%)</title><rect x="7.0897%" y="533" width="0.0130%" height="15" fill="rgb(235,68,52)" fg:x="8752" fg:w="16"/><text x="7.3397%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (33 samples, 0.03%)</title><rect x="7.1254%" y="533" width="0.0267%" height="15" fill="rgb(246,142,3)" fg:x="8796" fg:w="33"/><text x="7.3754%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (33 samples, 0.03%)</title><rect x="7.1254%" y="517" width="0.0267%" height="15" fill="rgb(241,25,7)" fg:x="8796" fg:w="33"/><text x="7.3754%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (80 samples, 0.06%)</title><rect x="7.1521%" y="533" width="0.0648%" height="15" fill="rgb(242,119,39)" fg:x="8829" fg:w="80"/><text x="7.4021%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (80 samples, 0.06%)</title><rect x="7.1521%" y="517" width="0.0648%" height="15" fill="rgb(241,98,45)" fg:x="8829" fg:w="80"/><text x="7.4021%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (80 samples, 0.06%)</title><rect x="7.1521%" y="501" width="0.0648%" height="15" fill="rgb(254,28,30)" fg:x="8829" fg:w="80"/><text x="7.4021%" y="511.50"></text></g><g><title>__pthread_cond_signal (80 samples, 0.06%)</title><rect x="7.1521%" y="485" width="0.0648%" height="15" fill="rgb(241,142,54)" fg:x="8829" fg:w="80"/><text x="7.4021%" y="495.50"></text></g><g><title>parking::Unparker::unpark (185 samples, 0.15%)</title><rect x="7.1100%" y="565" width="0.1499%" height="15" fill="rgb(222,85,15)" fg:x="8777" fg:w="185"/><text x="7.3600%" y="575.50"></text></g><g><title>parking::Inner::unpark (177 samples, 0.14%)</title><rect x="7.1165%" y="549" width="0.1434%" height="15" fill="rgb(210,85,47)" fg:x="8785" fg:w="177"/><text x="7.3665%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (53 samples, 0.04%)</title><rect x="7.2169%" y="533" width="0.0429%" height="15" fill="rgb(224,206,25)" fg:x="8909" fg:w="53"/><text x="7.4669%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (53 samples, 0.04%)</title><rect x="7.2169%" y="517" width="0.0429%" height="15" fill="rgb(243,201,19)" fg:x="8909" fg:w="53"/><text x="7.4669%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.04%)</title><rect x="7.2177%" y="501" width="0.0421%" height="15" fill="rgb(236,59,4)" fg:x="8910" fg:w="52"/><text x="7.4677%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (52 samples, 0.04%)</title><rect x="7.2177%" y="485" width="0.0421%" height="15" fill="rgb(254,179,45)" fg:x="8910" fg:w="52"/><text x="7.4677%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (242 samples, 0.20%)</title><rect x="7.0711%" y="581" width="0.1960%" height="15" fill="rgb(226,14,10)" fg:x="8729" fg:w="242"/><text x="7.3211%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (304 samples, 0.25%)</title><rect x="7.0703%" y="613" width="0.2463%" height="15" fill="rgb(244,27,41)" fg:x="8728" fg:w="304"/><text x="7.3203%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (304 samples, 0.25%)</title><rect x="7.0703%" y="597" width="0.2463%" height="15" fill="rgb(235,35,32)" fg:x="8728" fg:w="304"/><text x="7.3203%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (61 samples, 0.05%)</title><rect x="7.2671%" y="581" width="0.0494%" height="15" fill="rgb(218,68,31)" fg:x="8971" fg:w="61"/><text x="7.5171%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.05%)</title><rect x="7.2671%" y="565" width="0.0494%" height="15" fill="rgb(207,120,37)" fg:x="8971" fg:w="61"/><text x="7.5171%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (60 samples, 0.05%)</title><rect x="7.2680%" y="549" width="0.0486%" height="15" fill="rgb(227,98,0)" fg:x="8972" fg:w="60"/><text x="7.5180%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (60 samples, 0.05%)</title><rect x="7.2680%" y="533" width="0.0486%" height="15" fill="rgb(207,7,3)" fg:x="8972" fg:w="60"/><text x="7.5180%" y="543.50"></text></g><g><title>async_executor::State::notify (530 samples, 0.43%)</title><rect x="6.9650%" y="629" width="0.4293%" height="15" fill="rgb(206,98,19)" fg:x="8598" fg:w="530"/><text x="7.2150%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (96 samples, 0.08%)</title><rect x="7.3166%" y="613" width="0.0778%" height="15" fill="rgb(217,5,26)" fg:x="9032" fg:w="96"/><text x="7.5666%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (95 samples, 0.08%)</title><rect x="7.3174%" y="597" width="0.0770%" height="15" fill="rgb(235,190,38)" fg:x="9033" fg:w="95"/><text x="7.5674%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (85 samples, 0.07%)</title><rect x="7.3255%" y="581" width="0.0689%" height="15" fill="rgb(247,86,24)" fg:x="9043" fg:w="85"/><text x="7.5755%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (85 samples, 0.07%)</title><rect x="7.3255%" y="565" width="0.0689%" height="15" fill="rgb(205,101,16)" fg:x="9043" fg:w="85"/><text x="7.5755%" y="575.50"></text></g><g><title>__lll_lock_wait (17 samples, 0.01%)</title><rect x="7.3806%" y="549" width="0.0138%" height="15" fill="rgb(246,168,33)" fg:x="9111" fg:w="17"/><text x="7.6306%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (97 samples, 0.08%)</title><rect x="7.4040%" y="597" width="0.0786%" height="15" fill="rgb(231,114,1)" fg:x="9140" fg:w="97"/><text x="7.6540%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (97 samples, 0.08%)</title><rect x="7.4040%" y="581" width="0.0786%" height="15" fill="rgb(207,184,53)" fg:x="9140" fg:w="97"/><text x="7.6540%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (33 samples, 0.03%)</title><rect x="7.4834%" y="597" width="0.0267%" height="15" fill="rgb(224,95,51)" fg:x="9238" fg:w="33"/><text x="7.7334%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (33 samples, 0.03%)</title><rect x="7.4834%" y="581" width="0.0267%" height="15" fill="rgb(212,188,45)" fg:x="9238" fg:w="33"/><text x="7.7334%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (674 samples, 0.55%)</title><rect x="6.9650%" y="645" width="0.5460%" height="15" fill="rgb(223,154,38)" fg:x="8598" fg:w="674"/><text x="7.2150%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (144 samples, 0.12%)</title><rect x="7.3943%" y="629" width="0.1167%" height="15" fill="rgb(251,22,52)" fg:x="9128" fg:w="144"/><text x="7.6443%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (142 samples, 0.12%)</title><rect x="7.3959%" y="613" width="0.1150%" height="15" fill="rgb(229,209,22)" fg:x="9130" fg:w="142"/><text x="7.6459%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (122 samples, 0.10%)</title><rect x="7.5110%" y="645" width="0.0988%" height="15" fill="rgb(234,138,34)" fg:x="9272" fg:w="122"/><text x="7.7610%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (122 samples, 0.10%)</title><rect x="7.5110%" y="629" width="0.0988%" height="15" fill="rgb(212,95,11)" fg:x="9272" fg:w="122"/><text x="7.7610%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (958 samples, 0.78%)</title><rect x="6.8491%" y="821" width="0.7760%" height="15" fill="rgb(240,179,47)" fg:x="8455" fg:w="958"/><text x="7.0991%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (958 samples, 0.78%)</title><rect x="6.8491%" y="805" width="0.7760%" height="15" fill="rgb(240,163,11)" fg:x="8455" fg:w="958"/><text x="7.0991%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (958 samples, 0.78%)</title><rect x="6.8491%" y="789" width="0.7760%" height="15" fill="rgb(236,37,12)" fg:x="8455" fg:w="958"/><text x="7.0991%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (958 samples, 0.78%)</title><rect x="6.8491%" y="773" width="0.7760%" height="15" fill="rgb(232,164,16)" fg:x="8455" fg:w="958"/><text x="7.0991%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (958 samples, 0.78%)</title><rect x="6.8491%" y="757" width="0.7760%" height="15" fill="rgb(244,205,15)" fg:x="8455" fg:w="958"/><text x="7.0991%" y="767.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (958 samples, 0.78%)</title><rect x="6.8491%" y="741" width="0.7760%" height="15" fill="rgb(223,117,47)" fg:x="8455" fg:w="958"/><text x="7.0991%" y="751.50"></text></g><g><title>event_listener::Event::notify (958 samples, 0.78%)</title><rect x="6.8491%" y="725" width="0.7760%" height="15" fill="rgb(244,107,35)" fg:x="8455" fg:w="958"/><text x="7.0991%" y="735.50"></text></g><g><title>event_listener::List::notify (863 samples, 0.70%)</title><rect x="6.9261%" y="709" width="0.6991%" height="15" fill="rgb(205,140,8)" fg:x="8550" fg:w="863"/><text x="7.1761%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (858 samples, 0.70%)</title><rect x="6.9302%" y="693" width="0.6950%" height="15" fill="rgb(228,84,46)" fg:x="8555" fg:w="858"/><text x="7.1802%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (858 samples, 0.70%)</title><rect x="6.9302%" y="677" width="0.6950%" height="15" fill="rgb(254,188,9)" fg:x="8555" fg:w="858"/><text x="7.1802%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (820 samples, 0.66%)</title><rect x="6.9609%" y="661" width="0.6643%" height="15" fill="rgb(206,112,54)" fg:x="8593" fg:w="820"/><text x="7.2109%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (19 samples, 0.02%)</title><rect x="7.6098%" y="645" width="0.0154%" height="15" fill="rgb(216,84,49)" fg:x="9394" fg:w="19"/><text x="7.8598%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.02%)</title><rect x="7.6098%" y="629" width="0.0154%" height="15" fill="rgb(214,194,35)" fg:x="9394" fg:w="19"/><text x="7.8598%" y="639.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="8.2084%" y="805" width="0.0373%" height="15" fill="rgb(249,28,3)" fg:x="10133" fg:w="46"/><text x="8.4584%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="8.2457%" y="805" width="0.0138%" height="15" fill="rgb(222,56,52)" fg:x="10179" fg:w="17"/><text x="8.4957%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.02%)</title><rect x="8.7901%" y="533" width="0.0243%" height="15" fill="rgb(245,217,50)" fg:x="10851" fg:w="30"/><text x="9.0401%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (144 samples, 0.12%)</title><rect x="8.6994%" y="677" width="0.1167%" height="15" fill="rgb(213,201,24)" fg:x="10739" fg:w="144"/><text x="8.9494%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (144 samples, 0.12%)</title><rect x="8.6994%" y="661" width="0.1167%" height="15" fill="rgb(248,116,28)" fg:x="10739" fg:w="144"/><text x="8.9494%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (144 samples, 0.12%)</title><rect x="8.6994%" y="645" width="0.1167%" height="15" fill="rgb(219,72,43)" fg:x="10739" fg:w="144"/><text x="8.9494%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (144 samples, 0.12%)</title><rect x="8.6994%" y="629" width="0.1167%" height="15" fill="rgb(209,138,14)" fg:x="10739" fg:w="144"/><text x="8.9494%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (144 samples, 0.12%)</title><rect x="8.6994%" y="613" width="0.1167%" height="15" fill="rgb(222,18,33)" fg:x="10739" fg:w="144"/><text x="8.9494%" y="623.50"></text></g><g><title>alloc::alloc::alloc (133 samples, 0.11%)</title><rect x="8.7083%" y="597" width="0.1077%" height="15" fill="rgb(213,199,7)" fg:x="10750" fg:w="133"/><text x="8.9583%" y="607.50"></text></g><g><title>__rg_alloc (133 samples, 0.11%)</title><rect x="8.7083%" y="581" width="0.1077%" height="15" fill="rgb(250,110,10)" fg:x="10750" fg:w="133"/><text x="8.9583%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (133 samples, 0.11%)</title><rect x="8.7083%" y="565" width="0.1077%" height="15" fill="rgb(248,123,6)" fg:x="10750" fg:w="133"/><text x="8.9583%" y="575.50"></text></g><g><title>sn_rust_alloc (114 samples, 0.09%)</title><rect x="8.7237%" y="549" width="0.0923%" height="15" fill="rgb(206,91,31)" fg:x="10769" fg:w="114"/><text x="8.9737%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (240 samples, 0.19%)</title><rect x="8.6759%" y="789" width="0.1944%" height="15" fill="rgb(211,154,13)" fg:x="10710" fg:w="240"/><text x="8.9259%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (228 samples, 0.18%)</title><rect x="8.6856%" y="773" width="0.1847%" height="15" fill="rgb(225,148,7)" fg:x="10722" fg:w="228"/><text x="8.9356%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (220 samples, 0.18%)</title><rect x="8.6921%" y="757" width="0.1782%" height="15" fill="rgb(220,160,43)" fg:x="10730" fg:w="220"/><text x="8.9421%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (211 samples, 0.17%)</title><rect x="8.6994%" y="741" width="0.1709%" height="15" fill="rgb(213,52,39)" fg:x="10739" fg:w="211"/><text x="8.9494%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (211 samples, 0.17%)</title><rect x="8.6994%" y="725" width="0.1709%" height="15" fill="rgb(243,137,7)" fg:x="10739" fg:w="211"/><text x="8.9494%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (211 samples, 0.17%)</title><rect x="8.6994%" y="709" width="0.1709%" height="15" fill="rgb(230,79,13)" fg:x="10739" fg:w="211"/><text x="8.9494%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (211 samples, 0.17%)</title><rect x="8.6994%" y="693" width="0.1709%" height="15" fill="rgb(247,105,23)" fg:x="10739" fg:w="211"/><text x="8.9494%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (67 samples, 0.05%)</title><rect x="8.8160%" y="677" width="0.0543%" height="15" fill="rgb(223,179,41)" fg:x="10883" fg:w="67"/><text x="9.0660%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.05%)</title><rect x="8.8160%" y="661" width="0.0543%" height="15" fill="rgb(218,9,34)" fg:x="10883" fg:w="67"/><text x="9.0660%" y="671.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="8.8314%" y="645" width="0.0389%" height="15" fill="rgb(222,106,8)" fg:x="10902" fg:w="48"/><text x="9.0814%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (18 samples, 0.01%)</title><rect x="8.8808%" y="773" width="0.0146%" height="15" fill="rgb(211,220,0)" fg:x="10963" fg:w="18"/><text x="9.1308%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (47 samples, 0.04%)</title><rect x="8.9424%" y="437" width="0.0381%" height="15" fill="rgb(229,52,16)" fg:x="11039" fg:w="47"/><text x="9.1924%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (89 samples, 0.07%)</title><rect x="8.9092%" y="581" width="0.0721%" height="15" fill="rgb(212,155,18)" fg:x="10998" fg:w="89"/><text x="9.1592%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (89 samples, 0.07%)</title><rect x="8.9092%" y="565" width="0.0721%" height="15" fill="rgb(242,21,14)" fg:x="10998" fg:w="89"/><text x="9.1592%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (89 samples, 0.07%)</title><rect x="8.9092%" y="549" width="0.0721%" height="15" fill="rgb(222,19,48)" fg:x="10998" fg:w="89"/><text x="9.1592%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 0.07%)</title><rect x="8.9140%" y="533" width="0.0672%" height="15" fill="rgb(232,45,27)" fg:x="11004" fg:w="83"/><text x="9.1640%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 0.07%)</title><rect x="8.9140%" y="517" width="0.0672%" height="15" fill="rgb(249,103,42)" fg:x="11004" fg:w="83"/><text x="9.1640%" y="527.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 0.07%)</title><rect x="8.9140%" y="501" width="0.0672%" height="15" fill="rgb(246,81,33)" fg:x="11004" fg:w="83"/><text x="9.1640%" y="511.50"></text></g><g><title>__rg_alloc (83 samples, 0.07%)</title><rect x="8.9140%" y="485" width="0.0672%" height="15" fill="rgb(252,33,42)" fg:x="11004" fg:w="83"/><text x="9.1640%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (83 samples, 0.07%)</title><rect x="8.9140%" y="469" width="0.0672%" height="15" fill="rgb(209,212,41)" fg:x="11004" fg:w="83"/><text x="9.1640%" y="479.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="8.9213%" y="453" width="0.0599%" height="15" fill="rgb(207,154,6)" fg:x="11013" fg:w="74"/><text x="9.1713%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (117 samples, 0.09%)</title><rect x="8.9067%" y="693" width="0.0948%" height="15" fill="rgb(223,64,47)" fg:x="10995" fg:w="117"/><text x="9.1567%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (117 samples, 0.09%)</title><rect x="8.9067%" y="677" width="0.0948%" height="15" fill="rgb(211,161,38)" fg:x="10995" fg:w="117"/><text x="9.1567%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (117 samples, 0.09%)</title><rect x="8.9067%" y="661" width="0.0948%" height="15" fill="rgb(219,138,40)" fg:x="10995" fg:w="117"/><text x="9.1567%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (114 samples, 0.09%)</title><rect x="8.9092%" y="645" width="0.0923%" height="15" fill="rgb(241,228,46)" fg:x="10998" fg:w="114"/><text x="9.1592%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (114 samples, 0.09%)</title><rect x="8.9092%" y="629" width="0.0923%" height="15" fill="rgb(223,209,38)" fg:x="10998" fg:w="114"/><text x="9.1592%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (114 samples, 0.09%)</title><rect x="8.9092%" y="613" width="0.0923%" height="15" fill="rgb(236,164,45)" fg:x="10998" fg:w="114"/><text x="9.1592%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (114 samples, 0.09%)</title><rect x="8.9092%" y="597" width="0.0923%" height="15" fill="rgb(231,15,5)" fg:x="10998" fg:w="114"/><text x="9.1592%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (25 samples, 0.02%)</title><rect x="8.9813%" y="581" width="0.0203%" height="15" fill="rgb(252,35,15)" fg:x="11087" fg:w="25"/><text x="9.2313%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="8.9813%" y="565" width="0.0203%" height="15" fill="rgb(248,181,18)" fg:x="11087" fg:w="25"/><text x="9.2313%" y="575.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="8.9829%" y="549" width="0.0186%" height="15" fill="rgb(233,39,42)" fg:x="11089" fg:w="23"/><text x="9.2329%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="9.0015%" y="693" width="0.0130%" height="15" fill="rgb(238,110,33)" fg:x="11112" fg:w="16"/><text x="9.2515%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.05%)</title><rect x="9.0218%" y="645" width="0.0543%" height="15" fill="rgb(233,195,10)" fg:x="11137" fg:w="67"/><text x="9.2718%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.05%)</title><rect x="9.0218%" y="629" width="0.0543%" height="15" fill="rgb(254,105,3)" fg:x="11137" fg:w="67"/><text x="9.2718%" y="639.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.05%)</title><rect x="9.0282%" y="613" width="0.0478%" height="15" fill="rgb(221,225,9)" fg:x="11145" fg:w="59"/><text x="9.2782%" y="623.50"></text></g><g><title>__rg_alloc (59 samples, 0.05%)</title><rect x="9.0282%" y="597" width="0.0478%" height="15" fill="rgb(224,227,45)" fg:x="11145" fg:w="59"/><text x="9.2782%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (59 samples, 0.05%)</title><rect x="9.0282%" y="581" width="0.0478%" height="15" fill="rgb(229,198,43)" fg:x="11145" fg:w="59"/><text x="9.2782%" y="591.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.05%)</title><rect x="9.0282%" y="565" width="0.0478%" height="15" fill="rgb(206,209,35)" fg:x="11145" fg:w="59"/><text x="9.2782%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="9.0558%" y="549" width="0.0203%" height="15" fill="rgb(245,195,53)" fg:x="11179" fg:w="25"/><text x="9.3058%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (86 samples, 0.07%)</title><rect x="9.0145%" y="693" width="0.0697%" height="15" fill="rgb(240,92,26)" fg:x="11128" fg:w="86"/><text x="9.2645%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77 samples, 0.06%)</title><rect x="9.0218%" y="677" width="0.0624%" height="15" fill="rgb(207,40,23)" fg:x="11137" fg:w="77"/><text x="9.2718%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (77 samples, 0.06%)</title><rect x="9.0218%" y="661" width="0.0624%" height="15" fill="rgb(223,111,35)" fg:x="11137" fg:w="77"/><text x="9.2718%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,022 samples, 0.83%)</title><rect x="8.2595%" y="805" width="0.8279%" height="15" fill="rgb(229,147,28)" fg:x="10196" fg:w="1022"/><text x="8.5095%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (268 samples, 0.22%)</title><rect x="8.8703%" y="789" width="0.2171%" height="15" fill="rgb(211,29,28)" fg:x="10950" fg:w="268"/><text x="9.1203%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (237 samples, 0.19%)</title><rect x="8.8954%" y="773" width="0.1920%" height="15" fill="rgb(228,72,33)" fg:x="10981" fg:w="237"/><text x="9.1454%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (237 samples, 0.19%)</title><rect x="8.8954%" y="757" width="0.1920%" height="15" fill="rgb(205,214,31)" fg:x="10981" fg:w="237"/><text x="9.1454%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (237 samples, 0.19%)</title><rect x="8.8954%" y="741" width="0.1920%" height="15" fill="rgb(224,111,15)" fg:x="10981" fg:w="237"/><text x="9.1454%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (237 samples, 0.19%)</title><rect x="8.8954%" y="725" width="0.1920%" height="15" fill="rgb(253,21,26)" fg:x="10981" fg:w="237"/><text x="9.1454%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (237 samples, 0.19%)</title><rect x="8.8954%" y="709" width="0.1920%" height="15" fill="rgb(245,139,43)" fg:x="10981" fg:w="237"/><text x="9.1454%" y="719.50"></text></g><g><title>[libc-2.31.so] (112 samples, 0.09%)</title><rect x="9.0874%" y="805" width="0.0907%" height="15" fill="rgb(252,170,7)" fg:x="11218" fg:w="112"/><text x="9.3374%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (312 samples, 0.25%)</title><rect x="9.1862%" y="805" width="0.2527%" height="15" fill="rgb(231,118,14)" fg:x="11340" fg:w="312"/><text x="9.4362%" y="815.50"></text></g><g><title>core::ptr::write (300 samples, 0.24%)</title><rect x="9.1959%" y="789" width="0.2430%" height="15" fill="rgb(238,83,0)" fg:x="11352" fg:w="300"/><text x="9.4459%" y="799.50"></text></g><g><title>[libc-2.31.so] (297 samples, 0.24%)</title><rect x="9.1984%" y="773" width="0.2406%" height="15" fill="rgb(221,39,39)" fg:x="11355" fg:w="297"/><text x="9.4484%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (881 samples, 0.71%)</title><rect x="9.4989%" y="645" width="0.7137%" height="15" fill="rgb(222,119,46)" fg:x="11726" fg:w="881"/><text x="9.7489%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (953 samples, 0.77%)</title><rect x="9.4503%" y="741" width="0.7720%" height="15" fill="rgb(222,165,49)" fg:x="11666" fg:w="953"/><text x="9.7003%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (953 samples, 0.77%)</title><rect x="9.4503%" y="725" width="0.7720%" height="15" fill="rgb(219,113,52)" fg:x="11666" fg:w="953"/><text x="9.7003%" y="735.50"></text></g><g><title>alloc::alloc::alloc (944 samples, 0.76%)</title><rect x="9.4576%" y="709" width="0.7647%" height="15" fill="rgb(214,7,15)" fg:x="11675" fg:w="944"/><text x="9.7076%" y="719.50"></text></g><g><title>__rg_alloc (944 samples, 0.76%)</title><rect x="9.4576%" y="693" width="0.7647%" height="15" fill="rgb(235,32,4)" fg:x="11675" fg:w="944"/><text x="9.7076%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (944 samples, 0.76%)</title><rect x="9.4576%" y="677" width="0.7647%" height="15" fill="rgb(238,90,54)" fg:x="11675" fg:w="944"/><text x="9.7076%" y="687.50"></text></g><g><title>sn_rust_alloc (944 samples, 0.76%)</title><rect x="9.4576%" y="661" width="0.7647%" height="15" fill="rgb(213,208,19)" fg:x="11675" fg:w="944"/><text x="9.7076%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (979 samples, 0.79%)</title><rect x="9.4389%" y="805" width="0.7931%" height="15" fill="rgb(233,156,4)" fg:x="11652" fg:w="979"/><text x="9.6889%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (979 samples, 0.79%)</title><rect x="9.4389%" y="789" width="0.7931%" height="15" fill="rgb(207,194,5)" fg:x="11652" fg:w="979"/><text x="9.6889%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (972 samples, 0.79%)</title><rect x="9.4446%" y="773" width="0.7874%" height="15" fill="rgb(206,111,30)" fg:x="11659" fg:w="972"/><text x="9.6946%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (972 samples, 0.79%)</title><rect x="9.4446%" y="757" width="0.7874%" height="15" fill="rgb(243,70,54)" fg:x="11659" fg:w="972"/><text x="9.6946%" y="767.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (19 samples, 0.02%)</title><rect x="10.2320%" y="773" width="0.0154%" height="15" fill="rgb(242,28,8)" fg:x="12631" fg:w="19"/><text x="10.4820%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.04%)</title><rect x="10.2490%" y="709" width="0.0389%" height="15" fill="rgb(219,106,18)" fg:x="12652" fg:w="48"/><text x="10.4990%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (48 samples, 0.04%)</title><rect x="10.2490%" y="693" width="0.0389%" height="15" fill="rgb(244,222,10)" fg:x="12652" fg:w="48"/><text x="10.4990%" y="703.50"></text></g><g><title>__rg_dealloc (48 samples, 0.04%)</title><rect x="10.2490%" y="677" width="0.0389%" height="15" fill="rgb(236,179,52)" fg:x="12652" fg:w="48"/><text x="10.4990%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (48 samples, 0.04%)</title><rect x="10.2490%" y="661" width="0.0389%" height="15" fill="rgb(213,23,39)" fg:x="12652" fg:w="48"/><text x="10.4990%" y="671.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.03%)</title><rect x="10.2531%" y="645" width="0.0348%" height="15" fill="rgb(238,48,10)" fg:x="12657" fg:w="43"/><text x="10.5031%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (53 samples, 0.04%)</title><rect x="10.2474%" y="773" width="0.0429%" height="15" fill="rgb(251,196,23)" fg:x="12650" fg:w="53"/><text x="10.4974%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="10.2474%" y="757" width="0.0429%" height="15" fill="rgb(250,152,24)" fg:x="12650" fg:w="53"/><text x="10.4974%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="10.2490%" y="741" width="0.0413%" height="15" fill="rgb(209,150,17)" fg:x="12652" fg:w="51"/><text x="10.4990%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="10.2490%" y="725" width="0.0413%" height="15" fill="rgb(234,202,34)" fg:x="12652" fg:w="51"/><text x="10.4990%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (76 samples, 0.06%)</title><rect x="10.2320%" y="805" width="0.0616%" height="15" fill="rgb(253,148,53)" fg:x="12631" fg:w="76"/><text x="10.4820%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.06%)</title><rect x="10.2320%" y="789" width="0.0616%" height="15" fill="rgb(218,129,16)" fg:x="12631" fg:w="76"/><text x="10.4820%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (14 samples, 0.01%)</title><rect x="10.2936%" y="805" width="0.0113%" height="15" fill="rgb(216,85,19)" fg:x="12707" fg:w="14"/><text x="10.5436%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,271 samples, 3.46%)</title><rect x="6.8491%" y="901" width="3.4598%" height="15" fill="rgb(235,228,7)" fg:x="8455" fg:w="4271"/><text x="7.0991%" y="911.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,271 samples, 3.46%)</title><rect x="6.8491%" y="885" width="3.4598%" height="15" fill="rgb(245,175,0)" fg:x="8455" fg:w="4271"/><text x="7.0991%" y="895.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,271 samples, 3.46%)</title><rect x="6.8491%" y="869" width="3.4598%" height="15" fill="rgb(208,168,36)" fg:x="8455" fg:w="4271"/><text x="7.0991%" y="879.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,271 samples, 3.46%)</title><rect x="6.8491%" y="853" width="3.4598%" height="15" fill="rgb(246,171,24)" fg:x="8455" fg:w="4271"/><text x="7.0991%" y="863.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,271 samples, 3.46%)</title><rect x="6.8491%" y="837" width="3.4598%" height="15" fill="rgb(215,142,24)" fg:x="8455" fg:w="4271"/><text x="7.0991%" y="847.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,313 samples, 2.68%)</title><rect x="7.6252%" y="821" width="2.6838%" height="15" fill="rgb(250,187,7)" fg:x="9413" fg:w="3313"/><text x="7.8752%" y="831.50">tr..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (102 samples, 0.08%)</title><rect x="10.4378%" y="837" width="0.0826%" height="15" fill="rgb(228,66,33)" fg:x="12885" fg:w="102"/><text x="10.6878%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (78 samples, 0.06%)</title><rect x="10.4572%" y="821" width="0.0632%" height="15" fill="rgb(234,215,21)" fg:x="12909" fg:w="78"/><text x="10.7072%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (819 samples, 0.66%)</title><rect x="10.3341%" y="853" width="0.6634%" height="15" fill="rgb(222,191,20)" fg:x="12757" fg:w="819"/><text x="10.5841%" y="863.50"></text></g><g><title>[libc-2.31.so] (589 samples, 0.48%)</title><rect x="10.5204%" y="837" width="0.4771%" height="15" fill="rgb(245,79,54)" fg:x="12987" fg:w="589"/><text x="10.7704%" y="847.50"></text></g><g><title>[libc-2.31.so] (374 samples, 0.30%)</title><rect x="10.9975%" y="853" width="0.3030%" height="15" fill="rgb(240,10,37)" fg:x="13576" fg:w="374"/><text x="11.2475%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,225 samples, 0.99%)</title><rect x="10.3090%" y="885" width="0.9923%" height="15" fill="rgb(214,192,32)" fg:x="12726" fg:w="1225"/><text x="10.5590%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,225 samples, 0.99%)</title><rect x="10.3090%" y="869" width="0.9923%" height="15" fill="rgb(209,36,54)" fg:x="12726" fg:w="1225"/><text x="10.5590%" y="879.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="11.3272%" y="821" width="0.0113%" height="15" fill="rgb(220,10,11)" fg:x="13983" fg:w="14"/><text x="11.5772%" y="831.50"></text></g><g><title>core::ptr::write (13 samples, 0.01%)</title><rect x="11.3280%" y="805" width="0.0105%" height="15" fill="rgb(221,106,17)" fg:x="13984" fg:w="13"/><text x="11.5780%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (56 samples, 0.05%)</title><rect x="11.3094%" y="853" width="0.0454%" height="15" fill="rgb(251,142,44)" fg:x="13961" fg:w="56"/><text x="11.5594%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="11.3094%" y="837" width="0.0454%" height="15" fill="rgb(238,13,15)" fg:x="13961" fg:w="56"/><text x="11.5594%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (20 samples, 0.02%)</title><rect x="11.3386%" y="821" width="0.0162%" height="15" fill="rgb(208,107,27)" fg:x="13997" fg:w="20"/><text x="11.5886%" y="831.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="11.3386%" y="805" width="0.0162%" height="15" fill="rgb(205,136,37)" fg:x="13997" fg:w="20"/><text x="11.5886%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (142 samples, 0.12%)</title><rect x="11.3791%" y="821" width="0.1150%" height="15" fill="rgb(250,205,27)" fg:x="14047" fg:w="142"/><text x="11.6291%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (132 samples, 0.11%)</title><rect x="11.3872%" y="805" width="0.1069%" height="15" fill="rgb(210,80,43)" fg:x="14057" fg:w="132"/><text x="11.6372%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (132 samples, 0.11%)</title><rect x="11.3872%" y="789" width="0.1069%" height="15" fill="rgb(247,160,36)" fg:x="14057" fg:w="132"/><text x="11.6372%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (132 samples, 0.11%)</title><rect x="11.3872%" y="773" width="0.1069%" height="15" fill="rgb(234,13,49)" fg:x="14057" fg:w="132"/><text x="11.6372%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (132 samples, 0.11%)</title><rect x="11.3872%" y="757" width="0.1069%" height="15" fill="rgb(234,122,0)" fg:x="14057" fg:w="132"/><text x="11.6372%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (132 samples, 0.11%)</title><rect x="11.3872%" y="741" width="0.1069%" height="15" fill="rgb(207,146,38)" fg:x="14057" fg:w="132"/><text x="11.6372%" y="751.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.07%)</title><rect x="11.4220%" y="725" width="0.0721%" height="15" fill="rgb(207,177,25)" fg:x="14100" fg:w="89"/><text x="11.6720%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (7,920 samples, 6.42%)</title><rect x="5.0881%" y="1029" width="6.4158%" height="15" fill="rgb(211,178,42)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="1039.50">async_ex..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (7,920 samples, 6.42%)</title><rect x="5.0881%" y="1013" width="6.4158%" height="15" fill="rgb(230,69,54)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="1023.50">&lt;async_s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (7,920 samples, 6.42%)</title><rect x="5.0881%" y="997" width="6.4158%" height="15" fill="rgb(214,135,41)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="1007.50">async_st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7,920 samples, 6.42%)</title><rect x="5.0881%" y="981" width="6.4158%" height="15" fill="rgb(237,67,25)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="991.50">std::thr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7,920 samples, 6.42%)</title><rect x="5.0881%" y="965" width="6.4158%" height="15" fill="rgb(222,189,50)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="975.50">std::thr..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (7,920 samples, 6.42%)</title><rect x="5.0881%" y="949" width="6.4158%" height="15" fill="rgb(245,148,34)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="959.50">async_st..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,920 samples, 6.42%)</title><rect x="5.0881%" y="933" width="6.4158%" height="15" fill="rgb(222,29,6)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="943.50">&lt;async_s..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,920 samples, 6.42%)</title><rect x="5.0881%" y="917" width="6.4158%" height="15" fill="rgb(221,189,43)" fg:x="6281" fg:w="7920"/><text x="5.3381%" y="927.50">&lt;core::f..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,475 samples, 1.19%)</title><rect x="10.3090%" y="901" width="1.1949%" height="15" fill="rgb(207,36,27)" fg:x="12726" fg:w="1475"/><text x="10.5590%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (250 samples, 0.20%)</title><rect x="11.3013%" y="885" width="0.2025%" height="15" fill="rgb(217,90,24)" fg:x="13951" fg:w="250"/><text x="11.5513%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (250 samples, 0.20%)</title><rect x="11.3013%" y="869" width="0.2025%" height="15" fill="rgb(224,66,35)" fg:x="13951" fg:w="250"/><text x="11.5513%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (184 samples, 0.15%)</title><rect x="11.3548%" y="853" width="0.1491%" height="15" fill="rgb(221,13,50)" fg:x="14017" fg:w="184"/><text x="11.6048%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (163 samples, 0.13%)</title><rect x="11.3718%" y="837" width="0.1320%" height="15" fill="rgb(236,68,49)" fg:x="14038" fg:w="163"/><text x="11.6218%" y="847.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (186 samples, 0.15%)</title><rect x="11.5889%" y="677" width="0.1507%" height="15" fill="rgb(229,146,28)" fg:x="14306" fg:w="186"/><text x="11.8389%" y="687.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (265 samples, 0.21%)</title><rect x="11.5273%" y="837" width="0.2147%" height="15" fill="rgb(225,31,38)" fg:x="14230" fg:w="265"/><text x="11.7773%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (265 samples, 0.21%)</title><rect x="11.5273%" y="821" width="0.2147%" height="15" fill="rgb(250,208,3)" fg:x="14230" fg:w="265"/><text x="11.7773%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (252 samples, 0.20%)</title><rect x="11.5378%" y="805" width="0.2041%" height="15" fill="rgb(246,54,23)" fg:x="14243" fg:w="252"/><text x="11.7878%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (238 samples, 0.19%)</title><rect x="11.5492%" y="789" width="0.1928%" height="15" fill="rgb(243,76,11)" fg:x="14257" fg:w="238"/><text x="11.7992%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (237 samples, 0.19%)</title><rect x="11.5500%" y="773" width="0.1920%" height="15" fill="rgb(245,21,50)" fg:x="14258" fg:w="237"/><text x="11.8000%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (237 samples, 0.19%)</title><rect x="11.5500%" y="757" width="0.1920%" height="15" fill="rgb(228,9,43)" fg:x="14258" fg:w="237"/><text x="11.8000%" y="767.50"></text></g><g><title>alloc::alloc::alloc (237 samples, 0.19%)</title><rect x="11.5500%" y="741" width="0.1920%" height="15" fill="rgb(208,100,47)" fg:x="14258" fg:w="237"/><text x="11.8000%" y="751.50"></text></g><g><title>__rg_alloc (237 samples, 0.19%)</title><rect x="11.5500%" y="725" width="0.1920%" height="15" fill="rgb(232,26,8)" fg:x="14258" fg:w="237"/><text x="11.8000%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (237 samples, 0.19%)</title><rect x="11.5500%" y="709" width="0.1920%" height="15" fill="rgb(216,166,38)" fg:x="14258" fg:w="237"/><text x="11.8000%" y="719.50"></text></g><g><title>sn_rust_alloc (237 samples, 0.19%)</title><rect x="11.5500%" y="693" width="0.1920%" height="15" fill="rgb(251,202,51)" fg:x="14258" fg:w="237"/><text x="11.8000%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (304 samples, 0.25%)</title><rect x="11.5168%" y="901" width="0.2463%" height="15" fill="rgb(254,216,34)" fg:x="14217" fg:w="304"/><text x="11.7668%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (304 samples, 0.25%)</title><rect x="11.5168%" y="885" width="0.2463%" height="15" fill="rgb(251,32,27)" fg:x="14217" fg:w="304"/><text x="11.7668%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (304 samples, 0.25%)</title><rect x="11.5168%" y="869" width="0.2463%" height="15" fill="rgb(208,127,28)" fg:x="14217" fg:w="304"/><text x="11.7668%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (304 samples, 0.25%)</title><rect x="11.5168%" y="853" width="0.2463%" height="15" fill="rgb(224,137,22)" fg:x="14217" fg:w="304"/><text x="11.7668%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (26 samples, 0.02%)</title><rect x="11.7420%" y="837" width="0.0211%" height="15" fill="rgb(254,70,32)" fg:x="14495" fg:w="26"/><text x="11.9920%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="11.7493%" y="821" width="0.0138%" height="15" fill="rgb(229,75,37)" fg:x="14504" fg:w="17"/><text x="11.9993%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (17 samples, 0.01%)</title><rect x="11.7493%" y="805" width="0.0138%" height="15" fill="rgb(252,64,23)" fg:x="14504" fg:w="17"/><text x="11.9993%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (17 samples, 0.01%)</title><rect x="11.7493%" y="789" width="0.0138%" height="15" fill="rgb(232,162,48)" fg:x="14504" fg:w="17"/><text x="11.9993%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="11.7493%" y="773" width="0.0138%" height="15" fill="rgb(246,160,12)" fg:x="14504" fg:w="17"/><text x="11.9993%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (592 samples, 0.48%)</title><rect x="11.9745%" y="613" width="0.4796%" height="15" fill="rgb(247,166,0)" fg:x="14782" fg:w="592"/><text x="12.2245%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (731 samples, 0.59%)</title><rect x="11.8692%" y="773" width="0.5922%" height="15" fill="rgb(249,219,21)" fg:x="14652" fg:w="731"/><text x="12.1192%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (731 samples, 0.59%)</title><rect x="11.8692%" y="757" width="0.5922%" height="15" fill="rgb(205,209,3)" fg:x="14652" fg:w="731"/><text x="12.1192%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (708 samples, 0.57%)</title><rect x="11.8878%" y="741" width="0.5735%" height="15" fill="rgb(243,44,1)" fg:x="14675" fg:w="708"/><text x="12.1378%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (680 samples, 0.55%)</title><rect x="11.9105%" y="725" width="0.5508%" height="15" fill="rgb(206,159,16)" fg:x="14703" fg:w="680"/><text x="12.1605%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (680 samples, 0.55%)</title><rect x="11.9105%" y="709" width="0.5508%" height="15" fill="rgb(244,77,30)" fg:x="14703" fg:w="680"/><text x="12.1605%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (680 samples, 0.55%)</title><rect x="11.9105%" y="693" width="0.5508%" height="15" fill="rgb(218,69,12)" fg:x="14703" fg:w="680"/><text x="12.1605%" y="703.50"></text></g><g><title>alloc::alloc::alloc (680 samples, 0.55%)</title><rect x="11.9105%" y="677" width="0.5508%" height="15" fill="rgb(212,87,7)" fg:x="14703" fg:w="680"/><text x="12.1605%" y="687.50"></text></g><g><title>__rg_alloc (680 samples, 0.55%)</title><rect x="11.9105%" y="661" width="0.5508%" height="15" fill="rgb(245,114,25)" fg:x="14703" fg:w="680"/><text x="12.1605%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (680 samples, 0.55%)</title><rect x="11.9105%" y="645" width="0.5508%" height="15" fill="rgb(210,61,42)" fg:x="14703" fg:w="680"/><text x="12.1605%" y="655.50"></text></g><g><title>sn_rust_alloc (680 samples, 0.55%)</title><rect x="11.9105%" y="629" width="0.5508%" height="15" fill="rgb(211,52,33)" fg:x="14703" fg:w="680"/><text x="12.1605%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (798 samples, 0.65%)</title><rect x="11.8481%" y="821" width="0.6464%" height="15" fill="rgb(234,58,33)" fg:x="14626" fg:w="798"/><text x="12.0981%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (798 samples, 0.65%)</title><rect x="11.8481%" y="805" width="0.6464%" height="15" fill="rgb(220,115,36)" fg:x="14626" fg:w="798"/><text x="12.0981%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (798 samples, 0.65%)</title><rect x="11.8481%" y="789" width="0.6464%" height="15" fill="rgb(243,153,54)" fg:x="14626" fg:w="798"/><text x="12.0981%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (41 samples, 0.03%)</title><rect x="12.4613%" y="773" width="0.0332%" height="15" fill="rgb(251,47,18)" fg:x="15383" fg:w="41"/><text x="12.7113%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (30 samples, 0.02%)</title><rect x="12.4702%" y="757" width="0.0243%" height="15" fill="rgb(242,102,42)" fg:x="15394" fg:w="30"/><text x="12.7202%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (30 samples, 0.02%)</title><rect x="12.4702%" y="741" width="0.0243%" height="15" fill="rgb(234,31,38)" fg:x="15394" fg:w="30"/><text x="12.7202%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (30 samples, 0.02%)</title><rect x="12.4702%" y="725" width="0.0243%" height="15" fill="rgb(221,117,51)" fg:x="15394" fg:w="30"/><text x="12.7202%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (30 samples, 0.02%)</title><rect x="12.4702%" y="709" width="0.0243%" height="15" fill="rgb(212,20,18)" fg:x="15394" fg:w="30"/><text x="12.7202%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (14 samples, 0.01%)</title><rect x="12.4832%" y="693" width="0.0113%" height="15" fill="rgb(245,133,36)" fg:x="15410" fg:w="14"/><text x="12.7332%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="12.4832%" y="677" width="0.0113%" height="15" fill="rgb(212,6,19)" fg:x="15410" fg:w="14"/><text x="12.7332%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (835 samples, 0.68%)</title><rect x="11.8481%" y="837" width="0.6764%" height="15" fill="rgb(218,1,36)" fg:x="14626" fg:w="835"/><text x="12.0981%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (37 samples, 0.03%)</title><rect x="12.4945%" y="821" width="0.0300%" height="15" fill="rgb(246,84,54)" fg:x="15424" fg:w="37"/><text x="12.7445%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (25 samples, 0.02%)</title><rect x="12.5043%" y="805" width="0.0203%" height="15" fill="rgb(242,110,6)" fg:x="15436" fg:w="25"/><text x="12.7543%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (25 samples, 0.02%)</title><rect x="12.5043%" y="789" width="0.0203%" height="15" fill="rgb(214,47,5)" fg:x="15436" fg:w="25"/><text x="12.7543%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,768 samples, 1.43%)</title><rect x="11.5168%" y="917" width="1.4322%" height="15" fill="rgb(218,159,25)" fg:x="14217" fg:w="1768"/><text x="11.7668%" y="927.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,464 samples, 1.19%)</title><rect x="11.7630%" y="901" width="1.1859%" height="15" fill="rgb(215,211,28)" fg:x="14521" fg:w="1464"/><text x="12.0130%" y="911.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,464 samples, 1.19%)</title><rect x="11.7630%" y="885" width="1.1859%" height="15" fill="rgb(238,59,32)" fg:x="14521" fg:w="1464"/><text x="12.0130%" y="895.50"></text></g><g><title>value_trait::Builder::object (1,359 samples, 1.10%)</title><rect x="11.8481%" y="869" width="1.1009%" height="15" fill="rgb(226,82,3)" fg:x="14626" fg:w="1359"/><text x="12.0981%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,359 samples, 1.10%)</title><rect x="11.8481%" y="853" width="1.1009%" height="15" fill="rgb(240,164,32)" fg:x="14626" fg:w="1359"/><text x="12.0981%" y="863.50"></text></g><g><title>tremor_value::value::Value::Object (524 samples, 0.42%)</title><rect x="12.5245%" y="837" width="0.4245%" height="15" fill="rgb(232,46,7)" fg:x="15461" fg:w="524"/><text x="12.7745%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (42 samples, 0.03%)</title><rect x="12.9490%" y="901" width="0.0340%" height="15" fill="rgb(229,129,53)" fg:x="15985" fg:w="42"/><text x="13.1990%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="12.9830%" y="901" width="0.0235%" height="15" fill="rgb(234,188,29)" fg:x="16027" fg:w="29"/><text x="13.2330%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (29 samples, 0.02%)</title><rect x="12.9830%" y="885" width="0.0235%" height="15" fill="rgb(246,141,4)" fg:x="16027" fg:w="29"/><text x="13.2330%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (29 samples, 0.02%)</title><rect x="12.9830%" y="869" width="0.0235%" height="15" fill="rgb(229,23,39)" fg:x="16027" fg:w="29"/><text x="13.2330%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (25 samples, 0.02%)</title><rect x="12.9862%" y="853" width="0.0203%" height="15" fill="rgb(206,12,3)" fg:x="16031" fg:w="25"/><text x="13.2362%" y="863.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="12.9935%" y="837" width="0.0130%" height="15" fill="rgb(252,226,20)" fg:x="16040" fg:w="16"/><text x="13.2435%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="12.9935%" y="821" width="0.0130%" height="15" fill="rgb(216,123,35)" fg:x="16040" fg:w="16"/><text x="13.2435%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,864 samples, 1.51%)</title><rect x="11.5168%" y="933" width="1.5100%" height="15" fill="rgb(212,68,40)" fg:x="14217" fg:w="1864"/><text x="11.7668%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (96 samples, 0.08%)</title><rect x="12.9490%" y="917" width="0.0778%" height="15" fill="rgb(254,125,32)" fg:x="15985" fg:w="96"/><text x="13.1990%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (25 samples, 0.02%)</title><rect x="13.0065%" y="901" width="0.0203%" height="15" fill="rgb(253,97,22)" fg:x="16056" fg:w="25"/><text x="13.2565%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (25 samples, 0.02%)</title><rect x="13.0065%" y="885" width="0.0203%" height="15" fill="rgb(241,101,14)" fg:x="16056" fg:w="25"/><text x="13.2565%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (25 samples, 0.02%)</title><rect x="13.0065%" y="869" width="0.0203%" height="15" fill="rgb(238,103,29)" fg:x="16056" fg:w="25"/><text x="13.2565%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="13.0065%" y="853" width="0.0203%" height="15" fill="rgb(233,195,47)" fg:x="16056" fg:w="25"/><text x="13.2565%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="13.0065%" y="837" width="0.0203%" height="15" fill="rgb(246,218,30)" fg:x="16056" fg:w="25"/><text x="13.2565%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="13.0065%" y="821" width="0.0203%" height="15" fill="rgb(219,145,47)" fg:x="16056" fg:w="25"/><text x="13.2565%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (130 samples, 0.11%)</title><rect x="13.2511%" y="917" width="0.1053%" height="15" fill="rgb(243,12,26)" fg:x="16358" fg:w="130"/><text x="13.5011%" y="927.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="13.4026%" y="773" width="0.0365%" height="15" fill="rgb(214,87,16)" fg:x="16545" fg:w="45"/><text x="13.6526%" y="783.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (104 samples, 0.08%)</title><rect x="13.3564%" y="917" width="0.0842%" height="15" fill="rgb(208,99,42)" fg:x="16488" fg:w="104"/><text x="13.6064%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (104 samples, 0.08%)</title><rect x="13.3564%" y="901" width="0.0842%" height="15" fill="rgb(253,99,2)" fg:x="16488" fg:w="104"/><text x="13.6064%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (88 samples, 0.07%)</title><rect x="13.3694%" y="885" width="0.0713%" height="15" fill="rgb(220,168,23)" fg:x="16504" fg:w="88"/><text x="13.6194%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (88 samples, 0.07%)</title><rect x="13.3694%" y="869" width="0.0713%" height="15" fill="rgb(242,38,24)" fg:x="16504" fg:w="88"/><text x="13.6194%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (88 samples, 0.07%)</title><rect x="13.3694%" y="853" width="0.0713%" height="15" fill="rgb(225,182,9)" fg:x="16504" fg:w="88"/><text x="13.6194%" y="863.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.07%)</title><rect x="13.3710%" y="837" width="0.0697%" height="15" fill="rgb(243,178,37)" fg:x="16506" fg:w="86"/><text x="13.6210%" y="847.50"></text></g><g><title>__rg_alloc (86 samples, 0.07%)</title><rect x="13.3710%" y="821" width="0.0697%" height="15" fill="rgb(232,139,19)" fg:x="16506" fg:w="86"/><text x="13.6210%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (86 samples, 0.07%)</title><rect x="13.3710%" y="805" width="0.0697%" height="15" fill="rgb(225,201,24)" fg:x="16506" fg:w="86"/><text x="13.6210%" y="815.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.06%)</title><rect x="13.3832%" y="789" width="0.0575%" height="15" fill="rgb(221,47,46)" fg:x="16521" fg:w="71"/><text x="13.6332%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.04%)</title><rect x="13.4407%" y="917" width="0.0429%" height="15" fill="rgb(249,23,13)" fg:x="16592" fg:w="53"/><text x="13.6907%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="13.4407%" y="901" width="0.0429%" height="15" fill="rgb(219,9,5)" fg:x="16592" fg:w="53"/><text x="13.6907%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="13.4407%" y="885" width="0.0429%" height="15" fill="rgb(254,171,16)" fg:x="16592" fg:w="53"/><text x="13.6907%" y="895.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.03%)</title><rect x="13.4496%" y="869" width="0.0340%" height="15" fill="rgb(230,171,20)" fg:x="16603" fg:w="42"/><text x="13.6996%" y="879.50"></text></g><g><title>__rg_alloc (42 samples, 0.03%)</title><rect x="13.4496%" y="853" width="0.0340%" height="15" fill="rgb(210,71,41)" fg:x="16603" fg:w="42"/><text x="13.6996%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.03%)</title><rect x="13.4496%" y="837" width="0.0340%" height="15" fill="rgb(206,173,20)" fg:x="16603" fg:w="42"/><text x="13.6996%" y="847.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="13.4601%" y="821" width="0.0235%" height="15" fill="rgb(233,88,34)" fg:x="16616" fg:w="29"/><text x="13.7101%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="13.4707%" y="805" width="0.0130%" height="15" fill="rgb(223,209,46)" fg:x="16629" fg:w="16"/><text x="13.7207%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (46 samples, 0.04%)</title><rect x="14.0053%" y="629" width="0.0373%" height="15" fill="rgb(250,43,18)" fg:x="17289" fg:w="46"/><text x="14.2553%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (145 samples, 0.12%)</title><rect x="13.9275%" y="789" width="0.1175%" height="15" fill="rgb(208,13,10)" fg:x="17193" fg:w="145"/><text x="14.1775%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (133 samples, 0.11%)</title><rect x="13.9373%" y="773" width="0.1077%" height="15" fill="rgb(212,200,36)" fg:x="17205" fg:w="133"/><text x="14.1873%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (133 samples, 0.11%)</title><rect x="13.9373%" y="757" width="0.1077%" height="15" fill="rgb(225,90,30)" fg:x="17205" fg:w="133"/><text x="14.1873%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (108 samples, 0.09%)</title><rect x="13.9575%" y="741" width="0.0875%" height="15" fill="rgb(236,182,39)" fg:x="17230" fg:w="108"/><text x="14.2075%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (98 samples, 0.08%)</title><rect x="13.9656%" y="725" width="0.0794%" height="15" fill="rgb(212,144,35)" fg:x="17240" fg:w="98"/><text x="14.2156%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (98 samples, 0.08%)</title><rect x="13.9656%" y="709" width="0.0794%" height="15" fill="rgb(228,63,44)" fg:x="17240" fg:w="98"/><text x="14.2156%" y="719.50"></text></g><g><title>alloc::alloc::alloc (98 samples, 0.08%)</title><rect x="13.9656%" y="693" width="0.0794%" height="15" fill="rgb(228,109,6)" fg:x="17240" fg:w="98"/><text x="14.2156%" y="703.50"></text></g><g><title>__rg_alloc (98 samples, 0.08%)</title><rect x="13.9656%" y="677" width="0.0794%" height="15" fill="rgb(238,117,24)" fg:x="17240" fg:w="98"/><text x="14.2156%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (98 samples, 0.08%)</title><rect x="13.9656%" y="661" width="0.0794%" height="15" fill="rgb(242,26,26)" fg:x="17240" fg:w="98"/><text x="14.2156%" y="671.50"></text></g><g><title>sn_rust_alloc (98 samples, 0.08%)</title><rect x="13.9656%" y="645" width="0.0794%" height="15" fill="rgb(221,92,48)" fg:x="17240" fg:w="98"/><text x="14.2156%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (174 samples, 0.14%)</title><rect x="13.9138%" y="869" width="0.1410%" height="15" fill="rgb(209,209,32)" fg:x="17176" fg:w="174"/><text x="14.1638%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (157 samples, 0.13%)</title><rect x="13.9275%" y="853" width="0.1272%" height="15" fill="rgb(221,70,22)" fg:x="17193" fg:w="157"/><text x="14.1775%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (157 samples, 0.13%)</title><rect x="13.9275%" y="837" width="0.1272%" height="15" fill="rgb(248,145,5)" fg:x="17193" fg:w="157"/><text x="14.1775%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (157 samples, 0.13%)</title><rect x="13.9275%" y="821" width="0.1272%" height="15" fill="rgb(226,116,26)" fg:x="17193" fg:w="157"/><text x="14.1775%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (157 samples, 0.13%)</title><rect x="13.9275%" y="805" width="0.1272%" height="15" fill="rgb(244,5,17)" fg:x="17193" fg:w="157"/><text x="14.1775%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (307 samples, 0.25%)</title><rect x="14.3156%" y="629" width="0.2487%" height="15" fill="rgb(252,159,33)" fg:x="17672" fg:w="307"/><text x="14.5656%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (376 samples, 0.30%)</title><rect x="14.2653%" y="789" width="0.3046%" height="15" fill="rgb(206,71,0)" fg:x="17610" fg:w="376"/><text x="14.5153%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (376 samples, 0.30%)</title><rect x="14.2653%" y="773" width="0.3046%" height="15" fill="rgb(233,118,54)" fg:x="17610" fg:w="376"/><text x="14.5153%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (359 samples, 0.29%)</title><rect x="14.2791%" y="757" width="0.2908%" height="15" fill="rgb(234,83,48)" fg:x="17627" fg:w="359"/><text x="14.5291%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (353 samples, 0.29%)</title><rect x="14.2840%" y="741" width="0.2860%" height="15" fill="rgb(228,3,54)" fg:x="17633" fg:w="353"/><text x="14.5340%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (353 samples, 0.29%)</title><rect x="14.2840%" y="725" width="0.2860%" height="15" fill="rgb(226,155,13)" fg:x="17633" fg:w="353"/><text x="14.5340%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (353 samples, 0.29%)</title><rect x="14.2840%" y="709" width="0.2860%" height="15" fill="rgb(241,28,37)" fg:x="17633" fg:w="353"/><text x="14.5340%" y="719.50"></text></g><g><title>alloc::alloc::alloc (353 samples, 0.29%)</title><rect x="14.2840%" y="693" width="0.2860%" height="15" fill="rgb(233,93,10)" fg:x="17633" fg:w="353"/><text x="14.5340%" y="703.50"></text></g><g><title>__rg_alloc (353 samples, 0.29%)</title><rect x="14.2840%" y="677" width="0.2860%" height="15" fill="rgb(225,113,19)" fg:x="17633" fg:w="353"/><text x="14.5340%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (353 samples, 0.29%)</title><rect x="14.2840%" y="661" width="0.2860%" height="15" fill="rgb(241,2,18)" fg:x="17633" fg:w="353"/><text x="14.5340%" y="671.50"></text></g><g><title>sn_rust_alloc (342 samples, 0.28%)</title><rect x="14.2929%" y="645" width="0.2770%" height="15" fill="rgb(228,207,21)" fg:x="17644" fg:w="342"/><text x="14.5429%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (414 samples, 0.34%)</title><rect x="14.2427%" y="837" width="0.3354%" height="15" fill="rgb(213,211,35)" fg:x="17582" fg:w="414"/><text x="14.4927%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (404 samples, 0.33%)</title><rect x="14.2508%" y="821" width="0.3273%" height="15" fill="rgb(209,83,10)" fg:x="17592" fg:w="404"/><text x="14.5008%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (404 samples, 0.33%)</title><rect x="14.2508%" y="805" width="0.3273%" height="15" fill="rgb(209,164,1)" fg:x="17592" fg:w="404"/><text x="14.5008%" y="815.50"></text></g><g><title>abi_stable::erased_types::iterator::next (15 samples, 0.01%)</title><rect x="14.6064%" y="789" width="0.0122%" height="15" fill="rgb(213,184,43)" fg:x="18031" fg:w="15"/><text x="14.8564%" y="799.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (15 samples, 0.01%)</title><rect x="14.6064%" y="773" width="0.0122%" height="15" fill="rgb(231,61,34)" fg:x="18031" fg:w="15"/><text x="14.8564%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="14.6064%" y="757" width="0.0122%" height="15" fill="rgb(235,75,3)" fg:x="18031" fg:w="15"/><text x="14.8564%" y="767.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="14.6064%" y="741" width="0.0122%" height="15" fill="rgb(220,106,47)" fg:x="18031" fg:w="15"/><text x="14.8564%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="14.6007%" y="821" width="0.0235%" height="15" fill="rgb(210,196,33)" fg:x="18024" fg:w="29"/><text x="14.8507%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (29 samples, 0.02%)</title><rect x="14.6007%" y="805" width="0.0235%" height="15" fill="rgb(229,154,42)" fg:x="18024" fg:w="29"/><text x="14.8507%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="14.6242%" y="821" width="0.0227%" height="15" fill="rgb(228,114,26)" fg:x="18053" fg:w="28"/><text x="14.8742%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (28 samples, 0.02%)</title><rect x="14.6242%" y="805" width="0.0227%" height="15" fill="rgb(208,144,1)" fg:x="18053" fg:w="28"/><text x="14.8742%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="14.6469%" y="821" width="0.0227%" height="15" fill="rgb(239,112,37)" fg:x="18081" fg:w="28"/><text x="14.8969%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (19 samples, 0.02%)</title><rect x="14.6542%" y="805" width="0.0154%" height="15" fill="rgb(210,96,50)" fg:x="18090" fg:w="19"/><text x="14.9042%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="14.6582%" y="789" width="0.0113%" height="15" fill="rgb(222,178,2)" fg:x="18095" fg:w="14"/><text x="14.9082%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="14.6590%" y="773" width="0.0105%" height="15" fill="rgb(226,74,18)" fg:x="18096" fg:w="13"/><text x="14.9090%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="14.6590%" y="757" width="0.0105%" height="15" fill="rgb(225,67,54)" fg:x="18096" fg:w="13"/><text x="14.9090%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="14.6590%" y="741" width="0.0105%" height="15" fill="rgb(251,92,32)" fg:x="18096" fg:w="13"/><text x="14.9090%" y="751.50"></text></g><g><title>sn_rust_dealloc (61 samples, 0.05%)</title><rect x="14.6882%" y="709" width="0.0494%" height="15" fill="rgb(228,149,22)" fg:x="18132" fg:w="61"/><text x="14.9382%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (1,099 samples, 0.89%)</title><rect x="13.8490%" y="901" width="0.8903%" height="15" fill="rgb(243,54,13)" fg:x="17096" fg:w="1099"/><text x="14.0990%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,020 samples, 0.83%)</title><rect x="13.9130%" y="885" width="0.8263%" height="15" fill="rgb(243,180,28)" fg:x="17175" fg:w="1020"/><text x="14.1630%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (845 samples, 0.68%)</title><rect x="14.0547%" y="869" width="0.6845%" height="15" fill="rgb(208,167,24)" fg:x="17350" fg:w="845"/><text x="14.3047%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (613 samples, 0.50%)</title><rect x="14.2427%" y="853" width="0.4966%" height="15" fill="rgb(245,73,45)" fg:x="17582" fg:w="613"/><text x="14.4927%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (199 samples, 0.16%)</title><rect x="14.5780%" y="837" width="0.1612%" height="15" fill="rgb(237,203,48)" fg:x="17996" fg:w="199"/><text x="14.8280%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (86 samples, 0.07%)</title><rect x="14.6696%" y="821" width="0.0697%" height="15" fill="rgb(211,197,16)" fg:x="18109" fg:w="86"/><text x="14.9196%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (86 samples, 0.07%)</title><rect x="14.6696%" y="805" width="0.0697%" height="15" fill="rgb(243,99,51)" fg:x="18109" fg:w="86"/><text x="14.9196%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.07%)</title><rect x="14.6696%" y="789" width="0.0697%" height="15" fill="rgb(215,123,29)" fg:x="18109" fg:w="86"/><text x="14.9196%" y="799.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (78 samples, 0.06%)</title><rect x="14.6761%" y="773" width="0.0632%" height="15" fill="rgb(239,186,37)" fg:x="18117" fg:w="78"/><text x="14.9261%" y="783.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (75 samples, 0.06%)</title><rect x="14.6785%" y="757" width="0.0608%" height="15" fill="rgb(252,136,39)" fg:x="18120" fg:w="75"/><text x="14.9285%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (75 samples, 0.06%)</title><rect x="14.6785%" y="741" width="0.0608%" height="15" fill="rgb(223,213,32)" fg:x="18120" fg:w="75"/><text x="14.9285%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (75 samples, 0.06%)</title><rect x="14.6785%" y="725" width="0.0608%" height="15" fill="rgb(233,115,5)" fg:x="18120" fg:w="75"/><text x="14.9285%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,180 samples, 3.39%)</title><rect x="11.5095%" y="1029" width="3.3861%" height="15" fill="rgb(207,226,44)" fg:x="14208" fg:w="4180"/><text x="11.7595%" y="1039.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,180 samples, 3.39%)</title><rect x="11.5095%" y="1013" width="3.3861%" height="15" fill="rgb(208,126,0)" fg:x="14208" fg:w="4180"/><text x="11.7595%" y="1023.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,180 samples, 3.39%)</title><rect x="11.5095%" y="997" width="3.3861%" height="15" fill="rgb(244,66,21)" fg:x="14208" fg:w="4180"/><text x="11.7595%" y="1007.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,180 samples, 3.39%)</title><rect x="11.5095%" y="981" width="3.3861%" height="15" fill="rgb(222,97,12)" fg:x="14208" fg:w="4180"/><text x="11.7595%" y="991.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,180 samples, 3.39%)</title><rect x="11.5095%" y="965" width="3.3861%" height="15" fill="rgb(219,213,19)" fg:x="14208" fg:w="4180"/><text x="11.7595%" y="975.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,174 samples, 3.38%)</title><rect x="11.5143%" y="949" width="3.3812%" height="15" fill="rgb(252,169,30)" fg:x="14214" fg:w="4174"/><text x="11.7643%" y="959.50">tre..</text></g><g><title>tremor_script::srs::EventPayload::try_new (2,307 samples, 1.87%)</title><rect x="13.0267%" y="933" width="1.8688%" height="15" fill="rgb(206,32,51)" fg:x="16081" fg:w="2307"/><text x="13.2767%" y="943.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (1,738 samples, 1.41%)</title><rect x="13.4877%" y="917" width="1.4079%" height="15" fill="rgb(250,172,42)" fg:x="16650" fg:w="1738"/><text x="13.7377%" y="927.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (193 samples, 0.16%)</title><rect x="14.7392%" y="901" width="0.1563%" height="15" fill="rgb(209,34,43)" fg:x="18195" fg:w="193"/><text x="14.9892%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,257 samples, 9.93%)</title><rect x="4.9674%" y="1045" width="9.9290%" height="15" fill="rgb(223,11,35)" fg:x="6132" fg:w="12257"/><text x="5.2174%" y="1055.50">&lt;core::future:..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="14.8964%" y="1045" width="0.0154%" height="15" fill="rgb(251,219,26)" fg:x="18389" fg:w="19"/><text x="15.1464%" y="1055.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="14.9183%" y="1045" width="0.0122%" height="15" fill="rgb(231,119,3)" fg:x="18416" fg:w="15"/><text x="15.1683%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (17 samples, 0.01%)</title><rect x="14.9385%" y="1045" width="0.0138%" height="15" fill="rgb(216,97,11)" fg:x="18441" fg:w="17"/><text x="15.1885%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (67 samples, 0.05%)</title><rect x="14.9523%" y="1045" width="0.0543%" height="15" fill="rgb(223,59,9)" fg:x="18458" fg:w="67"/><text x="15.2023%" y="1055.50"></text></g><g><title>[libc-2.31.so] (146 samples, 0.12%)</title><rect x="15.0130%" y="1045" width="0.1183%" height="15" fill="rgb(233,93,31)" fg:x="18533" fg:w="146"/><text x="15.2630%" y="1055.50"></text></g><g><title>__clock_gettime (87 samples, 0.07%)</title><rect x="15.1418%" y="1045" width="0.0705%" height="15" fill="rgb(239,81,33)" fg:x="18692" fg:w="87"/><text x="15.3918%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (19 samples, 0.02%)</title><rect x="15.2261%" y="1045" width="0.0154%" height="15" fill="rgb(213,120,34)" fg:x="18796" fg:w="19"/><text x="15.4761%" y="1055.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (38 samples, 0.03%)</title><rect x="15.2472%" y="1045" width="0.0308%" height="15" fill="rgb(243,49,53)" fg:x="18822" fg:w="38"/><text x="15.4972%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="15.2779%" y="1029" width="0.0130%" height="15" fill="rgb(247,216,33)" fg:x="18860" fg:w="16"/><text x="15.5279%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="15.2779%" y="1013" width="0.0130%" height="15" fill="rgb(226,26,14)" fg:x="18860" fg:w="16"/><text x="15.5279%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="15.2779%" y="997" width="0.0130%" height="15" fill="rgb(215,49,53)" fg:x="18860" fg:w="16"/><text x="15.5279%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="15.2779%" y="981" width="0.0130%" height="15" fill="rgb(245,162,40)" fg:x="18860" fg:w="16"/><text x="15.5279%" y="991.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="15.2779%" y="965" width="0.0130%" height="15" fill="rgb(229,68,17)" fg:x="18860" fg:w="16"/><text x="15.5279%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="15.2779%" y="949" width="0.0130%" height="15" fill="rgb(213,182,10)" fg:x="18860" fg:w="16"/><text x="15.5279%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="15.2779%" y="1045" width="0.0203%" height="15" fill="rgb(245,125,30)" fg:x="18860" fg:w="25"/><text x="15.5279%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (30 samples, 0.02%)</title><rect x="15.3030%" y="1045" width="0.0243%" height="15" fill="rgb(232,202,2)" fg:x="18891" fg:w="30"/><text x="15.5530%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (27 samples, 0.02%)</title><rect x="15.3273%" y="1045" width="0.0219%" height="15" fill="rgb(237,140,51)" fg:x="18921" fg:w="27"/><text x="15.5773%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="15.3994%" y="837" width="0.0113%" height="15" fill="rgb(236,157,25)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="15.3994%" y="821" width="0.0113%" height="15" fill="rgb(219,209,0)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="15.3994%" y="805" width="0.0113%" height="15" fill="rgb(240,116,54)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="15.3994%" y="789" width="0.0113%" height="15" fill="rgb(216,10,36)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="15.3994%" y="773" width="0.0113%" height="15" fill="rgb(222,72,44)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="783.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="15.3994%" y="757" width="0.0113%" height="15" fill="rgb(232,159,9)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="767.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="15.3994%" y="741" width="0.0113%" height="15" fill="rgb(210,39,32)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="15.3994%" y="725" width="0.0113%" height="15" fill="rgb(216,194,45)" fg:x="19010" fg:w="14"/><text x="15.6494%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="15.3994%" y="949" width="0.0203%" height="15" fill="rgb(218,18,35)" fg:x="19010" fg:w="25"/><text x="15.6494%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (25 samples, 0.02%)</title><rect x="15.3994%" y="933" width="0.0203%" height="15" fill="rgb(207,83,51)" fg:x="19010" fg:w="25"/><text x="15.6494%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (25 samples, 0.02%)</title><rect x="15.3994%" y="917" width="0.0203%" height="15" fill="rgb(225,63,43)" fg:x="19010" fg:w="25"/><text x="15.6494%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (25 samples, 0.02%)</title><rect x="15.3994%" y="901" width="0.0203%" height="15" fill="rgb(207,57,36)" fg:x="19010" fg:w="25"/><text x="15.6494%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.02%)</title><rect x="15.3994%" y="885" width="0.0203%" height="15" fill="rgb(216,99,33)" fg:x="19010" fg:w="25"/><text x="15.6494%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.02%)</title><rect x="15.3994%" y="869" width="0.0203%" height="15" fill="rgb(225,42,16)" fg:x="19010" fg:w="25"/><text x="15.6494%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.02%)</title><rect x="15.3994%" y="853" width="0.0203%" height="15" fill="rgb(220,201,45)" fg:x="19010" fg:w="25"/><text x="15.6494%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (89 samples, 0.07%)</title><rect x="15.3492%" y="1045" width="0.0721%" height="15" fill="rgb(225,33,4)" fg:x="18948" fg:w="89"/><text x="15.5992%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (27 samples, 0.02%)</title><rect x="15.3994%" y="1029" width="0.0219%" height="15" fill="rgb(224,33,50)" fg:x="19010" fg:w="27"/><text x="15.6494%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="15.3994%" y="1013" width="0.0219%" height="15" fill="rgb(246,198,51)" fg:x="19010" fg:w="27"/><text x="15.6494%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="15.3994%" y="997" width="0.0219%" height="15" fill="rgb(205,22,4)" fg:x="19010" fg:w="27"/><text x="15.6494%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="15.3994%" y="981" width="0.0219%" height="15" fill="rgb(206,3,8)" fg:x="19010" fg:w="27"/><text x="15.6494%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="15.3994%" y="965" width="0.0219%" height="15" fill="rgb(251,23,15)" fg:x="19010" fg:w="27"/><text x="15.6494%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (43 samples, 0.03%)</title><rect x="15.4213%" y="1045" width="0.0348%" height="15" fill="rgb(252,88,28)" fg:x="19037" fg:w="43"/><text x="15.6713%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (25 samples, 0.02%)</title><rect x="15.4359%" y="1029" width="0.0203%" height="15" fill="rgb(212,127,14)" fg:x="19055" fg:w="25"/><text x="15.6859%" y="1039.50"></text></g><g><title>core::mem::drop (25 samples, 0.02%)</title><rect x="15.4359%" y="1013" width="0.0203%" height="15" fill="rgb(247,145,37)" fg:x="19055" fg:w="25"/><text x="15.6859%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="15.4359%" y="997" width="0.0203%" height="15" fill="rgb(209,117,53)" fg:x="19055" fg:w="25"/><text x="15.6859%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="15.4359%" y="981" width="0.0203%" height="15" fill="rgb(212,90,42)" fg:x="19055" fg:w="25"/><text x="15.6859%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (25 samples, 0.02%)</title><rect x="15.4359%" y="965" width="0.0203%" height="15" fill="rgb(218,164,37)" fg:x="19055" fg:w="25"/><text x="15.6859%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (25 samples, 0.02%)</title><rect x="15.4359%" y="949" width="0.0203%" height="15" fill="rgb(246,65,34)" fg:x="19055" fg:w="25"/><text x="15.6859%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="15.4359%" y="933" width="0.0203%" height="15" fill="rgb(231,100,33)" fg:x="19055" fg:w="25"/><text x="15.6859%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.01%)</title><rect x="15.4578%" y="1045" width="0.0138%" height="15" fill="rgb(228,126,14)" fg:x="19082" fg:w="17"/><text x="15.7078%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="15.4578%" y="1029" width="0.0138%" height="15" fill="rgb(215,173,21)" fg:x="19082" fg:w="17"/><text x="15.7078%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (17 samples, 0.01%)</title><rect x="15.4578%" y="1013" width="0.0138%" height="15" fill="rgb(210,6,40)" fg:x="19082" fg:w="17"/><text x="15.7078%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="15.4578%" y="997" width="0.0138%" height="15" fill="rgb(212,48,18)" fg:x="19082" fg:w="17"/><text x="15.7078%" y="1007.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (64 samples, 0.05%)</title><rect x="15.4715%" y="1045" width="0.0518%" height="15" fill="rgb(230,214,11)" fg:x="19099" fg:w="64"/><text x="15.7215%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 0.02%)</title><rect x="15.5080%" y="1029" width="0.0154%" height="15" fill="rgb(254,105,39)" fg:x="19144" fg:w="19"/><text x="15.7580%" y="1039.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (113 samples, 0.09%)</title><rect x="15.8912%" y="661" width="0.0915%" height="15" fill="rgb(245,158,5)" fg:x="19617" fg:w="113"/><text x="16.1412%" y="671.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.06%)</title><rect x="15.9179%" y="645" width="0.0648%" height="15" fill="rgb(249,208,11)" fg:x="19650" fg:w="80"/><text x="16.1679%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::utypeid::UTypeId as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="16.0054%" y="597" width="0.0130%" height="15" fill="rgb(210,39,28)" fg:x="19758" fg:w="16"/><text x="16.2554%" y="607.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (36 samples, 0.03%)</title><rect x="16.0054%" y="613" width="0.0292%" height="15" fill="rgb(211,56,53)" fg:x="19758" fg:w="36"/><text x="16.2554%" y="623.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (20 samples, 0.02%)</title><rect x="16.0183%" y="597" width="0.0162%" height="15" fill="rgb(226,201,30)" fg:x="19774" fg:w="20"/><text x="16.2683%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (169 samples, 0.14%)</title><rect x="15.9827%" y="661" width="0.1369%" height="15" fill="rgb(239,101,34)" fg:x="19730" fg:w="169"/><text x="16.2327%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (160 samples, 0.13%)</title><rect x="15.9900%" y="645" width="0.1296%" height="15" fill="rgb(226,209,5)" fg:x="19739" fg:w="160"/><text x="16.2400%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (148 samples, 0.12%)</title><rect x="15.9997%" y="629" width="0.1199%" height="15" fill="rgb(250,105,47)" fg:x="19751" fg:w="148"/><text x="16.2497%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (105 samples, 0.09%)</title><rect x="16.0345%" y="613" width="0.0851%" height="15" fill="rgb(230,72,3)" fg:x="19794" fg:w="105"/><text x="16.2845%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (105 samples, 0.09%)</title><rect x="16.0345%" y="597" width="0.0851%" height="15" fill="rgb(232,218,39)" fg:x="19794" fg:w="105"/><text x="16.2845%" y="607.50"></text></g><g><title>[libc-2.31.so] (234 samples, 0.19%)</title><rect x="16.1277%" y="645" width="0.1896%" height="15" fill="rgb(248,166,6)" fg:x="19909" fg:w="234"/><text x="16.3777%" y="655.50"></text></g><g><title>[libc-2.31.so] (116 samples, 0.09%)</title><rect x="16.4647%" y="629" width="0.0940%" height="15" fill="rgb(247,89,20)" fg:x="20325" fg:w="116"/><text x="16.7147%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (322 samples, 0.26%)</title><rect x="16.6542%" y="341" width="0.2608%" height="15" fill="rgb(248,130,54)" fg:x="20559" fg:w="322"/><text x="16.9042%" y="351.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (389 samples, 0.32%)</title><rect x="16.6040%" y="501" width="0.3151%" height="15" fill="rgb(234,196,4)" fg:x="20497" fg:w="389"/><text x="16.8540%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (389 samples, 0.32%)</title><rect x="16.6040%" y="485" width="0.3151%" height="15" fill="rgb(250,143,31)" fg:x="20497" fg:w="389"/><text x="16.8540%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (382 samples, 0.31%)</title><rect x="16.6097%" y="469" width="0.3094%" height="15" fill="rgb(211,110,34)" fg:x="20504" fg:w="382"/><text x="16.8597%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (375 samples, 0.30%)</title><rect x="16.6154%" y="453" width="0.3038%" height="15" fill="rgb(215,124,48)" fg:x="20511" fg:w="375"/><text x="16.8654%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (375 samples, 0.30%)</title><rect x="16.6154%" y="437" width="0.3038%" height="15" fill="rgb(216,46,13)" fg:x="20511" fg:w="375"/><text x="16.8654%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (375 samples, 0.30%)</title><rect x="16.6154%" y="421" width="0.3038%" height="15" fill="rgb(205,184,25)" fg:x="20511" fg:w="375"/><text x="16.8654%" y="431.50"></text></g><g><title>alloc::alloc::alloc (375 samples, 0.30%)</title><rect x="16.6154%" y="405" width="0.3038%" height="15" fill="rgb(228,1,10)" fg:x="20511" fg:w="375"/><text x="16.8654%" y="415.50"></text></g><g><title>__rg_alloc (375 samples, 0.30%)</title><rect x="16.6154%" y="389" width="0.3038%" height="15" fill="rgb(213,116,27)" fg:x="20511" fg:w="375"/><text x="16.8654%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (375 samples, 0.30%)</title><rect x="16.6154%" y="373" width="0.3038%" height="15" fill="rgb(241,95,50)" fg:x="20511" fg:w="375"/><text x="16.8654%" y="383.50"></text></g><g><title>sn_rust_alloc (367 samples, 0.30%)</title><rect x="16.6218%" y="357" width="0.2973%" height="15" fill="rgb(238,48,32)" fg:x="20519" fg:w="367"/><text x="16.8718%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (427 samples, 0.35%)</title><rect x="16.5862%" y="549" width="0.3459%" height="15" fill="rgb(235,113,49)" fg:x="20475" fg:w="427"/><text x="16.8362%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (418 samples, 0.34%)</title><rect x="16.5935%" y="533" width="0.3386%" height="15" fill="rgb(205,127,43)" fg:x="20484" fg:w="418"/><text x="16.8435%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (418 samples, 0.34%)</title><rect x="16.5935%" y="517" width="0.3386%" height="15" fill="rgb(250,162,2)" fg:x="20484" fg:w="418"/><text x="16.8435%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="16.9191%" y="501" width="0.0130%" height="15" fill="rgb(220,13,41)" fg:x="20886" fg:w="16"/><text x="17.1691%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="16.9191%" y="485" width="0.0130%" height="15" fill="rgb(249,221,25)" fg:x="20886" fg:w="16"/><text x="17.1691%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (445 samples, 0.36%)</title><rect x="16.5862%" y="565" width="0.3605%" height="15" fill="rgb(215,208,19)" fg:x="20475" fg:w="445"/><text x="16.8362%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (18 samples, 0.01%)</title><rect x="16.9321%" y="549" width="0.0146%" height="15" fill="rgb(236,175,2)" fg:x="20902" fg:w="18"/><text x="17.1821%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (742 samples, 0.60%)</title><rect x="16.5659%" y="629" width="0.6011%" height="15" fill="rgb(241,52,2)" fg:x="20450" fg:w="742"/><text x="16.8159%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (734 samples, 0.59%)</title><rect x="16.5724%" y="613" width="0.5946%" height="15" fill="rgb(248,140,14)" fg:x="20458" fg:w="734"/><text x="16.8224%" y="623.50"></text></g><g><title>value_trait::Builder::object (725 samples, 0.59%)</title><rect x="16.5797%" y="597" width="0.5873%" height="15" fill="rgb(253,22,42)" fg:x="20467" fg:w="725"/><text x="16.8297%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (717 samples, 0.58%)</title><rect x="16.5862%" y="581" width="0.5808%" height="15" fill="rgb(234,61,47)" fg:x="20475" fg:w="717"/><text x="16.8362%" y="591.50"></text></g><g><title>tremor_value::value::Value::Object (272 samples, 0.22%)</title><rect x="16.9467%" y="565" width="0.2203%" height="15" fill="rgb(208,226,15)" fg:x="20920" fg:w="272"/><text x="17.1967%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="17.1670%" y="629" width="0.0105%" height="15" fill="rgb(217,221,4)" fg:x="21192" fg:w="13"/><text x="17.4170%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (13 samples, 0.01%)</title><rect x="17.1776%" y="629" width="0.0105%" height="15" fill="rgb(212,174,34)" fg:x="21205" fg:w="13"/><text x="17.4276%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="17.1881%" y="629" width="0.0113%" height="15" fill="rgb(253,83,4)" fg:x="21218" fg:w="14"/><text x="17.4381%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (14 samples, 0.01%)</title><rect x="17.2164%" y="565" width="0.0113%" height="15" fill="rgb(250,195,49)" fg:x="21253" fg:w="14"/><text x="17.4664%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (14 samples, 0.01%)</title><rect x="17.2164%" y="549" width="0.0113%" height="15" fill="rgb(241,192,25)" fg:x="21253" fg:w="14"/><text x="17.4664%" y="559.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="17.2172%" y="533" width="0.0105%" height="15" fill="rgb(208,124,10)" fg:x="21254" fg:w="13"/><text x="17.4672%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="17.2172%" y="517" width="0.0105%" height="15" fill="rgb(222,33,0)" fg:x="21254" fg:w="13"/><text x="17.4672%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="17.2172%" y="501" width="0.0105%" height="15" fill="rgb(234,209,28)" fg:x="21254" fg:w="13"/><text x="17.4672%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="17.2172%" y="485" width="0.0105%" height="15" fill="rgb(224,11,23)" fg:x="21254" fg:w="13"/><text x="17.4672%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (141 samples, 0.11%)</title><rect x="17.1994%" y="613" width="0.1142%" height="15" fill="rgb(232,99,1)" fg:x="21232" fg:w="141"/><text x="17.4494%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (141 samples, 0.11%)</title><rect x="17.1994%" y="597" width="0.1142%" height="15" fill="rgb(237,95,45)" fg:x="21232" fg:w="141"/><text x="17.4494%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (141 samples, 0.11%)</title><rect x="17.1994%" y="581" width="0.1142%" height="15" fill="rgb(208,109,11)" fg:x="21232" fg:w="141"/><text x="17.4494%" y="591.50"></text></g><g><title>sn_rust_dealloc (106 samples, 0.09%)</title><rect x="17.2278%" y="565" width="0.0859%" height="15" fill="rgb(216,190,48)" fg:x="21267" fg:w="106"/><text x="17.4778%" y="575.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.04%)</title><rect x="17.3493%" y="437" width="0.0389%" height="15" fill="rgb(251,171,36)" fg:x="21417" fg:w="48"/><text x="17.5993%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.06%)</title><rect x="17.3250%" y="517" width="0.0640%" height="15" fill="rgb(230,62,22)" fg:x="21387" fg:w="79"/><text x="17.5750%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (79 samples, 0.06%)</title><rect x="17.3250%" y="501" width="0.0640%" height="15" fill="rgb(225,114,35)" fg:x="21387" fg:w="79"/><text x="17.5750%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (63 samples, 0.05%)</title><rect x="17.3379%" y="485" width="0.0510%" height="15" fill="rgb(215,118,42)" fg:x="21403" fg:w="63"/><text x="17.5879%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (63 samples, 0.05%)</title><rect x="17.3379%" y="469" width="0.0510%" height="15" fill="rgb(243,119,21)" fg:x="21403" fg:w="63"/><text x="17.5879%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (63 samples, 0.05%)</title><rect x="17.3379%" y="453" width="0.0510%" height="15" fill="rgb(252,177,53)" fg:x="21403" fg:w="63"/><text x="17.5879%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="17.3890%" y="485" width="0.0113%" height="15" fill="rgb(237,209,29)" fg:x="21466" fg:w="14"/><text x="17.6390%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="17.3890%" y="469" width="0.0113%" height="15" fill="rgb(212,65,23)" fg:x="21466" fg:w="14"/><text x="17.6390%" y="479.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="17.3890%" y="453" width="0.0113%" height="15" fill="rgb(230,222,46)" fg:x="21466" fg:w="14"/><text x="17.6390%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="17.3890%" y="437" width="0.0113%" height="15" fill="rgb(215,135,32)" fg:x="21466" fg:w="14"/><text x="17.6390%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (112 samples, 0.09%)</title><rect x="17.3145%" y="581" width="0.0907%" height="15" fill="rgb(246,101,22)" fg:x="21374" fg:w="112"/><text x="17.5645%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (112 samples, 0.09%)</title><rect x="17.3145%" y="565" width="0.0907%" height="15" fill="rgb(206,107,13)" fg:x="21374" fg:w="112"/><text x="17.5645%" y="575.50"></text></g><g><title>core::mem::drop (99 samples, 0.08%)</title><rect x="17.3250%" y="549" width="0.0802%" height="15" fill="rgb(250,100,44)" fg:x="21387" fg:w="99"/><text x="17.5750%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (99 samples, 0.08%)</title><rect x="17.3250%" y="533" width="0.0802%" height="15" fill="rgb(231,147,38)" fg:x="21387" fg:w="99"/><text x="17.5750%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (20 samples, 0.02%)</title><rect x="17.3890%" y="517" width="0.0162%" height="15" fill="rgb(229,8,40)" fg:x="21466" fg:w="20"/><text x="17.6390%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="17.3890%" y="501" width="0.0162%" height="15" fill="rgb(221,135,30)" fg:x="21466" fg:w="20"/><text x="17.6390%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (285 samples, 0.23%)</title><rect x="17.1994%" y="629" width="0.2309%" height="15" fill="rgb(249,193,18)" fg:x="21232" fg:w="285"/><text x="17.4494%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (144 samples, 0.12%)</title><rect x="17.3136%" y="613" width="0.1167%" height="15" fill="rgb(209,133,39)" fg:x="21373" fg:w="144"/><text x="17.5636%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (144 samples, 0.12%)</title><rect x="17.3136%" y="597" width="0.1167%" height="15" fill="rgb(232,100,14)" fg:x="21373" fg:w="144"/><text x="17.5636%" y="607.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="17.4052%" y="581" width="0.0251%" height="15" fill="rgb(224,185,1)" fg:x="21486" fg:w="31"/><text x="17.6552%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (26 samples, 0.02%)</title><rect x="17.4554%" y="565" width="0.0211%" height="15" fill="rgb(223,139,8)" fg:x="21548" fg:w="26"/><text x="17.7054%" y="575.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.04%)</title><rect x="17.4765%" y="565" width="0.0429%" height="15" fill="rgb(232,213,38)" fg:x="21574" fg:w="53"/><text x="17.7265%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (122 samples, 0.10%)</title><rect x="17.4303%" y="629" width="0.0988%" height="15" fill="rgb(207,94,22)" fg:x="21517" fg:w="122"/><text x="17.6803%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (109 samples, 0.09%)</title><rect x="17.4408%" y="613" width="0.0883%" height="15" fill="rgb(219,183,54)" fg:x="21530" fg:w="109"/><text x="17.6908%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (109 samples, 0.09%)</title><rect x="17.4408%" y="597" width="0.0883%" height="15" fill="rgb(216,185,54)" fg:x="21530" fg:w="109"/><text x="17.6908%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (109 samples, 0.09%)</title><rect x="17.4408%" y="581" width="0.0883%" height="15" fill="rgb(254,217,39)" fg:x="21530" fg:w="109"/><text x="17.6908%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (20 samples, 0.02%)</title><rect x="17.5445%" y="613" width="0.0162%" height="15" fill="rgb(240,178,23)" fg:x="21658" fg:w="20"/><text x="17.7945%" y="623.50"></text></g><g><title>core::time::Duration::as_nanos (16 samples, 0.01%)</title><rect x="17.5607%" y="613" width="0.0130%" height="15" fill="rgb(218,11,47)" fg:x="21678" fg:w="16"/><text x="17.8107%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (116 samples, 0.09%)</title><rect x="17.5737%" y="597" width="0.0940%" height="15" fill="rgb(218,51,51)" fg:x="21694" fg:w="116"/><text x="17.8237%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (36 samples, 0.03%)</title><rect x="17.7065%" y="565" width="0.0292%" height="15" fill="rgb(238,126,27)" fg:x="21858" fg:w="36"/><text x="17.9565%" y="575.50"></text></g><g><title>core::cmp::PartialOrd::ge (36 samples, 0.03%)</title><rect x="17.7065%" y="549" width="0.0292%" height="15" fill="rgb(249,202,22)" fg:x="21858" fg:w="36"/><text x="17.9565%" y="559.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (36 samples, 0.03%)</title><rect x="17.7065%" y="533" width="0.0292%" height="15" fill="rgb(254,195,49)" fg:x="21858" fg:w="36"/><text x="17.9565%" y="543.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (36 samples, 0.03%)</title><rect x="17.7065%" y="517" width="0.0292%" height="15" fill="rgb(208,123,14)" fg:x="21858" fg:w="36"/><text x="17.9565%" y="527.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (36 samples, 0.03%)</title><rect x="17.7065%" y="501" width="0.0292%" height="15" fill="rgb(224,200,8)" fg:x="21858" fg:w="36"/><text x="17.9565%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="17.7235%" y="485" width="0.0122%" height="15" fill="rgb(217,61,36)" fg:x="21879" fg:w="15"/><text x="17.9735%" y="495.50"></text></g><g><title>std::time::SystemTime::duration_since (223 samples, 0.18%)</title><rect x="17.5737%" y="613" width="0.1806%" height="15" fill="rgb(206,35,45)" fg:x="21694" fg:w="223"/><text x="17.8237%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (107 samples, 0.09%)</title><rect x="17.6676%" y="597" width="0.0867%" height="15" fill="rgb(217,65,33)" fg:x="21810" fg:w="107"/><text x="17.9176%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (107 samples, 0.09%)</title><rect x="17.6676%" y="581" width="0.0867%" height="15" fill="rgb(222,158,48)" fg:x="21810" fg:w="107"/><text x="17.9176%" y="591.50"></text></g><g><title>core::time::Duration::new (23 samples, 0.02%)</title><rect x="17.7357%" y="565" width="0.0186%" height="15" fill="rgb(254,2,54)" fg:x="21894" fg:w="23"/><text x="17.9857%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,471 samples, 2.00%)</title><rect x="16.1196%" y="661" width="2.0017%" height="15" fill="rgb(250,143,38)" fg:x="19899" fg:w="2471"/><text x="16.3696%" y="671.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,227 samples, 1.80%)</title><rect x="16.3173%" y="645" width="1.8040%" height="15" fill="rgb(248,25,0)" fg:x="20143" fg:w="2227"/><text x="16.5673%" y="655.50">t..</text></g><g><title>tremor_common::time::nanotime (731 samples, 0.59%)</title><rect x="17.5291%" y="629" width="0.5922%" height="15" fill="rgb(206,152,27)" fg:x="21639" fg:w="731"/><text x="17.7791%" y="639.50"></text></g><g><title>std::time::SystemTime::now (453 samples, 0.37%)</title><rect x="17.7543%" y="613" width="0.3670%" height="15" fill="rgb(240,77,30)" fg:x="21917" fg:w="453"/><text x="18.0043%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (453 samples, 0.37%)</title><rect x="17.7543%" y="597" width="0.3670%" height="15" fill="rgb(231,5,3)" fg:x="21917" fg:w="453"/><text x="18.0043%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::now (453 samples, 0.37%)</title><rect x="17.7543%" y="581" width="0.3670%" height="15" fill="rgb(207,226,32)" fg:x="21917" fg:w="453"/><text x="18.0043%" y="591.50"></text></g><g><title>__clock_gettime (358 samples, 0.29%)</title><rect x="17.8313%" y="565" width="0.2900%" height="15" fill="rgb(222,207,47)" fg:x="22012" fg:w="358"/><text x="18.0813%" y="575.50"></text></g><g><title>__vdso_clock_gettime (340 samples, 0.28%)</title><rect x="17.8459%" y="549" width="0.2754%" height="15" fill="rgb(229,115,45)" fg:x="22030" fg:w="340"/><text x="18.0959%" y="559.50"></text></g><g><title>[[vdso]] (302 samples, 0.24%)</title><rect x="17.8766%" y="533" width="0.2446%" height="15" fill="rgb(224,191,6)" fg:x="22068" fg:w="302"/><text x="18.1266%" y="543.50"></text></g><g><title>[libc-2.31.so] (438 samples, 0.35%)</title><rect x="18.1213%" y="661" width="0.3548%" height="15" fill="rgb(230,227,24)" fg:x="22370" fg:w="438"/><text x="18.3713%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="18.4793%" y="661" width="0.0146%" height="15" fill="rgb(228,80,19)" fg:x="22812" fg:w="18"/><text x="18.7293%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (18 samples, 0.01%)</title><rect x="18.4793%" y="645" width="0.0146%" height="15" fill="rgb(247,229,0)" fg:x="22812" fg:w="18"/><text x="18.7293%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,755 samples, 3.04%)</title><rect x="15.5428%" y="693" width="3.0418%" height="15" fill="rgb(237,194,15)" fg:x="19187" fg:w="3755"/><text x="15.7928%" y="703.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,755 samples, 3.04%)</title><rect x="15.5428%" y="677" width="3.0418%" height="15" fill="rgb(219,203,20)" fg:x="19187" fg:w="3755"/><text x="15.7928%" y="687.50">tre..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (112 samples, 0.09%)</title><rect x="18.4939%" y="661" width="0.0907%" height="15" fill="rgb(234,128,8)" fg:x="22830" fg:w="112"/><text x="18.7439%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (366 samples, 0.30%)</title><rect x="18.5927%" y="533" width="0.2965%" height="15" fill="rgb(248,202,8)" fg:x="22952" fg:w="366"/><text x="18.8427%" y="543.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (366 samples, 0.30%)</title><rect x="18.5927%" y="517" width="0.2965%" height="15" fill="rgb(206,104,37)" fg:x="22952" fg:w="366"/><text x="18.8427%" y="527.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (366 samples, 0.30%)</title><rect x="18.5927%" y="501" width="0.2965%" height="15" fill="rgb(223,8,27)" fg:x="22952" fg:w="366"/><text x="18.8427%" y="511.50"></text></g><g><title>[libc-2.31.so] (344 samples, 0.28%)</title><rect x="18.6106%" y="485" width="0.2787%" height="15" fill="rgb(216,217,28)" fg:x="22974" fg:w="344"/><text x="18.8606%" y="495.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (29 samples, 0.02%)</title><rect x="18.9638%" y="485" width="0.0235%" height="15" fill="rgb(249,199,1)" fg:x="23410" fg:w="29"/><text x="19.2138%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (29 samples, 0.02%)</title><rect x="18.9638%" y="469" width="0.0235%" height="15" fill="rgb(240,85,17)" fg:x="23410" fg:w="29"/><text x="19.2138%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (29 samples, 0.02%)</title><rect x="18.9638%" y="453" width="0.0235%" height="15" fill="rgb(206,108,45)" fg:x="23410" fg:w="29"/><text x="19.2138%" y="463.50"></text></g><g><title>async_ffi::FfiContext::with_context (28 samples, 0.02%)</title><rect x="18.9646%" y="437" width="0.0227%" height="15" fill="rgb(245,210,41)" fg:x="23411" fg:w="28"/><text x="19.2146%" y="447.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.50%)</title><rect x="18.5846%" y="613" width="0.5014%" height="15" fill="rgb(206,13,37)" fg:x="22942" fg:w="619"/><text x="18.8346%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.50%)</title><rect x="18.5846%" y="597" width="0.5014%" height="15" fill="rgb(250,61,18)" fg:x="22942" fg:w="619"/><text x="18.8346%" y="607.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (619 samples, 0.50%)</title><rect x="18.5846%" y="581" width="0.5014%" height="15" fill="rgb(235,172,48)" fg:x="22942" fg:w="619"/><text x="18.8346%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (619 samples, 0.50%)</title><rect x="18.5846%" y="565" width="0.5014%" height="15" fill="rgb(249,201,17)" fg:x="22942" fg:w="619"/><text x="18.8346%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (619 samples, 0.50%)</title><rect x="18.5846%" y="549" width="0.5014%" height="15" fill="rgb(219,208,6)" fg:x="22942" fg:w="619"/><text x="18.8346%" y="559.50"></text></g><g><title>std::panic::catch_unwind (243 samples, 0.20%)</title><rect x="18.8892%" y="533" width="0.1968%" height="15" fill="rgb(248,31,23)" fg:x="23318" fg:w="243"/><text x="19.1392%" y="543.50"></text></g><g><title>std::panicking::try (243 samples, 0.20%)</title><rect x="18.8892%" y="517" width="0.1968%" height="15" fill="rgb(245,15,42)" fg:x="23318" fg:w="243"/><text x="19.1392%" y="527.50"></text></g><g><title>std::panicking::try::do_call (243 samples, 0.20%)</title><rect x="18.8892%" y="501" width="0.1968%" height="15" fill="rgb(222,217,39)" fg:x="23318" fg:w="243"/><text x="19.1392%" y="511.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.10%)</title><rect x="18.9872%" y="485" width="0.0988%" height="15" fill="rgb(210,219,27)" fg:x="23439" fg:w="122"/><text x="19.2372%" y="495.50"></text></g><g><title>async_global_executor::reactor::block_on (4,494 samples, 3.64%)</title><rect x="15.5420%" y="1045" width="3.6405%" height="15" fill="rgb(252,166,36)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="1055.50">asyn..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (4,494 samples, 3.64%)</title><rect x="15.5420%" y="1029" width="3.6405%" height="15" fill="rgb(245,132,34)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="1039.50">asyn..</text></g><g><title>async_io::driver::block_on (4,494 samples, 3.64%)</title><rect x="15.5420%" y="1013" width="3.6405%" height="15" fill="rgb(236,54,3)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="1023.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="997" width="3.6405%" height="15" fill="rgb(241,173,43)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="1007.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="981" width="3.6405%" height="15" fill="rgb(215,190,9)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="991.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}} (4,494 samples, 3.64%)</title><rect x="15.5420%" y="965" width="3.6405%" height="15" fill="rgb(242,101,16)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="975.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="949" width="3.6405%" height="15" fill="rgb(223,190,21)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="959.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="933" width="3.6405%" height="15" fill="rgb(215,228,25)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="943.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (4,494 samples, 3.64%)</title><rect x="15.5420%" y="917" width="3.6405%" height="15" fill="rgb(225,36,22)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="927.50">asyn..</text></g><g><title>async_task::runnable::Runnable::run (4,494 samples, 3.64%)</title><rect x="15.5420%" y="901" width="3.6405%" height="15" fill="rgb(251,106,46)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="911.50">asyn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (4,494 samples, 3.64%)</title><rect x="15.5420%" y="885" width="3.6405%" height="15" fill="rgb(208,90,1)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="895.50">asyn..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="869" width="3.6405%" height="15" fill="rgb(243,10,4)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="879.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="853" width="3.6405%" height="15" fill="rgb(212,137,27)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="863.50">&lt;cor..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (4,494 samples, 3.64%)</title><rect x="15.5420%" y="837" width="3.6405%" height="15" fill="rgb(231,220,49)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="847.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="821" width="3.6405%" height="15" fill="rgb(237,96,20)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="831.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (4,494 samples, 3.64%)</title><rect x="15.5420%" y="805" width="3.6405%" height="15" fill="rgb(239,229,30)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="815.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,494 samples, 3.64%)</title><rect x="15.5420%" y="789" width="3.6405%" height="15" fill="rgb(219,65,33)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="799.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,494 samples, 3.64%)</title><rect x="15.5420%" y="773" width="3.6405%" height="15" fill="rgb(243,134,7)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="783.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,494 samples, 3.64%)</title><rect x="15.5420%" y="757" width="3.6405%" height="15" fill="rgb(216,177,54)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="767.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,494 samples, 3.64%)</title><rect x="15.5420%" y="741" width="3.6405%" height="15" fill="rgb(211,160,20)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="751.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,494 samples, 3.64%)</title><rect x="15.5420%" y="725" width="3.6405%" height="15" fill="rgb(239,85,39)" fg:x="19186" fg:w="4494"/><text x="15.7920%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,493 samples, 3.64%)</title><rect x="15.5428%" y="709" width="3.6396%" height="15" fill="rgb(232,125,22)" fg:x="19187" fg:w="4493"/><text x="15.7928%" y="719.50">trem..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (738 samples, 0.60%)</title><rect x="18.5846%" y="693" width="0.5978%" height="15" fill="rgb(244,57,34)" fg:x="22942" fg:w="738"/><text x="18.8346%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (738 samples, 0.60%)</title><rect x="18.5846%" y="677" width="0.5978%" height="15" fill="rgb(214,203,32)" fg:x="22942" fg:w="738"/><text x="18.8346%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (738 samples, 0.60%)</title><rect x="18.5846%" y="661" width="0.5978%" height="15" fill="rgb(207,58,43)" fg:x="22942" fg:w="738"/><text x="18.8346%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (738 samples, 0.60%)</title><rect x="18.5846%" y="645" width="0.5978%" height="15" fill="rgb(215,193,15)" fg:x="22942" fg:w="738"/><text x="18.8346%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (738 samples, 0.60%)</title><rect x="18.5846%" y="629" width="0.5978%" height="15" fill="rgb(232,15,44)" fg:x="22942" fg:w="738"/><text x="18.8346%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (119 samples, 0.10%)</title><rect x="19.0861%" y="613" width="0.0964%" height="15" fill="rgb(212,3,48)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (119 samples, 0.10%)</title><rect x="19.0861%" y="597" width="0.0964%" height="15" fill="rgb(218,128,7)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (119 samples, 0.10%)</title><rect x="19.0861%" y="581" width="0.0964%" height="15" fill="rgb(226,216,39)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (119 samples, 0.10%)</title><rect x="19.0861%" y="565" width="0.0964%" height="15" fill="rgb(243,47,51)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (119 samples, 0.10%)</title><rect x="19.0861%" y="549" width="0.0964%" height="15" fill="rgb(241,183,40)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (119 samples, 0.10%)</title><rect x="19.0861%" y="533" width="0.0964%" height="15" fill="rgb(231,217,32)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (119 samples, 0.10%)</title><rect x="19.0861%" y="517" width="0.0964%" height="15" fill="rgb(229,61,38)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (119 samples, 0.10%)</title><rect x="19.0861%" y="501" width="0.0964%" height="15" fill="rgb(225,210,5)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (119 samples, 0.10%)</title><rect x="19.0861%" y="485" width="0.0964%" height="15" fill="rgb(231,79,45)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (119 samples, 0.10%)</title><rect x="19.0861%" y="469" width="0.0964%" height="15" fill="rgb(224,100,7)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="479.50"></text></g><g><title>alloc::alloc::alloc (119 samples, 0.10%)</title><rect x="19.0861%" y="453" width="0.0964%" height="15" fill="rgb(241,198,18)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="463.50"></text></g><g><title>__rg_alloc (119 samples, 0.10%)</title><rect x="19.0861%" y="437" width="0.0964%" height="15" fill="rgb(252,97,53)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (119 samples, 0.10%)</title><rect x="19.0861%" y="421" width="0.0964%" height="15" fill="rgb(220,88,7)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="431.50"></text></g><g><title>sn_rust_alloc (119 samples, 0.10%)</title><rect x="19.0861%" y="405" width="0.0964%" height="15" fill="rgb(213,176,14)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (119 samples, 0.10%)</title><rect x="19.0861%" y="389" width="0.0964%" height="15" fill="rgb(246,73,7)" fg:x="23561" fg:w="119"/><text x="19.3361%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (175 samples, 0.14%)</title><rect x="19.2133%" y="485" width="0.1418%" height="15" fill="rgb(245,64,36)" fg:x="23718" fg:w="175"/><text x="19.4633%" y="495.50"></text></g><g><title>[libc-2.31.so] (200 samples, 0.16%)</title><rect x="19.3575%" y="469" width="0.1620%" height="15" fill="rgb(245,80,10)" fg:x="23896" fg:w="200"/><text x="19.6075%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (394 samples, 0.32%)</title><rect x="19.3550%" y="485" width="0.3192%" height="15" fill="rgb(232,107,50)" fg:x="23893" fg:w="394"/><text x="19.6050%" y="495.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (191 samples, 0.15%)</title><rect x="19.5195%" y="469" width="0.1547%" height="15" fill="rgb(253,3,0)" fg:x="24096" fg:w="191"/><text x="19.7695%" y="479.50"></text></g><g><title>[libc-2.31.so] (184 samples, 0.15%)</title><rect x="19.5251%" y="453" width="0.1491%" height="15" fill="rgb(212,99,53)" fg:x="24103" fg:w="184"/><text x="19.7751%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (140 samples, 0.11%)</title><rect x="19.6790%" y="453" width="0.1134%" height="15" fill="rgb(249,111,54)" fg:x="24293" fg:w="140"/><text x="19.9290%" y="463.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (136 samples, 0.11%)</title><rect x="19.6823%" y="437" width="0.1102%" height="15" fill="rgb(249,55,30)" fg:x="24297" fg:w="136"/><text x="19.9323%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (136 samples, 0.11%)</title><rect x="19.6823%" y="421" width="0.1102%" height="15" fill="rgb(237,47,42)" fg:x="24297" fg:w="136"/><text x="19.9323%" y="431.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.11%)</title><rect x="19.6872%" y="405" width="0.1053%" height="15" fill="rgb(211,20,18)" fg:x="24303" fg:w="130"/><text x="19.9372%" y="415.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (17 samples, 0.01%)</title><rect x="19.7925%" y="453" width="0.0138%" height="15" fill="rgb(231,203,46)" fg:x="24433" fg:w="17"/><text x="20.0425%" y="463.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (344 samples, 0.28%)</title><rect x="19.6742%" y="485" width="0.2787%" height="15" fill="rgb(237,142,3)" fg:x="24287" fg:w="344"/><text x="19.9242%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (344 samples, 0.28%)</title><rect x="19.6742%" y="469" width="0.2787%" height="15" fill="rgb(241,107,1)" fg:x="24287" fg:w="344"/><text x="19.9242%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (181 samples, 0.15%)</title><rect x="19.8062%" y="453" width="0.1466%" height="15" fill="rgb(229,83,13)" fg:x="24450" fg:w="181"/><text x="20.0562%" y="463.50"></text></g><g><title>[libc-2.31.so] (181 samples, 0.15%)</title><rect x="19.8062%" y="437" width="0.1466%" height="15" fill="rgb(241,91,40)" fg:x="24450" fg:w="181"/><text x="20.0562%" y="447.50"></text></g><g><title>[libc-2.31.so] (262 samples, 0.21%)</title><rect x="19.9529%" y="485" width="0.2122%" height="15" fill="rgb(225,3,45)" fg:x="24631" fg:w="262"/><text x="20.2029%" y="495.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (130 samples, 0.11%)</title><rect x="20.1651%" y="485" width="0.1053%" height="15" fill="rgb(244,223,14)" fg:x="24893" fg:w="130"/><text x="20.4151%" y="495.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.10%)</title><rect x="20.1748%" y="469" width="0.0956%" height="15" fill="rgb(224,124,37)" fg:x="24905" fg:w="118"/><text x="20.4248%" y="479.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.02%)</title><rect x="20.2801%" y="437" width="0.0243%" height="15" fill="rgb(251,171,30)" fg:x="25035" fg:w="30"/><text x="20.5301%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="20.2704%" y="485" width="0.0356%" height="15" fill="rgb(236,46,54)" fg:x="25023" fg:w="44"/><text x="20.5204%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="20.2704%" y="469" width="0.0356%" height="15" fill="rgb(245,213,5)" fg:x="25023" fg:w="44"/><text x="20.5204%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="20.2704%" y="453" width="0.0356%" height="15" fill="rgb(230,144,27)" fg:x="25023" fg:w="44"/><text x="20.5204%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (87 samples, 0.07%)</title><rect x="20.3141%" y="469" width="0.0705%" height="15" fill="rgb(220,86,6)" fg:x="25077" fg:w="87"/><text x="20.5641%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (61 samples, 0.05%)</title><rect x="20.3352%" y="453" width="0.0494%" height="15" fill="rgb(240,20,13)" fg:x="25103" fg:w="61"/><text x="20.5852%" y="463.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (61 samples, 0.05%)</title><rect x="20.3352%" y="437" width="0.0494%" height="15" fill="rgb(217,89,34)" fg:x="25103" fg:w="61"/><text x="20.5852%" y="447.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (61 samples, 0.05%)</title><rect x="20.3352%" y="421" width="0.0494%" height="15" fill="rgb(229,13,5)" fg:x="25103" fg:w="61"/><text x="20.5852%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (61 samples, 0.05%)</title><rect x="20.3352%" y="405" width="0.0494%" height="15" fill="rgb(244,67,35)" fg:x="25103" fg:w="61"/><text x="20.5852%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (57 samples, 0.05%)</title><rect x="20.3384%" y="389" width="0.0462%" height="15" fill="rgb(221,40,2)" fg:x="25107" fg:w="57"/><text x="20.5884%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (56 samples, 0.05%)</title><rect x="20.3393%" y="373" width="0.0454%" height="15" fill="rgb(237,157,21)" fg:x="25108" fg:w="56"/><text x="20.5893%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="20.3393%" y="357" width="0.0454%" height="15" fill="rgb(222,94,11)" fg:x="25108" fg:w="56"/><text x="20.5893%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="20.3393%" y="341" width="0.0454%" height="15" fill="rgb(249,113,6)" fg:x="25108" fg:w="56"/><text x="20.5893%" y="351.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.04%)</title><rect x="20.3401%" y="325" width="0.0446%" height="15" fill="rgb(238,137,36)" fg:x="25109" fg:w="55"/><text x="20.5901%" y="335.50"></text></g><g><title>__rg_alloc (55 samples, 0.04%)</title><rect x="20.3401%" y="309" width="0.0446%" height="15" fill="rgb(210,102,26)" fg:x="25109" fg:w="55"/><text x="20.5901%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.04%)</title><rect x="20.3401%" y="293" width="0.0446%" height="15" fill="rgb(218,30,30)" fg:x="25109" fg:w="55"/><text x="20.5901%" y="303.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.04%)</title><rect x="20.3401%" y="277" width="0.0446%" height="15" fill="rgb(214,67,26)" fg:x="25109" fg:w="55"/><text x="20.5901%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,487 samples, 1.20%)</title><rect x="19.1881%" y="581" width="1.2046%" height="15" fill="rgb(251,9,53)" fg:x="23687" fg:w="1487"/><text x="19.4381%" y="591.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,487 samples, 1.20%)</title><rect x="19.1881%" y="565" width="1.2046%" height="15" fill="rgb(228,204,25)" fg:x="23687" fg:w="1487"/><text x="19.4381%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,487 samples, 1.20%)</title><rect x="19.1881%" y="549" width="1.2046%" height="15" fill="rgb(207,153,8)" fg:x="23687" fg:w="1487"/><text x="19.4381%" y="559.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,487 samples, 1.20%)</title><rect x="19.1881%" y="533" width="1.2046%" height="15" fill="rgb(242,9,16)" fg:x="23687" fg:w="1487"/><text x="19.4381%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,487 samples, 1.20%)</title><rect x="19.1881%" y="517" width="1.2046%" height="15" fill="rgb(217,211,10)" fg:x="23687" fg:w="1487"/><text x="19.4381%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,477 samples, 1.20%)</title><rect x="19.1962%" y="501" width="1.1965%" height="15" fill="rgb(219,228,52)" fg:x="23697" fg:w="1477"/><text x="19.4462%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (107 samples, 0.09%)</title><rect x="20.3060%" y="485" width="0.0867%" height="15" fill="rgb(231,92,29)" fg:x="25067" fg:w="107"/><text x="20.5560%" y="495.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,507 samples, 1.22%)</title><rect x="19.1825%" y="1045" width="1.2208%" height="15" fill="rgb(232,8,23)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (1,507 samples, 1.22%)</title><rect x="19.1825%" y="1029" width="1.2208%" height="15" fill="rgb(216,211,34)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="1039.50"></text></g><g><title>std::panicking::try (1,507 samples, 1.22%)</title><rect x="19.1825%" y="1013" width="1.2208%" height="15" fill="rgb(236,151,0)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (1,507 samples, 1.22%)</title><rect x="19.1825%" y="997" width="1.2208%" height="15" fill="rgb(209,168,3)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="1007.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="981" width="1.2208%" height="15" fill="rgb(208,129,28)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,507 samples, 1.22%)</title><rect x="19.1825%" y="965" width="1.2208%" height="15" fill="rgb(229,78,22)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,507 samples, 1.22%)</title><rect x="19.1825%" y="949" width="1.2208%" height="15" fill="rgb(228,187,13)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="933" width="1.2208%" height="15" fill="rgb(240,119,24)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on (1,507 samples, 1.22%)</title><rect x="19.1825%" y="917" width="1.2208%" height="15" fill="rgb(209,194,42)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="927.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="901" width="1.2208%" height="15" fill="rgb(247,200,46)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="911.50"></text></g><g><title>async_io::driver::block_on (1,507 samples, 1.22%)</title><rect x="19.1825%" y="885" width="1.2208%" height="15" fill="rgb(218,76,16)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="895.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="869" width="1.2208%" height="15" fill="rgb(225,21,48)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="853" width="1.2208%" height="15" fill="rgb(239,223,50)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="837" width="1.2208%" height="15" fill="rgb(244,45,21)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="847.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="821" width="1.2208%" height="15" fill="rgb(232,33,43)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="805" width="1.2208%" height="15" fill="rgb(209,8,3)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="789" width="1.2208%" height="15" fill="rgb(214,25,53)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="799.50"></text></g><g><title>async_task::runnable::Runnable::run (1,507 samples, 1.22%)</title><rect x="19.1825%" y="773" width="1.2208%" height="15" fill="rgb(254,186,54)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,507 samples, 1.22%)</title><rect x="19.1825%" y="757" width="1.2208%" height="15" fill="rgb(208,174,49)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="741" width="1.2208%" height="15" fill="rgb(233,191,51)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="725" width="1.2208%" height="15" fill="rgb(222,134,10)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="709" width="1.2208%" height="15" fill="rgb(230,226,20)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="719.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="693" width="1.2208%" height="15" fill="rgb(251,111,25)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="703.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,507 samples, 1.22%)</title><rect x="19.1825%" y="677" width="1.2208%" height="15" fill="rgb(224,40,46)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,507 samples, 1.22%)</title><rect x="19.1825%" y="661" width="1.2208%" height="15" fill="rgb(236,108,47)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,507 samples, 1.22%)</title><rect x="19.1825%" y="645" width="1.2208%" height="15" fill="rgb(234,93,0)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="655.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="629" width="1.2208%" height="15" fill="rgb(224,213,32)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="639.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,507 samples, 1.22%)</title><rect x="19.1825%" y="613" width="1.2208%" height="15" fill="rgb(251,11,48)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.22%)</title><rect x="19.1825%" y="597" width="1.2208%" height="15" fill="rgb(236,173,5)" fg:x="23680" fg:w="1507"/><text x="19.4325%" y="607.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (13 samples, 0.01%)</title><rect x="20.3927%" y="581" width="0.0105%" height="15" fill="rgb(230,95,12)" fg:x="25174" fg:w="13"/><text x="20.6427%" y="591.50"></text></g><g><title>__rust_probestack (13 samples, 0.01%)</title><rect x="20.3927%" y="565" width="0.0105%" height="15" fill="rgb(232,209,1)" fg:x="25174" fg:w="13"/><text x="20.6427%" y="575.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (718 samples, 0.58%)</title><rect x="20.8609%" y="725" width="0.5816%" height="15" fill="rgb(232,6,1)" fg:x="25752" fg:w="718"/><text x="21.1109%" y="735.50"></text></g><g><title>[libc-2.31.so] (591 samples, 0.48%)</title><rect x="20.9638%" y="709" width="0.4788%" height="15" fill="rgb(210,224,50)" fg:x="25879" fg:w="591"/><text x="21.2138%" y="719.50"></text></g><g><title>[libc-2.31.so] (241 samples, 0.20%)</title><rect x="21.4920%" y="709" width="0.1952%" height="15" fill="rgb(228,127,35)" fg:x="26531" fg:w="241"/><text x="21.7420%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (933 samples, 0.76%)</title><rect x="21.9400%" y="693" width="0.7558%" height="15" fill="rgb(245,102,45)" fg:x="27084" fg:w="933"/><text x="22.1900%" y="703.50"></text></g><g><title>[libc-2.31.so] (266 samples, 0.22%)</title><rect x="22.7128%" y="677" width="0.2155%" height="15" fill="rgb(214,1,49)" fg:x="28038" fg:w="266"/><text x="22.9628%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (487 samples, 0.39%)</title><rect x="22.6958%" y="693" width="0.3945%" height="15" fill="rgb(226,163,40)" fg:x="28017" fg:w="487"/><text x="22.9458%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (200 samples, 0.16%)</title><rect x="22.9282%" y="677" width="0.1620%" height="15" fill="rgb(239,212,28)" fg:x="28304" fg:w="200"/><text x="23.1782%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (214 samples, 0.17%)</title><rect x="23.0903%" y="661" width="0.1734%" height="15" fill="rgb(220,20,13)" fg:x="28504" fg:w="214"/><text x="23.3403%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (204 samples, 0.17%)</title><rect x="23.0984%" y="645" width="0.1653%" height="15" fill="rgb(210,164,35)" fg:x="28514" fg:w="204"/><text x="23.3484%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (204 samples, 0.17%)</title><rect x="23.0984%" y="629" width="0.1653%" height="15" fill="rgb(248,109,41)" fg:x="28514" fg:w="204"/><text x="23.3484%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (54 samples, 0.04%)</title><rect x="23.3317%" y="613" width="0.0437%" height="15" fill="rgb(238,23,50)" fg:x="28802" fg:w="54"/><text x="23.5817%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (54 samples, 0.04%)</title><rect x="23.3317%" y="597" width="0.0437%" height="15" fill="rgb(211,48,49)" fg:x="28802" fg:w="54"/><text x="23.5817%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (54 samples, 0.04%)</title><rect x="23.3317%" y="581" width="0.0437%" height="15" fill="rgb(223,36,21)" fg:x="28802" fg:w="54"/><text x="23.5817%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,259 samples, 4.26%)</title><rect x="23.2741%" y="645" width="4.2602%" height="15" fill="rgb(207,123,46)" fg:x="28731" fg:w="5259"/><text x="23.5241%" y="655.50">&lt;asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (5,229 samples, 4.24%)</title><rect x="23.2984%" y="629" width="4.2359%" height="15" fill="rgb(240,218,32)" fg:x="28761" fg:w="5229"/><text x="23.5484%" y="639.50">async..</text></g><g><title>std::panic::catch_unwind (5,134 samples, 4.16%)</title><rect x="23.3754%" y="613" width="4.1589%" height="15" fill="rgb(252,5,43)" fg:x="28856" fg:w="5134"/><text x="23.6254%" y="623.50">std::..</text></g><g><title>std::panicking::try (5,134 samples, 4.16%)</title><rect x="23.3754%" y="597" width="4.1589%" height="15" fill="rgb(252,84,19)" fg:x="28856" fg:w="5134"/><text x="23.6254%" y="607.50">std::..</text></g><g><title>std::panicking::try::do_call (5,134 samples, 4.16%)</title><rect x="23.3754%" y="581" width="4.1589%" height="15" fill="rgb(243,152,39)" fg:x="28856" fg:w="5134"/><text x="23.6254%" y="591.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (16 samples, 0.01%)</title><rect x="27.5213%" y="565" width="0.0130%" height="15" fill="rgb(234,160,15)" fg:x="33974" fg:w="16"/><text x="27.7713%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (16 samples, 0.01%)</title><rect x="27.5213%" y="549" width="0.0130%" height="15" fill="rgb(237,34,20)" fg:x="33974" fg:w="16"/><text x="27.7713%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (16 samples, 0.01%)</title><rect x="27.5213%" y="533" width="0.0130%" height="15" fill="rgb(229,97,13)" fg:x="33974" fg:w="16"/><text x="27.7713%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (16 samples, 0.01%)</title><rect x="27.5213%" y="517" width="0.0130%" height="15" fill="rgb(234,71,50)" fg:x="33974" fg:w="16"/><text x="27.7713%" y="527.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (5,286 samples, 4.28%)</title><rect x="23.2636%" y="661" width="4.2820%" height="15" fill="rgb(253,155,4)" fg:x="28718" fg:w="5286"/><text x="23.5136%" y="671.50">&lt;core..</text></g><g><title>core::task::wake::Context::waker (14 samples, 0.01%)</title><rect x="27.5343%" y="645" width="0.0113%" height="15" fill="rgb(222,185,37)" fg:x="33990" fg:w="14"/><text x="27.7843%" y="655.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,691 samples, 4.61%)</title><rect x="23.0903%" y="693" width="4.6101%" height="15" fill="rgb(251,177,13)" fg:x="28504" fg:w="5691"/><text x="23.3403%" y="703.50">&lt;asyn..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,691 samples, 4.61%)</title><rect x="23.0903%" y="677" width="4.6101%" height="15" fill="rgb(250,179,40)" fg:x="28504" fg:w="5691"/><text x="23.3403%" y="687.50">&lt;asyn..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (191 samples, 0.15%)</title><rect x="27.5456%" y="661" width="0.1547%" height="15" fill="rgb(242,44,2)" fg:x="34004" fg:w="191"/><text x="27.7956%" y="671.50"></text></g><g><title>[libc-2.31.so] (677 samples, 0.55%)</title><rect x="27.7004%" y="693" width="0.5484%" height="15" fill="rgb(216,177,13)" fg:x="34195" fg:w="677"/><text x="27.9504%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (105 samples, 0.09%)</title><rect x="28.2488%" y="693" width="0.0851%" height="15" fill="rgb(216,106,43)" fg:x="34872" fg:w="105"/><text x="28.4988%" y="703.50"></text></g><g><title>alloc::alloc::box_free (15 samples, 0.01%)</title><rect x="28.3654%" y="565" width="0.0122%" height="15" fill="rgb(216,183,2)" fg:x="35016" fg:w="15"/><text x="28.6154%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="28.3654%" y="549" width="0.0122%" height="15" fill="rgb(249,75,3)" fg:x="35016" fg:w="15"/><text x="28.6154%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="28.3654%" y="533" width="0.0122%" height="15" fill="rgb(219,67,39)" fg:x="35016" fg:w="15"/><text x="28.6154%" y="543.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="28.3654%" y="517" width="0.0122%" height="15" fill="rgb(253,228,2)" fg:x="35016" fg:w="15"/><text x="28.6154%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="28.3654%" y="501" width="0.0122%" height="15" fill="rgb(235,138,27)" fg:x="35016" fg:w="15"/><text x="28.6154%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (35 samples, 0.03%)</title><rect x="28.3541%" y="645" width="0.0284%" height="15" fill="rgb(236,97,51)" fg:x="35002" fg:w="35"/><text x="28.6041%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (21 samples, 0.02%)</title><rect x="28.3654%" y="629" width="0.0170%" height="15" fill="rgb(240,80,30)" fg:x="35016" fg:w="21"/><text x="28.6154%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (21 samples, 0.02%)</title><rect x="28.3654%" y="613" width="0.0170%" height="15" fill="rgb(230,178,19)" fg:x="35016" fg:w="21"/><text x="28.6154%" y="623.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="28.3654%" y="597" width="0.0170%" height="15" fill="rgb(210,190,27)" fg:x="35016" fg:w="21"/><text x="28.6154%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="28.3654%" y="581" width="0.0170%" height="15" fill="rgb(222,107,31)" fg:x="35016" fg:w="21"/><text x="28.6154%" y="591.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.05%)</title><rect x="28.3825%" y="645" width="0.0535%" height="15" fill="rgb(216,127,34)" fg:x="35037" fg:w="66"/><text x="28.6325%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (135 samples, 0.11%)</title><rect x="28.3338%" y="693" width="0.1094%" height="15" fill="rgb(234,116,52)" fg:x="34977" fg:w="135"/><text x="28.5838%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (135 samples, 0.11%)</title><rect x="28.3338%" y="677" width="0.1094%" height="15" fill="rgb(222,124,15)" fg:x="34977" fg:w="135"/><text x="28.5838%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 0.11%)</title><rect x="28.3338%" y="661" width="0.1094%" height="15" fill="rgb(231,179,28)" fg:x="34977" fg:w="135"/><text x="28.5838%" y="671.50"></text></g><g><title>[libc-2.31.so] (162 samples, 0.13%)</title><rect x="28.7980%" y="677" width="0.1312%" height="15" fill="rgb(226,93,45)" fg:x="35550" fg:w="162"/><text x="29.0480%" y="687.50"></text></g><g><title>[libc-2.31.so] (249 samples, 0.20%)</title><rect x="28.9738%" y="597" width="0.2017%" height="15" fill="rgb(215,8,51)" fg:x="35767" fg:w="249"/><text x="29.2238%" y="607.50"></text></g><g><title>[libc-2.31.so] (228 samples, 0.18%)</title><rect x="29.1901%" y="581" width="0.1847%" height="15" fill="rgb(223,106,5)" fg:x="36034" fg:w="228"/><text x="29.4401%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (171 samples, 0.14%)</title><rect x="29.6178%" y="469" width="0.1385%" height="15" fill="rgb(250,191,5)" fg:x="36562" fg:w="171"/><text x="29.8678%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (1,041 samples, 0.84%)</title><rect x="28.9292%" y="677" width="0.8433%" height="15" fill="rgb(242,132,44)" fg:x="35712" fg:w="1041"/><text x="29.1792%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (1,013 samples, 0.82%)</title><rect x="28.9519%" y="661" width="0.8206%" height="15" fill="rgb(251,152,29)" fg:x="35740" fg:w="1013"/><text x="29.2019%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (1,013 samples, 0.82%)</title><rect x="28.9519%" y="645" width="0.8206%" height="15" fill="rgb(218,179,5)" fg:x="35740" fg:w="1013"/><text x="29.2019%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (1,013 samples, 0.82%)</title><rect x="28.9519%" y="629" width="0.8206%" height="15" fill="rgb(227,67,19)" fg:x="35740" fg:w="1013"/><text x="29.2019%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (1,013 samples, 0.82%)</title><rect x="28.9519%" y="613" width="0.8206%" height="15" fill="rgb(233,119,31)" fg:x="35740" fg:w="1013"/><text x="29.2019%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (737 samples, 0.60%)</title><rect x="29.1755%" y="597" width="0.5970%" height="15" fill="rgb(241,120,22)" fg:x="36016" fg:w="737"/><text x="29.4255%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (491 samples, 0.40%)</title><rect x="29.3748%" y="581" width="0.3977%" height="15" fill="rgb(224,102,30)" fg:x="36262" fg:w="491"/><text x="29.6248%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (491 samples, 0.40%)</title><rect x="29.3748%" y="565" width="0.3977%" height="15" fill="rgb(210,164,37)" fg:x="36262" fg:w="491"/><text x="29.6248%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (491 samples, 0.40%)</title><rect x="29.3748%" y="549" width="0.3977%" height="15" fill="rgb(226,191,16)" fg:x="36262" fg:w="491"/><text x="29.6248%" y="559.50"></text></g><g><title>alloc::alloc::alloc (483 samples, 0.39%)</title><rect x="29.3813%" y="533" width="0.3913%" height="15" fill="rgb(214,40,45)" fg:x="36270" fg:w="483"/><text x="29.6313%" y="543.50"></text></g><g><title>__rg_alloc (483 samples, 0.39%)</title><rect x="29.3813%" y="517" width="0.3913%" height="15" fill="rgb(244,29,26)" fg:x="36270" fg:w="483"/><text x="29.6313%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (483 samples, 0.39%)</title><rect x="29.3813%" y="501" width="0.3913%" height="15" fill="rgb(216,16,5)" fg:x="36270" fg:w="483"/><text x="29.6313%" y="511.50"></text></g><g><title>sn_rust_alloc (471 samples, 0.38%)</title><rect x="29.3910%" y="485" width="0.3815%" height="15" fill="rgb(249,76,35)" fg:x="36282" fg:w="471"/><text x="29.6410%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="29.7563%" y="469" width="0.0162%" height="15" fill="rgb(207,11,44)" fg:x="36733" fg:w="20"/><text x="30.0063%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,994 samples, 8.10%)</title><rect x="21.6872%" y="709" width="8.0958%" height="15" fill="rgb(228,190,49)" fg:x="26772" fg:w="9994"/><text x="21.9372%" y="719.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,654 samples, 1.34%)</title><rect x="28.4432%" y="693" width="1.3399%" height="15" fill="rgb(214,173,12)" fg:x="35112" fg:w="1654"/><text x="28.6932%" y="703.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (13 samples, 0.01%)</title><rect x="29.7725%" y="677" width="0.0105%" height="15" fill="rgb(218,26,35)" fg:x="36753" fg:w="13"/><text x="30.0225%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (41 samples, 0.03%)</title><rect x="30.0042%" y="677" width="0.0332%" height="15" fill="rgb(220,200,19)" fg:x="37039" fg:w="41"/><text x="30.2542%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (41 samples, 0.03%)</title><rect x="30.0042%" y="661" width="0.0332%" height="15" fill="rgb(239,95,49)" fg:x="37039" fg:w="41"/><text x="30.2542%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (41 samples, 0.03%)</title><rect x="30.0042%" y="645" width="0.0332%" height="15" fill="rgb(235,85,53)" fg:x="37039" fg:w="41"/><text x="30.2542%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (21 samples, 0.02%)</title><rect x="30.0204%" y="629" width="0.0170%" height="15" fill="rgb(233,133,31)" fg:x="37059" fg:w="21"/><text x="30.2704%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (21 samples, 0.02%)</title><rect x="30.0204%" y="613" width="0.0170%" height="15" fill="rgb(218,25,20)" fg:x="37059" fg:w="21"/><text x="30.2704%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="30.0552%" y="597" width="0.0178%" height="15" fill="rgb(252,210,38)" fg:x="37102" fg:w="22"/><text x="30.3052%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="30.0552%" y="581" width="0.0178%" height="15" fill="rgb(242,134,21)" fg:x="37102" fg:w="22"/><text x="30.3052%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="30.0552%" y="565" width="0.0178%" height="15" fill="rgb(213,28,48)" fg:x="37102" fg:w="22"/><text x="30.3052%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (51 samples, 0.04%)</title><rect x="30.0471%" y="613" width="0.0413%" height="15" fill="rgb(250,196,2)" fg:x="37092" fg:w="51"/><text x="30.2971%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="30.0731%" y="597" width="0.0154%" height="15" fill="rgb(227,5,17)" fg:x="37124" fg:w="19"/><text x="30.3231%" y="607.50"></text></g><g><title>alloc::alloc::box_free (19 samples, 0.02%)</title><rect x="30.0731%" y="581" width="0.0154%" height="15" fill="rgb(221,226,24)" fg:x="37124" fg:w="19"/><text x="30.3231%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="30.0731%" y="565" width="0.0154%" height="15" fill="rgb(211,5,48)" fg:x="37124" fg:w="19"/><text x="30.3231%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="30.0731%" y="549" width="0.0154%" height="15" fill="rgb(219,150,6)" fg:x="37124" fg:w="19"/><text x="30.3231%" y="559.50"></text></g><g><title>__rg_dealloc (19 samples, 0.02%)</title><rect x="30.0731%" y="533" width="0.0154%" height="15" fill="rgb(251,46,16)" fg:x="37124" fg:w="19"/><text x="30.3231%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (19 samples, 0.02%)</title><rect x="30.0731%" y="517" width="0.0154%" height="15" fill="rgb(220,204,40)" fg:x="37124" fg:w="19"/><text x="30.3231%" y="527.50"></text></g><g><title>sn_rust_dealloc (157 samples, 0.13%)</title><rect x="30.0885%" y="613" width="0.1272%" height="15" fill="rgb(211,85,2)" fg:x="37143" fg:w="157"/><text x="30.3385%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,810 samples, 8.76%)</title><rect x="21.4669%" y="725" width="8.7569%" height="15" fill="rgb(229,17,7)" fg:x="26500" fg:w="10810"/><text x="21.7169%" y="735.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (544 samples, 0.44%)</title><rect x="29.7831%" y="709" width="0.4407%" height="15" fill="rgb(239,72,28)" fg:x="36766" fg:w="544"/><text x="30.0331%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (271 samples, 0.22%)</title><rect x="30.0042%" y="693" width="0.2195%" height="15" fill="rgb(230,47,54)" fg:x="37039" fg:w="271"/><text x="30.2542%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (230 samples, 0.19%)</title><rect x="30.0374%" y="677" width="0.1863%" height="15" fill="rgb(214,50,8)" fg:x="37080" fg:w="230"/><text x="30.2874%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (230 samples, 0.19%)</title><rect x="30.0374%" y="661" width="0.1863%" height="15" fill="rgb(216,198,43)" fg:x="37080" fg:w="230"/><text x="30.2874%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (230 samples, 0.19%)</title><rect x="30.0374%" y="645" width="0.1863%" height="15" fill="rgb(234,20,35)" fg:x="37080" fg:w="230"/><text x="30.2874%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (230 samples, 0.19%)</title><rect x="30.0374%" y="629" width="0.1863%" height="15" fill="rgb(254,45,19)" fg:x="37080" fg:w="230"/><text x="30.2874%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (17 samples, 0.01%)</title><rect x="30.2667%" y="597" width="0.0138%" height="15" fill="rgb(219,14,44)" fg:x="37363" fg:w="17"/><text x="30.5167%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (112 samples, 0.09%)</title><rect x="30.2667%" y="613" width="0.0907%" height="15" fill="rgb(217,220,26)" fg:x="37363" fg:w="112"/><text x="30.5167%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (95 samples, 0.08%)</title><rect x="30.2804%" y="597" width="0.0770%" height="15" fill="rgb(213,158,28)" fg:x="37380" fg:w="95"/><text x="30.5304%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (95 samples, 0.08%)</title><rect x="30.2804%" y="581" width="0.0770%" height="15" fill="rgb(252,51,52)" fg:x="37380" fg:w="95"/><text x="30.5304%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (71 samples, 0.06%)</title><rect x="30.2999%" y="565" width="0.0575%" height="15" fill="rgb(246,89,16)" fg:x="37404" fg:w="71"/><text x="30.5499%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68 samples, 0.06%)</title><rect x="30.3023%" y="549" width="0.0551%" height="15" fill="rgb(216,158,49)" fg:x="37407" fg:w="68"/><text x="30.5523%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.06%)</title><rect x="30.3023%" y="533" width="0.0551%" height="15" fill="rgb(236,107,19)" fg:x="37407" fg:w="68"/><text x="30.5523%" y="543.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.06%)</title><rect x="30.3023%" y="517" width="0.0551%" height="15" fill="rgb(228,185,30)" fg:x="37407" fg:w="68"/><text x="30.5523%" y="527.50"></text></g><g><title>__rg_alloc (68 samples, 0.06%)</title><rect x="30.3023%" y="501" width="0.0551%" height="15" fill="rgb(246,134,8)" fg:x="37407" fg:w="68"/><text x="30.5523%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (68 samples, 0.06%)</title><rect x="30.3023%" y="485" width="0.0551%" height="15" fill="rgb(214,143,50)" fg:x="37407" fg:w="68"/><text x="30.5523%" y="495.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.05%)</title><rect x="30.3056%" y="469" width="0.0518%" height="15" fill="rgb(228,75,8)" fg:x="37411" fg:w="64"/><text x="30.5556%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="30.3736%" y="565" width="0.0138%" height="15" fill="rgb(207,175,4)" fg:x="37495" fg:w="17"/><text x="30.6236%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (169 samples, 0.14%)</title><rect x="30.2521%" y="693" width="0.1369%" height="15" fill="rgb(205,108,24)" fg:x="37345" fg:w="169"/><text x="30.5021%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (160 samples, 0.13%)</title><rect x="30.2594%" y="677" width="0.1296%" height="15" fill="rgb(244,120,49)" fg:x="37354" fg:w="160"/><text x="30.5094%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (157 samples, 0.13%)</title><rect x="30.2618%" y="661" width="0.1272%" height="15" fill="rgb(223,47,38)" fg:x="37357" fg:w="157"/><text x="30.5118%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (151 samples, 0.12%)</title><rect x="30.2667%" y="645" width="0.1223%" height="15" fill="rgb(229,179,11)" fg:x="37363" fg:w="151"/><text x="30.5167%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (151 samples, 0.12%)</title><rect x="30.2667%" y="629" width="0.1223%" height="15" fill="rgb(231,122,1)" fg:x="37363" fg:w="151"/><text x="30.5167%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (39 samples, 0.03%)</title><rect x="30.3574%" y="613" width="0.0316%" height="15" fill="rgb(245,119,9)" fg:x="37475" fg:w="39"/><text x="30.6074%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (26 samples, 0.02%)</title><rect x="30.3679%" y="597" width="0.0211%" height="15" fill="rgb(241,163,25)" fg:x="37488" fg:w="26"/><text x="30.6179%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (26 samples, 0.02%)</title><rect x="30.3679%" y="581" width="0.0211%" height="15" fill="rgb(217,214,3)" fg:x="37488" fg:w="26"/><text x="30.6179%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (104 samples, 0.08%)</title><rect x="30.7859%" y="613" width="0.0842%" height="15" fill="rgb(240,86,28)" fg:x="38004" fg:w="104"/><text x="31.0359%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (104 samples, 0.08%)</title><rect x="30.7859%" y="597" width="0.0842%" height="15" fill="rgb(215,47,9)" fg:x="38004" fg:w="104"/><text x="31.0359%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (80 samples, 0.06%)</title><rect x="30.8054%" y="581" width="0.0648%" height="15" fill="rgb(252,25,45)" fg:x="38028" fg:w="80"/><text x="31.0554%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (69 samples, 0.06%)</title><rect x="30.8143%" y="565" width="0.0559%" height="15" fill="rgb(251,164,9)" fg:x="38039" fg:w="69"/><text x="31.0643%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.05%)</title><rect x="30.8208%" y="549" width="0.0494%" height="15" fill="rgb(233,194,0)" fg:x="38047" fg:w="61"/><text x="31.0708%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.05%)</title><rect x="30.8208%" y="533" width="0.0494%" height="15" fill="rgb(249,111,24)" fg:x="38047" fg:w="61"/><text x="31.0708%" y="543.50"></text></g><g><title>alloc::alloc::alloc (61 samples, 0.05%)</title><rect x="30.8208%" y="517" width="0.0494%" height="15" fill="rgb(250,223,3)" fg:x="38047" fg:w="61"/><text x="31.0708%" y="527.50"></text></g><g><title>__rg_alloc (61 samples, 0.05%)</title><rect x="30.8208%" y="501" width="0.0494%" height="15" fill="rgb(236,178,37)" fg:x="38047" fg:w="61"/><text x="31.0708%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (61 samples, 0.05%)</title><rect x="30.8208%" y="485" width="0.0494%" height="15" fill="rgb(241,158,50)" fg:x="38047" fg:w="61"/><text x="31.0708%" y="495.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.05%)</title><rect x="30.8208%" y="469" width="0.0494%" height="15" fill="rgb(213,121,41)" fg:x="38047" fg:w="61"/><text x="31.0708%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (179 samples, 0.15%)</title><rect x="30.7592%" y="661" width="0.1450%" height="15" fill="rgb(240,92,3)" fg:x="37971" fg:w="179"/><text x="31.0092%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (179 samples, 0.15%)</title><rect x="30.7592%" y="645" width="0.1450%" height="15" fill="rgb(205,123,3)" fg:x="37971" fg:w="179"/><text x="31.0092%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (179 samples, 0.15%)</title><rect x="30.7592%" y="629" width="0.1450%" height="15" fill="rgb(205,97,47)" fg:x="37971" fg:w="179"/><text x="31.0092%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (42 samples, 0.03%)</title><rect x="30.8702%" y="613" width="0.0340%" height="15" fill="rgb(247,152,14)" fg:x="38108" fg:w="42"/><text x="31.1202%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (30 samples, 0.02%)</title><rect x="30.8799%" y="597" width="0.0243%" height="15" fill="rgb(248,195,53)" fg:x="38120" fg:w="30"/><text x="31.1299%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (29 samples, 0.02%)</title><rect x="30.8807%" y="581" width="0.0235%" height="15" fill="rgb(226,201,16)" fg:x="38121" fg:w="29"/><text x="31.1307%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (29 samples, 0.02%)</title><rect x="30.8807%" y="565" width="0.0235%" height="15" fill="rgb(205,98,0)" fg:x="38121" fg:w="29"/><text x="31.1307%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (29 samples, 0.02%)</title><rect x="30.8807%" y="549" width="0.0235%" height="15" fill="rgb(214,191,48)" fg:x="38121" fg:w="29"/><text x="31.1307%" y="559.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;::sabi_erased_mut (15 samples, 0.01%)</title><rect x="30.9415%" y="613" width="0.0122%" height="15" fill="rgb(237,112,39)" fg:x="38196" fg:w="15"/><text x="31.1915%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (39 samples, 0.03%)</title><rect x="30.9536%" y="613" width="0.0316%" height="15" fill="rgb(247,203,27)" fg:x="38211" fg:w="39"/><text x="31.2036%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (28 samples, 0.02%)</title><rect x="30.9625%" y="597" width="0.0227%" height="15" fill="rgb(235,124,28)" fg:x="38222" fg:w="28"/><text x="31.2125%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="30.9625%" y="581" width="0.0227%" height="15" fill="rgb(208,207,46)" fg:x="38222" fg:w="28"/><text x="31.2125%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="30.9625%" y="565" width="0.0227%" height="15" fill="rgb(234,176,4)" fg:x="38222" fg:w="28"/><text x="31.2125%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="30.9658%" y="549" width="0.0194%" height="15" fill="rgb(230,133,28)" fg:x="38226" fg:w="24"/><text x="31.2158%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="30.9658%" y="533" width="0.0194%" height="15" fill="rgb(211,137,40)" fg:x="38226" fg:w="24"/><text x="31.2158%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="30.9658%" y="517" width="0.0194%" height="15" fill="rgb(254,35,13)" fg:x="38226" fg:w="24"/><text x="31.2158%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.06%)</title><rect x="30.9342%" y="645" width="0.0575%" height="15" fill="rgb(225,49,51)" fg:x="38187" fg:w="71"/><text x="31.1842%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (71 samples, 0.06%)</title><rect x="30.9342%" y="629" width="0.0575%" height="15" fill="rgb(251,10,15)" fg:x="38187" fg:w="71"/><text x="31.1842%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::tuple::Tuple2&lt;A,B&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (15 samples, 0.01%)</title><rect x="30.9917%" y="613" width="0.0122%" height="15" fill="rgb(228,207,15)" fg:x="38258" fg:w="15"/><text x="31.2417%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (18 samples, 0.01%)</title><rect x="31.0119%" y="613" width="0.0146%" height="15" fill="rgb(241,99,19)" fg:x="38283" fg:w="18"/><text x="31.2619%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="31.0265%" y="581" width="0.0122%" height="15" fill="rgb(207,104,49)" fg:x="38301" fg:w="15"/><text x="31.2765%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (15 samples, 0.01%)</title><rect x="31.0265%" y="565" width="0.0122%" height="15" fill="rgb(234,99,18)" fg:x="38301" fg:w="15"/><text x="31.2765%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (65 samples, 0.05%)</title><rect x="30.9917%" y="645" width="0.0527%" height="15" fill="rgb(213,191,49)" fg:x="38258" fg:w="65"/><text x="31.2417%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (65 samples, 0.05%)</title><rect x="30.9917%" y="629" width="0.0527%" height="15" fill="rgb(210,226,19)" fg:x="38258" fg:w="65"/><text x="31.2417%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (22 samples, 0.02%)</title><rect x="31.0265%" y="613" width="0.0178%" height="15" fill="rgb(229,97,18)" fg:x="38301" fg:w="22"/><text x="31.2765%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (22 samples, 0.02%)</title><rect x="31.0265%" y="597" width="0.0178%" height="15" fill="rgb(211,167,15)" fg:x="38301" fg:w="22"/><text x="31.2765%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (27 samples, 0.02%)</title><rect x="31.0443%" y="645" width="0.0219%" height="15" fill="rgb(210,169,34)" fg:x="38323" fg:w="27"/><text x="31.2943%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (27 samples, 0.02%)</title><rect x="31.0443%" y="629" width="0.0219%" height="15" fill="rgb(241,121,31)" fg:x="38323" fg:w="27"/><text x="31.2943%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (27 samples, 0.02%)</title><rect x="31.0443%" y="613" width="0.0219%" height="15" fill="rgb(232,40,11)" fg:x="38323" fg:w="27"/><text x="31.2943%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="31.0557%" y="597" width="0.0105%" height="15" fill="rgb(205,86,26)" fg:x="38337" fg:w="13"/><text x="31.3057%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="31.0557%" y="581" width="0.0105%" height="15" fill="rgb(231,126,28)" fg:x="38337" fg:w="13"/><text x="31.3057%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="31.0557%" y="565" width="0.0105%" height="15" fill="rgb(219,221,18)" fg:x="38337" fg:w="13"/><text x="31.3057%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="31.0557%" y="549" width="0.0105%" height="15" fill="rgb(211,40,0)" fg:x="38337" fg:w="13"/><text x="31.3057%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="31.0557%" y="533" width="0.0105%" height="15" fill="rgb(239,85,43)" fg:x="38337" fg:w="13"/><text x="31.3057%" y="543.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.05%)</title><rect x="31.0978%" y="533" width="0.0535%" height="15" fill="rgb(231,55,21)" fg:x="38389" fg:w="66"/><text x="31.3478%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,148 samples, 0.93%)</title><rect x="30.2237%" y="725" width="0.9300%" height="15" fill="rgb(225,184,43)" fg:x="37310" fg:w="1148"/><text x="30.4737%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,116 samples, 0.90%)</title><rect x="30.2497%" y="709" width="0.9040%" height="15" fill="rgb(251,158,41)" fg:x="37342" fg:w="1116"/><text x="30.4997%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (944 samples, 0.76%)</title><rect x="30.3890%" y="693" width="0.7647%" height="15" fill="rgb(234,159,37)" fg:x="37514" fg:w="944"/><text x="30.6390%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (491 samples, 0.40%)</title><rect x="30.7560%" y="677" width="0.3977%" height="15" fill="rgb(216,204,22)" fg:x="37967" fg:w="491"/><text x="31.0060%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (308 samples, 0.25%)</title><rect x="30.9042%" y="661" width="0.2495%" height="15" fill="rgb(214,17,3)" fg:x="38150" fg:w="308"/><text x="31.1542%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (108 samples, 0.09%)</title><rect x="31.0662%" y="645" width="0.0875%" height="15" fill="rgb(212,111,17)" fg:x="38350" fg:w="108"/><text x="31.3162%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (108 samples, 0.09%)</title><rect x="31.0662%" y="629" width="0.0875%" height="15" fill="rgb(221,157,24)" fg:x="38350" fg:w="108"/><text x="31.3162%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.09%)</title><rect x="31.0662%" y="613" width="0.0875%" height="15" fill="rgb(252,16,13)" fg:x="38350" fg:w="108"/><text x="31.3162%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (88 samples, 0.07%)</title><rect x="31.0824%" y="597" width="0.0713%" height="15" fill="rgb(221,62,2)" fg:x="38370" fg:w="88"/><text x="31.3324%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (87 samples, 0.07%)</title><rect x="31.0832%" y="581" width="0.0705%" height="15" fill="rgb(247,87,22)" fg:x="38371" fg:w="87"/><text x="31.3332%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (87 samples, 0.07%)</title><rect x="31.0832%" y="565" width="0.0705%" height="15" fill="rgb(215,73,9)" fg:x="38371" fg:w="87"/><text x="31.3332%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (87 samples, 0.07%)</title><rect x="31.0832%" y="549" width="0.0705%" height="15" fill="rgb(207,175,33)" fg:x="38371" fg:w="87"/><text x="31.3332%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="31.2080%" y="677" width="0.0122%" height="15" fill="rgb(243,129,54)" fg:x="38525" fg:w="15"/><text x="31.4580%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="31.2080%" y="661" width="0.0122%" height="15" fill="rgb(227,119,45)" fg:x="38525" fg:w="15"/><text x="31.4580%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (94 samples, 0.08%)</title><rect x="31.1691%" y="709" width="0.0761%" height="15" fill="rgb(205,109,36)" fg:x="38477" fg:w="94"/><text x="31.4191%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (83 samples, 0.07%)</title><rect x="31.1780%" y="693" width="0.0672%" height="15" fill="rgb(205,6,39)" fg:x="38488" fg:w="83"/><text x="31.4280%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (31 samples, 0.03%)</title><rect x="31.2201%" y="677" width="0.0251%" height="15" fill="rgb(221,32,16)" fg:x="38540" fg:w="31"/><text x="31.4701%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (31 samples, 0.03%)</title><rect x="31.2201%" y="661" width="0.0251%" height="15" fill="rgb(228,144,50)" fg:x="38540" fg:w="31"/><text x="31.4701%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (31 samples, 0.03%)</title><rect x="31.2201%" y="645" width="0.0251%" height="15" fill="rgb(229,201,53)" fg:x="38540" fg:w="31"/><text x="31.4701%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 0.03%)</title><rect x="31.2201%" y="629" width="0.0251%" height="15" fill="rgb(249,153,27)" fg:x="38540" fg:w="31"/><text x="31.4701%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 0.03%)</title><rect x="31.2201%" y="613" width="0.0251%" height="15" fill="rgb(227,106,25)" fg:x="38540" fg:w="31"/><text x="31.4701%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.02%)</title><rect x="31.2290%" y="597" width="0.0162%" height="15" fill="rgb(230,65,29)" fg:x="38551" fg:w="20"/><text x="31.4790%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.02%)</title><rect x="31.2298%" y="581" width="0.0154%" height="15" fill="rgb(221,57,46)" fg:x="38552" fg:w="19"/><text x="31.4798%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.02%)</title><rect x="31.2298%" y="565" width="0.0154%" height="15" fill="rgb(229,161,17)" fg:x="38552" fg:w="19"/><text x="31.4798%" y="575.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (13 samples, 0.01%)</title><rect x="31.3246%" y="581" width="0.0105%" height="15" fill="rgb(222,213,11)" fg:x="38669" fg:w="13"/><text x="31.5746%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (115 samples, 0.09%)</title><rect x="31.3246%" y="597" width="0.0932%" height="15" fill="rgb(235,35,13)" fg:x="38669" fg:w="115"/><text x="31.5746%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="31.3352%" y="581" width="0.0826%" height="15" fill="rgb(233,158,34)" fg:x="38682" fg:w="102"/><text x="31.5852%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="31.3352%" y="565" width="0.0826%" height="15" fill="rgb(215,151,48)" fg:x="38682" fg:w="102"/><text x="31.5852%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (77 samples, 0.06%)</title><rect x="31.3554%" y="549" width="0.0624%" height="15" fill="rgb(229,84,14)" fg:x="38707" fg:w="77"/><text x="31.6054%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 0.06%)</title><rect x="31.3554%" y="533" width="0.0624%" height="15" fill="rgb(229,68,14)" fg:x="38707" fg:w="77"/><text x="31.6054%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.06%)</title><rect x="31.3554%" y="517" width="0.0624%" height="15" fill="rgb(243,106,26)" fg:x="38707" fg:w="77"/><text x="31.6054%" y="527.50"></text></g><g><title>alloc::alloc::alloc (77 samples, 0.06%)</title><rect x="31.3554%" y="501" width="0.0624%" height="15" fill="rgb(206,45,38)" fg:x="38707" fg:w="77"/><text x="31.6054%" y="511.50"></text></g><g><title>__rg_alloc (77 samples, 0.06%)</title><rect x="31.3554%" y="485" width="0.0624%" height="15" fill="rgb(226,6,15)" fg:x="38707" fg:w="77"/><text x="31.6054%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (77 samples, 0.06%)</title><rect x="31.3554%" y="469" width="0.0624%" height="15" fill="rgb(232,22,54)" fg:x="38707" fg:w="77"/><text x="31.6054%" y="479.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.05%)</title><rect x="31.3635%" y="453" width="0.0543%" height="15" fill="rgb(229,222,32)" fg:x="38717" fg:w="67"/><text x="31.6135%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="31.4024%" y="437" width="0.0154%" height="15" fill="rgb(228,62,29)" fg:x="38765" fg:w="19"/><text x="31.6524%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (51 samples, 0.04%)</title><rect x="32.0885%" y="533" width="0.0413%" height="15" fill="rgb(251,103,34)" fg:x="39612" fg:w="51"/><text x="32.3385%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (51 samples, 0.04%)</title><rect x="32.0885%" y="517" width="0.0413%" height="15" fill="rgb(233,12,30)" fg:x="39612" fg:w="51"/><text x="32.3385%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (100 samples, 0.08%)</title><rect x="32.1298%" y="533" width="0.0810%" height="15" fill="rgb(238,52,0)" fg:x="39663" fg:w="100"/><text x="32.3798%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (100 samples, 0.08%)</title><rect x="32.1298%" y="517" width="0.0810%" height="15" fill="rgb(223,98,5)" fg:x="39663" fg:w="100"/><text x="32.3798%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (181 samples, 0.15%)</title><rect x="32.0885%" y="549" width="0.1466%" height="15" fill="rgb(228,75,37)" fg:x="39612" fg:w="181"/><text x="32.3385%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (30 samples, 0.02%)</title><rect x="32.2108%" y="533" width="0.0243%" height="15" fill="rgb(205,115,49)" fg:x="39763" fg:w="30"/><text x="32.4608%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (23 samples, 0.02%)</title><rect x="32.2165%" y="517" width="0.0186%" height="15" fill="rgb(250,154,43)" fg:x="39770" fg:w="23"/><text x="32.4665%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.02%)</title><rect x="32.2165%" y="501" width="0.0186%" height="15" fill="rgb(226,43,29)" fg:x="39770" fg:w="23"/><text x="32.4665%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (1,143 samples, 0.93%)</title><rect x="31.3198%" y="677" width="0.9259%" height="15" fill="rgb(249,228,39)" fg:x="38663" fg:w="1143"/><text x="31.5698%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (1,137 samples, 0.92%)</title><rect x="31.3246%" y="661" width="0.9211%" height="15" fill="rgb(216,79,43)" fg:x="38669" fg:w="1137"/><text x="31.5746%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,137 samples, 0.92%)</title><rect x="31.3246%" y="645" width="0.9211%" height="15" fill="rgb(228,95,12)" fg:x="38669" fg:w="1137"/><text x="31.5746%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,137 samples, 0.92%)</title><rect x="31.3246%" y="629" width="0.9211%" height="15" fill="rgb(249,221,15)" fg:x="38669" fg:w="1137"/><text x="31.5746%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (1,137 samples, 0.92%)</title><rect x="31.3246%" y="613" width="0.9211%" height="15" fill="rgb(233,34,13)" fg:x="38669" fg:w="1137"/><text x="31.5746%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (1,022 samples, 0.83%)</title><rect x="31.4178%" y="597" width="0.8279%" height="15" fill="rgb(214,103,39)" fg:x="38784" fg:w="1022"/><text x="31.6678%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (224 samples, 0.18%)</title><rect x="32.0642%" y="581" width="0.1815%" height="15" fill="rgb(251,126,39)" fg:x="39582" fg:w="224"/><text x="32.3142%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (224 samples, 0.18%)</title><rect x="32.0642%" y="565" width="0.1815%" height="15" fill="rgb(214,216,36)" fg:x="39582" fg:w="224"/><text x="32.3142%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (13 samples, 0.01%)</title><rect x="32.2351%" y="549" width="0.0105%" height="15" fill="rgb(220,221,8)" fg:x="39793" fg:w="13"/><text x="32.4851%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (100 samples, 0.08%)</title><rect x="32.6183%" y="437" width="0.0810%" height="15" fill="rgb(240,216,3)" fg:x="40266" fg:w="100"/><text x="32.8683%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (228 samples, 0.18%)</title><rect x="32.5211%" y="597" width="0.1847%" height="15" fill="rgb(232,218,17)" fg:x="40146" fg:w="228"/><text x="32.7711%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (228 samples, 0.18%)</title><rect x="32.5211%" y="581" width="0.1847%" height="15" fill="rgb(229,163,45)" fg:x="40146" fg:w="228"/><text x="32.7711%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (202 samples, 0.16%)</title><rect x="32.5422%" y="565" width="0.1636%" height="15" fill="rgb(231,110,42)" fg:x="40172" fg:w="202"/><text x="32.7922%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (188 samples, 0.15%)</title><rect x="32.5535%" y="549" width="0.1523%" height="15" fill="rgb(208,170,48)" fg:x="40186" fg:w="188"/><text x="32.8035%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (181 samples, 0.15%)</title><rect x="32.5592%" y="533" width="0.1466%" height="15" fill="rgb(239,116,25)" fg:x="40193" fg:w="181"/><text x="32.8092%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (181 samples, 0.15%)</title><rect x="32.5592%" y="517" width="0.1466%" height="15" fill="rgb(219,200,50)" fg:x="40193" fg:w="181"/><text x="32.8092%" y="527.50"></text></g><g><title>alloc::alloc::alloc (181 samples, 0.15%)</title><rect x="32.5592%" y="501" width="0.1466%" height="15" fill="rgb(245,200,0)" fg:x="40193" fg:w="181"/><text x="32.8092%" y="511.50"></text></g><g><title>__rg_alloc (181 samples, 0.15%)</title><rect x="32.5592%" y="485" width="0.1466%" height="15" fill="rgb(245,119,33)" fg:x="40193" fg:w="181"/><text x="32.8092%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (181 samples, 0.15%)</title><rect x="32.5592%" y="469" width="0.1466%" height="15" fill="rgb(231,125,12)" fg:x="40193" fg:w="181"/><text x="32.8092%" y="479.50"></text></g><g><title>sn_rust_alloc (181 samples, 0.15%)</title><rect x="32.5592%" y="453" width="0.1466%" height="15" fill="rgb(216,96,41)" fg:x="40193" fg:w="181"/><text x="32.8092%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (306 samples, 0.25%)</title><rect x="32.4911%" y="645" width="0.2479%" height="15" fill="rgb(248,43,45)" fg:x="40109" fg:w="306"/><text x="32.7411%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (306 samples, 0.25%)</title><rect x="32.4911%" y="629" width="0.2479%" height="15" fill="rgb(217,222,7)" fg:x="40109" fg:w="306"/><text x="32.7411%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (306 samples, 0.25%)</title><rect x="32.4911%" y="613" width="0.2479%" height="15" fill="rgb(233,28,6)" fg:x="40109" fg:w="306"/><text x="32.7411%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (41 samples, 0.03%)</title><rect x="32.7058%" y="597" width="0.0332%" height="15" fill="rgb(231,218,15)" fg:x="40374" fg:w="41"/><text x="32.9558%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (35 samples, 0.03%)</title><rect x="32.7107%" y="581" width="0.0284%" height="15" fill="rgb(226,171,48)" fg:x="40380" fg:w="35"/><text x="32.9607%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (35 samples, 0.03%)</title><rect x="32.7107%" y="565" width="0.0284%" height="15" fill="rgb(235,201,9)" fg:x="40380" fg:w="35"/><text x="32.9607%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (35 samples, 0.03%)</title><rect x="32.7107%" y="549" width="0.0284%" height="15" fill="rgb(217,80,15)" fg:x="40380" fg:w="35"/><text x="32.9607%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (35 samples, 0.03%)</title><rect x="32.7107%" y="533" width="0.0284%" height="15" fill="rgb(219,152,8)" fg:x="40380" fg:w="35"/><text x="32.9607%" y="543.50"></text></g><g><title>abi_stable::erased_types::iterator::next (33 samples, 0.03%)</title><rect x="32.7771%" y="597" width="0.0267%" height="15" fill="rgb(243,107,38)" fg:x="40462" fg:w="33"/><text x="33.0271%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (21 samples, 0.02%)</title><rect x="32.7868%" y="581" width="0.0170%" height="15" fill="rgb(231,17,5)" fg:x="40474" fg:w="21"/><text x="33.0368%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="32.7892%" y="565" width="0.0146%" height="15" fill="rgb(209,25,54)" fg:x="40477" fg:w="18"/><text x="33.0392%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="32.7892%" y="549" width="0.0146%" height="15" fill="rgb(219,0,2)" fg:x="40477" fg:w="18"/><text x="33.0392%" y="559.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="32.7900%" y="533" width="0.0138%" height="15" fill="rgb(246,9,5)" fg:x="40478" fg:w="17"/><text x="33.0400%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="32.7900%" y="517" width="0.0138%" height="15" fill="rgb(226,159,4)" fg:x="40478" fg:w="17"/><text x="33.0400%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="32.7900%" y="501" width="0.0138%" height="15" fill="rgb(219,175,34)" fg:x="40478" fg:w="17"/><text x="33.0400%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.05%)</title><rect x="32.7666%" y="629" width="0.0478%" height="15" fill="rgb(236,10,46)" fg:x="40449" fg:w="59"/><text x="33.0166%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (59 samples, 0.05%)</title><rect x="32.7666%" y="613" width="0.0478%" height="15" fill="rgb(240,211,16)" fg:x="40449" fg:w="59"/><text x="33.0166%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (13 samples, 0.01%)</title><rect x="32.8038%" y="597" width="0.0105%" height="15" fill="rgb(205,3,43)" fg:x="40495" fg:w="13"/><text x="33.0538%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (13 samples, 0.01%)</title><rect x="32.8038%" y="581" width="0.0105%" height="15" fill="rgb(245,7,22)" fg:x="40495" fg:w="13"/><text x="33.0538%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::tuple::Tuple2&lt;A,B&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (15 samples, 0.01%)</title><rect x="32.8143%" y="597" width="0.0122%" height="15" fill="rgb(239,132,32)" fg:x="40508" fg:w="15"/><text x="33.0643%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (25 samples, 0.02%)</title><rect x="32.8322%" y="597" width="0.0203%" height="15" fill="rgb(228,202,34)" fg:x="40530" fg:w="25"/><text x="33.0822%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (14 samples, 0.01%)</title><rect x="32.8411%" y="581" width="0.0113%" height="15" fill="rgb(254,200,22)" fg:x="40541" fg:w="14"/><text x="33.0911%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (82 samples, 0.07%)</title><rect x="32.8143%" y="629" width="0.0664%" height="15" fill="rgb(219,10,39)" fg:x="40508" fg:w="82"/><text x="33.0643%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (82 samples, 0.07%)</title><rect x="32.8143%" y="613" width="0.0664%" height="15" fill="rgb(226,210,39)" fg:x="40508" fg:w="82"/><text x="33.0643%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (35 samples, 0.03%)</title><rect x="32.8524%" y="597" width="0.0284%" height="15" fill="rgb(208,219,16)" fg:x="40555" fg:w="35"/><text x="33.1024%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (35 samples, 0.03%)</title><rect x="32.8524%" y="581" width="0.0284%" height="15" fill="rgb(216,158,51)" fg:x="40555" fg:w="35"/><text x="33.1024%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (23 samples, 0.02%)</title><rect x="32.8621%" y="565" width="0.0186%" height="15" fill="rgb(233,14,44)" fg:x="40567" fg:w="23"/><text x="33.1121%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (30 samples, 0.02%)</title><rect x="32.8808%" y="629" width="0.0243%" height="15" fill="rgb(237,97,39)" fg:x="40590" fg:w="30"/><text x="33.1308%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (28 samples, 0.02%)</title><rect x="32.8824%" y="613" width="0.0227%" height="15" fill="rgb(218,198,43)" fg:x="40592" fg:w="28"/><text x="33.1324%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (27 samples, 0.02%)</title><rect x="32.8832%" y="597" width="0.0219%" height="15" fill="rgb(231,104,20)" fg:x="40593" fg:w="27"/><text x="33.1332%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (14 samples, 0.01%)</title><rect x="32.8937%" y="581" width="0.0113%" height="15" fill="rgb(254,36,13)" fg:x="40606" fg:w="14"/><text x="33.1437%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (14 samples, 0.01%)</title><rect x="32.8937%" y="565" width="0.0113%" height="15" fill="rgb(248,14,50)" fg:x="40606" fg:w="14"/><text x="33.1437%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="32.8937%" y="549" width="0.0113%" height="15" fill="rgb(217,107,29)" fg:x="40606" fg:w="14"/><text x="33.1437%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="32.8945%" y="533" width="0.0105%" height="15" fill="rgb(251,169,33)" fg:x="40607" fg:w="13"/><text x="33.1445%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="32.8945%" y="517" width="0.0105%" height="15" fill="rgb(217,108,32)" fg:x="40607" fg:w="13"/><text x="33.1445%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="32.9286%" y="517" width="0.0138%" height="15" fill="rgb(219,66,42)" fg:x="40649" fg:w="17"/><text x="33.1786%" y="527.50"></text></g><g><title>sn_rust_dealloc (134 samples, 0.11%)</title><rect x="32.9423%" y="517" width="0.1085%" height="15" fill="rgb(206,180,7)" fg:x="40666" fg:w="134"/><text x="33.1923%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (2,343 samples, 1.90%)</title><rect x="31.1537%" y="725" width="1.8980%" height="15" fill="rgb(208,226,31)" fg:x="38458" fg:w="2343"/><text x="31.4037%" y="735.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (2,230 samples, 1.81%)</title><rect x="31.2452%" y="709" width="1.8065%" height="15" fill="rgb(218,26,49)" fg:x="38571" fg:w="2230"/><text x="31.4952%" y="719.50">&lt;..</text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2,145 samples, 1.74%)</title><rect x="31.3141%" y="693" width="1.7376%" height="15" fill="rgb(233,197,48)" fg:x="38656" fg:w="2145"/><text x="31.5641%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (995 samples, 0.81%)</title><rect x="32.2457%" y="677" width="0.8060%" height="15" fill="rgb(252,181,51)" fg:x="39806" fg:w="995"/><text x="32.4957%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (709 samples, 0.57%)</title><rect x="32.4774%" y="661" width="0.5743%" height="15" fill="rgb(253,90,19)" fg:x="40092" fg:w="709"/><text x="32.7274%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (386 samples, 0.31%)</title><rect x="32.7390%" y="645" width="0.3127%" height="15" fill="rgb(215,171,30)" fg:x="40415" fg:w="386"/><text x="32.9890%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (181 samples, 0.15%)</title><rect x="32.9051%" y="629" width="0.1466%" height="15" fill="rgb(214,222,9)" fg:x="40620" fg:w="181"/><text x="33.1551%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (181 samples, 0.15%)</title><rect x="32.9051%" y="613" width="0.1466%" height="15" fill="rgb(223,3,22)" fg:x="40620" fg:w="181"/><text x="33.1551%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (181 samples, 0.15%)</title><rect x="32.9051%" y="597" width="0.1466%" height="15" fill="rgb(225,196,46)" fg:x="40620" fg:w="181"/><text x="33.1551%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (168 samples, 0.14%)</title><rect x="32.9156%" y="581" width="0.1361%" height="15" fill="rgb(209,110,37)" fg:x="40633" fg:w="168"/><text x="33.1656%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (168 samples, 0.14%)</title><rect x="32.9156%" y="565" width="0.1361%" height="15" fill="rgb(249,89,12)" fg:x="40633" fg:w="168"/><text x="33.1656%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (168 samples, 0.14%)</title><rect x="32.9156%" y="549" width="0.1361%" height="15" fill="rgb(226,27,33)" fg:x="40633" fg:w="168"/><text x="33.1656%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (168 samples, 0.14%)</title><rect x="32.9156%" y="533" width="0.1361%" height="15" fill="rgb(213,82,22)" fg:x="40633" fg:w="168"/><text x="33.1656%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,755 samples, 1.42%)</title><rect x="33.0517%" y="725" width="1.4217%" height="15" fill="rgb(248,140,0)" fg:x="40801" fg:w="1755"/><text x="33.3017%" y="735.50"></text></g><g><title>sn_rust_dealloc (329 samples, 0.27%)</title><rect x="34.4904%" y="565" width="0.2665%" height="15" fill="rgb(228,106,3)" fg:x="42577" fg:w="329"/><text x="34.7404%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (358 samples, 0.29%)</title><rect x="34.4742%" y="725" width="0.2900%" height="15" fill="rgb(209,23,37)" fg:x="42557" fg:w="358"/><text x="34.7242%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (358 samples, 0.29%)</title><rect x="34.4742%" y="709" width="0.2900%" height="15" fill="rgb(241,93,50)" fg:x="42557" fg:w="358"/><text x="34.7242%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (348 samples, 0.28%)</title><rect x="34.4823%" y="693" width="0.2819%" height="15" fill="rgb(253,46,43)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (348 samples, 0.28%)</title><rect x="34.4823%" y="677" width="0.2819%" height="15" fill="rgb(226,206,43)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (348 samples, 0.28%)</title><rect x="34.4823%" y="661" width="0.2819%" height="15" fill="rgb(217,54,7)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (348 samples, 0.28%)</title><rect x="34.4823%" y="645" width="0.2819%" height="15" fill="rgb(223,5,52)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (348 samples, 0.28%)</title><rect x="34.4823%" y="629" width="0.2819%" height="15" fill="rgb(206,52,46)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (348 samples, 0.28%)</title><rect x="34.4823%" y="613" width="0.2819%" height="15" fill="rgb(253,136,11)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="623.50"></text></g><g><title>__rg_dealloc (348 samples, 0.28%)</title><rect x="34.4823%" y="597" width="0.2819%" height="15" fill="rgb(208,106,33)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (348 samples, 0.28%)</title><rect x="34.4823%" y="581" width="0.2819%" height="15" fill="rgb(206,54,4)" fg:x="42567" fg:w="348"/><text x="34.7323%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (45 samples, 0.04%)</title><rect x="34.7642%" y="725" width="0.0365%" height="15" fill="rgb(213,3,15)" fg:x="42915" fg:w="45"/><text x="35.0142%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (45 samples, 0.04%)</title><rect x="34.7642%" y="709" width="0.0365%" height="15" fill="rgb(252,211,39)" fg:x="42915" fg:w="45"/><text x="35.0142%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (95 samples, 0.08%)</title><rect x="34.8517%" y="709" width="0.0770%" height="15" fill="rgb(223,6,36)" fg:x="43023" fg:w="95"/><text x="35.1017%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (87 samples, 0.07%)</title><rect x="34.9286%" y="709" width="0.0705%" height="15" fill="rgb(252,169,45)" fg:x="43118" fg:w="87"/><text x="35.1786%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (342 samples, 0.28%)</title><rect x="34.9991%" y="693" width="0.2770%" height="15" fill="rgb(212,48,26)" fg:x="43205" fg:w="342"/><text x="35.2491%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (125 samples, 0.10%)</title><rect x="35.3993%" y="661" width="0.1013%" height="15" fill="rgb(251,102,48)" fg:x="43699" fg:w="125"/><text x="35.6493%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (125 samples, 0.10%)</title><rect x="35.3993%" y="645" width="0.1013%" height="15" fill="rgb(243,208,16)" fg:x="43699" fg:w="125"/><text x="35.6493%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (120 samples, 0.10%)</title><rect x="35.4033%" y="629" width="0.0972%" height="15" fill="rgb(219,96,24)" fg:x="43704" fg:w="120"/><text x="35.6533%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (120 samples, 0.10%)</title><rect x="35.4033%" y="613" width="0.0972%" height="15" fill="rgb(219,33,29)" fg:x="43704" fg:w="120"/><text x="35.6533%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (120 samples, 0.10%)</title><rect x="35.4033%" y="597" width="0.0972%" height="15" fill="rgb(223,176,5)" fg:x="43704" fg:w="120"/><text x="35.6533%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (69 samples, 0.06%)</title><rect x="35.4446%" y="581" width="0.0559%" height="15" fill="rgb(228,140,14)" fg:x="43755" fg:w="69"/><text x="35.6946%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (696 samples, 0.56%)</title><rect x="34.9991%" y="709" width="0.5638%" height="15" fill="rgb(217,179,31)" fg:x="43205" fg:w="696"/><text x="35.2491%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (354 samples, 0.29%)</title><rect x="35.2762%" y="693" width="0.2868%" height="15" fill="rgb(230,9,30)" fg:x="43547" fg:w="354"/><text x="35.5262%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (354 samples, 0.29%)</title><rect x="35.2762%" y="677" width="0.2868%" height="15" fill="rgb(230,136,20)" fg:x="43547" fg:w="354"/><text x="35.5262%" y="687.50"></text></g><g><title>core::time::Duration::new (77 samples, 0.06%)</title><rect x="35.5005%" y="661" width="0.0624%" height="15" fill="rgb(215,210,22)" fg:x="43824" fg:w="77"/><text x="35.7505%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (2,432 samples, 1.97%)</title><rect x="34.8006%" y="725" width="1.9701%" height="15" fill="rgb(218,43,5)" fg:x="42960" fg:w="2432"/><text x="35.0506%" y="735.50">t..</text></g><g><title>std::time::SystemTime::now (1,491 samples, 1.21%)</title><rect x="35.5629%" y="709" width="1.2078%" height="15" fill="rgb(216,11,5)" fg:x="43901" fg:w="1491"/><text x="35.8129%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (1,491 samples, 1.21%)</title><rect x="35.5629%" y="693" width="1.2078%" height="15" fill="rgb(209,82,29)" fg:x="43901" fg:w="1491"/><text x="35.8129%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (1,491 samples, 1.21%)</title><rect x="35.5629%" y="677" width="1.2078%" height="15" fill="rgb(244,115,12)" fg:x="43901" fg:w="1491"/><text x="35.8129%" y="687.50"></text></g><g><title>__clock_gettime (1,201 samples, 0.97%)</title><rect x="35.7978%" y="661" width="0.9729%" height="15" fill="rgb(222,82,18)" fg:x="44191" fg:w="1201"/><text x="36.0478%" y="671.50"></text></g><g><title>__vdso_clock_gettime (1,125 samples, 0.91%)</title><rect x="35.8594%" y="645" width="0.9113%" height="15" fill="rgb(249,227,8)" fg:x="44267" fg:w="1125"/><text x="36.1094%" y="655.50"></text></g><g><title>[[vdso]] (1,002 samples, 0.81%)</title><rect x="35.9590%" y="629" width="0.8117%" height="15" fill="rgb(253,141,45)" fg:x="44390" fg:w="1002"/><text x="36.2090%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (13 samples, 0.01%)</title><rect x="36.7967%" y="613" width="0.0105%" height="15" fill="rgb(234,184,4)" fg:x="45424" fg:w="13"/><text x="37.0467%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="36.7967%" y="597" width="0.0105%" height="15" fill="rgb(218,194,23)" fg:x="45424" fg:w="13"/><text x="37.0467%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="36.7967%" y="581" width="0.0105%" height="15" fill="rgb(235,66,41)" fg:x="45424" fg:w="13"/><text x="37.0467%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::next (56 samples, 0.05%)</title><rect x="36.8072%" y="613" width="0.0454%" height="15" fill="rgb(245,217,1)" fg:x="45437" fg:w="56"/><text x="37.0572%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (35 samples, 0.03%)</title><rect x="36.8242%" y="597" width="0.0284%" height="15" fill="rgb(229,91,1)" fg:x="45458" fg:w="35"/><text x="37.0742%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="36.8242%" y="581" width="0.0284%" height="15" fill="rgb(207,101,30)" fg:x="45458" fg:w="35"/><text x="37.0742%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="36.8323%" y="565" width="0.0203%" height="15" fill="rgb(223,82,49)" fg:x="45468" fg:w="25"/><text x="37.0823%" y="575.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="36.8331%" y="549" width="0.0194%" height="15" fill="rgb(218,167,17)" fg:x="45469" fg:w="24"/><text x="37.0831%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="36.8331%" y="533" width="0.0194%" height="15" fill="rgb(208,103,14)" fg:x="45469" fg:w="24"/><text x="37.0831%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="36.8331%" y="517" width="0.0194%" height="15" fill="rgb(238,20,8)" fg:x="45469" fg:w="24"/><text x="37.0831%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.07%)</title><rect x="36.7958%" y="677" width="0.0689%" height="15" fill="rgb(218,80,54)" fg:x="45423" fg:w="85"/><text x="37.0458%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.07%)</title><rect x="36.7958%" y="661" width="0.0689%" height="15" fill="rgb(240,144,17)" fg:x="45423" fg:w="85"/><text x="37.0458%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.07%)</title><rect x="36.7958%" y="645" width="0.0689%" height="15" fill="rgb(245,27,50)" fg:x="45423" fg:w="85"/><text x="37.0458%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (85 samples, 0.07%)</title><rect x="36.7958%" y="629" width="0.0689%" height="15" fill="rgb(251,51,7)" fg:x="45423" fg:w="85"/><text x="37.0458%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (15 samples, 0.01%)</title><rect x="36.8526%" y="613" width="0.0122%" height="15" fill="rgb(245,217,29)" fg:x="45493" fg:w="15"/><text x="37.1026%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (15 samples, 0.01%)</title><rect x="36.8526%" y="597" width="0.0122%" height="15" fill="rgb(221,176,29)" fg:x="45493" fg:w="15"/><text x="37.1026%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="36.8534%" y="581" width="0.0113%" height="15" fill="rgb(212,180,24)" fg:x="45494" fg:w="14"/><text x="37.1034%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="36.8534%" y="565" width="0.0113%" height="15" fill="rgb(254,24,2)" fg:x="45494" fg:w="14"/><text x="37.1034%" y="575.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (17 samples, 0.01%)</title><rect x="36.8809%" y="613" width="0.0138%" height="15" fill="rgb(230,100,2)" fg:x="45528" fg:w="17"/><text x="37.1309%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (13 samples, 0.01%)</title><rect x="36.8841%" y="597" width="0.0105%" height="15" fill="rgb(219,142,25)" fg:x="45532" fg:w="13"/><text x="37.1341%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="36.8947%" y="581" width="0.0113%" height="15" fill="rgb(240,73,43)" fg:x="45545" fg:w="14"/><text x="37.1447%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="36.8947%" y="565" width="0.0113%" height="15" fill="rgb(214,114,15)" fg:x="45545" fg:w="14"/><text x="37.1447%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (66 samples, 0.05%)</title><rect x="36.8647%" y="677" width="0.0535%" height="15" fill="rgb(207,130,4)" fg:x="45508" fg:w="66"/><text x="37.1147%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (66 samples, 0.05%)</title><rect x="36.8647%" y="661" width="0.0535%" height="15" fill="rgb(221,25,40)" fg:x="45508" fg:w="66"/><text x="37.1147%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (66 samples, 0.05%)</title><rect x="36.8647%" y="645" width="0.0535%" height="15" fill="rgb(241,184,7)" fg:x="45508" fg:w="66"/><text x="37.1147%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (66 samples, 0.05%)</title><rect x="36.8647%" y="629" width="0.0535%" height="15" fill="rgb(235,159,4)" fg:x="45508" fg:w="66"/><text x="37.1147%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (29 samples, 0.02%)</title><rect x="36.8947%" y="613" width="0.0235%" height="15" fill="rgb(214,87,48)" fg:x="45545" fg:w="29"/><text x="37.1447%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (29 samples, 0.02%)</title><rect x="36.8947%" y="597" width="0.0235%" height="15" fill="rgb(246,198,24)" fg:x="45545" fg:w="29"/><text x="37.1447%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (15 samples, 0.01%)</title><rect x="36.9060%" y="581" width="0.0122%" height="15" fill="rgb(209,66,40)" fg:x="45559" fg:w="15"/><text x="37.1560%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (240 samples, 0.19%)</title><rect x="36.7707%" y="709" width="0.1944%" height="15" fill="rgb(233,147,39)" fg:x="45392" fg:w="240"/><text x="37.0207%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (230 samples, 0.19%)</title><rect x="36.7788%" y="693" width="0.1863%" height="15" fill="rgb(231,145,52)" fg:x="45402" fg:w="230"/><text x="37.0288%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (58 samples, 0.05%)</title><rect x="36.9182%" y="677" width="0.0470%" height="15" fill="rgb(206,20,26)" fg:x="45574" fg:w="58"/><text x="37.1682%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (52 samples, 0.04%)</title><rect x="36.9230%" y="661" width="0.0421%" height="15" fill="rgb(238,220,4)" fg:x="45580" fg:w="52"/><text x="37.1730%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (44 samples, 0.04%)</title><rect x="36.9295%" y="645" width="0.0356%" height="15" fill="rgb(252,195,42)" fg:x="45588" fg:w="44"/><text x="37.1795%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (37 samples, 0.03%)</title><rect x="36.9352%" y="629" width="0.0300%" height="15" fill="rgb(209,10,6)" fg:x="45595" fg:w="37"/><text x="37.1852%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (37 samples, 0.03%)</title><rect x="36.9352%" y="613" width="0.0300%" height="15" fill="rgb(229,3,52)" fg:x="45595" fg:w="37"/><text x="37.1852%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (37 samples, 0.03%)</title><rect x="36.9352%" y="597" width="0.0300%" height="15" fill="rgb(253,49,37)" fg:x="45595" fg:w="37"/><text x="37.1852%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (14 samples, 0.01%)</title><rect x="36.9538%" y="581" width="0.0113%" height="15" fill="rgb(240,103,49)" fg:x="45618" fg:w="14"/><text x="37.2038%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="36.9538%" y="565" width="0.0113%" height="15" fill="rgb(250,182,30)" fg:x="45618" fg:w="14"/><text x="37.2038%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="37.3054%" y="469" width="0.0219%" height="15" fill="rgb(248,8,30)" fg:x="46052" fg:w="27"/><text x="37.5554%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (423 samples, 0.34%)</title><rect x="36.9911%" y="629" width="0.3427%" height="15" fill="rgb(237,120,30)" fg:x="45664" fg:w="423"/><text x="37.2411%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (423 samples, 0.34%)</title><rect x="36.9911%" y="613" width="0.3427%" height="15" fill="rgb(221,146,34)" fg:x="45664" fg:w="423"/><text x="37.2411%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (381 samples, 0.31%)</title><rect x="37.0251%" y="597" width="0.3086%" height="15" fill="rgb(242,55,13)" fg:x="45706" fg:w="381"/><text x="37.2751%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (323 samples, 0.26%)</title><rect x="37.0721%" y="581" width="0.2617%" height="15" fill="rgb(242,112,31)" fg:x="45764" fg:w="323"/><text x="37.3221%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (312 samples, 0.25%)</title><rect x="37.0810%" y="565" width="0.2527%" height="15" fill="rgb(249,192,27)" fg:x="45775" fg:w="312"/><text x="37.3310%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (312 samples, 0.25%)</title><rect x="37.0810%" y="549" width="0.2527%" height="15" fill="rgb(208,204,44)" fg:x="45775" fg:w="312"/><text x="37.3310%" y="559.50"></text></g><g><title>alloc::alloc::alloc (312 samples, 0.25%)</title><rect x="37.0810%" y="533" width="0.2527%" height="15" fill="rgb(208,93,54)" fg:x="45775" fg:w="312"/><text x="37.3310%" y="543.50"></text></g><g><title>__rg_alloc (312 samples, 0.25%)</title><rect x="37.0810%" y="517" width="0.2527%" height="15" fill="rgb(242,1,31)" fg:x="45775" fg:w="312"/><text x="37.3310%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (312 samples, 0.25%)</title><rect x="37.0810%" y="501" width="0.2527%" height="15" fill="rgb(241,83,25)" fg:x="45775" fg:w="312"/><text x="37.3310%" y="511.50"></text></g><g><title>sn_rust_alloc (310 samples, 0.25%)</title><rect x="37.0826%" y="485" width="0.2511%" height="15" fill="rgb(205,169,50)" fg:x="45777" fg:w="310"/><text x="37.3326%" y="495.50"></text></g><g><title>abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt;::new (19 samples, 0.02%)</title><rect x="37.3337%" y="629" width="0.0154%" height="15" fill="rgb(239,186,37)" fg:x="46087" fg:w="19"/><text x="37.5837%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (36 samples, 0.03%)</title><rect x="37.3678%" y="565" width="0.0292%" height="15" fill="rgb(205,221,10)" fg:x="46129" fg:w="36"/><text x="37.6178%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="37.3840%" y="549" width="0.0130%" height="15" fill="rgb(218,196,15)" fg:x="46149" fg:w="16"/><text x="37.6340%" y="559.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="37.3840%" y="533" width="0.0130%" height="15" fill="rgb(218,196,35)" fg:x="46149" fg:w="16"/><text x="37.6340%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="37.3840%" y="517" width="0.0130%" height="15" fill="rgb(233,63,24)" fg:x="46149" fg:w="16"/><text x="37.6340%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="37.3840%" y="501" width="0.0130%" height="15" fill="rgb(225,8,4)" fg:x="46149" fg:w="16"/><text x="37.6340%" y="511.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="37.3840%" y="485" width="0.0130%" height="15" fill="rgb(234,105,35)" fg:x="46149" fg:w="16"/><text x="37.6340%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="37.3840%" y="469" width="0.0130%" height="15" fill="rgb(236,21,32)" fg:x="46149" fg:w="16"/><text x="37.6340%" y="479.50"></text></g><g><title>sn_rust_dealloc (90 samples, 0.07%)</title><rect x="37.3969%" y="565" width="0.0729%" height="15" fill="rgb(228,109,6)" fg:x="46165" fg:w="90"/><text x="37.6469%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (160 samples, 0.13%)</title><rect x="37.3491%" y="581" width="0.1296%" height="15" fill="rgb(229,215,31)" fg:x="46106" fg:w="160"/><text x="37.5991%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (237 samples, 0.19%)</title><rect x="37.3491%" y="629" width="0.1920%" height="15" fill="rgb(221,52,54)" fg:x="46106" fg:w="237"/><text x="37.5991%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (237 samples, 0.19%)</title><rect x="37.3491%" y="613" width="0.1920%" height="15" fill="rgb(252,129,43)" fg:x="46106" fg:w="237"/><text x="37.5991%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (237 samples, 0.19%)</title><rect x="37.3491%" y="597" width="0.1920%" height="15" fill="rgb(248,183,27)" fg:x="46106" fg:w="237"/><text x="37.5991%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (77 samples, 0.06%)</title><rect x="37.4787%" y="581" width="0.0624%" height="15" fill="rgb(250,0,22)" fg:x="46266" fg:w="77"/><text x="37.7287%" y="591.50"></text></g><g><title>core::ptr::read (77 samples, 0.06%)</title><rect x="37.4787%" y="565" width="0.0624%" height="15" fill="rgb(213,166,10)" fg:x="46266" fg:w="77"/><text x="37.7287%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (744 samples, 0.60%)</title><rect x="36.9652%" y="709" width="0.6027%" height="15" fill="rgb(207,163,36)" fg:x="45632" fg:w="744"/><text x="37.2152%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (734 samples, 0.59%)</title><rect x="36.9733%" y="693" width="0.5946%" height="15" fill="rgb(208,122,22)" fg:x="45642" fg:w="734"/><text x="37.2233%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (732 samples, 0.59%)</title><rect x="36.9749%" y="677" width="0.5930%" height="15" fill="rgb(207,104,49)" fg:x="45644" fg:w="732"/><text x="37.2249%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (720 samples, 0.58%)</title><rect x="36.9846%" y="661" width="0.5833%" height="15" fill="rgb(248,211,50)" fg:x="45656" fg:w="720"/><text x="37.2346%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (720 samples, 0.58%)</title><rect x="36.9846%" y="645" width="0.5833%" height="15" fill="rgb(217,13,45)" fg:x="45656" fg:w="720"/><text x="37.2346%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (33 samples, 0.03%)</title><rect x="37.5411%" y="629" width="0.0267%" height="15" fill="rgb(211,216,49)" fg:x="46343" fg:w="33"/><text x="37.7911%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (22 samples, 0.02%)</title><rect x="37.5500%" y="613" width="0.0178%" height="15" fill="rgb(221,58,53)" fg:x="46354" fg:w="22"/><text x="37.8000%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (22 samples, 0.02%)</title><rect x="37.5500%" y="597" width="0.0178%" height="15" fill="rgb(220,112,41)" fg:x="46354" fg:w="22"/><text x="37.8000%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="37.6132%" y="581" width="0.0105%" height="15" fill="rgb(236,38,28)" fg:x="46432" fg:w="13"/><text x="37.8632%" y="591.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="37.6132%" y="565" width="0.0105%" height="15" fill="rgb(227,195,22)" fg:x="46432" fg:w="13"/><text x="37.8632%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="37.6132%" y="549" width="0.0105%" height="15" fill="rgb(214,55,33)" fg:x="46432" fg:w="13"/><text x="37.8632%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="37.6132%" y="533" width="0.0105%" height="15" fill="rgb(248,80,13)" fg:x="46432" fg:w="13"/><text x="37.8632%" y="543.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="37.6132%" y="517" width="0.0105%" height="15" fill="rgb(238,52,6)" fg:x="46432" fg:w="13"/><text x="37.8632%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="37.6132%" y="501" width="0.0105%" height="15" fill="rgb(224,198,47)" fg:x="46432" fg:w="13"/><text x="37.8632%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (58 samples, 0.05%)</title><rect x="37.5954%" y="597" width="0.0470%" height="15" fill="rgb(233,171,20)" fg:x="46410" fg:w="58"/><text x="37.8454%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="37.6237%" y="581" width="0.0186%" height="15" fill="rgb(241,30,25)" fg:x="46445" fg:w="23"/><text x="37.8737%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (23 samples, 0.02%)</title><rect x="37.6237%" y="565" width="0.0186%" height="15" fill="rgb(207,171,38)" fg:x="46445" fg:w="23"/><text x="37.8737%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (23 samples, 0.02%)</title><rect x="37.6237%" y="549" width="0.0186%" height="15" fill="rgb(234,70,1)" fg:x="46445" fg:w="23"/><text x="37.8737%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (21 samples, 0.02%)</title><rect x="37.6254%" y="533" width="0.0170%" height="15" fill="rgb(232,178,18)" fg:x="46447" fg:w="21"/><text x="37.8754%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (21 samples, 0.02%)</title><rect x="37.6254%" y="517" width="0.0170%" height="15" fill="rgb(241,78,40)" fg:x="46447" fg:w="21"/><text x="37.8754%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="37.6254%" y="501" width="0.0170%" height="15" fill="rgb(222,35,25)" fg:x="46447" fg:w="21"/><text x="37.8754%" y="511.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.09%)</title><rect x="37.6424%" y="597" width="0.0940%" height="15" fill="rgb(207,92,16)" fg:x="46468" fg:w="116"/><text x="37.8924%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (1,196 samples, 0.97%)</title><rect x="36.7707%" y="725" width="0.9688%" height="15" fill="rgb(216,59,51)" fg:x="45392" fg:w="1196"/><text x="37.0207%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (212 samples, 0.17%)</title><rect x="37.5678%" y="709" width="0.1717%" height="15" fill="rgb(213,80,28)" fg:x="46376" fg:w="212"/><text x="37.8178%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (212 samples, 0.17%)</title><rect x="37.5678%" y="693" width="0.1717%" height="15" fill="rgb(220,93,7)" fg:x="46376" fg:w="212"/><text x="37.8178%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (212 samples, 0.17%)</title><rect x="37.5678%" y="677" width="0.1717%" height="15" fill="rgb(225,24,44)" fg:x="46376" fg:w="212"/><text x="37.8178%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (195 samples, 0.16%)</title><rect x="37.5816%" y="661" width="0.1580%" height="15" fill="rgb(243,74,40)" fg:x="46393" fg:w="195"/><text x="37.8316%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (193 samples, 0.16%)</title><rect x="37.5832%" y="645" width="0.1563%" height="15" fill="rgb(228,39,7)" fg:x="46395" fg:w="193"/><text x="37.8332%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (193 samples, 0.16%)</title><rect x="37.5832%" y="629" width="0.1563%" height="15" fill="rgb(227,79,8)" fg:x="46395" fg:w="193"/><text x="37.8332%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (193 samples, 0.16%)</title><rect x="37.5832%" y="613" width="0.1563%" height="15" fill="rgb(236,58,11)" fg:x="46395" fg:w="193"/><text x="37.8332%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (17 samples, 0.01%)</title><rect x="37.7396%" y="725" width="0.0138%" height="15" fill="rgb(249,63,35)" fg:x="46588" fg:w="17"/><text x="37.9896%" y="735.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SinkReporter::increment_in (15 samples, 0.01%)</title><rect x="37.7533%" y="725" width="0.0122%" height="15" fill="rgb(252,114,16)" fg:x="46605" fg:w="15"/><text x="38.0033%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (21,437 samples, 17.37%)</title><rect x="20.4033%" y="741" width="17.3655%" height="15" fill="rgb(254,151,24)" fg:x="25187" fg:w="21437"/><text x="20.6533%" y="751.50">tremor_runtime::connectors:..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (439 samples, 0.36%)</title><rect x="37.9267%" y="629" width="0.3556%" height="15" fill="rgb(253,54,39)" fg:x="46819" fg:w="439"/><text x="38.1767%" y="639.50"></text></g><g><title>core::ptr::read (412 samples, 0.33%)</title><rect x="37.9486%" y="613" width="0.3337%" height="15" fill="rgb(243,25,45)" fg:x="46846" fg:w="412"/><text x="38.1986%" y="623.50"></text></g><g><title>[libc-2.31.so] (401 samples, 0.32%)</title><rect x="37.9575%" y="597" width="0.3248%" height="15" fill="rgb(234,134,9)" fg:x="46857" fg:w="401"/><text x="38.2075%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (210 samples, 0.17%)</title><rect x="38.2888%" y="501" width="0.1701%" height="15" fill="rgb(227,166,31)" fg:x="47266" fg:w="210"/><text x="38.5388%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (210 samples, 0.17%)</title><rect x="38.2888%" y="485" width="0.1701%" height="15" fill="rgb(245,143,41)" fg:x="47266" fg:w="210"/><text x="38.5388%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (210 samples, 0.17%)</title><rect x="38.2888%" y="469" width="0.1701%" height="15" fill="rgb(238,181,32)" fg:x="47266" fg:w="210"/><text x="38.5388%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (207 samples, 0.17%)</title><rect x="38.2912%" y="453" width="0.1677%" height="15" fill="rgb(224,113,18)" fg:x="47269" fg:w="207"/><text x="38.5412%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (207 samples, 0.17%)</title><rect x="38.2912%" y="437" width="0.1677%" height="15" fill="rgb(240,229,28)" fg:x="47269" fg:w="207"/><text x="38.5412%" y="447.50"></text></g><g><title>alloc::alloc::alloc (207 samples, 0.17%)</title><rect x="38.2912%" y="421" width="0.1677%" height="15" fill="rgb(250,185,3)" fg:x="47269" fg:w="207"/><text x="38.5412%" y="431.50"></text></g><g><title>__rg_alloc (207 samples, 0.17%)</title><rect x="38.2912%" y="405" width="0.1677%" height="15" fill="rgb(212,59,25)" fg:x="47269" fg:w="207"/><text x="38.5412%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (207 samples, 0.17%)</title><rect x="38.2912%" y="389" width="0.1677%" height="15" fill="rgb(221,87,20)" fg:x="47269" fg:w="207"/><text x="38.5412%" y="399.50"></text></g><g><title>sn_rust_alloc (202 samples, 0.16%)</title><rect x="38.2953%" y="373" width="0.1636%" height="15" fill="rgb(213,74,28)" fg:x="47274" fg:w="202"/><text x="38.5453%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (246 samples, 0.20%)</title><rect x="38.2888%" y="629" width="0.1993%" height="15" fill="rgb(224,132,34)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (246 samples, 0.20%)</title><rect x="38.2888%" y="613" width="0.1993%" height="15" fill="rgb(222,101,24)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (246 samples, 0.20%)</title><rect x="38.2888%" y="597" width="0.1993%" height="15" fill="rgb(254,142,4)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (246 samples, 0.20%)</title><rect x="38.2888%" y="581" width="0.1993%" height="15" fill="rgb(230,229,49)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (246 samples, 0.20%)</title><rect x="38.2888%" y="565" width="0.1993%" height="15" fill="rgb(238,70,47)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (246 samples, 0.20%)</title><rect x="38.2888%" y="549" width="0.1993%" height="15" fill="rgb(231,160,17)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (246 samples, 0.20%)</title><rect x="38.2888%" y="533" width="0.1993%" height="15" fill="rgb(218,68,53)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (246 samples, 0.20%)</title><rect x="38.2888%" y="517" width="0.1993%" height="15" fill="rgb(236,111,10)" fg:x="47266" fg:w="246"/><text x="38.5388%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (36 samples, 0.03%)</title><rect x="38.4589%" y="501" width="0.0292%" height="15" fill="rgb(224,34,41)" fg:x="47476" fg:w="36"/><text x="38.7089%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.03%)</title><rect x="38.4589%" y="485" width="0.0292%" height="15" fill="rgb(241,118,19)" fg:x="47476" fg:w="36"/><text x="38.7089%" y="495.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.02%)</title><rect x="38.4646%" y="469" width="0.0235%" height="15" fill="rgb(238,129,25)" fg:x="47483" fg:w="29"/><text x="38.7146%" y="479.50"></text></g><g><title>[libc-2.31.so] (544 samples, 0.44%)</title><rect x="38.4881%" y="629" width="0.4407%" height="15" fill="rgb(238,22,31)" fg:x="47512" fg:w="544"/><text x="38.7381%" y="639.50"></text></g><g><title>[libc-2.31.so] (316 samples, 0.26%)</title><rect x="38.9361%" y="613" width="0.2560%" height="15" fill="rgb(222,174,48)" fg:x="48065" fg:w="316"/><text x="39.1861%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (401 samples, 0.32%)</title><rect x="38.9288%" y="629" width="0.3248%" height="15" fill="rgb(206,152,40)" fg:x="48056" fg:w="401"/><text x="39.1788%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (76 samples, 0.06%)</title><rect x="39.1920%" y="613" width="0.0616%" height="15" fill="rgb(218,99,54)" fg:x="48381" fg:w="76"/><text x="39.4420%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76 samples, 0.06%)</title><rect x="39.1920%" y="597" width="0.0616%" height="15" fill="rgb(220,174,26)" fg:x="48381" fg:w="76"/><text x="39.4420%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 0.06%)</title><rect x="39.1920%" y="581" width="0.0616%" height="15" fill="rgb(245,116,9)" fg:x="48381" fg:w="76"/><text x="39.4420%" y="591.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 0.06%)</title><rect x="39.1937%" y="565" width="0.0599%" height="15" fill="rgb(209,72,35)" fg:x="48383" fg:w="74"/><text x="39.4437%" y="575.50"></text></g><g><title>__rg_alloc (74 samples, 0.06%)</title><rect x="39.1937%" y="549" width="0.0599%" height="15" fill="rgb(226,126,21)" fg:x="48383" fg:w="74"/><text x="39.4437%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (74 samples, 0.06%)</title><rect x="39.1937%" y="533" width="0.0599%" height="15" fill="rgb(227,192,1)" fg:x="48383" fg:w="74"/><text x="39.4437%" y="543.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="39.1937%" y="517" width="0.0599%" height="15" fill="rgb(237,180,29)" fg:x="48383" fg:w="74"/><text x="39.4437%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="39.2536%" y="613" width="0.0113%" height="15" fill="rgb(230,197,35)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="39.2536%" y="597" width="0.0113%" height="15" fill="rgb(246,193,31)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="607.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="39.2536%" y="581" width="0.0113%" height="15" fill="rgb(241,36,4)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="39.2536%" y="565" width="0.0113%" height="15" fill="rgb(241,130,17)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="39.2536%" y="549" width="0.0113%" height="15" fill="rgb(206,137,32)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="39.2536%" y="533" width="0.0113%" height="15" fill="rgb(237,228,51)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="39.2536%" y="517" width="0.0113%" height="15" fill="rgb(243,6,42)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="527.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="39.2536%" y="501" width="0.0113%" height="15" fill="rgb(251,74,28)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="39.2536%" y="485" width="0.0113%" height="15" fill="rgb(218,20,49)" fg:x="48457" fg:w="14"/><text x="39.5036%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (83 samples, 0.07%)</title><rect x="39.2536%" y="629" width="0.0672%" height="15" fill="rgb(238,28,14)" fg:x="48457" fg:w="83"/><text x="39.5036%" y="639.50"></text></g><g><title>sn_rust_dealloc (69 samples, 0.06%)</title><rect x="39.2649%" y="613" width="0.0559%" height="15" fill="rgb(229,40,46)" fg:x="48471" fg:w="69"/><text x="39.5149%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (48 samples, 0.04%)</title><rect x="39.3362%" y="629" width="0.0389%" height="15" fill="rgb(244,195,20)" fg:x="48559" fg:w="48"/><text x="39.5862%" y="639.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (48 samples, 0.04%)</title><rect x="39.3362%" y="613" width="0.0389%" height="15" fill="rgb(253,56,35)" fg:x="48559" fg:w="48"/><text x="39.5862%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (45 samples, 0.04%)</title><rect x="39.3387%" y="597" width="0.0365%" height="15" fill="rgb(210,149,44)" fg:x="48562" fg:w="45"/><text x="39.5887%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (45 samples, 0.04%)</title><rect x="39.3387%" y="581" width="0.0365%" height="15" fill="rgb(240,135,12)" fg:x="48562" fg:w="45"/><text x="39.5887%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (34 samples, 0.03%)</title><rect x="39.3476%" y="565" width="0.0275%" height="15" fill="rgb(251,24,50)" fg:x="48573" fg:w="34"/><text x="39.5976%" y="575.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (34 samples, 0.03%)</title><rect x="39.3476%" y="549" width="0.0275%" height="15" fill="rgb(243,200,47)" fg:x="48573" fg:w="34"/><text x="39.5976%" y="559.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (34 samples, 0.03%)</title><rect x="39.3476%" y="533" width="0.0275%" height="15" fill="rgb(224,166,26)" fg:x="48573" fg:w="34"/><text x="39.5976%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (32 samples, 0.03%)</title><rect x="39.3492%" y="517" width="0.0259%" height="15" fill="rgb(233,0,47)" fg:x="48575" fg:w="32"/><text x="39.5992%" y="527.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (23 samples, 0.02%)</title><rect x="39.3565%" y="501" width="0.0186%" height="15" fill="rgb(253,80,5)" fg:x="48584" fg:w="23"/><text x="39.6065%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,037 samples, 1.65%)</title><rect x="37.7687%" y="661" width="1.6501%" height="15" fill="rgb(214,133,25)" fg:x="46624" fg:w="2037"/><text x="38.0187%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,037 samples, 1.65%)</title><rect x="37.7687%" y="645" width="1.6501%" height="15" fill="rgb(209,27,14)" fg:x="46624" fg:w="2037"/><text x="38.0187%" y="655.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (48 samples, 0.04%)</title><rect x="39.3800%" y="629" width="0.0389%" height="15" fill="rgb(219,102,51)" fg:x="48613" fg:w="48"/><text x="39.6300%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (48 samples, 0.04%)</title><rect x="39.3800%" y="613" width="0.0389%" height="15" fill="rgb(237,18,16)" fg:x="48613" fg:w="48"/><text x="39.6300%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 0.04%)</title><rect x="39.3800%" y="597" width="0.0389%" height="15" fill="rgb(241,85,17)" fg:x="48613" fg:w="48"/><text x="39.6300%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (32 samples, 0.03%)</title><rect x="39.3929%" y="581" width="0.0259%" height="15" fill="rgb(236,90,42)" fg:x="48629" fg:w="32"/><text x="39.6429%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,085 samples, 1.69%)</title><rect x="37.7687%" y="725" width="1.6890%" height="15" fill="rgb(249,57,21)" fg:x="46624" fg:w="2085"/><text x="38.0187%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,085 samples, 1.69%)</title><rect x="37.7687%" y="709" width="1.6890%" height="15" fill="rgb(243,12,36)" fg:x="46624" fg:w="2085"/><text x="38.0187%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,085 samples, 1.69%)</title><rect x="37.7687%" y="693" width="1.6890%" height="15" fill="rgb(253,128,47)" fg:x="46624" fg:w="2085"/><text x="38.0187%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,085 samples, 1.69%)</title><rect x="37.7687%" y="677" width="1.6890%" height="15" fill="rgb(207,33,20)" fg:x="46624" fg:w="2085"/><text x="38.0187%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (47 samples, 0.04%)</title><rect x="39.4197%" y="661" width="0.0381%" height="15" fill="rgb(233,215,35)" fg:x="48662" fg:w="47"/><text x="39.6697%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (40 samples, 0.03%)</title><rect x="39.4253%" y="645" width="0.0324%" height="15" fill="rgb(249,188,52)" fg:x="48669" fg:w="40"/><text x="39.6753%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (36 samples, 0.03%)</title><rect x="39.4286%" y="629" width="0.0292%" height="15" fill="rgb(225,12,32)" fg:x="48673" fg:w="36"/><text x="39.6786%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (36 samples, 0.03%)</title><rect x="39.4286%" y="613" width="0.0292%" height="15" fill="rgb(247,98,14)" fg:x="48673" fg:w="36"/><text x="39.6786%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (36 samples, 0.03%)</title><rect x="39.4286%" y="597" width="0.0292%" height="15" fill="rgb(247,219,48)" fg:x="48673" fg:w="36"/><text x="39.6786%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (16 samples, 0.01%)</title><rect x="39.4448%" y="581" width="0.0130%" height="15" fill="rgb(253,60,48)" fg:x="48693" fg:w="16"/><text x="39.6948%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (14 samples, 0.01%)</title><rect x="40.3918%" y="341" width="0.0113%" height="15" fill="rgb(245,15,52)" fg:x="49862" fg:w="14"/><text x="40.6418%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="40.6672%" y="133" width="0.0211%" height="15" fill="rgb(220,133,28)" fg:x="50202" fg:w="26"/><text x="40.9172%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (353 samples, 0.29%)</title><rect x="40.4031%" y="277" width="0.2860%" height="15" fill="rgb(217,180,4)" fg:x="49876" fg:w="353"/><text x="40.6531%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (353 samples, 0.29%)</title><rect x="40.4031%" y="261" width="0.2860%" height="15" fill="rgb(251,24,1)" fg:x="49876" fg:w="353"/><text x="40.6531%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (353 samples, 0.29%)</title><rect x="40.4031%" y="245" width="0.2860%" height="15" fill="rgb(212,185,49)" fg:x="49876" fg:w="353"/><text x="40.6531%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (349 samples, 0.28%)</title><rect x="40.4063%" y="229" width="0.2827%" height="15" fill="rgb(215,175,22)" fg:x="49880" fg:w="349"/><text x="40.6563%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (349 samples, 0.28%)</title><rect x="40.4063%" y="213" width="0.2827%" height="15" fill="rgb(250,205,14)" fg:x="49880" fg:w="349"/><text x="40.6563%" y="223.50"></text></g><g><title>alloc::alloc::alloc (344 samples, 0.28%)</title><rect x="40.4104%" y="197" width="0.2787%" height="15" fill="rgb(225,211,22)" fg:x="49885" fg:w="344"/><text x="40.6604%" y="207.50"></text></g><g><title>__rg_alloc (344 samples, 0.28%)</title><rect x="40.4104%" y="181" width="0.2787%" height="15" fill="rgb(251,179,42)" fg:x="49885" fg:w="344"/><text x="40.6604%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (344 samples, 0.28%)</title><rect x="40.4104%" y="165" width="0.2787%" height="15" fill="rgb(208,216,51)" fg:x="49885" fg:w="344"/><text x="40.6604%" y="175.50"></text></g><g><title>sn_rust_alloc (325 samples, 0.26%)</title><rect x="40.4258%" y="149" width="0.2633%" height="15" fill="rgb(235,36,11)" fg:x="49904" fg:w="325"/><text x="40.6758%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (425 samples, 0.34%)</title><rect x="40.3820%" y="389" width="0.3443%" height="15" fill="rgb(213,189,28)" fg:x="49850" fg:w="425"/><text x="40.6320%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (419 samples, 0.34%)</title><rect x="40.3869%" y="373" width="0.3394%" height="15" fill="rgb(227,203,42)" fg:x="49856" fg:w="419"/><text x="40.6369%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (413 samples, 0.33%)</title><rect x="40.3918%" y="357" width="0.3346%" height="15" fill="rgb(244,72,36)" fg:x="49862" fg:w="413"/><text x="40.6418%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (399 samples, 0.32%)</title><rect x="40.4031%" y="341" width="0.3232%" height="15" fill="rgb(213,53,17)" fg:x="49876" fg:w="399"/><text x="40.6531%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (399 samples, 0.32%)</title><rect x="40.4031%" y="325" width="0.3232%" height="15" fill="rgb(207,167,3)" fg:x="49876" fg:w="399"/><text x="40.6531%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (399 samples, 0.32%)</title><rect x="40.4031%" y="309" width="0.3232%" height="15" fill="rgb(216,98,30)" fg:x="49876" fg:w="399"/><text x="40.6531%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (399 samples, 0.32%)</title><rect x="40.4031%" y="293" width="0.3232%" height="15" fill="rgb(236,123,15)" fg:x="49876" fg:w="399"/><text x="40.6531%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (46 samples, 0.04%)</title><rect x="40.6890%" y="277" width="0.0373%" height="15" fill="rgb(248,81,50)" fg:x="50229" fg:w="46"/><text x="40.9390%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.04%)</title><rect x="40.6890%" y="261" width="0.0373%" height="15" fill="rgb(214,120,4)" fg:x="50229" fg:w="46"/><text x="40.9390%" y="271.50"></text></g><g><title>[libc-2.31.so] (38 samples, 0.03%)</title><rect x="40.6955%" y="245" width="0.0308%" height="15" fill="rgb(208,179,34)" fg:x="50237" fg:w="38"/><text x="40.9455%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (28 samples, 0.02%)</title><rect x="40.7295%" y="373" width="0.0227%" height="15" fill="rgb(227,140,7)" fg:x="50279" fg:w="28"/><text x="40.9795%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (24 samples, 0.02%)</title><rect x="40.7328%" y="357" width="0.0194%" height="15" fill="rgb(214,22,6)" fg:x="50283" fg:w="24"/><text x="40.9828%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (14 samples, 0.01%)</title><rect x="40.7628%" y="245" width="0.0113%" height="15" fill="rgb(207,137,27)" fg:x="50320" fg:w="14"/><text x="41.0128%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (65 samples, 0.05%)</title><rect x="40.8794%" y="37" width="0.0527%" height="15" fill="rgb(210,8,46)" fg:x="50464" fg:w="65"/><text x="41.1294%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (196 samples, 0.16%)</title><rect x="40.7741%" y="181" width="0.1588%" height="15" fill="rgb(240,16,54)" fg:x="50334" fg:w="196"/><text x="41.0241%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (196 samples, 0.16%)</title><rect x="40.7741%" y="165" width="0.1588%" height="15" fill="rgb(211,209,29)" fg:x="50334" fg:w="196"/><text x="41.0241%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (196 samples, 0.16%)</title><rect x="40.7741%" y="149" width="0.1588%" height="15" fill="rgb(226,228,24)" fg:x="50334" fg:w="196"/><text x="41.0241%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (194 samples, 0.16%)</title><rect x="40.7757%" y="133" width="0.1572%" height="15" fill="rgb(222,84,9)" fg:x="50336" fg:w="194"/><text x="41.0257%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (194 samples, 0.16%)</title><rect x="40.7757%" y="117" width="0.1572%" height="15" fill="rgb(234,203,30)" fg:x="50336" fg:w="194"/><text x="41.0257%" y="127.50"></text></g><g><title>alloc::alloc::alloc (193 samples, 0.16%)</title><rect x="40.7765%" y="101" width="0.1563%" height="15" fill="rgb(238,109,14)" fg:x="50337" fg:w="193"/><text x="41.0265%" y="111.50"></text></g><g><title>__rg_alloc (193 samples, 0.16%)</title><rect x="40.7765%" y="85" width="0.1563%" height="15" fill="rgb(233,206,34)" fg:x="50337" fg:w="193"/><text x="41.0265%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (193 samples, 0.16%)</title><rect x="40.7765%" y="69" width="0.1563%" height="15" fill="rgb(220,167,47)" fg:x="50337" fg:w="193"/><text x="41.0265%" y="79.50"></text></g><g><title>sn_rust_alloc (187 samples, 0.15%)</title><rect x="40.7814%" y="53" width="0.1515%" height="15" fill="rgb(238,105,10)" fg:x="50343" fg:w="187"/><text x="41.0314%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (250 samples, 0.20%)</title><rect x="40.7628%" y="293" width="0.2025%" height="15" fill="rgb(213,227,17)" fg:x="50320" fg:w="250"/><text x="41.0128%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (250 samples, 0.20%)</title><rect x="40.7628%" y="277" width="0.2025%" height="15" fill="rgb(217,132,38)" fg:x="50320" fg:w="250"/><text x="41.0128%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (250 samples, 0.20%)</title><rect x="40.7628%" y="261" width="0.2025%" height="15" fill="rgb(242,146,4)" fg:x="50320" fg:w="250"/><text x="41.0128%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (236 samples, 0.19%)</title><rect x="40.7741%" y="245" width="0.1912%" height="15" fill="rgb(212,61,9)" fg:x="50334" fg:w="236"/><text x="41.0241%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (236 samples, 0.19%)</title><rect x="40.7741%" y="229" width="0.1912%" height="15" fill="rgb(247,126,22)" fg:x="50334" fg:w="236"/><text x="41.0241%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (236 samples, 0.19%)</title><rect x="40.7741%" y="213" width="0.1912%" height="15" fill="rgb(220,196,2)" fg:x="50334" fg:w="236"/><text x="41.0241%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (236 samples, 0.19%)</title><rect x="40.7741%" y="197" width="0.1912%" height="15" fill="rgb(208,46,4)" fg:x="50334" fg:w="236"/><text x="41.0241%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (40 samples, 0.03%)</title><rect x="40.9329%" y="181" width="0.0324%" height="15" fill="rgb(252,104,46)" fg:x="50530" fg:w="40"/><text x="41.1829%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40 samples, 0.03%)</title><rect x="40.9329%" y="165" width="0.0324%" height="15" fill="rgb(237,152,48)" fg:x="50530" fg:w="40"/><text x="41.1829%" y="175.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.03%)</title><rect x="40.9394%" y="149" width="0.0259%" height="15" fill="rgb(221,59,37)" fg:x="50538" fg:w="32"/><text x="41.1894%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="40.9653%" y="293" width="0.0284%" height="15" fill="rgb(209,202,51)" fg:x="50570" fg:w="35"/><text x="41.2153%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="40.9774%" y="277" width="0.0162%" height="15" fill="rgb(228,81,30)" fg:x="50585" fg:w="20"/><text x="41.2274%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="40.9774%" y="261" width="0.0162%" height="15" fill="rgb(227,42,39)" fg:x="50585" fg:w="20"/><text x="41.2274%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (110 samples, 0.09%)</title><rect x="41.0017%" y="245" width="0.0891%" height="15" fill="rgb(221,26,2)" fg:x="50615" fg:w="110"/><text x="41.2517%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (110 samples, 0.09%)</title><rect x="41.0017%" y="229" width="0.0891%" height="15" fill="rgb(254,61,31)" fg:x="50615" fg:w="110"/><text x="41.2517%" y="239.50"></text></g><g><title>alloc::alloc::alloc (105 samples, 0.09%)</title><rect x="41.0058%" y="213" width="0.0851%" height="15" fill="rgb(222,173,38)" fg:x="50620" fg:w="105"/><text x="41.2558%" y="223.50"></text></g><g><title>__rg_alloc (105 samples, 0.09%)</title><rect x="41.0058%" y="197" width="0.0851%" height="15" fill="rgb(218,50,12)" fg:x="50620" fg:w="105"/><text x="41.2558%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (105 samples, 0.09%)</title><rect x="41.0058%" y="181" width="0.0851%" height="15" fill="rgb(223,88,40)" fg:x="50620" fg:w="105"/><text x="41.2558%" y="191.50"></text></g><g><title>sn_rust_alloc (98 samples, 0.08%)</title><rect x="41.0115%" y="165" width="0.0794%" height="15" fill="rgb(237,54,19)" fg:x="50627" fg:w="98"/><text x="41.2615%" y="175.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="41.0706%" y="149" width="0.0203%" height="15" fill="rgb(251,129,25)" fg:x="50700" fg:w="25"/><text x="41.3206%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (124 samples, 0.10%)</title><rect x="40.9936%" y="293" width="0.1004%" height="15" fill="rgb(238,97,19)" fg:x="50605" fg:w="124"/><text x="41.2436%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (114 samples, 0.09%)</title><rect x="41.0017%" y="277" width="0.0923%" height="15" fill="rgb(240,169,18)" fg:x="50615" fg:w="114"/><text x="41.2517%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (114 samples, 0.09%)</title><rect x="41.0017%" y="261" width="0.0923%" height="15" fill="rgb(230,187,49)" fg:x="50615" fg:w="114"/><text x="41.2517%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,599 samples, 1.30%)</title><rect x="39.8069%" y="405" width="1.2953%" height="15" fill="rgb(209,44,26)" fg:x="49140" fg:w="1599"/><text x="40.0569%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (464 samples, 0.38%)</title><rect x="40.7263%" y="389" width="0.3759%" height="15" fill="rgb(244,0,6)" fg:x="50275" fg:w="464"/><text x="40.9763%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (432 samples, 0.35%)</title><rect x="40.7522%" y="373" width="0.3500%" height="15" fill="rgb(248,18,21)" fg:x="50307" fg:w="432"/><text x="41.0022%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (432 samples, 0.35%)</title><rect x="40.7522%" y="357" width="0.3500%" height="15" fill="rgb(245,180,19)" fg:x="50307" fg:w="432"/><text x="41.0022%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (432 samples, 0.35%)</title><rect x="40.7522%" y="341" width="0.3500%" height="15" fill="rgb(252,118,36)" fg:x="50307" fg:w="432"/><text x="41.0022%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (432 samples, 0.35%)</title><rect x="40.7522%" y="325" width="0.3500%" height="15" fill="rgb(210,224,19)" fg:x="50307" fg:w="432"/><text x="41.0022%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (432 samples, 0.35%)</title><rect x="40.7522%" y="309" width="0.3500%" height="15" fill="rgb(218,30,24)" fg:x="50307" fg:w="432"/><text x="41.0022%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (23 samples, 0.02%)</title><rect x="41.1475%" y="325" width="0.0186%" height="15" fill="rgb(219,75,50)" fg:x="50795" fg:w="23"/><text x="41.3975%" y="335.50"></text></g><g><title>core::time::Duration::as_nanos (20 samples, 0.02%)</title><rect x="41.1662%" y="325" width="0.0162%" height="15" fill="rgb(234,72,50)" fg:x="50818" fg:w="20"/><text x="41.4162%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (94 samples, 0.08%)</title><rect x="41.1824%" y="309" width="0.0761%" height="15" fill="rgb(219,100,48)" fg:x="50838" fg:w="94"/><text x="41.4324%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (50 samples, 0.04%)</title><rect x="41.2893%" y="277" width="0.0405%" height="15" fill="rgb(253,5,41)" fg:x="50970" fg:w="50"/><text x="41.5393%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (50 samples, 0.04%)</title><rect x="41.2893%" y="261" width="0.0405%" height="15" fill="rgb(247,181,11)" fg:x="50970" fg:w="50"/><text x="41.5393%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (50 samples, 0.04%)</title><rect x="41.2893%" y="245" width="0.0405%" height="15" fill="rgb(222,223,25)" fg:x="50970" fg:w="50"/><text x="41.5393%" y="255.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (50 samples, 0.04%)</title><rect x="41.2893%" y="229" width="0.0405%" height="15" fill="rgb(214,198,28)" fg:x="50970" fg:w="50"/><text x="41.5393%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (50 samples, 0.04%)</title><rect x="41.2893%" y="213" width="0.0405%" height="15" fill="rgb(230,46,43)" fg:x="50970" fg:w="50"/><text x="41.5393%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="41.3104%" y="197" width="0.0194%" height="15" fill="rgb(233,65,53)" fg:x="50996" fg:w="24"/><text x="41.5604%" y="207.50"></text></g><g><title>std::time::SystemTime::duration_since (198 samples, 0.16%)</title><rect x="41.1824%" y="325" width="0.1604%" height="15" fill="rgb(221,121,27)" fg:x="50838" fg:w="198"/><text x="41.4324%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (104 samples, 0.08%)</title><rect x="41.2585%" y="309" width="0.0842%" height="15" fill="rgb(247,70,47)" fg:x="50932" fg:w="104"/><text x="41.5085%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (104 samples, 0.08%)</title><rect x="41.2585%" y="293" width="0.0842%" height="15" fill="rgb(228,85,35)" fg:x="50932" fg:w="104"/><text x="41.5085%" y="303.50"></text></g><g><title>core::time::Duration::new (16 samples, 0.01%)</title><rect x="41.3298%" y="277" width="0.0130%" height="15" fill="rgb(209,50,18)" fg:x="51020" fg:w="16"/><text x="41.5798%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (692 samples, 0.56%)</title><rect x="41.1022%" y="405" width="0.5606%" height="15" fill="rgb(250,19,35)" fg:x="50739" fg:w="692"/><text x="41.3522%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (692 samples, 0.56%)</title><rect x="41.1022%" y="389" width="0.5606%" height="15" fill="rgb(253,107,29)" fg:x="50739" fg:w="692"/><text x="41.3522%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (660 samples, 0.53%)</title><rect x="41.1281%" y="373" width="0.5346%" height="15" fill="rgb(252,179,29)" fg:x="50771" fg:w="660"/><text x="41.3781%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (660 samples, 0.53%)</title><rect x="41.1281%" y="357" width="0.5346%" height="15" fill="rgb(238,194,6)" fg:x="50771" fg:w="660"/><text x="41.3781%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (654 samples, 0.53%)</title><rect x="41.1330%" y="341" width="0.5298%" height="15" fill="rgb(238,164,29)" fg:x="50777" fg:w="654"/><text x="41.3830%" y="351.50"></text></g><g><title>std::time::SystemTime::now (395 samples, 0.32%)</title><rect x="41.3428%" y="325" width="0.3200%" height="15" fill="rgb(224,25,9)" fg:x="51036" fg:w="395"/><text x="41.5928%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (395 samples, 0.32%)</title><rect x="41.3428%" y="309" width="0.3200%" height="15" fill="rgb(244,153,23)" fg:x="51036" fg:w="395"/><text x="41.5928%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (395 samples, 0.32%)</title><rect x="41.3428%" y="293" width="0.3200%" height="15" fill="rgb(212,203,14)" fg:x="51036" fg:w="395"/><text x="41.5928%" y="303.50"></text></g><g><title>__clock_gettime (324 samples, 0.26%)</title><rect x="41.4003%" y="277" width="0.2625%" height="15" fill="rgb(220,164,20)" fg:x="51107" fg:w="324"/><text x="41.6503%" y="287.50"></text></g><g><title>__vdso_clock_gettime (313 samples, 0.25%)</title><rect x="41.4092%" y="261" width="0.2536%" height="15" fill="rgb(222,203,48)" fg:x="51118" fg:w="313"/><text x="41.6592%" y="271.50"></text></g><g><title>[[vdso]] (268 samples, 0.22%)</title><rect x="41.4457%" y="245" width="0.2171%" height="15" fill="rgb(215,159,22)" fg:x="51163" fg:w="268"/><text x="41.6957%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (61 samples, 0.05%)</title><rect x="41.6919%" y="373" width="0.0494%" height="15" fill="rgb(216,183,47)" fg:x="51467" fg:w="61"/><text x="41.9419%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (14 samples, 0.01%)</title><rect x="41.7300%" y="357" width="0.0113%" height="15" fill="rgb(229,195,25)" fg:x="51514" fg:w="14"/><text x="41.9800%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (924 samples, 0.75%)</title><rect x="42.0394%" y="181" width="0.7485%" height="15" fill="rgb(224,132,51)" fg:x="51896" fg:w="924"/><text x="42.2894%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,322 samples, 1.07%)</title><rect x="41.7421%" y="325" width="1.0709%" height="15" fill="rgb(240,63,7)" fg:x="51529" fg:w="1322"/><text x="41.9921%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,320 samples, 1.07%)</title><rect x="41.7438%" y="309" width="1.0693%" height="15" fill="rgb(249,182,41)" fg:x="51531" fg:w="1320"/><text x="41.9938%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,320 samples, 1.07%)</title><rect x="41.7438%" y="293" width="1.0693%" height="15" fill="rgb(243,47,26)" fg:x="51531" fg:w="1320"/><text x="41.9938%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,318 samples, 1.07%)</title><rect x="41.7454%" y="277" width="1.0677%" height="15" fill="rgb(233,48,2)" fg:x="51533" fg:w="1318"/><text x="41.9954%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,318 samples, 1.07%)</title><rect x="41.7454%" y="261" width="1.0677%" height="15" fill="rgb(244,165,34)" fg:x="51533" fg:w="1318"/><text x="41.9954%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1,318 samples, 1.07%)</title><rect x="41.7454%" y="245" width="1.0677%" height="15" fill="rgb(207,89,7)" fg:x="51533" fg:w="1318"/><text x="41.9954%" y="255.50"></text></g><g><title>__rg_alloc (1,318 samples, 1.07%)</title><rect x="41.7454%" y="229" width="1.0677%" height="15" fill="rgb(244,117,36)" fg:x="51533" fg:w="1318"/><text x="41.9954%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,318 samples, 1.07%)</title><rect x="41.7454%" y="213" width="1.0677%" height="15" fill="rgb(226,144,34)" fg:x="51533" fg:w="1318"/><text x="41.9954%" y="223.50"></text></g><g><title>sn_rust_alloc (1,313 samples, 1.06%)</title><rect x="41.7494%" y="197" width="1.0636%" height="15" fill="rgb(213,23,19)" fg:x="51538" fg:w="1313"/><text x="41.9994%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (31 samples, 0.03%)</title><rect x="42.7879%" y="181" width="0.0251%" height="15" fill="rgb(217,75,12)" fg:x="52820" fg:w="31"/><text x="43.0379%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,677 samples, 1.36%)</title><rect x="41.6919%" y="389" width="1.3585%" height="15" fill="rgb(224,159,17)" fg:x="51467" fg:w="1677"/><text x="41.9419%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,616 samples, 1.31%)</title><rect x="41.7413%" y="373" width="1.3091%" height="15" fill="rgb(217,118,1)" fg:x="51528" fg:w="1616"/><text x="41.9913%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,616 samples, 1.31%)</title><rect x="41.7413%" y="357" width="1.3091%" height="15" fill="rgb(232,180,48)" fg:x="51528" fg:w="1616"/><text x="41.9913%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,616 samples, 1.31%)</title><rect x="41.7413%" y="341" width="1.3091%" height="15" fill="rgb(230,27,33)" fg:x="51528" fg:w="1616"/><text x="41.9913%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (293 samples, 0.24%)</title><rect x="42.8131%" y="325" width="0.2374%" height="15" fill="rgb(205,31,21)" fg:x="52851" fg:w="293"/><text x="43.0631%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (293 samples, 0.24%)</title><rect x="42.8131%" y="309" width="0.2374%" height="15" fill="rgb(253,59,4)" fg:x="52851" fg:w="293"/><text x="43.0631%" y="319.50"></text></g><g><title>[libc-2.31.so] (293 samples, 0.24%)</title><rect x="42.8131%" y="293" width="0.2374%" height="15" fill="rgb(224,201,9)" fg:x="52851" fg:w="293"/><text x="43.0631%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,525 samples, 5.29%)</title><rect x="37.7687%" y="741" width="5.2857%" height="15" fill="rgb(229,206,30)" fg:x="46624" fg:w="6525"/><text x="38.0187%" y="751.50">tremor..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4,440 samples, 3.60%)</title><rect x="39.4577%" y="725" width="3.5967%" height="15" fill="rgb(212,67,47)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="735.50">&lt;fut..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4,440 samples, 3.60%)</title><rect x="39.4577%" y="709" width="3.5967%" height="15" fill="rgb(211,96,50)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="719.50">futu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,440 samples, 3.60%)</title><rect x="39.4577%" y="693" width="3.5967%" height="15" fill="rgb(252,114,18)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="703.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,440 samples, 3.60%)</title><rect x="39.4577%" y="677" width="3.5967%" height="15" fill="rgb(223,58,37)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="687.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (4,440 samples, 3.60%)</title><rect x="39.4577%" y="661" width="3.5967%" height="15" fill="rgb(237,70,4)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="671.50">trem..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,440 samples, 3.60%)</title><rect x="39.4577%" y="645" width="3.5967%" height="15" fill="rgb(244,85,46)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="655.50">&lt;asy..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,440 samples, 3.60%)</title><rect x="39.4577%" y="629" width="3.5967%" height="15" fill="rgb(223,39,52)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="639.50">&lt;asy..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (4,440 samples, 3.60%)</title><rect x="39.4577%" y="613" width="3.5967%" height="15" fill="rgb(218,200,14)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="623.50">&lt;cor..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,440 samples, 3.60%)</title><rect x="39.4577%" y="597" width="3.5967%" height="15" fill="rgb(208,171,16)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="607.50">&lt;asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (4,440 samples, 3.60%)</title><rect x="39.4577%" y="581" width="3.5967%" height="15" fill="rgb(234,200,18)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="591.50">asyn..</text></g><g><title>std::panic::catch_unwind (4,440 samples, 3.60%)</title><rect x="39.4577%" y="565" width="3.5967%" height="15" fill="rgb(228,45,11)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="575.50">std:..</text></g><g><title>std::panicking::try (4,440 samples, 3.60%)</title><rect x="39.4577%" y="549" width="3.5967%" height="15" fill="rgb(237,182,11)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="559.50">std:..</text></g><g><title>std::panicking::try::do_call (4,440 samples, 3.60%)</title><rect x="39.4577%" y="533" width="3.5967%" height="15" fill="rgb(241,175,49)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="543.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,440 samples, 3.60%)</title><rect x="39.4577%" y="517" width="3.5967%" height="15" fill="rgb(247,38,35)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="527.50">&lt;cor..</text></g><g><title>core::ops::function::FnOnce::call_once (4,440 samples, 3.60%)</title><rect x="39.4577%" y="501" width="3.5967%" height="15" fill="rgb(228,39,49)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="511.50">core..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (4,440 samples, 3.60%)</title><rect x="39.4577%" y="485" width="3.5967%" height="15" fill="rgb(226,101,26)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="495.50">asyn..</text></g><g><title>async_ffi::FfiContext::with_context (4,440 samples, 3.60%)</title><rect x="39.4577%" y="469" width="3.5967%" height="15" fill="rgb(206,141,19)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="479.50">asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (4,440 samples, 3.60%)</title><rect x="39.4577%" y="453" width="3.5967%" height="15" fill="rgb(211,200,13)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="463.50">asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,440 samples, 3.60%)</title><rect x="39.4577%" y="437" width="3.5967%" height="15" fill="rgb(241,121,6)" fg:x="48709" fg:w="4440"/><text x="39.7077%" y="447.50">&lt;cor..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (4,331 samples, 3.51%)</title><rect x="39.5460%" y="421" width="3.5084%" height="15" fill="rgb(234,221,29)" fg:x="48818" fg:w="4331"/><text x="39.7960%" y="431.50">&lt;tr..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,712 samples, 1.39%)</title><rect x="41.6676%" y="405" width="1.3868%" height="15" fill="rgb(229,136,5)" fg:x="51437" fg:w="1712"/><text x="41.9176%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (21 samples, 0.02%)</title><rect x="43.5915%" y="725" width="0.0170%" height="15" fill="rgb(238,36,11)" fg:x="53812" fg:w="21"/><text x="43.8415%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="43.6085%" y="725" width="0.0194%" height="15" fill="rgb(251,55,41)" fg:x="53833" fg:w="24"/><text x="43.8585%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="43.6280%" y="725" width="0.0105%" height="15" fill="rgb(242,34,40)" fg:x="53857" fg:w="13"/><text x="43.8780%" y="735.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (13 samples, 0.01%)</title><rect x="43.6280%" y="709" width="0.0105%" height="15" fill="rgb(215,42,17)" fg:x="53857" fg:w="13"/><text x="43.8780%" y="719.50"></text></g><g><title>[libc-2.31.so] (486 samples, 0.39%)</title><rect x="43.6661%" y="709" width="0.3937%" height="15" fill="rgb(207,44,46)" fg:x="53904" fg:w="486"/><text x="43.9161%" y="719.50"></text></g><g><title>[libc-2.31.so] (738 samples, 0.60%)</title><rect x="44.2193%" y="693" width="0.5978%" height="15" fill="rgb(211,206,28)" fg:x="54587" fg:w="738"/><text x="44.4693%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (466 samples, 0.38%)</title><rect x="44.8172%" y="693" width="0.3775%" height="15" fill="rgb(237,167,16)" fg:x="55325" fg:w="466"/><text x="45.0672%" y="703.50"></text></g><g><title>core::ptr::write (449 samples, 0.36%)</title><rect x="44.8309%" y="677" width="0.3637%" height="15" fill="rgb(233,66,6)" fg:x="55342" fg:w="449"/><text x="45.0809%" y="687.50"></text></g><g><title>[libc-2.31.so] (438 samples, 0.35%)</title><rect x="44.8398%" y="661" width="0.3548%" height="15" fill="rgb(246,123,29)" fg:x="55353" fg:w="438"/><text x="45.0898%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.02%)</title><rect x="45.1947%" y="693" width="0.0178%" height="15" fill="rgb(209,62,40)" fg:x="55791" fg:w="22"/><text x="45.4447%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="45.2295%" y="645" width="0.0105%" height="15" fill="rgb(218,4,25)" fg:x="55834" fg:w="13"/><text x="45.4795%" y="655.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.01%)</title><rect x="45.2295%" y="661" width="0.0113%" height="15" fill="rgb(253,91,49)" fg:x="55834" fg:w="14"/><text x="45.4795%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="45.2425%" y="661" width="0.0105%" height="15" fill="rgb(228,155,29)" fg:x="55850" fg:w="13"/><text x="45.4925%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (1,065 samples, 0.86%)</title><rect x="45.2214%" y="693" width="0.8627%" height="15" fill="rgb(243,57,37)" fg:x="55824" fg:w="1065"/><text x="45.4714%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (1,055 samples, 0.85%)</title><rect x="45.2295%" y="677" width="0.8546%" height="15" fill="rgb(244,167,17)" fg:x="55834" fg:w="1055"/><text x="45.4795%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,026 samples, 0.83%)</title><rect x="45.2530%" y="661" width="0.8311%" height="15" fill="rgb(207,181,38)" fg:x="55863" fg:w="1026"/><text x="45.5030%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,026 samples, 0.83%)</title><rect x="45.2530%" y="645" width="0.8311%" height="15" fill="rgb(211,8,23)" fg:x="55863" fg:w="1026"/><text x="45.5030%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,026 samples, 0.83%)</title><rect x="45.2530%" y="629" width="0.8311%" height="15" fill="rgb(235,11,44)" fg:x="55863" fg:w="1026"/><text x="45.5030%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,026 samples, 0.83%)</title><rect x="45.2530%" y="613" width="0.8311%" height="15" fill="rgb(248,18,52)" fg:x="55863" fg:w="1026"/><text x="45.5030%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,026 samples, 0.83%)</title><rect x="45.2530%" y="597" width="0.8311%" height="15" fill="rgb(208,4,7)" fg:x="55863" fg:w="1026"/><text x="45.5030%" y="607.50"></text></g><g><title>[libc-2.31.so] (988 samples, 0.80%)</title><rect x="45.2838%" y="581" width="0.8003%" height="15" fill="rgb(240,17,39)" fg:x="55901" fg:w="988"/><text x="45.5338%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (17 samples, 0.01%)</title><rect x="46.0995%" y="677" width="0.0138%" height="15" fill="rgb(207,170,3)" fg:x="56908" fg:w="17"/><text x="46.3495%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="46.2016%" y="661" width="0.0203%" height="15" fill="rgb(236,100,52)" fg:x="57034" fg:w="25"/><text x="46.4516%" y="671.50"></text></g><g><title>[libc-2.31.so] (677 samples, 0.55%)</title><rect x="46.2218%" y="661" width="0.5484%" height="15" fill="rgb(246,78,51)" fg:x="57059" fg:w="677"/><text x="46.4718%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (343 samples, 0.28%)</title><rect x="46.7751%" y="661" width="0.2779%" height="15" fill="rgb(211,17,15)" fg:x="57742" fg:w="343"/><text x="47.0251%" y="671.50"></text></g><g><title>core::ptr::read (325 samples, 0.26%)</title><rect x="46.7897%" y="645" width="0.2633%" height="15" fill="rgb(209,59,46)" fg:x="57760" fg:w="325"/><text x="47.0397%" y="655.50"></text></g><g><title>[libc-2.31.so] (278 samples, 0.23%)</title><rect x="46.8278%" y="629" width="0.2252%" height="15" fill="rgb(210,92,25)" fg:x="57807" fg:w="278"/><text x="47.0778%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (420 samples, 0.34%)</title><rect x="47.0530%" y="661" width="0.3402%" height="15" fill="rgb(238,174,52)" fg:x="58085" fg:w="420"/><text x="47.3030%" y="671.50"></text></g><g><title>core::ptr::write (408 samples, 0.33%)</title><rect x="47.0627%" y="645" width="0.3305%" height="15" fill="rgb(230,73,7)" fg:x="58097" fg:w="408"/><text x="47.3127%" y="655.50"></text></g><g><title>[libc-2.31.so] (401 samples, 0.32%)</title><rect x="47.0684%" y="629" width="0.3248%" height="15" fill="rgb(243,124,40)" fg:x="58104" fg:w="401"/><text x="47.3184%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,121 samples, 3.34%)</title><rect x="44.0598%" y="709" width="3.3383%" height="15" fill="rgb(244,170,11)" fg:x="54390" fg:w="4121"/><text x="44.3098%" y="719.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,622 samples, 1.31%)</title><rect x="46.0841%" y="693" width="1.3139%" height="15" fill="rgb(207,114,54)" fg:x="56889" fg:w="1622"/><text x="46.3341%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,586 samples, 1.28%)</title><rect x="46.1133%" y="677" width="1.2848%" height="15" fill="rgb(205,42,20)" fg:x="56925" fg:w="1586"/><text x="46.3633%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,684 samples, 3.79%)</title><rect x="43.6385%" y="725" width="3.7944%" height="15" fill="rgb(230,30,28)" fg:x="53870" fg:w="4684"/><text x="43.8885%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (43 samples, 0.03%)</title><rect x="47.3981%" y="709" width="0.0348%" height="15" fill="rgb(205,73,54)" fg:x="58511" fg:w="43"/><text x="47.6481%" y="719.50"></text></g><g><title>[libc-2.31.so] (1,662 samples, 1.35%)</title><rect x="47.4329%" y="725" width="1.3463%" height="15" fill="rgb(254,227,23)" fg:x="58554" fg:w="1662"/><text x="47.6829%" y="735.50"></text></g><g><title>sn_rust_dealloc (152 samples, 0.12%)</title><rect x="48.8051%" y="565" width="0.1231%" height="15" fill="rgb(228,202,34)" fg:x="60248" fg:w="152"/><text x="49.0551%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (192 samples, 0.16%)</title><rect x="48.7808%" y="725" width="0.1555%" height="15" fill="rgb(222,225,37)" fg:x="60218" fg:w="192"/><text x="49.0308%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (192 samples, 0.16%)</title><rect x="48.7808%" y="709" width="0.1555%" height="15" fill="rgb(221,14,54)" fg:x="60218" fg:w="192"/><text x="49.0308%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (162 samples, 0.13%)</title><rect x="48.8051%" y="693" width="0.1312%" height="15" fill="rgb(254,102,2)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (162 samples, 0.13%)</title><rect x="48.8051%" y="677" width="0.1312%" height="15" fill="rgb(232,104,17)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (162 samples, 0.13%)</title><rect x="48.8051%" y="661" width="0.1312%" height="15" fill="rgb(250,220,14)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.13%)</title><rect x="48.8051%" y="645" width="0.1312%" height="15" fill="rgb(241,158,9)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (162 samples, 0.13%)</title><rect x="48.8051%" y="629" width="0.1312%" height="15" fill="rgb(246,9,43)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (162 samples, 0.13%)</title><rect x="48.8051%" y="613" width="0.1312%" height="15" fill="rgb(206,73,33)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="623.50"></text></g><g><title>__rg_dealloc (162 samples, 0.13%)</title><rect x="48.8051%" y="597" width="0.1312%" height="15" fill="rgb(222,79,8)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (162 samples, 0.13%)</title><rect x="48.8051%" y="581" width="0.1312%" height="15" fill="rgb(234,8,54)" fg:x="60248" fg:w="162"/><text x="49.0551%" y="591.50"></text></g><g><title>async_io::driver::block_on (35,235 samples, 28.54%)</title><rect x="20.4033%" y="1045" width="28.5428%" height="15" fill="rgb(209,134,38)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="1055.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="1029" width="28.5428%" height="15" fill="rgb(230,127,29)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="1039.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="1013" width="28.5428%" height="15" fill="rgb(242,44,41)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="1023.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::run::{{closure}} (35,235 samples, 28.54%)</title><rect x="20.4033%" y="997" width="28.5428%" height="15" fill="rgb(222,56,43)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="1007.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="981" width="28.5428%" height="15" fill="rgb(238,39,47)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="991.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="965" width="28.5428%" height="15" fill="rgb(226,79,43)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="975.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (35,235 samples, 28.54%)</title><rect x="20.4033%" y="949" width="28.5428%" height="15" fill="rgb(242,105,53)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="959.50">async_executor::Executor::run::{{closure}}::{{..</text></g><g><title>async_task::runnable::Runnable::run (35,235 samples, 28.54%)</title><rect x="20.4033%" y="933" width="28.5428%" height="15" fill="rgb(251,132,46)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="943.50">async_task::runnable::Runnable::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (35,235 samples, 28.54%)</title><rect x="20.4033%" y="917" width="28.5428%" height="15" fill="rgb(231,77,14)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="927.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="901" width="28.5428%" height="15" fill="rgb(240,135,9)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="885" width="28.5428%" height="15" fill="rgb(248,109,14)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="895.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (35,235 samples, 28.54%)</title><rect x="20.4033%" y="869" width="28.5428%" height="15" fill="rgb(227,146,52)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="879.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="853" width="28.5428%" height="15" fill="rgb(232,54,3)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="863.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (35,235 samples, 28.54%)</title><rect x="20.4033%" y="837" width="28.5428%" height="15" fill="rgb(229,201,43)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="847.50">async_std::task::task_locals_wrapper::TaskLoca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35,235 samples, 28.54%)</title><rect x="20.4033%" y="821" width="28.5428%" height="15" fill="rgb(252,161,33)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="831.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (35,235 samples, 28.54%)</title><rect x="20.4033%" y="805" width="28.5428%" height="15" fill="rgb(226,146,40)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="815.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (35,235 samples, 28.54%)</title><rect x="20.4033%" y="789" width="28.5428%" height="15" fill="rgb(219,47,25)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="799.50">async_std::task::task_locals_wrapper::TaskLoca..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (35,235 samples, 28.54%)</title><rect x="20.4033%" y="773" width="28.5428%" height="15" fill="rgb(250,135,13)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="783.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,235 samples, 28.54%)</title><rect x="20.4033%" y="757" width="28.5428%" height="15" fill="rgb(219,229,18)" fg:x="25187" fg:w="35235"/><text x="20.6533%" y="767.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,273 samples, 5.89%)</title><rect x="43.0545%" y="741" width="5.8916%" height="15" fill="rgb(217,152,27)" fg:x="53149" fg:w="7273"/><text x="43.3045%" y="751.50">tremor_..</text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="49.3349%" y="581" width="0.0130%" height="15" fill="rgb(225,71,47)" fg:x="60902" fg:w="16"/><text x="49.5849%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="49.3584%" y="565" width="0.0203%" height="15" fill="rgb(220,139,14)" fg:x="60931" fg:w="25"/><text x="49.6084%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (25 samples, 0.02%)</title><rect x="49.3584%" y="549" width="0.0203%" height="15" fill="rgb(247,54,32)" fg:x="60931" fg:w="25"/><text x="49.6084%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (25 samples, 0.02%)</title><rect x="49.3584%" y="533" width="0.0203%" height="15" fill="rgb(252,131,39)" fg:x="60931" fg:w="25"/><text x="49.6084%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (60 samples, 0.05%)</title><rect x="49.3479%" y="581" width="0.0486%" height="15" fill="rgb(210,108,39)" fg:x="60918" fg:w="60"/><text x="49.5979%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="49.3787%" y="565" width="0.0178%" height="15" fill="rgb(205,23,29)" fg:x="60956" fg:w="22"/><text x="49.6287%" y="575.50"></text></g><g><title>alloc::alloc::box_free (22 samples, 0.02%)</title><rect x="49.3787%" y="549" width="0.0178%" height="15" fill="rgb(246,139,46)" fg:x="60956" fg:w="22"/><text x="49.6287%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.02%)</title><rect x="49.3787%" y="533" width="0.0178%" height="15" fill="rgb(250,81,26)" fg:x="60956" fg:w="22"/><text x="49.6287%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.02%)</title><rect x="49.3787%" y="517" width="0.0178%" height="15" fill="rgb(214,104,7)" fg:x="60956" fg:w="22"/><text x="49.6287%" y="527.50"></text></g><g><title>__rg_dealloc (22 samples, 0.02%)</title><rect x="49.3787%" y="501" width="0.0178%" height="15" fill="rgb(233,189,8)" fg:x="60956" fg:w="22"/><text x="49.6287%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (22 samples, 0.02%)</title><rect x="49.3787%" y="485" width="0.0178%" height="15" fill="rgb(228,141,17)" fg:x="60956" fg:w="22"/><text x="49.6287%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (26 samples, 0.02%)</title><rect x="49.3965%" y="581" width="0.0211%" height="15" fill="rgb(247,157,1)" fg:x="60978" fg:w="26"/><text x="49.6465%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (26 samples, 0.02%)</title><rect x="49.3965%" y="565" width="0.0211%" height="15" fill="rgb(249,225,5)" fg:x="60978" fg:w="26"/><text x="49.6465%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (39 samples, 0.03%)</title><rect x="49.4176%" y="581" width="0.0316%" height="15" fill="rgb(242,55,13)" fg:x="61004" fg:w="39"/><text x="49.6676%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (39 samples, 0.03%)</title><rect x="49.4176%" y="565" width="0.0316%" height="15" fill="rgb(230,49,50)" fg:x="61004" fg:w="39"/><text x="49.6676%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="49.4492%" y="517" width="0.0243%" height="15" fill="rgb(241,111,38)" fg:x="61043" fg:w="30"/><text x="49.6992%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (62 samples, 0.05%)</title><rect x="49.4492%" y="581" width="0.0502%" height="15" fill="rgb(252,155,4)" fg:x="61043" fg:w="62"/><text x="49.6992%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (62 samples, 0.05%)</title><rect x="49.4492%" y="565" width="0.0502%" height="15" fill="rgb(212,69,32)" fg:x="61043" fg:w="62"/><text x="49.6992%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.05%)</title><rect x="49.4492%" y="549" width="0.0502%" height="15" fill="rgb(243,107,47)" fg:x="61043" fg:w="62"/><text x="49.6992%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (62 samples, 0.05%)</title><rect x="49.4492%" y="533" width="0.0502%" height="15" fill="rgb(247,130,12)" fg:x="61043" fg:w="62"/><text x="49.6992%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (32 samples, 0.03%)</title><rect x="49.4735%" y="517" width="0.0259%" height="15" fill="rgb(233,74,16)" fg:x="61073" fg:w="32"/><text x="49.7235%" y="527.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (32 samples, 0.03%)</title><rect x="49.4735%" y="501" width="0.0259%" height="15" fill="rgb(208,58,18)" fg:x="61073" fg:w="32"/><text x="49.7235%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (17 samples, 0.01%)</title><rect x="49.4994%" y="581" width="0.0138%" height="15" fill="rgb(242,225,1)" fg:x="61105" fg:w="17"/><text x="49.7494%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.01%)</title><rect x="49.4994%" y="565" width="0.0138%" height="15" fill="rgb(249,39,40)" fg:x="61105" fg:w="17"/><text x="49.7494%" y="575.50"></text></g><g><title>sn_rust_dealloc (246 samples, 0.20%)</title><rect x="49.5796%" y="421" width="0.1993%" height="15" fill="rgb(207,72,44)" fg:x="61204" fg:w="246"/><text x="49.8296%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (333 samples, 0.27%)</title><rect x="49.5431%" y="485" width="0.2698%" height="15" fill="rgb(215,193,12)" fg:x="61159" fg:w="333"/><text x="49.7931%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (333 samples, 0.27%)</title><rect x="49.5431%" y="469" width="0.2698%" height="15" fill="rgb(248,41,39)" fg:x="61159" fg:w="333"/><text x="49.7931%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (315 samples, 0.26%)</title><rect x="49.5577%" y="453" width="0.2552%" height="15" fill="rgb(253,85,4)" fg:x="61177" fg:w="315"/><text x="49.8077%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (315 samples, 0.26%)</title><rect x="49.5577%" y="437" width="0.2552%" height="15" fill="rgb(243,70,31)" fg:x="61177" fg:w="315"/><text x="49.8077%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (42 samples, 0.03%)</title><rect x="49.7789%" y="421" width="0.0340%" height="15" fill="rgb(253,195,26)" fg:x="61450" fg:w="42"/><text x="50.0289%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.02%)</title><rect x="49.8129%" y="453" width="0.0178%" height="15" fill="rgb(243,42,11)" fg:x="61492" fg:w="22"/><text x="50.0629%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.02%)</title><rect x="49.8129%" y="437" width="0.0178%" height="15" fill="rgb(239,66,17)" fg:x="61492" fg:w="22"/><text x="50.0629%" y="447.50"></text></g><g><title>__rg_dealloc (22 samples, 0.02%)</title><rect x="49.8129%" y="421" width="0.0178%" height="15" fill="rgb(217,132,21)" fg:x="61492" fg:w="22"/><text x="50.0629%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (22 samples, 0.02%)</title><rect x="49.8129%" y="405" width="0.0178%" height="15" fill="rgb(252,202,21)" fg:x="61492" fg:w="22"/><text x="50.0629%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (394 samples, 0.32%)</title><rect x="49.5229%" y="549" width="0.3192%" height="15" fill="rgb(233,98,36)" fg:x="61134" fg:w="394"/><text x="49.7729%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (383 samples, 0.31%)</title><rect x="49.5318%" y="533" width="0.3103%" height="15" fill="rgb(216,153,54)" fg:x="61145" fg:w="383"/><text x="49.7818%" y="543.50"></text></g><g><title>core::mem::drop (369 samples, 0.30%)</title><rect x="49.5431%" y="517" width="0.2989%" height="15" fill="rgb(250,99,7)" fg:x="61159" fg:w="369"/><text x="49.7931%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (369 samples, 0.30%)</title><rect x="49.5431%" y="501" width="0.2989%" height="15" fill="rgb(207,56,50)" fg:x="61159" fg:w="369"/><text x="49.7931%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="49.8129%" y="485" width="0.0292%" height="15" fill="rgb(244,61,34)" fg:x="61492" fg:w="36"/><text x="50.0629%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="49.8129%" y="469" width="0.0292%" height="15" fill="rgb(241,50,38)" fg:x="61492" fg:w="36"/><text x="50.0629%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (14 samples, 0.01%)</title><rect x="49.8307%" y="453" width="0.0113%" height="15" fill="rgb(212,166,30)" fg:x="61514" fg:w="14"/><text x="50.0807%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::array (14 samples, 0.01%)</title><rect x="49.8307%" y="437" width="0.0113%" height="15" fill="rgb(249,127,32)" fg:x="61514" fg:w="14"/><text x="50.0807%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="49.8307%" y="421" width="0.0113%" height="15" fill="rgb(209,103,0)" fg:x="61514" fg:w="14"/><text x="50.0807%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="49.8307%" y="405" width="0.0113%" height="15" fill="rgb(238,209,51)" fg:x="61514" fg:w="14"/><text x="50.0807%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (438 samples, 0.35%)</title><rect x="49.5131%" y="581" width="0.3548%" height="15" fill="rgb(237,56,23)" fg:x="61122" fg:w="438"/><text x="49.7631%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (438 samples, 0.35%)</title><rect x="49.5131%" y="565" width="0.3548%" height="15" fill="rgb(215,153,46)" fg:x="61122" fg:w="438"/><text x="49.7631%" y="575.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.03%)</title><rect x="49.8420%" y="549" width="0.0259%" height="15" fill="rgb(224,49,31)" fg:x="61528" fg:w="32"/><text x="50.0920%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (31 samples, 0.03%)</title><rect x="49.8850%" y="485" width="0.0251%" height="15" fill="rgb(250,18,42)" fg:x="61581" fg:w="31"/><text x="50.1350%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (31 samples, 0.03%)</title><rect x="49.8850%" y="469" width="0.0251%" height="15" fill="rgb(215,176,39)" fg:x="61581" fg:w="31"/><text x="50.1350%" y="479.50"></text></g><g><title>core::mem::drop (24 samples, 0.02%)</title><rect x="49.8906%" y="453" width="0.0194%" height="15" fill="rgb(223,77,29)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="49.8906%" y="437" width="0.0194%" height="15" fill="rgb(234,94,52)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="49.8906%" y="421" width="0.0194%" height="15" fill="rgb(220,154,50)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="49.8906%" y="405" width="0.0194%" height="15" fill="rgb(212,11,10)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="49.8906%" y="389" width="0.0194%" height="15" fill="rgb(205,166,19)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="49.8906%" y="373" width="0.0194%" height="15" fill="rgb(244,198,16)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="383.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="49.8906%" y="357" width="0.0194%" height="15" fill="rgb(219,69,12)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="49.8906%" y="341" width="0.0194%" height="15" fill="rgb(245,30,7)" fg:x="61588" fg:w="24"/><text x="50.1406%" y="351.50"></text></g><g><title>sn_rust_dealloc (188 samples, 0.15%)</title><rect x="49.9101%" y="485" width="0.1523%" height="15" fill="rgb(218,221,48)" fg:x="61612" fg:w="188"/><text x="50.1601%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (254 samples, 0.21%)</title><rect x="49.8801%" y="533" width="0.2058%" height="15" fill="rgb(216,66,15)" fg:x="61575" fg:w="254"/><text x="50.1301%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (250 samples, 0.20%)</title><rect x="49.8833%" y="517" width="0.2025%" height="15" fill="rgb(226,122,50)" fg:x="61579" fg:w="250"/><text x="50.1333%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (250 samples, 0.20%)</title><rect x="49.8833%" y="501" width="0.2025%" height="15" fill="rgb(239,156,16)" fg:x="61579" fg:w="250"/><text x="50.1333%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (29 samples, 0.02%)</title><rect x="50.0624%" y="485" width="0.0235%" height="15" fill="rgb(224,27,38)" fg:x="61800" fg:w="29"/><text x="50.3124%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (14 samples, 0.01%)</title><rect x="50.0996%" y="469" width="0.0113%" height="15" fill="rgb(224,39,27)" fg:x="61846" fg:w="14"/><text x="50.3496%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (14 samples, 0.01%)</title><rect x="50.0996%" y="453" width="0.0113%" height="15" fill="rgb(215,92,29)" fg:x="61846" fg:w="14"/><text x="50.3496%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="50.7720%" y="357" width="0.0122%" height="15" fill="rgb(207,159,16)" fg:x="62676" fg:w="15"/><text x="51.0220%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="50.7720%" y="341" width="0.0122%" height="15" fill="rgb(238,163,47)" fg:x="62676" fg:w="15"/><text x="51.0220%" y="351.50"></text></g><g><title>sn_rust_dealloc (255 samples, 0.21%)</title><rect x="50.7841%" y="357" width="0.2066%" height="15" fill="rgb(219,91,49)" fg:x="62691" fg:w="255"/><text x="51.0341%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,102 samples, 0.89%)</title><rect x="50.1110%" y="437" width="0.8927%" height="15" fill="rgb(227,167,31)" fg:x="61860" fg:w="1102"/><text x="50.3610%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (1,102 samples, 0.89%)</title><rect x="50.1110%" y="421" width="0.8927%" height="15" fill="rgb(234,80,54)" fg:x="61860" fg:w="1102"/><text x="50.3610%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (1,086 samples, 0.88%)</title><rect x="50.1239%" y="405" width="0.8797%" height="15" fill="rgb(212,114,2)" fg:x="61876" fg:w="1086"/><text x="50.3739%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (1,086 samples, 0.88%)</title><rect x="50.1239%" y="389" width="0.8797%" height="15" fill="rgb(234,50,24)" fg:x="61876" fg:w="1086"/><text x="50.3739%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,086 samples, 0.88%)</title><rect x="50.1239%" y="373" width="0.8797%" height="15" fill="rgb(221,68,8)" fg:x="61876" fg:w="1086"/><text x="50.3739%" y="383.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (16 samples, 0.01%)</title><rect x="50.9907%" y="357" width="0.0130%" height="15" fill="rgb(254,180,31)" fg:x="62946" fg:w="16"/><text x="51.2407%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="51.0037%" y="405" width="0.0194%" height="15" fill="rgb(247,130,50)" fg:x="62962" fg:w="24"/><text x="51.2537%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="51.0037%" y="389" width="0.0194%" height="15" fill="rgb(211,109,4)" fg:x="62962" fg:w="24"/><text x="51.2537%" y="399.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="51.0037%" y="373" width="0.0194%" height="15" fill="rgb(238,50,21)" fg:x="62962" fg:w="24"/><text x="51.2537%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="51.0037%" y="357" width="0.0194%" height="15" fill="rgb(225,57,45)" fg:x="62962" fg:w="24"/><text x="51.2537%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,168 samples, 0.95%)</title><rect x="50.0859%" y="501" width="0.9462%" height="15" fill="rgb(209,196,50)" fg:x="61829" fg:w="1168"/><text x="50.3359%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,158 samples, 0.94%)</title><rect x="50.0940%" y="485" width="0.9381%" height="15" fill="rgb(242,140,13)" fg:x="61839" fg:w="1158"/><text x="50.3440%" y="495.50"></text></g><g><title>core::mem::drop (1,137 samples, 0.92%)</title><rect x="50.1110%" y="469" width="0.9211%" height="15" fill="rgb(217,111,7)" fg:x="61860" fg:w="1137"/><text x="50.3610%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,137 samples, 0.92%)</title><rect x="50.1110%" y="453" width="0.9211%" height="15" fill="rgb(253,193,51)" fg:x="61860" fg:w="1137"/><text x="50.3610%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (35 samples, 0.03%)</title><rect x="51.0037%" y="437" width="0.0284%" height="15" fill="rgb(252,70,29)" fg:x="62962" fg:w="35"/><text x="51.2537%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="51.0037%" y="421" width="0.0284%" height="15" fill="rgb(232,127,12)" fg:x="62962" fg:w="35"/><text x="51.2537%" y="431.50"></text></g><g><title>sn_rust_dealloc (106 samples, 0.09%)</title><rect x="51.0320%" y="501" width="0.0859%" height="15" fill="rgb(211,180,21)" fg:x="62997" fg:w="106"/><text x="51.2820%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,594 samples, 1.29%)</title><rect x="49.8680%" y="565" width="1.2913%" height="15" fill="rgb(229,72,13)" fg:x="61560" fg:w="1594"/><text x="50.1180%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (1,586 samples, 1.28%)</title><rect x="49.8744%" y="549" width="1.2848%" height="15" fill="rgb(240,211,49)" fg:x="61568" fg:w="1586"/><text x="50.1244%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,325 samples, 1.07%)</title><rect x="50.0859%" y="533" width="1.0733%" height="15" fill="rgb(219,149,40)" fg:x="61829" fg:w="1325"/><text x="50.3359%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,325 samples, 1.07%)</title><rect x="50.0859%" y="517" width="1.0733%" height="15" fill="rgb(210,127,46)" fg:x="61829" fg:w="1325"/><text x="50.3359%" y="527.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (51 samples, 0.04%)</title><rect x="51.1179%" y="501" width="0.0413%" height="15" fill="rgb(220,106,7)" fg:x="63103" fg:w="51"/><text x="51.3679%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (27 samples, 0.02%)</title><rect x="51.1592%" y="565" width="0.0219%" height="15" fill="rgb(249,31,22)" fg:x="63154" fg:w="27"/><text x="51.4092%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (27 samples, 0.02%)</title><rect x="51.1592%" y="549" width="0.0219%" height="15" fill="rgb(253,1,49)" fg:x="63154" fg:w="27"/><text x="51.4092%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="51.1592%" y="533" width="0.0219%" height="15" fill="rgb(227,144,33)" fg:x="63154" fg:w="27"/><text x="51.4092%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.01%)</title><rect x="51.1665%" y="517" width="0.0146%" height="15" fill="rgb(249,163,44)" fg:x="63163" fg:w="18"/><text x="51.4165%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.01%)</title><rect x="51.1665%" y="501" width="0.0146%" height="15" fill="rgb(234,15,39)" fg:x="63163" fg:w="18"/><text x="51.4165%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (65 samples, 0.05%)</title><rect x="51.2102%" y="533" width="0.0527%" height="15" fill="rgb(207,66,16)" fg:x="63217" fg:w="65"/><text x="51.4602%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (65 samples, 0.05%)</title><rect x="51.2102%" y="517" width="0.0527%" height="15" fill="rgb(233,112,24)" fg:x="63217" fg:w="65"/><text x="51.4602%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (65 samples, 0.05%)</title><rect x="51.2102%" y="501" width="0.0527%" height="15" fill="rgb(230,90,22)" fg:x="63217" fg:w="65"/><text x="51.4602%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (105 samples, 0.09%)</title><rect x="51.1884%" y="549" width="0.0851%" height="15" fill="rgb(229,61,13)" fg:x="63190" fg:w="105"/><text x="51.4384%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="51.2629%" y="533" width="0.0105%" height="15" fill="rgb(225,57,24)" fg:x="63282" fg:w="13"/><text x="51.5129%" y="543.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="51.2629%" y="517" width="0.0105%" height="15" fill="rgb(208,169,48)" fg:x="63282" fg:w="13"/><text x="51.5129%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="51.2629%" y="501" width="0.0105%" height="15" fill="rgb(244,218,51)" fg:x="63282" fg:w="13"/><text x="51.5129%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="51.2629%" y="485" width="0.0105%" height="15" fill="rgb(214,148,10)" fg:x="63282" fg:w="13"/><text x="51.5129%" y="495.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="51.2629%" y="469" width="0.0105%" height="15" fill="rgb(225,174,27)" fg:x="63282" fg:w="13"/><text x="51.5129%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="51.2629%" y="453" width="0.0105%" height="15" fill="rgb(230,96,26)" fg:x="63282" fg:w="13"/><text x="51.5129%" y="463.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (551 samples, 0.45%)</title><rect x="51.3382%" y="389" width="0.4463%" height="15" fill="rgb(232,10,30)" fg:x="63375" fg:w="551"/><text x="51.5882%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="51.8137%" y="261" width="0.0122%" height="15" fill="rgb(222,8,50)" fg:x="63962" fg:w="15"/><text x="52.0637%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="51.8137%" y="245" width="0.0122%" height="15" fill="rgb(213,81,27)" fg:x="63962" fg:w="15"/><text x="52.0637%" y="255.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="51.8137%" y="229" width="0.0122%" height="15" fill="rgb(245,50,10)" fg:x="63962" fg:w="15"/><text x="52.0637%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="51.8137%" y="213" width="0.0122%" height="15" fill="rgb(216,100,18)" fg:x="63962" fg:w="15"/><text x="52.0637%" y="223.50"></text></g><g><title>core::mem::drop (1,117 samples, 0.90%)</title><rect x="51.8129%" y="309" width="0.9048%" height="15" fill="rgb(236,147,54)" fg:x="63961" fg:w="1117"/><text x="52.0629%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,117 samples, 0.90%)</title><rect x="51.8129%" y="293" width="0.9048%" height="15" fill="rgb(205,143,26)" fg:x="63961" fg:w="1117"/><text x="52.0629%" y="303.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,117 samples, 0.90%)</title><rect x="51.8129%" y="277" width="0.9048%" height="15" fill="rgb(236,26,9)" fg:x="63961" fg:w="1117"/><text x="52.0629%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,096 samples, 0.89%)</title><rect x="51.8299%" y="261" width="0.8878%" height="15" fill="rgb(221,165,53)" fg:x="63982" fg:w="1096"/><text x="52.0799%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,096 samples, 0.89%)</title><rect x="51.8299%" y="245" width="0.8878%" height="15" fill="rgb(214,110,17)" fg:x="63982" fg:w="1096"/><text x="52.0799%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="52.7413%" y="261" width="0.0122%" height="15" fill="rgb(237,197,12)" fg:x="65107" fg:w="15"/><text x="52.9913%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="52.7413%" y="245" width="0.0122%" height="15" fill="rgb(205,84,17)" fg:x="65107" fg:w="15"/><text x="52.9913%" y="255.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="52.7429%" y="229" width="0.0105%" height="15" fill="rgb(237,18,45)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="52.7429%" y="213" width="0.0105%" height="15" fill="rgb(221,87,14)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="52.7429%" y="197" width="0.0105%" height="15" fill="rgb(238,186,15)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="52.7429%" y="181" width="0.0105%" height="15" fill="rgb(208,115,11)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="52.7429%" y="165" width="0.0105%" height="15" fill="rgb(254,175,0)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="52.7429%" y="149" width="0.0105%" height="15" fill="rgb(227,24,42)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="159.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="52.7429%" y="133" width="0.0105%" height="15" fill="rgb(223,211,37)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="52.7429%" y="117" width="0.0105%" height="15" fill="rgb(235,49,27)" fg:x="65109" fg:w="13"/><text x="52.9929%" y="127.50"></text></g><g><title>sn_rust_dealloc (157 samples, 0.13%)</title><rect x="52.7534%" y="261" width="0.1272%" height="15" fill="rgb(254,97,51)" fg:x="65122" fg:w="157"/><text x="53.0034%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,806 samples, 1.46%)</title><rect x="51.8073%" y="325" width="1.4630%" height="15" fill="rgb(249,51,40)" fg:x="63954" fg:w="1806"/><text x="52.0573%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (682 samples, 0.55%)</title><rect x="52.7178%" y="309" width="0.5525%" height="15" fill="rgb(210,128,45)" fg:x="65078" fg:w="682"/><text x="52.9678%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (682 samples, 0.55%)</title><rect x="52.7178%" y="293" width="0.5525%" height="15" fill="rgb(224,137,50)" fg:x="65078" fg:w="682"/><text x="52.9678%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (682 samples, 0.55%)</title><rect x="52.7178%" y="277" width="0.5525%" height="15" fill="rgb(242,15,9)" fg:x="65078" fg:w="682"/><text x="52.9678%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (481 samples, 0.39%)</title><rect x="52.8806%" y="261" width="0.3896%" height="15" fill="rgb(233,187,41)" fg:x="65279" fg:w="481"/><text x="53.1306%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,348 samples, 1.09%)</title><rect x="53.2703%" y="325" width="1.0920%" height="15" fill="rgb(227,2,29)" fg:x="65760" fg:w="1348"/><text x="53.5203%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,348 samples, 1.09%)</title><rect x="53.2703%" y="309" width="1.0920%" height="15" fill="rgb(222,70,3)" fg:x="65760" fg:w="1348"/><text x="53.5203%" y="319.50"></text></g><g><title>sn_rust_dealloc (91 samples, 0.07%)</title><rect x="54.3622%" y="325" width="0.0737%" height="15" fill="rgb(213,11,42)" fg:x="67108" fg:w="91"/><text x="54.6122%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,910 samples, 3.17%)</title><rect x="51.2913%" y="453" width="3.1674%" height="15" fill="rgb(225,150,9)" fg:x="63317" fg:w="3910"/><text x="51.5413%" y="463.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (3,910 samples, 3.17%)</title><rect x="51.2913%" y="437" width="3.1674%" height="15" fill="rgb(230,162,45)" fg:x="63317" fg:w="3910"/><text x="51.5413%" y="447.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,880 samples, 3.14%)</title><rect x="51.3156%" y="421" width="3.1431%" height="15" fill="rgb(222,14,52)" fg:x="63347" fg:w="3880"/><text x="51.5656%" y="431.50">cor..</text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (3,880 samples, 3.14%)</title><rect x="51.3156%" y="405" width="3.1431%" height="15" fill="rgb(254,198,14)" fg:x="63347" fg:w="3880"/><text x="51.5656%" y="415.50">abi..</text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (3,301 samples, 2.67%)</title><rect x="51.7846%" y="389" width="2.6740%" height="15" fill="rgb(220,217,30)" fg:x="63926" fg:w="3301"/><text x="52.0346%" y="399.50">ab..</text></g><g><title>core::mem::drop (3,273 samples, 2.65%)</title><rect x="51.8073%" y="373" width="2.6514%" height="15" fill="rgb(215,146,41)" fg:x="63954" fg:w="3273"/><text x="52.0573%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,273 samples, 2.65%)</title><rect x="51.8073%" y="357" width="2.6514%" height="15" fill="rgb(217,27,36)" fg:x="63954" fg:w="3273"/><text x="52.0573%" y="367.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,273 samples, 2.65%)</title><rect x="51.8073%" y="341" width="2.6514%" height="15" fill="rgb(219,218,39)" fg:x="63954" fg:w="3273"/><text x="52.0573%" y="351.50">&lt;a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (28 samples, 0.02%)</title><rect x="54.4359%" y="325" width="0.0227%" height="15" fill="rgb(219,4,42)" fg:x="67199" fg:w="28"/><text x="54.6859%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="54.4586%" y="421" width="0.0146%" height="15" fill="rgb(249,119,36)" fg:x="67227" fg:w="18"/><text x="54.7086%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="54.4586%" y="405" width="0.0146%" height="15" fill="rgb(209,23,33)" fg:x="67227" fg:w="18"/><text x="54.7086%" y="415.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="54.4586%" y="389" width="0.0146%" height="15" fill="rgb(211,10,0)" fg:x="67227" fg:w="18"/><text x="54.7086%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="54.4586%" y="373" width="0.0146%" height="15" fill="rgb(208,99,37)" fg:x="67227" fg:w="18"/><text x="54.7086%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (3,958 samples, 3.21%)</title><rect x="51.2742%" y="517" width="3.2063%" height="15" fill="rgb(213,132,31)" fg:x="63296" fg:w="3958"/><text x="51.5242%" y="527.50">abi..</text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (3,948 samples, 3.20%)</title><rect x="51.2823%" y="501" width="3.1982%" height="15" fill="rgb(243,129,40)" fg:x="63306" fg:w="3948"/><text x="51.5323%" y="511.50">abi..</text></g><g><title>core::mem::drop (3,937 samples, 3.19%)</title><rect x="51.2913%" y="485" width="3.1892%" height="15" fill="rgb(210,66,33)" fg:x="63317" fg:w="3937"/><text x="51.5413%" y="495.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (3,937 samples, 3.19%)</title><rect x="51.2913%" y="469" width="3.1892%" height="15" fill="rgb(209,189,4)" fg:x="63317" fg:w="3937"/><text x="51.5413%" y="479.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="54.4586%" y="453" width="0.0219%" height="15" fill="rgb(214,107,37)" fg:x="67227" fg:w="27"/><text x="54.7086%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="54.4586%" y="437" width="0.0219%" height="15" fill="rgb(245,88,54)" fg:x="67227" fg:w="27"/><text x="54.7086%" y="447.50"></text></g><g><title>sn_rust_dealloc (92 samples, 0.07%)</title><rect x="54.4805%" y="517" width="0.0745%" height="15" fill="rgb(205,146,20)" fg:x="67254" fg:w="92"/><text x="54.7305%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,055 samples, 3.28%)</title><rect x="51.2734%" y="549" width="3.2848%" height="15" fill="rgb(220,161,25)" fg:x="63295" fg:w="4055"/><text x="51.5234%" y="559.50">cor..</text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (4,055 samples, 3.28%)</title><rect x="51.2734%" y="533" width="3.2848%" height="15" fill="rgb(215,152,15)" fg:x="63295" fg:w="4055"/><text x="51.5234%" y="543.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (45 samples, 0.04%)</title><rect x="54.5583%" y="549" width="0.0365%" height="15" fill="rgb(233,192,44)" fg:x="67350" fg:w="45"/><text x="54.8083%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (45 samples, 0.04%)</title><rect x="54.5583%" y="533" width="0.0365%" height="15" fill="rgb(240,170,46)" fg:x="67350" fg:w="45"/><text x="54.8083%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="54.5793%" y="517" width="0.0154%" height="15" fill="rgb(207,104,33)" fg:x="67376" fg:w="19"/><text x="54.8293%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="54.5793%" y="501" width="0.0154%" height="15" fill="rgb(219,21,39)" fg:x="67376" fg:w="19"/><text x="54.8293%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="54.5793%" y="485" width="0.0154%" height="15" fill="rgb(214,133,29)" fg:x="67376" fg:w="19"/><text x="54.8293%" y="495.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.06%)</title><rect x="54.5947%" y="549" width="0.0632%" height="15" fill="rgb(226,93,6)" fg:x="67395" fg:w="78"/><text x="54.8447%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,034 samples, 4.89%)</title><rect x="49.8680%" y="581" width="4.8880%" height="15" fill="rgb(252,222,34)" fg:x="61560" fg:w="6034"/><text x="50.1180%" y="591.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,404 samples, 3.57%)</title><rect x="51.1884%" y="565" width="3.5676%" height="15" fill="rgb(252,92,48)" fg:x="63190" fg:w="4404"/><text x="51.4384%" y="575.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (121 samples, 0.10%)</title><rect x="54.6579%" y="549" width="0.0980%" height="15" fill="rgb(245,223,24)" fg:x="67473" fg:w="121"/><text x="54.9079%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (14 samples, 0.01%)</title><rect x="54.7559%" y="581" width="0.0113%" height="15" fill="rgb(205,176,3)" fg:x="67594" fg:w="14"/><text x="55.0059%" y="591.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::bucket_for (14 samples, 0.01%)</title><rect x="54.8953%" y="501" width="0.0113%" height="15" fill="rgb(235,151,15)" fg:x="67766" fg:w="14"/><text x="55.1453%" y="511.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (55 samples, 0.04%)</title><rect x="54.8677%" y="533" width="0.0446%" height="15" fill="rgb(237,209,11)" fg:x="67732" fg:w="55"/><text x="55.1177%" y="543.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (47 samples, 0.04%)</title><rect x="54.8742%" y="517" width="0.0381%" height="15" fill="rgb(243,227,24)" fg:x="67740" fg:w="47"/><text x="55.1242%" y="527.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (200 samples, 0.16%)</title><rect x="54.7689%" y="581" width="0.1620%" height="15" fill="rgb(239,193,16)" fg:x="67610" fg:w="200"/><text x="55.0189%" y="591.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (194 samples, 0.16%)</title><rect x="54.7737%" y="565" width="0.1572%" height="15" fill="rgb(231,27,9)" fg:x="67616" fg:w="194"/><text x="55.0237%" y="575.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (194 samples, 0.16%)</title><rect x="54.7737%" y="549" width="0.1572%" height="15" fill="rgb(219,169,10)" fg:x="67616" fg:w="194"/><text x="55.0237%" y="559.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::update_min_max (23 samples, 0.02%)</title><rect x="54.9123%" y="533" width="0.0186%" height="15" fill="rgb(244,229,43)" fg:x="67787" fg:w="23"/><text x="55.1623%" y="543.50"></text></g><g><title>sn_rust_dealloc (82 samples, 0.07%)</title><rect x="54.9309%" y="581" width="0.0664%" height="15" fill="rgb(254,38,20)" fg:x="67810" fg:w="82"/><text x="55.1809%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (136 samples, 0.11%)</title><rect x="54.9973%" y="581" width="0.1102%" height="15" fill="rgb(250,47,30)" fg:x="67892" fg:w="136"/><text x="55.2473%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (50 samples, 0.04%)</title><rect x="55.1350%" y="565" width="0.0405%" height="15" fill="rgb(224,124,36)" fg:x="68062" fg:w="50"/><text x="55.3850%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (45 samples, 0.04%)</title><rect x="55.1755%" y="565" width="0.0365%" height="15" fill="rgb(246,68,51)" fg:x="68112" fg:w="45"/><text x="55.4255%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (184 samples, 0.15%)</title><rect x="55.2120%" y="549" width="0.1491%" height="15" fill="rgb(253,43,49)" fg:x="68157" fg:w="184"/><text x="55.4620%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (78 samples, 0.06%)</title><rect x="55.4080%" y="517" width="0.0632%" height="15" fill="rgb(219,54,36)" fg:x="68399" fg:w="78"/><text x="55.6580%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (78 samples, 0.06%)</title><rect x="55.4080%" y="501" width="0.0632%" height="15" fill="rgb(227,133,34)" fg:x="68399" fg:w="78"/><text x="55.6580%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (78 samples, 0.06%)</title><rect x="55.4080%" y="485" width="0.0632%" height="15" fill="rgb(247,227,15)" fg:x="68399" fg:w="78"/><text x="55.6580%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (78 samples, 0.06%)</title><rect x="55.4080%" y="469" width="0.0632%" height="15" fill="rgb(229,96,14)" fg:x="68399" fg:w="78"/><text x="55.6580%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (78 samples, 0.06%)</title><rect x="55.4080%" y="453" width="0.0632%" height="15" fill="rgb(220,79,17)" fg:x="68399" fg:w="78"/><text x="55.6580%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (44 samples, 0.04%)</title><rect x="55.4356%" y="437" width="0.0356%" height="15" fill="rgb(205,131,53)" fg:x="68433" fg:w="44"/><text x="55.6856%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (341 samples, 0.28%)</title><rect x="55.2120%" y="565" width="0.2762%" height="15" fill="rgb(209,50,29)" fg:x="68157" fg:w="341"/><text x="55.4620%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (157 samples, 0.13%)</title><rect x="55.3610%" y="549" width="0.1272%" height="15" fill="rgb(245,86,46)" fg:x="68341" fg:w="157"/><text x="55.6110%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (157 samples, 0.13%)</title><rect x="55.3610%" y="533" width="0.1272%" height="15" fill="rgb(235,66,46)" fg:x="68341" fg:w="157"/><text x="55.6110%" y="543.50"></text></g><g><title>core::time::Duration::new (21 samples, 0.02%)</title><rect x="55.4712%" y="517" width="0.0170%" height="15" fill="rgb(232,148,31)" fg:x="68477" fg:w="21"/><text x="55.7212%" y="527.50"></text></g><g><title>__clock_gettime (592 samples, 0.48%)</title><rect x="55.6106%" y="517" width="0.4796%" height="15" fill="rgb(217,149,8)" fg:x="68649" fg:w="592"/><text x="55.8606%" y="527.50"></text></g><g><title>__vdso_clock_gettime (561 samples, 0.45%)</title><rect x="55.6357%" y="501" width="0.4544%" height="15" fill="rgb(209,183,11)" fg:x="68680" fg:w="561"/><text x="55.8857%" y="511.50"></text></g><g><title>[[vdso]] (499 samples, 0.40%)</title><rect x="55.6859%" y="485" width="0.4042%" height="15" fill="rgb(208,55,20)" fg:x="68742" fg:w="499"/><text x="55.9359%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (1,214 samples, 0.98%)</title><rect x="55.1075%" y="581" width="0.9834%" height="15" fill="rgb(218,39,14)" fg:x="68028" fg:w="1214"/><text x="55.3575%" y="591.50"></text></g><g><title>std::time::SystemTime::now (744 samples, 0.60%)</title><rect x="55.4882%" y="565" width="0.6027%" height="15" fill="rgb(216,169,33)" fg:x="68498" fg:w="744"/><text x="55.7382%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (744 samples, 0.60%)</title><rect x="55.4882%" y="549" width="0.6027%" height="15" fill="rgb(233,80,24)" fg:x="68498" fg:w="744"/><text x="55.7382%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (744 samples, 0.60%)</title><rect x="55.4882%" y="533" width="0.6027%" height="15" fill="rgb(213,179,31)" fg:x="68498" fg:w="744"/><text x="55.7382%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (229 samples, 0.19%)</title><rect x="56.1006%" y="565" width="0.1855%" height="15" fill="rgb(209,19,5)" fg:x="69254" fg:w="229"/><text x="56.3506%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,061 samples, 7.34%)</title><rect x="48.9542%" y="869" width="7.3401%" height="15" fill="rgb(219,18,35)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="879.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,061 samples, 7.34%)</title><rect x="48.9542%" y="853" width="7.3401%" height="15" fill="rgb(209,169,16)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="863.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,061 samples, 7.34%)</title><rect x="48.9542%" y="837" width="7.3401%" height="15" fill="rgb(245,90,51)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="847.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,061 samples, 7.34%)</title><rect x="48.9542%" y="821" width="7.3401%" height="15" fill="rgb(220,99,45)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="831.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,061 samples, 7.34%)</title><rect x="48.9542%" y="805" width="7.3401%" height="15" fill="rgb(249,89,25)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="815.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (9,061 samples, 7.34%)</title><rect x="48.9542%" y="789" width="7.3401%" height="15" fill="rgb(239,193,0)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="799.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,061 samples, 7.34%)</title><rect x="48.9542%" y="773" width="7.3401%" height="15" fill="rgb(231,126,1)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="783.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (9,061 samples, 7.34%)</title><rect x="48.9542%" y="757" width="7.3401%" height="15" fill="rgb(243,166,3)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="767.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (9,061 samples, 7.34%)</title><rect x="48.9542%" y="741" width="7.3401%" height="15" fill="rgb(223,22,34)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="751.50">std::panic..</text></g><g><title>std::panicking::try (9,061 samples, 7.34%)</title><rect x="48.9542%" y="725" width="7.3401%" height="15" fill="rgb(251,52,51)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="735.50">std::panic..</text></g><g><title>std::panicking::try::do_call (9,061 samples, 7.34%)</title><rect x="48.9542%" y="709" width="7.3401%" height="15" fill="rgb(221,165,28)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="719.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,061 samples, 7.34%)</title><rect x="48.9542%" y="693" width="7.3401%" height="15" fill="rgb(218,121,47)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="703.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (9,061 samples, 7.34%)</title><rect x="48.9542%" y="677" width="7.3401%" height="15" fill="rgb(209,120,9)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="687.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (9,061 samples, 7.34%)</title><rect x="48.9542%" y="661" width="7.3401%" height="15" fill="rgb(236,68,12)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="671.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (9,061 samples, 7.34%)</title><rect x="48.9542%" y="645" width="7.3401%" height="15" fill="rgb(225,194,26)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="655.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (9,061 samples, 7.34%)</title><rect x="48.9542%" y="629" width="7.3401%" height="15" fill="rgb(231,84,39)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="639.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,061 samples, 7.34%)</title><rect x="48.9542%" y="613" width="7.3401%" height="15" fill="rgb(210,11,45)" fg:x="60432" fg:w="9061"/><text x="49.2042%" y="623.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (9,027 samples, 7.31%)</title><rect x="48.9817%" y="597" width="7.3125%" height="15" fill="rgb(224,54,52)" fg:x="60466" fg:w="9027"/><text x="49.2317%" y="607.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (251 samples, 0.20%)</title><rect x="56.0909%" y="581" width="0.2033%" height="15" fill="rgb(238,102,14)" fg:x="69242" fg:w="251"/><text x="56.3409%" y="591.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.14%)</title><rect x="56.3015%" y="741" width="0.1401%" height="15" fill="rgb(243,160,52)" fg:x="69502" fg:w="173"/><text x="56.5515%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (282 samples, 0.23%)</title><rect x="56.6102%" y="661" width="0.2284%" height="15" fill="rgb(216,114,19)" fg:x="69883" fg:w="282"/><text x="56.8602%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (282 samples, 0.23%)</title><rect x="56.6102%" y="645" width="0.2284%" height="15" fill="rgb(244,166,37)" fg:x="69883" fg:w="282"/><text x="56.8602%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (505 samples, 0.41%)</title><rect x="56.8386%" y="661" width="0.4091%" height="15" fill="rgb(246,29,44)" fg:x="70165" fg:w="505"/><text x="57.0886%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (502 samples, 0.41%)</title><rect x="56.8410%" y="645" width="0.4067%" height="15" fill="rgb(215,56,53)" fg:x="70168" fg:w="502"/><text x="57.0910%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (910 samples, 0.74%)</title><rect x="56.5146%" y="693" width="0.7372%" height="15" fill="rgb(217,60,2)" fg:x="69765" fg:w="910"/><text x="56.7646%" y="703.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (875 samples, 0.71%)</title><rect x="56.5429%" y="677" width="0.7088%" height="15" fill="rgb(207,26,24)" fg:x="69800" fg:w="875"/><text x="56.7929%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (144 samples, 0.12%)</title><rect x="57.2582%" y="677" width="0.1167%" height="15" fill="rgb(252,210,15)" fg:x="70683" fg:w="144"/><text x="57.5082%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (138 samples, 0.11%)</title><rect x="57.2631%" y="661" width="0.1118%" height="15" fill="rgb(253,209,26)" fg:x="70689" fg:w="138"/><text x="57.5131%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (138 samples, 0.11%)</title><rect x="57.2631%" y="645" width="0.1118%" height="15" fill="rgb(238,170,14)" fg:x="70689" fg:w="138"/><text x="57.5131%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (136 samples, 0.11%)</title><rect x="57.2647%" y="629" width="0.1102%" height="15" fill="rgb(216,178,15)" fg:x="70691" fg:w="136"/><text x="57.5147%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (135 samples, 0.11%)</title><rect x="57.2655%" y="613" width="0.1094%" height="15" fill="rgb(250,197,2)" fg:x="70692" fg:w="135"/><text x="57.5155%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (135 samples, 0.11%)</title><rect x="57.2655%" y="597" width="0.1094%" height="15" fill="rgb(212,70,42)" fg:x="70692" fg:w="135"/><text x="57.5155%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (34 samples, 0.03%)</title><rect x="57.3749%" y="677" width="0.0275%" height="15" fill="rgb(227,213,9)" fg:x="70827" fg:w="34"/><text x="57.6249%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (34 samples, 0.03%)</title><rect x="57.3749%" y="661" width="0.0275%" height="15" fill="rgb(245,99,25)" fg:x="70827" fg:w="34"/><text x="57.6249%" y="671.50"></text></g><g><title>event_listener::Inner::lock (20 samples, 0.02%)</title><rect x="57.4032%" y="677" width="0.0162%" height="15" fill="rgb(250,82,29)" fg:x="70862" fg:w="20"/><text x="57.6532%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.01%)</title><rect x="57.4049%" y="661" width="0.0146%" height="15" fill="rgb(241,226,54)" fg:x="70864" fg:w="18"/><text x="57.6549%" y="671.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,841 samples, 1.49%)</title><rect x="56.4943%" y="709" width="1.4913%" height="15" fill="rgb(221,99,41)" fg:x="69740" fg:w="1841"/><text x="56.7443%" y="719.50"></text></g><g><title>event_listener::Event::notify (906 samples, 0.73%)</title><rect x="57.2518%" y="693" width="0.7339%" height="15" fill="rgb(213,90,21)" fg:x="70675" fg:w="906"/><text x="57.5018%" y="703.50"></text></g><g><title>event_listener::full_fence (699 samples, 0.57%)</title><rect x="57.4194%" y="677" width="0.5662%" height="15" fill="rgb(205,208,24)" fg:x="70882" fg:w="699"/><text x="57.6694%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (694 samples, 0.56%)</title><rect x="57.4235%" y="661" width="0.5622%" height="15" fill="rgb(246,31,12)" fg:x="70887" fg:w="694"/><text x="57.6735%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (694 samples, 0.56%)</title><rect x="57.4235%" y="645" width="0.5622%" height="15" fill="rgb(213,154,6)" fg:x="70887" fg:w="694"/><text x="57.6735%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (17 samples, 0.01%)</title><rect x="57.9857%" y="709" width="0.0138%" height="15" fill="rgb(222,163,29)" fg:x="71581" fg:w="17"/><text x="58.2357%" y="719.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,039 samples, 1.65%)</title><rect x="56.4660%" y="725" width="1.6517%" height="15" fill="rgb(227,201,8)" fg:x="69705" fg:w="2039"/><text x="56.7160%" y="735.50"></text></g><g><title>event_listener::Event::notify (140 samples, 0.11%)</title><rect x="58.0043%" y="709" width="0.1134%" height="15" fill="rgb(233,9,32)" fg:x="71604" fg:w="140"/><text x="58.2543%" y="719.50"></text></g><g><title>event_listener::full_fence (131 samples, 0.11%)</title><rect x="58.0116%" y="693" width="0.1061%" height="15" fill="rgb(217,54,24)" fg:x="71613" fg:w="131"/><text x="58.2616%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (126 samples, 0.10%)</title><rect x="58.0157%" y="677" width="0.1021%" height="15" fill="rgb(235,192,0)" fg:x="71618" fg:w="126"/><text x="58.2657%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (126 samples, 0.10%)</title><rect x="58.0157%" y="661" width="0.1021%" height="15" fill="rgb(235,45,9)" fg:x="71618" fg:w="126"/><text x="58.2657%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,261 samples, 1.83%)</title><rect x="56.2943%" y="757" width="1.8316%" height="15" fill="rgb(246,42,40)" fg:x="69493" fg:w="2261"/><text x="56.5443%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (2,079 samples, 1.68%)</title><rect x="56.4417%" y="741" width="1.6841%" height="15" fill="rgb(248,111,24)" fg:x="69675" fg:w="2079"/><text x="56.6917%" y="751.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (17 samples, 0.01%)</title><rect x="58.1258%" y="757" width="0.0138%" height="15" fill="rgb(249,65,22)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (17 samples, 0.01%)</title><rect x="58.1258%" y="741" width="0.0138%" height="15" fill="rgb(238,111,51)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (17 samples, 0.01%)</title><rect x="58.1258%" y="725" width="0.0138%" height="15" fill="rgb(250,118,22)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (17 samples, 0.01%)</title><rect x="58.1258%" y="709" width="0.0138%" height="15" fill="rgb(234,84,26)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="58.1258%" y="693" width="0.0138%" height="15" fill="rgb(243,172,12)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="58.1258%" y="677" width="0.0138%" height="15" fill="rgb(236,150,49)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="58.1258%" y="661" width="0.0138%" height="15" fill="rgb(225,197,26)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="58.1258%" y="645" width="0.0138%" height="15" fill="rgb(214,17,42)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="58.1258%" y="629" width="0.0138%" height="15" fill="rgb(224,165,40)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="58.1258%" y="613" width="0.0138%" height="15" fill="rgb(246,100,4)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="58.1258%" y="597" width="0.0138%" height="15" fill="rgb(222,103,0)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="58.1258%" y="581" width="0.0138%" height="15" fill="rgb(227,189,26)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="58.1258%" y="565" width="0.0138%" height="15" fill="rgb(214,202,17)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="575.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="58.1258%" y="549" width="0.0138%" height="15" fill="rgb(229,111,3)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="559.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="58.1258%" y="533" width="0.0138%" height="15" fill="rgb(229,172,15)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="58.1258%" y="517" width="0.0138%" height="15" fill="rgb(230,224,35)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="527.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="58.1258%" y="501" width="0.0138%" height="15" fill="rgb(251,141,6)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="58.1258%" y="485" width="0.0138%" height="15" fill="rgb(225,208,6)" fg:x="71754" fg:w="17"/><text x="58.3758%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (759 samples, 0.61%)</title><rect x="58.1396%" y="629" width="0.6148%" height="15" fill="rgb(246,181,16)" fg:x="71771" fg:w="759"/><text x="58.3896%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (761 samples, 0.62%)</title><rect x="58.1396%" y="757" width="0.6165%" height="15" fill="rgb(227,129,36)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (761 samples, 0.62%)</title><rect x="58.1396%" y="741" width="0.6165%" height="15" fill="rgb(248,117,24)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (761 samples, 0.62%)</title><rect x="58.1396%" y="725" width="0.6165%" height="15" fill="rgb(214,185,35)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (761 samples, 0.62%)</title><rect x="58.1396%" y="709" width="0.6165%" height="15" fill="rgb(236,150,34)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="719.50"></text></g><g><title>alloc::alloc::alloc (761 samples, 0.62%)</title><rect x="58.1396%" y="693" width="0.6165%" height="15" fill="rgb(243,228,27)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="703.50"></text></g><g><title>__rg_alloc (761 samples, 0.62%)</title><rect x="58.1396%" y="677" width="0.6165%" height="15" fill="rgb(245,77,44)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (761 samples, 0.62%)</title><rect x="58.1396%" y="661" width="0.6165%" height="15" fill="rgb(235,214,42)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="671.50"></text></g><g><title>sn_rust_alloc (761 samples, 0.62%)</title><rect x="58.1396%" y="645" width="0.6165%" height="15" fill="rgb(221,74,3)" fg:x="71771" fg:w="761"/><text x="58.3896%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,051 samples, 2.47%)</title><rect x="56.2943%" y="869" width="2.4715%" height="15" fill="rgb(206,121,29)" fg:x="69493" fg:w="3051"/><text x="56.5443%" y="879.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,051 samples, 2.47%)</title><rect x="56.2943%" y="853" width="2.4715%" height="15" fill="rgb(249,131,53)" fg:x="69493" fg:w="3051"/><text x="56.5443%" y="863.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,051 samples, 2.47%)</title><rect x="56.2943%" y="837" width="2.4715%" height="15" fill="rgb(236,170,29)" fg:x="69493" fg:w="3051"/><text x="56.5443%" y="847.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,051 samples, 2.47%)</title><rect x="56.2943%" y="821" width="2.4715%" height="15" fill="rgb(247,96,15)" fg:x="69493" fg:w="3051"/><text x="56.5443%" y="831.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,051 samples, 2.47%)</title><rect x="56.2943%" y="805" width="2.4715%" height="15" fill="rgb(211,210,7)" fg:x="69493" fg:w="3051"/><text x="56.5443%" y="815.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,051 samples, 2.47%)</title><rect x="56.2943%" y="789" width="2.4715%" height="15" fill="rgb(240,88,50)" fg:x="69493" fg:w="3051"/><text x="56.5443%" y="799.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,051 samples, 2.47%)</title><rect x="56.2943%" y="773" width="2.4715%" height="15" fill="rgb(209,229,26)" fg:x="69493" fg:w="3051"/><text x="56.5443%" y="783.50">tr..</text></g><g><title>[libc-2.31.so] (166 samples, 0.13%)</title><rect x="58.7941%" y="837" width="0.1345%" height="15" fill="rgb(210,68,23)" fg:x="72579" fg:w="166"/><text x="59.0441%" y="847.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (18 samples, 0.01%)</title><rect x="59.1052%" y="821" width="0.0146%" height="15" fill="rgb(229,180,13)" fg:x="72963" fg:w="18"/><text x="59.3552%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (17 samples, 0.01%)</title><rect x="59.1263%" y="821" width="0.0138%" height="15" fill="rgb(236,53,44)" fg:x="72989" fg:w="17"/><text x="59.3763%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.04%)</title><rect x="59.1400%" y="805" width="0.0365%" height="15" fill="rgb(244,214,29)" fg:x="73006" fg:w="45"/><text x="59.3900%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (321 samples, 0.26%)</title><rect x="59.1400%" y="821" width="0.2600%" height="15" fill="rgb(220,75,29)" fg:x="73006" fg:w="321"/><text x="59.3900%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (276 samples, 0.22%)</title><rect x="59.1765%" y="805" width="0.2236%" height="15" fill="rgb(214,183,37)" fg:x="73051" fg:w="276"/><text x="59.4265%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (271 samples, 0.22%)</title><rect x="59.1805%" y="789" width="0.2195%" height="15" fill="rgb(239,117,29)" fg:x="73056" fg:w="271"/><text x="59.4305%" y="799.50"></text></g><g><title>core::ptr::read (271 samples, 0.22%)</title><rect x="59.1805%" y="773" width="0.2195%" height="15" fill="rgb(237,171,35)" fg:x="73056" fg:w="271"/><text x="59.4305%" y="783.50"></text></g><g><title>[libc-2.31.so] (271 samples, 0.22%)</title><rect x="59.1805%" y="757" width="0.2195%" height="15" fill="rgb(229,178,53)" fg:x="73056" fg:w="271"/><text x="59.4305%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (370 samples, 0.30%)</title><rect x="59.4041%" y="693" width="0.2997%" height="15" fill="rgb(210,102,19)" fg:x="73332" fg:w="370"/><text x="59.6541%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (370 samples, 0.30%)</title><rect x="59.4041%" y="677" width="0.2997%" height="15" fill="rgb(235,127,22)" fg:x="73332" fg:w="370"/><text x="59.6541%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (370 samples, 0.30%)</title><rect x="59.4041%" y="661" width="0.2997%" height="15" fill="rgb(244,31,31)" fg:x="73332" fg:w="370"/><text x="59.6541%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (368 samples, 0.30%)</title><rect x="59.4057%" y="645" width="0.2981%" height="15" fill="rgb(231,43,21)" fg:x="73334" fg:w="368"/><text x="59.6557%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (368 samples, 0.30%)</title><rect x="59.4057%" y="629" width="0.2981%" height="15" fill="rgb(217,131,35)" fg:x="73334" fg:w="368"/><text x="59.6557%" y="639.50"></text></g><g><title>alloc::alloc::alloc (368 samples, 0.30%)</title><rect x="59.4057%" y="613" width="0.2981%" height="15" fill="rgb(221,149,4)" fg:x="73334" fg:w="368"/><text x="59.6557%" y="623.50"></text></g><g><title>__rg_alloc (368 samples, 0.30%)</title><rect x="59.4057%" y="597" width="0.2981%" height="15" fill="rgb(232,170,28)" fg:x="73334" fg:w="368"/><text x="59.6557%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (368 samples, 0.30%)</title><rect x="59.4057%" y="581" width="0.2981%" height="15" fill="rgb(238,56,10)" fg:x="73334" fg:w="368"/><text x="59.6557%" y="591.50"></text></g><g><title>sn_rust_alloc (354 samples, 0.29%)</title><rect x="59.4171%" y="565" width="0.2868%" height="15" fill="rgb(235,196,14)" fg:x="73348" fg:w="354"/><text x="59.6671%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (406 samples, 0.33%)</title><rect x="59.4041%" y="821" width="0.3289%" height="15" fill="rgb(216,45,48)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (406 samples, 0.33%)</title><rect x="59.4041%" y="805" width="0.3289%" height="15" fill="rgb(238,213,17)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (406 samples, 0.33%)</title><rect x="59.4041%" y="789" width="0.3289%" height="15" fill="rgb(212,13,2)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (406 samples, 0.33%)</title><rect x="59.4041%" y="773" width="0.3289%" height="15" fill="rgb(240,114,20)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (406 samples, 0.33%)</title><rect x="59.4041%" y="757" width="0.3289%" height="15" fill="rgb(228,41,40)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (406 samples, 0.33%)</title><rect x="59.4041%" y="741" width="0.3289%" height="15" fill="rgb(244,132,35)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (406 samples, 0.33%)</title><rect x="59.4041%" y="725" width="0.3289%" height="15" fill="rgb(253,189,4)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (406 samples, 0.33%)</title><rect x="59.4041%" y="709" width="0.3289%" height="15" fill="rgb(224,37,19)" fg:x="73332" fg:w="406"/><text x="59.6541%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (36 samples, 0.03%)</title><rect x="59.7038%" y="693" width="0.0292%" height="15" fill="rgb(235,223,18)" fg:x="73702" fg:w="36"/><text x="59.9538%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.03%)</title><rect x="59.7038%" y="677" width="0.0292%" height="15" fill="rgb(235,163,25)" fg:x="73702" fg:w="36"/><text x="59.9538%" y="687.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="59.7136%" y="661" width="0.0194%" height="15" fill="rgb(217,145,28)" fg:x="73714" fg:w="24"/><text x="59.9636%" y="671.50"></text></g><g><title>[libc-2.31.so] (1,157 samples, 0.94%)</title><rect x="59.7330%" y="821" width="0.9373%" height="15" fill="rgb(223,223,32)" fg:x="73738" fg:w="1157"/><text x="59.9830%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,427 samples, 1.97%)</title><rect x="58.7658%" y="853" width="1.9660%" height="15" fill="rgb(227,189,39)" fg:x="72544" fg:w="2427"/><text x="59.0158%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,226 samples, 1.80%)</title><rect x="58.9286%" y="837" width="1.8032%" height="15" fill="rgb(248,10,22)" fg:x="72745" fg:w="2226"/><text x="59.1786%" y="847.50">t..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (39 samples, 0.03%)</title><rect x="60.7002%" y="821" width="0.0316%" height="15" fill="rgb(248,46,39)" fg:x="74932" fg:w="39"/><text x="60.9502%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="60.7002%" y="805" width="0.0316%" height="15" fill="rgb(248,113,48)" fg:x="74932" fg:w="39"/><text x="60.9502%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="60.7002%" y="789" width="0.0316%" height="15" fill="rgb(245,16,25)" fg:x="74932" fg:w="39"/><text x="60.9502%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="60.7213%" y="773" width="0.0105%" height="15" fill="rgb(249,152,16)" fg:x="74958" fg:w="13"/><text x="60.9713%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14,545 samples, 11.78%)</title><rect x="48.9501%" y="1045" width="11.7825%" height="15" fill="rgb(250,16,1)" fg:x="60427" fg:w="14545"/><text x="49.2001%" y="1055.50">async_task::raw::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,540 samples, 11.78%)</title><rect x="48.9542%" y="1029" width="11.7784%" height="15" fill="rgb(249,138,3)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="1039.50">&lt;core::pin::Pin&lt;P..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,540 samples, 11.78%)</title><rect x="48.9542%" y="1013" width="11.7784%" height="15" fill="rgb(227,71,41)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="1023.50">&lt;core::future::fr..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (14,540 samples, 11.78%)</title><rect x="48.9542%" y="997" width="11.7784%" height="15" fill="rgb(209,184,23)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="1007.50">async_executor::E..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14,540 samples, 11.78%)</title><rect x="48.9542%" y="981" width="11.7784%" height="15" fill="rgb(223,215,31)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="991.50">&lt;async_std::task:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14,540 samples, 11.78%)</title><rect x="48.9542%" y="965" width="11.7784%" height="15" fill="rgb(210,146,28)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="975.50">async_std::task::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,540 samples, 11.78%)</title><rect x="48.9542%" y="949" width="11.7784%" height="15" fill="rgb(209,183,41)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="959.50">std::thread::loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,540 samples, 11.78%)</title><rect x="48.9542%" y="933" width="11.7784%" height="15" fill="rgb(209,224,45)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="943.50">std::thread::loca..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14,540 samples, 11.78%)</title><rect x="48.9542%" y="917" width="11.7784%" height="15" fill="rgb(224,209,51)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="927.50">async_std::task::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14,540 samples, 11.78%)</title><rect x="48.9542%" y="901" width="11.7784%" height="15" fill="rgb(223,17,39)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="911.50">&lt;async_std::task:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,540 samples, 11.78%)</title><rect x="48.9542%" y="885" width="11.7784%" height="15" fill="rgb(234,204,37)" fg:x="60432" fg:w="14540"/><text x="49.2042%" y="895.50">&lt;core::future::fr..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,428 samples, 1.97%)</title><rect x="58.7658%" y="869" width="1.9669%" height="15" fill="rgb(236,120,5)" fg:x="72544" fg:w="2428"/><text x="59.0158%" y="879.50">t..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (29 samples, 0.02%)</title><rect x="60.7375%" y="1045" width="0.0235%" height="15" fill="rgb(248,97,27)" fg:x="74978" fg:w="29"/><text x="60.9875%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (27 samples, 0.02%)</title><rect x="60.7610%" y="1045" width="0.0219%" height="15" fill="rgb(240,66,17)" fg:x="75007" fg:w="27"/><text x="61.0110%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (17 samples, 0.01%)</title><rect x="60.7829%" y="1045" width="0.0138%" height="15" fill="rgb(210,79,3)" fg:x="75034" fg:w="17"/><text x="61.0329%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (27 samples, 0.02%)</title><rect x="60.7999%" y="1045" width="0.0219%" height="15" fill="rgb(214,176,27)" fg:x="75055" fg:w="27"/><text x="61.0499%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (27 samples, 0.02%)</title><rect x="60.7999%" y="1029" width="0.0219%" height="15" fill="rgb(235,185,3)" fg:x="75055" fg:w="27"/><text x="61.0499%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="60.8290%" y="1045" width="0.0178%" height="15" fill="rgb(227,24,12)" fg:x="75091" fg:w="22"/><text x="61.0790%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="60.8468%" y="1045" width="0.0162%" height="15" fill="rgb(252,169,48)" fg:x="75113" fg:w="20"/><text x="61.0968%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (31 samples, 0.03%)</title><rect x="60.8630%" y="1045" width="0.0251%" height="15" fill="rgb(212,65,1)" fg:x="75133" fg:w="31"/><text x="61.1130%" y="1055.50"></text></g><g><title>event_listener::Event::notify (60 samples, 0.05%)</title><rect x="60.9133%" y="1045" width="0.0486%" height="15" fill="rgb(242,39,24)" fg:x="75195" fg:w="60"/><text x="61.1633%" y="1055.50"></text></g><g><title>event_listener::full_fence (32 samples, 0.03%)</title><rect x="60.9360%" y="1029" width="0.0259%" height="15" fill="rgb(249,32,23)" fg:x="75223" fg:w="32"/><text x="61.1860%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (21 samples, 0.02%)</title><rect x="60.9635%" y="1045" width="0.0170%" height="15" fill="rgb(251,195,23)" fg:x="75257" fg:w="21"/><text x="61.2135%" y="1055.50"></text></g><g><title>parking::Inner::park (43 samples, 0.03%)</title><rect x="60.9805%" y="1045" width="0.0348%" height="15" fill="rgb(236,174,8)" fg:x="75278" fg:w="43"/><text x="61.2305%" y="1055.50"></text></g><g><title>polling::epoll::Poller::wait (22 samples, 0.02%)</title><rect x="61.0283%" y="1045" width="0.0178%" height="15" fill="rgb(220,197,8)" fg:x="75337" fg:w="22"/><text x="61.2783%" y="1055.50"></text></g><g><title>sn_rust_alloc (105 samples, 0.09%)</title><rect x="61.0461%" y="1045" width="0.0851%" height="15" fill="rgb(240,108,37)" fg:x="75359" fg:w="105"/><text x="61.2961%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (65 samples, 0.05%)</title><rect x="61.1474%" y="1045" width="0.0527%" height="15" fill="rgb(232,176,24)" fg:x="75484" fg:w="65"/><text x="61.3974%" y="1055.50"></text></g><g><title>[libc-2.31.so] (1,495 samples, 1.21%)</title><rect x="61.2592%" y="581" width="1.2111%" height="15" fill="rgb(243,35,29)" fg:x="75622" fg:w="1495"/><text x="61.5092%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (146 samples, 0.12%)</title><rect x="62.6185%" y="565" width="0.1183%" height="15" fill="rgb(210,37,18)" fg:x="77300" fg:w="146"/><text x="62.8685%" y="575.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (1,880 samples, 1.52%)</title><rect x="61.2333%" y="597" width="1.5229%" height="15" fill="rgb(224,184,40)" fg:x="75590" fg:w="1880"/><text x="61.4833%" y="607.50"></text></g><g><title>sn_rust_alloc (353 samples, 0.29%)</title><rect x="62.4702%" y="581" width="0.2860%" height="15" fill="rgb(236,39,29)" fg:x="77117" fg:w="353"/><text x="62.7202%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.02%)</title><rect x="62.7367%" y="565" width="0.0194%" height="15" fill="rgb(232,48,39)" fg:x="77446" fg:w="24"/><text x="62.9867%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="62.9344%" y="469" width="0.0138%" height="15" fill="rgb(236,34,42)" fg:x="77690" fg:w="17"/><text x="63.1844%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="62.9619%" y="421" width="0.0154%" height="15" fill="rgb(243,106,37)" fg:x="77724" fg:w="19"/><text x="63.2119%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (95 samples, 0.08%)</title><rect x="62.9919%" y="325" width="0.0770%" height="15" fill="rgb(218,96,6)" fg:x="77761" fg:w="95"/><text x="63.2419%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (94 samples, 0.08%)</title><rect x="62.9927%" y="309" width="0.0761%" height="15" fill="rgb(235,130,12)" fg:x="77762" fg:w="94"/><text x="63.2427%" y="319.50"></text></g><g><title>__rg_dealloc (94 samples, 0.08%)</title><rect x="62.9927%" y="293" width="0.0761%" height="15" fill="rgb(231,95,0)" fg:x="77762" fg:w="94"/><text x="63.2427%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (94 samples, 0.08%)</title><rect x="62.9927%" y="277" width="0.0761%" height="15" fill="rgb(228,12,23)" fg:x="77762" fg:w="94"/><text x="63.2427%" y="287.50"></text></g><g><title>sn_rust_dealloc (79 samples, 0.06%)</title><rect x="63.0049%" y="261" width="0.0640%" height="15" fill="rgb(216,12,1)" fg:x="77777" fg:w="79"/><text x="63.2549%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (112 samples, 0.09%)</title><rect x="62.9862%" y="421" width="0.0907%" height="15" fill="rgb(219,59,3)" fg:x="77754" fg:w="112"/><text x="63.2362%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.09%)</title><rect x="62.9862%" y="405" width="0.0907%" height="15" fill="rgb(215,208,46)" fg:x="77754" fg:w="112"/><text x="63.2362%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (105 samples, 0.09%)</title><rect x="62.9919%" y="389" width="0.0851%" height="15" fill="rgb(254,224,29)" fg:x="77761" fg:w="105"/><text x="63.2419%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.09%)</title><rect x="62.9919%" y="373" width="0.0851%" height="15" fill="rgb(232,14,29)" fg:x="77761" fg:w="105"/><text x="63.2419%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (105 samples, 0.09%)</title><rect x="62.9919%" y="357" width="0.0851%" height="15" fill="rgb(208,45,52)" fg:x="77761" fg:w="105"/><text x="63.2419%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.09%)</title><rect x="62.9919%" y="341" width="0.0851%" height="15" fill="rgb(234,191,28)" fg:x="77761" fg:w="105"/><text x="63.2419%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (166 samples, 0.13%)</title><rect x="62.9482%" y="469" width="0.1345%" height="15" fill="rgb(244,67,43)" fg:x="77707" fg:w="166"/><text x="63.1982%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (160 samples, 0.13%)</title><rect x="62.9530%" y="453" width="0.1296%" height="15" fill="rgb(236,189,24)" fg:x="77713" fg:w="160"/><text x="63.2030%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (160 samples, 0.13%)</title><rect x="62.9530%" y="437" width="0.1296%" height="15" fill="rgb(239,214,33)" fg:x="77713" fg:w="160"/><text x="63.2030%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (212 samples, 0.17%)</title><rect x="62.9166%" y="485" width="0.1717%" height="15" fill="rgb(226,176,41)" fg:x="77668" fg:w="212"/><text x="63.1666%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (105 samples, 0.09%)</title><rect x="63.0883%" y="485" width="0.0851%" height="15" fill="rgb(248,47,8)" fg:x="77880" fg:w="105"/><text x="63.3383%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (62 samples, 0.05%)</title><rect x="63.1231%" y="469" width="0.0502%" height="15" fill="rgb(218,81,44)" fg:x="77923" fg:w="62"/><text x="63.3731%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (62 samples, 0.05%)</title><rect x="63.1231%" y="453" width="0.0502%" height="15" fill="rgb(213,98,6)" fg:x="77923" fg:w="62"/><text x="63.3731%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (249 samples, 0.20%)</title><rect x="63.1799%" y="421" width="0.2017%" height="15" fill="rgb(222,85,22)" fg:x="77993" fg:w="249"/><text x="63.4299%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (249 samples, 0.20%)</title><rect x="63.1799%" y="405" width="0.2017%" height="15" fill="rgb(239,46,39)" fg:x="77993" fg:w="249"/><text x="63.4299%" y="415.50"></text></g><g><title>alloc::alloc::alloc (242 samples, 0.20%)</title><rect x="63.1855%" y="389" width="0.1960%" height="15" fill="rgb(237,12,29)" fg:x="78000" fg:w="242"/><text x="63.4355%" y="399.50"></text></g><g><title>__rg_alloc (242 samples, 0.20%)</title><rect x="63.1855%" y="373" width="0.1960%" height="15" fill="rgb(214,77,8)" fg:x="78000" fg:w="242"/><text x="63.4355%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (242 samples, 0.20%)</title><rect x="63.1855%" y="357" width="0.1960%" height="15" fill="rgb(217,168,37)" fg:x="78000" fg:w="242"/><text x="63.4355%" y="367.50"></text></g><g><title>sn_rust_alloc (237 samples, 0.19%)</title><rect x="63.1896%" y="341" width="0.1920%" height="15" fill="rgb(221,217,23)" fg:x="78005" fg:w="237"/><text x="63.4396%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (2,663 samples, 2.16%)</title><rect x="61.2333%" y="965" width="2.1572%" height="15" fill="rgb(243,229,36)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="975.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,663 samples, 2.16%)</title><rect x="61.2333%" y="949" width="2.1572%" height="15" fill="rgb(251,163,40)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="959.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (2,663 samples, 2.16%)</title><rect x="61.2333%" y="933" width="2.1572%" height="15" fill="rgb(237,222,12)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="943.50">t..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,663 samples, 2.16%)</title><rect x="61.2333%" y="917" width="2.1572%" height="15" fill="rgb(248,132,6)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="927.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,663 samples, 2.16%)</title><rect x="61.2333%" y="901" width="2.1572%" height="15" fill="rgb(227,167,50)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="911.50">&lt;..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,663 samples, 2.16%)</title><rect x="61.2333%" y="885" width="2.1572%" height="15" fill="rgb(242,84,37)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="895.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,663 samples, 2.16%)</title><rect x="61.2333%" y="869" width="2.1572%" height="15" fill="rgb(212,4,50)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="879.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,663 samples, 2.16%)</title><rect x="61.2333%" y="853" width="2.1572%" height="15" fill="rgb(230,228,32)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="863.50">a..</text></g><g><title>std::panic::catch_unwind (2,663 samples, 2.16%)</title><rect x="61.2333%" y="837" width="2.1572%" height="15" fill="rgb(248,217,23)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="847.50">s..</text></g><g><title>std::panicking::try (2,663 samples, 2.16%)</title><rect x="61.2333%" y="821" width="2.1572%" height="15" fill="rgb(238,197,32)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="831.50">s..</text></g><g><title>std::panicking::try::do_call (2,663 samples, 2.16%)</title><rect x="61.2333%" y="805" width="2.1572%" height="15" fill="rgb(236,106,1)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="815.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,663 samples, 2.16%)</title><rect x="61.2333%" y="789" width="2.1572%" height="15" fill="rgb(219,228,13)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="799.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (2,663 samples, 2.16%)</title><rect x="61.2333%" y="773" width="2.1572%" height="15" fill="rgb(238,30,35)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="783.50">c..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (2,663 samples, 2.16%)</title><rect x="61.2333%" y="757" width="2.1572%" height="15" fill="rgb(236,70,23)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="767.50">a..</text></g><g><title>async_ffi::FfiContext::with_context (2,663 samples, 2.16%)</title><rect x="61.2333%" y="741" width="2.1572%" height="15" fill="rgb(249,104,48)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="751.50">a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (2,663 samples, 2.16%)</title><rect x="61.2333%" y="725" width="2.1572%" height="15" fill="rgb(254,117,50)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="735.50">a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,663 samples, 2.16%)</title><rect x="61.2333%" y="709" width="2.1572%" height="15" fill="rgb(223,152,4)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="719.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (2,663 samples, 2.16%)</title><rect x="61.2333%" y="693" width="2.1572%" height="15" fill="rgb(245,6,2)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (2,663 samples, 2.16%)</title><rect x="61.2333%" y="677" width="2.1572%" height="15" fill="rgb(249,150,24)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="687.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (2,663 samples, 2.16%)</title><rect x="61.2333%" y="661" width="2.1572%" height="15" fill="rgb(228,185,42)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (2,663 samples, 2.16%)</title><rect x="61.2333%" y="645" width="2.1572%" height="15" fill="rgb(226,39,33)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="655.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (2,663 samples, 2.16%)</title><rect x="61.2333%" y="629" width="2.1572%" height="15" fill="rgb(221,166,19)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="639.50">t..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (2,663 samples, 2.16%)</title><rect x="61.2333%" y="613" width="2.1572%" height="15" fill="rgb(209,109,2)" fg:x="75590" fg:w="2663"/><text x="61.4833%" y="623.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (783 samples, 0.63%)</title><rect x="62.7562%" y="597" width="0.6343%" height="15" fill="rgb(252,216,26)" fg:x="77470" fg:w="783"/><text x="63.0062%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (783 samples, 0.63%)</title><rect x="62.7562%" y="581" width="0.6343%" height="15" fill="rgb(227,173,36)" fg:x="77470" fg:w="783"/><text x="63.0062%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (783 samples, 0.63%)</title><rect x="62.7562%" y="565" width="0.6343%" height="15" fill="rgb(209,90,7)" fg:x="77470" fg:w="783"/><text x="63.0062%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (783 samples, 0.63%)</title><rect x="62.7562%" y="549" width="0.6343%" height="15" fill="rgb(250,194,11)" fg:x="77470" fg:w="783"/><text x="63.0062%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (783 samples, 0.63%)</title><rect x="62.7562%" y="533" width="0.6343%" height="15" fill="rgb(220,72,50)" fg:x="77470" fg:w="783"/><text x="63.0062%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (783 samples, 0.63%)</title><rect x="62.7562%" y="517" width="0.6343%" height="15" fill="rgb(222,106,48)" fg:x="77470" fg:w="783"/><text x="63.0062%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (593 samples, 0.48%)</title><rect x="62.9101%" y="501" width="0.4804%" height="15" fill="rgb(216,220,45)" fg:x="77660" fg:w="593"/><text x="63.1601%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (268 samples, 0.22%)</title><rect x="63.1734%" y="485" width="0.2171%" height="15" fill="rgb(234,112,18)" fg:x="77985" fg:w="268"/><text x="63.4234%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (268 samples, 0.22%)</title><rect x="63.1734%" y="469" width="0.2171%" height="15" fill="rgb(206,179,9)" fg:x="77985" fg:w="268"/><text x="63.4234%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (268 samples, 0.22%)</title><rect x="63.1734%" y="453" width="0.2171%" height="15" fill="rgb(215,115,40)" fg:x="77985" fg:w="268"/><text x="63.4234%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (268 samples, 0.22%)</title><rect x="63.1734%" y="437" width="0.2171%" height="15" fill="rgb(222,69,34)" fg:x="77985" fg:w="268"/><text x="63.4234%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (330 samples, 0.27%)</title><rect x="63.6303%" y="837" width="0.2673%" height="15" fill="rgb(209,161,10)" fg:x="78549" fg:w="330"/><text x="63.8803%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (532 samples, 0.43%)</title><rect x="63.5962%" y="853" width="0.4310%" height="15" fill="rgb(217,6,38)" fg:x="78507" fg:w="532"/><text x="63.8462%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (160 samples, 0.13%)</title><rect x="63.8976%" y="837" width="0.1296%" height="15" fill="rgb(229,229,48)" fg:x="78879" fg:w="160"/><text x="64.1476%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (13 samples, 0.01%)</title><rect x="64.0304%" y="853" width="0.0105%" height="15" fill="rgb(225,21,28)" fg:x="79043" fg:w="13"/><text x="64.2804%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (13 samples, 0.01%)</title><rect x="64.0304%" y="837" width="0.0105%" height="15" fill="rgb(206,33,13)" fg:x="79043" fg:w="13"/><text x="64.2804%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="64.0304%" y="821" width="0.0105%" height="15" fill="rgb(242,178,17)" fg:x="79043" fg:w="13"/><text x="64.2804%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (75 samples, 0.06%)</title><rect x="64.0515%" y="837" width="0.0608%" height="15" fill="rgb(220,162,5)" fg:x="79069" fg:w="75"/><text x="64.3015%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (75 samples, 0.06%)</title><rect x="64.0515%" y="821" width="0.0608%" height="15" fill="rgb(210,33,43)" fg:x="79069" fg:w="75"/><text x="64.3015%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (61 samples, 0.05%)</title><rect x="64.0628%" y="805" width="0.0494%" height="15" fill="rgb(216,116,54)" fg:x="79083" fg:w="61"/><text x="64.3128%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (61 samples, 0.05%)</title><rect x="64.0628%" y="789" width="0.0494%" height="15" fill="rgb(249,92,24)" fg:x="79083" fg:w="61"/><text x="64.3128%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (61 samples, 0.05%)</title><rect x="64.0628%" y="773" width="0.0494%" height="15" fill="rgb(231,189,14)" fg:x="79083" fg:w="61"/><text x="64.3128%" y="783.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="64.0742%" y="757" width="0.0381%" height="15" fill="rgb(230,8,41)" fg:x="79097" fg:w="47"/><text x="64.3242%" y="767.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.03%)</title><rect x="64.1122%" y="837" width="0.0259%" height="15" fill="rgb(249,7,27)" fg:x="79144" fg:w="32"/><text x="64.3622%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (121 samples, 0.10%)</title><rect x="64.0410%" y="853" width="0.0980%" height="15" fill="rgb(232,86,5)" fg:x="79056" fg:w="121"/><text x="64.2910%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (942 samples, 0.76%)</title><rect x="63.3905%" y="869" width="0.7631%" height="15" fill="rgb(224,175,18)" fg:x="78253" fg:w="942"/><text x="63.6405%" y="879.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (18 samples, 0.01%)</title><rect x="64.1390%" y="853" width="0.0146%" height="15" fill="rgb(220,129,12)" fg:x="79177" fg:w="18"/><text x="64.3890%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="64.2240%" y="741" width="0.0194%" height="15" fill="rgb(210,19,36)" fg:x="79282" fg:w="24"/><text x="64.4740%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (76 samples, 0.06%)</title><rect x="64.1843%" y="853" width="0.0616%" height="15" fill="rgb(219,96,14)" fg:x="79233" fg:w="76"/><text x="64.4343%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76 samples, 0.06%)</title><rect x="64.1843%" y="837" width="0.0616%" height="15" fill="rgb(249,106,1)" fg:x="79233" fg:w="76"/><text x="64.4343%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 0.06%)</title><rect x="64.1843%" y="821" width="0.0616%" height="15" fill="rgb(249,155,20)" fg:x="79233" fg:w="76"/><text x="64.4343%" y="831.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.06%)</title><rect x="64.1851%" y="805" width="0.0608%" height="15" fill="rgb(244,168,9)" fg:x="79234" fg:w="75"/><text x="64.4351%" y="815.50"></text></g><g><title>__rg_alloc (75 samples, 0.06%)</title><rect x="64.1851%" y="789" width="0.0608%" height="15" fill="rgb(216,23,50)" fg:x="79234" fg:w="75"/><text x="64.4351%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (75 samples, 0.06%)</title><rect x="64.1851%" y="773" width="0.0608%" height="15" fill="rgb(224,219,20)" fg:x="79234" fg:w="75"/><text x="64.4351%" y="783.50"></text></g><g><title>sn_rust_alloc (69 samples, 0.06%)</title><rect x="64.1900%" y="757" width="0.0559%" height="15" fill="rgb(222,156,15)" fg:x="79240" fg:w="69"/><text x="64.4400%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,068 samples, 0.87%)</title><rect x="63.3905%" y="949" width="0.8652%" height="15" fill="rgb(231,97,17)" fg:x="78253" fg:w="1068"/><text x="63.6405%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,068 samples, 0.87%)</title><rect x="63.3905%" y="933" width="0.8652%" height="15" fill="rgb(218,70,48)" fg:x="78253" fg:w="1068"/><text x="63.6405%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,068 samples, 0.87%)</title><rect x="63.3905%" y="917" width="0.8652%" height="15" fill="rgb(212,196,52)" fg:x="78253" fg:w="1068"/><text x="63.6405%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,068 samples, 0.87%)</title><rect x="63.3905%" y="901" width="0.8652%" height="15" fill="rgb(243,203,18)" fg:x="78253" fg:w="1068"/><text x="63.6405%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,068 samples, 0.87%)</title><rect x="63.3905%" y="885" width="0.8652%" height="15" fill="rgb(252,125,41)" fg:x="78253" fg:w="1068"/><text x="63.6405%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (126 samples, 0.10%)</title><rect x="64.1536%" y="869" width="0.1021%" height="15" fill="rgb(223,180,33)" fg:x="79195" fg:w="126"/><text x="64.4036%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,069 samples, 0.87%)</title><rect x="63.3905%" y="965" width="0.8660%" height="15" fill="rgb(254,159,46)" fg:x="78253" fg:w="1069"/><text x="63.6405%" y="975.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (233 samples, 0.19%)</title><rect x="64.3788%" y="837" width="0.1887%" height="15" fill="rgb(254,38,10)" fg:x="79473" fg:w="233"/><text x="64.6288%" y="847.50"></text></g><g><title>core::mem::replace (233 samples, 0.19%)</title><rect x="64.3788%" y="821" width="0.1887%" height="15" fill="rgb(208,217,32)" fg:x="79473" fg:w="233"/><text x="64.6288%" y="831.50"></text></g><g><title>core::ptr::read (232 samples, 0.19%)</title><rect x="64.3796%" y="805" width="0.1879%" height="15" fill="rgb(221,120,13)" fg:x="79474" fg:w="232"/><text x="64.6296%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (354 samples, 0.29%)</title><rect x="64.3196%" y="853" width="0.2868%" height="15" fill="rgb(246,54,52)" fg:x="79400" fg:w="354"/><text x="64.5696%" y="863.50"></text></g><g><title>core::mem::drop (48 samples, 0.04%)</title><rect x="64.5675%" y="837" width="0.0389%" height="15" fill="rgb(242,34,25)" fg:x="79706" fg:w="48"/><text x="64.8175%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (48 samples, 0.04%)</title><rect x="64.5675%" y="821" width="0.0389%" height="15" fill="rgb(247,209,9)" fg:x="79706" fg:w="48"/><text x="64.8175%" y="831.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="64.6064%" y="837" width="0.0113%" height="15" fill="rgb(228,71,26)" fg:x="79754" fg:w="14"/><text x="64.8564%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (307 samples, 0.25%)</title><rect x="64.6064%" y="853" width="0.2487%" height="15" fill="rgb(222,145,49)" fg:x="79754" fg:w="307"/><text x="64.8564%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (293 samples, 0.24%)</title><rect x="64.6177%" y="837" width="0.2374%" height="15" fill="rgb(218,121,17)" fg:x="79768" fg:w="293"/><text x="64.8677%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (293 samples, 0.24%)</title><rect x="64.6177%" y="821" width="0.2374%" height="15" fill="rgb(244,50,7)" fg:x="79768" fg:w="293"/><text x="64.8677%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (273 samples, 0.22%)</title><rect x="64.6339%" y="805" width="0.2211%" height="15" fill="rgb(246,229,37)" fg:x="79788" fg:w="273"/><text x="64.8839%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (273 samples, 0.22%)</title><rect x="64.6339%" y="789" width="0.2211%" height="15" fill="rgb(225,18,5)" fg:x="79788" fg:w="273"/><text x="64.8839%" y="799.50"></text></g><g><title>__GI___pthread_mutex_unlock (257 samples, 0.21%)</title><rect x="64.6469%" y="773" width="0.2082%" height="15" fill="rgb(213,204,8)" fg:x="79804" fg:w="257"/><text x="64.8969%" y="783.50"></text></g><g><title>core::task::wake::Waker::will_wake (31 samples, 0.03%)</title><rect x="64.8551%" y="853" width="0.0251%" height="15" fill="rgb(238,103,6)" fg:x="80061" fg:w="31"/><text x="65.1051%" y="863.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (31 samples, 0.03%)</title><rect x="64.8551%" y="837" width="0.0251%" height="15" fill="rgb(222,25,35)" fg:x="80061" fg:w="31"/><text x="65.1051%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (21 samples, 0.02%)</title><rect x="64.8632%" y="821" width="0.0170%" height="15" fill="rgb(213,203,35)" fg:x="80071" fg:w="21"/><text x="65.1132%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="64.8632%" y="805" width="0.0170%" height="15" fill="rgb(221,79,53)" fg:x="80071" fg:w="21"/><text x="65.1132%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,088 samples, 4.93%)</title><rect x="61.2000%" y="1045" width="4.9317%" height="15" fill="rgb(243,200,35)" fg:x="75549" fg:w="6088"/><text x="61.4500%" y="1055.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,074 samples, 4.92%)</title><rect x="61.2114%" y="1029" width="4.9204%" height="15" fill="rgb(248,60,25)" fg:x="75563" fg:w="6074"/><text x="61.4614%" y="1039.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,056 samples, 4.91%)</title><rect x="61.2260%" y="1013" width="4.9058%" height="15" fill="rgb(227,53,46)" fg:x="75581" fg:w="6056"/><text x="61.4760%" y="1023.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,056 samples, 4.91%)</title><rect x="61.2260%" y="997" width="4.9058%" height="15" fill="rgb(216,120,32)" fg:x="75581" fg:w="6056"/><text x="61.4760%" y="1007.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,056 samples, 4.91%)</title><rect x="61.2260%" y="981" width="4.9058%" height="15" fill="rgb(220,134,1)" fg:x="75581" fg:w="6056"/><text x="61.4760%" y="991.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,315 samples, 1.88%)</title><rect x="64.2564%" y="965" width="1.8753%" height="15" fill="rgb(237,168,5)" fg:x="79322" fg:w="2315"/><text x="64.5064%" y="975.50">t..</text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,315 samples, 1.88%)</title><rect x="64.2564%" y="949" width="1.8753%" height="15" fill="rgb(231,100,33)" fg:x="79322" fg:w="2315"/><text x="64.5064%" y="959.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,315 samples, 1.88%)</title><rect x="64.2564%" y="933" width="1.8753%" height="15" fill="rgb(236,177,47)" fg:x="79322" fg:w="2315"/><text x="64.5064%" y="943.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,315 samples, 1.88%)</title><rect x="64.2564%" y="917" width="1.8753%" height="15" fill="rgb(235,7,49)" fg:x="79322" fg:w="2315"/><text x="64.5064%" y="927.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,315 samples, 1.88%)</title><rect x="64.2564%" y="901" width="1.8753%" height="15" fill="rgb(232,119,22)" fg:x="79322" fg:w="2315"/><text x="64.5064%" y="911.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,315 samples, 1.88%)</title><rect x="64.2564%" y="885" width="1.8753%" height="15" fill="rgb(254,73,53)" fg:x="79322" fg:w="2315"/><text x="64.5064%" y="895.50">&lt;..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,315 samples, 1.88%)</title><rect x="64.2564%" y="869" width="1.8753%" height="15" fill="rgb(251,35,20)" fg:x="79322" fg:w="2315"/><text x="64.5064%" y="879.50">&lt;..</text></g><g><title>event_listener::Inner::lock (1,545 samples, 1.25%)</title><rect x="64.8802%" y="853" width="1.2516%" height="15" fill="rgb(241,119,20)" fg:x="80092" fg:w="1545"/><text x="65.1302%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,515 samples, 1.23%)</title><rect x="64.9045%" y="837" width="1.2273%" height="15" fill="rgb(207,102,14)" fg:x="80122" fg:w="1515"/><text x="65.1545%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,504 samples, 1.22%)</title><rect x="64.9134%" y="821" width="1.2183%" height="15" fill="rgb(248,201,50)" fg:x="80133" fg:w="1504"/><text x="65.1634%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (1,459 samples, 1.18%)</title><rect x="64.9499%" y="805" width="1.1819%" height="15" fill="rgb(222,185,44)" fg:x="80178" fg:w="1459"/><text x="65.1999%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (1,459 samples, 1.18%)</title><rect x="64.9499%" y="789" width="1.1819%" height="15" fill="rgb(218,107,18)" fg:x="80178" fg:w="1459"/><text x="65.1999%" y="799.50"></text></g><g><title>tremor_common::time::nanotime (47 samples, 0.04%)</title><rect x="66.1326%" y="1045" width="0.0381%" height="15" fill="rgb(237,177,39)" fg:x="81638" fg:w="47"/><text x="66.3826%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (47 samples, 0.04%)</title><rect x="66.1326%" y="1029" width="0.0381%" height="15" fill="rgb(246,69,6)" fg:x="81638" fg:w="47"/><text x="66.3826%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (47 samples, 0.04%)</title><rect x="66.1326%" y="1013" width="0.0381%" height="15" fill="rgb(234,208,37)" fg:x="81638" fg:w="47"/><text x="66.3826%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (47 samples, 0.04%)</title><rect x="66.1326%" y="997" width="0.0381%" height="15" fill="rgb(225,4,6)" fg:x="81638" fg:w="47"/><text x="66.3826%" y="1007.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="66.2290%" y="933" width="0.0154%" height="15" fill="rgb(233,45,0)" fg:x="81757" fg:w="19"/><text x="66.4790%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (18 samples, 0.01%)</title><rect x="66.2298%" y="917" width="0.0146%" height="15" fill="rgb(226,136,5)" fg:x="81758" fg:w="18"/><text x="66.4798%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.01%)</title><rect x="66.2298%" y="901" width="0.0146%" height="15" fill="rgb(211,91,47)" fg:x="81758" fg:w="18"/><text x="66.4798%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.01%)</title><rect x="66.2298%" y="885" width="0.0146%" height="15" fill="rgb(242,88,51)" fg:x="81758" fg:w="18"/><text x="66.4798%" y="895.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="66.2468%" y="933" width="0.0219%" height="15" fill="rgb(230,91,28)" fg:x="81779" fg:w="27"/><text x="66.4968%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (27 samples, 0.02%)</title><rect x="66.2468%" y="917" width="0.0219%" height="15" fill="rgb(254,186,29)" fg:x="81779" fg:w="27"/><text x="66.4968%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (23 samples, 0.02%)</title><rect x="66.2500%" y="901" width="0.0186%" height="15" fill="rgb(238,6,4)" fg:x="81783" fg:w="23"/><text x="66.5000%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="66.2500%" y="885" width="0.0186%" height="15" fill="rgb(221,151,16)" fg:x="81783" fg:w="23"/><text x="66.5000%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="66.2516%" y="869" width="0.0170%" height="15" fill="rgb(251,143,52)" fg:x="81785" fg:w="21"/><text x="66.5016%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.02%)</title><rect x="66.2525%" y="853" width="0.0162%" height="15" fill="rgb(206,90,15)" fg:x="81786" fg:w="20"/><text x="66.5025%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (20 samples, 0.02%)</title><rect x="66.2525%" y="837" width="0.0162%" height="15" fill="rgb(218,35,8)" fg:x="81786" fg:w="20"/><text x="66.5025%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (16 samples, 0.01%)</title><rect x="66.2687%" y="933" width="0.0130%" height="15" fill="rgb(239,215,6)" fg:x="81806" fg:w="16"/><text x="66.5187%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (13 samples, 0.01%)</title><rect x="66.2711%" y="917" width="0.0105%" height="15" fill="rgb(245,116,39)" fg:x="81809" fg:w="13"/><text x="66.5211%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="66.2711%" y="901" width="0.0105%" height="15" fill="rgb(242,65,28)" fg:x="81809" fg:w="13"/><text x="66.5211%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="66.2711%" y="885" width="0.0105%" height="15" fill="rgb(252,132,53)" fg:x="81809" fg:w="13"/><text x="66.5211%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (13 samples, 0.01%)</title><rect x="66.2711%" y="869" width="0.0105%" height="15" fill="rgb(224,159,50)" fg:x="81809" fg:w="13"/><text x="66.5211%" y="879.50"></text></g><g><title>event_listener::Inner::lock (156 samples, 0.13%)</title><rect x="66.2849%" y="933" width="0.1264%" height="15" fill="rgb(224,93,4)" fg:x="81826" fg:w="156"/><text x="66.5349%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (153 samples, 0.12%)</title><rect x="66.2873%" y="917" width="0.1239%" height="15" fill="rgb(208,81,34)" fg:x="81829" fg:w="153"/><text x="66.5373%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (151 samples, 0.12%)</title><rect x="66.2889%" y="901" width="0.1223%" height="15" fill="rgb(233,92,54)" fg:x="81831" fg:w="151"/><text x="66.5389%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (116 samples, 0.09%)</title><rect x="66.3173%" y="885" width="0.0940%" height="15" fill="rgb(237,21,14)" fg:x="81866" fg:w="116"/><text x="66.5673%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (116 samples, 0.09%)</title><rect x="66.3173%" y="869" width="0.0940%" height="15" fill="rgb(249,128,51)" fg:x="81866" fg:w="116"/><text x="66.5673%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (285 samples, 0.23%)</title><rect x="66.2184%" y="949" width="0.2309%" height="15" fill="rgb(223,129,24)" fg:x="81744" fg:w="285"/><text x="66.4684%" y="959.50"></text></g><g><title>event_listener::List::remove (47 samples, 0.04%)</title><rect x="66.4112%" y="933" width="0.0381%" height="15" fill="rgb(231,168,25)" fg:x="81982" fg:w="47"/><text x="66.6612%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (37 samples, 0.03%)</title><rect x="66.4193%" y="917" width="0.0300%" height="15" fill="rgb(224,39,20)" fg:x="81992" fg:w="37"/><text x="66.6693%" y="927.50"></text></g><g><title>core::mem::replace (37 samples, 0.03%)</title><rect x="66.4193%" y="901" width="0.0300%" height="15" fill="rgb(225,152,53)" fg:x="81992" fg:w="37"/><text x="66.6693%" y="911.50"></text></g><g><title>core::ptr::read (37 samples, 0.03%)</title><rect x="66.4193%" y="885" width="0.0300%" height="15" fill="rgb(252,17,24)" fg:x="81992" fg:w="37"/><text x="66.6693%" y="895.50"></text></g><g><title>[libc-2.31.so] (707 samples, 0.57%)</title><rect x="66.4493%" y="949" width="0.5727%" height="15" fill="rgb(250,114,30)" fg:x="82029" fg:w="707"/><text x="66.6993%" y="959.50"></text></g><g><title>[libc-2.31.so] (1,034 samples, 0.84%)</title><rect x="67.0593%" y="933" width="0.8376%" height="15" fill="rgb(229,5,4)" fg:x="82782" fg:w="1034"/><text x="67.3093%" y="943.50"></text></g><g><title>[libc-2.31.so] (251 samples, 0.20%)</title><rect x="68.0484%" y="901" width="0.2033%" height="15" fill="rgb(225,176,49)" fg:x="84003" fg:w="251"/><text x="68.2984%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (73 samples, 0.06%)</title><rect x="68.2517%" y="901" width="0.0591%" height="15" fill="rgb(224,221,49)" fg:x="84254" fg:w="73"/><text x="68.5017%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (69 samples, 0.06%)</title><rect x="68.2549%" y="885" width="0.0559%" height="15" fill="rgb(253,169,27)" fg:x="84258" fg:w="69"/><text x="68.5049%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (69 samples, 0.06%)</title><rect x="68.2549%" y="869" width="0.0559%" height="15" fill="rgb(211,206,16)" fg:x="84258" fg:w="69"/><text x="68.5049%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (69 samples, 0.06%)</title><rect x="68.2549%" y="853" width="0.0559%" height="15" fill="rgb(244,87,35)" fg:x="84258" fg:w="69"/><text x="68.5049%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (595 samples, 0.48%)</title><rect x="68.3157%" y="901" width="0.4820%" height="15" fill="rgb(246,28,10)" fg:x="84333" fg:w="595"/><text x="68.5657%" y="911.50"></text></g><g><title>core::ptr::read (595 samples, 0.48%)</title><rect x="68.3157%" y="885" width="0.4820%" height="15" fill="rgb(229,12,44)" fg:x="84333" fg:w="595"/><text x="68.5657%" y="895.50"></text></g><g><title>[libc-2.31.so] (595 samples, 0.48%)</title><rect x="68.3157%" y="869" width="0.4820%" height="15" fill="rgb(210,145,37)" fg:x="84333" fg:w="595"/><text x="68.5657%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1,057 samples, 0.86%)</title><rect x="68.7977%" y="901" width="0.8562%" height="15" fill="rgb(227,112,52)" fg:x="84928" fg:w="1057"/><text x="69.0477%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1,057 samples, 0.86%)</title><rect x="68.7977%" y="885" width="0.8562%" height="15" fill="rgb(238,155,34)" fg:x="84928" fg:w="1057"/><text x="69.0477%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (289 samples, 0.23%)</title><rect x="69.6539%" y="901" width="0.2341%" height="15" fill="rgb(239,226,36)" fg:x="85985" fg:w="289"/><text x="69.9039%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (285 samples, 0.23%)</title><rect x="69.6572%" y="885" width="0.2309%" height="15" fill="rgb(230,16,23)" fg:x="85989" fg:w="285"/><text x="69.9072%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,459 samples, 1.99%)</title><rect x="67.8969%" y="933" width="1.9920%" height="15" fill="rgb(236,171,36)" fg:x="83816" fg:w="2459"/><text x="68.1469%" y="943.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,419 samples, 1.96%)</title><rect x="67.9293%" y="917" width="1.9596%" height="15" fill="rgb(221,22,14)" fg:x="83856" fg:w="2419"/><text x="68.1793%" y="927.50">c..</text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,889 samples, 3.15%)</title><rect x="67.0220%" y="949" width="3.1504%" height="15" fill="rgb(242,43,11)" fg:x="82736" fg:w="3889"/><text x="67.2720%" y="959.50">asy..</text></g><g><title>event_listener::Event::notify (350 samples, 0.28%)</title><rect x="69.8889%" y="933" width="0.2835%" height="15" fill="rgb(232,69,23)" fg:x="86275" fg:w="350"/><text x="70.1389%" y="943.50"></text></g><g><title>event_listener::full_fence (329 samples, 0.27%)</title><rect x="69.9059%" y="917" width="0.2665%" height="15" fill="rgb(216,180,54)" fg:x="86296" fg:w="329"/><text x="70.1559%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (329 samples, 0.27%)</title><rect x="69.9059%" y="901" width="0.2665%" height="15" fill="rgb(216,5,24)" fg:x="86296" fg:w="329"/><text x="70.1559%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (329 samples, 0.27%)</title><rect x="69.9059%" y="885" width="0.2665%" height="15" fill="rgb(225,89,9)" fg:x="86296" fg:w="329"/><text x="70.1559%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.01%)</title><rect x="70.1724%" y="949" width="0.0113%" height="15" fill="rgb(243,75,33)" fg:x="86625" fg:w="14"/><text x="70.4224%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (68 samples, 0.06%)</title><rect x="70.1837%" y="949" width="0.0551%" height="15" fill="rgb(247,141,45)" fg:x="86639" fg:w="68"/><text x="70.4337%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (46 samples, 0.04%)</title><rect x="70.2015%" y="933" width="0.0373%" height="15" fill="rgb(232,177,36)" fg:x="86661" fg:w="46"/><text x="70.4515%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (42 samples, 0.03%)</title><rect x="70.2048%" y="917" width="0.0340%" height="15" fill="rgb(219,125,36)" fg:x="86665" fg:w="42"/><text x="70.4548%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.03%)</title><rect x="70.2048%" y="901" width="0.0340%" height="15" fill="rgb(227,94,9)" fg:x="86665" fg:w="42"/><text x="70.4548%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (42 samples, 0.03%)</title><rect x="70.2048%" y="885" width="0.0340%" height="15" fill="rgb(240,34,52)" fg:x="86665" fg:w="42"/><text x="70.4548%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (42 samples, 0.03%)</title><rect x="70.2048%" y="869" width="0.0340%" height="15" fill="rgb(216,45,12)" fg:x="86665" fg:w="42"/><text x="70.4548%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (47 samples, 0.04%)</title><rect x="70.2396%" y="933" width="0.0381%" height="15" fill="rgb(246,21,19)" fg:x="86708" fg:w="47"/><text x="70.4896%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (47 samples, 0.04%)</title><rect x="70.2396%" y="917" width="0.0381%" height="15" fill="rgb(213,98,42)" fg:x="86708" fg:w="47"/><text x="70.4896%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (47 samples, 0.04%)</title><rect x="70.2396%" y="901" width="0.0381%" height="15" fill="rgb(250,136,47)" fg:x="86708" fg:w="47"/><text x="70.4896%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="70.2777%" y="933" width="0.0203%" height="15" fill="rgb(251,124,27)" fg:x="86755" fg:w="25"/><text x="70.5277%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (24 samples, 0.02%)</title><rect x="70.2785%" y="917" width="0.0194%" height="15" fill="rgb(229,180,14)" fg:x="86756" fg:w="24"/><text x="70.5285%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="70.2785%" y="901" width="0.0194%" height="15" fill="rgb(245,216,25)" fg:x="86756" fg:w="24"/><text x="70.5285%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.02%)</title><rect x="70.2785%" y="885" width="0.0194%" height="15" fill="rgb(251,43,5)" fg:x="86756" fg:w="24"/><text x="70.5285%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (23 samples, 0.02%)</title><rect x="70.2793%" y="869" width="0.0186%" height="15" fill="rgb(250,128,24)" fg:x="86757" fg:w="23"/><text x="70.5293%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (23 samples, 0.02%)</title><rect x="70.2793%" y="853" width="0.0186%" height="15" fill="rgb(217,117,27)" fg:x="86757" fg:w="23"/><text x="70.5293%" y="863.50"></text></g><g><title>event_listener::Inner::lock (60 samples, 0.05%)</title><rect x="70.2988%" y="933" width="0.0486%" height="15" fill="rgb(245,147,4)" fg:x="86781" fg:w="60"/><text x="70.5488%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (57 samples, 0.05%)</title><rect x="70.3012%" y="917" width="0.0462%" height="15" fill="rgb(242,201,35)" fg:x="86784" fg:w="57"/><text x="70.5512%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 0.05%)</title><rect x="70.3012%" y="901" width="0.0462%" height="15" fill="rgb(218,181,1)" fg:x="86784" fg:w="57"/><text x="70.5512%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (57 samples, 0.05%)</title><rect x="70.3012%" y="885" width="0.0462%" height="15" fill="rgb(222,6,29)" fg:x="86784" fg:w="57"/><text x="70.5512%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (57 samples, 0.05%)</title><rect x="70.3012%" y="869" width="0.0462%" height="15" fill="rgb(208,186,3)" fg:x="86784" fg:w="57"/><text x="70.5512%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,165 samples, 4.18%)</title><rect x="66.1779%" y="1029" width="4.1840%" height="15" fill="rgb(216,36,26)" fg:x="81694" fg:w="5165"/><text x="66.4279%" y="1039.50">&lt;asyn..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,165 samples, 4.18%)</title><rect x="66.1779%" y="1013" width="4.1840%" height="15" fill="rgb(248,201,23)" fg:x="81694" fg:w="5165"/><text x="66.4279%" y="1023.50">&lt;trem..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,165 samples, 4.18%)</title><rect x="66.1779%" y="997" width="4.1840%" height="15" fill="rgb(251,170,31)" fg:x="81694" fg:w="5165"/><text x="66.4279%" y="1007.50">&lt;asyn..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,165 samples, 4.18%)</title><rect x="66.1779%" y="981" width="4.1840%" height="15" fill="rgb(207,110,25)" fg:x="81694" fg:w="5165"/><text x="66.4279%" y="991.50">&lt;asyn..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,165 samples, 4.18%)</title><rect x="66.1779%" y="965" width="4.1840%" height="15" fill="rgb(250,54,15)" fg:x="81694" fg:w="5165"/><text x="66.4279%" y="975.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (152 samples, 0.12%)</title><rect x="70.2388%" y="949" width="0.1231%" height="15" fill="rgb(227,68,33)" fg:x="86707" fg:w="152"/><text x="70.4888%" y="959.50"></text></g><g><title>event_listener::full_fence (16 samples, 0.01%)</title><rect x="70.3490%" y="933" width="0.0130%" height="15" fill="rgb(238,34,41)" fg:x="86843" fg:w="16"/><text x="70.5990%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (14 samples, 0.01%)</title><rect x="70.3506%" y="917" width="0.0113%" height="15" fill="rgb(220,11,15)" fg:x="86845" fg:w="14"/><text x="70.6006%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="70.3506%" y="901" width="0.0113%" height="15" fill="rgb(246,111,35)" fg:x="86845" fg:w="14"/><text x="70.6006%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (41 samples, 0.03%)</title><rect x="70.4105%" y="661" width="0.0332%" height="15" fill="rgb(209,88,53)" fg:x="86919" fg:w="41"/><text x="70.6605%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 0.03%)</title><rect x="70.4105%" y="645" width="0.0332%" height="15" fill="rgb(231,185,47)" fg:x="86919" fg:w="41"/><text x="70.6605%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.03%)</title><rect x="70.4105%" y="629" width="0.0332%" height="15" fill="rgb(233,154,1)" fg:x="86919" fg:w="41"/><text x="70.6605%" y="639.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="70.4162%" y="613" width="0.0275%" height="15" fill="rgb(225,15,46)" fg:x="86926" fg:w="34"/><text x="70.6662%" y="623.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="70.4162%" y="597" width="0.0275%" height="15" fill="rgb(211,135,41)" fg:x="86926" fg:w="34"/><text x="70.6662%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="70.4162%" y="581" width="0.0275%" height="15" fill="rgb(208,54,0)" fg:x="86926" fg:w="34"/><text x="70.6662%" y="591.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="70.4162%" y="565" width="0.0275%" height="15" fill="rgb(244,136,14)" fg:x="86926" fg:w="34"/><text x="70.6662%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (43 samples, 0.03%)</title><rect x="70.4916%" y="645" width="0.0348%" height="15" fill="rgb(241,56,14)" fg:x="87019" fg:w="43"/><text x="70.7416%" y="655.50"></text></g><g><title>core::time::Duration::as_nanos (34 samples, 0.03%)</title><rect x="70.5264%" y="645" width="0.0275%" height="15" fill="rgb(205,80,24)" fg:x="87062" fg:w="34"/><text x="70.7764%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (127 samples, 0.10%)</title><rect x="70.5539%" y="629" width="0.1029%" height="15" fill="rgb(220,57,4)" fg:x="87096" fg:w="127"/><text x="70.8039%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (55 samples, 0.04%)</title><rect x="70.7046%" y="597" width="0.0446%" height="15" fill="rgb(226,193,50)" fg:x="87282" fg:w="55"/><text x="70.9546%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (55 samples, 0.04%)</title><rect x="70.7046%" y="581" width="0.0446%" height="15" fill="rgb(231,168,22)" fg:x="87282" fg:w="55"/><text x="70.9546%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (51 samples, 0.04%)</title><rect x="70.7078%" y="565" width="0.0413%" height="15" fill="rgb(254,215,14)" fg:x="87286" fg:w="51"/><text x="70.9578%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (51 samples, 0.04%)</title><rect x="70.7078%" y="549" width="0.0413%" height="15" fill="rgb(211,115,16)" fg:x="87286" fg:w="51"/><text x="70.9578%" y="559.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (51 samples, 0.04%)</title><rect x="70.7078%" y="533" width="0.0413%" height="15" fill="rgb(236,210,16)" fg:x="87286" fg:w="51"/><text x="70.9578%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (26 samples, 0.02%)</title><rect x="70.7281%" y="517" width="0.0211%" height="15" fill="rgb(221,94,12)" fg:x="87311" fg:w="26"/><text x="70.9781%" y="527.50"></text></g><g><title>std::time::SystemTime::duration_since (263 samples, 0.21%)</title><rect x="70.5539%" y="645" width="0.2130%" height="15" fill="rgb(235,218,49)" fg:x="87096" fg:w="263"/><text x="70.8039%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (136 samples, 0.11%)</title><rect x="70.6568%" y="629" width="0.1102%" height="15" fill="rgb(217,114,14)" fg:x="87223" fg:w="136"/><text x="70.9068%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (136 samples, 0.11%)</title><rect x="70.6568%" y="613" width="0.1102%" height="15" fill="rgb(216,145,22)" fg:x="87223" fg:w="136"/><text x="70.9068%" y="623.50"></text></g><g><title>core::time::Duration::new (22 samples, 0.02%)</title><rect x="70.7492%" y="597" width="0.0178%" height="15" fill="rgb(217,112,39)" fg:x="87337" fg:w="22"/><text x="70.9992%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,093 samples, 0.89%)</title><rect x="70.3619%" y="1029" width="0.8854%" height="15" fill="rgb(225,85,32)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,093 samples, 0.89%)</title><rect x="70.3619%" y="1013" width="0.8854%" height="15" fill="rgb(245,209,47)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="1023.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,093 samples, 0.89%)</title><rect x="70.3619%" y="997" width="0.8854%" height="15" fill="rgb(218,220,15)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="1007.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,093 samples, 0.89%)</title><rect x="70.3619%" y="981" width="0.8854%" height="15" fill="rgb(222,202,31)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="991.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,093 samples, 0.89%)</title><rect x="70.3619%" y="965" width="0.8854%" height="15" fill="rgb(243,203,4)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="975.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,093 samples, 0.89%)</title><rect x="70.3619%" y="949" width="0.8854%" height="15" fill="rgb(237,92,17)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="959.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,093 samples, 0.89%)</title><rect x="70.3619%" y="933" width="0.8854%" height="15" fill="rgb(231,119,7)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="943.50"></text></g><g><title>std::panic::catch_unwind (1,093 samples, 0.89%)</title><rect x="70.3619%" y="917" width="0.8854%" height="15" fill="rgb(237,82,41)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="927.50"></text></g><g><title>std::panicking::try (1,093 samples, 0.89%)</title><rect x="70.3619%" y="901" width="0.8854%" height="15" fill="rgb(226,81,48)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1,093 samples, 0.89%)</title><rect x="70.3619%" y="885" width="0.8854%" height="15" fill="rgb(234,70,51)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="895.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,093 samples, 0.89%)</title><rect x="70.3619%" y="869" width="0.8854%" height="15" fill="rgb(251,86,4)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,093 samples, 0.89%)</title><rect x="70.3619%" y="853" width="0.8854%" height="15" fill="rgb(244,144,28)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="863.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,093 samples, 0.89%)</title><rect x="70.3619%" y="837" width="0.8854%" height="15" fill="rgb(232,161,39)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="847.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,093 samples, 0.89%)</title><rect x="70.3619%" y="821" width="0.8854%" height="15" fill="rgb(247,34,51)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,093 samples, 0.89%)</title><rect x="70.3619%" y="805" width="0.8854%" height="15" fill="rgb(225,132,2)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,093 samples, 0.89%)</title><rect x="70.3619%" y="789" width="0.8854%" height="15" fill="rgb(209,159,44)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="799.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,093 samples, 0.89%)</title><rect x="70.3619%" y="773" width="0.8854%" height="15" fill="rgb(251,214,1)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="783.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,093 samples, 0.89%)</title><rect x="70.3619%" y="757" width="0.8854%" height="15" fill="rgb(247,84,47)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="767.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,093 samples, 0.89%)</title><rect x="70.3619%" y="741" width="0.8854%" height="15" fill="rgb(240,111,43)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="751.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,093 samples, 0.89%)</title><rect x="70.3619%" y="725" width="0.8854%" height="15" fill="rgb(215,214,35)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,093 samples, 0.89%)</title><rect x="70.3619%" y="709" width="0.8854%" height="15" fill="rgb(248,207,23)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="719.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,093 samples, 0.89%)</title><rect x="70.3619%" y="693" width="0.8854%" height="15" fill="rgb(214,186,4)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="703.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (1,093 samples, 0.89%)</title><rect x="70.3619%" y="677" width="0.8854%" height="15" fill="rgb(220,133,22)" fg:x="86859" fg:w="1093"/><text x="70.6119%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (961 samples, 0.78%)</title><rect x="70.4689%" y="661" width="0.7785%" height="15" fill="rgb(239,134,19)" fg:x="86991" fg:w="961"/><text x="70.7189%" y="671.50"></text></g><g><title>std::time::SystemTime::now (593 samples, 0.48%)</title><rect x="70.7670%" y="645" width="0.4804%" height="15" fill="rgb(250,140,9)" fg:x="87359" fg:w="593"/><text x="71.0170%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (593 samples, 0.48%)</title><rect x="70.7670%" y="629" width="0.4804%" height="15" fill="rgb(225,59,14)" fg:x="87359" fg:w="593"/><text x="71.0170%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (593 samples, 0.48%)</title><rect x="70.7670%" y="613" width="0.4804%" height="15" fill="rgb(214,152,51)" fg:x="87359" fg:w="593"/><text x="71.0170%" y="623.50"></text></g><g><title>__clock_gettime (475 samples, 0.38%)</title><rect x="70.8626%" y="597" width="0.3848%" height="15" fill="rgb(251,227,43)" fg:x="87477" fg:w="475"/><text x="71.1126%" y="607.50"></text></g><g><title>__vdso_clock_gettime (449 samples, 0.36%)</title><rect x="70.8836%" y="581" width="0.3637%" height="15" fill="rgb(241,96,17)" fg:x="87503" fg:w="449"/><text x="71.1336%" y="591.50"></text></g><g><title>[[vdso]] (402 samples, 0.33%)</title><rect x="70.9217%" y="565" width="0.3256%" height="15" fill="rgb(234,198,43)" fg:x="87550" fg:w="402"/><text x="71.1717%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (6,260 samples, 5.07%)</title><rect x="66.1779%" y="1045" width="5.0710%" height="15" fill="rgb(220,108,29)" fg:x="81694" fg:w="6260"/><text x="66.4279%" y="1055.50">tremor..</text></g><g><title>tremor_runtime::pipeline::maybe_send (40 samples, 0.03%)</title><rect x="71.2741%" y="1045" width="0.0324%" height="15" fill="rgb(226,163,33)" fg:x="87985" fg:w="40"/><text x="71.5241%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="71.3073%" y="1013" width="0.0178%" height="15" fill="rgb(205,194,45)" fg:x="88026" fg:w="22"/><text x="71.5573%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="71.3073%" y="997" width="0.0178%" height="15" fill="rgb(206,143,44)" fg:x="88026" fg:w="22"/><text x="71.5573%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (56 samples, 0.05%)</title><rect x="71.5924%" y="869" width="0.0454%" height="15" fill="rgb(236,136,36)" fg:x="88378" fg:w="56"/><text x="71.8424%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_add (56 samples, 0.05%)</title><rect x="71.5924%" y="853" width="0.0454%" height="15" fill="rgb(249,172,42)" fg:x="88378" fg:w="56"/><text x="71.8424%" y="863.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (61 samples, 0.05%)</title><rect x="71.5900%" y="901" width="0.0494%" height="15" fill="rgb(216,139,23)" fg:x="88375" fg:w="61"/><text x="71.8400%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (58 samples, 0.05%)</title><rect x="71.5924%" y="885" width="0.0470%" height="15" fill="rgb(207,166,20)" fg:x="88378" fg:w="58"/><text x="71.8424%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.02%)</title><rect x="71.6394%" y="901" width="0.0194%" height="15" fill="rgb(210,209,22)" fg:x="88436" fg:w="24"/><text x="71.8894%" y="911.50"></text></g><g><title>core::mem::replace (24 samples, 0.02%)</title><rect x="71.6394%" y="885" width="0.0194%" height="15" fill="rgb(232,118,20)" fg:x="88436" fg:w="24"/><text x="71.8894%" y="895.50"></text></g><g><title>core::ptr::read (24 samples, 0.02%)</title><rect x="71.6394%" y="869" width="0.0194%" height="15" fill="rgb(238,113,42)" fg:x="88436" fg:w="24"/><text x="71.8894%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (208 samples, 0.17%)</title><rect x="71.7196%" y="885" width="0.1685%" height="15" fill="rgb(231,42,5)" fg:x="88535" fg:w="208"/><text x="71.9696%" y="895.50"></text></g><g><title>core::mem::replace (208 samples, 0.17%)</title><rect x="71.7196%" y="869" width="0.1685%" height="15" fill="rgb(243,166,24)" fg:x="88535" fg:w="208"/><text x="71.9696%" y="879.50"></text></g><g><title>core::ptr::read (208 samples, 0.17%)</title><rect x="71.7196%" y="853" width="0.1685%" height="15" fill="rgb(237,226,12)" fg:x="88535" fg:w="208"/><text x="71.9696%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (339 samples, 0.27%)</title><rect x="71.6589%" y="901" width="0.2746%" height="15" fill="rgb(229,133,24)" fg:x="88460" fg:w="339"/><text x="71.9089%" y="911.50"></text></g><g><title>core::mem::drop (56 samples, 0.05%)</title><rect x="71.8881%" y="885" width="0.0454%" height="15" fill="rgb(238,33,43)" fg:x="88743" fg:w="56"/><text x="72.1381%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (56 samples, 0.05%)</title><rect x="71.8881%" y="869" width="0.0454%" height="15" fill="rgb(227,59,38)" fg:x="88743" fg:w="56"/><text x="72.1381%" y="879.50"></text></g><g><title>core::mem::drop (79 samples, 0.06%)</title><rect x="71.9335%" y="901" width="0.0640%" height="15" fill="rgb(230,97,0)" fg:x="88799" fg:w="79"/><text x="72.1835%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (79 samples, 0.06%)</title><rect x="71.9335%" y="885" width="0.0640%" height="15" fill="rgb(250,173,50)" fg:x="88799" fg:w="79"/><text x="72.1835%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (76 samples, 0.06%)</title><rect x="71.9359%" y="869" width="0.0616%" height="15" fill="rgb(240,15,50)" fg:x="88802" fg:w="76"/><text x="72.1859%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.06%)</title><rect x="71.9359%" y="853" width="0.0616%" height="15" fill="rgb(221,93,22)" fg:x="88802" fg:w="76"/><text x="72.1859%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (75 samples, 0.06%)</title><rect x="71.9367%" y="837" width="0.0608%" height="15" fill="rgb(245,180,53)" fg:x="88803" fg:w="75"/><text x="72.1867%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (74 samples, 0.06%)</title><rect x="71.9375%" y="821" width="0.0599%" height="15" fill="rgb(231,88,51)" fg:x="88804" fg:w="74"/><text x="72.1875%" y="831.50"></text></g><g><title>__GI___pthread_mutex_unlock (74 samples, 0.06%)</title><rect x="71.9375%" y="805" width="0.0599%" height="15" fill="rgb(240,58,21)" fg:x="88804" fg:w="74"/><text x="72.1875%" y="815.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="71.9975%" y="885" width="0.0154%" height="15" fill="rgb(237,21,10)" fg:x="88878" fg:w="19"/><text x="72.2475%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (453 samples, 0.37%)</title><rect x="71.9975%" y="901" width="0.3670%" height="15" fill="rgb(218,43,11)" fg:x="88878" fg:w="453"/><text x="72.2475%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (434 samples, 0.35%)</title><rect x="72.0129%" y="885" width="0.3516%" height="15" fill="rgb(218,221,29)" fg:x="88897" fg:w="434"/><text x="72.2629%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (434 samples, 0.35%)</title><rect x="72.0129%" y="869" width="0.3516%" height="15" fill="rgb(214,118,42)" fg:x="88897" fg:w="434"/><text x="72.2629%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (407 samples, 0.33%)</title><rect x="72.0347%" y="853" width="0.3297%" height="15" fill="rgb(251,200,26)" fg:x="88924" fg:w="407"/><text x="72.2847%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (407 samples, 0.33%)</title><rect x="72.0347%" y="837" width="0.3297%" height="15" fill="rgb(237,101,39)" fg:x="88924" fg:w="407"/><text x="72.2847%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (390 samples, 0.32%)</title><rect x="72.0485%" y="821" width="0.3159%" height="15" fill="rgb(251,117,11)" fg:x="88941" fg:w="390"/><text x="72.2985%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (47 samples, 0.04%)</title><rect x="72.3693%" y="901" width="0.0381%" height="15" fill="rgb(216,223,23)" fg:x="89337" fg:w="47"/><text x="72.6193%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (47 samples, 0.04%)</title><rect x="72.3693%" y="885" width="0.0381%" height="15" fill="rgb(251,54,12)" fg:x="89337" fg:w="47"/><text x="72.6193%" y="895.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (37 samples, 0.03%)</title><rect x="72.3774%" y="869" width="0.0300%" height="15" fill="rgb(254,176,54)" fg:x="89347" fg:w="37"/><text x="72.6274%" y="879.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (37 samples, 0.03%)</title><rect x="72.3774%" y="853" width="0.0300%" height="15" fill="rgb(210,32,8)" fg:x="89347" fg:w="37"/><text x="72.6274%" y="863.50"></text></g><g><title>std::sync::poison::Flag::get (49 samples, 0.04%)</title><rect x="72.4317%" y="837" width="0.0397%" height="15" fill="rgb(235,52,38)" fg:x="89414" fg:w="49"/><text x="72.6817%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (49 samples, 0.04%)</title><rect x="72.4317%" y="821" width="0.0397%" height="15" fill="rgb(231,4,44)" fg:x="89414" fg:w="49"/><text x="72.6817%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (47 samples, 0.04%)</title><rect x="72.4333%" y="805" width="0.0381%" height="15" fill="rgb(249,2,32)" fg:x="89416" fg:w="47"/><text x="72.6833%" y="815.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (79 samples, 0.06%)</title><rect x="72.4317%" y="869" width="0.0640%" height="15" fill="rgb(224,65,26)" fg:x="89414" fg:w="79"/><text x="72.6817%" y="879.50"></text></g><g><title>std::sync::poison::Flag::borrow (79 samples, 0.06%)</title><rect x="72.4317%" y="853" width="0.0640%" height="15" fill="rgb(250,73,40)" fg:x="89414" fg:w="79"/><text x="72.6817%" y="863.50"></text></g><g><title>std::thread::panicking (30 samples, 0.02%)</title><rect x="72.4714%" y="837" width="0.0243%" height="15" fill="rgb(253,177,16)" fg:x="89463" fg:w="30"/><text x="72.7214%" y="847.50"></text></g><g><title>std::panicking::panicking (30 samples, 0.02%)</title><rect x="72.4714%" y="821" width="0.0243%" height="15" fill="rgb(217,32,34)" fg:x="89463" fg:w="30"/><text x="72.7214%" y="831.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (30 samples, 0.02%)</title><rect x="72.4714%" y="805" width="0.0243%" height="15" fill="rgb(212,7,10)" fg:x="89463" fg:w="30"/><text x="72.7214%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (27 samples, 0.02%)</title><rect x="72.4738%" y="789" width="0.0219%" height="15" fill="rgb(245,89,8)" fg:x="89466" fg:w="27"/><text x="72.7238%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="72.4738%" y="773" width="0.0219%" height="15" fill="rgb(237,16,53)" fg:x="89466" fg:w="27"/><text x="72.7238%" y="783.50"></text></g><g><title>event_listener::Inner::lock (972 samples, 0.79%)</title><rect x="72.4074%" y="901" width="0.7874%" height="15" fill="rgb(250,204,30)" fg:x="89384" fg:w="972"/><text x="72.6574%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (942 samples, 0.76%)</title><rect x="72.4317%" y="885" width="0.7631%" height="15" fill="rgb(208,77,27)" fg:x="89414" fg:w="942"/><text x="72.6817%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (863 samples, 0.70%)</title><rect x="72.4957%" y="869" width="0.6991%" height="15" fill="rgb(250,204,28)" fg:x="89493" fg:w="863"/><text x="72.7457%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (805 samples, 0.65%)</title><rect x="72.5427%" y="853" width="0.6521%" height="15" fill="rgb(244,63,21)" fg:x="89551" fg:w="805"/><text x="72.7927%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (805 samples, 0.65%)</title><rect x="72.5427%" y="837" width="0.6521%" height="15" fill="rgb(236,85,44)" fg:x="89551" fg:w="805"/><text x="72.7927%" y="847.50"></text></g><g><title>__lll_lock_wait (148 samples, 0.12%)</title><rect x="73.0749%" y="821" width="0.1199%" height="15" fill="rgb(215,98,4)" fg:x="90208" fg:w="148"/><text x="73.3249%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,235 samples, 1.81%)</title><rect x="71.5033%" y="917" width="1.8105%" height="15" fill="rgb(235,38,11)" fg:x="88268" fg:w="2235"/><text x="71.7533%" y="927.50">&lt;..</text></g><g><title>event_listener::List::remove (147 samples, 0.12%)</title><rect x="73.1948%" y="901" width="0.1191%" height="15" fill="rgb(254,186,25)" fg:x="90356" fg:w="147"/><text x="73.4448%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (116 samples, 0.09%)</title><rect x="73.2199%" y="885" width="0.0940%" height="15" fill="rgb(225,55,31)" fg:x="90387" fg:w="116"/><text x="73.4699%" y="895.50"></text></g><g><title>core::mem::replace (116 samples, 0.09%)</title><rect x="73.2199%" y="869" width="0.0940%" height="15" fill="rgb(211,15,21)" fg:x="90387" fg:w="116"/><text x="73.4699%" y="879.50"></text></g><g><title>core::ptr::read (116 samples, 0.09%)</title><rect x="73.2199%" y="853" width="0.0940%" height="15" fill="rgb(215,187,41)" fg:x="90387" fg:w="116"/><text x="73.4699%" y="863.50"></text></g><g><title>concurrent_queue::full_fence (159 samples, 0.13%)</title><rect x="73.4840%" y="869" width="0.1288%" height="15" fill="rgb(248,69,32)" fg:x="90713" fg:w="159"/><text x="73.7340%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (148 samples, 0.12%)</title><rect x="73.4929%" y="853" width="0.1199%" height="15" fill="rgb(252,102,52)" fg:x="90724" fg:w="148"/><text x="73.7429%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (148 samples, 0.12%)</title><rect x="73.4929%" y="837" width="0.1199%" height="15" fill="rgb(253,140,32)" fg:x="90724" fg:w="148"/><text x="73.7429%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (148 samples, 0.12%)</title><rect x="73.4929%" y="821" width="0.1199%" height="15" fill="rgb(216,56,42)" fg:x="90724" fg:w="148"/><text x="73.7429%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (173 samples, 0.14%)</title><rect x="73.6184%" y="869" width="0.1401%" height="15" fill="rgb(216,184,14)" fg:x="90879" fg:w="173"/><text x="73.8684%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (173 samples, 0.14%)</title><rect x="73.6184%" y="853" width="0.1401%" height="15" fill="rgb(237,187,27)" fg:x="90879" fg:w="173"/><text x="73.8684%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (446 samples, 0.36%)</title><rect x="73.7586%" y="869" width="0.3613%" height="15" fill="rgb(219,65,3)" fg:x="91052" fg:w="446"/><text x="74.0086%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (446 samples, 0.36%)</title><rect x="73.7586%" y="853" width="0.3613%" height="15" fill="rgb(245,83,25)" fg:x="91052" fg:w="446"/><text x="74.0086%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (964 samples, 0.78%)</title><rect x="73.3398%" y="901" width="0.7809%" height="15" fill="rgb(214,205,45)" fg:x="90535" fg:w="964"/><text x="73.5898%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (916 samples, 0.74%)</title><rect x="73.3786%" y="885" width="0.7420%" height="15" fill="rgb(241,20,18)" fg:x="90583" fg:w="916"/><text x="73.6286%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,067 samples, 1.67%)</title><rect x="73.3138%" y="917" width="1.6744%" height="15" fill="rgb(232,163,23)" fg:x="90503" fg:w="2067"/><text x="73.5638%" y="927.50"></text></g><g><title>event_listener::Event::notify (1,071 samples, 0.87%)</title><rect x="74.1207%" y="901" width="0.8676%" height="15" fill="rgb(214,5,46)" fg:x="91499" fg:w="1071"/><text x="74.3707%" y="911.50"></text></g><g><title>event_listener::full_fence (1,056 samples, 0.86%)</title><rect x="74.1328%" y="885" width="0.8554%" height="15" fill="rgb(229,78,17)" fg:x="91514" fg:w="1056"/><text x="74.3828%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,056 samples, 0.86%)</title><rect x="74.1328%" y="869" width="0.8554%" height="15" fill="rgb(248,89,10)" fg:x="91514" fg:w="1056"/><text x="74.3828%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,056 samples, 0.86%)</title><rect x="74.1328%" y="853" width="0.8554%" height="15" fill="rgb(248,54,15)" fg:x="91514" fg:w="1056"/><text x="74.3828%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (24 samples, 0.02%)</title><rect x="75.0207%" y="869" width="0.0194%" height="15" fill="rgb(223,116,6)" fg:x="92610" fg:w="24"/><text x="75.2707%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (22 samples, 0.02%)</title><rect x="75.0223%" y="853" width="0.0178%" height="15" fill="rgb(205,125,38)" fg:x="92612" fg:w="22"/><text x="75.2723%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="75.0223%" y="837" width="0.0178%" height="15" fill="rgb(251,78,38)" fg:x="92612" fg:w="22"/><text x="75.2723%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="75.0231%" y="821" width="0.0170%" height="15" fill="rgb(253,78,28)" fg:x="92613" fg:w="21"/><text x="75.2731%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.02%)</title><rect x="75.0239%" y="805" width="0.0162%" height="15" fill="rgb(209,120,3)" fg:x="92614" fg:w="20"/><text x="75.2739%" y="815.50"></text></g><g><title>__GI___pthread_mutex_unlock (20 samples, 0.02%)</title><rect x="75.0239%" y="789" width="0.0162%" height="15" fill="rgb(238,229,9)" fg:x="92614" fg:w="20"/><text x="75.2739%" y="799.50"></text></g><g><title>event_listener::Inner::lock (104 samples, 0.08%)</title><rect x="75.0417%" y="869" width="0.0842%" height="15" fill="rgb(253,159,18)" fg:x="92636" fg:w="104"/><text x="75.2917%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (104 samples, 0.08%)</title><rect x="75.0417%" y="853" width="0.0842%" height="15" fill="rgb(244,42,34)" fg:x="92636" fg:w="104"/><text x="75.2917%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (95 samples, 0.08%)</title><rect x="75.0490%" y="837" width="0.0770%" height="15" fill="rgb(224,8,7)" fg:x="92645" fg:w="95"/><text x="75.2990%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (81 samples, 0.07%)</title><rect x="75.0604%" y="821" width="0.0656%" height="15" fill="rgb(210,201,45)" fg:x="92659" fg:w="81"/><text x="75.3104%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (81 samples, 0.07%)</title><rect x="75.0604%" y="805" width="0.0656%" height="15" fill="rgb(252,185,21)" fg:x="92659" fg:w="81"/><text x="75.3104%" y="815.50"></text></g><g><title>__lll_lock_wait (20 samples, 0.02%)</title><rect x="75.1098%" y="789" width="0.0162%" height="15" fill="rgb(223,131,1)" fg:x="92720" fg:w="20"/><text x="75.3598%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (153 samples, 0.12%)</title><rect x="75.0166%" y="885" width="0.1239%" height="15" fill="rgb(245,141,16)" fg:x="92605" fg:w="153"/><text x="75.2666%" y="895.50"></text></g><g><title>event_listener::List::remove (15 samples, 0.01%)</title><rect x="75.1284%" y="869" width="0.0122%" height="15" fill="rgb(229,55,45)" fg:x="92743" fg:w="15"/><text x="75.3784%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (265 samples, 0.21%)</title><rect x="74.9972%" y="917" width="0.2147%" height="15" fill="rgb(208,92,15)" fg:x="92581" fg:w="265"/><text x="75.2472%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (242 samples, 0.20%)</title><rect x="75.0158%" y="901" width="0.1960%" height="15" fill="rgb(234,185,47)" fg:x="92604" fg:w="242"/><text x="75.2658%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (88 samples, 0.07%)</title><rect x="75.1405%" y="885" width="0.0713%" height="15" fill="rgb(253,104,50)" fg:x="92758" fg:w="88"/><text x="75.3905%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 0.07%)</title><rect x="75.1405%" y="869" width="0.0713%" height="15" fill="rgb(205,70,7)" fg:x="92758" fg:w="88"/><text x="75.3905%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (80 samples, 0.06%)</title><rect x="75.1470%" y="853" width="0.0648%" height="15" fill="rgb(240,178,43)" fg:x="92766" fg:w="80"/><text x="75.3970%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (80 samples, 0.06%)</title><rect x="75.1470%" y="837" width="0.0648%" height="15" fill="rgb(214,112,2)" fg:x="92766" fg:w="80"/><text x="75.3970%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.06%)</title><rect x="75.2159%" y="901" width="0.0567%" height="15" fill="rgb(206,46,17)" fg:x="92851" fg:w="70"/><text x="75.4659%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (70 samples, 0.06%)</title><rect x="75.2159%" y="885" width="0.0567%" height="15" fill="rgb(225,220,16)" fg:x="92851" fg:w="70"/><text x="75.4659%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (70 samples, 0.06%)</title><rect x="75.2159%" y="869" width="0.0567%" height="15" fill="rgb(238,65,40)" fg:x="92851" fg:w="70"/><text x="75.4659%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (92 samples, 0.07%)</title><rect x="75.2726%" y="901" width="0.0745%" height="15" fill="rgb(230,151,21)" fg:x="92921" fg:w="92"/><text x="75.5226%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (91 samples, 0.07%)</title><rect x="75.2734%" y="885" width="0.0737%" height="15" fill="rgb(218,58,49)" fg:x="92922" fg:w="91"/><text x="75.5234%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.07%)</title><rect x="75.2734%" y="869" width="0.0737%" height="15" fill="rgb(219,179,14)" fg:x="92922" fg:w="91"/><text x="75.5234%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (88 samples, 0.07%)</title><rect x="75.2758%" y="853" width="0.0713%" height="15" fill="rgb(223,72,1)" fg:x="92925" fg:w="88"/><text x="75.5258%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (88 samples, 0.07%)</title><rect x="75.2758%" y="837" width="0.0713%" height="15" fill="rgb(238,126,10)" fg:x="92925" fg:w="88"/><text x="75.5258%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (85 samples, 0.07%)</title><rect x="75.2783%" y="821" width="0.0689%" height="15" fill="rgb(224,206,38)" fg:x="92928" fg:w="85"/><text x="75.5283%" y="831.50"></text></g><g><title>event_listener::Inner::lock (73 samples, 0.06%)</title><rect x="75.3512%" y="901" width="0.0591%" height="15" fill="rgb(212,201,54)" fg:x="93018" fg:w="73"/><text x="75.6012%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (70 samples, 0.06%)</title><rect x="75.3536%" y="885" width="0.0567%" height="15" fill="rgb(218,154,48)" fg:x="93021" fg:w="70"/><text x="75.6036%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (67 samples, 0.05%)</title><rect x="75.3560%" y="869" width="0.0543%" height="15" fill="rgb(232,93,24)" fg:x="93024" fg:w="67"/><text x="75.6060%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (67 samples, 0.05%)</title><rect x="75.3560%" y="853" width="0.0543%" height="15" fill="rgb(245,30,21)" fg:x="93024" fg:w="67"/><text x="75.6060%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (63 samples, 0.05%)</title><rect x="75.3593%" y="837" width="0.0510%" height="15" fill="rgb(242,148,29)" fg:x="93028" fg:w="63"/><text x="75.6093%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,009 samples, 4.06%)</title><rect x="71.4142%" y="933" width="4.0576%" height="15" fill="rgb(244,153,54)" fg:x="88158" fg:w="5009"/><text x="71.6642%" y="943.50">&lt;asy..</text></g><g><title>event_listener::Event::listen (321 samples, 0.26%)</title><rect x="75.2118%" y="917" width="0.2600%" height="15" fill="rgb(252,87,22)" fg:x="92846" fg:w="321"/><text x="75.4618%" y="927.50"></text></g><g><title>event_listener::full_fence (64 samples, 0.05%)</title><rect x="75.4200%" y="901" width="0.0518%" height="15" fill="rgb(210,51,29)" fg:x="93103" fg:w="64"/><text x="75.6700%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (61 samples, 0.05%)</title><rect x="75.4225%" y="885" width="0.0494%" height="15" fill="rgb(242,136,47)" fg:x="93106" fg:w="61"/><text x="75.6725%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.05%)</title><rect x="75.4225%" y="869" width="0.0494%" height="15" fill="rgb(238,68,4)" fg:x="93106" fg:w="61"/><text x="75.6725%" y="879.50"></text></g><g><title>[libc-2.31.so] (186 samples, 0.15%)</title><rect x="75.4792%" y="917" width="0.1507%" height="15" fill="rgb(242,161,30)" fg:x="93176" fg:w="186"/><text x="75.7292%" y="927.50"></text></g><g><title>[libc-2.31.so] (1,470 samples, 1.19%)</title><rect x="75.6379%" y="885" width="1.1908%" height="15" fill="rgb(218,58,44)" fg:x="93372" fg:w="1470"/><text x="75.8879%" y="895.50"></text></g><g><title>sn_rust_dealloc (91 samples, 0.07%)</title><rect x="76.8320%" y="805" width="0.0737%" height="15" fill="rgb(252,125,32)" fg:x="94846" fg:w="91"/><text x="77.0820%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (7,181 samples, 5.82%)</title><rect x="71.3575%" y="965" width="5.8171%" height="15" fill="rgb(219,178,0)" fg:x="88088" fg:w="7181"/><text x="71.6075%" y="975.50">&lt;async_..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (7,164 samples, 5.80%)</title><rect x="71.3713%" y="949" width="5.8033%" height="15" fill="rgb(213,152,7)" fg:x="88105" fg:w="7164"/><text x="71.6213%" y="959.50">&lt;async_..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,102 samples, 1.70%)</title><rect x="75.4719%" y="933" width="1.7028%" height="15" fill="rgb(249,109,34)" fg:x="93167" fg:w="2102"/><text x="75.7219%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,907 samples, 1.54%)</title><rect x="75.6298%" y="917" width="1.5448%" height="15" fill="rgb(232,96,21)" fg:x="93362" fg:w="1907"/><text x="75.8798%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,907 samples, 1.54%)</title><rect x="75.6298%" y="901" width="1.5448%" height="15" fill="rgb(228,27,39)" fg:x="93362" fg:w="1907"/><text x="75.8798%" y="911.50"></text></g><g><title>alloc::alloc::box_free (427 samples, 0.35%)</title><rect x="76.8287%" y="885" width="0.3459%" height="15" fill="rgb(211,182,52)" fg:x="94842" fg:w="427"/><text x="77.0787%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (427 samples, 0.35%)</title><rect x="76.8287%" y="869" width="0.3459%" height="15" fill="rgb(234,178,38)" fg:x="94842" fg:w="427"/><text x="77.0787%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (427 samples, 0.35%)</title><rect x="76.8287%" y="853" width="0.3459%" height="15" fill="rgb(221,111,3)" fg:x="94842" fg:w="427"/><text x="77.0787%" y="863.50"></text></g><g><title>__rg_dealloc (427 samples, 0.35%)</title><rect x="76.8287%" y="837" width="0.3459%" height="15" fill="rgb(228,175,21)" fg:x="94842" fg:w="427"/><text x="77.0787%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (427 samples, 0.35%)</title><rect x="76.8287%" y="821" width="0.3459%" height="15" fill="rgb(228,174,43)" fg:x="94842" fg:w="427"/><text x="77.0787%" y="831.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (332 samples, 0.27%)</title><rect x="76.9057%" y="805" width="0.2689%" height="15" fill="rgb(211,191,0)" fg:x="94937" fg:w="332"/><text x="77.1557%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,589 samples, 6.96%)</title><rect x="71.3073%" y="1029" width="6.9577%" height="15" fill="rgb(253,117,3)" fg:x="88026" fg:w="8589"/><text x="71.5573%" y="1039.50">&lt;async_st..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,567 samples, 6.94%)</title><rect x="71.3251%" y="1013" width="6.9399%" height="15" fill="rgb(241,127,19)" fg:x="88048" fg:w="8567"/><text x="71.5751%" y="1023.50">&lt;tremor_r..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (8,567 samples, 6.94%)</title><rect x="71.3251%" y="997" width="6.9399%" height="15" fill="rgb(218,103,12)" fg:x="88048" fg:w="8567"/><text x="71.5751%" y="1007.50">&lt;async_st..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,567 samples, 6.94%)</title><rect x="71.3251%" y="981" width="6.9399%" height="15" fill="rgb(236,214,43)" fg:x="88048" fg:w="8567"/><text x="71.5751%" y="991.50">&lt;tremor_r..</text></g><g><title>[libc-2.31.so] (1,346 samples, 1.09%)</title><rect x="77.1746%" y="965" width="1.0904%" height="15" fill="rgb(244,144,19)" fg:x="95269" fg:w="1346"/><text x="77.4246%" y="975.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.12%)</title><rect x="78.2666%" y="981" width="0.1248%" height="15" fill="rgb(246,188,10)" fg:x="96617" fg:w="154"/><text x="78.5166%" y="991.50"></text></g><g><title>[libc-2.31.so] (346 samples, 0.28%)</title><rect x="78.6968%" y="917" width="0.2803%" height="15" fill="rgb(212,193,33)" fg:x="97148" fg:w="346"/><text x="78.9468%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (175 samples, 0.14%)</title><rect x="79.0370%" y="901" width="0.1418%" height="15" fill="rgb(241,51,29)" fg:x="97568" fg:w="175"/><text x="79.2870%" y="911.50"></text></g><g><title>core::ptr::write (175 samples, 0.14%)</title><rect x="79.0370%" y="885" width="0.1418%" height="15" fill="rgb(211,58,19)" fg:x="97568" fg:w="175"/><text x="79.2870%" y="895.50"></text></g><g><title>[libc-2.31.so] (163 samples, 0.13%)</title><rect x="79.0467%" y="869" width="0.1320%" height="15" fill="rgb(229,111,26)" fg:x="97580" fg:w="163"/><text x="79.2967%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (322 samples, 0.26%)</title><rect x="79.1788%" y="901" width="0.2608%" height="15" fill="rgb(213,115,40)" fg:x="97743" fg:w="322"/><text x="79.4288%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (322 samples, 0.26%)</title><rect x="79.1788%" y="885" width="0.2608%" height="15" fill="rgb(209,56,44)" fg:x="97743" fg:w="322"/><text x="79.4288%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (124 samples, 0.10%)</title><rect x="79.4396%" y="901" width="0.1004%" height="15" fill="rgb(230,108,32)" fg:x="98065" fg:w="124"/><text x="79.6896%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (122 samples, 0.10%)</title><rect x="79.4412%" y="885" width="0.0988%" height="15" fill="rgb(216,165,31)" fg:x="98067" fg:w="122"/><text x="79.6912%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,238 samples, 1.00%)</title><rect x="78.5428%" y="933" width="1.0029%" height="15" fill="rgb(218,122,21)" fg:x="96958" fg:w="1238"/><text x="78.7928%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (702 samples, 0.57%)</title><rect x="78.9770%" y="917" width="0.5687%" height="15" fill="rgb(223,224,47)" fg:x="97494" fg:w="702"/><text x="79.2270%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (29 samples, 0.02%)</title><rect x="79.5635%" y="917" width="0.0235%" height="15" fill="rgb(238,102,44)" fg:x="98218" fg:w="29"/><text x="79.8135%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (28 samples, 0.02%)</title><rect x="79.5643%" y="901" width="0.0227%" height="15" fill="rgb(236,46,40)" fg:x="98219" fg:w="28"/><text x="79.8143%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="79.5643%" y="885" width="0.0227%" height="15" fill="rgb(247,202,50)" fg:x="98219" fg:w="28"/><text x="79.8143%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="79.5652%" y="869" width="0.0219%" height="15" fill="rgb(209,99,20)" fg:x="98220" fg:w="27"/><text x="79.8152%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="79.5652%" y="853" width="0.0219%" height="15" fill="rgb(252,27,34)" fg:x="98220" fg:w="27"/><text x="79.8152%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="79.5652%" y="837" width="0.0219%" height="15" fill="rgb(215,206,23)" fg:x="98220" fg:w="27"/><text x="79.8152%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="79.5870%" y="917" width="0.0130%" height="15" fill="rgb(212,135,36)" fg:x="98247" fg:w="16"/><text x="79.8370%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="79.5870%" y="901" width="0.0130%" height="15" fill="rgb(240,189,1)" fg:x="98247" fg:w="16"/><text x="79.8370%" y="911.50"></text></g><g><title>event_listener::Inner::lock (60 samples, 0.05%)</title><rect x="79.6000%" y="917" width="0.0486%" height="15" fill="rgb(242,56,20)" fg:x="98263" fg:w="60"/><text x="79.8500%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (56 samples, 0.05%)</title><rect x="79.6032%" y="901" width="0.0454%" height="15" fill="rgb(247,132,33)" fg:x="98267" fg:w="56"/><text x="79.8532%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (56 samples, 0.05%)</title><rect x="79.6032%" y="885" width="0.0454%" height="15" fill="rgb(208,149,11)" fg:x="98267" fg:w="56"/><text x="79.8532%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.04%)</title><rect x="79.6065%" y="869" width="0.0421%" height="15" fill="rgb(211,33,11)" fg:x="98271" fg:w="52"/><text x="79.8565%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (52 samples, 0.04%)</title><rect x="79.6065%" y="853" width="0.0421%" height="15" fill="rgb(221,29,38)" fg:x="98271" fg:w="52"/><text x="79.8565%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (14 samples, 0.01%)</title><rect x="79.6567%" y="869" width="0.0113%" height="15" fill="rgb(206,182,49)" fg:x="98333" fg:w="14"/><text x="79.9067%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (14 samples, 0.01%)</title><rect x="79.6567%" y="853" width="0.0113%" height="15" fill="rgb(216,140,1)" fg:x="98333" fg:w="14"/><text x="79.9067%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (14 samples, 0.01%)</title><rect x="79.6567%" y="837" width="0.0113%" height="15" fill="rgb(232,57,40)" fg:x="98333" fg:w="14"/><text x="79.9067%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (40 samples, 0.03%)</title><rect x="79.6713%" y="821" width="0.0324%" height="15" fill="rgb(224,186,18)" fg:x="98351" fg:w="40"/><text x="79.9213%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="79.6713%" y="805" width="0.0324%" height="15" fill="rgb(215,121,11)" fg:x="98351" fg:w="40"/><text x="79.9213%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (40 samples, 0.03%)</title><rect x="79.6713%" y="789" width="0.0324%" height="15" fill="rgb(245,147,10)" fg:x="98351" fg:w="40"/><text x="79.9213%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (40 samples, 0.03%)</title><rect x="79.6713%" y="773" width="0.0324%" height="15" fill="rgb(238,153,13)" fg:x="98351" fg:w="40"/><text x="79.9213%" y="783.50"></text></g><g><title>__GI___pthread_mutex_unlock (40 samples, 0.03%)</title><rect x="79.6713%" y="757" width="0.0324%" height="15" fill="rgb(233,108,0)" fg:x="98351" fg:w="40"/><text x="79.9213%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="79.7037%" y="821" width="0.0113%" height="15" fill="rgb(212,157,17)" fg:x="98391" fg:w="14"/><text x="79.9537%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="79.7037%" y="805" width="0.0113%" height="15" fill="rgb(225,213,38)" fg:x="98391" fg:w="14"/><text x="79.9537%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (16 samples, 0.01%)</title><rect x="79.7296%" y="741" width="0.0130%" height="15" fill="rgb(248,16,11)" fg:x="98423" fg:w="16"/><text x="79.9796%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.01%)</title><rect x="79.7296%" y="725" width="0.0130%" height="15" fill="rgb(241,33,4)" fg:x="98423" fg:w="16"/><text x="79.9796%" y="735.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (32 samples, 0.03%)</title><rect x="79.7426%" y="741" width="0.0259%" height="15" fill="rgb(222,26,43)" fg:x="98439" fg:w="32"/><text x="79.9926%" y="751.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (32 samples, 0.03%)</title><rect x="79.7426%" y="725" width="0.0259%" height="15" fill="rgb(243,29,36)" fg:x="98439" fg:w="32"/><text x="79.9926%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (32 samples, 0.03%)</title><rect x="79.7426%" y="709" width="0.0259%" height="15" fill="rgb(241,9,27)" fg:x="98439" fg:w="32"/><text x="79.9926%" y="719.50"></text></g><g><title>__pthread_cond_signal (32 samples, 0.03%)</title><rect x="79.7426%" y="693" width="0.0259%" height="15" fill="rgb(205,117,26)" fg:x="98439" fg:w="32"/><text x="79.9926%" y="703.50"></text></g><g><title>parking::Unparker::unpark (86 samples, 0.07%)</title><rect x="79.7223%" y="773" width="0.0697%" height="15" fill="rgb(209,80,39)" fg:x="98414" fg:w="86"/><text x="79.9723%" y="783.50"></text></g><g><title>parking::Inner::unpark (83 samples, 0.07%)</title><rect x="79.7247%" y="757" width="0.0672%" height="15" fill="rgb(239,155,6)" fg:x="98417" fg:w="83"/><text x="79.9747%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.02%)</title><rect x="79.7685%" y="741" width="0.0235%" height="15" fill="rgb(212,104,12)" fg:x="98471" fg:w="29"/><text x="80.0185%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (28 samples, 0.02%)</title><rect x="79.7693%" y="725" width="0.0227%" height="15" fill="rgb(234,204,3)" fg:x="98472" fg:w="28"/><text x="80.0193%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (28 samples, 0.02%)</title><rect x="79.7693%" y="709" width="0.0227%" height="15" fill="rgb(251,218,7)" fg:x="98472" fg:w="28"/><text x="80.0193%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (28 samples, 0.02%)</title><rect x="79.7693%" y="693" width="0.0227%" height="15" fill="rgb(221,81,32)" fg:x="98472" fg:w="28"/><text x="80.0193%" y="703.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (99 samples, 0.08%)</title><rect x="79.7150%" y="789" width="0.0802%" height="15" fill="rgb(214,152,26)" fg:x="98405" fg:w="99"/><text x="79.9650%" y="799.50"></text></g><g><title>core::task::wake::Waker::wake (116 samples, 0.09%)</title><rect x="79.7150%" y="821" width="0.0940%" height="15" fill="rgb(223,22,3)" fg:x="98405" fg:w="116"/><text x="79.9650%" y="831.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (116 samples, 0.09%)</title><rect x="79.7150%" y="805" width="0.0940%" height="15" fill="rgb(207,174,7)" fg:x="98405" fg:w="116"/><text x="79.9650%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="79.7952%" y="789" width="0.0138%" height="15" fill="rgb(224,19,52)" fg:x="98504" fg:w="17"/><text x="80.0452%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="79.7952%" y="773" width="0.0138%" height="15" fill="rgb(228,24,14)" fg:x="98504" fg:w="17"/><text x="80.0452%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.01%)</title><rect x="79.7952%" y="757" width="0.0138%" height="15" fill="rgb(230,153,43)" fg:x="98504" fg:w="17"/><text x="80.0452%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.01%)</title><rect x="79.7952%" y="741" width="0.0138%" height="15" fill="rgb(231,106,12)" fg:x="98504" fg:w="17"/><text x="80.0452%" y="751.50"></text></g><g><title>async_executor::State::notify (233 samples, 0.19%)</title><rect x="79.6705%" y="837" width="0.1887%" height="15" fill="rgb(215,92,2)" fg:x="98350" fg:w="233"/><text x="79.9205%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.05%)</title><rect x="79.8090%" y="821" width="0.0502%" height="15" fill="rgb(249,143,25)" fg:x="98521" fg:w="62"/><text x="80.0590%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.05%)</title><rect x="79.8090%" y="805" width="0.0502%" height="15" fill="rgb(252,7,35)" fg:x="98521" fg:w="62"/><text x="80.0590%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (54 samples, 0.04%)</title><rect x="79.8155%" y="789" width="0.0437%" height="15" fill="rgb(216,69,40)" fg:x="98529" fg:w="54"/><text x="80.0655%" y="799.50"></text></g><g><title>__GI___pthread_mutex_lock (54 samples, 0.04%)</title><rect x="79.8155%" y="773" width="0.0437%" height="15" fill="rgb(240,36,33)" fg:x="98529" fg:w="54"/><text x="80.0655%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (24 samples, 0.02%)</title><rect x="79.8665%" y="805" width="0.0194%" height="15" fill="rgb(231,128,14)" fg:x="98592" fg:w="24"/><text x="80.1165%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (24 samples, 0.02%)</title><rect x="79.8665%" y="789" width="0.0194%" height="15" fill="rgb(245,143,14)" fg:x="98592" fg:w="24"/><text x="80.1165%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (15 samples, 0.01%)</title><rect x="79.8859%" y="805" width="0.0122%" height="15" fill="rgb(222,130,28)" fg:x="98616" fg:w="15"/><text x="80.1359%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_or (15 samples, 0.01%)</title><rect x="79.8859%" y="789" width="0.0122%" height="15" fill="rgb(212,10,48)" fg:x="98616" fg:w="15"/><text x="80.1359%" y="799.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (283 samples, 0.23%)</title><rect x="79.6705%" y="853" width="0.2293%" height="15" fill="rgb(254,118,45)" fg:x="98350" fg:w="283"/><text x="79.9205%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (50 samples, 0.04%)</title><rect x="79.8592%" y="837" width="0.0405%" height="15" fill="rgb(228,6,45)" fg:x="98583" fg:w="50"/><text x="80.1092%" y="847.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (46 samples, 0.04%)</title><rect x="79.8624%" y="821" width="0.0373%" height="15" fill="rgb(241,18,35)" fg:x="98587" fg:w="46"/><text x="80.1124%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (43 samples, 0.03%)</title><rect x="79.8997%" y="853" width="0.0348%" height="15" fill="rgb(227,214,53)" fg:x="98633" fg:w="43"/><text x="80.1497%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (43 samples, 0.03%)</title><rect x="79.8997%" y="837" width="0.0348%" height="15" fill="rgb(224,107,51)" fg:x="98633" fg:w="43"/><text x="80.1497%" y="847.50"></text></g><g><title>event_listener::List::notify (358 samples, 0.29%)</title><rect x="79.6486%" y="917" width="0.2900%" height="15" fill="rgb(248,60,28)" fg:x="98323" fg:w="358"/><text x="79.8986%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (348 samples, 0.28%)</title><rect x="79.6567%" y="901" width="0.2819%" height="15" fill="rgb(249,101,23)" fg:x="98333" fg:w="348"/><text x="79.9067%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (348 samples, 0.28%)</title><rect x="79.6567%" y="885" width="0.2819%" height="15" fill="rgb(228,51,19)" fg:x="98333" fg:w="348"/><text x="79.9067%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (334 samples, 0.27%)</title><rect x="79.6680%" y="869" width="0.2706%" height="15" fill="rgb(213,20,6)" fg:x="98347" fg:w="334"/><text x="79.9180%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,089 samples, 2.50%)</title><rect x="78.5226%" y="949" width="2.5023%" height="15" fill="rgb(212,124,10)" fg:x="96933" fg:w="3089"/><text x="78.7726%" y="959.50">as..</text></g><g><title>event_listener::Event::notify (1,826 samples, 1.48%)</title><rect x="79.5457%" y="933" width="1.4792%" height="15" fill="rgb(248,3,40)" fg:x="98196" fg:w="1826"/><text x="79.7957%" y="943.50"></text></g><g><title>event_listener::full_fence (1,341 samples, 1.09%)</title><rect x="79.9386%" y="917" width="1.0863%" height="15" fill="rgb(223,178,23)" fg:x="98681" fg:w="1341"/><text x="80.1886%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,321 samples, 1.07%)</title><rect x="79.9548%" y="901" width="1.0701%" height="15" fill="rgb(240,132,45)" fg:x="98701" fg:w="1321"/><text x="80.2048%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,321 samples, 1.07%)</title><rect x="79.9548%" y="885" width="1.0701%" height="15" fill="rgb(245,164,36)" fg:x="98701" fg:w="1321"/><text x="80.2048%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (23 samples, 0.02%)</title><rect x="81.0249%" y="949" width="0.0186%" height="15" fill="rgb(231,188,53)" fg:x="100022" fg:w="23"/><text x="81.2749%" y="959.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,410 samples, 2.76%)</title><rect x="78.4861%" y="965" width="2.7623%" height="15" fill="rgb(237,198,39)" fg:x="96888" fg:w="3410"/><text x="78.7361%" y="975.50">&lt;a..</text></g><g><title>event_listener::Event::notify (240 samples, 0.19%)</title><rect x="81.0541%" y="949" width="0.1944%" height="15" fill="rgb(223,120,35)" fg:x="100058" fg:w="240"/><text x="81.3041%" y="959.50"></text></g><g><title>event_listener::full_fence (222 samples, 0.18%)</title><rect x="81.0686%" y="933" width="0.1798%" height="15" fill="rgb(253,107,49)" fg:x="100076" fg:w="222"/><text x="81.3186%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (222 samples, 0.18%)</title><rect x="81.0686%" y="917" width="0.1798%" height="15" fill="rgb(216,44,31)" fg:x="100076" fg:w="222"/><text x="81.3186%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (222 samples, 0.18%)</title><rect x="81.0686%" y="901" width="0.1798%" height="15" fill="rgb(253,87,21)" fg:x="100076" fg:w="222"/><text x="81.3186%" y="911.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.01%)</title><rect x="81.2485%" y="965" width="0.0130%" height="15" fill="rgb(226,18,2)" fg:x="100298" fg:w="16"/><text x="81.4985%" y="975.50"></text></g><g><title>[libc-2.31.so] (784 samples, 0.64%)</title><rect x="81.2614%" y="965" width="0.6351%" height="15" fill="rgb(216,8,46)" fg:x="100314" fg:w="784"/><text x="81.5114%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (13,100 samples, 10.61%)</title><rect x="71.3065%" y="1045" width="10.6119%" height="15" fill="rgb(226,140,39)" fg:x="88025" fg:w="13100"/><text x="71.5565%" y="1055.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,510 samples, 3.65%)</title><rect x="78.2650%" y="1029" width="3.6534%" height="15" fill="rgb(221,194,54)" fg:x="96615" fg:w="4510"/><text x="78.5150%" y="1039.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,510 samples, 3.65%)</title><rect x="78.2650%" y="1013" width="3.6534%" height="15" fill="rgb(213,92,11)" fg:x="96615" fg:w="4510"/><text x="78.5150%" y="1023.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,510 samples, 3.65%)</title><rect x="78.2650%" y="997" width="3.6534%" height="15" fill="rgb(229,162,46)" fg:x="96615" fg:w="4510"/><text x="78.5150%" y="1007.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,354 samples, 3.53%)</title><rect x="78.3914%" y="981" width="3.5270%" height="15" fill="rgb(214,111,36)" fg:x="96771" fg:w="4354"/><text x="78.6414%" y="991.50">tre..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (27 samples, 0.02%)</title><rect x="81.8965%" y="965" width="0.0219%" height="15" fill="rgb(207,6,21)" fg:x="101098" fg:w="27"/><text x="82.1465%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (14 samples, 0.01%)</title><rect x="81.9071%" y="949" width="0.0113%" height="15" fill="rgb(213,127,38)" fg:x="101111" fg:w="14"/><text x="82.1571%" y="959.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (67 samples, 0.05%)</title><rect x="81.9184%" y="1045" width="0.0543%" height="15" fill="rgb(238,118,32)" fg:x="101125" fg:w="67"/><text x="82.1684%" y="1055.50"></text></g><g><title>value_trait::Builder::object (15 samples, 0.01%)</title><rect x="81.9816%" y="1045" width="0.0122%" height="15" fill="rgb(240,139,39)" fg:x="101203" fg:w="15"/><text x="82.2316%" y="1055.50"></text></g><g><title>[unknown] (95,237 samples, 77.15%)</title><rect x="4.8458%" y="1061" width="77.1487%" height="15" fill="rgb(235,10,37)" fg:x="5982" fg:w="95237"/><text x="5.0958%" y="1071.50">[unknown]</text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (31 samples, 0.03%)</title><rect x="82.0075%" y="1061" width="0.0251%" height="15" fill="rgb(249,171,38)" fg:x="101235" fg:w="31"/><text x="82.2575%" y="1071.50"></text></g><g><title>abi_stable::erased_types::iterator::next (18 samples, 0.01%)</title><rect x="82.0326%" y="1061" width="0.0146%" height="15" fill="rgb(242,144,32)" fg:x="101266" fg:w="18"/><text x="82.2826%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="82.0472%" y="1061" width="0.0162%" height="15" fill="rgb(217,117,21)" fg:x="101284" fg:w="20"/><text x="82.2972%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (17 samples, 0.01%)</title><rect x="82.0658%" y="1061" width="0.0138%" height="15" fill="rgb(249,87,1)" fg:x="101307" fg:w="17"/><text x="82.3158%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="82.0918%" y="1061" width="0.0138%" height="15" fill="rgb(248,196,48)" fg:x="101339" fg:w="17"/><text x="82.3418%" y="1071.50"></text></g><g><title>anon.4dc46182adb1a078a95cccddf9d0afbc.244.llvm.9778192411171153622 (13 samples, 0.01%)</title><rect x="82.1080%" y="1061" width="0.0105%" height="15" fill="rgb(251,206,33)" fg:x="101359" fg:w="13"/><text x="82.3580%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (13 samples, 0.01%)</title><rect x="82.1080%" y="1045" width="0.0105%" height="15" fill="rgb(232,141,28)" fg:x="101359" fg:w="13"/><text x="82.3580%" y="1055.50"></text></g><g><title>anon.8798335600c3a6115dd6039c6308b1c9.274.llvm.11457957360269428244 (33 samples, 0.03%)</title><rect x="82.1428%" y="1061" width="0.0267%" height="15" fill="rgb(209,167,14)" fg:x="101402" fg:w="33"/><text x="82.3928%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (33 samples, 0.03%)</title><rect x="82.1428%" y="1045" width="0.0267%" height="15" fill="rgb(225,11,50)" fg:x="101402" fg:w="33"/><text x="82.3928%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (15 samples, 0.01%)</title><rect x="82.1695%" y="1045" width="0.0122%" height="15" fill="rgb(209,50,20)" fg:x="101435" fg:w="15"/><text x="82.4195%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (15 samples, 0.01%)</title><rect x="82.1695%" y="1029" width="0.0122%" height="15" fill="rgb(212,17,46)" fg:x="101435" fg:w="15"/><text x="82.4195%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="82.1695%" y="1013" width="0.0122%" height="15" fill="rgb(216,101,39)" fg:x="101435" fg:w="15"/><text x="82.4195%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="82.1695%" y="997" width="0.0122%" height="15" fill="rgb(212,228,48)" fg:x="101435" fg:w="15"/><text x="82.4195%" y="1007.50"></text></g><g><title>anon.8798335600c3a6115dd6039c6308b1c9.30.llvm.11457957360269428244 (16 samples, 0.01%)</title><rect x="82.1695%" y="1061" width="0.0130%" height="15" fill="rgb(250,6,50)" fg:x="101435" fg:w="16"/><text x="82.4195%" y="1071.50"></text></g><g><title>anon.902332d854d19376a9088b9f3940993b.36.llvm.10527988202565663021 (18 samples, 0.01%)</title><rect x="82.1898%" y="1061" width="0.0146%" height="15" fill="rgb(250,160,48)" fg:x="101460" fg:w="18"/><text x="82.4398%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (21 samples, 0.02%)</title><rect x="82.2044%" y="1045" width="0.0170%" height="15" fill="rgb(244,216,33)" fg:x="101478" fg:w="21"/><text x="82.4544%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (15 samples, 0.01%)</title><rect x="82.2270%" y="1045" width="0.0122%" height="15" fill="rgb(207,157,5)" fg:x="101506" fg:w="15"/><text x="82.4770%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (15 samples, 0.01%)</title><rect x="82.2270%" y="1029" width="0.0122%" height="15" fill="rgb(228,199,8)" fg:x="101506" fg:w="15"/><text x="82.4770%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="82.2270%" y="1013" width="0.0122%" height="15" fill="rgb(227,80,20)" fg:x="101506" fg:w="15"/><text x="82.4770%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="82.2270%" y="997" width="0.0122%" height="15" fill="rgb(222,9,33)" fg:x="101506" fg:w="15"/><text x="82.4770%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="82.2270%" y="981" width="0.0122%" height="15" fill="rgb(239,44,28)" fg:x="101506" fg:w="15"/><text x="82.4770%" y="991.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (16 samples, 0.01%)</title><rect x="82.2392%" y="1045" width="0.0130%" height="15" fill="rgb(249,187,43)" fg:x="101521" fg:w="16"/><text x="82.4892%" y="1055.50"></text></g><g><title>anon.902332d854d19376a9088b9f3940993b.42.llvm.10527988202565663021 (78 samples, 0.06%)</title><rect x="82.2044%" y="1061" width="0.0632%" height="15" fill="rgb(216,141,28)" fg:x="101478" fg:w="78"/><text x="82.4544%" y="1071.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (26 samples, 0.02%)</title><rect x="82.2716%" y="1061" width="0.0211%" height="15" fill="rgb(230,154,53)" fg:x="101561" fg:w="26"/><text x="82.5216%" y="1071.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (14 samples, 0.01%)</title><rect x="82.2975%" y="1061" width="0.0113%" height="15" fill="rgb(227,82,4)" fg:x="101593" fg:w="14"/><text x="82.5475%" y="1071.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.01%)</title><rect x="82.3089%" y="1045" width="0.0130%" height="15" fill="rgb(220,107,16)" fg:x="101607" fg:w="16"/><text x="82.5589%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (41 samples, 0.03%)</title><rect x="82.3518%" y="1029" width="0.0332%" height="15" fill="rgb(207,187,2)" fg:x="101660" fg:w="41"/><text x="82.6018%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (41 samples, 0.03%)</title><rect x="82.3518%" y="1013" width="0.0332%" height="15" fill="rgb(210,162,52)" fg:x="101660" fg:w="41"/><text x="82.6018%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (121 samples, 0.10%)</title><rect x="82.3218%" y="1045" width="0.0980%" height="15" fill="rgb(217,216,49)" fg:x="101623" fg:w="121"/><text x="82.5718%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (36 samples, 0.03%)</title><rect x="82.3907%" y="1029" width="0.0292%" height="15" fill="rgb(218,146,49)" fg:x="101708" fg:w="36"/><text x="82.6407%" y="1039.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="82.4198%" y="1045" width="0.0154%" height="15" fill="rgb(216,55,40)" fg:x="101744" fg:w="19"/><text x="82.6698%" y="1055.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (33 samples, 0.03%)</title><rect x="82.4936%" y="997" width="0.0267%" height="15" fill="rgb(208,196,21)" fg:x="101835" fg:w="33"/><text x="82.7436%" y="1007.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (115 samples, 0.09%)</title><rect x="82.4352%" y="1045" width="0.0932%" height="15" fill="rgb(242,117,42)" fg:x="101763" fg:w="115"/><text x="82.6852%" y="1055.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (105 samples, 0.09%)</title><rect x="82.4433%" y="1029" width="0.0851%" height="15" fill="rgb(210,11,23)" fg:x="101773" fg:w="105"/><text x="82.6933%" y="1039.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (92 samples, 0.07%)</title><rect x="82.4539%" y="1013" width="0.0745%" height="15" fill="rgb(217,110,2)" fg:x="101786" fg:w="92"/><text x="82.7039%" y="1023.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (15 samples, 0.01%)</title><rect x="82.5511%" y="1045" width="0.0122%" height="15" fill="rgb(229,77,54)" fg:x="101906" fg:w="15"/><text x="82.8011%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (52 samples, 0.04%)</title><rect x="82.5721%" y="1045" width="0.0421%" height="15" fill="rgb(218,53,16)" fg:x="101932" fg:w="52"/><text x="82.8221%" y="1055.50"></text></g><g><title>parking::Inner::park (21 samples, 0.02%)</title><rect x="82.6216%" y="1045" width="0.0170%" height="15" fill="rgb(215,38,13)" fg:x="101993" fg:w="21"/><text x="82.8716%" y="1055.50"></text></g><g><title>polling::epoll::Poller::modify (23 samples, 0.02%)</title><rect x="82.6483%" y="1045" width="0.0186%" height="15" fill="rgb(235,42,18)" fg:x="102026" fg:w="23"/><text x="82.8983%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="82.7414%" y="1029" width="0.0105%" height="15" fill="rgb(219,66,54)" fg:x="102141" fg:w="13"/><text x="82.9914%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.03%)</title><rect x="82.7520%" y="1029" width="0.0308%" height="15" fill="rgb(222,205,4)" fg:x="102154" fg:w="38"/><text x="83.0020%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (33 samples, 0.03%)</title><rect x="82.7560%" y="1013" width="0.0267%" height="15" fill="rgb(227,213,46)" fg:x="102159" fg:w="33"/><text x="83.0060%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (23 samples, 0.02%)</title><rect x="82.7641%" y="997" width="0.0186%" height="15" fill="rgb(250,145,42)" fg:x="102169" fg:w="23"/><text x="83.0141%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (23 samples, 0.02%)</title><rect x="82.7641%" y="981" width="0.0186%" height="15" fill="rgb(219,15,2)" fg:x="102169" fg:w="23"/><text x="83.0141%" y="991.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (598 samples, 0.48%)</title><rect x="82.3089%" y="1061" width="0.4844%" height="15" fill="rgb(231,181,52)" fg:x="101607" fg:w="598"/><text x="82.5589%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (145 samples, 0.12%)</title><rect x="82.6758%" y="1045" width="0.1175%" height="15" fill="rgb(235,1,42)" fg:x="102060" fg:w="145"/><text x="82.9258%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (13 samples, 0.01%)</title><rect x="82.7828%" y="1029" width="0.0105%" height="15" fill="rgb(249,88,27)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="1039.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="82.7828%" y="1013" width="0.0105%" height="15" fill="rgb(235,145,16)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.01%)</title><rect x="82.7828%" y="997" width="0.0105%" height="15" fill="rgb(237,114,19)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="82.7828%" y="981" width="0.0105%" height="15" fill="rgb(238,51,50)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="82.7828%" y="965" width="0.0105%" height="15" fill="rgb(205,194,25)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="975.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="82.7828%" y="949" width="0.0105%" height="15" fill="rgb(215,203,17)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="82.7828%" y="933" width="0.0105%" height="15" fill="rgb(233,112,49)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="82.7828%" y="917" width="0.0105%" height="15" fill="rgb(241,130,26)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="927.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="82.7828%" y="901" width="0.0105%" height="15" fill="rgb(252,223,19)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="911.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="82.7828%" y="885" width="0.0105%" height="15" fill="rgb(211,95,25)" fg:x="102192" fg:w="13"/><text x="83.0328%" y="895.50"></text></g><g><title>async_channel::bounded (22 samples, 0.02%)</title><rect x="82.8071%" y="821" width="0.0178%" height="15" fill="rgb(251,182,27)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="82.8071%" y="805" width="0.0178%" height="15" fill="rgb(238,24,4)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="82.8071%" y="789" width="0.0178%" height="15" fill="rgb(224,220,25)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="82.8071%" y="773" width="0.0178%" height="15" fill="rgb(239,133,26)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="82.8071%" y="757" width="0.0178%" height="15" fill="rgb(211,94,48)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="767.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="82.8071%" y="741" width="0.0178%" height="15" fill="rgb(239,87,6)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="751.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="82.8071%" y="725" width="0.0178%" height="15" fill="rgb(227,62,0)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="82.8071%" y="709" width="0.0178%" height="15" fill="rgb(211,226,4)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="719.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="82.8071%" y="693" width="0.0178%" height="15" fill="rgb(253,38,52)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="703.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (22 samples, 0.02%)</title><rect x="82.8071%" y="677" width="0.0178%" height="15" fill="rgb(229,126,40)" fg:x="102222" fg:w="22"/><text x="83.0571%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (46 samples, 0.04%)</title><rect x="83.3636%" y="453" width="0.0373%" height="15" fill="rgb(229,165,44)" fg:x="102909" fg:w="46"/><text x="83.6136%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (14 samples, 0.01%)</title><rect x="83.4600%" y="389" width="0.0113%" height="15" fill="rgb(247,95,47)" fg:x="103028" fg:w="14"/><text x="83.7100%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (45 samples, 0.04%)</title><rect x="83.6098%" y="357" width="0.0365%" height="15" fill="rgb(216,140,30)" fg:x="103213" fg:w="45"/><text x="83.8598%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (45 samples, 0.04%)</title><rect x="83.6098%" y="341" width="0.0365%" height="15" fill="rgb(246,214,8)" fg:x="103213" fg:w="45"/><text x="83.8598%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (38 samples, 0.03%)</title><rect x="83.6155%" y="325" width="0.0308%" height="15" fill="rgb(227,224,15)" fg:x="103220" fg:w="38"/><text x="83.8655%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (38 samples, 0.03%)</title><rect x="83.6155%" y="309" width="0.0308%" height="15" fill="rgb(233,175,4)" fg:x="103220" fg:w="38"/><text x="83.8655%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (38 samples, 0.03%)</title><rect x="83.6155%" y="293" width="0.0308%" height="15" fill="rgb(221,66,45)" fg:x="103220" fg:w="38"/><text x="83.8655%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 0.10%)</title><rect x="83.6463%" y="357" width="0.1029%" height="15" fill="rgb(221,178,18)" fg:x="103258" fg:w="127"/><text x="83.8963%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (532 samples, 0.43%)</title><rect x="83.4025%" y="405" width="0.4310%" height="15" fill="rgb(213,81,29)" fg:x="102957" fg:w="532"/><text x="83.6525%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (447 samples, 0.36%)</title><rect x="83.4713%" y="389" width="0.3621%" height="15" fill="rgb(220,89,49)" fg:x="103042" fg:w="447"/><text x="83.7213%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (371 samples, 0.30%)</title><rect x="83.5329%" y="373" width="0.3005%" height="15" fill="rgb(227,60,33)" fg:x="103118" fg:w="371"/><text x="83.7829%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (104 samples, 0.08%)</title><rect x="83.7492%" y="357" width="0.0842%" height="15" fill="rgb(205,113,12)" fg:x="103385" fg:w="104"/><text x="83.9992%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (104 samples, 0.08%)</title><rect x="83.7492%" y="341" width="0.0842%" height="15" fill="rgb(211,32,1)" fg:x="103385" fg:w="104"/><text x="83.9992%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (50 samples, 0.04%)</title><rect x="83.7929%" y="325" width="0.0405%" height="15" fill="rgb(246,2,12)" fg:x="103439" fg:w="50"/><text x="84.0429%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (50 samples, 0.04%)</title><rect x="83.7929%" y="309" width="0.0405%" height="15" fill="rgb(243,37,27)" fg:x="103439" fg:w="50"/><text x="84.0429%" y="319.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (29 samples, 0.02%)</title><rect x="83.8099%" y="293" width="0.0235%" height="15" fill="rgb(248,211,31)" fg:x="103460" fg:w="29"/><text x="84.0599%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (29 samples, 0.02%)</title><rect x="83.8099%" y="277" width="0.0235%" height="15" fill="rgb(242,146,47)" fg:x="103460" fg:w="29"/><text x="84.0599%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (574 samples, 0.46%)</title><rect x="83.4008%" y="453" width="0.4650%" height="15" fill="rgb(206,70,20)" fg:x="102955" fg:w="574"/><text x="83.6508%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (574 samples, 0.46%)</title><rect x="83.4008%" y="437" width="0.4650%" height="15" fill="rgb(215,10,51)" fg:x="102955" fg:w="574"/><text x="83.6508%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (574 samples, 0.46%)</title><rect x="83.4008%" y="421" width="0.4650%" height="15" fill="rgb(243,178,53)" fg:x="102955" fg:w="574"/><text x="83.6508%" y="431.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (40 samples, 0.03%)</title><rect x="83.8334%" y="405" width="0.0324%" height="15" fill="rgb(233,221,20)" fg:x="103489" fg:w="40"/><text x="84.0834%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,491 samples, 1.21%)</title><rect x="84.3049%" y="421" width="1.2078%" height="15" fill="rgb(218,95,35)" fg:x="104071" fg:w="1491"/><text x="84.5549%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,138 samples, 0.92%)</title><rect x="84.5908%" y="405" width="0.9219%" height="15" fill="rgb(229,13,5)" fg:x="104424" fg:w="1138"/><text x="84.8408%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1,138 samples, 0.92%)</title><rect x="84.5908%" y="389" width="0.9219%" height="15" fill="rgb(252,164,30)" fg:x="104424" fg:w="1138"/><text x="84.8408%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,923 samples, 1.56%)</title><rect x="83.9703%" y="437" width="1.5578%" height="15" fill="rgb(232,68,36)" fg:x="103658" fg:w="1923"/><text x="84.2203%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (19 samples, 0.02%)</title><rect x="85.5127%" y="421" width="0.0154%" height="15" fill="rgb(219,59,54)" fg:x="105562" fg:w="19"/><text x="85.7627%" y="431.50"></text></g><g><title>async_executor::steal (2,054 samples, 1.66%)</title><rect x="83.8658%" y="453" width="1.6639%" height="15" fill="rgb(250,92,33)" fg:x="103529" fg:w="2054"/><text x="84.1158%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (1,884 samples, 1.53%)</title><rect x="86.2734%" y="421" width="1.5262%" height="15" fill="rgb(229,162,54)" fg:x="106501" fg:w="1884"/><text x="86.5234%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,810 samples, 1.47%)</title><rect x="86.3333%" y="405" width="1.4662%" height="15" fill="rgb(244,114,52)" fg:x="106575" fg:w="1810"/><text x="86.5833%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,810 samples, 1.47%)</title><rect x="86.3333%" y="389" width="1.4662%" height="15" fill="rgb(212,211,43)" fg:x="106575" fg:w="1810"/><text x="86.5833%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,810 samples, 1.47%)</title><rect x="86.3333%" y="373" width="1.4662%" height="15" fill="rgb(226,147,8)" fg:x="106575" fg:w="1810"/><text x="86.5833%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,720 samples, 2.20%)</title><rect x="85.7241%" y="437" width="2.2034%" height="15" fill="rgb(226,23,13)" fg:x="105823" fg:w="2720"/><text x="85.9741%" y="447.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (158 samples, 0.13%)</title><rect x="87.7995%" y="421" width="0.1280%" height="15" fill="rgb(240,63,4)" fg:x="108385" fg:w="158"/><text x="88.0495%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (145 samples, 0.12%)</title><rect x="87.8101%" y="405" width="0.1175%" height="15" fill="rgb(221,1,32)" fg:x="108398" fg:w="145"/><text x="88.0601%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (278 samples, 0.23%)</title><rect x="87.9915%" y="421" width="0.2252%" height="15" fill="rgb(242,117,10)" fg:x="108622" fg:w="278"/><text x="88.2415%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (277 samples, 0.22%)</title><rect x="87.9923%" y="405" width="0.2244%" height="15" fill="rgb(249,172,44)" fg:x="108623" fg:w="277"/><text x="88.2423%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (277 samples, 0.22%)</title><rect x="87.9923%" y="389" width="0.2244%" height="15" fill="rgb(244,46,45)" fg:x="108623" fg:w="277"/><text x="88.2423%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (277 samples, 0.22%)</title><rect x="87.9923%" y="373" width="0.2244%" height="15" fill="rgb(206,43,17)" fg:x="108623" fg:w="277"/><text x="88.2423%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (46 samples, 0.04%)</title><rect x="88.2264%" y="405" width="0.0373%" height="15" fill="rgb(239,218,39)" fg:x="108912" fg:w="46"/><text x="88.4764%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (46 samples, 0.04%)</title><rect x="88.2264%" y="389" width="0.0373%" height="15" fill="rgb(208,169,54)" fg:x="108912" fg:w="46"/><text x="88.4764%" y="399.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (49 samples, 0.04%)</title><rect x="88.2248%" y="421" width="0.0397%" height="15" fill="rgb(247,25,42)" fg:x="108910" fg:w="49"/><text x="88.4748%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (20 samples, 0.02%)</title><rect x="88.2767%" y="421" width="0.0162%" height="15" fill="rgb(226,23,31)" fg:x="108974" fg:w="20"/><text x="88.5267%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="88.2767%" y="405" width="0.0162%" height="15" fill="rgb(247,16,28)" fg:x="108974" fg:w="20"/><text x="88.5267%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (103 samples, 0.08%)</title><rect x="88.2929%" y="421" width="0.0834%" height="15" fill="rgb(231,147,38)" fg:x="108994" fg:w="103"/><text x="88.5429%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (103 samples, 0.08%)</title><rect x="88.2929%" y="405" width="0.0834%" height="15" fill="rgb(253,81,48)" fg:x="108994" fg:w="103"/><text x="88.5429%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (207 samples, 0.17%)</title><rect x="88.3763%" y="421" width="0.1677%" height="15" fill="rgb(249,222,43)" fg:x="109097" fg:w="207"/><text x="88.6263%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_or (207 samples, 0.17%)</title><rect x="88.3763%" y="405" width="0.1677%" height="15" fill="rgb(221,3,27)" fg:x="109097" fg:w="207"/><text x="88.6263%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (3,894 samples, 3.15%)</title><rect x="85.5297%" y="453" width="3.1544%" height="15" fill="rgb(228,180,5)" fg:x="105583" fg:w="3894"/><text x="85.7797%" y="463.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (934 samples, 0.76%)</title><rect x="87.9275%" y="437" width="0.7566%" height="15" fill="rgb(227,131,42)" fg:x="108543" fg:w="934"/><text x="88.1775%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (173 samples, 0.14%)</title><rect x="88.5440%" y="421" width="0.1401%" height="15" fill="rgb(212,3,39)" fg:x="109304" fg:w="173"/><text x="88.7940%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (173 samples, 0.14%)</title><rect x="88.5440%" y="405" width="0.1401%" height="15" fill="rgb(226,45,5)" fg:x="109304" fg:w="173"/><text x="88.7940%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (251 samples, 0.20%)</title><rect x="88.7141%" y="389" width="0.2033%" height="15" fill="rgb(215,167,45)" fg:x="109514" fg:w="251"/><text x="88.9641%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (251 samples, 0.20%)</title><rect x="88.7141%" y="373" width="0.2033%" height="15" fill="rgb(250,218,53)" fg:x="109514" fg:w="251"/><text x="88.9641%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (573 samples, 0.46%)</title><rect x="88.6841%" y="453" width="0.4642%" height="15" fill="rgb(207,140,0)" fg:x="109477" fg:w="573"/><text x="88.9341%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (573 samples, 0.46%)</title><rect x="88.6841%" y="437" width="0.4642%" height="15" fill="rgb(238,133,51)" fg:x="109477" fg:w="573"/><text x="88.9341%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (568 samples, 0.46%)</title><rect x="88.6882%" y="421" width="0.4601%" height="15" fill="rgb(218,203,53)" fg:x="109482" fg:w="568"/><text x="88.9382%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (536 samples, 0.43%)</title><rect x="88.7141%" y="405" width="0.4342%" height="15" fill="rgb(226,184,25)" fg:x="109514" fg:w="536"/><text x="88.9641%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (285 samples, 0.23%)</title><rect x="88.9174%" y="389" width="0.2309%" height="15" fill="rgb(231,121,21)" fg:x="109765" fg:w="285"/><text x="89.1674%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_unlock (285 samples, 0.23%)</title><rect x="88.9174%" y="373" width="0.2309%" height="15" fill="rgb(251,14,34)" fg:x="109765" fg:w="285"/><text x="89.1674%" y="383.50"></text></g><g><title>fastrand::usize (41 samples, 0.03%)</title><rect x="89.1483%" y="453" width="0.0332%" height="15" fill="rgb(249,193,11)" fg:x="110050" fg:w="41"/><text x="89.3983%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 samples, 0.03%)</title><rect x="89.1499%" y="437" width="0.0316%" height="15" fill="rgb(220,172,37)" fg:x="110052" fg:w="39"/><text x="89.3999%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (32 samples, 0.03%)</title><rect x="89.1556%" y="421" width="0.0259%" height="15" fill="rgb(231,229,43)" fg:x="110059" fg:w="32"/><text x="89.4056%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (20 samples, 0.02%)</title><rect x="89.1653%" y="405" width="0.0162%" height="15" fill="rgb(250,161,5)" fg:x="110071" fg:w="20"/><text x="89.4153%" y="415.50"></text></g><g><title>fastrand::Rng::usize (20 samples, 0.02%)</title><rect x="89.1653%" y="389" width="0.0162%" height="15" fill="rgb(218,225,18)" fg:x="110071" fg:w="20"/><text x="89.4153%" y="399.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (16 samples, 0.01%)</title><rect x="89.1685%" y="373" width="0.0130%" height="15" fill="rgb(245,45,42)" fg:x="110075" fg:w="16"/><text x="89.4185%" y="383.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (509 samples, 0.41%)</title><rect x="89.2455%" y="405" width="0.4123%" height="15" fill="rgb(211,115,1)" fg:x="110170" fg:w="509"/><text x="89.4955%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,287 samples, 6.71%)</title><rect x="83.0946%" y="469" width="6.7131%" height="15" fill="rgb(248,133,52)" fg:x="102577" fg:w="8287"/><text x="83.3446%" y="479.50">async_exe..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (773 samples, 0.63%)</title><rect x="89.1815%" y="453" width="0.6262%" height="15" fill="rgb(238,100,21)" fg:x="110091" fg:w="773"/><text x="89.4315%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (764 samples, 0.62%)</title><rect x="89.1888%" y="437" width="0.6189%" height="15" fill="rgb(247,144,11)" fg:x="110100" fg:w="764"/><text x="89.4388%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (729 samples, 0.59%)</title><rect x="89.2171%" y="421" width="0.5905%" height="15" fill="rgb(206,164,16)" fg:x="110135" fg:w="729"/><text x="89.4671%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (185 samples, 0.15%)</title><rect x="89.6578%" y="405" width="0.1499%" height="15" fill="rgb(222,34,3)" fg:x="110679" fg:w="185"/><text x="89.9078%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (185 samples, 0.15%)</title><rect x="89.6578%" y="389" width="0.1499%" height="15" fill="rgb(248,82,4)" fg:x="110679" fg:w="185"/><text x="89.9078%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (50 samples, 0.04%)</title><rect x="89.8166%" y="453" width="0.0405%" height="15" fill="rgb(228,81,46)" fg:x="110875" fg:w="50"/><text x="90.0666%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="89.8166%" y="437" width="0.0405%" height="15" fill="rgb(227,67,47)" fg:x="110875" fg:w="50"/><text x="90.0666%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.04%)</title><rect x="89.8166%" y="421" width="0.0405%" height="15" fill="rgb(215,93,53)" fg:x="110875" fg:w="50"/><text x="90.0666%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (50 samples, 0.04%)</title><rect x="89.8166%" y="405" width="0.0405%" height="15" fill="rgb(248,194,39)" fg:x="110875" fg:w="50"/><text x="90.0666%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (50 samples, 0.04%)</title><rect x="89.8166%" y="389" width="0.0405%" height="15" fill="rgb(215,5,19)" fg:x="110875" fg:w="50"/><text x="90.0666%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (83 samples, 0.07%)</title><rect x="89.8571%" y="453" width="0.0672%" height="15" fill="rgb(226,215,51)" fg:x="110925" fg:w="83"/><text x="90.1071%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (83 samples, 0.07%)</title><rect x="89.8571%" y="437" width="0.0672%" height="15" fill="rgb(225,56,26)" fg:x="110925" fg:w="83"/><text x="90.1071%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (15 samples, 0.01%)</title><rect x="89.9446%" y="373" width="0.0122%" height="15" fill="rgb(222,75,29)" fg:x="111033" fg:w="15"/><text x="90.1946%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="89.9446%" y="357" width="0.0122%" height="15" fill="rgb(236,139,6)" fg:x="111033" fg:w="15"/><text x="90.1946%" y="367.50"></text></g><g><title>async_io::reactor::Reactor::notify (69 samples, 0.06%)</title><rect x="89.9349%" y="405" width="0.0559%" height="15" fill="rgb(223,137,36)" fg:x="111021" fg:w="69"/><text x="90.1849%" y="415.50"></text></g><g><title>polling::Poller::notify (59 samples, 0.05%)</title><rect x="89.9430%" y="389" width="0.0478%" height="15" fill="rgb(226,99,2)" fg:x="111031" fg:w="59"/><text x="90.1930%" y="399.50"></text></g><g><title>polling::epoll::Poller::notify (41 samples, 0.03%)</title><rect x="89.9576%" y="373" width="0.0332%" height="15" fill="rgb(206,133,23)" fg:x="111049" fg:w="41"/><text x="90.2076%" y="383.50"></text></g><g><title>__libc_write (33 samples, 0.03%)</title><rect x="89.9640%" y="357" width="0.0267%" height="15" fill="rgb(243,173,15)" fg:x="111057" fg:w="33"/><text x="90.2140%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (15 samples, 0.01%)</title><rect x="89.9908%" y="405" width="0.0122%" height="15" fill="rgb(228,69,28)" fg:x="111090" fg:w="15"/><text x="90.2408%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="89.9916%" y="389" width="0.0113%" height="15" fill="rgb(212,51,22)" fg:x="111091" fg:w="14"/><text x="90.2416%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (120 samples, 0.10%)</title><rect x="90.0377%" y="373" width="0.0972%" height="15" fill="rgb(227,113,0)" fg:x="111148" fg:w="120"/><text x="90.2877%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (120 samples, 0.10%)</title><rect x="90.0377%" y="357" width="0.0972%" height="15" fill="rgb(252,84,27)" fg:x="111148" fg:w="120"/><text x="90.2877%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (121 samples, 0.10%)</title><rect x="90.1350%" y="373" width="0.0980%" height="15" fill="rgb(223,145,39)" fg:x="111268" fg:w="121"/><text x="90.3850%" y="383.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (121 samples, 0.10%)</title><rect x="90.1350%" y="357" width="0.0980%" height="15" fill="rgb(239,219,30)" fg:x="111268" fg:w="121"/><text x="90.3850%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (121 samples, 0.10%)</title><rect x="90.1350%" y="341" width="0.0980%" height="15" fill="rgb(224,196,39)" fg:x="111268" fg:w="121"/><text x="90.3850%" y="351.50"></text></g><g><title>__pthread_cond_signal (121 samples, 0.10%)</title><rect x="90.1350%" y="325" width="0.0980%" height="15" fill="rgb(205,35,43)" fg:x="111268" fg:w="121"/><text x="90.3850%" y="335.50"></text></g><g><title>parking::Unparker::unpark (406 samples, 0.33%)</title><rect x="90.0029%" y="405" width="0.3289%" height="15" fill="rgb(228,201,21)" fg:x="111105" fg:w="406"/><text x="90.2529%" y="415.50"></text></g><g><title>parking::Inner::unpark (379 samples, 0.31%)</title><rect x="90.0248%" y="389" width="0.3070%" height="15" fill="rgb(237,118,16)" fg:x="111132" fg:w="379"/><text x="90.2748%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (122 samples, 0.10%)</title><rect x="90.2330%" y="373" width="0.0988%" height="15" fill="rgb(241,17,19)" fg:x="111389" fg:w="122"/><text x="90.4830%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (121 samples, 0.10%)</title><rect x="90.2338%" y="357" width="0.0980%" height="15" fill="rgb(214,10,25)" fg:x="111390" fg:w="121"/><text x="90.4838%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (119 samples, 0.10%)</title><rect x="90.2354%" y="341" width="0.0964%" height="15" fill="rgb(238,37,29)" fg:x="111392" fg:w="119"/><text x="90.4854%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (119 samples, 0.10%)</title><rect x="90.2354%" y="325" width="0.0964%" height="15" fill="rgb(253,83,25)" fg:x="111392" fg:w="119"/><text x="90.4854%" y="335.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (19 samples, 0.02%)</title><rect x="90.3318%" y="373" width="0.0154%" height="15" fill="rgb(234,192,12)" fg:x="111511" fg:w="19"/><text x="90.5818%" y="383.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (19 samples, 0.02%)</title><rect x="90.3318%" y="357" width="0.0154%" height="15" fill="rgb(241,216,45)" fg:x="111511" fg:w="19"/><text x="90.5818%" y="367.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (19 samples, 0.02%)</title><rect x="90.3318%" y="341" width="0.0154%" height="15" fill="rgb(242,22,33)" fg:x="111511" fg:w="19"/><text x="90.5818%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (19 samples, 0.02%)</title><rect x="90.3318%" y="325" width="0.0154%" height="15" fill="rgb(231,105,49)" fg:x="111511" fg:w="19"/><text x="90.5818%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (519 samples, 0.42%)</title><rect x="89.9276%" y="421" width="0.4204%" height="15" fill="rgb(218,204,15)" fg:x="111012" fg:w="519"/><text x="90.1776%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.02%)</title><rect x="90.3318%" y="405" width="0.0162%" height="15" fill="rgb(235,138,41)" fg:x="111511" fg:w="20"/><text x="90.5818%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.02%)</title><rect x="90.3318%" y="389" width="0.0162%" height="15" fill="rgb(246,0,9)" fg:x="111511" fg:w="20"/><text x="90.5818%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (626 samples, 0.51%)</title><rect x="89.9243%" y="453" width="0.5071%" height="15" fill="rgb(210,74,4)" fg:x="111008" fg:w="626"/><text x="90.1743%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (625 samples, 0.51%)</title><rect x="89.9251%" y="437" width="0.5063%" height="15" fill="rgb(250,60,41)" fg:x="111009" fg:w="625"/><text x="90.1751%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (103 samples, 0.08%)</title><rect x="90.3480%" y="421" width="0.0834%" height="15" fill="rgb(220,115,12)" fg:x="111531" fg:w="103"/><text x="90.5980%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (103 samples, 0.08%)</title><rect x="90.3480%" y="405" width="0.0834%" height="15" fill="rgb(237,100,13)" fg:x="111531" fg:w="103"/><text x="90.5980%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (100 samples, 0.08%)</title><rect x="90.3504%" y="389" width="0.0810%" height="15" fill="rgb(213,55,26)" fg:x="111534" fg:w="100"/><text x="90.6004%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (100 samples, 0.08%)</title><rect x="90.3504%" y="373" width="0.0810%" height="15" fill="rgb(216,17,4)" fg:x="111534" fg:w="100"/><text x="90.6004%" y="383.50"></text></g><g><title>async_executor::State::notify (822 samples, 0.67%)</title><rect x="89.8077%" y="469" width="0.6659%" height="15" fill="rgb(220,153,47)" fg:x="110864" fg:w="822"/><text x="90.0577%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.04%)</title><rect x="90.4314%" y="453" width="0.0421%" height="15" fill="rgb(215,131,9)" fg:x="111634" fg:w="52"/><text x="90.6814%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (48 samples, 0.04%)</title><rect x="90.4347%" y="437" width="0.0389%" height="15" fill="rgb(233,46,42)" fg:x="111638" fg:w="48"/><text x="90.6847%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (45 samples, 0.04%)</title><rect x="90.4371%" y="421" width="0.0365%" height="15" fill="rgb(226,86,7)" fg:x="111641" fg:w="45"/><text x="90.6871%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (45 samples, 0.04%)</title><rect x="90.4371%" y="405" width="0.0365%" height="15" fill="rgb(239,226,21)" fg:x="111641" fg:w="45"/><text x="90.6871%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (205 samples, 0.17%)</title><rect x="90.4890%" y="437" width="0.1661%" height="15" fill="rgb(244,137,22)" fg:x="111705" fg:w="205"/><text x="90.7390%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (204 samples, 0.17%)</title><rect x="90.4898%" y="421" width="0.1653%" height="15" fill="rgb(211,139,35)" fg:x="111706" fg:w="204"/><text x="90.7398%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (202 samples, 0.16%)</title><rect x="90.4914%" y="405" width="0.1636%" height="15" fill="rgb(214,62,50)" fg:x="111708" fg:w="202"/><text x="90.7414%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (202 samples, 0.16%)</title><rect x="90.4914%" y="389" width="0.1636%" height="15" fill="rgb(212,113,44)" fg:x="111708" fg:w="202"/><text x="90.7414%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (202 samples, 0.16%)</title><rect x="90.4914%" y="373" width="0.1636%" height="15" fill="rgb(226,150,43)" fg:x="111708" fg:w="202"/><text x="90.7414%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (202 samples, 0.16%)</title><rect x="90.4914%" y="357" width="0.1636%" height="15" fill="rgb(250,71,37)" fg:x="111708" fg:w="202"/><text x="90.7414%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (16 samples, 0.01%)</title><rect x="90.6550%" y="437" width="0.0130%" height="15" fill="rgb(219,76,19)" fg:x="111910" fg:w="16"/><text x="90.9050%" y="447.50"></text></g><g><title>async_executor::Sleepers::insert (252 samples, 0.20%)</title><rect x="90.4865%" y="453" width="0.2041%" height="15" fill="rgb(250,39,11)" fg:x="111702" fg:w="252"/><text x="90.7365%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.02%)</title><rect x="90.6680%" y="437" width="0.0227%" height="15" fill="rgb(230,64,31)" fg:x="111926" fg:w="28"/><text x="90.9180%" y="447.50"></text></g><g><title>core::ptr::write (26 samples, 0.02%)</title><rect x="90.6696%" y="421" width="0.0211%" height="15" fill="rgb(208,222,23)" fg:x="111928" fg:w="26"/><text x="90.9196%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="90.7547%" y="437" width="0.0194%" height="15" fill="rgb(227,125,18)" fg:x="112033" fg:w="24"/><text x="91.0047%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (59 samples, 0.05%)</title><rect x="90.7741%" y="437" width="0.0478%" height="15" fill="rgb(234,210,9)" fg:x="112057" fg:w="59"/><text x="91.0241%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (58 samples, 0.05%)</title><rect x="90.7749%" y="421" width="0.0470%" height="15" fill="rgb(217,127,24)" fg:x="112058" fg:w="58"/><text x="91.0249%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="90.7757%" y="405" width="0.0462%" height="15" fill="rgb(239,141,48)" fg:x="112059" fg:w="57"/><text x="91.0257%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="90.7757%" y="389" width="0.0462%" height="15" fill="rgb(227,109,8)" fg:x="112059" fg:w="57"/><text x="91.0257%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (57 samples, 0.05%)</title><rect x="90.7757%" y="373" width="0.0462%" height="15" fill="rgb(235,184,23)" fg:x="112059" fg:w="57"/><text x="91.0257%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (57 samples, 0.05%)</title><rect x="90.7757%" y="357" width="0.0462%" height="15" fill="rgb(227,226,48)" fg:x="112059" fg:w="57"/><text x="91.0257%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.02%)</title><rect x="90.8219%" y="437" width="0.0178%" height="15" fill="rgb(206,150,11)" fg:x="112116" fg:w="22"/><text x="91.0719%" y="447.50"></text></g><g><title>core::ptr::write (19 samples, 0.02%)</title><rect x="90.8243%" y="421" width="0.0154%" height="15" fill="rgb(254,2,33)" fg:x="112119" fg:w="19"/><text x="91.0743%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (188 samples, 0.15%)</title><rect x="90.6996%" y="453" width="0.1523%" height="15" fill="rgb(243,160,20)" fg:x="111965" fg:w="188"/><text x="90.9496%" y="463.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="90.8397%" y="437" width="0.0122%" height="15" fill="rgb(218,208,30)" fg:x="112138" fg:w="15"/><text x="91.0897%" y="447.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="90.8397%" y="421" width="0.0122%" height="15" fill="rgb(224,120,49)" fg:x="112138" fg:w="15"/><text x="91.0897%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (292 samples, 0.24%)</title><rect x="90.8519%" y="453" width="0.2365%" height="15" fill="rgb(246,12,2)" fg:x="112153" fg:w="292"/><text x="91.1019%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (292 samples, 0.24%)</title><rect x="90.8519%" y="437" width="0.2365%" height="15" fill="rgb(236,117,3)" fg:x="112153" fg:w="292"/><text x="91.1019%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (284 samples, 0.23%)</title><rect x="90.8584%" y="421" width="0.2301%" height="15" fill="rgb(216,128,52)" fg:x="112161" fg:w="284"/><text x="91.1084%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (281 samples, 0.23%)</title><rect x="90.8608%" y="405" width="0.2276%" height="15" fill="rgb(246,145,19)" fg:x="112164" fg:w="281"/><text x="91.1108%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (278 samples, 0.23%)</title><rect x="90.8632%" y="389" width="0.2252%" height="15" fill="rgb(222,11,46)" fg:x="112167" fg:w="278"/><text x="91.1132%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (269 samples, 0.22%)</title><rect x="91.0884%" y="453" width="0.2179%" height="15" fill="rgb(245,82,36)" fg:x="112445" fg:w="269"/><text x="91.3384%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (269 samples, 0.22%)</title><rect x="91.0884%" y="437" width="0.2179%" height="15" fill="rgb(250,73,51)" fg:x="112445" fg:w="269"/><text x="91.3384%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (185 samples, 0.15%)</title><rect x="91.3063%" y="453" width="0.1499%" height="15" fill="rgb(221,189,23)" fg:x="112714" fg:w="185"/><text x="91.5563%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (185 samples, 0.15%)</title><rect x="91.3063%" y="437" width="0.1499%" height="15" fill="rgb(210,33,7)" fg:x="112714" fg:w="185"/><text x="91.5563%" y="447.50"></text></g><g><title>std::sync::poison::Flag::get (15 samples, 0.01%)</title><rect x="91.4562%" y="405" width="0.0122%" height="15" fill="rgb(210,107,22)" fg:x="112899" fg:w="15"/><text x="91.7062%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (15 samples, 0.01%)</title><rect x="91.4562%" y="389" width="0.0122%" height="15" fill="rgb(222,116,37)" fg:x="112899" fg:w="15"/><text x="91.7062%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="91.4562%" y="373" width="0.0122%" height="15" fill="rgb(254,17,48)" fg:x="112899" fg:w="15"/><text x="91.7062%" y="383.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="91.4562%" y="437" width="0.0186%" height="15" fill="rgb(224,36,32)" fg:x="112899" fg:w="23"/><text x="91.7062%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (23 samples, 0.02%)</title><rect x="91.4562%" y="421" width="0.0186%" height="15" fill="rgb(232,90,46)" fg:x="112899" fg:w="23"/><text x="91.7062%" y="431.50"></text></g><g><title>async_executor::Ticker::sleep (1,906 samples, 1.54%)</title><rect x="90.4736%" y="469" width="1.5440%" height="15" fill="rgb(241,66,40)" fg:x="111686" fg:w="1906"/><text x="90.7236%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (693 samples, 0.56%)</title><rect x="91.4562%" y="453" width="0.5614%" height="15" fill="rgb(249,184,29)" fg:x="112899" fg:w="693"/><text x="91.7062%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (670 samples, 0.54%)</title><rect x="91.4748%" y="437" width="0.5427%" height="15" fill="rgb(231,181,1)" fg:x="112922" fg:w="670"/><text x="91.7248%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (654 samples, 0.53%)</title><rect x="91.4878%" y="421" width="0.5298%" height="15" fill="rgb(224,94,2)" fg:x="112938" fg:w="654"/><text x="91.7378%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (654 samples, 0.53%)</title><rect x="91.4878%" y="405" width="0.5298%" height="15" fill="rgb(229,170,15)" fg:x="112938" fg:w="654"/><text x="91.7378%" y="415.50"></text></g><g><title>__lll_lock_wait (44 samples, 0.04%)</title><rect x="91.9819%" y="389" width="0.0356%" height="15" fill="rgb(240,127,35)" fg:x="113548" fg:w="44"/><text x="92.2319%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="92.0492%" y="437" width="0.0138%" height="15" fill="rgb(248,196,34)" fg:x="113631" fg:w="17"/><text x="92.2992%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (17 samples, 0.01%)</title><rect x="92.0492%" y="421" width="0.0138%" height="15" fill="rgb(236,137,7)" fg:x="113631" fg:w="17"/><text x="92.2992%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (17 samples, 0.01%)</title><rect x="92.0492%" y="405" width="0.0138%" height="15" fill="rgb(235,127,16)" fg:x="113631" fg:w="17"/><text x="92.2992%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (18 samples, 0.01%)</title><rect x="92.0637%" y="437" width="0.0146%" height="15" fill="rgb(250,192,54)" fg:x="113649" fg:w="18"/><text x="92.3137%" y="447.50"></text></g><g><title>async_executor::Sleepers::remove (139 samples, 0.11%)</title><rect x="92.0281%" y="453" width="0.1126%" height="15" fill="rgb(218,98,20)" fg:x="113605" fg:w="139"/><text x="92.2781%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (77 samples, 0.06%)</title><rect x="92.0783%" y="437" width="0.0624%" height="15" fill="rgb(230,176,47)" fg:x="113667" fg:w="77"/><text x="92.3283%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (77 samples, 0.06%)</title><rect x="92.0783%" y="421" width="0.0624%" height="15" fill="rgb(244,2,33)" fg:x="113667" fg:w="77"/><text x="92.3283%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (77 samples, 0.06%)</title><rect x="92.0783%" y="405" width="0.0624%" height="15" fill="rgb(231,100,17)" fg:x="113667" fg:w="77"/><text x="92.3283%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (77 samples, 0.06%)</title><rect x="92.0783%" y="389" width="0.0624%" height="15" fill="rgb(245,23,12)" fg:x="113667" fg:w="77"/><text x="92.3283%" y="399.50"></text></g><g><title>core::mem::drop (76 samples, 0.06%)</title><rect x="92.0791%" y="373" width="0.0616%" height="15" fill="rgb(249,55,22)" fg:x="113668" fg:w="76"/><text x="92.3291%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (76 samples, 0.06%)</title><rect x="92.0791%" y="357" width="0.0616%" height="15" fill="rgb(207,134,9)" fg:x="113668" fg:w="76"/><text x="92.3291%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.06%)</title><rect x="92.0791%" y="341" width="0.0616%" height="15" fill="rgb(218,134,0)" fg:x="113668" fg:w="76"/><text x="92.3291%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (76 samples, 0.06%)</title><rect x="92.0791%" y="325" width="0.0616%" height="15" fill="rgb(213,212,33)" fg:x="113668" fg:w="76"/><text x="92.3291%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (76 samples, 0.06%)</title><rect x="92.0791%" y="309" width="0.0616%" height="15" fill="rgb(252,106,18)" fg:x="113668" fg:w="76"/><text x="92.3291%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (84 samples, 0.07%)</title><rect x="92.1407%" y="453" width="0.0680%" height="15" fill="rgb(208,126,42)" fg:x="113744" fg:w="84"/><text x="92.3907%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.07%)</title><rect x="92.1407%" y="437" width="0.0680%" height="15" fill="rgb(246,175,29)" fg:x="113744" fg:w="84"/><text x="92.3907%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (82 samples, 0.07%)</title><rect x="92.1423%" y="421" width="0.0664%" height="15" fill="rgb(215,13,50)" fg:x="113746" fg:w="82"/><text x="92.3923%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (82 samples, 0.07%)</title><rect x="92.1423%" y="405" width="0.0664%" height="15" fill="rgb(216,172,15)" fg:x="113746" fg:w="82"/><text x="92.3923%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (82 samples, 0.07%)</title><rect x="92.1423%" y="389" width="0.0664%" height="15" fill="rgb(212,103,13)" fg:x="113746" fg:w="82"/><text x="92.3923%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (103 samples, 0.08%)</title><rect x="92.2087%" y="453" width="0.0834%" height="15" fill="rgb(231,171,36)" fg:x="113828" fg:w="103"/><text x="92.4587%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (103 samples, 0.08%)</title><rect x="92.2087%" y="437" width="0.0834%" height="15" fill="rgb(250,123,20)" fg:x="113828" fg:w="103"/><text x="92.4587%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (116 samples, 0.09%)</title><rect x="92.2922%" y="453" width="0.0940%" height="15" fill="rgb(212,53,50)" fg:x="113931" fg:w="116"/><text x="92.5422%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (116 samples, 0.09%)</title><rect x="92.2922%" y="437" width="0.0940%" height="15" fill="rgb(243,54,12)" fg:x="113931" fg:w="116"/><text x="92.5422%" y="447.50"></text></g><g><title>async_executor::Ticker::wake (604 samples, 0.49%)</title><rect x="92.0176%" y="469" width="0.4893%" height="15" fill="rgb(234,101,34)" fg:x="113592" fg:w="604"/><text x="92.2676%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (149 samples, 0.12%)</title><rect x="92.3861%" y="453" width="0.1207%" height="15" fill="rgb(254,67,22)" fg:x="114047" fg:w="149"/><text x="92.6361%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (143 samples, 0.12%)</title><rect x="92.3910%" y="437" width="0.1158%" height="15" fill="rgb(250,35,47)" fg:x="114053" fg:w="143"/><text x="92.6410%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (138 samples, 0.11%)</title><rect x="92.3951%" y="421" width="0.1118%" height="15" fill="rgb(226,126,38)" fg:x="114058" fg:w="138"/><text x="92.6451%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (138 samples, 0.11%)</title><rect x="92.3951%" y="405" width="0.1118%" height="15" fill="rgb(216,138,53)" fg:x="114058" fg:w="138"/><text x="92.6451%" y="415.50"></text></g><g><title>__lll_lock_wait (14 samples, 0.01%)</title><rect x="92.4955%" y="389" width="0.0113%" height="15" fill="rgb(246,199,43)" fg:x="114182" fg:w="14"/><text x="92.7455%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,677 samples, 9.46%)</title><rect x="83.0485%" y="533" width="9.4592%" height="15" fill="rgb(232,125,11)" fg:x="102520" fg:w="11677"/><text x="83.2985%" y="543.50">&lt;core::future:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (11,677 samples, 9.46%)</title><rect x="83.0485%" y="517" width="9.4592%" height="15" fill="rgb(218,219,45)" fg:x="102520" fg:w="11677"/><text x="83.2985%" y="527.50">async_executor..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11,650 samples, 9.44%)</title><rect x="83.0703%" y="501" width="9.4373%" height="15" fill="rgb(216,102,54)" fg:x="102547" fg:w="11650"/><text x="83.3203%" y="511.50">&lt;futures_lite..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (11,634 samples, 9.42%)</title><rect x="83.0833%" y="485" width="9.4244%" height="15" fill="rgb(250,228,7)" fg:x="102563" fg:w="11634"/><text x="83.3333%" y="495.50">async_executo..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,806 samples, 9.56%)</title><rect x="83.0007%" y="565" width="9.5637%" height="15" fill="rgb(226,125,25)" fg:x="102461" fg:w="11806"/><text x="83.2507%" y="575.50">&lt;core::future:..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (11,801 samples, 9.56%)</title><rect x="83.0047%" y="549" width="9.5596%" height="15" fill="rgb(224,165,27)" fg:x="102466" fg:w="11801"/><text x="83.2547%" y="559.50">async_executor..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (65 samples, 0.05%)</title><rect x="92.5117%" y="533" width="0.0527%" height="15" fill="rgb(233,86,3)" fg:x="114202" fg:w="65"/><text x="92.7617%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (65 samples, 0.05%)</title><rect x="92.5117%" y="517" width="0.0527%" height="15" fill="rgb(228,116,20)" fg:x="114202" fg:w="65"/><text x="92.7617%" y="527.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.05%)</title><rect x="92.8163%" y="421" width="0.0543%" height="15" fill="rgb(209,192,17)" fg:x="114578" fg:w="67"/><text x="93.0663%" y="431.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (18 samples, 0.01%)</title><rect x="92.8706%" y="421" width="0.0146%" height="15" fill="rgb(224,88,34)" fg:x="114645" fg:w="18"/><text x="93.1206%" y="431.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="92.8714%" y="405" width="0.0138%" height="15" fill="rgb(233,38,6)" fg:x="114646" fg:w="17"/><text x="93.1214%" y="415.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="92.8714%" y="389" width="0.0138%" height="15" fill="rgb(212,59,30)" fg:x="114646" fg:w="17"/><text x="93.1214%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.01%)</title><rect x="92.8714%" y="373" width="0.0138%" height="15" fill="rgb(213,80,3)" fg:x="114646" fg:w="17"/><text x="93.1214%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (247 samples, 0.20%)</title><rect x="93.2076%" y="357" width="0.2001%" height="15" fill="rgb(251,178,7)" fg:x="115061" fg:w="247"/><text x="93.4576%" y="367.50"></text></g><g><title>[libc-2.31.so] (224 samples, 0.18%)</title><rect x="93.2262%" y="341" width="0.1815%" height="15" fill="rgb(213,154,26)" fg:x="115084" fg:w="224"/><text x="93.4762%" y="351.50"></text></g><g><title>[libc-2.31.so] (401 samples, 0.32%)</title><rect x="93.5170%" y="341" width="0.3248%" height="15" fill="rgb(238,165,49)" fg:x="115443" fg:w="401"/><text x="93.7670%" y="351.50"></text></g><g><title>alloc::alloc::box_free (48 samples, 0.04%)</title><rect x="93.8467%" y="309" width="0.0389%" height="15" fill="rgb(248,91,46)" fg:x="115850" fg:w="48"/><text x="94.0967%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.04%)</title><rect x="93.8467%" y="293" width="0.0389%" height="15" fill="rgb(244,21,52)" fg:x="115850" fg:w="48"/><text x="94.0967%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (48 samples, 0.04%)</title><rect x="93.8467%" y="277" width="0.0389%" height="15" fill="rgb(247,122,20)" fg:x="115850" fg:w="48"/><text x="94.0967%" y="287.50"></text></g><g><title>__rg_dealloc (48 samples, 0.04%)</title><rect x="93.8467%" y="261" width="0.0389%" height="15" fill="rgb(218,27,9)" fg:x="115850" fg:w="48"/><text x="94.0967%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (48 samples, 0.04%)</title><rect x="93.8467%" y="245" width="0.0389%" height="15" fill="rgb(246,7,6)" fg:x="115850" fg:w="48"/><text x="94.0967%" y="255.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.04%)</title><rect x="93.8491%" y="229" width="0.0365%" height="15" fill="rgb(227,135,54)" fg:x="115853" fg:w="45"/><text x="94.0991%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="93.8467%" y="341" width="0.0421%" height="15" fill="rgb(247,14,11)" fg:x="115850" fg:w="52"/><text x="94.0967%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="93.8467%" y="325" width="0.0421%" height="15" fill="rgb(206,149,34)" fg:x="115850" fg:w="52"/><text x="94.0967%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (112 samples, 0.09%)</title><rect x="93.9893%" y="277" width="0.0907%" height="15" fill="rgb(227,228,4)" fg:x="116026" fg:w="112"/><text x="94.2393%" y="287.50"></text></g><g><title>core::mem::replace (112 samples, 0.09%)</title><rect x="93.9893%" y="261" width="0.0907%" height="15" fill="rgb(238,218,28)" fg:x="116026" fg:w="112"/><text x="94.2393%" y="271.50"></text></g><g><title>core::ptr::read (112 samples, 0.09%)</title><rect x="93.9893%" y="245" width="0.0907%" height="15" fill="rgb(252,86,40)" fg:x="116026" fg:w="112"/><text x="94.2393%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (170 samples, 0.14%)</title><rect x="93.9642%" y="293" width="0.1377%" height="15" fill="rgb(251,225,11)" fg:x="115995" fg:w="170"/><text x="94.2142%" y="303.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="94.0800%" y="277" width="0.0219%" height="15" fill="rgb(206,46,49)" fg:x="116138" fg:w="27"/><text x="94.3300%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (27 samples, 0.02%)</title><rect x="94.0800%" y="261" width="0.0219%" height="15" fill="rgb(245,128,24)" fg:x="116138" fg:w="27"/><text x="94.3300%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (163 samples, 0.13%)</title><rect x="94.1019%" y="293" width="0.1320%" height="15" fill="rgb(219,177,34)" fg:x="116165" fg:w="163"/><text x="94.3519%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (153 samples, 0.12%)</title><rect x="94.1100%" y="277" width="0.1239%" height="15" fill="rgb(218,60,48)" fg:x="116175" fg:w="153"/><text x="94.3600%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 samples, 0.12%)</title><rect x="94.1100%" y="261" width="0.1239%" height="15" fill="rgb(221,11,5)" fg:x="116175" fg:w="153"/><text x="94.3600%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (138 samples, 0.11%)</title><rect x="94.1221%" y="245" width="0.1118%" height="15" fill="rgb(220,148,13)" fg:x="116190" fg:w="138"/><text x="94.3721%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (138 samples, 0.11%)</title><rect x="94.1221%" y="229" width="0.1118%" height="15" fill="rgb(210,16,3)" fg:x="116190" fg:w="138"/><text x="94.3721%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (132 samples, 0.11%)</title><rect x="94.1270%" y="213" width="0.1069%" height="15" fill="rgb(236,80,2)" fg:x="116196" fg:w="132"/><text x="94.3770%" y="223.50"></text></g><g><title>core::task::wake::Waker::will_wake (29 samples, 0.02%)</title><rect x="94.2339%" y="293" width="0.0235%" height="15" fill="rgb(239,129,19)" fg:x="116328" fg:w="29"/><text x="94.4839%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (29 samples, 0.02%)</title><rect x="94.2339%" y="277" width="0.0235%" height="15" fill="rgb(220,106,35)" fg:x="116328" fg:w="29"/><text x="94.4839%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.01%)</title><rect x="94.2428%" y="261" width="0.0146%" height="15" fill="rgb(252,139,45)" fg:x="116339" fg:w="18"/><text x="94.4928%" y="271.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (18 samples, 0.01%)</title><rect x="94.2428%" y="245" width="0.0146%" height="15" fill="rgb(229,8,36)" fg:x="116339" fg:w="18"/><text x="94.4928%" y="255.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (668 samples, 0.54%)</title><rect x="93.9220%" y="309" width="0.5411%" height="15" fill="rgb(230,126,33)" fg:x="115943" fg:w="668"/><text x="94.1720%" y="319.50"></text></g><g><title>event_listener::Inner::lock (254 samples, 0.21%)</title><rect x="94.2574%" y="293" width="0.2058%" height="15" fill="rgb(239,140,21)" fg:x="116357" fg:w="254"/><text x="94.5074%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (239 samples, 0.19%)</title><rect x="94.2696%" y="277" width="0.1936%" height="15" fill="rgb(254,104,9)" fg:x="116372" fg:w="239"/><text x="94.5196%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (234 samples, 0.19%)</title><rect x="94.2736%" y="261" width="0.1896%" height="15" fill="rgb(239,52,14)" fg:x="116377" fg:w="234"/><text x="94.5236%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (231 samples, 0.19%)</title><rect x="94.2760%" y="245" width="0.1871%" height="15" fill="rgb(208,227,44)" fg:x="116380" fg:w="231"/><text x="94.5260%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (231 samples, 0.19%)</title><rect x="94.2760%" y="229" width="0.1871%" height="15" fill="rgb(246,18,19)" fg:x="116380" fg:w="231"/><text x="94.5260%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (166 samples, 0.13%)</title><rect x="94.4939%" y="261" width="0.1345%" height="15" fill="rgb(235,228,25)" fg:x="116649" fg:w="166"/><text x="94.7439%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (162 samples, 0.13%)</title><rect x="94.4972%" y="245" width="0.1312%" height="15" fill="rgb(240,156,20)" fg:x="116653" fg:w="162"/><text x="94.7472%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (162 samples, 0.13%)</title><rect x="94.4972%" y="229" width="0.1312%" height="15" fill="rgb(224,8,20)" fg:x="116653" fg:w="162"/><text x="94.7472%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (162 samples, 0.13%)</title><rect x="94.4972%" y="213" width="0.1312%" height="15" fill="rgb(214,12,52)" fg:x="116653" fg:w="162"/><text x="94.7472%" y="223.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,534 samples, 1.24%)</title><rect x="93.4076%" y="357" width="1.2426%" height="15" fill="rgb(211,220,47)" fg:x="115308" fg:w="1534"/><text x="93.6576%" y="367.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (940 samples, 0.76%)</title><rect x="93.8888%" y="341" width="0.7615%" height="15" fill="rgb(250,173,5)" fg:x="115902" fg:w="940"/><text x="94.1388%" y="351.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (940 samples, 0.76%)</title><rect x="93.8888%" y="325" width="0.7615%" height="15" fill="rgb(250,125,52)" fg:x="115902" fg:w="940"/><text x="94.1388%" y="335.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (231 samples, 0.19%)</title><rect x="94.4632%" y="309" width="0.1871%" height="15" fill="rgb(209,133,18)" fg:x="116611" fg:w="231"/><text x="94.7132%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (222 samples, 0.18%)</title><rect x="94.4705%" y="293" width="0.1798%" height="15" fill="rgb(216,173,22)" fg:x="116620" fg:w="222"/><text x="94.7205%" y="303.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (215 samples, 0.17%)</title><rect x="94.4761%" y="277" width="0.1742%" height="15" fill="rgb(205,3,22)" fg:x="116627" fg:w="215"/><text x="94.7261%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.02%)</title><rect x="94.6333%" y="261" width="0.0170%" height="15" fill="rgb(248,22,20)" fg:x="116821" fg:w="21"/><text x="94.8833%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="94.6333%" y="245" width="0.0170%" height="15" fill="rgb(233,6,29)" fg:x="116821" fg:w="21"/><text x="94.8833%" y="255.50"></text></g><g><title>[libc-2.31.so] (278 samples, 0.23%)</title><rect x="94.6503%" y="357" width="0.2252%" height="15" fill="rgb(240,22,54)" fg:x="116842" fg:w="278"/><text x="94.9003%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (42 samples, 0.03%)</title><rect x="95.0189%" y="229" width="0.0340%" height="15" fill="rgb(231,133,32)" fg:x="117297" fg:w="42"/><text x="95.2689%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (221 samples, 0.18%)</title><rect x="94.8755%" y="357" width="0.1790%" height="15" fill="rgb(248,193,4)" fg:x="117120" fg:w="221"/><text x="95.1255%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (99 samples, 0.08%)</title><rect x="94.9743%" y="341" width="0.0802%" height="15" fill="rgb(211,178,46)" fg:x="117242" fg:w="99"/><text x="95.2243%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99 samples, 0.08%)</title><rect x="94.9743%" y="325" width="0.0802%" height="15" fill="rgb(224,5,42)" fg:x="117242" fg:w="99"/><text x="95.2243%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 0.08%)</title><rect x="94.9743%" y="309" width="0.0802%" height="15" fill="rgb(239,176,25)" fg:x="117242" fg:w="99"/><text x="95.2243%" y="319.50"></text></g><g><title>alloc::alloc::alloc (97 samples, 0.08%)</title><rect x="94.9759%" y="293" width="0.0786%" height="15" fill="rgb(245,187,50)" fg:x="117244" fg:w="97"/><text x="95.2259%" y="303.50"></text></g><g><title>__rg_alloc (97 samples, 0.08%)</title><rect x="94.9759%" y="277" width="0.0786%" height="15" fill="rgb(248,24,15)" fg:x="117244" fg:w="97"/><text x="95.2259%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (97 samples, 0.08%)</title><rect x="94.9759%" y="261" width="0.0786%" height="15" fill="rgb(205,166,13)" fg:x="117244" fg:w="97"/><text x="95.2259%" y="271.50"></text></g><g><title>sn_rust_alloc (90 samples, 0.07%)</title><rect x="94.9816%" y="245" width="0.0729%" height="15" fill="rgb(208,114,23)" fg:x="117251" fg:w="90"/><text x="95.2316%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="95.0610%" y="357" width="0.0162%" height="15" fill="rgb(239,127,18)" fg:x="117349" fg:w="20"/><text x="95.3110%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt; (20 samples, 0.02%)</title><rect x="95.0610%" y="341" width="0.0162%" height="15" fill="rgb(219,154,28)" fg:x="117349" fg:w="20"/><text x="95.3110%" y="351.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,708 samples, 2.19%)</title><rect x="92.9022%" y="373" width="2.1937%" height="15" fill="rgb(225,157,23)" fg:x="114684" fg:w="2708"/><text x="93.1522%" y="383.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (15 samples, 0.01%)</title><rect x="95.0837%" y="357" width="0.0122%" height="15" fill="rgb(219,8,6)" fg:x="117377" fg:w="15"/><text x="95.3337%" y="367.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,730 samples, 2.21%)</title><rect x="92.8876%" y="405" width="2.2115%" height="15" fill="rgb(212,47,6)" fg:x="114666" fg:w="2730"/><text x="93.1376%" y="415.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,730 samples, 2.21%)</title><rect x="92.8876%" y="389" width="2.2115%" height="15" fill="rgb(224,190,4)" fg:x="114666" fg:w="2730"/><text x="93.1376%" y="399.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,985 samples, 2.42%)</title><rect x="92.6924%" y="517" width="2.4181%" height="15" fill="rgb(239,183,29)" fg:x="114425" fg:w="2985"/><text x="92.9424%" y="527.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,981 samples, 2.41%)</title><rect x="92.6956%" y="501" width="2.4148%" height="15" fill="rgb(213,57,7)" fg:x="114429" fg:w="2981"/><text x="92.9456%" y="511.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,840 samples, 2.30%)</title><rect x="92.8098%" y="485" width="2.3006%" height="15" fill="rgb(216,148,1)" fg:x="114570" fg:w="2840"/><text x="93.0598%" y="495.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,840 samples, 2.30%)</title><rect x="92.8098%" y="469" width="2.3006%" height="15" fill="rgb(236,182,29)" fg:x="114570" fg:w="2840"/><text x="93.0598%" y="479.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,837 samples, 2.30%)</title><rect x="92.8122%" y="453" width="2.2982%" height="15" fill="rgb(244,120,48)" fg:x="114573" fg:w="2837"/><text x="93.0622%" y="463.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,835 samples, 2.30%)</title><rect x="92.8139%" y="437" width="2.2966%" height="15" fill="rgb(206,71,34)" fg:x="114575" fg:w="2835"/><text x="93.0639%" y="447.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,747 samples, 2.23%)</title><rect x="92.8851%" y="421" width="2.2253%" height="15" fill="rgb(242,32,6)" fg:x="114663" fg:w="2747"/><text x="93.1351%" y="431.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,988 samples, 2.42%)</title><rect x="92.6924%" y="533" width="2.4205%" height="15" fill="rgb(241,35,3)" fg:x="114425" fg:w="2988"/><text x="92.9424%" y="543.50">&lt;c..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (38 samples, 0.03%)</title><rect x="95.1128%" y="533" width="0.0308%" height="15" fill="rgb(222,62,19)" fg:x="117413" fg:w="38"/><text x="95.3628%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (37 samples, 0.03%)</title><rect x="95.1137%" y="517" width="0.0300%" height="15" fill="rgb(223,110,41)" fg:x="117414" fg:w="37"/><text x="95.3637%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (37 samples, 0.03%)</title><rect x="95.1137%" y="501" width="0.0300%" height="15" fill="rgb(208,224,4)" fg:x="117414" fg:w="37"/><text x="95.3637%" y="511.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (13 samples, 0.01%)</title><rect x="95.1469%" y="453" width="0.0105%" height="15" fill="rgb(241,137,19)" fg:x="117455" fg:w="13"/><text x="95.3969%" y="463.50"></text></g><g><title>core::task::wake::Waker::wake (17 samples, 0.01%)</title><rect x="95.1469%" y="485" width="0.0138%" height="15" fill="rgb(244,24,17)" fg:x="117455" fg:w="17"/><text x="95.3969%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (17 samples, 0.01%)</title><rect x="95.1469%" y="469" width="0.0138%" height="15" fill="rgb(245,178,49)" fg:x="117455" fg:w="17"/><text x="95.3969%" y="479.50"></text></g><g><title>async_executor::State::notify (29 samples, 0.02%)</title><rect x="95.1436%" y="501" width="0.0235%" height="15" fill="rgb(219,160,38)" fg:x="117451" fg:w="29"/><text x="95.3936%" y="511.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (43 samples, 0.03%)</title><rect x="95.1436%" y="517" width="0.0348%" height="15" fill="rgb(228,137,14)" fg:x="117451" fg:w="43"/><text x="95.3936%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (14 samples, 0.01%)</title><rect x="95.1671%" y="501" width="0.0113%" height="15" fill="rgb(237,134,11)" fg:x="117480" fg:w="14"/><text x="95.4171%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (45 samples, 0.04%)</title><rect x="95.1436%" y="533" width="0.0365%" height="15" fill="rgb(211,126,44)" fg:x="117451" fg:w="45"/><text x="95.3936%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (329 samples, 0.27%)</title><rect x="95.1801%" y="533" width="0.2665%" height="15" fill="rgb(226,171,33)" fg:x="117496" fg:w="329"/><text x="95.4301%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (329 samples, 0.27%)</title><rect x="95.1801%" y="517" width="0.2665%" height="15" fill="rgb(253,99,13)" fg:x="117496" fg:w="329"/><text x="95.4301%" y="527.50"></text></g><g><title>async_task::runnable::Runnable::run (3,571 samples, 2.89%)</title><rect x="92.5652%" y="565" width="2.8928%" height="15" fill="rgb(244,48,7)" fg:x="114268" fg:w="3571"/><text x="92.8152%" y="575.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,503 samples, 2.84%)</title><rect x="92.6203%" y="549" width="2.8377%" height="15" fill="rgb(244,217,54)" fg:x="114336" fg:w="3503"/><text x="92.8703%" y="559.50">as..</text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.01%)</title><rect x="95.4466%" y="533" width="0.0113%" height="15" fill="rgb(224,15,18)" fg:x="117825" fg:w="14"/><text x="95.6966%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="95.4466%" y="517" width="0.0113%" height="15" fill="rgb(244,99,12)" fg:x="117825" fg:w="14"/><text x="95.6966%" y="527.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (15,501 samples, 12.56%)</title><rect x="82.9537%" y="629" width="12.5569%" height="15" fill="rgb(233,226,8)" fg:x="102403" fg:w="15501"/><text x="83.2037%" y="639.50">async_executor::Exe..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,470 samples, 12.53%)</title><rect x="82.9788%" y="613" width="12.5318%" height="15" fill="rgb(229,211,3)" fg:x="102434" fg:w="15470"/><text x="83.2288%" y="623.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,470 samples, 12.53%)</title><rect x="82.9788%" y="597" width="12.5318%" height="15" fill="rgb(216,140,21)" fg:x="102434" fg:w="15470"/><text x="83.2288%" y="607.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15,468 samples, 12.53%)</title><rect x="82.9804%" y="581" width="12.5302%" height="15" fill="rgb(234,122,30)" fg:x="102436" fg:w="15468"/><text x="83.2304%" y="591.50">async_executor::Exe..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (65 samples, 0.05%)</title><rect x="95.4579%" y="565" width="0.0527%" height="15" fill="rgb(236,25,46)" fg:x="117839" fg:w="65"/><text x="95.7079%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (65 samples, 0.05%)</title><rect x="95.4579%" y="549" width="0.0527%" height="15" fill="rgb(217,52,54)" fg:x="117839" fg:w="65"/><text x="95.7079%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.02%)</title><rect x="95.6094%" y="373" width="0.0162%" height="15" fill="rgb(222,29,26)" fg:x="118026" fg:w="20"/><text x="95.8594%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.02%)</title><rect x="95.6094%" y="357" width="0.0162%" height="15" fill="rgb(216,177,29)" fg:x="118026" fg:w="20"/><text x="95.8594%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.01%)</title><rect x="95.6118%" y="341" width="0.0138%" height="15" fill="rgb(247,136,51)" fg:x="118029" fg:w="17"/><text x="95.8618%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="95.6094%" y="421" width="0.0178%" height="15" fill="rgb(231,47,47)" fg:x="118026" fg:w="22"/><text x="95.8594%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (22 samples, 0.02%)</title><rect x="95.6094%" y="405" width="0.0178%" height="15" fill="rgb(211,192,36)" fg:x="118026" fg:w="22"/><text x="95.8594%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.02%)</title><rect x="95.6094%" y="389" width="0.0178%" height="15" fill="rgb(229,156,32)" fg:x="118026" fg:w="22"/><text x="95.8594%" y="399.50"></text></g><g><title>concurrent_queue::full_fence (33 samples, 0.03%)</title><rect x="95.6661%" y="389" width="0.0267%" height="15" fill="rgb(248,213,20)" fg:x="118096" fg:w="33"/><text x="95.9161%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (33 samples, 0.03%)</title><rect x="95.6661%" y="373" width="0.0267%" height="15" fill="rgb(217,64,7)" fg:x="118096" fg:w="33"/><text x="95.9161%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (33 samples, 0.03%)</title><rect x="95.6661%" y="357" width="0.0267%" height="15" fill="rgb(232,142,8)" fg:x="118096" fg:w="33"/><text x="95.9161%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.03%)</title><rect x="95.6661%" y="341" width="0.0267%" height="15" fill="rgb(224,92,44)" fg:x="118096" fg:w="33"/><text x="95.9161%" y="351.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (164 samples, 0.13%)</title><rect x="95.6402%" y="405" width="0.1329%" height="15" fill="rgb(214,169,17)" fg:x="118064" fg:w="164"/><text x="95.8902%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (99 samples, 0.08%)</title><rect x="95.6929%" y="389" width="0.0802%" height="15" fill="rgb(210,59,37)" fg:x="118129" fg:w="99"/><text x="95.9429%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (99 samples, 0.08%)</title><rect x="95.6929%" y="373" width="0.0802%" height="15" fill="rgb(214,116,48)" fg:x="118129" fg:w="99"/><text x="95.9429%" y="383.50"></text></g><g><title>concurrent_queue::full_fence (55 samples, 0.04%)</title><rect x="95.7795%" y="389" width="0.0446%" height="15" fill="rgb(244,191,6)" fg:x="118236" fg:w="55"/><text x="96.0295%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (54 samples, 0.04%)</title><rect x="95.7803%" y="373" width="0.0437%" height="15" fill="rgb(241,50,52)" fg:x="118237" fg:w="54"/><text x="96.0303%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (54 samples, 0.04%)</title><rect x="95.7803%" y="357" width="0.0437%" height="15" fill="rgb(236,75,39)" fg:x="118237" fg:w="54"/><text x="96.0303%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (54 samples, 0.04%)</title><rect x="95.7803%" y="341" width="0.0437%" height="15" fill="rgb(236,99,0)" fg:x="118237" fg:w="54"/><text x="96.0303%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (278 samples, 0.23%)</title><rect x="95.6272%" y="421" width="0.2252%" height="15" fill="rgb(207,202,15)" fg:x="118048" fg:w="278"/><text x="95.8772%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (98 samples, 0.08%)</title><rect x="95.7731%" y="405" width="0.0794%" height="15" fill="rgb(233,207,14)" fg:x="118228" fg:w="98"/><text x="96.0231%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (32 samples, 0.03%)</title><rect x="95.8265%" y="389" width="0.0259%" height="15" fill="rgb(226,27,51)" fg:x="118294" fg:w="32"/><text x="96.0765%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.03%)</title><rect x="95.8265%" y="373" width="0.0259%" height="15" fill="rgb(206,104,42)" fg:x="118294" fg:w="32"/><text x="96.0765%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (38 samples, 0.03%)</title><rect x="95.8549%" y="357" width="0.0308%" height="15" fill="rgb(212,225,4)" fg:x="118329" fg:w="38"/><text x="96.1049%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (38 samples, 0.03%)</title><rect x="95.8549%" y="341" width="0.0308%" height="15" fill="rgb(233,96,42)" fg:x="118329" fg:w="38"/><text x="96.1049%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (102 samples, 0.08%)</title><rect x="95.8524%" y="421" width="0.0826%" height="15" fill="rgb(229,21,32)" fg:x="118326" fg:w="102"/><text x="96.1024%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.08%)</title><rect x="95.8524%" y="405" width="0.0826%" height="15" fill="rgb(226,216,24)" fg:x="118326" fg:w="102"/><text x="96.1024%" y="415.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (99 samples, 0.08%)</title><rect x="95.8549%" y="389" width="0.0802%" height="15" fill="rgb(221,163,17)" fg:x="118329" fg:w="99"/><text x="96.1049%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (99 samples, 0.08%)</title><rect x="95.8549%" y="373" width="0.0802%" height="15" fill="rgb(216,216,42)" fg:x="118329" fg:w="99"/><text x="96.1049%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (61 samples, 0.05%)</title><rect x="95.8857%" y="357" width="0.0494%" height="15" fill="rgb(240,118,7)" fg:x="118367" fg:w="61"/><text x="96.1357%" y="367.50"></text></g><g><title>__GI___pthread_rwlock_unlock (61 samples, 0.05%)</title><rect x="95.8857%" y="341" width="0.0494%" height="15" fill="rgb(221,67,37)" fg:x="118367" fg:w="61"/><text x="96.1357%" y="351.50"></text></g><g><title>fastrand::usize (22 samples, 0.02%)</title><rect x="95.9351%" y="421" width="0.0178%" height="15" fill="rgb(241,32,44)" fg:x="118428" fg:w="22"/><text x="96.1851%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.02%)</title><rect x="95.9367%" y="405" width="0.0162%" height="15" fill="rgb(235,204,43)" fg:x="118430" fg:w="20"/><text x="96.1867%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.01%)</title><rect x="95.9383%" y="389" width="0.0146%" height="15" fill="rgb(213,116,10)" fg:x="118432" fg:w="18"/><text x="96.1883%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (69 samples, 0.06%)</title><rect x="95.9642%" y="373" width="0.0559%" height="15" fill="rgb(239,15,48)" fg:x="118464" fg:w="69"/><text x="96.2142%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (566 samples, 0.46%)</title><rect x="95.5989%" y="437" width="0.4585%" height="15" fill="rgb(207,123,36)" fg:x="118013" fg:w="566"/><text x="95.8489%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (129 samples, 0.10%)</title><rect x="95.9529%" y="421" width="0.1045%" height="15" fill="rgb(209,103,30)" fg:x="118450" fg:w="129"/><text x="96.2029%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (123 samples, 0.10%)</title><rect x="95.9577%" y="405" width="0.0996%" height="15" fill="rgb(238,100,19)" fg:x="118456" fg:w="123"/><text x="96.2077%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (122 samples, 0.10%)</title><rect x="95.9586%" y="389" width="0.0988%" height="15" fill="rgb(244,30,14)" fg:x="118457" fg:w="122"/><text x="96.2086%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (46 samples, 0.04%)</title><rect x="96.0201%" y="373" width="0.0373%" height="15" fill="rgb(249,174,6)" fg:x="118533" fg:w="46"/><text x="96.2701%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (46 samples, 0.04%)</title><rect x="96.0201%" y="357" width="0.0373%" height="15" fill="rgb(235,213,41)" fg:x="118533" fg:w="46"/><text x="96.2701%" y="367.50"></text></g><g><title>async_executor::Sleepers::update (34 samples, 0.03%)</title><rect x="96.0622%" y="421" width="0.0275%" height="15" fill="rgb(213,118,6)" fg:x="118585" fg:w="34"/><text x="96.3122%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="96.0760%" y="405" width="0.0138%" height="15" fill="rgb(235,44,51)" fg:x="118602" fg:w="17"/><text x="96.3260%" y="415.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="96.0760%" y="389" width="0.0138%" height="15" fill="rgb(217,9,53)" fg:x="118602" fg:w="17"/><text x="96.3260%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (65 samples, 0.05%)</title><rect x="96.0898%" y="421" width="0.0527%" height="15" fill="rgb(237,172,34)" fg:x="118619" fg:w="65"/><text x="96.3398%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.05%)</title><rect x="96.0898%" y="405" width="0.0527%" height="15" fill="rgb(206,206,11)" fg:x="118619" fg:w="65"/><text x="96.3398%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (62 samples, 0.05%)</title><rect x="96.0922%" y="389" width="0.0502%" height="15" fill="rgb(214,149,29)" fg:x="118622" fg:w="62"/><text x="96.3422%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (57 samples, 0.05%)</title><rect x="96.0963%" y="373" width="0.0462%" height="15" fill="rgb(208,123,3)" fg:x="118627" fg:w="57"/><text x="96.3463%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (55 samples, 0.04%)</title><rect x="96.0979%" y="357" width="0.0446%" height="15" fill="rgb(229,126,4)" fg:x="118629" fg:w="55"/><text x="96.3479%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (790 samples, 0.64%)</title><rect x="95.5681%" y="549" width="0.6400%" height="15" fill="rgb(222,92,36)" fg:x="117975" fg:w="790"/><text x="95.8181%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (775 samples, 0.63%)</title><rect x="95.5803%" y="533" width="0.6278%" height="15" fill="rgb(216,39,41)" fg:x="117990" fg:w="775"/><text x="95.8303%" y="543.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (774 samples, 0.63%)</title><rect x="95.5811%" y="517" width="0.6270%" height="15" fill="rgb(253,127,28)" fg:x="117991" fg:w="774"/><text x="95.8311%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (765 samples, 0.62%)</title><rect x="95.5884%" y="501" width="0.6197%" height="15" fill="rgb(249,152,51)" fg:x="118000" fg:w="765"/><text x="95.8384%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (765 samples, 0.62%)</title><rect x="95.5884%" y="485" width="0.6197%" height="15" fill="rgb(209,123,42)" fg:x="118000" fg:w="765"/><text x="95.8384%" y="495.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (757 samples, 0.61%)</title><rect x="95.5948%" y="469" width="0.6132%" height="15" fill="rgb(241,118,22)" fg:x="118008" fg:w="757"/><text x="95.8448%" y="479.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (755 samples, 0.61%)</title><rect x="95.5965%" y="453" width="0.6116%" height="15" fill="rgb(208,25,7)" fg:x="118010" fg:w="755"/><text x="95.8465%" y="463.50"></text></g><g><title>async_executor::Ticker::sleep (186 samples, 0.15%)</title><rect x="96.0574%" y="437" width="0.1507%" height="15" fill="rgb(243,144,39)" fg:x="118579" fg:w="186"/><text x="96.3074%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (81 samples, 0.07%)</title><rect x="96.1424%" y="421" width="0.0656%" height="15" fill="rgb(250,50,5)" fg:x="118684" fg:w="81"/><text x="96.3924%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (75 samples, 0.06%)</title><rect x="96.1473%" y="405" width="0.0608%" height="15" fill="rgb(207,67,11)" fg:x="118690" fg:w="75"/><text x="96.3973%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (74 samples, 0.06%)</title><rect x="96.1481%" y="389" width="0.0599%" height="15" fill="rgb(245,204,40)" fg:x="118691" fg:w="74"/><text x="96.3981%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (74 samples, 0.06%)</title><rect x="96.1481%" y="373" width="0.0599%" height="15" fill="rgb(238,228,24)" fg:x="118691" fg:w="74"/><text x="96.3981%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (26 samples, 0.02%)</title><rect x="96.3288%" y="485" width="0.0211%" height="15" fill="rgb(217,116,22)" fg:x="118914" fg:w="26"/><text x="96.5788%" y="495.50"></text></g><g><title>core::mem::replace (26 samples, 0.02%)</title><rect x="96.3288%" y="469" width="0.0211%" height="15" fill="rgb(234,98,12)" fg:x="118914" fg:w="26"/><text x="96.5788%" y="479.50"></text></g><g><title>core::ptr::read (26 samples, 0.02%)</title><rect x="96.3288%" y="453" width="0.0211%" height="15" fill="rgb(242,170,50)" fg:x="118914" fg:w="26"/><text x="96.5788%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (62 samples, 0.05%)</title><rect x="96.3069%" y="501" width="0.0502%" height="15" fill="rgb(235,7,5)" fg:x="118887" fg:w="62"/><text x="96.5569%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (66 samples, 0.05%)</title><rect x="96.3571%" y="501" width="0.0535%" height="15" fill="rgb(241,114,28)" fg:x="118949" fg:w="66"/><text x="96.6071%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (62 samples, 0.05%)</title><rect x="96.3604%" y="485" width="0.0502%" height="15" fill="rgb(246,112,42)" fg:x="118953" fg:w="62"/><text x="96.6104%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="96.3604%" y="469" width="0.0502%" height="15" fill="rgb(248,228,14)" fg:x="118953" fg:w="62"/><text x="96.6104%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (56 samples, 0.05%)</title><rect x="96.3652%" y="453" width="0.0454%" height="15" fill="rgb(208,133,18)" fg:x="118959" fg:w="56"/><text x="96.6152%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (56 samples, 0.05%)</title><rect x="96.3652%" y="437" width="0.0454%" height="15" fill="rgb(207,35,49)" fg:x="118959" fg:w="56"/><text x="96.6152%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (52 samples, 0.04%)</title><rect x="96.3685%" y="421" width="0.0421%" height="15" fill="rgb(205,68,36)" fg:x="118963" fg:w="52"/><text x="96.6185%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (25 samples, 0.02%)</title><rect x="96.4106%" y="501" width="0.0203%" height="15" fill="rgb(245,62,40)" fg:x="119015" fg:w="25"/><text x="96.6606%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="96.4106%" y="485" width="0.0203%" height="15" fill="rgb(228,27,24)" fg:x="119015" fg:w="25"/><text x="96.6606%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.01%)</title><rect x="96.4171%" y="469" width="0.0138%" height="15" fill="rgb(253,19,12)" fg:x="119023" fg:w="17"/><text x="96.6671%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="96.4171%" y="453" width="0.0138%" height="15" fill="rgb(232,28,20)" fg:x="119023" fg:w="17"/><text x="96.6671%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (445 samples, 0.36%)</title><rect x="96.2712%" y="517" width="0.3605%" height="15" fill="rgb(218,35,51)" fg:x="118843" fg:w="445"/><text x="96.5212%" y="527.50"></text></g><g><title>event_listener::Inner::lock (248 samples, 0.20%)</title><rect x="96.4308%" y="501" width="0.2009%" height="15" fill="rgb(212,90,40)" fg:x="119040" fg:w="248"/><text x="96.6808%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (239 samples, 0.19%)</title><rect x="96.4381%" y="485" width="0.1936%" height="15" fill="rgb(220,172,12)" fg:x="119049" fg:w="239"/><text x="96.6881%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (234 samples, 0.19%)</title><rect x="96.4422%" y="469" width="0.1896%" height="15" fill="rgb(226,159,20)" fg:x="119054" fg:w="234"/><text x="96.6922%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (201 samples, 0.16%)</title><rect x="96.4689%" y="453" width="0.1628%" height="15" fill="rgb(234,205,16)" fg:x="119087" fg:w="201"/><text x="96.7189%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (201 samples, 0.16%)</title><rect x="96.4689%" y="437" width="0.1628%" height="15" fill="rgb(207,9,39)" fg:x="119087" fg:w="201"/><text x="96.7189%" y="447.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (121 samples, 0.10%)</title><rect x="96.6317%" y="517" width="0.0980%" height="15" fill="rgb(249,143,15)" fg:x="119288" fg:w="121"/><text x="96.8817%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (121 samples, 0.10%)</title><rect x="96.6317%" y="501" width="0.0980%" height="15" fill="rgb(253,133,29)" fg:x="119288" fg:w="121"/><text x="96.8817%" y="511.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (72 samples, 0.06%)</title><rect x="96.6714%" y="485" width="0.0583%" height="15" fill="rgb(221,187,0)" fg:x="119337" fg:w="72"/><text x="96.9214%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (68 samples, 0.06%)</title><rect x="96.6747%" y="469" width="0.0551%" height="15" fill="rgb(205,204,26)" fg:x="119341" fg:w="68"/><text x="96.9247%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (68 samples, 0.06%)</title><rect x="96.6747%" y="453" width="0.0551%" height="15" fill="rgb(224,68,54)" fg:x="119341" fg:w="68"/><text x="96.9247%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (68 samples, 0.06%)</title><rect x="96.6747%" y="437" width="0.0551%" height="15" fill="rgb(209,67,4)" fg:x="119341" fg:w="68"/><text x="96.9247%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,448 samples, 1.17%)</title><rect x="95.5608%" y="581" width="1.1730%" height="15" fill="rgb(228,229,18)" fg:x="117966" fg:w="1448"/><text x="95.8108%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,443 samples, 1.17%)</title><rect x="95.5649%" y="565" width="1.1689%" height="15" fill="rgb(231,89,13)" fg:x="117971" fg:w="1443"/><text x="95.8149%" y="575.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (649 samples, 0.53%)</title><rect x="96.2081%" y="549" width="0.5257%" height="15" fill="rgb(210,182,18)" fg:x="118765" fg:w="649"/><text x="96.4581%" y="559.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (599 samples, 0.49%)</title><rect x="96.2486%" y="533" width="0.4852%" height="15" fill="rgb(240,105,2)" fg:x="118815" fg:w="599"/><text x="96.4986%" y="543.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,095 samples, 13.85%)</title><rect x="82.8937%" y="661" width="13.8482%" height="15" fill="rgb(207,170,50)" fg:x="102329" fg:w="17095"/><text x="83.1437%" y="671.50">&lt;futures_lite::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,023 samples, 13.79%)</title><rect x="82.9521%" y="645" width="13.7898%" height="15" fill="rgb(232,133,24)" fg:x="102401" fg:w="17023"/><text x="83.2021%" y="655.50">&lt;core::future::from_g..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,520 samples, 1.23%)</title><rect x="95.5106%" y="629" width="1.2313%" height="15" fill="rgb(235,166,27)" fg:x="117904" fg:w="1520"/><text x="95.7606%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,464 samples, 1.19%)</title><rect x="95.5560%" y="613" width="1.1859%" height="15" fill="rgb(209,19,13)" fg:x="117960" fg:w="1464"/><text x="95.8060%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,464 samples, 1.19%)</title><rect x="95.5560%" y="597" width="1.1859%" height="15" fill="rgb(226,79,39)" fg:x="117960" fg:w="1464"/><text x="95.8060%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::get (16 samples, 0.01%)</title><rect x="96.7419%" y="661" width="0.0130%" height="15" fill="rgb(222,163,10)" fg:x="119424" fg:w="16"/><text x="96.9919%" y="671.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="96.7419%" y="645" width="0.0130%" height="15" fill="rgb(214,44,19)" fg:x="119424" fg:w="16"/><text x="96.9919%" y="655.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (16 samples, 0.01%)</title><rect x="96.7419%" y="629" width="0.0130%" height="15" fill="rgb(210,217,13)" fg:x="119424" fg:w="16"/><text x="96.9919%" y="639.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (16 samples, 0.01%)</title><rect x="96.7419%" y="613" width="0.0130%" height="15" fill="rgb(237,61,54)" fg:x="119424" fg:w="16"/><text x="96.9919%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (16 samples, 0.01%)</title><rect x="96.7419%" y="597" width="0.0130%" height="15" fill="rgb(226,184,24)" fg:x="119424" fg:w="16"/><text x="96.9919%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (295 samples, 0.24%)</title><rect x="96.7549%" y="661" width="0.2390%" height="15" fill="rgb(223,226,4)" fg:x="119440" fg:w="295"/><text x="97.0049%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (295 samples, 0.24%)</title><rect x="96.7549%" y="645" width="0.2390%" height="15" fill="rgb(210,26,41)" fg:x="119440" fg:w="295"/><text x="97.0049%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (292 samples, 0.24%)</title><rect x="96.7573%" y="629" width="0.2365%" height="15" fill="rgb(220,221,6)" fg:x="119443" fg:w="292"/><text x="97.0073%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (277 samples, 0.22%)</title><rect x="96.7694%" y="613" width="0.2244%" height="15" fill="rgb(225,89,49)" fg:x="119458" fg:w="277"/><text x="97.0194%" y="623.50"></text></g><g><title>__GI___pthread_mutex_trylock (277 samples, 0.22%)</title><rect x="96.7694%" y="597" width="0.2244%" height="15" fill="rgb(218,70,45)" fg:x="119458" fg:w="277"/><text x="97.0194%" y="607.50"></text></g><g><title>sn_rust_dealloc (35 samples, 0.03%)</title><rect x="97.0457%" y="485" width="0.0284%" height="15" fill="rgb(238,166,21)" fg:x="119799" fg:w="35"/><text x="97.2957%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45 samples, 0.04%)</title><rect x="97.0441%" y="549" width="0.0365%" height="15" fill="rgb(224,141,44)" fg:x="119797" fg:w="45"/><text x="97.2941%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.04%)</title><rect x="97.0441%" y="533" width="0.0365%" height="15" fill="rgb(230,12,49)" fg:x="119797" fg:w="45"/><text x="97.2941%" y="543.50"></text></g><g><title>__rg_dealloc (45 samples, 0.04%)</title><rect x="97.0441%" y="517" width="0.0365%" height="15" fill="rgb(212,174,12)" fg:x="119797" fg:w="45"/><text x="97.2941%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (45 samples, 0.04%)</title><rect x="97.0441%" y="501" width="0.0365%" height="15" fill="rgb(246,67,9)" fg:x="119797" fg:w="45"/><text x="97.2941%" y="511.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (48 samples, 0.04%)</title><rect x="97.0424%" y="581" width="0.0389%" height="15" fill="rgb(239,35,23)" fg:x="119795" fg:w="48"/><text x="97.2924%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (47 samples, 0.04%)</title><rect x="97.0432%" y="565" width="0.0381%" height="15" fill="rgb(211,167,0)" fg:x="119796" fg:w="47"/><text x="97.2932%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.04%)</title><rect x="97.0408%" y="629" width="0.0429%" height="15" fill="rgb(225,119,45)" fg:x="119793" fg:w="53"/><text x="97.2908%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (51 samples, 0.04%)</title><rect x="97.0424%" y="613" width="0.0413%" height="15" fill="rgb(210,162,6)" fg:x="119795" fg:w="51"/><text x="97.2924%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (51 samples, 0.04%)</title><rect x="97.0424%" y="597" width="0.0413%" height="15" fill="rgb(208,118,35)" fg:x="119795" fg:w="51"/><text x="97.2924%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (36 samples, 0.03%)</title><rect x="97.1080%" y="597" width="0.0292%" height="15" fill="rgb(239,4,53)" fg:x="119876" fg:w="36"/><text x="97.3580%" y="607.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (33 samples, 0.03%)</title><rect x="97.1105%" y="581" width="0.0267%" height="15" fill="rgb(213,130,21)" fg:x="119879" fg:w="33"/><text x="97.3605%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.03%)</title><rect x="97.1105%" y="565" width="0.0267%" height="15" fill="rgb(235,148,0)" fg:x="119879" fg:w="33"/><text x="97.3605%" y="575.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="97.1105%" y="549" width="0.0267%" height="15" fill="rgb(244,224,18)" fg:x="119879" fg:w="33"/><text x="97.3605%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (21 samples, 0.02%)</title><rect x="97.1453%" y="565" width="0.0170%" height="15" fill="rgb(211,214,4)" fg:x="119922" fg:w="21"/><text x="97.3953%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (32 samples, 0.03%)</title><rect x="97.1413%" y="597" width="0.0259%" height="15" fill="rgb(206,119,25)" fg:x="119917" fg:w="32"/><text x="97.3913%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (32 samples, 0.03%)</title><rect x="97.1413%" y="581" width="0.0259%" height="15" fill="rgb(243,93,47)" fg:x="119917" fg:w="32"/><text x="97.3913%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (64 samples, 0.05%)</title><rect x="97.2093%" y="389" width="0.0518%" height="15" fill="rgb(224,194,6)" fg:x="120001" fg:w="64"/><text x="97.4593%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (120 samples, 0.10%)</title><rect x="97.1672%" y="581" width="0.0972%" height="15" fill="rgb(243,229,6)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (120 samples, 0.10%)</title><rect x="97.1672%" y="565" width="0.0972%" height="15" fill="rgb(207,23,50)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="575.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (120 samples, 0.10%)</title><rect x="97.1672%" y="549" width="0.0972%" height="15" fill="rgb(253,192,32)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (120 samples, 0.10%)</title><rect x="97.1672%" y="533" width="0.0972%" height="15" fill="rgb(213,21,6)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (120 samples, 0.10%)</title><rect x="97.1672%" y="517" width="0.0972%" height="15" fill="rgb(243,151,13)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (120 samples, 0.10%)</title><rect x="97.1672%" y="501" width="0.0972%" height="15" fill="rgb(233,165,41)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (120 samples, 0.10%)</title><rect x="97.1672%" y="485" width="0.0972%" height="15" fill="rgb(246,176,45)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (120 samples, 0.10%)</title><rect x="97.1672%" y="469" width="0.0972%" height="15" fill="rgb(217,170,52)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="479.50"></text></g><g><title>alloc::alloc::alloc (120 samples, 0.10%)</title><rect x="97.1672%" y="453" width="0.0972%" height="15" fill="rgb(214,203,54)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="463.50"></text></g><g><title>__rg_alloc (120 samples, 0.10%)</title><rect x="97.1672%" y="437" width="0.0972%" height="15" fill="rgb(248,215,49)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (120 samples, 0.10%)</title><rect x="97.1672%" y="421" width="0.0972%" height="15" fill="rgb(208,46,10)" fg:x="119949" fg:w="120"/><text x="97.4172%" y="431.50"></text></g><g><title>sn_rust_alloc (119 samples, 0.10%)</title><rect x="97.1680%" y="405" width="0.0964%" height="15" fill="rgb(254,5,31)" fg:x="119950" fg:w="119"/><text x="97.4180%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (209 samples, 0.17%)</title><rect x="97.0967%" y="629" width="0.1693%" height="15" fill="rgb(222,104,33)" fg:x="119862" fg:w="209"/><text x="97.3467%" y="639.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (201 samples, 0.16%)</title><rect x="97.1032%" y="613" width="0.1628%" height="15" fill="rgb(248,49,16)" fg:x="119870" fg:w="201"/><text x="97.3532%" y="623.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (122 samples, 0.10%)</title><rect x="97.1672%" y="597" width="0.0988%" height="15" fill="rgb(232,198,41)" fg:x="119949" fg:w="122"/><text x="97.4172%" y="607.50"></text></g><g><title>concurrent_queue::full_fence (30 samples, 0.02%)</title><rect x="97.2911%" y="581" width="0.0243%" height="15" fill="rgb(214,125,3)" fg:x="120102" fg:w="30"/><text x="97.5411%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (29 samples, 0.02%)</title><rect x="97.2919%" y="565" width="0.0235%" height="15" fill="rgb(229,220,28)" fg:x="120103" fg:w="29"/><text x="97.5419%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (29 samples, 0.02%)</title><rect x="97.2919%" y="549" width="0.0235%" height="15" fill="rgb(222,64,37)" fg:x="120103" fg:w="29"/><text x="97.5419%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="97.2919%" y="533" width="0.0235%" height="15" fill="rgb(249,184,13)" fg:x="120103" fg:w="29"/><text x="97.5419%" y="543.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (83 samples, 0.07%)</title><rect x="97.2660%" y="629" width="0.0672%" height="15" fill="rgb(252,176,6)" fg:x="120071" fg:w="83"/><text x="97.5160%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (71 samples, 0.06%)</title><rect x="97.2757%" y="613" width="0.0575%" height="15" fill="rgb(228,153,7)" fg:x="120083" fg:w="71"/><text x="97.5257%" y="623.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (67 samples, 0.05%)</title><rect x="97.2790%" y="597" width="0.0543%" height="15" fill="rgb(242,193,5)" fg:x="120087" fg:w="67"/><text x="97.5290%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.02%)</title><rect x="97.3154%" y="581" width="0.0178%" height="15" fill="rgb(232,140,9)" fg:x="120132" fg:w="22"/><text x="97.5654%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="97.3154%" y="565" width="0.0178%" height="15" fill="rgb(213,222,16)" fg:x="120132" fg:w="22"/><text x="97.5654%" y="575.50"></text></g><g><title>core::mem::drop (152 samples, 0.12%)</title><rect x="97.3332%" y="629" width="0.1231%" height="15" fill="rgb(222,75,50)" fg:x="120154" fg:w="152"/><text x="97.5832%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (152 samples, 0.12%)</title><rect x="97.3332%" y="613" width="0.1231%" height="15" fill="rgb(205,180,2)" fg:x="120154" fg:w="152"/><text x="97.5832%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.12%)</title><rect x="97.3332%" y="597" width="0.1231%" height="15" fill="rgb(216,34,7)" fg:x="120154" fg:w="152"/><text x="97.5832%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (147 samples, 0.12%)</title><rect x="97.3373%" y="581" width="0.1191%" height="15" fill="rgb(253,16,32)" fg:x="120159" fg:w="147"/><text x="97.5873%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (139 samples, 0.11%)</title><rect x="97.3438%" y="565" width="0.1126%" height="15" fill="rgb(208,97,28)" fg:x="120167" fg:w="139"/><text x="97.5938%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (139 samples, 0.11%)</title><rect x="97.3438%" y="549" width="0.1126%" height="15" fill="rgb(225,92,11)" fg:x="120167" fg:w="139"/><text x="97.5938%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.01%)</title><rect x="97.4596%" y="629" width="0.0146%" height="15" fill="rgb(243,38,12)" fg:x="120310" fg:w="18"/><text x="97.7096%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (18 samples, 0.01%)</title><rect x="97.4596%" y="613" width="0.0146%" height="15" fill="rgb(208,139,16)" fg:x="120310" fg:w="18"/><text x="97.7096%" y="623.50"></text></g><g><title>std::time::Instant::duration_since (18 samples, 0.01%)</title><rect x="97.4596%" y="597" width="0.0146%" height="15" fill="rgb(227,24,9)" fg:x="120310" fg:w="18"/><text x="97.7096%" y="607.50"></text></g><g><title>std::time::Instant::checked_duration_since (18 samples, 0.01%)</title><rect x="97.4596%" y="581" width="0.0146%" height="15" fill="rgb(206,62,11)" fg:x="120310" fg:w="18"/><text x="97.7096%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (18 samples, 0.01%)</title><rect x="97.4596%" y="565" width="0.0146%" height="15" fill="rgb(228,134,27)" fg:x="120310" fg:w="18"/><text x="97.7096%" y="575.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (18 samples, 0.01%)</title><rect x="97.4596%" y="549" width="0.0146%" height="15" fill="rgb(205,55,33)" fg:x="120310" fg:w="18"/><text x="97.7096%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (70 samples, 0.06%)</title><rect x="97.4791%" y="629" width="0.0567%" height="15" fill="rgb(243,75,43)" fg:x="120334" fg:w="70"/><text x="97.7291%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (69 samples, 0.06%)</title><rect x="97.4799%" y="613" width="0.0559%" height="15" fill="rgb(223,27,42)" fg:x="120335" fg:w="69"/><text x="97.7299%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (69 samples, 0.06%)</title><rect x="97.4799%" y="597" width="0.0559%" height="15" fill="rgb(232,189,33)" fg:x="120335" fg:w="69"/><text x="97.7299%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (69 samples, 0.06%)</title><rect x="97.4799%" y="581" width="0.0559%" height="15" fill="rgb(210,9,39)" fg:x="120335" fg:w="69"/><text x="97.7299%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (728 samples, 0.59%)</title><rect x="97.0222%" y="645" width="0.5897%" height="15" fill="rgb(242,85,26)" fg:x="119770" fg:w="728"/><text x="97.2722%" y="655.50"></text></g><g><title>std::time::Instant::now (94 samples, 0.08%)</title><rect x="97.5358%" y="629" width="0.0761%" height="15" fill="rgb(248,44,4)" fg:x="120404" fg:w="94"/><text x="97.7858%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (94 samples, 0.08%)</title><rect x="97.5358%" y="613" width="0.0761%" height="15" fill="rgb(250,96,46)" fg:x="120404" fg:w="94"/><text x="97.7858%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::now (94 samples, 0.08%)</title><rect x="97.5358%" y="597" width="0.0761%" height="15" fill="rgb(229,116,26)" fg:x="120404" fg:w="94"/><text x="97.7858%" y="607.50"></text></g><g><title>__clock_gettime (93 samples, 0.08%)</title><rect x="97.5366%" y="581" width="0.0753%" height="15" fill="rgb(246,94,34)" fg:x="120405" fg:w="93"/><text x="97.7866%" y="591.50"></text></g><g><title>__vdso_clock_gettime (75 samples, 0.06%)</title><rect x="97.5512%" y="565" width="0.0608%" height="15" fill="rgb(251,73,21)" fg:x="120423" fg:w="75"/><text x="97.8012%" y="575.50"></text></g><g><title>[[vdso]] (69 samples, 0.06%)</title><rect x="97.5560%" y="549" width="0.0559%" height="15" fill="rgb(254,121,25)" fg:x="120429" fg:w="69"/><text x="97.8060%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (30 samples, 0.02%)</title><rect x="97.6135%" y="645" width="0.0243%" height="15" fill="rgb(215,161,49)" fg:x="120500" fg:w="30"/><text x="97.8635%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (30 samples, 0.02%)</title><rect x="97.6135%" y="629" width="0.0243%" height="15" fill="rgb(221,43,13)" fg:x="120500" fg:w="30"/><text x="97.8635%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (89 samples, 0.07%)</title><rect x="97.6783%" y="629" width="0.0721%" height="15" fill="rgb(249,5,37)" fg:x="120580" fg:w="89"/><text x="97.9283%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.07%)</title><rect x="97.6783%" y="613" width="0.0721%" height="15" fill="rgb(226,25,44)" fg:x="120580" fg:w="89"/><text x="97.9283%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (87 samples, 0.07%)</title><rect x="97.6800%" y="597" width="0.0705%" height="15" fill="rgb(238,189,16)" fg:x="120582" fg:w="87"/><text x="97.9300%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (86 samples, 0.07%)</title><rect x="97.6808%" y="581" width="0.0697%" height="15" fill="rgb(251,186,8)" fg:x="120583" fg:w="86"/><text x="97.9308%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (86 samples, 0.07%)</title><rect x="97.6808%" y="565" width="0.0697%" height="15" fill="rgb(254,34,31)" fg:x="120583" fg:w="86"/><text x="97.9308%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (19 samples, 0.02%)</title><rect x="97.7504%" y="629" width="0.0154%" height="15" fill="rgb(225,215,27)" fg:x="120669" fg:w="19"/><text x="98.0004%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.02%)</title><rect x="97.7504%" y="613" width="0.0154%" height="15" fill="rgb(221,192,48)" fg:x="120669" fg:w="19"/><text x="98.0004%" y="623.50"></text></g><g><title>__pthread_disable_asynccancel (14 samples, 0.01%)</title><rect x="97.8971%" y="597" width="0.0113%" height="15" fill="rgb(219,137,20)" fg:x="120850" fg:w="14"/><text x="98.1471%" y="607.50"></text></g><g><title>__libc_read (127 samples, 0.10%)</title><rect x="97.8582%" y="613" width="0.1029%" height="15" fill="rgb(219,84,11)" fg:x="120802" fg:w="127"/><text x="98.1082%" y="623.50"></text></g><g><title>__pthread_enable_asynccancel (65 samples, 0.05%)</title><rect x="97.9084%" y="597" width="0.0527%" height="15" fill="rgb(224,10,23)" fg:x="120864" fg:w="65"/><text x="98.1584%" y="607.50"></text></g><g><title>epoll_wait (170 samples, 0.14%)</title><rect x="97.9611%" y="613" width="0.1377%" height="15" fill="rgb(248,22,39)" fg:x="120929" fg:w="170"/><text x="98.2111%" y="623.50"></text></g><g><title>[libc-2.31.so] (50 samples, 0.04%)</title><rect x="98.0583%" y="597" width="0.0405%" height="15" fill="rgb(212,154,20)" fg:x="121049" fg:w="50"/><text x="98.3083%" y="607.50"></text></g><g><title>polling::epoll::Poller::modify (94 samples, 0.08%)</title><rect x="98.1044%" y="613" width="0.0761%" height="15" fill="rgb(236,199,50)" fg:x="121106" fg:w="94"/><text x="98.3544%" y="623.50"></text></g><g><title>polling::epoll::Poller::ctl (77 samples, 0.06%)</title><rect x="98.1182%" y="597" width="0.0624%" height="15" fill="rgb(211,9,17)" fg:x="121123" fg:w="77"/><text x="98.3682%" y="607.50"></text></g><g><title>epoll_ctl (70 samples, 0.06%)</title><rect x="98.1239%" y="581" width="0.0567%" height="15" fill="rgb(243,216,36)" fg:x="121130" fg:w="70"/><text x="98.3739%" y="591.50"></text></g><g><title>polling::epoll::Poller::wait (551 samples, 0.45%)</title><rect x="97.7658%" y="629" width="0.4463%" height="15" fill="rgb(250,2,10)" fg:x="120688" fg:w="551"/><text x="98.0158%" y="639.50"></text></g><g><title>syscall (37 samples, 0.03%)</title><rect x="98.1822%" y="613" width="0.0300%" height="15" fill="rgb(226,50,48)" fg:x="121202" fg:w="37"/><text x="98.4322%" y="623.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,538 samples, 1.25%)</title><rect x="96.9938%" y="661" width="1.2459%" height="15" fill="rgb(243,81,16)" fg:x="119735" fg:w="1538"/><text x="97.2438%" y="671.50"></text></g><g><title>polling::Poller::wait (741 samples, 0.60%)</title><rect x="97.6395%" y="645" width="0.6003%" height="15" fill="rgb(250,14,2)" fg:x="120532" fg:w="741"/><text x="97.8895%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (34 samples, 0.03%)</title><rect x="98.2122%" y="629" width="0.0275%" height="15" fill="rgb(233,135,29)" fg:x="121239" fg:w="34"/><text x="98.4622%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (32 samples, 0.03%)</title><rect x="98.2138%" y="613" width="0.0259%" height="15" fill="rgb(224,64,43)" fg:x="121241" fg:w="32"/><text x="98.4638%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (30 samples, 0.02%)</title><rect x="98.2154%" y="597" width="0.0243%" height="15" fill="rgb(238,84,13)" fg:x="121243" fg:w="30"/><text x="98.4654%" y="607.50"></text></g><g><title>__GI___pthread_mutex_trylock (30 samples, 0.02%)</title><rect x="98.2154%" y="581" width="0.0243%" height="15" fill="rgb(253,48,26)" fg:x="121243" fg:w="30"/><text x="98.4654%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (18 samples, 0.01%)</title><rect x="98.2397%" y="613" width="0.0146%" height="15" fill="rgb(205,223,31)" fg:x="121273" fg:w="18"/><text x="98.4897%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_store (18 samples, 0.01%)</title><rect x="98.2397%" y="597" width="0.0146%" height="15" fill="rgb(221,41,32)" fg:x="121273" fg:w="18"/><text x="98.4897%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="98.2397%" y="661" width="0.0227%" height="15" fill="rgb(213,158,31)" fg:x="121273" fg:w="28"/><text x="98.4897%" y="671.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="98.2397%" y="645" width="0.0227%" height="15" fill="rgb(245,126,43)" fg:x="121273" fg:w="28"/><text x="98.4897%" y="655.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (28 samples, 0.02%)</title><rect x="98.2397%" y="629" width="0.0227%" height="15" fill="rgb(227,7,22)" fg:x="121273" fg:w="28"/><text x="98.4897%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (40 samples, 0.03%)</title><rect x="98.2624%" y="661" width="0.0324%" height="15" fill="rgb(252,90,44)" fg:x="121301" fg:w="40"/><text x="98.5124%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (40 samples, 0.03%)</title><rect x="98.2624%" y="645" width="0.0324%" height="15" fill="rgb(253,91,0)" fg:x="121301" fg:w="40"/><text x="98.5124%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="98.2624%" y="629" width="0.0324%" height="15" fill="rgb(252,175,49)" fg:x="121301" fg:w="40"/><text x="98.5124%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="98.2640%" y="613" width="0.0308%" height="15" fill="rgb(246,150,1)" fg:x="121303" fg:w="38"/><text x="98.5140%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (37 samples, 0.03%)</title><rect x="98.2648%" y="597" width="0.0300%" height="15" fill="rgb(241,192,25)" fg:x="121304" fg:w="37"/><text x="98.5148%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (36 samples, 0.03%)</title><rect x="98.2656%" y="581" width="0.0292%" height="15" fill="rgb(239,187,11)" fg:x="121305" fg:w="36"/><text x="98.5156%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (21 samples, 0.02%)</title><rect x="98.2972%" y="661" width="0.0170%" height="15" fill="rgb(218,202,51)" fg:x="121344" fg:w="21"/><text x="98.5472%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_store (21 samples, 0.02%)</title><rect x="98.2972%" y="645" width="0.0170%" height="15" fill="rgb(225,176,8)" fg:x="121344" fg:w="21"/><text x="98.5472%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (97 samples, 0.08%)</title><rect x="98.3385%" y="629" width="0.0786%" height="15" fill="rgb(219,122,41)" fg:x="121395" fg:w="97"/><text x="98.5885%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (122 samples, 0.10%)</title><rect x="98.4212%" y="629" width="0.0988%" height="15" fill="rgb(248,140,20)" fg:x="121497" fg:w="122"/><text x="98.6712%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (122 samples, 0.10%)</title><rect x="98.4212%" y="613" width="0.0988%" height="15" fill="rgb(245,41,37)" fg:x="121497" fg:w="122"/><text x="98.6712%" y="623.50"></text></g><g><title>std::sync::poison::Flag::get (72 samples, 0.06%)</title><rect x="98.5200%" y="613" width="0.0583%" height="15" fill="rgb(235,82,39)" fg:x="121619" fg:w="72"/><text x="98.7700%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (72 samples, 0.06%)</title><rect x="98.5200%" y="597" width="0.0583%" height="15" fill="rgb(230,108,42)" fg:x="121619" fg:w="72"/><text x="98.7700%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (71 samples, 0.06%)</title><rect x="98.5208%" y="581" width="0.0575%" height="15" fill="rgb(215,150,50)" fg:x="121620" fg:w="71"/><text x="98.7708%" y="591.50"></text></g><g><title>__pthread_disable_asynccancel (77 samples, 0.06%)</title><rect x="99.1122%" y="565" width="0.0624%" height="15" fill="rgb(233,212,5)" fg:x="122350" fg:w="77"/><text x="99.3622%" y="575.50"></text></g><g><title>__pthread_enable_asynccancel (37 samples, 0.03%)</title><rect x="99.1745%" y="565" width="0.0300%" height="15" fill="rgb(245,80,22)" fg:x="122427" fg:w="37"/><text x="99.4245%" y="575.50"></text></g><g><title>__pthread_mutex_cond_lock (78 samples, 0.06%)</title><rect x="99.2045%" y="565" width="0.0632%" height="15" fill="rgb(238,129,16)" fg:x="122464" fg:w="78"/><text x="99.4545%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (873 samples, 0.71%)</title><rect x="98.5783%" y="597" width="0.7072%" height="15" fill="rgb(240,19,0)" fg:x="121691" fg:w="873"/><text x="98.8283%" y="607.50"></text></g><g><title>__pthread_cond_wait (873 samples, 0.71%)</title><rect x="98.5783%" y="581" width="0.7072%" height="15" fill="rgb(232,42,35)" fg:x="121691" fg:w="873"/><text x="98.8283%" y="591.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (22 samples, 0.02%)</title><rect x="99.2677%" y="565" width="0.0178%" height="15" fill="rgb(223,130,24)" fg:x="122542" fg:w="22"/><text x="99.5177%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (20 samples, 0.02%)</title><rect x="99.2863%" y="581" width="0.0162%" height="15" fill="rgb(237,16,22)" fg:x="122565" fg:w="20"/><text x="99.5363%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="99.2863%" y="565" width="0.0162%" height="15" fill="rgb(248,192,20)" fg:x="122565" fg:w="20"/><text x="99.5363%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (967 samples, 0.78%)</title><rect x="98.5200%" y="629" width="0.7833%" height="15" fill="rgb(233,167,2)" fg:x="121619" fg:w="967"/><text x="98.7700%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (895 samples, 0.73%)</title><rect x="98.5783%" y="613" width="0.7250%" height="15" fill="rgb(252,71,44)" fg:x="121691" fg:w="895"/><text x="98.8283%" y="623.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (22 samples, 0.02%)</title><rect x="99.2855%" y="597" width="0.0178%" height="15" fill="rgb(238,37,47)" fg:x="122564" fg:w="22"/><text x="99.5355%" y="607.50"></text></g><g><title>parking::Parker::park (1,275 samples, 1.03%)</title><rect x="98.3215%" y="661" width="1.0328%" height="15" fill="rgb(214,202,54)" fg:x="121374" fg:w="1275"/><text x="98.5715%" y="671.50"></text></g><g><title>parking::Inner::park (1,265 samples, 1.02%)</title><rect x="98.3296%" y="645" width="1.0247%" height="15" fill="rgb(254,165,40)" fg:x="121384" fg:w="1265"/><text x="98.5796%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (63 samples, 0.05%)</title><rect x="99.3033%" y="629" width="0.0510%" height="15" fill="rgb(246,173,38)" fg:x="122586" fg:w="63"/><text x="99.5533%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.05%)</title><rect x="99.3041%" y="613" width="0.0502%" height="15" fill="rgb(215,3,27)" fg:x="122587" fg:w="62"/><text x="99.5541%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (62 samples, 0.05%)</title><rect x="99.3041%" y="597" width="0.0502%" height="15" fill="rgb(239,169,51)" fg:x="122587" fg:w="62"/><text x="99.5541%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (62 samples, 0.05%)</title><rect x="99.3041%" y="581" width="0.0502%" height="15" fill="rgb(212,5,25)" fg:x="122587" fg:w="62"/><text x="99.5541%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (255 samples, 0.21%)</title><rect x="99.3544%" y="661" width="0.2066%" height="15" fill="rgb(243,45,17)" fg:x="122649" fg:w="255"/><text x="99.6044%" y="671.50"></text></g><g><title>parking::Inner::park (211 samples, 0.17%)</title><rect x="99.3900%" y="645" width="0.1709%" height="15" fill="rgb(242,97,9)" fg:x="122693" fg:w="211"/><text x="99.6400%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (196 samples, 0.16%)</title><rect x="99.4022%" y="629" width="0.1588%" height="15" fill="rgb(228,71,31)" fg:x="122708" fg:w="196"/><text x="99.6522%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (196 samples, 0.16%)</title><rect x="99.4022%" y="613" width="0.1588%" height="15" fill="rgb(252,184,16)" fg:x="122708" fg:w="196"/><text x="99.6522%" y="623.50"></text></g><g><title>std::panic::catch_unwind (20,728 samples, 16.79%)</title><rect x="82.8071%" y="949" width="16.7911%" height="15" fill="rgb(236,169,46)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,728 samples, 16.79%)</title><rect x="82.8071%" y="933" width="16.7911%" height="15" fill="rgb(207,17,47)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,728 samples, 16.79%)</title><rect x="82.8071%" y="917" width="16.7911%" height="15" fill="rgb(206,201,28)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="927.50">std::panicking::try::do_ca..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,728 samples, 16.79%)</title><rect x="82.8071%" y="901" width="16.7911%" height="15" fill="rgb(224,184,23)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="911.50">&lt;core::panic::unwind_safe:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,728 samples, 16.79%)</title><rect x="82.8071%" y="885" width="16.7911%" height="15" fill="rgb(208,139,48)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="895.50">std::thread::Builder::spaw..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,728 samples, 16.79%)</title><rect x="82.8071%" y="869" width="16.7911%" height="15" fill="rgb(208,130,10)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="879.50">std::sys_common::backtrace..</text></g><g><title>core::ops::function::FnOnce::call_once (20,728 samples, 16.79%)</title><rect x="82.8071%" y="853" width="16.7911%" height="15" fill="rgb(211,213,45)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="863.50">core::ops::function::FnOnc..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,728 samples, 16.79%)</title><rect x="82.8071%" y="837" width="16.7911%" height="15" fill="rgb(235,100,30)" fg:x="102222" fg:w="20728"/><text x="83.0571%" y="847.50">async_global_executor::thr..</text></g><g><title>std::panic::catch_unwind (20,706 samples, 16.77%)</title><rect x="82.8249%" y="821" width="16.7733%" height="15" fill="rgb(206,144,31)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,706 samples, 16.77%)</title><rect x="82.8249%" y="805" width="16.7733%" height="15" fill="rgb(224,200,26)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,706 samples, 16.77%)</title><rect x="82.8249%" y="789" width="16.7733%" height="15" fill="rgb(247,104,53)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="799.50">std::panicking::try::do_ca..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (20,706 samples, 16.77%)</title><rect x="82.8249%" y="773" width="16.7733%" height="15" fill="rgb(220,14,17)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="783.50">async_global_executor::thr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,706 samples, 16.77%)</title><rect x="82.8249%" y="757" width="16.7733%" height="15" fill="rgb(230,140,40)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="767.50">std::thread::local::LocalK..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,706 samples, 16.77%)</title><rect x="82.8249%" y="741" width="16.7733%" height="15" fill="rgb(229,2,41)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="751.50">std::thread::local::LocalK..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (20,706 samples, 16.77%)</title><rect x="82.8249%" y="725" width="16.7733%" height="15" fill="rgb(232,89,16)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="735.50">async_global_executor::thr..</text></g><g><title>async_global_executor::reactor::block_on (20,706 samples, 16.77%)</title><rect x="82.8249%" y="709" width="16.7733%" height="15" fill="rgb(247,59,52)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="719.50">async_global_executor::rea..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,706 samples, 16.77%)</title><rect x="82.8249%" y="693" width="16.7733%" height="15" fill="rgb(226,110,21)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="703.50">async_global_executor::rea..</text></g><g><title>async_io::driver::block_on (20,706 samples, 16.77%)</title><rect x="82.8249%" y="677" width="16.7733%" height="15" fill="rgb(224,176,43)" fg:x="102244" fg:w="20706"/><text x="83.0749%" y="687.50">async_io::driver::block_on</text></g><g><title>std::time::Instant::now (45 samples, 0.04%)</title><rect x="99.5618%" y="661" width="0.0365%" height="15" fill="rgb(221,73,6)" fg:x="122905" fg:w="45"/><text x="99.8118%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (45 samples, 0.04%)</title><rect x="99.5618%" y="645" width="0.0365%" height="15" fill="rgb(232,78,19)" fg:x="122905" fg:w="45"/><text x="99.8118%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::now (45 samples, 0.04%)</title><rect x="99.5618%" y="629" width="0.0365%" height="15" fill="rgb(233,112,48)" fg:x="122905" fg:w="45"/><text x="99.8118%" y="639.50"></text></g><g><title>__clock_gettime (36 samples, 0.03%)</title><rect x="99.5690%" y="613" width="0.0292%" height="15" fill="rgb(243,131,47)" fg:x="122914" fg:w="36"/><text x="99.8190%" y="623.50"></text></g><g><title>__vdso_clock_gettime (26 samples, 0.02%)</title><rect x="99.5771%" y="597" width="0.0211%" height="15" fill="rgb(226,51,1)" fg:x="122924" fg:w="26"/><text x="99.8271%" y="607.50"></text></g><g><title>[[vdso]] (23 samples, 0.02%)</title><rect x="99.5796%" y="581" width="0.0186%" height="15" fill="rgb(247,58,7)" fg:x="122927" fg:w="23"/><text x="99.8296%" y="591.50"></text></g><g><title>clone (20,746 samples, 16.81%)</title><rect x="82.7949%" y="1061" width="16.8057%" height="15" fill="rgb(209,7,32)" fg:x="102207" fg:w="20746"/><text x="83.0449%" y="1071.50">clone</text></g><g><title>start_thread (20,732 samples, 16.79%)</title><rect x="82.8062%" y="1045" width="16.7944%" height="15" fill="rgb(209,39,41)" fg:x="102221" fg:w="20732"/><text x="83.0562%" y="1055.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,731 samples, 16.79%)</title><rect x="82.8071%" y="1029" width="16.7936%" height="15" fill="rgb(226,182,46)" fg:x="102222" fg:w="20731"/><text x="83.0571%" y="1039.50">std::sys::unix::thread::Th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,731 samples, 16.79%)</title><rect x="82.8071%" y="1013" width="16.7936%" height="15" fill="rgb(230,219,10)" fg:x="102222" fg:w="20731"/><text x="83.0571%" y="1023.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,731 samples, 16.79%)</title><rect x="82.8071%" y="997" width="16.7936%" height="15" fill="rgb(227,175,30)" fg:x="102222" fg:w="20731"/><text x="83.0571%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,731 samples, 16.79%)</title><rect x="82.8071%" y="981" width="16.7936%" height="15" fill="rgb(217,2,50)" fg:x="102222" fg:w="20731"/><text x="83.0571%" y="991.50">core::ops::function::FnOnc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,731 samples, 16.79%)</title><rect x="82.8071%" y="965" width="16.7936%" height="15" fill="rgb(229,160,0)" fg:x="102222" fg:w="20731"/><text x="83.0571%" y="975.50">std::thread::Builder::spaw..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (19 samples, 0.02%)</title><rect x="99.6014%" y="1061" width="0.0154%" height="15" fill="rgb(207,78,37)" fg:x="122954" fg:w="19"/><text x="99.8514%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (15 samples, 0.01%)</title><rect x="99.6168%" y="1061" width="0.0122%" height="15" fill="rgb(225,57,0)" fg:x="122973" fg:w="15"/><text x="99.8668%" y="1071.50"></text></g><g><title>event_listener::Event::notify (16 samples, 0.01%)</title><rect x="99.6444%" y="1061" width="0.0130%" height="15" fill="rgb(232,154,2)" fg:x="123007" fg:w="16"/><text x="99.8944%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (22 samples, 0.02%)</title><rect x="99.6622%" y="1061" width="0.0178%" height="15" fill="rgb(241,212,25)" fg:x="123029" fg:w="22"/><text x="99.9122%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="99.6800%" y="1045" width="0.0105%" height="15" fill="rgb(226,69,20)" fg:x="123051" fg:w="13"/><text x="99.9300%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (35 samples, 0.03%)</title><rect x="99.6800%" y="1061" width="0.0284%" height="15" fill="rgb(247,184,54)" fg:x="123051" fg:w="35"/><text x="99.9300%" y="1071.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (22 samples, 0.02%)</title><rect x="99.6906%" y="1045" width="0.0178%" height="15" fill="rgb(210,145,0)" fg:x="123064" fg:w="22"/><text x="99.9406%" y="1055.50"></text></g><g><title>async-std/runti (123,034 samples, 99.67%)</title><rect x="0.0470%" y="1077" width="99.6663%" height="15" fill="rgb(253,82,12)" fg:x="58" fg:w="123034"/><text x="0.2970%" y="1087.50">async-std/runti</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.03%)</title><rect x="99.7270%" y="821" width="0.0316%" height="15" fill="rgb(245,42,11)" fg:x="123109" fg:w="39"/><text x="99.9770%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.03%)</title><rect x="99.7270%" y="805" width="0.0316%" height="15" fill="rgb(219,147,32)" fg:x="123109" fg:w="39"/><text x="99.9770%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (39 samples, 0.03%)</title><rect x="99.7270%" y="789" width="0.0316%" height="15" fill="rgb(246,12,7)" fg:x="123109" fg:w="39"/><text x="99.9770%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (38 samples, 0.03%)</title><rect x="99.7278%" y="773" width="0.0308%" height="15" fill="rgb(243,50,9)" fg:x="123110" fg:w="38"/><text x="99.9778%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.03%)</title><rect x="99.7278%" y="757" width="0.0308%" height="15" fill="rgb(219,149,6)" fg:x="123110" fg:w="38"/><text x="99.9778%" y="767.50"></text></g><g><title>__lll_lock_wait (36 samples, 0.03%)</title><rect x="99.7294%" y="741" width="0.0292%" height="15" fill="rgb(241,51,42)" fg:x="123112" fg:w="36"/><text x="99.9794%" y="751.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43 samples, 0.03%)</title><rect x="99.7270%" y="837" width="0.0348%" height="15" fill="rgb(226,128,27)" fg:x="123109" fg:w="43"/><text x="99.9770%" y="847.50"></text></g><g><title>std::panic::catch_unwind (44 samples, 0.04%)</title><rect x="99.7270%" y="949" width="0.0356%" height="15" fill="rgb(244,144,4)" fg:x="123109" fg:w="44"/><text x="99.9770%" y="959.50"></text></g><g><title>std::panicking::try (44 samples, 0.04%)</title><rect x="99.7270%" y="933" width="0.0356%" height="15" fill="rgb(221,4,13)" fg:x="123109" fg:w="44"/><text x="99.9770%" y="943.50"></text></g><g><title>std::panicking::try::do_call (44 samples, 0.04%)</title><rect x="99.7270%" y="917" width="0.0356%" height="15" fill="rgb(208,170,28)" fg:x="123109" fg:w="44"/><text x="99.9770%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44 samples, 0.04%)</title><rect x="99.7270%" y="901" width="0.0356%" height="15" fill="rgb(226,131,13)" fg:x="123109" fg:w="44"/><text x="99.9770%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (44 samples, 0.04%)</title><rect x="99.7270%" y="885" width="0.0356%" height="15" fill="rgb(215,72,41)" fg:x="123109" fg:w="44"/><text x="99.9770%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (44 samples, 0.04%)</title><rect x="99.7270%" y="869" width="0.0356%" height="15" fill="rgb(243,108,20)" fg:x="123109" fg:w="44"/><text x="99.9770%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (44 samples, 0.04%)</title><rect x="99.7270%" y="853" width="0.0356%" height="15" fill="rgb(230,189,17)" fg:x="123109" fg:w="44"/><text x="99.9770%" y="863.50"></text></g><g><title>tokio-runtime-w (52 samples, 0.04%)</title><rect x="99.7221%" y="1077" width="0.0421%" height="15" fill="rgb(220,50,17)" fg:x="123103" fg:w="52"/><text x="99.9721%" y="1087.50"></text></g><g><title>clone (46 samples, 0.04%)</title><rect x="99.7270%" y="1061" width="0.0373%" height="15" fill="rgb(248,152,48)" fg:x="123109" fg:w="46"/><text x="99.9770%" y="1071.50"></text></g><g><title>start_thread (46 samples, 0.04%)</title><rect x="99.7270%" y="1045" width="0.0373%" height="15" fill="rgb(244,91,11)" fg:x="123109" fg:w="46"/><text x="99.9770%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (46 samples, 0.04%)</title><rect x="99.7270%" y="1029" width="0.0373%" height="15" fill="rgb(220,157,5)" fg:x="123109" fg:w="46"/><text x="99.9770%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.04%)</title><rect x="99.7270%" y="1013" width="0.0373%" height="15" fill="rgb(253,137,8)" fg:x="123109" fg:w="46"/><text x="99.9770%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.04%)</title><rect x="99.7270%" y="997" width="0.0373%" height="15" fill="rgb(217,137,51)" fg:x="123109" fg:w="46"/><text x="99.9770%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (46 samples, 0.04%)</title><rect x="99.7270%" y="981" width="0.0373%" height="15" fill="rgb(218,209,53)" fg:x="123109" fg:w="46"/><text x="99.9770%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (46 samples, 0.04%)</title><rect x="99.7270%" y="965" width="0.0373%" height="15" fill="rgb(249,137,25)" fg:x="123109" fg:w="46"/><text x="99.9770%" y="975.50"></text></g><g><title>[ld-2.31.so] (14 samples, 0.01%)</title><rect x="99.7667%" y="1061" width="0.0113%" height="15" fill="rgb(239,155,26)" fg:x="123158" fg:w="14"/><text x="100.0167%" y="1071.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="99.7780%" y="1061" width="0.0122%" height="15" fill="rgb(227,85,46)" fg:x="123172" fg:w="15"/><text x="100.0280%" y="1071.50"></text></g><g><title>all (123,446 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(251,107,43)" fg:x="0" fg:w="123446"/><text x="0.2500%" y="1103.50"></text></g><g><title>tremor-pdk-hash (291 samples, 0.24%)</title><rect x="99.7643%" y="1077" width="0.2357%" height="15" fill="rgb(234,170,33)" fg:x="123155" fg:w="291"/><text x="100.0143%" y="1087.50"></text></g><g><title>clone (259 samples, 0.21%)</title><rect x="99.7902%" y="1061" width="0.2098%" height="15" fill="rgb(206,29,35)" fg:x="123187" fg:w="259"/><text x="100.0402%" y="1071.50"></text></g><g><title>start_thread (13 samples, 0.01%)</title><rect x="99.9895%" y="1045" width="0.0105%" height="15" fill="rgb(227,138,25)" fg:x="123433" fg:w="13"/><text x="100.2395%" y="1055.50"></text></g></svg></svg>