<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1157.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="144387"><g><title>std::sys::unix::futex::futex_wait (52 samples, 0.04%)</title><rect x="0.0076%" y="757" width="0.0360%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="52"/><text x="0.2576%" y="767.50"></text></g><g><title>syscall (47 samples, 0.03%)</title><rect x="0.0111%" y="741" width="0.0326%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="47"/><text x="0.2611%" y="751.50"></text></g><g><title>async-io (67 samples, 0.05%)</title><rect x="0.0007%" y="1109" width="0.0464%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="67"/><text x="0.2507%" y="1119.50"></text></g><g><title>clone (65 samples, 0.05%)</title><rect x="0.0021%" y="1093" width="0.0450%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="65"/><text x="0.2521%" y="1103.50"></text></g><g><title>start_thread (65 samples, 0.05%)</title><rect x="0.0021%" y="1077" width="0.0450%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="65"/><text x="0.2521%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (65 samples, 0.05%)</title><rect x="0.0021%" y="1061" width="0.0450%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="65"/><text x="0.2521%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (65 samples, 0.05%)</title><rect x="0.0021%" y="1045" width="0.0450%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="65"/><text x="0.2521%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (65 samples, 0.05%)</title><rect x="0.0021%" y="1029" width="0.0450%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="65"/><text x="0.2521%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (65 samples, 0.05%)</title><rect x="0.0021%" y="1013" width="0.0450%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="65"/><text x="0.2521%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (65 samples, 0.05%)</title><rect x="0.0021%" y="997" width="0.0450%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="65"/><text x="0.2521%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (65 samples, 0.05%)</title><rect x="0.0021%" y="981" width="0.0450%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="65"/><text x="0.2521%" y="991.50"></text></g><g><title>std::panicking::try (65 samples, 0.05%)</title><rect x="0.0021%" y="965" width="0.0450%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="65"/><text x="0.2521%" y="975.50"></text></g><g><title>std::panicking::try::do_call (65 samples, 0.05%)</title><rect x="0.0021%" y="949" width="0.0450%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="65"/><text x="0.2521%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (65 samples, 0.05%)</title><rect x="0.0021%" y="933" width="0.0450%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="65"/><text x="0.2521%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (65 samples, 0.05%)</title><rect x="0.0021%" y="917" width="0.0450%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="65"/><text x="0.2521%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (65 samples, 0.05%)</title><rect x="0.0021%" y="901" width="0.0450%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="65"/><text x="0.2521%" y="911.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (65 samples, 0.05%)</title><rect x="0.0021%" y="885" width="0.0450%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="65"/><text x="0.2521%" y="895.50"></text></g><g><title>async_io::driver::main_loop (65 samples, 0.05%)</title><rect x="0.0021%" y="869" width="0.0450%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="65"/><text x="0.2521%" y="879.50"></text></g><g><title>parking::Parker::park_timeout (57 samples, 0.04%)</title><rect x="0.0076%" y="853" width="0.0395%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="57"/><text x="0.2576%" y="863.50"></text></g><g><title>parking::Inner::park (57 samples, 0.04%)</title><rect x="0.0076%" y="837" width="0.0395%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="57"/><text x="0.2576%" y="847.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (57 samples, 0.04%)</title><rect x="0.0076%" y="821" width="0.0395%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="57"/><text x="0.2576%" y="831.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (57 samples, 0.04%)</title><rect x="0.0076%" y="805" width="0.0395%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="57"/><text x="0.2576%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (57 samples, 0.04%)</title><rect x="0.0076%" y="789" width="0.0395%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="57"/><text x="0.2576%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (57 samples, 0.04%)</title><rect x="0.0076%" y="773" width="0.0395%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="57"/><text x="0.2576%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.06%)</title><rect x="0.0603%" y="1093" width="0.0637%" height="15" fill="rgb(241,131,45)" fg:x="87" fg:w="92"/><text x="0.3103%" y="1103.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="0.1337%" y="1093" width="0.0194%" height="15" fill="rgb(249,31,29)" fg:x="193" fg:w="28"/><text x="0.3837%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (21 samples, 0.01%)</title><rect x="0.1745%" y="1061" width="0.0145%" height="15" fill="rgb(225,111,53)" fg:x="252" fg:w="21"/><text x="0.4245%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="0.1960%" y="1013" width="0.0104%" height="15" fill="rgb(238,160,17)" fg:x="283" fg:w="15"/><text x="0.4460%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (85 samples, 0.06%)</title><rect x="0.1607%" y="1077" width="0.0589%" height="15" fill="rgb(214,148,48)" fg:x="232" fg:w="85"/><text x="0.4107%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (44 samples, 0.03%)</title><rect x="0.1891%" y="1061" width="0.0305%" height="15" fill="rgb(232,36,49)" fg:x="273" fg:w="44"/><text x="0.4391%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (44 samples, 0.03%)</title><rect x="0.1891%" y="1045" width="0.0305%" height="15" fill="rgb(209,103,24)" fg:x="273" fg:w="44"/><text x="0.4391%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (44 samples, 0.03%)</title><rect x="0.1891%" y="1029" width="0.0305%" height="15" fill="rgb(229,88,8)" fg:x="273" fg:w="44"/><text x="0.4391%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (19 samples, 0.01%)</title><rect x="0.2064%" y="1013" width="0.0132%" height="15" fill="rgb(213,181,19)" fg:x="298" fg:w="19"/><text x="0.4564%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="0.2064%" y="997" width="0.0132%" height="15" fill="rgb(254,191,54)" fg:x="298" fg:w="19"/><text x="0.4564%" y="1007.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="0.2064%" y="981" width="0.0132%" height="15" fill="rgb(241,83,37)" fg:x="298" fg:w="19"/><text x="0.4564%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (70 samples, 0.05%)</title><rect x="0.2195%" y="1077" width="0.0485%" height="15" fill="rgb(233,36,39)" fg:x="317" fg:w="70"/><text x="0.4695%" y="1087.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="0.2729%" y="1061" width="0.0152%" height="15" fill="rgb(226,3,54)" fg:x="394" fg:w="22"/><text x="0.5229%" y="1071.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="0.2729%" y="1045" width="0.0152%" height="15" fill="rgb(245,192,40)" fg:x="394" fg:w="22"/><text x="0.5229%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="0.2729%" y="1029" width="0.0152%" height="15" fill="rgb(238,167,29)" fg:x="394" fg:w="22"/><text x="0.5229%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (22 samples, 0.02%)</title><rect x="0.2729%" y="1013" width="0.0152%" height="15" fill="rgb(232,182,51)" fg:x="394" fg:w="22"/><text x="0.5229%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (36 samples, 0.02%)</title><rect x="0.2680%" y="1077" width="0.0249%" height="15" fill="rgb(231,60,39)" fg:x="387" fg:w="36"/><text x="0.5180%" y="1087.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="0.2992%" y="1077" width="0.0132%" height="15" fill="rgb(208,69,12)" fg:x="432" fg:w="19"/><text x="0.5492%" y="1087.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (120 samples, 0.08%)</title><rect x="0.3200%" y="1077" width="0.0831%" height="15" fill="rgb(235,93,37)" fg:x="462" fg:w="120"/><text x="0.5700%" y="1087.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (21 samples, 0.01%)</title><rect x="0.3885%" y="1061" width="0.0145%" height="15" fill="rgb(213,116,39)" fg:x="561" fg:w="21"/><text x="0.6385%" y="1071.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="0.4031%" y="1077" width="0.0284%" height="15" fill="rgb(222,207,29)" fg:x="582" fg:w="41"/><text x="0.6531%" y="1087.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (15 samples, 0.01%)</title><rect x="0.4509%" y="1061" width="0.0104%" height="15" fill="rgb(206,96,30)" fg:x="651" fg:w="15"/><text x="0.7009%" y="1071.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.04%)</title><rect x="0.4315%" y="1077" width="0.0409%" height="15" fill="rgb(218,138,4)" fg:x="623" fg:w="59"/><text x="0.6815%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (16 samples, 0.01%)</title><rect x="0.4613%" y="1061" width="0.0111%" height="15" fill="rgb(250,191,14)" fg:x="666" fg:w="16"/><text x="0.7113%" y="1071.50"></text></g><g><title>core::mem::replace (16 samples, 0.01%)</title><rect x="0.4613%" y="1045" width="0.0111%" height="15" fill="rgb(239,60,40)" fg:x="666" fg:w="16"/><text x="0.7113%" y="1055.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="0.4613%" y="1029" width="0.0111%" height="15" fill="rgb(206,27,48)" fg:x="666" fg:w="16"/><text x="0.7113%" y="1039.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (31 samples, 0.02%)</title><rect x="0.6233%" y="1061" width="0.0215%" height="15" fill="rgb(225,35,8)" fg:x="900" fg:w="31"/><text x="0.8733%" y="1071.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="0.6448%" y="1045" width="0.0159%" height="15" fill="rgb(250,213,24)" fg:x="931" fg:w="23"/><text x="0.8948%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="0.6476%" y="1029" width="0.0132%" height="15" fill="rgb(247,123,22)" fg:x="935" fg:w="19"/><text x="0.8976%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (19 samples, 0.01%)</title><rect x="0.6476%" y="1013" width="0.0132%" height="15" fill="rgb(231,138,38)" fg:x="935" fg:w="19"/><text x="0.8976%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (19 samples, 0.01%)</title><rect x="0.6476%" y="997" width="0.0132%" height="15" fill="rgb(231,145,46)" fg:x="935" fg:w="19"/><text x="0.8976%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (19 samples, 0.01%)</title><rect x="0.6476%" y="981" width="0.0132%" height="15" fill="rgb(251,118,11)" fg:x="935" fg:w="19"/><text x="0.8976%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.01%)</title><rect x="0.6476%" y="965" width="0.0132%" height="15" fill="rgb(217,147,25)" fg:x="935" fg:w="19"/><text x="0.8976%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.01%)</title><rect x="0.6476%" y="949" width="0.0132%" height="15" fill="rgb(247,81,37)" fg:x="935" fg:w="19"/><text x="0.8976%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.01%)</title><rect x="0.6476%" y="933" width="0.0132%" height="15" fill="rgb(209,12,38)" fg:x="935" fg:w="19"/><text x="0.8976%" y="943.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (37 samples, 0.03%)</title><rect x="0.6448%" y="1061" width="0.0256%" height="15" fill="rgb(227,1,9)" fg:x="931" fg:w="37"/><text x="0.8948%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (18 samples, 0.01%)</title><rect x="0.6794%" y="1029" width="0.0125%" height="15" fill="rgb(248,47,43)" fg:x="981" fg:w="18"/><text x="0.9294%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (18 samples, 0.01%)</title><rect x="0.6794%" y="1013" width="0.0125%" height="15" fill="rgb(221,10,30)" fg:x="981" fg:w="18"/><text x="0.9294%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="0.6794%" y="997" width="0.0125%" height="15" fill="rgb(210,229,1)" fg:x="981" fg:w="18"/><text x="0.9294%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (23 samples, 0.02%)</title><rect x="0.6794%" y="1061" width="0.0159%" height="15" fill="rgb(222,148,37)" fg:x="981" fg:w="23"/><text x="0.9294%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (23 samples, 0.02%)</title><rect x="0.6794%" y="1045" width="0.0159%" height="15" fill="rgb(234,67,33)" fg:x="981" fg:w="23"/><text x="0.9294%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (35 samples, 0.02%)</title><rect x="0.6954%" y="1061" width="0.0242%" height="15" fill="rgb(247,98,35)" fg:x="1004" fg:w="35"/><text x="0.9454%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (41 samples, 0.03%)</title><rect x="0.7196%" y="1061" width="0.0284%" height="15" fill="rgb(247,138,52)" fg:x="1039" fg:w="41"/><text x="0.9696%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (17 samples, 0.01%)</title><rect x="0.7542%" y="1061" width="0.0118%" height="15" fill="rgb(213,79,30)" fg:x="1089" fg:w="17"/><text x="1.0042%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (472 samples, 0.33%)</title><rect x="0.4730%" y="1077" width="0.3269%" height="15" fill="rgb(246,177,23)" fg:x="683" fg:w="472"/><text x="0.7230%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (49 samples, 0.03%)</title><rect x="0.7660%" y="1061" width="0.0339%" height="15" fill="rgb(230,62,27)" fg:x="1106" fg:w="49"/><text x="1.0160%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (43 samples, 0.03%)</title><rect x="0.7999%" y="1077" width="0.0298%" height="15" fill="rgb(216,154,8)" fg:x="1155" fg:w="43"/><text x="1.0499%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (37 samples, 0.03%)</title><rect x="0.8491%" y="1077" width="0.0256%" height="15" fill="rgb(244,35,45)" fg:x="1226" fg:w="37"/><text x="1.0991%" y="1087.50"></text></g><g><title>tremor_value::value::parse_to_value_with_buffers (15 samples, 0.01%)</title><rect x="0.8643%" y="1061" width="0.0104%" height="15" fill="rgb(251,115,12)" fg:x="1248" fg:w="15"/><text x="1.1143%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (16 samples, 0.01%)</title><rect x="0.8747%" y="1077" width="0.0111%" height="15" fill="rgb(240,54,50)" fg:x="1263" fg:w="16"/><text x="1.1247%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (73 samples, 0.05%)</title><rect x="0.8858%" y="1077" width="0.0506%" height="15" fill="rgb(233,84,52)" fg:x="1279" fg:w="73"/><text x="1.1358%" y="1087.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.02%)</title><rect x="0.9114%" y="1061" width="0.0249%" height="15" fill="rgb(207,117,47)" fg:x="1316" fg:w="36"/><text x="1.1614%" y="1071.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.02%)</title><rect x="0.9191%" y="1045" width="0.0173%" height="15" fill="rgb(249,43,39)" fg:x="1327" fg:w="25"/><text x="1.1691%" y="1055.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (26 samples, 0.02%)</title><rect x="0.9364%" y="1077" width="0.0180%" height="15" fill="rgb(209,38,44)" fg:x="1352" fg:w="26"/><text x="1.1864%" y="1087.50"></text></g><g><title>value_trait::Builder::object (24 samples, 0.02%)</title><rect x="0.9378%" y="1061" width="0.0166%" height="15" fill="rgb(236,212,23)" fg:x="1354" fg:w="24"/><text x="1.1878%" y="1071.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (24 samples, 0.02%)</title><rect x="0.9378%" y="1045" width="0.0166%" height="15" fill="rgb(242,79,21)" fg:x="1354" fg:w="24"/><text x="1.1878%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (24 samples, 0.02%)</title><rect x="0.9378%" y="1029" width="0.0166%" height="15" fill="rgb(211,96,35)" fg:x="1354" fg:w="24"/><text x="1.1878%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="0.9544%" y="1077" width="0.0222%" height="15" fill="rgb(253,215,40)" fg:x="1378" fg:w="32"/><text x="1.2044%" y="1087.50"></text></g><g><title>[libc-2.31.so] (61 samples, 0.04%)</title><rect x="0.9849%" y="1077" width="0.0422%" height="15" fill="rgb(211,81,21)" fg:x="1422" fg:w="61"/><text x="1.2349%" y="1087.50"></text></g><g><title>[pdk-noknownkey] (158 samples, 0.11%)</title><rect x="1.0271%" y="1077" width="0.1094%" height="15" fill="rgb(208,190,38)" fg:x="1483" fg:w="158"/><text x="1.2771%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (158 samples, 0.11%)</title><rect x="1.0271%" y="1061" width="0.1094%" height="15" fill="rgb(235,213,38)" fg:x="1483" fg:w="158"/><text x="1.2771%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (158 samples, 0.11%)</title><rect x="1.0271%" y="1045" width="0.1094%" height="15" fill="rgb(237,122,38)" fg:x="1483" fg:w="158"/><text x="1.2771%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (158 samples, 0.11%)</title><rect x="1.0271%" y="1029" width="0.1094%" height="15" fill="rgb(244,218,35)" fg:x="1483" fg:w="158"/><text x="1.2771%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (158 samples, 0.11%)</title><rect x="1.0271%" y="1013" width="0.1094%" height="15" fill="rgb(240,68,47)" fg:x="1483" fg:w="158"/><text x="1.2771%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (65 samples, 0.05%)</title><rect x="1.0915%" y="997" width="0.0450%" height="15" fill="rgb(210,16,53)" fg:x="1576" fg:w="65"/><text x="1.3415%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (65 samples, 0.05%)</title><rect x="1.0915%" y="981" width="0.0450%" height="15" fill="rgb(235,124,12)" fg:x="1576" fg:w="65"/><text x="1.3415%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.05%)</title><rect x="1.0915%" y="965" width="0.0450%" height="15" fill="rgb(224,169,11)" fg:x="1576" fg:w="65"/><text x="1.3415%" y="975.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (65 samples, 0.05%)</title><rect x="1.0915%" y="949" width="0.0450%" height="15" fill="rgb(250,166,2)" fg:x="1576" fg:w="65"/><text x="1.3415%" y="959.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (65 samples, 0.05%)</title><rect x="1.0915%" y="933" width="0.0450%" height="15" fill="rgb(242,216,29)" fg:x="1576" fg:w="65"/><text x="1.3415%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (65 samples, 0.05%)</title><rect x="1.0915%" y="917" width="0.0450%" height="15" fill="rgb(230,116,27)" fg:x="1576" fg:w="65"/><text x="1.3415%" y="927.50"></text></g><g><title>__clock_gettime (29 samples, 0.02%)</title><rect x="1.1365%" y="1077" width="0.0201%" height="15" fill="rgb(228,99,48)" fg:x="1641" fg:w="29"/><text x="1.3865%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (22 samples, 0.02%)</title><rect x="1.1601%" y="1077" width="0.0152%" height="15" fill="rgb(253,11,6)" fg:x="1675" fg:w="22"/><text x="1.4101%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (74 samples, 0.05%)</title><rect x="1.1753%" y="1077" width="0.0513%" height="15" fill="rgb(247,143,39)" fg:x="1697" fg:w="74"/><text x="1.4253%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="1.2744%" y="1061" width="0.0201%" height="15" fill="rgb(236,97,10)" fg:x="1840" fg:w="29"/><text x="1.5244%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (29 samples, 0.02%)</title><rect x="1.2744%" y="1045" width="0.0201%" height="15" fill="rgb(233,208,19)" fg:x="1840" fg:w="29"/><text x="1.5244%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.02%)</title><rect x="1.2744%" y="1029" width="0.0201%" height="15" fill="rgb(216,164,2)" fg:x="1840" fg:w="29"/><text x="1.5244%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.02%)</title><rect x="1.2744%" y="1013" width="0.0201%" height="15" fill="rgb(220,129,5)" fg:x="1840" fg:w="29"/><text x="1.5244%" y="1023.50"></text></g><g><title>__rg_dealloc (29 samples, 0.02%)</title><rect x="1.2744%" y="997" width="0.0201%" height="15" fill="rgb(242,17,10)" fg:x="1840" fg:w="29"/><text x="1.5244%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (29 samples, 0.02%)</title><rect x="1.2744%" y="981" width="0.0201%" height="15" fill="rgb(242,107,0)" fg:x="1840" fg:w="29"/><text x="1.5244%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="1.2944%" y="1061" width="0.0159%" height="15" fill="rgb(251,28,31)" fg:x="1869" fg:w="23"/><text x="1.5444%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (23 samples, 0.02%)</title><rect x="1.2944%" y="1045" width="0.0159%" height="15" fill="rgb(233,223,10)" fg:x="1869" fg:w="23"/><text x="1.5444%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="1.2944%" y="1029" width="0.0159%" height="15" fill="rgb(215,21,27)" fg:x="1869" fg:w="23"/><text x="1.5444%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="1.2944%" y="1013" width="0.0159%" height="15" fill="rgb(232,23,21)" fg:x="1869" fg:w="23"/><text x="1.5444%" y="1023.50"></text></g><g><title>__rg_dealloc (23 samples, 0.02%)</title><rect x="1.2944%" y="997" width="0.0159%" height="15" fill="rgb(244,5,23)" fg:x="1869" fg:w="23"/><text x="1.5444%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23 samples, 0.02%)</title><rect x="1.2944%" y="981" width="0.0159%" height="15" fill="rgb(226,81,46)" fg:x="1869" fg:w="23"/><text x="1.5444%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (119 samples, 0.08%)</title><rect x="1.2307%" y="1077" width="0.0824%" height="15" fill="rgb(247,70,30)" fg:x="1777" fg:w="119"/><text x="1.4807%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (67 samples, 0.05%)</title><rect x="1.3131%" y="1077" width="0.0464%" height="15" fill="rgb(212,68,19)" fg:x="1896" fg:w="67"/><text x="1.5631%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (19 samples, 0.01%)</title><rect x="1.3595%" y="1077" width="0.0132%" height="15" fill="rgb(240,187,13)" fg:x="1963" fg:w="19"/><text x="1.6095%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (16 samples, 0.01%)</title><rect x="1.3616%" y="1061" width="0.0111%" height="15" fill="rgb(223,113,26)" fg:x="1966" fg:w="16"/><text x="1.6116%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (16 samples, 0.01%)</title><rect x="1.3616%" y="1045" width="0.0111%" height="15" fill="rgb(206,192,2)" fg:x="1966" fg:w="16"/><text x="1.6116%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (16 samples, 0.01%)</title><rect x="1.3616%" y="1029" width="0.0111%" height="15" fill="rgb(241,108,4)" fg:x="1966" fg:w="16"/><text x="1.6116%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (60 samples, 0.04%)</title><rect x="1.3748%" y="1077" width="0.0416%" height="15" fill="rgb(247,173,49)" fg:x="1985" fg:w="60"/><text x="1.6248%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="1.4163%" y="1077" width="0.0187%" height="15" fill="rgb(224,114,35)" fg:x="2045" fg:w="27"/><text x="1.6663%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.05%)</title><rect x="1.4801%" y="1013" width="0.0533%" height="15" fill="rgb(245,159,27)" fg:x="2137" fg:w="77"/><text x="1.7301%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (77 samples, 0.05%)</title><rect x="1.4801%" y="997" width="0.0533%" height="15" fill="rgb(245,172,44)" fg:x="2137" fg:w="77"/><text x="1.7301%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (77 samples, 0.05%)</title><rect x="1.4801%" y="981" width="0.0533%" height="15" fill="rgb(236,23,11)" fg:x="2137" fg:w="77"/><text x="1.7301%" y="991.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (77 samples, 0.05%)</title><rect x="1.4801%" y="965" width="0.0533%" height="15" fill="rgb(205,117,38)" fg:x="2137" fg:w="77"/><text x="1.7301%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (82 samples, 0.06%)</title><rect x="1.4801%" y="1029" width="0.0568%" height="15" fill="rgb(237,72,25)" fg:x="2137" fg:w="82"/><text x="1.7301%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="1.5368%" y="1013" width="0.0208%" height="15" fill="rgb(244,70,9)" fg:x="2219" fg:w="30"/><text x="1.7868%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (30 samples, 0.02%)</title><rect x="1.5368%" y="997" width="0.0208%" height="15" fill="rgb(217,125,39)" fg:x="2219" fg:w="30"/><text x="1.7868%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (30 samples, 0.02%)</title><rect x="1.5368%" y="981" width="0.0208%" height="15" fill="rgb(235,36,10)" fg:x="2219" fg:w="30"/><text x="1.7868%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (30 samples, 0.02%)</title><rect x="1.5368%" y="965" width="0.0208%" height="15" fill="rgb(251,123,47)" fg:x="2219" fg:w="30"/><text x="1.7868%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (30 samples, 0.02%)</title><rect x="1.5368%" y="949" width="0.0208%" height="15" fill="rgb(221,13,13)" fg:x="2219" fg:w="30"/><text x="1.7868%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (45 samples, 0.03%)</title><rect x="1.5368%" y="1029" width="0.0312%" height="15" fill="rgb(238,131,9)" fg:x="2219" fg:w="45"/><text x="1.7868%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (15 samples, 0.01%)</title><rect x="1.5576%" y="1013" width="0.0104%" height="15" fill="rgb(211,50,8)" fg:x="2249" fg:w="15"/><text x="1.8076%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="1.5576%" y="997" width="0.0104%" height="15" fill="rgb(245,182,24)" fg:x="2249" fg:w="15"/><text x="1.8076%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="1.5576%" y="981" width="0.0104%" height="15" fill="rgb(242,14,37)" fg:x="2249" fg:w="15"/><text x="1.8076%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="1.5576%" y="965" width="0.0104%" height="15" fill="rgb(246,228,12)" fg:x="2249" fg:w="15"/><text x="1.8076%" y="975.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="1.5576%" y="949" width="0.0104%" height="15" fill="rgb(213,55,15)" fg:x="2249" fg:w="15"/><text x="1.8076%" y="959.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="1.5576%" y="933" width="0.0104%" height="15" fill="rgb(209,9,3)" fg:x="2249" fg:w="15"/><text x="1.8076%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (199 samples, 0.14%)</title><rect x="1.4392%" y="1077" width="0.1378%" height="15" fill="rgb(230,59,30)" fg:x="2078" fg:w="199"/><text x="1.6892%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (140 samples, 0.10%)</title><rect x="1.4801%" y="1061" width="0.0970%" height="15" fill="rgb(209,121,21)" fg:x="2137" fg:w="140"/><text x="1.7301%" y="1071.50"></text></g><g><title>core::mem::drop (140 samples, 0.10%)</title><rect x="1.4801%" y="1045" width="0.0970%" height="15" fill="rgb(220,109,13)" fg:x="2137" fg:w="140"/><text x="1.7301%" y="1055.50"></text></g><g><title>async_executor::State::notify (16 samples, 0.01%)</title><rect x="1.5867%" y="1077" width="0.0111%" height="15" fill="rgb(232,18,1)" fg:x="2291" fg:w="16"/><text x="1.8367%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (31 samples, 0.02%)</title><rect x="1.5978%" y="1077" width="0.0215%" height="15" fill="rgb(215,41,42)" fg:x="2307" fg:w="31"/><text x="1.8478%" y="1087.50"></text></g><g><title>async_executor::Ticker::wake (20 samples, 0.01%)</title><rect x="1.6193%" y="1077" width="0.0139%" height="15" fill="rgb(224,123,36)" fg:x="2338" fg:w="20"/><text x="1.8693%" y="1087.50"></text></g><g><title>async_executor::steal (256 samples, 0.18%)</title><rect x="1.6331%" y="1077" width="0.1773%" height="15" fill="rgb(240,125,3)" fg:x="2358" fg:w="256"/><text x="1.8831%" y="1087.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (25 samples, 0.02%)</title><rect x="1.8118%" y="1077" width="0.0173%" height="15" fill="rgb(205,98,50)" fg:x="2616" fg:w="25"/><text x="2.0618%" y="1087.50"></text></g><g><title>async_io::driver::block_on (15 samples, 0.01%)</title><rect x="1.8291%" y="1077" width="0.0104%" height="15" fill="rgb(205,185,37)" fg:x="2641" fg:w="15"/><text x="2.0791%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (416 samples, 0.29%)</title><rect x="1.8534%" y="1077" width="0.2881%" height="15" fill="rgb(238,207,15)" fg:x="2676" fg:w="416"/><text x="2.1034%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (40 samples, 0.03%)</title><rect x="2.1415%" y="1077" width="0.0277%" height="15" fill="rgb(213,199,42)" fg:x="3092" fg:w="40"/><text x="2.3915%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (52 samples, 0.04%)</title><rect x="2.1692%" y="1077" width="0.0360%" height="15" fill="rgb(235,201,11)" fg:x="3132" fg:w="52"/><text x="2.4192%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (23 samples, 0.02%)</title><rect x="2.2093%" y="1077" width="0.0159%" height="15" fill="rgb(207,46,11)" fg:x="3190" fg:w="23"/><text x="2.4593%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (86 samples, 0.06%)</title><rect x="2.2253%" y="1077" width="0.0596%" height="15" fill="rgb(241,35,35)" fg:x="3213" fg:w="86"/><text x="2.4753%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="2.2931%" y="1077" width="0.0166%" height="15" fill="rgb(243,32,47)" fg:x="3311" fg:w="24"/><text x="2.5431%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="2.3098%" y="1077" width="0.0159%" height="15" fill="rgb(247,202,23)" fg:x="3335" fg:w="23"/><text x="2.5598%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (20 samples, 0.01%)</title><rect x="2.3319%" y="1077" width="0.0139%" height="15" fill="rgb(219,102,11)" fg:x="3367" fg:w="20"/><text x="2.5819%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (20 samples, 0.01%)</title><rect x="2.3319%" y="1061" width="0.0139%" height="15" fill="rgb(243,110,44)" fg:x="3367" fg:w="20"/><text x="2.5819%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (27 samples, 0.02%)</title><rect x="2.3576%" y="1077" width="0.0187%" height="15" fill="rgb(222,74,54)" fg:x="3404" fg:w="27"/><text x="2.6076%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (50 samples, 0.03%)</title><rect x="2.3763%" y="1077" width="0.0346%" height="15" fill="rgb(216,99,12)" fg:x="3431" fg:w="50"/><text x="2.6263%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (24 samples, 0.02%)</title><rect x="2.3943%" y="1061" width="0.0166%" height="15" fill="rgb(226,22,26)" fg:x="3457" fg:w="24"/><text x="2.6443%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="2.4005%" y="1045" width="0.0104%" height="15" fill="rgb(217,163,10)" fg:x="3466" fg:w="15"/><text x="2.6505%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="2.4005%" y="1029" width="0.0104%" height="15" fill="rgb(213,25,53)" fg:x="3466" fg:w="15"/><text x="2.6505%" y="1039.50"></text></g><g><title>event_listener::Event::notify (114 samples, 0.08%)</title><rect x="2.4206%" y="1077" width="0.0790%" height="15" fill="rgb(252,105,26)" fg:x="3495" fg:w="114"/><text x="2.6706%" y="1087.50"></text></g><g><title>event_listener::full_fence (62 samples, 0.04%)</title><rect x="2.4566%" y="1061" width="0.0429%" height="15" fill="rgb(220,39,43)" fg:x="3547" fg:w="62"/><text x="2.7066%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (19 samples, 0.01%)</title><rect x="2.5058%" y="1077" width="0.0132%" height="15" fill="rgb(229,68,48)" fg:x="3618" fg:w="19"/><text x="2.7558%" y="1087.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (74 samples, 0.05%)</title><rect x="2.5563%" y="1077" width="0.0513%" height="15" fill="rgb(252,8,32)" fg:x="3691" fg:w="74"/><text x="2.8063%" y="1087.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (43 samples, 0.03%)</title><rect x="2.5778%" y="1061" width="0.0298%" height="15" fill="rgb(223,20,43)" fg:x="3722" fg:w="43"/><text x="2.8278%" y="1071.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (22 samples, 0.02%)</title><rect x="2.5923%" y="1045" width="0.0152%" height="15" fill="rgb(229,81,49)" fg:x="3743" fg:w="22"/><text x="2.8423%" y="1055.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (22 samples, 0.02%)</title><rect x="2.5923%" y="1029" width="0.0152%" height="15" fill="rgb(236,28,36)" fg:x="3743" fg:w="22"/><text x="2.8423%" y="1039.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.04%)</title><rect x="2.6076%" y="1077" width="0.0409%" height="15" fill="rgb(249,185,26)" fg:x="3765" fg:w="59"/><text x="2.8576%" y="1087.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="2.6484%" y="1077" width="0.0187%" height="15" fill="rgb(249,174,33)" fg:x="3824" fg:w="27"/><text x="2.8984%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (21 samples, 0.01%)</title><rect x="2.6761%" y="1077" width="0.0145%" height="15" fill="rgb(233,201,37)" fg:x="3864" fg:w="21"/><text x="2.9261%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="2.6914%" y="1077" width="0.0104%" height="15" fill="rgb(221,78,26)" fg:x="3886" fg:w="15"/><text x="2.9414%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (23 samples, 0.02%)</title><rect x="2.7087%" y="1077" width="0.0159%" height="15" fill="rgb(250,127,30)" fg:x="3911" fg:w="23"/><text x="2.9587%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (25 samples, 0.02%)</title><rect x="2.7246%" y="1077" width="0.0173%" height="15" fill="rgb(230,49,44)" fg:x="3934" fg:w="25"/><text x="2.9746%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (33 samples, 0.02%)</title><rect x="2.7440%" y="1077" width="0.0229%" height="15" fill="rgb(229,67,23)" fg:x="3962" fg:w="33"/><text x="2.9940%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (37 samples, 0.03%)</title><rect x="2.7669%" y="1077" width="0.0256%" height="15" fill="rgb(249,83,47)" fg:x="3995" fg:w="37"/><text x="3.0169%" y="1087.50"></text></g><g><title>syscall (15 samples, 0.01%)</title><rect x="2.7925%" y="1077" width="0.0104%" height="15" fill="rgb(215,43,3)" fg:x="4032" fg:w="15"/><text x="3.0425%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (27 samples, 0.02%)</title><rect x="2.8174%" y="1077" width="0.0187%" height="15" fill="rgb(238,154,13)" fg:x="4068" fg:w="27"/><text x="3.0674%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (21 samples, 0.01%)</title><rect x="2.8971%" y="1013" width="0.0145%" height="15" fill="rgb(219,56,2)" fg:x="4183" fg:w="21"/><text x="3.1471%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (21 samples, 0.01%)</title><rect x="2.8971%" y="997" width="0.0145%" height="15" fill="rgb(233,0,4)" fg:x="4183" fg:w="21"/><text x="3.1471%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.01%)</title><rect x="2.8971%" y="981" width="0.0145%" height="15" fill="rgb(235,30,7)" fg:x="4183" fg:w="21"/><text x="3.1471%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (24 samples, 0.02%)</title><rect x="2.8971%" y="1029" width="0.0166%" height="15" fill="rgb(250,79,13)" fg:x="4183" fg:w="24"/><text x="3.1471%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (111 samples, 0.08%)</title><rect x="2.8410%" y="1077" width="0.0769%" height="15" fill="rgb(211,146,34)" fg:x="4102" fg:w="111"/><text x="3.0910%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.05%)</title><rect x="2.8714%" y="1061" width="0.0464%" height="15" fill="rgb(228,22,38)" fg:x="4146" fg:w="67"/><text x="3.1214%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (59 samples, 0.04%)</title><rect x="2.8770%" y="1045" width="0.0409%" height="15" fill="rgb(235,168,5)" fg:x="4154" fg:w="59"/><text x="3.1270%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (56 samples, 0.04%)</title><rect x="2.9269%" y="1077" width="0.0388%" height="15" fill="rgb(221,155,16)" fg:x="4226" fg:w="56"/><text x="3.1769%" y="1087.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (20 samples, 0.01%)</title><rect x="2.9871%" y="1077" width="0.0139%" height="15" fill="rgb(215,215,53)" fg:x="4313" fg:w="20"/><text x="3.2371%" y="1087.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (33 samples, 0.02%)</title><rect x="3.0010%" y="1077" width="0.0229%" height="15" fill="rgb(223,4,10)" fg:x="4333" fg:w="33"/><text x="3.2510%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (18 samples, 0.01%)</title><rect x="3.0114%" y="1061" width="0.0125%" height="15" fill="rgb(234,103,6)" fg:x="4348" fg:w="18"/><text x="3.2614%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (58 samples, 0.04%)</title><rect x="3.0619%" y="1045" width="0.0402%" height="15" fill="rgb(227,97,0)" fg:x="4421" fg:w="58"/><text x="3.3119%" y="1055.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (120 samples, 0.08%)</title><rect x="3.0238%" y="1077" width="0.0831%" height="15" fill="rgb(234,150,53)" fg:x="4366" fg:w="120"/><text x="3.2738%" y="1087.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (66 samples, 0.05%)</title><rect x="3.0612%" y="1061" width="0.0457%" height="15" fill="rgb(228,201,54)" fg:x="4420" fg:w="66"/><text x="3.3112%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (51 samples, 0.04%)</title><rect x="3.3216%" y="1029" width="0.0353%" height="15" fill="rgb(222,22,37)" fg:x="4796" fg:w="51"/><text x="3.5716%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (51 samples, 0.04%)</title><rect x="3.3216%" y="1013" width="0.0353%" height="15" fill="rgb(237,53,32)" fg:x="4796" fg:w="51"/><text x="3.5716%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (51 samples, 0.04%)</title><rect x="3.3216%" y="997" width="0.0353%" height="15" fill="rgb(233,25,53)" fg:x="4796" fg:w="51"/><text x="3.5716%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (51 samples, 0.04%)</title><rect x="3.3216%" y="981" width="0.0353%" height="15" fill="rgb(210,40,34)" fg:x="4796" fg:w="51"/><text x="3.5716%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (51 samples, 0.04%)</title><rect x="3.3216%" y="965" width="0.0353%" height="15" fill="rgb(241,220,44)" fg:x="4796" fg:w="51"/><text x="3.5716%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.04%)</title><rect x="3.3216%" y="949" width="0.0353%" height="15" fill="rgb(235,28,35)" fg:x="4796" fg:w="51"/><text x="3.5716%" y="959.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (417 samples, 0.29%)</title><rect x="3.1069%" y="1077" width="0.2888%" height="15" fill="rgb(210,56,17)" fg:x="4486" fg:w="417"/><text x="3.3569%" y="1087.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (107 samples, 0.07%)</title><rect x="3.3216%" y="1061" width="0.0741%" height="15" fill="rgb(224,130,29)" fg:x="4796" fg:w="107"/><text x="3.5716%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (107 samples, 0.07%)</title><rect x="3.3216%" y="1045" width="0.0741%" height="15" fill="rgb(235,212,8)" fg:x="4796" fg:w="107"/><text x="3.5716%" y="1055.50"></text></g><g><title>value_trait::generator::write_str_simd (56 samples, 0.04%)</title><rect x="3.3570%" y="1029" width="0.0388%" height="15" fill="rgb(223,33,50)" fg:x="4847" fg:w="56"/><text x="3.6070%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (56 samples, 0.04%)</title><rect x="3.3570%" y="1013" width="0.0388%" height="15" fill="rgb(219,149,13)" fg:x="4847" fg:w="56"/><text x="3.6070%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (56 samples, 0.04%)</title><rect x="3.3570%" y="997" width="0.0388%" height="15" fill="rgb(250,156,29)" fg:x="4847" fg:w="56"/><text x="3.6070%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (56 samples, 0.04%)</title><rect x="3.3570%" y="981" width="0.0388%" height="15" fill="rgb(216,193,19)" fg:x="4847" fg:w="56"/><text x="3.6070%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (56 samples, 0.04%)</title><rect x="3.3570%" y="965" width="0.0388%" height="15" fill="rgb(216,135,14)" fg:x="4847" fg:w="56"/><text x="3.6070%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.04%)</title><rect x="3.3570%" y="949" width="0.0388%" height="15" fill="rgb(241,47,5)" fg:x="4847" fg:w="56"/><text x="3.6070%" y="959.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (15 samples, 0.01%)</title><rect x="3.4034%" y="1077" width="0.0104%" height="15" fill="rgb(233,42,35)" fg:x="4914" fg:w="15"/><text x="3.6534%" y="1087.50"></text></g><g><title>[anon] (4,699 samples, 3.25%)</title><rect x="0.1600%" y="1093" width="3.2544%" height="15" fill="rgb(231,13,6)" fg:x="231" fg:w="4699"/><text x="0.4100%" y="1103.50">[an..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (15 samples, 0.01%)</title><rect x="3.4401%" y="1077" width="0.0104%" height="15" fill="rgb(207,181,40)" fg:x="4967" fg:w="15"/><text x="3.6901%" y="1087.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.05%)</title><rect x="3.4144%" y="1093" width="0.0464%" height="15" fill="rgb(254,173,49)" fg:x="4930" fg:w="67"/><text x="3.6644%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="3.4608%" y="1077" width="0.0166%" height="15" fill="rgb(221,1,38)" fg:x="4997" fg:w="24"/><text x="3.7108%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (25 samples, 0.02%)</title><rect x="3.4788%" y="1077" width="0.0173%" height="15" fill="rgb(206,124,46)" fg:x="5023" fg:w="25"/><text x="3.7288%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="3.5114%" y="1077" width="0.0118%" height="15" fill="rgb(249,21,11)" fg:x="5070" fg:w="17"/><text x="3.7614%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (88 samples, 0.06%)</title><rect x="3.5391%" y="1077" width="0.0609%" height="15" fill="rgb(222,201,40)" fg:x="5110" fg:w="88"/><text x="3.7891%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="3.6000%" y="1077" width="0.0111%" height="15" fill="rgb(235,61,29)" fg:x="5198" fg:w="16"/><text x="3.8500%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (17 samples, 0.01%)</title><rect x="3.6125%" y="1077" width="0.0118%" height="15" fill="rgb(219,207,3)" fg:x="5216" fg:w="17"/><text x="3.8625%" y="1087.50"></text></g><g><title>[pdk-noknownkey] (314 samples, 0.22%)</title><rect x="3.4608%" y="1093" width="0.2175%" height="15" fill="rgb(222,56,46)" fg:x="4997" fg:w="314"/><text x="3.7108%" y="1103.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (55 samples, 0.04%)</title><rect x="3.6402%" y="1077" width="0.0381%" height="15" fill="rgb(239,76,54)" fg:x="5256" fg:w="55"/><text x="3.8902%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (54 samples, 0.04%)</title><rect x="3.6866%" y="1077" width="0.0374%" height="15" fill="rgb(231,124,27)" fg:x="5323" fg:w="54"/><text x="3.9366%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (16 samples, 0.01%)</title><rect x="3.7129%" y="1061" width="0.0111%" height="15" fill="rgb(249,195,6)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (16 samples, 0.01%)</title><rect x="3.7129%" y="1045" width="0.0111%" height="15" fill="rgb(237,174,47)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (16 samples, 0.01%)</title><rect x="3.7129%" y="1029" width="0.0111%" height="15" fill="rgb(206,201,31)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="3.7129%" y="1013" width="0.0111%" height="15" fill="rgb(231,57,52)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="3.7129%" y="997" width="0.0111%" height="15" fill="rgb(248,177,22)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="3.7129%" y="981" width="0.0111%" height="15" fill="rgb(215,211,37)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="3.7129%" y="965" width="0.0111%" height="15" fill="rgb(241,128,51)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="3.7129%" y="949" width="0.0111%" height="15" fill="rgb(227,165,31)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="959.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="3.7129%" y="933" width="0.0111%" height="15" fill="rgb(228,167,24)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="943.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="3.7129%" y="917" width="0.0111%" height="15" fill="rgb(228,143,12)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="3.7129%" y="901" width="0.0111%" height="15" fill="rgb(249,149,8)" fg:x="5361" fg:w="16"/><text x="3.9629%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (34 samples, 0.02%)</title><rect x="3.7413%" y="1077" width="0.0235%" height="15" fill="rgb(243,35,44)" fg:x="5402" fg:w="34"/><text x="3.9913%" y="1087.50"></text></g><g><title>[libc-2.31.so] (97 samples, 0.07%)</title><rect x="3.8348%" y="821" width="0.0672%" height="15" fill="rgb(246,89,9)" fg:x="5537" fg:w="97"/><text x="4.0848%" y="831.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (15 samples, 0.01%)</title><rect x="4.0149%" y="805" width="0.0104%" height="15" fill="rgb(233,213,13)" fg:x="5797" fg:w="15"/><text x="4.2649%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="4.0343%" y="789" width="0.0139%" height="15" fill="rgb(233,141,41)" fg:x="5825" fg:w="20"/><text x="4.2843%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (195 samples, 0.14%)</title><rect x="4.0343%" y="805" width="0.1351%" height="15" fill="rgb(239,167,4)" fg:x="5825" fg:w="195"/><text x="4.2843%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (175 samples, 0.12%)</title><rect x="4.0481%" y="789" width="0.1212%" height="15" fill="rgb(209,217,16)" fg:x="5845" fg:w="175"/><text x="4.2981%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (172 samples, 0.12%)</title><rect x="4.0502%" y="773" width="0.1191%" height="15" fill="rgb(219,88,35)" fg:x="5848" fg:w="172"/><text x="4.3002%" y="783.50"></text></g><g><title>core::ptr::read (172 samples, 0.12%)</title><rect x="4.0502%" y="757" width="0.1191%" height="15" fill="rgb(220,193,23)" fg:x="5848" fg:w="172"/><text x="4.3002%" y="767.50"></text></g><g><title>[libc-2.31.so] (164 samples, 0.11%)</title><rect x="4.0558%" y="741" width="0.1136%" height="15" fill="rgb(230,90,52)" fg:x="5856" fg:w="164"/><text x="4.3058%" y="751.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (39 samples, 0.03%)</title><rect x="4.1728%" y="805" width="0.0270%" height="15" fill="rgb(252,106,19)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (39 samples, 0.03%)</title><rect x="4.1728%" y="789" width="0.0270%" height="15" fill="rgb(206,74,20)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (39 samples, 0.03%)</title><rect x="4.1728%" y="773" width="0.0270%" height="15" fill="rgb(230,138,44)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (39 samples, 0.03%)</title><rect x="4.1728%" y="757" width="0.0270%" height="15" fill="rgb(235,182,43)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (39 samples, 0.03%)</title><rect x="4.1728%" y="741" width="0.0270%" height="15" fill="rgb(242,16,51)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (39 samples, 0.03%)</title><rect x="4.1728%" y="725" width="0.0270%" height="15" fill="rgb(248,9,4)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (39 samples, 0.03%)</title><rect x="4.1728%" y="709" width="0.0270%" height="15" fill="rgb(210,31,22)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (39 samples, 0.03%)</title><rect x="4.1728%" y="693" width="0.0270%" height="15" fill="rgb(239,54,39)" fg:x="6025" fg:w="39"/><text x="4.4228%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (26 samples, 0.02%)</title><rect x="4.1818%" y="677" width="0.0180%" height="15" fill="rgb(230,99,41)" fg:x="6038" fg:w="26"/><text x="4.4318%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="4.1818%" y="661" width="0.0180%" height="15" fill="rgb(253,106,12)" fg:x="6038" fg:w="26"/><text x="4.4318%" y="671.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.01%)</title><rect x="4.1853%" y="645" width="0.0145%" height="15" fill="rgb(213,46,41)" fg:x="6043" fg:w="21"/><text x="4.4353%" y="655.50"></text></g><g><title>[libc-2.31.so] (1,051 samples, 0.73%)</title><rect x="4.1998%" y="805" width="0.7279%" height="15" fill="rgb(215,133,35)" fg:x="6064" fg:w="1051"/><text x="4.4498%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="4.9367%" y="805" width="0.0104%" height="15" fill="rgb(213,28,5)" fg:x="7128" fg:w="15"/><text x="5.1867%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="4.9367%" y="789" width="0.0104%" height="15" fill="rgb(215,77,49)" fg:x="7128" fg:w="15"/><text x="5.1867%" y="799.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,677 samples, 1.16%)</title><rect x="3.8113%" y="1061" width="1.1615%" height="15" fill="rgb(248,100,22)" fg:x="5503" fg:w="1677"/><text x="4.0613%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (1,677 samples, 1.16%)</title><rect x="3.8113%" y="1045" width="1.1615%" height="15" fill="rgb(208,67,9)" fg:x="5503" fg:w="1677"/><text x="4.0613%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,676 samples, 1.16%)</title><rect x="3.8120%" y="1029" width="1.1608%" height="15" fill="rgb(219,133,21)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,676 samples, 1.16%)</title><rect x="3.8120%" y="1013" width="1.1608%" height="15" fill="rgb(246,46,29)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,676 samples, 1.16%)</title><rect x="3.8120%" y="997" width="1.1608%" height="15" fill="rgb(246,185,52)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="1007.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,676 samples, 1.16%)</title><rect x="3.8120%" y="981" width="1.1608%" height="15" fill="rgb(252,136,11)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="991.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,676 samples, 1.16%)</title><rect x="3.8120%" y="965" width="1.1608%" height="15" fill="rgb(219,138,53)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="975.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,676 samples, 1.16%)</title><rect x="3.8120%" y="949" width="1.1608%" height="15" fill="rgb(211,51,23)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,676 samples, 1.16%)</title><rect x="3.8120%" y="933" width="1.1608%" height="15" fill="rgb(247,221,28)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,676 samples, 1.16%)</title><rect x="3.8120%" y="917" width="1.1608%" height="15" fill="rgb(251,222,45)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,676 samples, 1.16%)</title><rect x="3.8120%" y="901" width="1.1608%" height="15" fill="rgb(217,162,53)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="911.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,676 samples, 1.16%)</title><rect x="3.8120%" y="885" width="1.1608%" height="15" fill="rgb(229,93,14)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,676 samples, 1.16%)</title><rect x="3.8120%" y="869" width="1.1608%" height="15" fill="rgb(209,67,49)" fg:x="5504" fg:w="1676"/><text x="4.0620%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,668 samples, 1.16%)</title><rect x="3.8175%" y="853" width="1.1552%" height="15" fill="rgb(213,87,29)" fg:x="5512" fg:w="1668"/><text x="4.0675%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,668 samples, 1.16%)</title><rect x="3.8175%" y="837" width="1.1552%" height="15" fill="rgb(205,151,52)" fg:x="5512" fg:w="1668"/><text x="4.0675%" y="847.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,546 samples, 1.07%)</title><rect x="3.9020%" y="821" width="1.0707%" height="15" fill="rgb(253,215,39)" fg:x="5634" fg:w="1546"/><text x="4.1520%" y="831.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (33 samples, 0.02%)</title><rect x="4.9499%" y="805" width="0.0229%" height="15" fill="rgb(221,220,41)" fg:x="7147" fg:w="33"/><text x="5.1999%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (33 samples, 0.02%)</title><rect x="4.9499%" y="789" width="0.0229%" height="15" fill="rgb(218,133,21)" fg:x="7147" fg:w="33"/><text x="5.1999%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.02%)</title><rect x="4.9499%" y="773" width="0.0229%" height="15" fill="rgb(221,193,43)" fg:x="7147" fg:w="33"/><text x="5.1999%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22 samples, 0.02%)</title><rect x="4.9575%" y="757" width="0.0152%" height="15" fill="rgb(240,128,52)" fg:x="7158" fg:w="22"/><text x="5.2075%" y="767.50"></text></g><g><title>[libc-2.31.so] (112 samples, 0.08%)</title><rect x="4.9811%" y="677" width="0.0776%" height="15" fill="rgb(253,114,12)" fg:x="7192" fg:w="112"/><text x="5.2311%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (145 samples, 0.10%)</title><rect x="4.9727%" y="789" width="0.1004%" height="15" fill="rgb(215,223,47)" fg:x="7180" fg:w="145"/><text x="5.2227%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (145 samples, 0.10%)</title><rect x="4.9727%" y="773" width="0.1004%" height="15" fill="rgb(248,225,23)" fg:x="7180" fg:w="145"/><text x="5.2227%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (145 samples, 0.10%)</title><rect x="4.9727%" y="757" width="0.1004%" height="15" fill="rgb(250,108,0)" fg:x="7180" fg:w="145"/><text x="5.2227%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (145 samples, 0.10%)</title><rect x="4.9727%" y="741" width="0.1004%" height="15" fill="rgb(228,208,7)" fg:x="7180" fg:w="145"/><text x="5.2227%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (145 samples, 0.10%)</title><rect x="4.9727%" y="725" width="0.1004%" height="15" fill="rgb(244,45,10)" fg:x="7180" fg:w="145"/><text x="5.2227%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (145 samples, 0.10%)</title><rect x="4.9727%" y="709" width="0.1004%" height="15" fill="rgb(207,125,25)" fg:x="7180" fg:w="145"/><text x="5.2227%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (145 samples, 0.10%)</title><rect x="4.9727%" y="693" width="0.1004%" height="15" fill="rgb(210,195,18)" fg:x="7180" fg:w="145"/><text x="5.2227%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (21 samples, 0.01%)</title><rect x="5.0586%" y="677" width="0.0145%" height="15" fill="rgb(249,80,12)" fg:x="7304" fg:w="21"/><text x="5.3086%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (146 samples, 0.10%)</title><rect x="4.9727%" y="1061" width="0.1011%" height="15" fill="rgb(221,65,9)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (146 samples, 0.10%)</title><rect x="4.9727%" y="1045" width="0.1011%" height="15" fill="rgb(235,49,36)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (146 samples, 0.10%)</title><rect x="4.9727%" y="1029" width="0.1011%" height="15" fill="rgb(225,32,20)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="1039.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (146 samples, 0.10%)</title><rect x="4.9727%" y="1013" width="0.1011%" height="15" fill="rgb(215,141,46)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="1023.50"></text></g><g><title>async_task::runnable::Runnable::run (146 samples, 0.10%)</title><rect x="4.9727%" y="997" width="0.1011%" height="15" fill="rgb(250,160,47)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="1007.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (146 samples, 0.10%)</title><rect x="4.9727%" y="981" width="0.1011%" height="15" fill="rgb(216,222,40)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="991.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (146 samples, 0.10%)</title><rect x="4.9727%" y="965" width="0.1011%" height="15" fill="rgb(234,217,39)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (146 samples, 0.10%)</title><rect x="4.9727%" y="949" width="0.1011%" height="15" fill="rgb(207,178,40)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="959.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (146 samples, 0.10%)</title><rect x="4.9727%" y="933" width="0.1011%" height="15" fill="rgb(221,136,13)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="943.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (146 samples, 0.10%)</title><rect x="4.9727%" y="917" width="0.1011%" height="15" fill="rgb(249,199,10)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (146 samples, 0.10%)</title><rect x="4.9727%" y="901" width="0.1011%" height="15" fill="rgb(249,222,13)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (146 samples, 0.10%)</title><rect x="4.9727%" y="885" width="0.1011%" height="15" fill="rgb(244,185,38)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (146 samples, 0.10%)</title><rect x="4.9727%" y="869" width="0.1011%" height="15" fill="rgb(236,202,9)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="879.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (146 samples, 0.10%)</title><rect x="4.9727%" y="853" width="0.1011%" height="15" fill="rgb(250,229,37)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="863.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (146 samples, 0.10%)</title><rect x="4.9727%" y="837" width="0.1011%" height="15" fill="rgb(206,174,23)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (146 samples, 0.10%)</title><rect x="4.9727%" y="821" width="0.1011%" height="15" fill="rgb(211,33,43)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (146 samples, 0.10%)</title><rect x="4.9727%" y="805" width="0.1011%" height="15" fill="rgb(245,58,50)" fg:x="7180" fg:w="146"/><text x="5.2227%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (25 samples, 0.02%)</title><rect x="5.1687%" y="565" width="0.0173%" height="15" fill="rgb(244,68,36)" fg:x="7463" fg:w="25"/><text x="5.4187%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (25 samples, 0.02%)</title><rect x="5.1687%" y="549" width="0.0173%" height="15" fill="rgb(232,229,15)" fg:x="7463" fg:w="25"/><text x="5.4187%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (25 samples, 0.02%)</title><rect x="5.1687%" y="533" width="0.0173%" height="15" fill="rgb(254,30,23)" fg:x="7463" fg:w="25"/><text x="5.4187%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="5.2629%" y="437" width="0.0111%" height="15" fill="rgb(235,160,14)" fg:x="7599" fg:w="16"/><text x="5.5129%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="5.2844%" y="389" width="0.0111%" height="15" fill="rgb(212,155,44)" fg:x="7630" fg:w="16"/><text x="5.5344%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81 samples, 0.06%)</title><rect x="5.3086%" y="293" width="0.0561%" height="15" fill="rgb(226,2,50)" fg:x="7665" fg:w="81"/><text x="5.5586%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (81 samples, 0.06%)</title><rect x="5.3086%" y="277" width="0.0561%" height="15" fill="rgb(234,177,6)" fg:x="7665" fg:w="81"/><text x="5.5586%" y="287.50"></text></g><g><title>__rg_dealloc (81 samples, 0.06%)</title><rect x="5.3086%" y="261" width="0.0561%" height="15" fill="rgb(217,24,9)" fg:x="7665" fg:w="81"/><text x="5.5586%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (81 samples, 0.06%)</title><rect x="5.3086%" y="245" width="0.0561%" height="15" fill="rgb(220,13,46)" fg:x="7665" fg:w="81"/><text x="5.5586%" y="255.50"></text></g><g><title>sn_rust_dealloc (79 samples, 0.05%)</title><rect x="5.3100%" y="229" width="0.0547%" height="15" fill="rgb(239,221,27)" fg:x="7667" fg:w="79"/><text x="5.5600%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (151 samples, 0.10%)</title><rect x="5.2616%" y="453" width="0.1046%" height="15" fill="rgb(222,198,25)" fg:x="7597" fg:w="151"/><text x="5.5116%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (133 samples, 0.09%)</title><rect x="5.2740%" y="437" width="0.0921%" height="15" fill="rgb(211,99,13)" fg:x="7615" fg:w="133"/><text x="5.5240%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (127 samples, 0.09%)</title><rect x="5.2782%" y="421" width="0.0880%" height="15" fill="rgb(232,111,31)" fg:x="7621" fg:w="127"/><text x="5.5282%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (127 samples, 0.09%)</title><rect x="5.2782%" y="405" width="0.0880%" height="15" fill="rgb(245,82,37)" fg:x="7621" fg:w="127"/><text x="5.5282%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (92 samples, 0.06%)</title><rect x="5.3024%" y="389" width="0.0637%" height="15" fill="rgb(227,149,46)" fg:x="7656" fg:w="92"/><text x="5.5524%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.06%)</title><rect x="5.3024%" y="373" width="0.0637%" height="15" fill="rgb(218,36,50)" fg:x="7656" fg:w="92"/><text x="5.5524%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (83 samples, 0.06%)</title><rect x="5.3086%" y="357" width="0.0575%" height="15" fill="rgb(226,80,48)" fg:x="7665" fg:w="83"/><text x="5.5586%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.06%)</title><rect x="5.3086%" y="341" width="0.0575%" height="15" fill="rgb(238,224,15)" fg:x="7665" fg:w="83"/><text x="5.5586%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (83 samples, 0.06%)</title><rect x="5.3086%" y="325" width="0.0575%" height="15" fill="rgb(241,136,10)" fg:x="7665" fg:w="83"/><text x="5.5586%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.06%)</title><rect x="5.3086%" y="309" width="0.0575%" height="15" fill="rgb(208,32,45)" fg:x="7665" fg:w="83"/><text x="5.5586%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (46 samples, 0.03%)</title><rect x="5.3661%" y="453" width="0.0319%" height="15" fill="rgb(207,135,9)" fg:x="7748" fg:w="46"/><text x="5.6161%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="5.3786%" y="437" width="0.0194%" height="15" fill="rgb(206,86,44)" fg:x="7766" fg:w="28"/><text x="5.6286%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (28 samples, 0.02%)</title><rect x="5.3786%" y="421" width="0.0194%" height="15" fill="rgb(245,177,15)" fg:x="7766" fg:w="28"/><text x="5.6286%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (118 samples, 0.08%)</title><rect x="5.4021%" y="389" width="0.0817%" height="15" fill="rgb(206,64,50)" fg:x="7800" fg:w="118"/><text x="5.6521%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (118 samples, 0.08%)</title><rect x="5.4021%" y="373" width="0.0817%" height="15" fill="rgb(234,36,40)" fg:x="7800" fg:w="118"/><text x="5.6521%" y="383.50"></text></g><g><title>alloc::alloc::alloc (116 samples, 0.08%)</title><rect x="5.4035%" y="357" width="0.0803%" height="15" fill="rgb(213,64,8)" fg:x="7802" fg:w="116"/><text x="5.6535%" y="367.50"></text></g><g><title>__rg_alloc (116 samples, 0.08%)</title><rect x="5.4035%" y="341" width="0.0803%" height="15" fill="rgb(210,75,36)" fg:x="7802" fg:w="116"/><text x="5.6535%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (116 samples, 0.08%)</title><rect x="5.4035%" y="325" width="0.0803%" height="15" fill="rgb(229,88,21)" fg:x="7802" fg:w="116"/><text x="5.6535%" y="335.50"></text></g><g><title>sn_rust_alloc (106 samples, 0.07%)</title><rect x="5.4105%" y="309" width="0.0734%" height="15" fill="rgb(252,204,47)" fg:x="7812" fg:w="106"/><text x="5.6605%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (602 samples, 0.42%)</title><rect x="5.0773%" y="933" width="0.4169%" height="15" fill="rgb(208,77,27)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (602 samples, 0.42%)</title><rect x="5.0773%" y="917" width="0.4169%" height="15" fill="rgb(221,76,26)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (602 samples, 0.42%)</title><rect x="5.0773%" y="901" width="0.4169%" height="15" fill="rgb(225,139,18)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="911.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (602 samples, 0.42%)</title><rect x="5.0773%" y="885" width="0.4169%" height="15" fill="rgb(230,137,11)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="895.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (602 samples, 0.42%)</title><rect x="5.0773%" y="869" width="0.4169%" height="15" fill="rgb(212,28,1)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="879.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (602 samples, 0.42%)</title><rect x="5.0773%" y="853" width="0.4169%" height="15" fill="rgb(248,164,17)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (602 samples, 0.42%)</title><rect x="5.0773%" y="837" width="0.4169%" height="15" fill="rgb(222,171,42)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="847.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (602 samples, 0.42%)</title><rect x="5.0773%" y="821" width="0.4169%" height="15" fill="rgb(243,84,45)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="831.50"></text></g><g><title>std::panic::catch_unwind (602 samples, 0.42%)</title><rect x="5.0773%" y="805" width="0.4169%" height="15" fill="rgb(252,49,23)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="815.50"></text></g><g><title>std::panicking::try (602 samples, 0.42%)</title><rect x="5.0773%" y="789" width="0.4169%" height="15" fill="rgb(215,19,7)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="799.50"></text></g><g><title>std::panicking::try::do_call (602 samples, 0.42%)</title><rect x="5.0773%" y="773" width="0.4169%" height="15" fill="rgb(238,81,41)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (602 samples, 0.42%)</title><rect x="5.0773%" y="757" width="0.4169%" height="15" fill="rgb(210,199,37)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (602 samples, 0.42%)</title><rect x="5.0773%" y="741" width="0.4169%" height="15" fill="rgb(244,192,49)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (602 samples, 0.42%)</title><rect x="5.0773%" y="725" width="0.4169%" height="15" fill="rgb(226,211,11)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="735.50"></text></g><g><title>async_ffi::FfiContext::with_context (602 samples, 0.42%)</title><rect x="5.0773%" y="709" width="0.4169%" height="15" fill="rgb(236,162,54)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (602 samples, 0.42%)</title><rect x="5.0773%" y="693" width="0.4169%" height="15" fill="rgb(220,229,9)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (602 samples, 0.42%)</title><rect x="5.0773%" y="677" width="0.4169%" height="15" fill="rgb(250,87,22)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (602 samples, 0.42%)</title><rect x="5.0773%" y="661" width="0.4169%" height="15" fill="rgb(239,43,17)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (602 samples, 0.42%)</title><rect x="5.0773%" y="645" width="0.4169%" height="15" fill="rgb(231,177,25)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (602 samples, 0.42%)</title><rect x="5.0773%" y="629" width="0.4169%" height="15" fill="rgb(219,179,1)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (602 samples, 0.42%)</title><rect x="5.0773%" y="613" width="0.4169%" height="15" fill="rgb(238,219,53)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (602 samples, 0.42%)</title><rect x="5.0773%" y="597" width="0.4169%" height="15" fill="rgb(232,167,36)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (602 samples, 0.42%)</title><rect x="5.0773%" y="581" width="0.4169%" height="15" fill="rgb(244,19,51)" fg:x="7331" fg:w="602"/><text x="5.3273%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (443 samples, 0.31%)</title><rect x="5.1874%" y="565" width="0.3068%" height="15" fill="rgb(224,6,22)" fg:x="7490" fg:w="443"/><text x="5.4374%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (443 samples, 0.31%)</title><rect x="5.1874%" y="549" width="0.3068%" height="15" fill="rgb(224,145,5)" fg:x="7490" fg:w="443"/><text x="5.4374%" y="559.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (443 samples, 0.31%)</title><rect x="5.1874%" y="533" width="0.3068%" height="15" fill="rgb(234,130,49)" fg:x="7490" fg:w="443"/><text x="5.4374%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (437 samples, 0.30%)</title><rect x="5.1916%" y="517" width="0.3027%" height="15" fill="rgb(254,6,2)" fg:x="7496" fg:w="437"/><text x="5.4416%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (437 samples, 0.30%)</title><rect x="5.1916%" y="501" width="0.3027%" height="15" fill="rgb(208,96,46)" fg:x="7496" fg:w="437"/><text x="5.4416%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (435 samples, 0.30%)</title><rect x="5.1930%" y="485" width="0.3013%" height="15" fill="rgb(239,3,39)" fg:x="7498" fg:w="435"/><text x="5.4430%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (337 samples, 0.23%)</title><rect x="5.2609%" y="469" width="0.2334%" height="15" fill="rgb(233,210,1)" fg:x="7596" fg:w="337"/><text x="5.5109%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (139 samples, 0.10%)</title><rect x="5.3980%" y="453" width="0.0963%" height="15" fill="rgb(244,137,37)" fg:x="7794" fg:w="139"/><text x="5.6480%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (139 samples, 0.10%)</title><rect x="5.3980%" y="437" width="0.0963%" height="15" fill="rgb(240,136,2)" fg:x="7794" fg:w="139"/><text x="5.6480%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (133 samples, 0.09%)</title><rect x="5.4021%" y="421" width="0.0921%" height="15" fill="rgb(239,18,37)" fg:x="7800" fg:w="133"/><text x="5.6521%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (133 samples, 0.09%)</title><rect x="5.4021%" y="405" width="0.0921%" height="15" fill="rgb(218,185,22)" fg:x="7800" fg:w="133"/><text x="5.6521%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (15 samples, 0.01%)</title><rect x="5.4839%" y="389" width="0.0104%" height="15" fill="rgb(225,218,4)" fg:x="7918" fg:w="15"/><text x="5.7339%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (15 samples, 0.01%)</title><rect x="5.4839%" y="373" width="0.0104%" height="15" fill="rgb(230,182,32)" fg:x="7918" fg:w="15"/><text x="5.7339%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (15 samples, 0.01%)</title><rect x="5.4839%" y="357" width="0.0104%" height="15" fill="rgb(242,56,43)" fg:x="7918" fg:w="15"/><text x="5.7339%" y="367.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (331 samples, 0.23%)</title><rect x="5.6757%" y="805" width="0.2292%" height="15" fill="rgb(233,99,24)" fg:x="8195" fg:w="331"/><text x="5.9257%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (466 samples, 0.32%)</title><rect x="5.6529%" y="821" width="0.3227%" height="15" fill="rgb(234,209,42)" fg:x="8162" fg:w="466"/><text x="5.9029%" y="831.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (102 samples, 0.07%)</title><rect x="5.9050%" y="805" width="0.0706%" height="15" fill="rgb(227,7,12)" fg:x="8526" fg:w="102"/><text x="6.1550%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (24 samples, 0.02%)</title><rect x="5.9777%" y="821" width="0.0166%" height="15" fill="rgb(245,203,43)" fg:x="8631" fg:w="24"/><text x="6.2277%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (24 samples, 0.02%)</title><rect x="5.9777%" y="805" width="0.0166%" height="15" fill="rgb(238,205,33)" fg:x="8631" fg:w="24"/><text x="6.2277%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="5.9777%" y="789" width="0.0166%" height="15" fill="rgb(231,56,7)" fg:x="8631" fg:w="24"/><text x="6.2277%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (34 samples, 0.02%)</title><rect x="5.9943%" y="821" width="0.0235%" height="15" fill="rgb(244,186,29)" fg:x="8655" fg:w="34"/><text x="6.2443%" y="831.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="6.0005%" y="805" width="0.0173%" height="15" fill="rgb(234,111,31)" fg:x="8664" fg:w="25"/><text x="6.2505%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (769 samples, 0.53%)</title><rect x="5.4956%" y="837" width="0.5326%" height="15" fill="rgb(241,149,10)" fg:x="7935" fg:w="769"/><text x="5.7456%" y="847.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (15 samples, 0.01%)</title><rect x="6.0179%" y="821" width="0.0104%" height="15" fill="rgb(249,206,44)" fg:x="8689" fg:w="15"/><text x="6.2679%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.02%)</title><rect x="6.0518%" y="821" width="0.0222%" height="15" fill="rgb(251,153,30)" fg:x="8738" fg:w="32"/><text x="6.3018%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="6.0518%" y="805" width="0.0222%" height="15" fill="rgb(239,152,38)" fg:x="8738" fg:w="32"/><text x="6.3018%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="6.0518%" y="789" width="0.0222%" height="15" fill="rgb(249,139,47)" fg:x="8738" fg:w="32"/><text x="6.3018%" y="799.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.02%)</title><rect x="6.0518%" y="773" width="0.0222%" height="15" fill="rgb(244,64,35)" fg:x="8738" fg:w="32"/><text x="6.3018%" y="783.50"></text></g><g><title>__rg_alloc (32 samples, 0.02%)</title><rect x="6.0518%" y="757" width="0.0222%" height="15" fill="rgb(216,46,15)" fg:x="8738" fg:w="32"/><text x="6.3018%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.02%)</title><rect x="6.0518%" y="741" width="0.0222%" height="15" fill="rgb(250,74,19)" fg:x="8738" fg:w="32"/><text x="6.3018%" y="751.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="6.0539%" y="725" width="0.0201%" height="15" fill="rgb(249,42,33)" fg:x="8741" fg:w="29"/><text x="6.3039%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (851 samples, 0.59%)</title><rect x="5.4943%" y="917" width="0.5894%" height="15" fill="rgb(242,149,17)" fg:x="7933" fg:w="851"/><text x="5.7443%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (851 samples, 0.59%)</title><rect x="5.4943%" y="901" width="0.5894%" height="15" fill="rgb(244,29,21)" fg:x="7933" fg:w="851"/><text x="5.7443%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (851 samples, 0.59%)</title><rect x="5.4943%" y="885" width="0.5894%" height="15" fill="rgb(220,130,37)" fg:x="7933" fg:w="851"/><text x="5.7443%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (851 samples, 0.59%)</title><rect x="5.4943%" y="869" width="0.5894%" height="15" fill="rgb(211,67,2)" fg:x="7933" fg:w="851"/><text x="5.7443%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (849 samples, 0.59%)</title><rect x="5.4956%" y="853" width="0.5880%" height="15" fill="rgb(235,68,52)" fg:x="7935" fg:w="849"/><text x="5.7456%" y="863.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (80 samples, 0.06%)</title><rect x="6.0282%" y="837" width="0.0554%" height="15" fill="rgb(246,142,3)" fg:x="8704" fg:w="80"/><text x="6.2782%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (866 samples, 0.60%)</title><rect x="5.4943%" y="933" width="0.5998%" height="15" fill="rgb(241,25,7)" fg:x="7933" fg:w="866"/><text x="5.7443%" y="943.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="6.0837%" y="917" width="0.0104%" height="15" fill="rgb(242,119,39)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="927.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (15 samples, 0.01%)</title><rect x="6.0837%" y="901" width="0.0104%" height="15" fill="rgb(241,98,45)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="911.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="6.0837%" y="885" width="0.0104%" height="15" fill="rgb(254,28,30)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="6.0837%" y="869" width="0.0104%" height="15" fill="rgb(241,142,54)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (15 samples, 0.01%)</title><rect x="6.0837%" y="853" width="0.0104%" height="15" fill="rgb(222,85,15)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="863.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="6.0837%" y="837" width="0.0104%" height="15" fill="rgb(210,85,47)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="847.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="6.0837%" y="821" width="0.0104%" height="15" fill="rgb(224,206,25)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="831.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (15 samples, 0.01%)</title><rect x="6.0837%" y="805" width="0.0104%" height="15" fill="rgb(243,201,19)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="815.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (15 samples, 0.01%)</title><rect x="6.0837%" y="789" width="0.0104%" height="15" fill="rgb(236,59,4)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="799.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (15 samples, 0.01%)</title><rect x="6.0837%" y="773" width="0.0104%" height="15" fill="rgb(254,179,45)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="783.50"></text></g><g><title>std::panic::catch_unwind (15 samples, 0.01%)</title><rect x="6.0837%" y="757" width="0.0104%" height="15" fill="rgb(226,14,10)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="767.50"></text></g><g><title>std::panicking::try (15 samples, 0.01%)</title><rect x="6.0837%" y="741" width="0.0104%" height="15" fill="rgb(244,27,41)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="751.50"></text></g><g><title>std::panicking::try::do_call (15 samples, 0.01%)</title><rect x="6.0837%" y="725" width="0.0104%" height="15" fill="rgb(235,35,32)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 0.01%)</title><rect x="6.0837%" y="709" width="0.0104%" height="15" fill="rgb(218,68,31)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once (15 samples, 0.01%)</title><rect x="6.0837%" y="693" width="0.0104%" height="15" fill="rgb(207,120,37)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (15 samples, 0.01%)</title><rect x="6.0837%" y="677" width="0.0104%" height="15" fill="rgb(227,98,0)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="687.50"></text></g><g><title>async_ffi::FfiContext::with_context (15 samples, 0.01%)</title><rect x="6.0837%" y="661" width="0.0104%" height="15" fill="rgb(207,7,3)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="671.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="6.0837%" y="645" width="0.0104%" height="15" fill="rgb(206,98,19)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="6.0837%" y="629" width="0.0104%" height="15" fill="rgb(217,5,26)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="639.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (15 samples, 0.01%)</title><rect x="6.0837%" y="613" width="0.0104%" height="15" fill="rgb(235,190,38)" fg:x="8784" fg:w="15"/><text x="6.3337%" y="623.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (164 samples, 0.11%)</title><rect x="6.1647%" y="805" width="0.1136%" height="15" fill="rgb(247,86,24)" fg:x="8901" fg:w="164"/><text x="6.4147%" y="815.50"></text></g><g><title>core::mem::replace (164 samples, 0.11%)</title><rect x="6.1647%" y="789" width="0.1136%" height="15" fill="rgb(205,101,16)" fg:x="8901" fg:w="164"/><text x="6.4147%" y="799.50"></text></g><g><title>core::ptr::read (164 samples, 0.11%)</title><rect x="6.1647%" y="773" width="0.1136%" height="15" fill="rgb(246,168,33)" fg:x="8901" fg:w="164"/><text x="6.4147%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (233 samples, 0.16%)</title><rect x="6.1397%" y="821" width="0.1614%" height="15" fill="rgb(231,114,1)" fg:x="8865" fg:w="233"/><text x="6.3897%" y="831.50"></text></g><g><title>core::mem::drop (33 samples, 0.02%)</title><rect x="6.2783%" y="805" width="0.0229%" height="15" fill="rgb(207,184,53)" fg:x="9065" fg:w="33"/><text x="6.5283%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (33 samples, 0.02%)</title><rect x="6.2783%" y="789" width="0.0229%" height="15" fill="rgb(224,95,51)" fg:x="9065" fg:w="33"/><text x="6.5283%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (176 samples, 0.12%)</title><rect x="6.3011%" y="821" width="0.1219%" height="15" fill="rgb(212,188,45)" fg:x="9098" fg:w="176"/><text x="6.5511%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (171 samples, 0.12%)</title><rect x="6.3046%" y="805" width="0.1184%" height="15" fill="rgb(223,154,38)" fg:x="9103" fg:w="171"/><text x="6.5546%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (171 samples, 0.12%)</title><rect x="6.3046%" y="789" width="0.1184%" height="15" fill="rgb(251,22,52)" fg:x="9103" fg:w="171"/><text x="6.5546%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (159 samples, 0.11%)</title><rect x="6.3129%" y="773" width="0.1101%" height="15" fill="rgb(229,209,22)" fg:x="9115" fg:w="159"/><text x="6.5629%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (159 samples, 0.11%)</title><rect x="6.3129%" y="757" width="0.1101%" height="15" fill="rgb(234,138,34)" fg:x="9115" fg:w="159"/><text x="6.5629%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (159 samples, 0.11%)</title><rect x="6.3129%" y="741" width="0.1101%" height="15" fill="rgb(212,95,11)" fg:x="9115" fg:w="159"/><text x="6.5629%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (159 samples, 0.11%)</title><rect x="6.3129%" y="725" width="0.1101%" height="15" fill="rgb(240,179,47)" fg:x="9115" fg:w="159"/><text x="6.5629%" y="735.50"></text></g><g><title>core::task::wake::Waker::will_wake (28 samples, 0.02%)</title><rect x="6.4286%" y="821" width="0.0194%" height="15" fill="rgb(240,163,11)" fg:x="9282" fg:w="28"/><text x="6.6786%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="6.4286%" y="805" width="0.0194%" height="15" fill="rgb(236,37,12)" fg:x="9282" fg:w="28"/><text x="6.6786%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.02%)</title><rect x="6.4306%" y="789" width="0.0173%" height="15" fill="rgb(232,164,16)" fg:x="9285" fg:w="25"/><text x="6.6806%" y="799.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="6.4306%" y="773" width="0.0173%" height="15" fill="rgb(244,205,15)" fg:x="9285" fg:w="25"/><text x="6.6806%" y="783.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,885 samples, 2.00%)</title><rect x="5.0739%" y="1061" width="1.9981%" height="15" fill="rgb(223,117,47)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="1071.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,885 samples, 2.00%)</title><rect x="5.0739%" y="1045" width="1.9981%" height="15" fill="rgb(244,107,35)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="1055.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,885 samples, 2.00%)</title><rect x="5.0739%" y="1029" width="1.9981%" height="15" fill="rgb(205,140,8)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="1039.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,885 samples, 2.00%)</title><rect x="5.0739%" y="1013" width="1.9981%" height="15" fill="rgb(228,84,46)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="1023.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,885 samples, 2.00%)</title><rect x="5.0739%" y="997" width="1.9981%" height="15" fill="rgb(254,188,9)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="1007.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,885 samples, 2.00%)</title><rect x="5.0739%" y="981" width="1.9981%" height="15" fill="rgb(206,112,54)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="991.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,885 samples, 2.00%)</title><rect x="5.0739%" y="965" width="1.9981%" height="15" fill="rgb(216,84,49)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="975.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,885 samples, 2.00%)</title><rect x="5.0739%" y="949" width="1.9981%" height="15" fill="rgb(214,194,35)" fg:x="7326" fg:w="2885"/><text x="5.3239%" y="959.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,412 samples, 0.98%)</title><rect x="6.0940%" y="933" width="0.9779%" height="15" fill="rgb(249,28,3)" fg:x="8799" fg:w="1412"/><text x="6.3440%" y="943.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,412 samples, 0.98%)</title><rect x="6.0940%" y="917" width="0.9779%" height="15" fill="rgb(222,56,52)" fg:x="8799" fg:w="1412"/><text x="6.3440%" y="927.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,412 samples, 0.98%)</title><rect x="6.0940%" y="901" width="0.9779%" height="15" fill="rgb(245,217,50)" fg:x="8799" fg:w="1412"/><text x="6.3440%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,412 samples, 0.98%)</title><rect x="6.0940%" y="885" width="0.9779%" height="15" fill="rgb(213,201,24)" fg:x="8799" fg:w="1412"/><text x="6.3440%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,412 samples, 0.98%)</title><rect x="6.0940%" y="869" width="0.9779%" height="15" fill="rgb(248,116,28)" fg:x="8799" fg:w="1412"/><text x="6.3440%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,412 samples, 0.98%)</title><rect x="6.0940%" y="853" width="0.9779%" height="15" fill="rgb(219,72,43)" fg:x="8799" fg:w="1412"/><text x="6.3440%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,412 samples, 0.98%)</title><rect x="6.0940%" y="837" width="0.9779%" height="15" fill="rgb(209,138,14)" fg:x="8799" fg:w="1412"/><text x="6.3440%" y="847.50"></text></g><g><title>event_listener::Inner::lock (901 samples, 0.62%)</title><rect x="6.4479%" y="821" width="0.6240%" height="15" fill="rgb(222,18,33)" fg:x="9310" fg:w="901"/><text x="6.6979%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (891 samples, 0.62%)</title><rect x="6.4549%" y="805" width="0.6171%" height="15" fill="rgb(213,199,7)" fg:x="9320" fg:w="891"/><text x="6.7049%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (878 samples, 0.61%)</title><rect x="6.4639%" y="789" width="0.6081%" height="15" fill="rgb(250,110,10)" fg:x="9333" fg:w="878"/><text x="6.7139%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (878 samples, 0.61%)</title><rect x="6.4639%" y="773" width="0.6081%" height="15" fill="rgb(248,123,6)" fg:x="9333" fg:w="878"/><text x="6.7139%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (878 samples, 0.61%)</title><rect x="6.4639%" y="757" width="0.6081%" height="15" fill="rgb(206,91,31)" fg:x="9333" fg:w="878"/><text x="6.7139%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (878 samples, 0.61%)</title><rect x="6.4639%" y="741" width="0.6081%" height="15" fill="rgb(211,154,13)" fg:x="9333" fg:w="878"/><text x="6.7139%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,776 samples, 3.31%)</title><rect x="3.7704%" y="1077" width="3.3078%" height="15" fill="rgb(225,148,7)" fg:x="5444" fg:w="4776"/><text x="4.0204%" y="1087.50">&lt;co..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="7.0782%" y="1077" width="0.0125%" height="15" fill="rgb(220,160,43)" fg:x="10220" fg:w="18"/><text x="7.3282%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 0.02%)</title><rect x="7.1121%" y="1077" width="0.0159%" height="15" fill="rgb(213,52,39)" fg:x="10269" fg:w="23"/><text x="7.3621%" y="1087.50"></text></g><g><title>[libc-2.31.so] (193 samples, 0.13%)</title><rect x="7.1336%" y="1077" width="0.1337%" height="15" fill="rgb(243,137,7)" fg:x="10300" fg:w="193"/><text x="7.3836%" y="1087.50"></text></g><g><title>__clock_gettime (75 samples, 0.05%)</title><rect x="7.2680%" y="1077" width="0.0519%" height="15" fill="rgb(230,79,13)" fg:x="10494" fg:w="75"/><text x="7.5180%" y="1087.50"></text></g><g><title>__vdso_clock_gettime (15 samples, 0.01%)</title><rect x="7.3213%" y="1077" width="0.0104%" height="15" fill="rgb(247,105,23)" fg:x="10571" fg:w="15"/><text x="7.5713%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (21 samples, 0.01%)</title><rect x="7.3317%" y="1077" width="0.0145%" height="15" fill="rgb(223,179,41)" fg:x="10586" fg:w="21"/><text x="7.5817%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (30 samples, 0.02%)</title><rect x="7.3462%" y="1077" width="0.0208%" height="15" fill="rgb(218,9,34)" fg:x="10607" fg:w="30"/><text x="7.5962%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (169 samples, 0.12%)</title><rect x="7.3795%" y="1077" width="0.1170%" height="15" fill="rgb(222,106,8)" fg:x="10655" fg:w="169"/><text x="7.6295%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (44 samples, 0.03%)</title><rect x="7.4965%" y="1077" width="0.0305%" height="15" fill="rgb(211,220,0)" fg:x="10824" fg:w="44"/><text x="7.7465%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="7.5810%" y="981" width="0.0118%" height="15" fill="rgb(229,52,16)" fg:x="10946" fg:w="17"/><text x="7.8310%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (17 samples, 0.01%)</title><rect x="7.5810%" y="965" width="0.0118%" height="15" fill="rgb(212,155,18)" fg:x="10946" fg:w="17"/><text x="7.8310%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (17 samples, 0.01%)</title><rect x="7.5810%" y="949" width="0.0118%" height="15" fill="rgb(242,21,14)" fg:x="10946" fg:w="17"/><text x="7.8310%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="7.5810%" y="933" width="0.0118%" height="15" fill="rgb(222,19,48)" fg:x="10946" fg:w="17"/><text x="7.8310%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="7.5810%" y="917" width="0.0118%" height="15" fill="rgb(232,45,27)" fg:x="10946" fg:w="17"/><text x="7.8310%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="7.5810%" y="901" width="0.0118%" height="15" fill="rgb(249,103,42)" fg:x="10946" fg:w="17"/><text x="7.8310%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="7.5810%" y="885" width="0.0118%" height="15" fill="rgb(246,81,33)" fg:x="10946" fg:w="17"/><text x="7.8310%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (76 samples, 0.05%)</title><rect x="7.5436%" y="1077" width="0.0526%" height="15" fill="rgb(252,33,42)" fg:x="10892" fg:w="76"/><text x="7.7936%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.5810%" y="1061" width="0.0152%" height="15" fill="rgb(209,212,41)" fg:x="10946" fg:w="22"/><text x="7.8310%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.5810%" y="1045" width="0.0152%" height="15" fill="rgb(207,154,6)" fg:x="10946" fg:w="22"/><text x="7.8310%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.02%)</title><rect x="7.5810%" y="1029" width="0.0152%" height="15" fill="rgb(223,64,47)" fg:x="10946" fg:w="22"/><text x="7.8310%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.02%)</title><rect x="7.5810%" y="1013" width="0.0152%" height="15" fill="rgb(211,161,38)" fg:x="10946" fg:w="22"/><text x="7.8310%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.5810%" y="997" width="0.0152%" height="15" fill="rgb(219,138,40)" fg:x="10946" fg:w="22"/><text x="7.8310%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (38 samples, 0.03%)</title><rect x="7.6025%" y="1077" width="0.0263%" height="15" fill="rgb(241,228,46)" fg:x="10977" fg:w="38"/><text x="7.8525%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (26 samples, 0.02%)</title><rect x="7.6108%" y="1061" width="0.0180%" height="15" fill="rgb(223,209,38)" fg:x="10989" fg:w="26"/><text x="7.8608%" y="1071.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="7.6108%" y="1045" width="0.0180%" height="15" fill="rgb(236,164,45)" fg:x="10989" fg:w="26"/><text x="7.8608%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="7.6108%" y="1029" width="0.0180%" height="15" fill="rgb(231,15,5)" fg:x="10989" fg:w="26"/><text x="7.8608%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="7.6108%" y="1013" width="0.0180%" height="15" fill="rgb(252,35,15)" fg:x="10989" fg:w="26"/><text x="7.8608%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (26 samples, 0.02%)</title><rect x="7.6108%" y="997" width="0.0180%" height="15" fill="rgb(248,181,18)" fg:x="10989" fg:w="26"/><text x="7.8608%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (26 samples, 0.02%)</title><rect x="7.6108%" y="981" width="0.0180%" height="15" fill="rgb(233,39,42)" fg:x="10989" fg:w="26"/><text x="7.8608%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="7.6108%" y="965" width="0.0180%" height="15" fill="rgb(238,110,33)" fg:x="10989" fg:w="26"/><text x="7.8608%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.01%)</title><rect x="7.6309%" y="1077" width="0.0125%" height="15" fill="rgb(233,195,10)" fg:x="11018" fg:w="18"/><text x="7.8809%" y="1087.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.01%)</title><rect x="7.6433%" y="1077" width="0.0111%" height="15" fill="rgb(254,105,3)" fg:x="11036" fg:w="16"/><text x="7.8933%" y="1087.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (18 samples, 0.01%)</title><rect x="7.6544%" y="1077" width="0.0125%" height="15" fill="rgb(221,225,9)" fg:x="11052" fg:w="18"/><text x="7.9044%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="7.6558%" y="1061" width="0.0111%" height="15" fill="rgb(224,227,45)" fg:x="11054" fg:w="16"/><text x="7.9058%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="7.6558%" y="1045" width="0.0111%" height="15" fill="rgb(229,198,43)" fg:x="11054" fg:w="16"/><text x="7.9058%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="7.6558%" y="1029" width="0.0111%" height="15" fill="rgb(206,209,35)" fg:x="11054" fg:w="16"/><text x="7.9058%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15 samples, 0.01%)</title><rect x="7.6669%" y="1077" width="0.0104%" height="15" fill="rgb(245,195,53)" fg:x="11070" fg:w="15"/><text x="7.9169%" y="1087.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (22 samples, 0.02%)</title><rect x="7.6773%" y="1077" width="0.0152%" height="15" fill="rgb(240,92,26)" fg:x="11085" fg:w="22"/><text x="7.9273%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (41 samples, 0.03%)</title><rect x="7.6974%" y="1077" width="0.0284%" height="15" fill="rgb(207,40,23)" fg:x="11114" fg:w="41"/><text x="7.9474%" y="1087.50"></text></g><g><title>async_executor::steal (173 samples, 0.12%)</title><rect x="7.7258%" y="1077" width="0.1198%" height="15" fill="rgb(223,111,35)" fg:x="11155" fg:w="173"/><text x="7.9758%" y="1087.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (16 samples, 0.01%)</title><rect x="7.8456%" y="1077" width="0.0111%" height="15" fill="rgb(229,147,28)" fg:x="11328" fg:w="16"/><text x="8.0956%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (443 samples, 0.31%)</title><rect x="8.0374%" y="725" width="0.3068%" height="15" fill="rgb(211,29,28)" fg:x="11605" fg:w="443"/><text x="8.2874%" y="735.50"></text></g><g><title>[libc-2.31.so] (388 samples, 0.27%)</title><rect x="8.0755%" y="709" width="0.2687%" height="15" fill="rgb(228,72,33)" fg:x="11660" fg:w="388"/><text x="8.3255%" y="719.50"></text></g><g><title>[libc-2.31.so] (146 samples, 0.10%)</title><rect x="8.3609%" y="709" width="0.1011%" height="15" fill="rgb(205,214,31)" fg:x="12072" fg:w="146"/><text x="8.6109%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (486 samples, 0.34%)</title><rect x="8.5769%" y="693" width="0.3366%" height="15" fill="rgb(224,111,15)" fg:x="12384" fg:w="486"/><text x="8.8269%" y="703.50"></text></g><g><title>[libc-2.31.so] (156 samples, 0.11%)</title><rect x="8.9170%" y="677" width="0.1080%" height="15" fill="rgb(253,21,26)" fg:x="12875" fg:w="156"/><text x="9.1670%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (298 samples, 0.21%)</title><rect x="8.9135%" y="693" width="0.2064%" height="15" fill="rgb(245,139,43)" fg:x="12870" fg:w="298"/><text x="9.1635%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (137 samples, 0.09%)</title><rect x="9.0251%" y="677" width="0.0949%" height="15" fill="rgb(252,170,7)" fg:x="13031" fg:w="137"/><text x="9.2751%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (143 samples, 0.10%)</title><rect x="9.1199%" y="661" width="0.0990%" height="15" fill="rgb(231,118,14)" fg:x="13168" fg:w="143"/><text x="9.3699%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (128 samples, 0.09%)</title><rect x="9.1303%" y="645" width="0.0887%" height="15" fill="rgb(238,83,0)" fg:x="13183" fg:w="128"/><text x="9.3803%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (128 samples, 0.09%)</title><rect x="9.1303%" y="629" width="0.0887%" height="15" fill="rgb(221,39,39)" fg:x="13183" fg:w="128"/><text x="9.3803%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (18 samples, 0.01%)</title><rect x="9.2488%" y="613" width="0.0125%" height="15" fill="rgb(222,119,46)" fg:x="13354" fg:w="18"/><text x="9.4988%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (18 samples, 0.01%)</title><rect x="9.2488%" y="597" width="0.0125%" height="15" fill="rgb(222,165,49)" fg:x="13354" fg:w="18"/><text x="9.4988%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (18 samples, 0.01%)</title><rect x="9.2488%" y="581" width="0.0125%" height="15" fill="rgb(219,113,52)" fg:x="13354" fg:w="18"/><text x="9.4988%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,422 samples, 1.68%)</title><rect x="9.2217%" y="645" width="1.6774%" height="15" fill="rgb(214,7,15)" fg:x="13315" fg:w="2422"/><text x="9.4717%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,400 samples, 1.66%)</title><rect x="9.2370%" y="629" width="1.6622%" height="15" fill="rgb(235,32,4)" fg:x="13337" fg:w="2400"/><text x="9.4870%" y="639.50"></text></g><g><title>std::panic::catch_unwind (2,365 samples, 1.64%)</title><rect x="9.2612%" y="613" width="1.6380%" height="15" fill="rgb(238,90,54)" fg:x="13372" fg:w="2365"/><text x="9.5112%" y="623.50"></text></g><g><title>std::panicking::try (2,365 samples, 1.64%)</title><rect x="9.2612%" y="597" width="1.6380%" height="15" fill="rgb(213,208,19)" fg:x="13372" fg:w="2365"/><text x="9.5112%" y="607.50"></text></g><g><title>std::panicking::try::do_call (2,365 samples, 1.64%)</title><rect x="9.2612%" y="581" width="1.6380%" height="15" fill="rgb(233,156,4)" fg:x="13372" fg:w="2365"/><text x="9.5112%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 0.01%)</title><rect x="10.8888%" y="565" width="0.0104%" height="15" fill="rgb(207,194,5)" fg:x="15722" fg:w="15"/><text x="11.1388%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (15 samples, 0.01%)</title><rect x="10.8888%" y="549" width="0.0104%" height="15" fill="rgb(206,111,30)" fg:x="15722" fg:w="15"/><text x="11.1388%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (15 samples, 0.01%)</title><rect x="10.8888%" y="533" width="0.0104%" height="15" fill="rgb(243,70,54)" fg:x="15722" fg:w="15"/><text x="11.1388%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (15 samples, 0.01%)</title><rect x="10.8888%" y="517" width="0.0104%" height="15" fill="rgb(242,28,8)" fg:x="15722" fg:w="15"/><text x="11.1388%" y="527.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,430 samples, 1.68%)</title><rect x="9.2190%" y="661" width="1.6830%" height="15" fill="rgb(219,106,18)" fg:x="13311" fg:w="2430"/><text x="9.4690%" y="671.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,681 samples, 1.86%)</title><rect x="9.1199%" y="693" width="1.8568%" height="15" fill="rgb(244,222,10)" fg:x="13168" fg:w="2681"/><text x="9.3699%" y="703.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,681 samples, 1.86%)</title><rect x="9.1199%" y="677" width="1.8568%" height="15" fill="rgb(236,179,52)" fg:x="13168" fg:w="2681"/><text x="9.3699%" y="687.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (108 samples, 0.07%)</title><rect x="10.9020%" y="661" width="0.0748%" height="15" fill="rgb(213,23,39)" fg:x="15741" fg:w="108"/><text x="11.1520%" y="671.50"></text></g><g><title>[libc-2.31.so] (372 samples, 0.26%)</title><rect x="10.9767%" y="693" width="0.2576%" height="15" fill="rgb(238,48,10)" fg:x="15849" fg:w="372"/><text x="11.2267%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (46 samples, 0.03%)</title><rect x="11.2344%" y="693" width="0.0319%" height="15" fill="rgb(251,196,23)" fg:x="16221" fg:w="46"/><text x="11.4844%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (18 samples, 0.01%)</title><rect x="11.2739%" y="645" width="0.0125%" height="15" fill="rgb(250,152,24)" fg:x="16278" fg:w="18"/><text x="11.5239%" y="655.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="11.2863%" y="645" width="0.0284%" height="15" fill="rgb(209,150,17)" fg:x="16296" fg:w="41"/><text x="11.5363%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (78 samples, 0.05%)</title><rect x="11.2662%" y="693" width="0.0540%" height="15" fill="rgb(234,202,34)" fg:x="16267" fg:w="78"/><text x="11.5162%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (78 samples, 0.05%)</title><rect x="11.2662%" y="677" width="0.0540%" height="15" fill="rgb(253,148,53)" fg:x="16267" fg:w="78"/><text x="11.5162%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.05%)</title><rect x="11.2662%" y="661" width="0.0540%" height="15" fill="rgb(218,129,16)" fg:x="16267" fg:w="78"/><text x="11.5162%" y="671.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.05%)</title><rect x="11.5003%" y="677" width="0.0547%" height="15" fill="rgb(216,85,19)" fg:x="16605" fg:w="79"/><text x="11.7503%" y="687.50"></text></g><g><title>[libc-2.31.so] (151 samples, 0.10%)</title><rect x="11.5772%" y="597" width="0.1046%" height="15" fill="rgb(235,228,7)" fg:x="16716" fg:w="151"/><text x="11.8272%" y="607.50"></text></g><g><title>[libc-2.31.so] (115 samples, 0.08%)</title><rect x="11.6901%" y="581" width="0.0796%" height="15" fill="rgb(245,175,0)" fg:x="16879" fg:w="115"/><text x="11.9401%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (40 samples, 0.03%)</title><rect x="11.8847%" y="469" width="0.0277%" height="15" fill="rgb(208,168,36)" fg:x="17160" fg:w="40"/><text x="12.1347%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (523 samples, 0.36%)</title><rect x="11.5551%" y="677" width="0.3622%" height="15" fill="rgb(246,171,24)" fg:x="16684" fg:w="523"/><text x="11.8051%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (502 samples, 0.35%)</title><rect x="11.5696%" y="661" width="0.3477%" height="15" fill="rgb(215,142,24)" fg:x="16705" fg:w="502"/><text x="11.8196%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (502 samples, 0.35%)</title><rect x="11.5696%" y="645" width="0.3477%" height="15" fill="rgb(250,187,7)" fg:x="16705" fg:w="502"/><text x="11.8196%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (502 samples, 0.35%)</title><rect x="11.5696%" y="629" width="0.3477%" height="15" fill="rgb(228,66,33)" fg:x="16705" fg:w="502"/><text x="11.8196%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (502 samples, 0.35%)</title><rect x="11.5696%" y="613" width="0.3477%" height="15" fill="rgb(234,215,21)" fg:x="16705" fg:w="502"/><text x="11.8196%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (340 samples, 0.24%)</title><rect x="11.6818%" y="597" width="0.2355%" height="15" fill="rgb(222,191,20)" fg:x="16867" fg:w="340"/><text x="11.9318%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (213 samples, 0.15%)</title><rect x="11.7698%" y="581" width="0.1475%" height="15" fill="rgb(245,79,54)" fg:x="16994" fg:w="213"/><text x="12.0198%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (213 samples, 0.15%)</title><rect x="11.7698%" y="565" width="0.1475%" height="15" fill="rgb(240,10,37)" fg:x="16994" fg:w="213"/><text x="12.0198%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (213 samples, 0.15%)</title><rect x="11.7698%" y="549" width="0.1475%" height="15" fill="rgb(214,192,32)" fg:x="16994" fg:w="213"/><text x="12.0198%" y="559.50"></text></g><g><title>alloc::alloc::alloc (208 samples, 0.14%)</title><rect x="11.7732%" y="533" width="0.1441%" height="15" fill="rgb(209,36,54)" fg:x="16999" fg:w="208"/><text x="12.0232%" y="543.50"></text></g><g><title>__rg_alloc (208 samples, 0.14%)</title><rect x="11.7732%" y="517" width="0.1441%" height="15" fill="rgb(220,10,11)" fg:x="16999" fg:w="208"/><text x="12.0232%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (208 samples, 0.14%)</title><rect x="11.7732%" y="501" width="0.1441%" height="15" fill="rgb(221,106,17)" fg:x="16999" fg:w="208"/><text x="12.0232%" y="511.50"></text></g><g><title>sn_rust_alloc (207 samples, 0.14%)</title><rect x="11.7739%" y="485" width="0.1434%" height="15" fill="rgb(251,142,44)" fg:x="17000" fg:w="207"/><text x="12.0239%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,996 samples, 3.46%)</title><rect x="8.4620%" y="709" width="3.4601%" height="15" fill="rgb(238,13,15)" fg:x="12218" fg:w="4996"/><text x="8.7120%" y="719.50">tre..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (869 samples, 0.60%)</title><rect x="11.3203%" y="693" width="0.6019%" height="15" fill="rgb(208,107,27)" fg:x="16345" fg:w="869"/><text x="11.5703%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (15 samples, 0.01%)</title><rect x="12.0662%" y="677" width="0.0104%" height="15" fill="rgb(205,136,37)" fg:x="17422" fg:w="15"/><text x="12.3162%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (15 samples, 0.01%)</title><rect x="12.0662%" y="661" width="0.0104%" height="15" fill="rgb(250,205,27)" fg:x="17422" fg:w="15"/><text x="12.3162%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="12.0662%" y="645" width="0.0104%" height="15" fill="rgb(210,80,43)" fg:x="17422" fg:w="15"/><text x="12.3162%" y="655.50"></text></g><g><title>sn_rust_dealloc (151 samples, 0.10%)</title><rect x="12.0807%" y="613" width="0.1046%" height="15" fill="rgb(247,160,36)" fg:x="17443" fg:w="151"/><text x="12.3307%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,533 samples, 3.83%)</title><rect x="8.3539%" y="725" width="3.8321%" height="15" fill="rgb(234,13,49)" fg:x="12062" fg:w="5533"/><text x="8.6039%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (381 samples, 0.26%)</title><rect x="11.9221%" y="709" width="0.2639%" height="15" fill="rgb(234,122,0)" fg:x="17214" fg:w="381"/><text x="12.1721%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (173 samples, 0.12%)</title><rect x="12.0662%" y="693" width="0.1198%" height="15" fill="rgb(207,146,38)" fg:x="17422" fg:w="173"/><text x="12.3162%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (158 samples, 0.11%)</title><rect x="12.0766%" y="677" width="0.1094%" height="15" fill="rgb(207,177,25)" fg:x="17437" fg:w="158"/><text x="12.3266%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (158 samples, 0.11%)</title><rect x="12.0766%" y="661" width="0.1094%" height="15" fill="rgb(211,178,42)" fg:x="17437" fg:w="158"/><text x="12.3266%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (158 samples, 0.11%)</title><rect x="12.0766%" y="645" width="0.1094%" height="15" fill="rgb(230,69,54)" fg:x="17437" fg:w="158"/><text x="12.3266%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (158 samples, 0.11%)</title><rect x="12.0766%" y="629" width="0.1094%" height="15" fill="rgb(214,135,41)" fg:x="17437" fg:w="158"/><text x="12.3266%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (49 samples, 0.03%)</title><rect x="12.2144%" y="613" width="0.0339%" height="15" fill="rgb(237,67,25)" fg:x="17636" fg:w="49"/><text x="12.4644%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="12.2158%" y="597" width="0.0326%" height="15" fill="rgb(222,189,50)" fg:x="17638" fg:w="47"/><text x="12.4658%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="12.2158%" y="581" width="0.0326%" height="15" fill="rgb(245,148,34)" fg:x="17638" fg:w="47"/><text x="12.4658%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (35 samples, 0.02%)</title><rect x="12.2241%" y="565" width="0.0242%" height="15" fill="rgb(222,29,6)" fg:x="17650" fg:w="35"/><text x="12.4741%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.02%)</title><rect x="12.2241%" y="549" width="0.0242%" height="15" fill="rgb(221,189,43)" fg:x="17650" fg:w="35"/><text x="12.4741%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.02%)</title><rect x="12.2241%" y="533" width="0.0242%" height="15" fill="rgb(207,36,27)" fg:x="17650" fg:w="35"/><text x="12.4741%" y="543.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.02%)</title><rect x="12.2248%" y="517" width="0.0235%" height="15" fill="rgb(217,90,24)" fg:x="17651" fg:w="34"/><text x="12.4748%" y="527.50"></text></g><g><title>__rg_alloc (34 samples, 0.02%)</title><rect x="12.2248%" y="501" width="0.0235%" height="15" fill="rgb(224,66,35)" fg:x="17651" fg:w="34"/><text x="12.4748%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.02%)</title><rect x="12.2248%" y="485" width="0.0235%" height="15" fill="rgb(221,13,50)" fg:x="17651" fg:w="34"/><text x="12.4748%" y="495.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.02%)</title><rect x="12.2269%" y="469" width="0.0215%" height="15" fill="rgb(236,68,49)" fg:x="17654" fg:w="31"/><text x="12.4769%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="12.2560%" y="565" width="0.0111%" height="15" fill="rgb(229,146,28)" fg:x="17696" fg:w="16"/><text x="12.5060%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (100 samples, 0.07%)</title><rect x="12.1999%" y="693" width="0.0693%" height="15" fill="rgb(225,31,38)" fg:x="17615" fg:w="100"/><text x="12.4499%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (86 samples, 0.06%)</title><rect x="12.2095%" y="677" width="0.0596%" height="15" fill="rgb(250,208,3)" fg:x="17629" fg:w="86"/><text x="12.4595%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (83 samples, 0.06%)</title><rect x="12.2116%" y="661" width="0.0575%" height="15" fill="rgb(246,54,23)" fg:x="17632" fg:w="83"/><text x="12.4616%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (79 samples, 0.05%)</title><rect x="12.2144%" y="645" width="0.0547%" height="15" fill="rgb(243,76,11)" fg:x="17636" fg:w="79"/><text x="12.4644%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (79 samples, 0.05%)</title><rect x="12.2144%" y="629" width="0.0547%" height="15" fill="rgb(245,21,50)" fg:x="17636" fg:w="79"/><text x="12.4644%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (30 samples, 0.02%)</title><rect x="12.2483%" y="613" width="0.0208%" height="15" fill="rgb(228,9,43)" fg:x="17685" fg:w="30"/><text x="12.4983%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (25 samples, 0.02%)</title><rect x="12.2518%" y="597" width="0.0173%" height="15" fill="rgb(208,100,47)" fg:x="17690" fg:w="25"/><text x="12.5018%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (25 samples, 0.02%)</title><rect x="12.2518%" y="581" width="0.0173%" height="15" fill="rgb(232,26,8)" fg:x="17690" fg:w="25"/><text x="12.5018%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (51 samples, 0.04%)</title><rect x="12.4450%" y="613" width="0.0353%" height="15" fill="rgb(216,166,38)" fg:x="17969" fg:w="51"/><text x="12.6950%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (51 samples, 0.04%)</title><rect x="12.4450%" y="597" width="0.0353%" height="15" fill="rgb(251,202,51)" fg:x="17969" fg:w="51"/><text x="12.6950%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (41 samples, 0.03%)</title><rect x="12.4520%" y="581" width="0.0284%" height="15" fill="rgb(254,216,34)" fg:x="17979" fg:w="41"/><text x="12.7020%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.02%)</title><rect x="12.4582%" y="565" width="0.0222%" height="15" fill="rgb(251,32,27)" fg:x="17988" fg:w="32"/><text x="12.7082%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="12.4582%" y="549" width="0.0222%" height="15" fill="rgb(208,127,28)" fg:x="17988" fg:w="32"/><text x="12.7082%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="12.4582%" y="533" width="0.0222%" height="15" fill="rgb(224,137,22)" fg:x="17988" fg:w="32"/><text x="12.7082%" y="543.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.02%)</title><rect x="12.4582%" y="517" width="0.0222%" height="15" fill="rgb(254,70,32)" fg:x="17988" fg:w="32"/><text x="12.7082%" y="527.50"></text></g><g><title>__rg_alloc (32 samples, 0.02%)</title><rect x="12.4582%" y="501" width="0.0222%" height="15" fill="rgb(229,75,37)" fg:x="17988" fg:w="32"/><text x="12.7082%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.02%)</title><rect x="12.4582%" y="485" width="0.0222%" height="15" fill="rgb(252,64,23)" fg:x="17988" fg:w="32"/><text x="12.7082%" y="495.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="12.4637%" y="469" width="0.0166%" height="15" fill="rgb(232,162,48)" fg:x="17996" fg:w="24"/><text x="12.7137%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (78 samples, 0.05%)</title><rect x="12.4298%" y="661" width="0.0540%" height="15" fill="rgb(246,160,12)" fg:x="17947" fg:w="78"/><text x="12.6798%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (70 samples, 0.05%)</title><rect x="12.4353%" y="645" width="0.0485%" height="15" fill="rgb(247,166,0)" fg:x="17955" fg:w="70"/><text x="12.6853%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (70 samples, 0.05%)</title><rect x="12.4353%" y="629" width="0.0485%" height="15" fill="rgb(249,219,21)" fg:x="17955" fg:w="70"/><text x="12.6853%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="12.4900%" y="645" width="0.0235%" height="15" fill="rgb(205,209,3)" fg:x="18034" fg:w="34"/><text x="12.7400%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (34 samples, 0.02%)</title><rect x="12.4900%" y="629" width="0.0235%" height="15" fill="rgb(243,44,1)" fg:x="18034" fg:w="34"/><text x="12.7400%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.02%)</title><rect x="12.5136%" y="645" width="0.0222%" height="15" fill="rgb(206,159,16)" fg:x="18068" fg:w="32"/><text x="12.7636%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (32 samples, 0.02%)</title><rect x="12.5136%" y="629" width="0.0222%" height="15" fill="rgb(244,77,30)" fg:x="18068" fg:w="32"/><text x="12.7636%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="12.5358%" y="645" width="0.0118%" height="15" fill="rgb(218,69,12)" fg:x="18100" fg:w="17"/><text x="12.7858%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (15 samples, 0.01%)</title><rect x="12.5371%" y="629" width="0.0104%" height="15" fill="rgb(212,87,7)" fg:x="18102" fg:w="15"/><text x="12.7871%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (603 samples, 0.42%)</title><rect x="12.1860%" y="725" width="0.4176%" height="15" fill="rgb(245,114,25)" fg:x="17595" fg:w="603"/><text x="12.4360%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (590 samples, 0.41%)</title><rect x="12.1950%" y="709" width="0.4086%" height="15" fill="rgb(210,61,42)" fg:x="17608" fg:w="590"/><text x="12.4450%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (483 samples, 0.33%)</title><rect x="12.2691%" y="693" width="0.3345%" height="15" fill="rgb(211,52,33)" fg:x="17715" fg:w="483"/><text x="12.5191%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (257 samples, 0.18%)</title><rect x="12.4256%" y="677" width="0.1780%" height="15" fill="rgb(234,58,33)" fg:x="17941" fg:w="257"/><text x="12.6756%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (173 samples, 0.12%)</title><rect x="12.4838%" y="661" width="0.1198%" height="15" fill="rgb(220,115,36)" fg:x="18025" fg:w="173"/><text x="12.7338%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (81 samples, 0.06%)</title><rect x="12.5475%" y="645" width="0.0561%" height="15" fill="rgb(243,153,54)" fg:x="18117" fg:w="81"/><text x="12.7975%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (81 samples, 0.06%)</title><rect x="12.5475%" y="629" width="0.0561%" height="15" fill="rgb(251,47,18)" fg:x="18117" fg:w="81"/><text x="12.7975%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.06%)</title><rect x="12.5475%" y="613" width="0.0561%" height="15" fill="rgb(242,102,42)" fg:x="18117" fg:w="81"/><text x="12.7975%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (72 samples, 0.05%)</title><rect x="12.5538%" y="597" width="0.0499%" height="15" fill="rgb(234,31,38)" fg:x="18126" fg:w="72"/><text x="12.8038%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (72 samples, 0.05%)</title><rect x="12.5538%" y="581" width="0.0499%" height="15" fill="rgb(221,117,51)" fg:x="18126" fg:w="72"/><text x="12.8038%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (72 samples, 0.05%)</title><rect x="12.5538%" y="565" width="0.0499%" height="15" fill="rgb(212,20,18)" fg:x="18126" fg:w="72"/><text x="12.8038%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (72 samples, 0.05%)</title><rect x="12.5538%" y="549" width="0.0499%" height="15" fill="rgb(245,133,36)" fg:x="18126" fg:w="72"/><text x="12.8038%" y="559.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.04%)</title><rect x="12.5628%" y="533" width="0.0409%" height="15" fill="rgb(212,6,19)" fg:x="18139" fg:w="59"/><text x="12.8128%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="12.6119%" y="709" width="0.0263%" height="15" fill="rgb(218,1,36)" fg:x="18210" fg:w="38"/><text x="12.8619%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (25 samples, 0.02%)</title><rect x="12.6209%" y="693" width="0.0173%" height="15" fill="rgb(246,84,54)" fg:x="18223" fg:w="25"/><text x="12.8709%" y="703.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (66 samples, 0.05%)</title><rect x="12.6826%" y="597" width="0.0457%" height="15" fill="rgb(242,110,6)" fg:x="18312" fg:w="66"/><text x="12.9326%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (56 samples, 0.04%)</title><rect x="12.6895%" y="581" width="0.0388%" height="15" fill="rgb(214,47,5)" fg:x="18322" fg:w="56"/><text x="12.9395%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (56 samples, 0.04%)</title><rect x="12.6895%" y="565" width="0.0388%" height="15" fill="rgb(218,159,25)" fg:x="18322" fg:w="56"/><text x="12.9395%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (40 samples, 0.03%)</title><rect x="12.7006%" y="549" width="0.0277%" height="15" fill="rgb(215,211,28)" fg:x="18338" fg:w="40"/><text x="12.9506%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="12.7006%" y="533" width="0.0277%" height="15" fill="rgb(238,59,32)" fg:x="18338" fg:w="40"/><text x="12.9506%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="12.7006%" y="517" width="0.0277%" height="15" fill="rgb(226,82,3)" fg:x="18338" fg:w="40"/><text x="12.9506%" y="527.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="12.7006%" y="501" width="0.0277%" height="15" fill="rgb(240,164,32)" fg:x="18338" fg:w="40"/><text x="12.9506%" y="511.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="12.7006%" y="485" width="0.0277%" height="15" fill="rgb(232,46,7)" fg:x="18338" fg:w="40"/><text x="12.9506%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="12.7006%" y="469" width="0.0277%" height="15" fill="rgb(229,129,53)" fg:x="18338" fg:w="40"/><text x="12.9506%" y="479.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.02%)</title><rect x="12.7068%" y="453" width="0.0215%" height="15" fill="rgb(234,188,29)" fg:x="18347" fg:w="31"/><text x="12.9568%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (26 samples, 0.02%)</title><rect x="12.9936%" y="533" width="0.0180%" height="15" fill="rgb(246,141,4)" fg:x="18761" fg:w="26"/><text x="13.2436%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (26 samples, 0.02%)</title><rect x="12.9936%" y="517" width="0.0180%" height="15" fill="rgb(229,23,39)" fg:x="18761" fg:w="26"/><text x="13.2436%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (39 samples, 0.03%)</title><rect x="13.0116%" y="533" width="0.0270%" height="15" fill="rgb(206,12,3)" fg:x="18787" fg:w="39"/><text x="13.2616%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (39 samples, 0.03%)</title><rect x="13.0116%" y="517" width="0.0270%" height="15" fill="rgb(252,226,20)" fg:x="18787" fg:w="39"/><text x="13.2616%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (98 samples, 0.07%)</title><rect x="12.9936%" y="549" width="0.0679%" height="15" fill="rgb(216,123,35)" fg:x="18761" fg:w="98"/><text x="13.2436%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (33 samples, 0.02%)</title><rect x="13.0386%" y="533" width="0.0229%" height="15" fill="rgb(212,68,40)" fg:x="18826" fg:w="33"/><text x="13.2886%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (24 samples, 0.02%)</title><rect x="13.0448%" y="517" width="0.0166%" height="15" fill="rgb(254,125,32)" fg:x="18835" fg:w="24"/><text x="13.2948%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="13.0448%" y="501" width="0.0166%" height="15" fill="rgb(253,97,22)" fg:x="18835" fg:w="24"/><text x="13.2948%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (574 samples, 0.40%)</title><rect x="12.6715%" y="677" width="0.3975%" height="15" fill="rgb(241,101,14)" fg:x="18296" fg:w="574"/><text x="12.9215%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (565 samples, 0.39%)</title><rect x="12.6777%" y="661" width="0.3913%" height="15" fill="rgb(238,103,29)" fg:x="18305" fg:w="565"/><text x="12.9277%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (558 samples, 0.39%)</title><rect x="12.6826%" y="645" width="0.3865%" height="15" fill="rgb(233,195,47)" fg:x="18312" fg:w="558"/><text x="12.9326%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (558 samples, 0.39%)</title><rect x="12.6826%" y="629" width="0.3865%" height="15" fill="rgb(246,218,30)" fg:x="18312" fg:w="558"/><text x="12.9326%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (558 samples, 0.39%)</title><rect x="12.6826%" y="613" width="0.3865%" height="15" fill="rgb(219,145,47)" fg:x="18312" fg:w="558"/><text x="12.9326%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (492 samples, 0.34%)</title><rect x="12.7283%" y="597" width="0.3408%" height="15" fill="rgb(243,12,26)" fg:x="18378" fg:w="492"/><text x="12.9783%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (124 samples, 0.09%)</title><rect x="12.9832%" y="581" width="0.0859%" height="15" fill="rgb(214,87,16)" fg:x="18746" fg:w="124"/><text x="13.2332%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (124 samples, 0.09%)</title><rect x="12.9832%" y="565" width="0.0859%" height="15" fill="rgb(208,99,42)" fg:x="18746" fg:w="124"/><text x="13.2332%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (50 samples, 0.03%)</title><rect x="13.2041%" y="597" width="0.0346%" height="15" fill="rgb(253,99,2)" fg:x="19065" fg:w="50"/><text x="13.4541%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (50 samples, 0.03%)</title><rect x="13.2041%" y="581" width="0.0346%" height="15" fill="rgb(220,168,23)" fg:x="19065" fg:w="50"/><text x="13.4541%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (38 samples, 0.03%)</title><rect x="13.2124%" y="565" width="0.0263%" height="15" fill="rgb(242,38,24)" fg:x="19077" fg:w="38"/><text x="13.4624%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.02%)</title><rect x="13.2173%" y="549" width="0.0215%" height="15" fill="rgb(225,182,9)" fg:x="19084" fg:w="31"/><text x="13.4673%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.02%)</title><rect x="13.2173%" y="533" width="0.0215%" height="15" fill="rgb(243,178,37)" fg:x="19084" fg:w="31"/><text x="13.4673%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.02%)</title><rect x="13.2173%" y="517" width="0.0215%" height="15" fill="rgb(232,139,19)" fg:x="19084" fg:w="31"/><text x="13.4673%" y="527.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.02%)</title><rect x="13.2173%" y="501" width="0.0215%" height="15" fill="rgb(225,201,24)" fg:x="19084" fg:w="31"/><text x="13.4673%" y="511.50"></text></g><g><title>__rg_alloc (31 samples, 0.02%)</title><rect x="13.2173%" y="485" width="0.0215%" height="15" fill="rgb(221,47,46)" fg:x="19084" fg:w="31"/><text x="13.4673%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.02%)</title><rect x="13.2173%" y="469" width="0.0215%" height="15" fill="rgb(249,23,13)" fg:x="19084" fg:w="31"/><text x="13.4673%" y="479.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="13.2207%" y="453" width="0.0180%" height="15" fill="rgb(219,9,5)" fg:x="19089" fg:w="26"/><text x="13.4707%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (83 samples, 0.06%)</title><rect x="13.1902%" y="645" width="0.0575%" height="15" fill="rgb(254,171,16)" fg:x="19045" fg:w="83"/><text x="13.4402%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (75 samples, 0.05%)</title><rect x="13.1958%" y="629" width="0.0519%" height="15" fill="rgb(230,171,20)" fg:x="19053" fg:w="75"/><text x="13.4458%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (75 samples, 0.05%)</title><rect x="13.1958%" y="613" width="0.0519%" height="15" fill="rgb(210,71,41)" fg:x="19053" fg:w="75"/><text x="13.4458%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="13.2637%" y="629" width="0.0270%" height="15" fill="rgb(206,173,20)" fg:x="19151" fg:w="39"/><text x="13.5137%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (39 samples, 0.03%)</title><rect x="13.2637%" y="613" width="0.0270%" height="15" fill="rgb(233,88,34)" fg:x="19151" fg:w="39"/><text x="13.5137%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (17 samples, 0.01%)</title><rect x="13.2962%" y="597" width="0.0118%" height="15" fill="rgb(223,209,46)" fg:x="19198" fg:w="17"/><text x="13.5462%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (16 samples, 0.01%)</title><rect x="13.2969%" y="581" width="0.0111%" height="15" fill="rgb(250,43,18)" fg:x="19199" fg:w="16"/><text x="13.5469%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (42 samples, 0.03%)</title><rect x="13.2907%" y="629" width="0.0291%" height="15" fill="rgb(208,13,10)" fg:x="19190" fg:w="42"/><text x="13.5407%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (42 samples, 0.03%)</title><rect x="13.2907%" y="613" width="0.0291%" height="15" fill="rgb(212,200,36)" fg:x="19190" fg:w="42"/><text x="13.5407%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (17 samples, 0.01%)</title><rect x="13.3080%" y="597" width="0.0118%" height="15" fill="rgb(225,90,30)" fg:x="19215" fg:w="17"/><text x="13.5580%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (17 samples, 0.01%)</title><rect x="13.3080%" y="581" width="0.0118%" height="15" fill="rgb(236,182,39)" fg:x="19215" fg:w="17"/><text x="13.5580%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="13.3198%" y="629" width="0.0118%" height="15" fill="rgb(212,144,35)" fg:x="19232" fg:w="17"/><text x="13.5698%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="13.3205%" y="613" width="0.0111%" height="15" fill="rgb(228,63,44)" fg:x="19233" fg:w="16"/><text x="13.5705%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="13.3211%" y="597" width="0.0104%" height="15" fill="rgb(228,109,6)" fg:x="19234" fg:w="15"/><text x="13.5711%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (15 samples, 0.01%)</title><rect x="13.3211%" y="581" width="0.0104%" height="15" fill="rgb(238,117,24)" fg:x="19234" fg:w="15"/><text x="13.5711%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (15 samples, 0.01%)</title><rect x="13.3211%" y="565" width="0.0104%" height="15" fill="rgb(242,26,26)" fg:x="19234" fg:w="15"/><text x="13.5711%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="13.3211%" y="549" width="0.0104%" height="15" fill="rgb(221,92,48)" fg:x="19234" fg:w="15"/><text x="13.5711%" y="559.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,160 samples, 0.80%)</title><rect x="12.6036%" y="725" width="0.8034%" height="15" fill="rgb(209,209,32)" fg:x="18198" fg:w="1160"/><text x="12.8536%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,110 samples, 0.77%)</title><rect x="12.6383%" y="709" width="0.7688%" height="15" fill="rgb(221,70,22)" fg:x="18248" fg:w="1110"/><text x="12.8883%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,069 samples, 0.74%)</title><rect x="12.6667%" y="693" width="0.7404%" height="15" fill="rgb(248,145,5)" fg:x="18289" fg:w="1069"/><text x="12.9167%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (488 samples, 0.34%)</title><rect x="13.0690%" y="677" width="0.3380%" height="15" fill="rgb(226,116,26)" fg:x="18870" fg:w="488"/><text x="13.3190%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (320 samples, 0.22%)</title><rect x="13.1854%" y="661" width="0.2216%" height="15" fill="rgb(244,5,17)" fg:x="19038" fg:w="320"/><text x="13.4354%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (230 samples, 0.16%)</title><rect x="13.2477%" y="645" width="0.1593%" height="15" fill="rgb(252,159,33)" fg:x="19128" fg:w="230"/><text x="13.4977%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (109 samples, 0.08%)</title><rect x="13.3315%" y="629" width="0.0755%" height="15" fill="rgb(206,71,0)" fg:x="19249" fg:w="109"/><text x="13.5815%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (109 samples, 0.08%)</title><rect x="13.3315%" y="613" width="0.0755%" height="15" fill="rgb(233,118,54)" fg:x="19249" fg:w="109"/><text x="13.5815%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (109 samples, 0.08%)</title><rect x="13.3315%" y="597" width="0.0755%" height="15" fill="rgb(234,83,48)" fg:x="19249" fg:w="109"/><text x="13.5815%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (106 samples, 0.07%)</title><rect x="13.3336%" y="581" width="0.0734%" height="15" fill="rgb(228,3,54)" fg:x="19252" fg:w="106"/><text x="13.5836%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (105 samples, 0.07%)</title><rect x="13.3343%" y="565" width="0.0727%" height="15" fill="rgb(226,155,13)" fg:x="19253" fg:w="105"/><text x="13.5843%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (105 samples, 0.07%)</title><rect x="13.3343%" y="549" width="0.0727%" height="15" fill="rgb(241,28,37)" fg:x="19253" fg:w="105"/><text x="13.5843%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (105 samples, 0.07%)</title><rect x="13.3343%" y="533" width="0.0727%" height="15" fill="rgb(233,93,10)" fg:x="19253" fg:w="105"/><text x="13.5843%" y="543.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.06%)</title><rect x="13.3475%" y="517" width="0.0596%" height="15" fill="rgb(225,113,19)" fg:x="19272" fg:w="86"/><text x="13.5975%" y="527.50"></text></g><g><title>[libc-2.31.so] (1,023 samples, 0.71%)</title><rect x="13.4070%" y="725" width="0.7085%" height="15" fill="rgb(241,2,18)" fg:x="19358" fg:w="1023"/><text x="13.6570%" y="735.50"></text></g><g><title>sn_rust_dealloc (150 samples, 0.10%)</title><rect x="14.1280%" y="565" width="0.1039%" height="15" fill="rgb(228,207,21)" fg:x="20399" fg:w="150"/><text x="14.3780%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (165 samples, 0.11%)</title><rect x="14.1183%" y="725" width="0.1143%" height="15" fill="rgb(213,211,35)" fg:x="20385" fg:w="165"/><text x="14.3683%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (165 samples, 0.11%)</title><rect x="14.1183%" y="709" width="0.1143%" height="15" fill="rgb(209,83,10)" fg:x="20385" fg:w="165"/><text x="14.3683%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (158 samples, 0.11%)</title><rect x="14.1232%" y="693" width="0.1094%" height="15" fill="rgb(209,164,1)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (158 samples, 0.11%)</title><rect x="14.1232%" y="677" width="0.1094%" height="15" fill="rgb(213,184,43)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (158 samples, 0.11%)</title><rect x="14.1232%" y="661" width="0.1094%" height="15" fill="rgb(231,61,34)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (158 samples, 0.11%)</title><rect x="14.1232%" y="645" width="0.1094%" height="15" fill="rgb(235,75,3)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (158 samples, 0.11%)</title><rect x="14.1232%" y="629" width="0.1094%" height="15" fill="rgb(220,106,47)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (158 samples, 0.11%)</title><rect x="14.1232%" y="613" width="0.1094%" height="15" fill="rgb(210,196,33)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="623.50"></text></g><g><title>__rg_dealloc (158 samples, 0.11%)</title><rect x="14.1232%" y="597" width="0.1094%" height="15" fill="rgb(229,154,42)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (158 samples, 0.11%)</title><rect x="14.1232%" y="581" width="0.1094%" height="15" fill="rgb(228,114,26)" fg:x="20392" fg:w="158"/><text x="14.3732%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (19 samples, 0.01%)</title><rect x="14.2326%" y="725" width="0.0132%" height="15" fill="rgb(208,144,1)" fg:x="20550" fg:w="19"/><text x="14.4826%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (19 samples, 0.01%)</title><rect x="14.2326%" y="709" width="0.0132%" height="15" fill="rgb(239,112,37)" fg:x="20550" fg:w="19"/><text x="14.4826%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (41 samples, 0.03%)</title><rect x="14.2665%" y="709" width="0.0284%" height="15" fill="rgb(210,96,50)" fg:x="20599" fg:w="41"/><text x="14.5165%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (38 samples, 0.03%)</title><rect x="14.2949%" y="709" width="0.0263%" height="15" fill="rgb(222,178,2)" fg:x="20640" fg:w="38"/><text x="14.5449%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (176 samples, 0.12%)</title><rect x="14.3212%" y="693" width="0.1219%" height="15" fill="rgb(226,74,18)" fg:x="20678" fg:w="176"/><text x="14.5712%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (72 samples, 0.05%)</title><rect x="14.4951%" y="661" width="0.0499%" height="15" fill="rgb(225,67,54)" fg:x="20929" fg:w="72"/><text x="14.7451%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (72 samples, 0.05%)</title><rect x="14.4951%" y="645" width="0.0499%" height="15" fill="rgb(251,92,32)" fg:x="20929" fg:w="72"/><text x="14.7451%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (70 samples, 0.05%)</title><rect x="14.4965%" y="629" width="0.0485%" height="15" fill="rgb(228,149,22)" fg:x="20931" fg:w="70"/><text x="14.7465%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (37 samples, 0.03%)</title><rect x="14.5193%" y="613" width="0.0256%" height="15" fill="rgb(243,54,13)" fg:x="20964" fg:w="37"/><text x="14.7693%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (37 samples, 0.03%)</title><rect x="14.5193%" y="597" width="0.0256%" height="15" fill="rgb(243,180,28)" fg:x="20964" fg:w="37"/><text x="14.7693%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (370 samples, 0.26%)</title><rect x="14.3212%" y="709" width="0.2563%" height="15" fill="rgb(208,167,24)" fg:x="20678" fg:w="370"/><text x="14.5712%" y="719.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (194 samples, 0.13%)</title><rect x="14.4431%" y="693" width="0.1344%" height="15" fill="rgb(245,73,45)" fg:x="20854" fg:w="194"/><text x="14.6931%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (194 samples, 0.13%)</title><rect x="14.4431%" y="677" width="0.1344%" height="15" fill="rgb(237,203,48)" fg:x="20854" fg:w="194"/><text x="14.6931%" y="687.50"></text></g><g><title>core::time::Duration::new (47 samples, 0.03%)</title><rect x="14.5449%" y="661" width="0.0326%" height="15" fill="rgb(211,197,16)" fg:x="21001" fg:w="47"/><text x="14.7949%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (1,304 samples, 0.90%)</title><rect x="14.2457%" y="725" width="0.9031%" height="15" fill="rgb(243,99,51)" fg:x="20569" fg:w="1304"/><text x="14.4957%" y="735.50"></text></g><g><title>std::time::SystemTime::now (825 samples, 0.57%)</title><rect x="14.5775%" y="709" width="0.5714%" height="15" fill="rgb(215,123,29)" fg:x="21048" fg:w="825"/><text x="14.8275%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (825 samples, 0.57%)</title><rect x="14.5775%" y="693" width="0.5714%" height="15" fill="rgb(239,186,37)" fg:x="21048" fg:w="825"/><text x="14.8275%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (825 samples, 0.57%)</title><rect x="14.5775%" y="677" width="0.5714%" height="15" fill="rgb(252,136,39)" fg:x="21048" fg:w="825"/><text x="14.8275%" y="687.50"></text></g><g><title>__clock_gettime (689 samples, 0.48%)</title><rect x="14.6717%" y="661" width="0.4772%" height="15" fill="rgb(223,213,32)" fg:x="21184" fg:w="689"/><text x="14.9217%" y="671.50"></text></g><g><title>__vdso_clock_gettime (654 samples, 0.45%)</title><rect x="14.6959%" y="645" width="0.4529%" height="15" fill="rgb(233,115,5)" fg:x="21219" fg:w="654"/><text x="14.9459%" y="655.50"></text></g><g><title>[[vdso]] (585 samples, 0.41%)</title><rect x="14.7437%" y="629" width="0.4052%" height="15" fill="rgb(207,226,44)" fg:x="21288" fg:w="585"/><text x="14.9937%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (31 samples, 0.02%)</title><rect x="15.1669%" y="613" width="0.0215%" height="15" fill="rgb(208,126,0)" fg:x="21899" fg:w="31"/><text x="15.4169%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (15 samples, 0.01%)</title><rect x="15.1780%" y="597" width="0.0104%" height="15" fill="rgb(244,66,21)" fg:x="21915" fg:w="15"/><text x="15.4280%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.03%)</title><rect x="15.1620%" y="677" width="0.0319%" height="15" fill="rgb(222,97,12)" fg:x="21892" fg:w="46"/><text x="15.4120%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.03%)</title><rect x="15.1620%" y="661" width="0.0319%" height="15" fill="rgb(219,213,19)" fg:x="21892" fg:w="46"/><text x="15.4120%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.03%)</title><rect x="15.1620%" y="645" width="0.0319%" height="15" fill="rgb(252,169,30)" fg:x="21892" fg:w="46"/><text x="15.4120%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (46 samples, 0.03%)</title><rect x="15.1620%" y="629" width="0.0319%" height="15" fill="rgb(206,32,51)" fg:x="21892" fg:w="46"/><text x="15.4120%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (16 samples, 0.01%)</title><rect x="15.2050%" y="613" width="0.0111%" height="15" fill="rgb(250,172,42)" fg:x="21954" fg:w="16"/><text x="15.4550%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (15 samples, 0.01%)</title><rect x="15.2057%" y="597" width="0.0104%" height="15" fill="rgb(209,34,43)" fg:x="21955" fg:w="15"/><text x="15.4557%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (50 samples, 0.03%)</title><rect x="15.1939%" y="677" width="0.0346%" height="15" fill="rgb(223,11,35)" fg:x="21938" fg:w="50"/><text x="15.4439%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (50 samples, 0.03%)</title><rect x="15.1939%" y="661" width="0.0346%" height="15" fill="rgb(251,219,26)" fg:x="21938" fg:w="50"/><text x="15.4439%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (50 samples, 0.03%)</title><rect x="15.1939%" y="645" width="0.0346%" height="15" fill="rgb(231,119,3)" fg:x="21938" fg:w="50"/><text x="15.4439%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (50 samples, 0.03%)</title><rect x="15.1939%" y="629" width="0.0346%" height="15" fill="rgb(216,97,11)" fg:x="21938" fg:w="50"/><text x="15.4439%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (18 samples, 0.01%)</title><rect x="15.2161%" y="613" width="0.0125%" height="15" fill="rgb(223,59,9)" fg:x="21970" fg:w="18"/><text x="15.4661%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (18 samples, 0.01%)</title><rect x="15.2161%" y="597" width="0.0125%" height="15" fill="rgb(233,93,31)" fg:x="21970" fg:w="18"/><text x="15.4661%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (148 samples, 0.10%)</title><rect x="15.1489%" y="709" width="0.1025%" height="15" fill="rgb(239,81,33)" fg:x="21873" fg:w="148"/><text x="15.3989%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (144 samples, 0.10%)</title><rect x="15.1516%" y="693" width="0.0997%" height="15" fill="rgb(213,120,34)" fg:x="21877" fg:w="144"/><text x="15.4016%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (33 samples, 0.02%)</title><rect x="15.2285%" y="677" width="0.0229%" height="15" fill="rgb(243,49,53)" fg:x="21988" fg:w="33"/><text x="15.4785%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (28 samples, 0.02%)</title><rect x="15.2320%" y="661" width="0.0194%" height="15" fill="rgb(247,216,33)" fg:x="21993" fg:w="28"/><text x="15.4820%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (26 samples, 0.02%)</title><rect x="15.2334%" y="645" width="0.0180%" height="15" fill="rgb(226,26,14)" fg:x="21995" fg:w="26"/><text x="15.4834%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (25 samples, 0.02%)</title><rect x="15.2341%" y="629" width="0.0173%" height="15" fill="rgb(215,49,53)" fg:x="21996" fg:w="25"/><text x="15.4841%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (25 samples, 0.02%)</title><rect x="15.2341%" y="613" width="0.0173%" height="15" fill="rgb(245,162,40)" fg:x="21996" fg:w="25"/><text x="15.4841%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (25 samples, 0.02%)</title><rect x="15.2341%" y="597" width="0.0173%" height="15" fill="rgb(229,68,17)" fg:x="21996" fg:w="25"/><text x="15.4841%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (209 samples, 0.14%)</title><rect x="15.2756%" y="629" width="0.1447%" height="15" fill="rgb(213,182,10)" fg:x="22056" fg:w="209"/><text x="15.5256%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (209 samples, 0.14%)</title><rect x="15.2756%" y="613" width="0.1447%" height="15" fill="rgb(245,125,30)" fg:x="22056" fg:w="209"/><text x="15.5256%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (192 samples, 0.13%)</title><rect x="15.2874%" y="597" width="0.1330%" height="15" fill="rgb(232,202,2)" fg:x="22073" fg:w="192"/><text x="15.5374%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (165 samples, 0.11%)</title><rect x="15.3061%" y="581" width="0.1143%" height="15" fill="rgb(237,140,51)" fg:x="22100" fg:w="165"/><text x="15.5561%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (165 samples, 0.11%)</title><rect x="15.3061%" y="565" width="0.1143%" height="15" fill="rgb(236,157,25)" fg:x="22100" fg:w="165"/><text x="15.5561%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (165 samples, 0.11%)</title><rect x="15.3061%" y="549" width="0.1143%" height="15" fill="rgb(219,209,0)" fg:x="22100" fg:w="165"/><text x="15.5561%" y="559.50"></text></g><g><title>alloc::alloc::alloc (159 samples, 0.11%)</title><rect x="15.3102%" y="533" width="0.1101%" height="15" fill="rgb(240,116,54)" fg:x="22106" fg:w="159"/><text x="15.5602%" y="543.50"></text></g><g><title>__rg_alloc (159 samples, 0.11%)</title><rect x="15.3102%" y="517" width="0.1101%" height="15" fill="rgb(216,10,36)" fg:x="22106" fg:w="159"/><text x="15.5602%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (159 samples, 0.11%)</title><rect x="15.3102%" y="501" width="0.1101%" height="15" fill="rgb(222,72,44)" fg:x="22106" fg:w="159"/><text x="15.5602%" y="511.50"></text></g><g><title>sn_rust_alloc (155 samples, 0.11%)</title><rect x="15.3130%" y="485" width="0.1074%" height="15" fill="rgb(232,159,9)" fg:x="22110" fg:w="155"/><text x="15.5630%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="15.4349%" y="565" width="0.0125%" height="15" fill="rgb(210,39,32)" fg:x="22286" fg:w="18"/><text x="15.6849%" y="575.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.04%)</title><rect x="15.4474%" y="565" width="0.0360%" height="15" fill="rgb(216,194,45)" fg:x="22304" fg:w="52"/><text x="15.6974%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (95 samples, 0.07%)</title><rect x="15.4252%" y="581" width="0.0658%" height="15" fill="rgb(218,18,35)" fg:x="22272" fg:w="95"/><text x="15.6752%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (149 samples, 0.10%)</title><rect x="15.4252%" y="629" width="0.1032%" height="15" fill="rgb(207,83,51)" fg:x="22272" fg:w="149"/><text x="15.6752%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (149 samples, 0.10%)</title><rect x="15.4252%" y="613" width="0.1032%" height="15" fill="rgb(225,63,43)" fg:x="22272" fg:w="149"/><text x="15.6752%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (149 samples, 0.10%)</title><rect x="15.4252%" y="597" width="0.1032%" height="15" fill="rgb(207,57,36)" fg:x="22272" fg:w="149"/><text x="15.6752%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (54 samples, 0.04%)</title><rect x="15.4910%" y="581" width="0.0374%" height="15" fill="rgb(216,99,33)" fg:x="22367" fg:w="54"/><text x="15.7410%" y="591.50"></text></g><g><title>core::ptr::read (54 samples, 0.04%)</title><rect x="15.4910%" y="565" width="0.0374%" height="15" fill="rgb(225,42,16)" fg:x="22367" fg:w="54"/><text x="15.7410%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (422 samples, 0.29%)</title><rect x="15.2514%" y="709" width="0.2923%" height="15" fill="rgb(220,201,45)" fg:x="22021" fg:w="422"/><text x="15.5014%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (410 samples, 0.28%)</title><rect x="15.2597%" y="693" width="0.2840%" height="15" fill="rgb(225,33,4)" fg:x="22033" fg:w="410"/><text x="15.5097%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (407 samples, 0.28%)</title><rect x="15.2618%" y="677" width="0.2819%" height="15" fill="rgb(224,33,50)" fg:x="22036" fg:w="407"/><text x="15.5118%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (398 samples, 0.28%)</title><rect x="15.2680%" y="661" width="0.2756%" height="15" fill="rgb(246,198,51)" fg:x="22045" fg:w="398"/><text x="15.5180%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (398 samples, 0.28%)</title><rect x="15.2680%" y="645" width="0.2756%" height="15" fill="rgb(205,22,4)" fg:x="22045" fg:w="398"/><text x="15.5180%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (22 samples, 0.02%)</title><rect x="15.5284%" y="629" width="0.0152%" height="15" fill="rgb(206,3,8)" fg:x="22421" fg:w="22"/><text x="15.7784%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.01%)</title><rect x="15.5333%" y="613" width="0.0104%" height="15" fill="rgb(251,23,15)" fg:x="22428" fg:w="15"/><text x="15.7833%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.01%)</title><rect x="15.5333%" y="597" width="0.0104%" height="15" fill="rgb(252,88,28)" fg:x="22428" fg:w="15"/><text x="15.7833%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (28 samples, 0.02%)</title><rect x="15.5589%" y="597" width="0.0194%" height="15" fill="rgb(212,127,14)" fg:x="22465" fg:w="28"/><text x="15.8089%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (712 samples, 0.49%)</title><rect x="15.1489%" y="725" width="0.4931%" height="15" fill="rgb(247,145,37)" fg:x="21873" fg:w="712"/><text x="15.3989%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (142 samples, 0.10%)</title><rect x="15.5436%" y="709" width="0.0983%" height="15" fill="rgb(209,117,53)" fg:x="22443" fg:w="142"/><text x="15.7936%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (142 samples, 0.10%)</title><rect x="15.5436%" y="693" width="0.0983%" height="15" fill="rgb(212,90,42)" fg:x="22443" fg:w="142"/><text x="15.7936%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 0.10%)</title><rect x="15.5436%" y="677" width="0.0983%" height="15" fill="rgb(218,164,37)" fg:x="22443" fg:w="142"/><text x="15.7936%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (133 samples, 0.09%)</title><rect x="15.5499%" y="661" width="0.0921%" height="15" fill="rgb(246,65,34)" fg:x="22452" fg:w="133"/><text x="15.7999%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (133 samples, 0.09%)</title><rect x="15.5499%" y="645" width="0.0921%" height="15" fill="rgb(231,100,33)" fg:x="22452" fg:w="133"/><text x="15.7999%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (133 samples, 0.09%)</title><rect x="15.5499%" y="629" width="0.0921%" height="15" fill="rgb(228,126,14)" fg:x="22452" fg:w="133"/><text x="15.7999%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (133 samples, 0.09%)</title><rect x="15.5499%" y="613" width="0.0921%" height="15" fill="rgb(215,173,21)" fg:x="22452" fg:w="133"/><text x="15.7999%" y="623.50"></text></g><g><title>sn_rust_dealloc (92 samples, 0.06%)</title><rect x="15.5783%" y="597" width="0.0637%" height="15" fill="rgb(210,6,40)" fg:x="22493" fg:w="92"/><text x="15.8283%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,258 samples, 7.80%)</title><rect x="7.8657%" y="741" width="7.7971%" height="15" fill="rgb(212,48,18)" fg:x="11357" fg:w="11258"/><text x="8.1157%" y="751.50">tremor_runt..</text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (31 samples, 0.02%)</title><rect x="15.6690%" y="645" width="0.0215%" height="15" fill="rgb(230,214,11)" fg:x="22624" fg:w="31"/><text x="15.9190%" y="655.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (24 samples, 0.02%)</title><rect x="15.6738%" y="629" width="0.0166%" height="15" fill="rgb(254,105,39)" fg:x="22631" fg:w="24"/><text x="15.9238%" y="639.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (16 samples, 0.01%)</title><rect x="15.6794%" y="613" width="0.0111%" height="15" fill="rgb(245,158,5)" fg:x="22639" fg:w="16"/><text x="15.9294%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (87 samples, 0.06%)</title><rect x="15.6932%" y="645" width="0.0603%" height="15" fill="rgb(249,208,11)" fg:x="22659" fg:w="87"/><text x="15.9432%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (87 samples, 0.06%)</title><rect x="15.6932%" y="629" width="0.0603%" height="15" fill="rgb(210,39,28)" fg:x="22659" fg:w="87"/><text x="15.9432%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (134 samples, 0.09%)</title><rect x="15.6628%" y="693" width="0.0928%" height="15" fill="rgb(211,56,53)" fg:x="22615" fg:w="134"/><text x="15.9128%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (134 samples, 0.09%)</title><rect x="15.6628%" y="677" width="0.0928%" height="15" fill="rgb(226,201,30)" fg:x="22615" fg:w="134"/><text x="15.9128%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (134 samples, 0.09%)</title><rect x="15.6628%" y="661" width="0.0928%" height="15" fill="rgb(239,101,34)" fg:x="22615" fg:w="134"/><text x="15.9128%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (155 samples, 0.11%)</title><rect x="15.8082%" y="373" width="0.1074%" height="15" fill="rgb(226,209,5)" fg:x="22825" fg:w="155"/><text x="16.0582%" y="383.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (241 samples, 0.17%)</title><rect x="15.7590%" y="533" width="0.1669%" height="15" fill="rgb(250,105,47)" fg:x="22754" fg:w="241"/><text x="16.0090%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (241 samples, 0.17%)</title><rect x="15.7590%" y="517" width="0.1669%" height="15" fill="rgb(230,72,3)" fg:x="22754" fg:w="241"/><text x="16.0090%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (232 samples, 0.16%)</title><rect x="15.7653%" y="501" width="0.1607%" height="15" fill="rgb(232,218,39)" fg:x="22763" fg:w="232"/><text x="16.0153%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (224 samples, 0.16%)</title><rect x="15.7708%" y="485" width="0.1551%" height="15" fill="rgb(248,166,6)" fg:x="22771" fg:w="224"/><text x="16.0208%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (224 samples, 0.16%)</title><rect x="15.7708%" y="469" width="0.1551%" height="15" fill="rgb(247,89,20)" fg:x="22771" fg:w="224"/><text x="16.0208%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (224 samples, 0.16%)</title><rect x="15.7708%" y="453" width="0.1551%" height="15" fill="rgb(248,130,54)" fg:x="22771" fg:w="224"/><text x="16.0208%" y="463.50"></text></g><g><title>alloc::alloc::alloc (221 samples, 0.15%)</title><rect x="15.7729%" y="437" width="0.1531%" height="15" fill="rgb(234,196,4)" fg:x="22774" fg:w="221"/><text x="16.0229%" y="447.50"></text></g><g><title>__rg_alloc (221 samples, 0.15%)</title><rect x="15.7729%" y="421" width="0.1531%" height="15" fill="rgb(250,143,31)" fg:x="22774" fg:w="221"/><text x="16.0229%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (221 samples, 0.15%)</title><rect x="15.7729%" y="405" width="0.1531%" height="15" fill="rgb(211,110,34)" fg:x="22774" fg:w="221"/><text x="16.0229%" y="415.50"></text></g><g><title>sn_rust_alloc (213 samples, 0.15%)</title><rect x="15.7784%" y="389" width="0.1475%" height="15" fill="rgb(215,124,48)" fg:x="22782" fg:w="213"/><text x="16.0284%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (249 samples, 0.17%)</title><rect x="15.7556%" y="581" width="0.1725%" height="15" fill="rgb(216,46,13)" fg:x="22749" fg:w="249"/><text x="16.0056%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (249 samples, 0.17%)</title><rect x="15.7556%" y="565" width="0.1725%" height="15" fill="rgb(205,184,25)" fg:x="22749" fg:w="249"/><text x="16.0056%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (249 samples, 0.17%)</title><rect x="15.7556%" y="549" width="0.1725%" height="15" fill="rgb(228,1,10)" fg:x="22749" fg:w="249"/><text x="16.0056%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (262 samples, 0.18%)</title><rect x="15.7556%" y="661" width="0.1815%" height="15" fill="rgb(213,116,27)" fg:x="22749" fg:w="262"/><text x="16.0056%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (262 samples, 0.18%)</title><rect x="15.7556%" y="645" width="0.1815%" height="15" fill="rgb(241,95,50)" fg:x="22749" fg:w="262"/><text x="16.0056%" y="655.50"></text></g><g><title>value_trait::Builder::object (262 samples, 0.18%)</title><rect x="15.7556%" y="629" width="0.1815%" height="15" fill="rgb(238,48,32)" fg:x="22749" fg:w="262"/><text x="16.0056%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (262 samples, 0.18%)</title><rect x="15.7556%" y="613" width="0.1815%" height="15" fill="rgb(235,113,49)" fg:x="22749" fg:w="262"/><text x="16.0056%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (262 samples, 0.18%)</title><rect x="15.7556%" y="597" width="0.1815%" height="15" fill="rgb(205,127,43)" fg:x="22749" fg:w="262"/><text x="16.0056%" y="607.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.04%)</title><rect x="15.9633%" y="469" width="0.0353%" height="15" fill="rgb(250,162,2)" fg:x="23049" fg:w="51"/><text x="16.2133%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.06%)</title><rect x="15.9412%" y="549" width="0.0582%" height="15" fill="rgb(220,13,41)" fg:x="23017" fg:w="84"/><text x="16.1912%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (84 samples, 0.06%)</title><rect x="15.9412%" y="533" width="0.0582%" height="15" fill="rgb(249,221,25)" fg:x="23017" fg:w="84"/><text x="16.1912%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (71 samples, 0.05%)</title><rect x="15.9502%" y="517" width="0.0492%" height="15" fill="rgb(215,208,19)" fg:x="23030" fg:w="71"/><text x="16.2002%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (71 samples, 0.05%)</title><rect x="15.9502%" y="501" width="0.0492%" height="15" fill="rgb(236,175,2)" fg:x="23030" fg:w="71"/><text x="16.2002%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (71 samples, 0.05%)</title><rect x="15.9502%" y="485" width="0.0492%" height="15" fill="rgb(241,52,2)" fg:x="23030" fg:w="71"/><text x="16.2002%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (100 samples, 0.07%)</title><rect x="15.9370%" y="661" width="0.0693%" height="15" fill="rgb(248,140,14)" fg:x="23011" fg:w="100"/><text x="16.1870%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (100 samples, 0.07%)</title><rect x="15.9370%" y="645" width="0.0693%" height="15" fill="rgb(253,22,42)" fg:x="23011" fg:w="100"/><text x="16.1870%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (100 samples, 0.07%)</title><rect x="15.9370%" y="629" width="0.0693%" height="15" fill="rgb(234,61,47)" fg:x="23011" fg:w="100"/><text x="16.1870%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (100 samples, 0.07%)</title><rect x="15.9370%" y="613" width="0.0693%" height="15" fill="rgb(208,226,15)" fg:x="23011" fg:w="100"/><text x="16.1870%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (99 samples, 0.07%)</title><rect x="15.9377%" y="597" width="0.0686%" height="15" fill="rgb(217,221,4)" fg:x="23012" fg:w="99"/><text x="16.1877%" y="607.50"></text></g><g><title>core::mem::drop (94 samples, 0.07%)</title><rect x="15.9412%" y="581" width="0.0651%" height="15" fill="rgb(212,174,34)" fg:x="23017" fg:w="94"/><text x="16.1912%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (94 samples, 0.07%)</title><rect x="15.9412%" y="565" width="0.0651%" height="15" fill="rgb(253,83,4)" fg:x="23017" fg:w="94"/><text x="16.1912%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (18 samples, 0.01%)</title><rect x="16.0063%" y="661" width="0.0125%" height="15" fill="rgb(250,195,49)" fg:x="23111" fg:w="18"/><text x="16.2563%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (18 samples, 0.01%)</title><rect x="16.0063%" y="645" width="0.0125%" height="15" fill="rgb(241,192,25)" fg:x="23111" fg:w="18"/><text x="16.2563%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="16.0063%" y="629" width="0.0125%" height="15" fill="rgb(208,124,10)" fg:x="23111" fg:w="18"/><text x="16.2563%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="16.0063%" y="613" width="0.0125%" height="15" fill="rgb(222,33,0)" fg:x="23111" fg:w="18"/><text x="16.2563%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="16.0063%" y="597" width="0.0125%" height="15" fill="rgb(234,209,28)" fg:x="23111" fg:w="18"/><text x="16.2563%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (21 samples, 0.01%)</title><rect x="16.0298%" y="645" width="0.0145%" height="15" fill="rgb(224,11,23)" fg:x="23145" fg:w="21"/><text x="16.2798%" y="655.50"></text></g><g><title>core::time::Duration::as_nanos (22 samples, 0.02%)</title><rect x="16.0444%" y="645" width="0.0152%" height="15" fill="rgb(232,99,1)" fg:x="23166" fg:w="22"/><text x="16.2944%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (77 samples, 0.05%)</title><rect x="16.0596%" y="629" width="0.0533%" height="15" fill="rgb(237,95,45)" fg:x="23188" fg:w="77"/><text x="16.3096%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (25 samples, 0.02%)</title><rect x="16.1372%" y="597" width="0.0173%" height="15" fill="rgb(208,109,11)" fg:x="23300" fg:w="25"/><text x="16.3872%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (25 samples, 0.02%)</title><rect x="16.1372%" y="581" width="0.0173%" height="15" fill="rgb(216,190,48)" fg:x="23300" fg:w="25"/><text x="16.3872%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="16.1372%" y="565" width="0.0173%" height="15" fill="rgb(251,171,36)" fg:x="23300" fg:w="25"/><text x="16.3872%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (15 samples, 0.01%)</title><rect x="16.1441%" y="549" width="0.0104%" height="15" fill="rgb(230,62,22)" fg:x="23310" fg:w="15"/><text x="16.3941%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="16.1441%" y="533" width="0.0104%" height="15" fill="rgb(225,114,35)" fg:x="23310" fg:w="15"/><text x="16.3941%" y="543.50"></text></g><g><title>std::time::SystemTime::duration_since (168 samples, 0.12%)</title><rect x="16.0596%" y="645" width="0.1164%" height="15" fill="rgb(215,118,42)" fg:x="23188" fg:w="168"/><text x="16.3096%" y="655.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (91 samples, 0.06%)</title><rect x="16.1129%" y="629" width="0.0630%" height="15" fill="rgb(243,119,21)" fg:x="23265" fg:w="91"/><text x="16.3629%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (91 samples, 0.06%)</title><rect x="16.1129%" y="613" width="0.0630%" height="15" fill="rgb(252,177,53)" fg:x="23265" fg:w="91"/><text x="16.3629%" y="623.50"></text></g><g><title>core::time::Duration::new (31 samples, 0.02%)</title><rect x="16.1545%" y="597" width="0.0215%" height="15" fill="rgb(237,209,29)" fg:x="23325" fg:w="31"/><text x="16.4045%" y="607.50"></text></g><g><title>tremor_common::time::nanotime (571 samples, 0.40%)</title><rect x="16.0188%" y="661" width="0.3955%" height="15" fill="rgb(212,65,23)" fg:x="23129" fg:w="571"/><text x="16.2688%" y="671.50"></text></g><g><title>std::time::SystemTime::now (344 samples, 0.24%)</title><rect x="16.1760%" y="645" width="0.2382%" height="15" fill="rgb(230,222,46)" fg:x="23356" fg:w="344"/><text x="16.4260%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (344 samples, 0.24%)</title><rect x="16.1760%" y="629" width="0.2382%" height="15" fill="rgb(215,135,32)" fg:x="23356" fg:w="344"/><text x="16.4260%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (344 samples, 0.24%)</title><rect x="16.1760%" y="613" width="0.2382%" height="15" fill="rgb(246,101,22)" fg:x="23356" fg:w="344"/><text x="16.4260%" y="623.50"></text></g><g><title>__clock_gettime (275 samples, 0.19%)</title><rect x="16.2238%" y="597" width="0.1905%" height="15" fill="rgb(206,107,13)" fg:x="23425" fg:w="275"/><text x="16.4738%" y="607.50"></text></g><g><title>__vdso_clock_gettime (272 samples, 0.19%)</title><rect x="16.2258%" y="581" width="0.1884%" height="15" fill="rgb(250,100,44)" fg:x="23428" fg:w="272"/><text x="16.4758%" y="591.50"></text></g><g><title>[[vdso]] (246 samples, 0.17%)</title><rect x="16.2438%" y="565" width="0.1704%" height="15" fill="rgb(231,147,38)" fg:x="23454" fg:w="246"/><text x="16.4938%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,135 samples, 0.79%)</title><rect x="15.6628%" y="725" width="0.7861%" height="15" fill="rgb(229,8,40)" fg:x="22615" fg:w="1135"/><text x="15.9128%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,135 samples, 0.79%)</title><rect x="15.6628%" y="709" width="0.7861%" height="15" fill="rgb(221,135,30)" fg:x="22615" fg:w="1135"/><text x="15.9128%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,001 samples, 0.69%)</title><rect x="15.7556%" y="693" width="0.6933%" height="15" fill="rgb(249,193,18)" fg:x="22749" fg:w="1001"/><text x="16.0056%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,001 samples, 0.69%)</title><rect x="15.7556%" y="677" width="0.6933%" height="15" fill="rgb(209,133,39)" fg:x="22749" fg:w="1001"/><text x="16.0056%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (50 samples, 0.03%)</title><rect x="16.4142%" y="661" width="0.0346%" height="15" fill="rgb(232,100,14)" fg:x="23700" fg:w="50"/><text x="16.6642%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (39 samples, 0.03%)</title><rect x="16.4218%" y="645" width="0.0270%" height="15" fill="rgb(224,185,1)" fg:x="23711" fg:w="39"/><text x="16.6718%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (35 samples, 0.02%)</title><rect x="16.4246%" y="629" width="0.0242%" height="15" fill="rgb(223,139,8)" fg:x="23715" fg:w="35"/><text x="16.6746%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (35 samples, 0.02%)</title><rect x="16.4246%" y="613" width="0.0242%" height="15" fill="rgb(232,213,38)" fg:x="23715" fg:w="35"/><text x="16.6746%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (35 samples, 0.02%)</title><rect x="16.4246%" y="597" width="0.0242%" height="15" fill="rgb(207,94,22)" fg:x="23715" fg:w="35"/><text x="16.6746%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (230 samples, 0.16%)</title><rect x="17.1414%" y="277" width="0.1593%" height="15" fill="rgb(219,183,54)" fg:x="24750" fg:w="230"/><text x="17.3914%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (230 samples, 0.16%)</title><rect x="17.1414%" y="261" width="0.1593%" height="15" fill="rgb(216,185,54)" fg:x="24750" fg:w="230"/><text x="17.3914%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (230 samples, 0.16%)</title><rect x="17.1414%" y="245" width="0.1593%" height="15" fill="rgb(254,217,39)" fg:x="24750" fg:w="230"/><text x="17.3914%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (227 samples, 0.16%)</title><rect x="17.1435%" y="229" width="0.1572%" height="15" fill="rgb(240,178,23)" fg:x="24753" fg:w="227"/><text x="17.3935%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (227 samples, 0.16%)</title><rect x="17.1435%" y="213" width="0.1572%" height="15" fill="rgb(218,11,47)" fg:x="24753" fg:w="227"/><text x="17.3935%" y="223.50"></text></g><g><title>alloc::alloc::alloc (227 samples, 0.16%)</title><rect x="17.1435%" y="197" width="0.1572%" height="15" fill="rgb(218,51,51)" fg:x="24753" fg:w="227"/><text x="17.3935%" y="207.50"></text></g><g><title>__rg_alloc (227 samples, 0.16%)</title><rect x="17.1435%" y="181" width="0.1572%" height="15" fill="rgb(238,126,27)" fg:x="24753" fg:w="227"/><text x="17.3935%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (227 samples, 0.16%)</title><rect x="17.1435%" y="165" width="0.1572%" height="15" fill="rgb(249,202,22)" fg:x="24753" fg:w="227"/><text x="17.3935%" y="175.50"></text></g><g><title>sn_rust_alloc (213 samples, 0.15%)</title><rect x="17.1532%" y="149" width="0.1475%" height="15" fill="rgb(254,195,49)" fg:x="24767" fg:w="213"/><text x="17.4032%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.01%)</title><rect x="17.2876%" y="133" width="0.0132%" height="15" fill="rgb(208,123,14)" fg:x="24961" fg:w="19"/><text x="17.5376%" y="143.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (311 samples, 0.22%)</title><rect x="17.1207%" y="389" width="0.2154%" height="15" fill="rgb(224,200,8)" fg:x="24720" fg:w="311"/><text x="17.3707%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (305 samples, 0.21%)</title><rect x="17.1248%" y="373" width="0.2112%" height="15" fill="rgb(217,61,36)" fg:x="24726" fg:w="305"/><text x="17.3748%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (293 samples, 0.20%)</title><rect x="17.1331%" y="357" width="0.2029%" height="15" fill="rgb(206,35,45)" fg:x="24738" fg:w="293"/><text x="17.3831%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (281 samples, 0.19%)</title><rect x="17.1414%" y="341" width="0.1946%" height="15" fill="rgb(217,65,33)" fg:x="24750" fg:w="281"/><text x="17.3914%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (281 samples, 0.19%)</title><rect x="17.1414%" y="325" width="0.1946%" height="15" fill="rgb(222,158,48)" fg:x="24750" fg:w="281"/><text x="17.3914%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (281 samples, 0.19%)</title><rect x="17.1414%" y="309" width="0.1946%" height="15" fill="rgb(254,2,54)" fg:x="24750" fg:w="281"/><text x="17.3914%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (281 samples, 0.19%)</title><rect x="17.1414%" y="293" width="0.1946%" height="15" fill="rgb(250,143,38)" fg:x="24750" fg:w="281"/><text x="17.3914%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (51 samples, 0.04%)</title><rect x="17.3007%" y="277" width="0.0353%" height="15" fill="rgb(248,25,0)" fg:x="24980" fg:w="51"/><text x="17.5507%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.04%)</title><rect x="17.3007%" y="261" width="0.0353%" height="15" fill="rgb(206,152,27)" fg:x="24980" fg:w="51"/><text x="17.5507%" y="271.50"></text></g><g><title>[libc-2.31.so] (38 samples, 0.03%)</title><rect x="17.3097%" y="245" width="0.0263%" height="15" fill="rgb(240,77,30)" fg:x="24993" fg:w="38"/><text x="17.5597%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="17.3395%" y="373" width="0.0104%" height="15" fill="rgb(231,5,3)" fg:x="25036" fg:w="15"/><text x="17.5895%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="17.4171%" y="37" width="0.0187%" height="15" fill="rgb(207,226,32)" fg:x="25148" fg:w="27"/><text x="17.6671%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (116 samples, 0.08%)</title><rect x="17.3575%" y="181" width="0.0803%" height="15" fill="rgb(222,207,47)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (116 samples, 0.08%)</title><rect x="17.3575%" y="165" width="0.0803%" height="15" fill="rgb(229,115,45)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (116 samples, 0.08%)</title><rect x="17.3575%" y="149" width="0.0803%" height="15" fill="rgb(224,191,6)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (116 samples, 0.08%)</title><rect x="17.3575%" y="133" width="0.0803%" height="15" fill="rgb(230,227,24)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (116 samples, 0.08%)</title><rect x="17.3575%" y="117" width="0.0803%" height="15" fill="rgb(228,80,19)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="127.50"></text></g><g><title>alloc::alloc::alloc (116 samples, 0.08%)</title><rect x="17.3575%" y="101" width="0.0803%" height="15" fill="rgb(247,229,0)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="111.50"></text></g><g><title>__rg_alloc (116 samples, 0.08%)</title><rect x="17.3575%" y="85" width="0.0803%" height="15" fill="rgb(237,194,15)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (116 samples, 0.08%)</title><rect x="17.3575%" y="69" width="0.0803%" height="15" fill="rgb(219,203,20)" fg:x="25062" fg:w="116"/><text x="17.6075%" y="79.50"></text></g><g><title>sn_rust_alloc (112 samples, 0.08%)</title><rect x="17.3603%" y="53" width="0.0776%" height="15" fill="rgb(234,128,8)" fg:x="25066" fg:w="112"/><text x="17.6103%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (174 samples, 0.12%)</title><rect x="17.3499%" y="293" width="0.1205%" height="15" fill="rgb(248,202,8)" fg:x="25051" fg:w="174"/><text x="17.5999%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (174 samples, 0.12%)</title><rect x="17.3499%" y="277" width="0.1205%" height="15" fill="rgb(206,104,37)" fg:x="25051" fg:w="174"/><text x="17.5999%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (174 samples, 0.12%)</title><rect x="17.3499%" y="261" width="0.1205%" height="15" fill="rgb(223,8,27)" fg:x="25051" fg:w="174"/><text x="17.5999%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (163 samples, 0.11%)</title><rect x="17.3575%" y="245" width="0.1129%" height="15" fill="rgb(216,217,28)" fg:x="25062" fg:w="163"/><text x="17.6075%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (163 samples, 0.11%)</title><rect x="17.3575%" y="229" width="0.1129%" height="15" fill="rgb(249,199,1)" fg:x="25062" fg:w="163"/><text x="17.6075%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (163 samples, 0.11%)</title><rect x="17.3575%" y="213" width="0.1129%" height="15" fill="rgb(240,85,17)" fg:x="25062" fg:w="163"/><text x="17.6075%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (163 samples, 0.11%)</title><rect x="17.3575%" y="197" width="0.1129%" height="15" fill="rgb(206,108,45)" fg:x="25062" fg:w="163"/><text x="17.6075%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (47 samples, 0.03%)</title><rect x="17.4379%" y="181" width="0.0326%" height="15" fill="rgb(245,210,41)" fg:x="25178" fg:w="47"/><text x="17.6879%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.03%)</title><rect x="17.4379%" y="165" width="0.0326%" height="15" fill="rgb(206,13,37)" fg:x="25178" fg:w="47"/><text x="17.6879%" y="175.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="17.4434%" y="149" width="0.0270%" height="15" fill="rgb(250,61,18)" fg:x="25186" fg:w="39"/><text x="17.6934%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="17.4704%" y="293" width="0.0104%" height="15" fill="rgb(235,172,48)" fg:x="25225" fg:w="15"/><text x="17.7204%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 0.04%)</title><rect x="17.4919%" y="245" width="0.0402%" height="15" fill="rgb(249,201,17)" fg:x="25256" fg:w="58"/><text x="17.7419%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 0.04%)</title><rect x="17.4919%" y="229" width="0.0402%" height="15" fill="rgb(219,208,6)" fg:x="25256" fg:w="58"/><text x="17.7419%" y="239.50"></text></g><g><title>alloc::alloc::alloc (58 samples, 0.04%)</title><rect x="17.4919%" y="213" width="0.0402%" height="15" fill="rgb(248,31,23)" fg:x="25256" fg:w="58"/><text x="17.7419%" y="223.50"></text></g><g><title>__rg_alloc (58 samples, 0.04%)</title><rect x="17.4919%" y="197" width="0.0402%" height="15" fill="rgb(245,15,42)" fg:x="25256" fg:w="58"/><text x="17.7419%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (58 samples, 0.04%)</title><rect x="17.4919%" y="181" width="0.0402%" height="15" fill="rgb(222,217,39)" fg:x="25256" fg:w="58"/><text x="17.7419%" y="191.50"></text></g><g><title>sn_rust_alloc (52 samples, 0.04%)</title><rect x="17.4960%" y="165" width="0.0360%" height="15" fill="rgb(210,219,27)" fg:x="25262" fg:w="52"/><text x="17.7460%" y="175.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="17.5217%" y="149" width="0.0104%" height="15" fill="rgb(252,166,36)" fg:x="25299" fg:w="15"/><text x="17.7717%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (74 samples, 0.05%)</title><rect x="17.4856%" y="293" width="0.0513%" height="15" fill="rgb(245,132,34)" fg:x="25247" fg:w="74"/><text x="17.7356%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 0.05%)</title><rect x="17.4919%" y="277" width="0.0450%" height="15" fill="rgb(236,54,3)" fg:x="25256" fg:w="65"/><text x="17.7419%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.05%)</title><rect x="17.4919%" y="261" width="0.0450%" height="15" fill="rgb(241,173,43)" fg:x="25256" fg:w="65"/><text x="17.7419%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,176 samples, 0.81%)</title><rect x="16.7342%" y="405" width="0.8145%" height="15" fill="rgb(215,190,9)" fg:x="24162" fg:w="1176"/><text x="16.9842%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (307 samples, 0.21%)</title><rect x="17.3360%" y="389" width="0.2126%" height="15" fill="rgb(242,101,16)" fg:x="25031" fg:w="307"/><text x="17.5860%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (287 samples, 0.20%)</title><rect x="17.3499%" y="373" width="0.1988%" height="15" fill="rgb(223,190,21)" fg:x="25051" fg:w="287"/><text x="17.5999%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (287 samples, 0.20%)</title><rect x="17.3499%" y="357" width="0.1988%" height="15" fill="rgb(215,228,25)" fg:x="25051" fg:w="287"/><text x="17.5999%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (287 samples, 0.20%)</title><rect x="17.3499%" y="341" width="0.1988%" height="15" fill="rgb(225,36,22)" fg:x="25051" fg:w="287"/><text x="17.5999%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (287 samples, 0.20%)</title><rect x="17.3499%" y="325" width="0.1988%" height="15" fill="rgb(251,106,46)" fg:x="25051" fg:w="287"/><text x="17.5999%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (287 samples, 0.20%)</title><rect x="17.3499%" y="309" width="0.1988%" height="15" fill="rgb(208,90,1)" fg:x="25051" fg:w="287"/><text x="17.5999%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="17.5951%" y="325" width="0.0166%" height="15" fill="rgb(243,10,4)" fg:x="25405" fg:w="24"/><text x="17.8451%" y="335.50"></text></g><g><title>core::time::Duration::as_nanos (27 samples, 0.02%)</title><rect x="17.6117%" y="325" width="0.0187%" height="15" fill="rgb(212,137,27)" fg:x="25429" fg:w="27"/><text x="17.8617%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (75 samples, 0.05%)</title><rect x="17.6304%" y="309" width="0.0519%" height="15" fill="rgb(231,220,49)" fg:x="25456" fg:w="75"/><text x="17.8804%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (21 samples, 0.01%)</title><rect x="17.7031%" y="277" width="0.0145%" height="15" fill="rgb(237,96,20)" fg:x="25561" fg:w="21"/><text x="17.9531%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (21 samples, 0.01%)</title><rect x="17.7031%" y="261" width="0.0145%" height="15" fill="rgb(239,229,30)" fg:x="25561" fg:w="21"/><text x="17.9531%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (21 samples, 0.01%)</title><rect x="17.7031%" y="245" width="0.0145%" height="15" fill="rgb(219,65,33)" fg:x="25561" fg:w="21"/><text x="17.9531%" y="255.50"></text></g><g><title>std::time::SystemTime::duration_since (143 samples, 0.10%)</title><rect x="17.6304%" y="325" width="0.0990%" height="15" fill="rgb(243,134,7)" fg:x="25456" fg:w="143"/><text x="17.8804%" y="335.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (68 samples, 0.05%)</title><rect x="17.6823%" y="309" width="0.0471%" height="15" fill="rgb(216,177,54)" fg:x="25531" fg:w="68"/><text x="17.9323%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (68 samples, 0.05%)</title><rect x="17.6823%" y="293" width="0.0471%" height="15" fill="rgb(211,160,20)" fg:x="25531" fg:w="68"/><text x="17.9323%" y="303.50"></text></g><g><title>core::time::Duration::new (17 samples, 0.01%)</title><rect x="17.7177%" y="277" width="0.0118%" height="15" fill="rgb(239,85,39)" fg:x="25582" fg:w="17"/><text x="17.9677%" y="287.50"></text></g><g><title>__clock_gettime (299 samples, 0.21%)</title><rect x="17.7523%" y="277" width="0.2071%" height="15" fill="rgb(232,125,22)" fg:x="25632" fg:w="299"/><text x="18.0023%" y="287.50"></text></g><g><title>__vdso_clock_gettime (275 samples, 0.19%)</title><rect x="17.7689%" y="261" width="0.1905%" height="15" fill="rgb(244,57,34)" fg:x="25656" fg:w="275"/><text x="18.0189%" y="271.50"></text></g><g><title>[[vdso]] (254 samples, 0.18%)</title><rect x="17.7835%" y="245" width="0.1759%" height="15" fill="rgb(214,203,32)" fg:x="25677" fg:w="254"/><text x="18.0335%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (595 samples, 0.41%)</title><rect x="17.5487%" y="405" width="0.4121%" height="15" fill="rgb(207,58,43)" fg:x="25338" fg:w="595"/><text x="17.7987%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (595 samples, 0.41%)</title><rect x="17.5487%" y="389" width="0.4121%" height="15" fill="rgb(215,193,15)" fg:x="25338" fg:w="595"/><text x="17.7987%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (564 samples, 0.39%)</title><rect x="17.5701%" y="373" width="0.3906%" height="15" fill="rgb(232,15,44)" fg:x="25369" fg:w="564"/><text x="17.8201%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (564 samples, 0.39%)</title><rect x="17.5701%" y="357" width="0.3906%" height="15" fill="rgb(212,3,48)" fg:x="25369" fg:w="564"/><text x="17.8201%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (556 samples, 0.39%)</title><rect x="17.5757%" y="341" width="0.3851%" height="15" fill="rgb(218,128,7)" fg:x="25377" fg:w="556"/><text x="17.8257%" y="351.50"></text></g><g><title>std::time::SystemTime::now (334 samples, 0.23%)</title><rect x="17.7294%" y="325" width="0.2313%" height="15" fill="rgb(226,216,39)" fg:x="25599" fg:w="334"/><text x="17.9794%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (334 samples, 0.23%)</title><rect x="17.7294%" y="309" width="0.2313%" height="15" fill="rgb(243,47,51)" fg:x="25599" fg:w="334"/><text x="17.9794%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (334 samples, 0.23%)</title><rect x="17.7294%" y="293" width="0.2313%" height="15" fill="rgb(241,183,40)" fg:x="25599" fg:w="334"/><text x="17.9794%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (138 samples, 0.10%)</title><rect x="18.0169%" y="373" width="0.0956%" height="15" fill="rgb(231,217,32)" fg:x="26014" fg:w="138"/><text x="18.2669%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (93 samples, 0.06%)</title><rect x="18.0480%" y="357" width="0.0644%" height="15" fill="rgb(229,61,38)" fg:x="26059" fg:w="93"/><text x="18.2980%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (471 samples, 0.33%)</title><rect x="18.2967%" y="181" width="0.3262%" height="15" fill="rgb(225,210,5)" fg:x="26418" fg:w="471"/><text x="18.5467%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (29 samples, 0.02%)</title><rect x="18.6229%" y="181" width="0.0201%" height="15" fill="rgb(231,79,45)" fg:x="26889" fg:w="29"/><text x="18.8729%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (770 samples, 0.53%)</title><rect x="18.1124%" y="325" width="0.5333%" height="15" fill="rgb(224,100,7)" fg:x="26152" fg:w="770"/><text x="18.3624%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (766 samples, 0.53%)</title><rect x="18.1152%" y="309" width="0.5305%" height="15" fill="rgb(241,198,18)" fg:x="26156" fg:w="766"/><text x="18.3652%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (766 samples, 0.53%)</title><rect x="18.1152%" y="293" width="0.5305%" height="15" fill="rgb(252,97,53)" fg:x="26156" fg:w="766"/><text x="18.3652%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (760 samples, 0.53%)</title><rect x="18.1194%" y="277" width="0.5264%" height="15" fill="rgb(220,88,7)" fg:x="26162" fg:w="760"/><text x="18.3694%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (760 samples, 0.53%)</title><rect x="18.1194%" y="261" width="0.5264%" height="15" fill="rgb(213,176,14)" fg:x="26162" fg:w="760"/><text x="18.3694%" y="271.50"></text></g><g><title>alloc::alloc::alloc (760 samples, 0.53%)</title><rect x="18.1194%" y="245" width="0.5264%" height="15" fill="rgb(246,73,7)" fg:x="26162" fg:w="760"/><text x="18.3694%" y="255.50"></text></g><g><title>__rg_alloc (760 samples, 0.53%)</title><rect x="18.1194%" y="229" width="0.5264%" height="15" fill="rgb(245,64,36)" fg:x="26162" fg:w="760"/><text x="18.3694%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (760 samples, 0.53%)</title><rect x="18.1194%" y="213" width="0.5264%" height="15" fill="rgb(245,80,10)" fg:x="26162" fg:w="760"/><text x="18.3694%" y="223.50"></text></g><g><title>sn_rust_alloc (755 samples, 0.52%)</title><rect x="18.1228%" y="197" width="0.5229%" height="15" fill="rgb(232,107,50)" fg:x="26167" fg:w="755"/><text x="18.3728%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,153 samples, 0.80%)</title><rect x="18.0169%" y="389" width="0.7985%" height="15" fill="rgb(253,3,0)" fg:x="26014" fg:w="1153"/><text x="18.2669%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,015 samples, 0.70%)</title><rect x="18.1124%" y="373" width="0.7030%" height="15" fill="rgb(212,99,53)" fg:x="26152" fg:w="1015"/><text x="18.3624%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,015 samples, 0.70%)</title><rect x="18.1124%" y="357" width="0.7030%" height="15" fill="rgb(249,111,54)" fg:x="26152" fg:w="1015"/><text x="18.3624%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,015 samples, 0.70%)</title><rect x="18.1124%" y="341" width="0.7030%" height="15" fill="rgb(249,55,30)" fg:x="26152" fg:w="1015"/><text x="18.3624%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (245 samples, 0.17%)</title><rect x="18.6457%" y="325" width="0.1697%" height="15" fill="rgb(237,47,42)" fg:x="26922" fg:w="245"/><text x="18.8957%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (245 samples, 0.17%)</title><rect x="18.6457%" y="309" width="0.1697%" height="15" fill="rgb(211,20,18)" fg:x="26922" fg:w="245"/><text x="18.8957%" y="319.50"></text></g><g><title>[libc-2.31.so] (245 samples, 0.17%)</title><rect x="18.6457%" y="293" width="0.1697%" height="15" fill="rgb(231,203,46)" fg:x="26922" fg:w="245"/><text x="18.8957%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,557 samples, 3.16%)</title><rect x="15.6628%" y="741" width="3.1561%" height="15" fill="rgb(237,142,3)" fg:x="22615" fg:w="4557"/><text x="15.9128%" y="751.50">tre..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3,422 samples, 2.37%)</title><rect x="16.4488%" y="725" width="2.3700%" height="15" fill="rgb(241,107,1)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="735.50">&lt;f..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,422 samples, 2.37%)</title><rect x="16.4488%" y="709" width="2.3700%" height="15" fill="rgb(229,83,13)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="719.50">fu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,422 samples, 2.37%)</title><rect x="16.4488%" y="693" width="2.3700%" height="15" fill="rgb(241,91,40)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="703.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,422 samples, 2.37%)</title><rect x="16.4488%" y="677" width="2.3700%" height="15" fill="rgb(225,3,45)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="687.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (3,422 samples, 2.37%)</title><rect x="16.4488%" y="661" width="2.3700%" height="15" fill="rgb(244,223,14)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="671.50">tr..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,422 samples, 2.37%)</title><rect x="16.4488%" y="645" width="2.3700%" height="15" fill="rgb(224,124,37)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="655.50">&lt;a..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,422 samples, 2.37%)</title><rect x="16.4488%" y="629" width="2.3700%" height="15" fill="rgb(251,171,30)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="639.50">&lt;a..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,422 samples, 2.37%)</title><rect x="16.4488%" y="613" width="2.3700%" height="15" fill="rgb(236,46,54)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="623.50">&lt;c..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,422 samples, 2.37%)</title><rect x="16.4488%" y="597" width="2.3700%" height="15" fill="rgb(245,213,5)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="607.50">&lt;a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,422 samples, 2.37%)</title><rect x="16.4488%" y="581" width="2.3700%" height="15" fill="rgb(230,144,27)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="591.50">as..</text></g><g><title>std::panic::catch_unwind (3,422 samples, 2.37%)</title><rect x="16.4488%" y="565" width="2.3700%" height="15" fill="rgb(220,86,6)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="575.50">st..</text></g><g><title>std::panicking::try (3,422 samples, 2.37%)</title><rect x="16.4488%" y="549" width="2.3700%" height="15" fill="rgb(240,20,13)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="559.50">st..</text></g><g><title>std::panicking::try::do_call (3,422 samples, 2.37%)</title><rect x="16.4488%" y="533" width="2.3700%" height="15" fill="rgb(217,89,34)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="543.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,422 samples, 2.37%)</title><rect x="16.4488%" y="517" width="2.3700%" height="15" fill="rgb(229,13,5)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="527.50">&lt;c..</text></g><g><title>core::ops::function::FnOnce::call_once (3,422 samples, 2.37%)</title><rect x="16.4488%" y="501" width="2.3700%" height="15" fill="rgb(244,67,35)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="511.50">co..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,422 samples, 2.37%)</title><rect x="16.4488%" y="485" width="2.3700%" height="15" fill="rgb(221,40,2)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="495.50">as..</text></g><g><title>async_ffi::FfiContext::with_context (3,422 samples, 2.37%)</title><rect x="16.4488%" y="469" width="2.3700%" height="15" fill="rgb(237,157,21)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="479.50">as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,422 samples, 2.37%)</title><rect x="16.4488%" y="453" width="2.3700%" height="15" fill="rgb(222,94,11)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="463.50">as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,422 samples, 2.37%)</title><rect x="16.4488%" y="437" width="2.3700%" height="15" fill="rgb(249,113,6)" fg:x="23750" fg:w="3422"/><text x="16.6988%" y="447.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (3,332 samples, 2.31%)</title><rect x="16.5112%" y="421" width="2.3077%" height="15" fill="rgb(238,137,36)" fg:x="23840" fg:w="3332"/><text x="16.7612%" y="431.50">&lt;..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,228 samples, 0.85%)</title><rect x="17.9684%" y="405" width="0.8505%" height="15" fill="rgb(210,102,26)" fg:x="25944" fg:w="1228"/><text x="18.2184%" y="415.50"></text></g><g><title>[libc-2.31.so] (309 samples, 0.21%)</title><rect x="19.1887%" y="709" width="0.2140%" height="15" fill="rgb(218,30,30)" fg:x="27706" fg:w="309"/><text x="19.4387%" y="719.50"></text></g><g><title>[libc-2.31.so] (489 samples, 0.34%)</title><rect x="19.4768%" y="693" width="0.3387%" height="15" fill="rgb(214,67,26)" fg:x="28122" fg:w="489"/><text x="19.7268%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (324 samples, 0.22%)</title><rect x="19.8155%" y="693" width="0.2244%" height="15" fill="rgb(251,9,53)" fg:x="28611" fg:w="324"/><text x="20.0655%" y="703.50"></text></g><g><title>core::ptr::write (315 samples, 0.22%)</title><rect x="19.8217%" y="677" width="0.2182%" height="15" fill="rgb(228,204,25)" fg:x="28620" fg:w="315"/><text x="20.0717%" y="687.50"></text></g><g><title>[libc-2.31.so] (311 samples, 0.22%)</title><rect x="19.8245%" y="661" width="0.2154%" height="15" fill="rgb(207,153,8)" fg:x="28624" fg:w="311"/><text x="20.0745%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.02%)</title><rect x="20.0399%" y="693" width="0.0152%" height="15" fill="rgb(242,9,16)" fg:x="28935" fg:w="22"/><text x="20.2899%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (584 samples, 0.40%)</title><rect x="20.0565%" y="693" width="0.4045%" height="15" fill="rgb(217,211,10)" fg:x="28959" fg:w="584"/><text x="20.3065%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (569 samples, 0.39%)</title><rect x="20.0669%" y="677" width="0.3941%" height="15" fill="rgb(219,228,52)" fg:x="28974" fg:w="569"/><text x="20.3169%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (548 samples, 0.38%)</title><rect x="20.0814%" y="661" width="0.3795%" height="15" fill="rgb(231,92,29)" fg:x="28995" fg:w="548"/><text x="20.3314%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (548 samples, 0.38%)</title><rect x="20.0814%" y="645" width="0.3795%" height="15" fill="rgb(232,8,23)" fg:x="28995" fg:w="548"/><text x="20.3314%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (548 samples, 0.38%)</title><rect x="20.0814%" y="629" width="0.3795%" height="15" fill="rgb(216,211,34)" fg:x="28995" fg:w="548"/><text x="20.3314%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (548 samples, 0.38%)</title><rect x="20.0814%" y="613" width="0.3795%" height="15" fill="rgb(236,151,0)" fg:x="28995" fg:w="548"/><text x="20.3314%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (548 samples, 0.38%)</title><rect x="20.0814%" y="597" width="0.3795%" height="15" fill="rgb(209,168,3)" fg:x="28995" fg:w="548"/><text x="20.3314%" y="607.50"></text></g><g><title>[libc-2.31.so] (527 samples, 0.36%)</title><rect x="20.0960%" y="581" width="0.3650%" height="15" fill="rgb(208,129,28)" fg:x="29016" fg:w="527"/><text x="20.3460%" y="591.50"></text></g><g><title>[libc-2.31.so] (462 samples, 0.32%)</title><rect x="20.5268%" y="661" width="0.3200%" height="15" fill="rgb(229,78,22)" fg:x="29638" fg:w="462"/><text x="20.7768%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (319 samples, 0.22%)</title><rect x="20.8530%" y="661" width="0.2209%" height="15" fill="rgb(228,187,13)" fg:x="30109" fg:w="319"/><text x="21.1030%" y="671.50"></text></g><g><title>core::ptr::read (305 samples, 0.21%)</title><rect x="20.8627%" y="645" width="0.2112%" height="15" fill="rgb(240,119,24)" fg:x="30123" fg:w="305"/><text x="21.1127%" y="655.50"></text></g><g><title>[libc-2.31.so] (269 samples, 0.19%)</title><rect x="20.8876%" y="629" width="0.1863%" height="15" fill="rgb(209,194,42)" fg:x="30159" fg:w="269"/><text x="21.1376%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (245 samples, 0.17%)</title><rect x="21.0739%" y="661" width="0.1697%" height="15" fill="rgb(247,200,46)" fg:x="30428" fg:w="245"/><text x="21.3239%" y="671.50"></text></g><g><title>core::ptr::write (241 samples, 0.17%)</title><rect x="21.0767%" y="645" width="0.1669%" height="15" fill="rgb(218,76,16)" fg:x="30432" fg:w="241"/><text x="21.3267%" y="655.50"></text></g><g><title>[libc-2.31.so] (235 samples, 0.16%)</title><rect x="21.0808%" y="629" width="0.1628%" height="15" fill="rgb(225,21,48)" fg:x="30438" fg:w="235"/><text x="21.3308%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,663 samples, 1.84%)</title><rect x="19.4027%" y="709" width="1.8443%" height="15" fill="rgb(239,223,50)" fg:x="28015" fg:w="2663"/><text x="19.6527%" y="719.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,135 samples, 0.79%)</title><rect x="20.4610%" y="693" width="0.7861%" height="15" fill="rgb(244,45,21)" fg:x="29543" fg:w="1135"/><text x="20.7110%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,113 samples, 0.77%)</title><rect x="20.4762%" y="677" width="0.7708%" height="15" fill="rgb(232,33,43)" fg:x="29565" fg:w="1113"/><text x="20.7262%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,014 samples, 2.09%)</title><rect x="19.1755%" y="725" width="2.0874%" height="15" fill="rgb(209,8,3)" fg:x="27687" fg:w="3014"/><text x="19.4255%" y="735.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (23 samples, 0.02%)</title><rect x="21.2471%" y="709" width="0.0159%" height="15" fill="rgb(214,25,53)" fg:x="30678" fg:w="23"/><text x="21.4971%" y="719.50"></text></g><g><title>[libc-2.31.so] (1,283 samples, 0.89%)</title><rect x="21.2630%" y="725" width="0.8886%" height="15" fill="rgb(254,186,54)" fg:x="30701" fg:w="1283"/><text x="21.5130%" y="735.50"></text></g><g><title>sn_rust_dealloc (137 samples, 0.09%)</title><rect x="22.1585%" y="565" width="0.0949%" height="15" fill="rgb(208,174,49)" fg:x="31994" fg:w="137"/><text x="22.4085%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (151 samples, 0.10%)</title><rect x="22.1516%" y="725" width="0.1046%" height="15" fill="rgb(233,191,51)" fg:x="31984" fg:w="151"/><text x="22.4016%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (151 samples, 0.10%)</title><rect x="22.1516%" y="709" width="0.1046%" height="15" fill="rgb(222,134,10)" fg:x="31984" fg:w="151"/><text x="22.4016%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (141 samples, 0.10%)</title><rect x="22.1585%" y="693" width="0.0977%" height="15" fill="rgb(230,226,20)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (141 samples, 0.10%)</title><rect x="22.1585%" y="677" width="0.0977%" height="15" fill="rgb(251,111,25)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (141 samples, 0.10%)</title><rect x="22.1585%" y="661" width="0.0977%" height="15" fill="rgb(224,40,46)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 0.10%)</title><rect x="22.1585%" y="645" width="0.0977%" height="15" fill="rgb(236,108,47)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (141 samples, 0.10%)</title><rect x="22.1585%" y="629" width="0.0977%" height="15" fill="rgb(234,93,0)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (141 samples, 0.10%)</title><rect x="22.1585%" y="613" width="0.0977%" height="15" fill="rgb(224,213,32)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="623.50"></text></g><g><title>__rg_dealloc (141 samples, 0.10%)</title><rect x="22.1585%" y="597" width="0.0977%" height="15" fill="rgb(251,11,48)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (141 samples, 0.10%)</title><rect x="22.1585%" y="581" width="0.0977%" height="15" fill="rgb(236,173,5)" fg:x="31994" fg:w="141"/><text x="22.4085%" y="591.50"></text></g><g><title>async_global_executor::reactor::block_on (20,790 samples, 14.40%)</title><rect x="7.8657%" y="1077" width="14.3988%" height="15" fill="rgb(230,95,12)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="1087.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,790 samples, 14.40%)</title><rect x="7.8657%" y="1061" width="14.3988%" height="15" fill="rgb(232,209,1)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="1071.50">async_global_executor:..</text></g><g><title>async_io::driver::block_on (20,790 samples, 14.40%)</title><rect x="7.8657%" y="1045" width="14.3988%" height="15" fill="rgb(232,6,1)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="1055.50">async_io::driver::bloc..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="1029" width="14.3988%" height="15" fill="rgb(210,224,50)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="1039.50">&lt;futures_lite::future:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="1013" width="14.3988%" height="15" fill="rgb(228,127,35)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="1023.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::run::{{closure}} (20,790 samples, 14.40%)</title><rect x="7.8657%" y="997" width="14.3988%" height="15" fill="rgb(245,102,45)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="1007.50">async_executor::Execut..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="981" width="14.3988%" height="15" fill="rgb(214,1,49)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="991.50">&lt;futures_lite::future:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="965" width="14.3988%" height="15" fill="rgb(226,163,40)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="975.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (20,790 samples, 14.40%)</title><rect x="7.8657%" y="949" width="14.3988%" height="15" fill="rgb(239,212,28)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="959.50">async_executor::Execut..</text></g><g><title>async_task::runnable::Runnable::run (20,790 samples, 14.40%)</title><rect x="7.8657%" y="933" width="14.3988%" height="15" fill="rgb(220,20,13)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="943.50">async_task::runnable::..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (20,790 samples, 14.40%)</title><rect x="7.8657%" y="917" width="14.3988%" height="15" fill="rgb(210,164,35)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="927.50">async_task::raw::RawTa..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="901" width="14.3988%" height="15" fill="rgb(248,109,41)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as ..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="885" width="14.3988%" height="15" fill="rgb(238,23,50)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="895.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (20,790 samples, 14.40%)</title><rect x="7.8657%" y="869" width="14.3988%" height="15" fill="rgb(211,48,49)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="879.50">async_executor::Execut..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="853" width="14.3988%" height="15" fill="rgb(223,36,21)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="863.50">&lt;async_std::task::buil..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (20,790 samples, 14.40%)</title><rect x="7.8657%" y="837" width="14.3988%" height="15" fill="rgb(207,123,46)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="847.50">async_std::task::task_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,790 samples, 14.40%)</title><rect x="7.8657%" y="821" width="14.3988%" height="15" fill="rgb(240,218,32)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="831.50">std::thread::local::Lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,790 samples, 14.40%)</title><rect x="7.8657%" y="805" width="14.3988%" height="15" fill="rgb(252,5,43)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="815.50">std::thread::local::Lo..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (20,790 samples, 14.40%)</title><rect x="7.8657%" y="789" width="14.3988%" height="15" fill="rgb(252,84,19)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="799.50">async_std::task::task_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (20,790 samples, 14.40%)</title><rect x="7.8657%" y="773" width="14.3988%" height="15" fill="rgb(243,152,39)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="783.50">&lt;async_std::task::buil..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,790 samples, 14.40%)</title><rect x="7.8657%" y="757" width="14.3988%" height="15" fill="rgb(234,160,15)" fg:x="11357" fg:w="20790"/><text x="8.1157%" y="767.50">&lt;core::future::from_ge..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,975 samples, 3.45%)</title><rect x="18.8189%" y="741" width="3.4456%" height="15" fill="rgb(237,34,20)" fg:x="27172" fg:w="4975"/><text x="19.0689%" y="751.50">tre..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (92 samples, 0.06%)</title><rect x="22.5491%" y="565" width="0.0637%" height="15" fill="rgb(229,97,13)" fg:x="32558" fg:w="92"/><text x="22.7991%" y="575.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.05%)</title><rect x="22.5609%" y="549" width="0.0519%" height="15" fill="rgb(234,71,50)" fg:x="32575" fg:w="75"/><text x="22.8109%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (33 samples, 0.02%)</title><rect x="22.6128%" y="565" width="0.0229%" height="15" fill="rgb(253,155,4)" fg:x="32650" fg:w="33"/><text x="22.8628%" y="575.50"></text></g><g><title>[libc-2.31.so] (426 samples, 0.30%)</title><rect x="22.6385%" y="549" width="0.2950%" height="15" fill="rgb(222,185,37)" fg:x="32687" fg:w="426"/><text x="22.8885%" y="559.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.07%)</title><rect x="23.0409%" y="533" width="0.0686%" height="15" fill="rgb(251,177,13)" fg:x="33268" fg:w="99"/><text x="23.2909%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (16 samples, 0.01%)</title><rect x="23.1094%" y="533" width="0.0111%" height="15" fill="rgb(250,179,40)" fg:x="33367" fg:w="16"/><text x="23.3594%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (312 samples, 0.22%)</title><rect x="23.1274%" y="533" width="0.2161%" height="15" fill="rgb(242,44,2)" fg:x="33393" fg:w="312"/><text x="23.3774%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (309 samples, 0.21%)</title><rect x="23.1295%" y="517" width="0.2140%" height="15" fill="rgb(216,177,13)" fg:x="33396" fg:w="309"/><text x="23.3795%" y="527.50"></text></g><g><title>value_trait::Builder::object (309 samples, 0.21%)</title><rect x="23.1295%" y="501" width="0.2140%" height="15" fill="rgb(216,106,43)" fg:x="33396" fg:w="309"/><text x="23.3795%" y="511.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (302 samples, 0.21%)</title><rect x="23.1344%" y="485" width="0.2092%" height="15" fill="rgb(216,183,2)" fg:x="33403" fg:w="302"/><text x="23.3844%" y="495.50"></text></g><g><title>tremor_value::value::Value::Object (297 samples, 0.21%)</title><rect x="23.1378%" y="469" width="0.2057%" height="15" fill="rgb(249,75,3)" fg:x="33408" fg:w="297"/><text x="23.3878%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (19 samples, 0.01%)</title><rect x="23.3601%" y="469" width="0.0132%" height="15" fill="rgb(219,67,39)" fg:x="33729" fg:w="19"/><text x="23.6101%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.01%)</title><rect x="23.3601%" y="453" width="0.0132%" height="15" fill="rgb(253,228,2)" fg:x="33729" fg:w="19"/><text x="23.6101%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (131 samples, 0.09%)</title><rect x="23.3518%" y="517" width="0.0907%" height="15" fill="rgb(235,138,27)" fg:x="33717" fg:w="131"/><text x="23.6018%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (128 samples, 0.09%)</title><rect x="23.3539%" y="501" width="0.0887%" height="15" fill="rgb(236,97,51)" fg:x="33720" fg:w="128"/><text x="23.6039%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (128 samples, 0.09%)</title><rect x="23.3539%" y="485" width="0.0887%" height="15" fill="rgb(240,80,30)" fg:x="33720" fg:w="128"/><text x="23.6039%" y="495.50"></text></g><g><title>sn_rust_dealloc (100 samples, 0.07%)</title><rect x="23.3733%" y="469" width="0.0693%" height="15" fill="rgb(230,178,19)" fg:x="33748" fg:w="100"/><text x="23.6233%" y="479.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.02%)</title><rect x="23.4439%" y="485" width="0.0201%" height="15" fill="rgb(210,190,27)" fg:x="33850" fg:w="29"/><text x="23.6939%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (164 samples, 0.11%)</title><rect x="23.3511%" y="533" width="0.1136%" height="15" fill="rgb(222,107,31)" fg:x="33716" fg:w="164"/><text x="23.6011%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (32 samples, 0.02%)</title><rect x="23.4426%" y="517" width="0.0222%" height="15" fill="rgb(216,127,34)" fg:x="33848" fg:w="32"/><text x="23.6926%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.02%)</title><rect x="23.4426%" y="501" width="0.0222%" height="15" fill="rgb(234,116,52)" fg:x="33848" fg:w="32"/><text x="23.6926%" y="511.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="23.4896%" y="469" width="0.0187%" height="15" fill="rgb(222,124,15)" fg:x="33916" fg:w="27"/><text x="23.7396%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,261 samples, 0.87%)</title><rect x="22.6357%" y="565" width="0.8733%" height="15" fill="rgb(231,179,28)" fg:x="32683" fg:w="1261"/><text x="22.8857%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (831 samples, 0.58%)</title><rect x="22.9335%" y="549" width="0.5755%" height="15" fill="rgb(226,93,45)" fg:x="33113" fg:w="831"/><text x="23.1835%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (64 samples, 0.04%)</title><rect x="23.4647%" y="533" width="0.0443%" height="15" fill="rgb(215,8,51)" fg:x="33880" fg:w="64"/><text x="23.7147%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (35 samples, 0.02%)</title><rect x="23.4848%" y="517" width="0.0242%" height="15" fill="rgb(223,106,5)" fg:x="33909" fg:w="35"/><text x="23.7348%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (35 samples, 0.02%)</title><rect x="23.4848%" y="501" width="0.0242%" height="15" fill="rgb(250,191,5)" fg:x="33909" fg:w="35"/><text x="23.7348%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (35 samples, 0.02%)</title><rect x="23.4848%" y="485" width="0.0242%" height="15" fill="rgb(242,132,44)" fg:x="33909" fg:w="35"/><text x="23.7348%" y="495.50"></text></g><g><title>[libc-2.31.so] (416 samples, 0.29%)</title><rect x="23.5118%" y="565" width="0.2881%" height="15" fill="rgb(251,152,29)" fg:x="33948" fg:w="416"/><text x="23.7618%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,330 samples, 1.61%)</title><rect x="22.2645%" y="597" width="1.6137%" height="15" fill="rgb(218,179,5)" fg:x="32147" fg:w="2330"/><text x="22.5145%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,330 samples, 1.61%)</title><rect x="22.2645%" y="581" width="1.6137%" height="15" fill="rgb(227,67,19)" fg:x="32147" fg:w="2330"/><text x="22.5145%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (90 samples, 0.06%)</title><rect x="23.8159%" y="565" width="0.0623%" height="15" fill="rgb(233,119,31)" fg:x="34387" fg:w="90"/><text x="24.0659%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (150 samples, 0.10%)</title><rect x="23.8817%" y="437" width="0.1039%" height="15" fill="rgb(241,120,22)" fg:x="34482" fg:w="150"/><text x="24.1317%" y="447.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (150 samples, 0.10%)</title><rect x="23.8817%" y="421" width="0.1039%" height="15" fill="rgb(224,102,30)" fg:x="34482" fg:w="150"/><text x="24.1317%" y="431.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (150 samples, 0.10%)</title><rect x="23.8817%" y="405" width="0.1039%" height="15" fill="rgb(210,164,37)" fg:x="34482" fg:w="150"/><text x="24.1317%" y="415.50"></text></g><g><title>[libc-2.31.so] (133 samples, 0.09%)</title><rect x="23.8934%" y="389" width="0.0921%" height="15" fill="rgb(226,191,16)" fg:x="34499" fg:w="133"/><text x="24.1434%" y="399.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (16 samples, 0.01%)</title><rect x="24.0437%" y="389" width="0.0111%" height="15" fill="rgb(214,40,45)" fg:x="34716" fg:w="16"/><text x="24.2937%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (16 samples, 0.01%)</title><rect x="24.0437%" y="373" width="0.0111%" height="15" fill="rgb(244,29,26)" fg:x="34716" fg:w="16"/><text x="24.2937%" y="383.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (16 samples, 0.01%)</title><rect x="24.0437%" y="357" width="0.0111%" height="15" fill="rgb(216,16,5)" fg:x="34716" fg:w="16"/><text x="24.2937%" y="367.50"></text></g><g><title>async_ffi::FfiContext::with_context (16 samples, 0.01%)</title><rect x="24.0437%" y="341" width="0.0111%" height="15" fill="rgb(249,76,35)" fg:x="34716" fg:w="16"/><text x="24.2937%" y="351.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (354 samples, 0.25%)</title><rect x="23.8782%" y="517" width="0.2452%" height="15" fill="rgb(207,11,44)" fg:x="34477" fg:w="354"/><text x="24.1282%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (354 samples, 0.25%)</title><rect x="23.8782%" y="501" width="0.2452%" height="15" fill="rgb(228,190,49)" fg:x="34477" fg:w="354"/><text x="24.1282%" y="511.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (354 samples, 0.25%)</title><rect x="23.8782%" y="485" width="0.2452%" height="15" fill="rgb(214,173,12)" fg:x="34477" fg:w="354"/><text x="24.1282%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (354 samples, 0.25%)</title><rect x="23.8782%" y="469" width="0.2452%" height="15" fill="rgb(218,26,35)" fg:x="34477" fg:w="354"/><text x="24.1282%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (354 samples, 0.25%)</title><rect x="23.8782%" y="453" width="0.2452%" height="15" fill="rgb(220,200,19)" fg:x="34477" fg:w="354"/><text x="24.1282%" y="463.50"></text></g><g><title>std::panic::catch_unwind (199 samples, 0.14%)</title><rect x="23.9855%" y="437" width="0.1378%" height="15" fill="rgb(239,95,49)" fg:x="34632" fg:w="199"/><text x="24.2355%" y="447.50"></text></g><g><title>std::panicking::try (199 samples, 0.14%)</title><rect x="23.9855%" y="421" width="0.1378%" height="15" fill="rgb(235,85,53)" fg:x="34632" fg:w="199"/><text x="24.2355%" y="431.50"></text></g><g><title>std::panicking::try::do_call (199 samples, 0.14%)</title><rect x="23.9855%" y="405" width="0.1378%" height="15" fill="rgb(233,133,31)" fg:x="34632" fg:w="199"/><text x="24.2355%" y="415.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.07%)</title><rect x="24.0548%" y="389" width="0.0686%" height="15" fill="rgb(218,25,20)" fg:x="34732" fg:w="99"/><text x="24.3048%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (66 samples, 0.05%)</title><rect x="24.1670%" y="293" width="0.0457%" height="15" fill="rgb(252,210,38)" fg:x="34894" fg:w="66"/><text x="24.4170%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,818 samples, 1.95%)</title><rect x="22.2645%" y="613" width="1.9517%" height="15" fill="rgb(242,134,21)" fg:x="32147" fg:w="2818"/><text x="22.5145%" y="623.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (488 samples, 0.34%)</title><rect x="23.8782%" y="597" width="0.3380%" height="15" fill="rgb(213,28,48)" fg:x="34477" fg:w="488"/><text x="24.1282%" y="607.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (488 samples, 0.34%)</title><rect x="23.8782%" y="581" width="0.3380%" height="15" fill="rgb(250,196,2)" fg:x="34477" fg:w="488"/><text x="24.1282%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (488 samples, 0.34%)</title><rect x="23.8782%" y="565" width="0.3380%" height="15" fill="rgb(227,5,17)" fg:x="34477" fg:w="488"/><text x="24.1282%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (488 samples, 0.34%)</title><rect x="23.8782%" y="549" width="0.3380%" height="15" fill="rgb(221,226,24)" fg:x="34477" fg:w="488"/><text x="24.1282%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (488 samples, 0.34%)</title><rect x="23.8782%" y="533" width="0.3380%" height="15" fill="rgb(211,5,48)" fg:x="34477" fg:w="488"/><text x="24.1282%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (122 samples, 0.08%)</title><rect x="24.1317%" y="517" width="0.0845%" height="15" fill="rgb(219,150,6)" fg:x="34843" fg:w="122"/><text x="24.3817%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (122 samples, 0.08%)</title><rect x="24.1317%" y="501" width="0.0845%" height="15" fill="rgb(251,46,16)" fg:x="34843" fg:w="122"/><text x="24.3817%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (108 samples, 0.07%)</title><rect x="24.1414%" y="485" width="0.0748%" height="15" fill="rgb(220,204,40)" fg:x="34857" fg:w="108"/><text x="24.3914%" y="495.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (108 samples, 0.07%)</title><rect x="24.1414%" y="469" width="0.0748%" height="15" fill="rgb(211,85,2)" fg:x="34857" fg:w="108"/><text x="24.3914%" y="479.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (108 samples, 0.07%)</title><rect x="24.1414%" y="453" width="0.0748%" height="15" fill="rgb(229,17,7)" fg:x="34857" fg:w="108"/><text x="24.3914%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (108 samples, 0.07%)</title><rect x="24.1414%" y="437" width="0.0748%" height="15" fill="rgb(239,72,28)" fg:x="34857" fg:w="108"/><text x="24.3914%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (100 samples, 0.07%)</title><rect x="24.1469%" y="421" width="0.0693%" height="15" fill="rgb(230,47,54)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.07%)</title><rect x="24.1469%" y="405" width="0.0693%" height="15" fill="rgb(214,50,8)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.07%)</title><rect x="24.1469%" y="389" width="0.0693%" height="15" fill="rgb(216,198,43)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.07%)</title><rect x="24.1469%" y="373" width="0.0693%" height="15" fill="rgb(234,20,35)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="383.50"></text></g><g><title>alloc::alloc::alloc (100 samples, 0.07%)</title><rect x="24.1469%" y="357" width="0.0693%" height="15" fill="rgb(254,45,19)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="367.50"></text></g><g><title>__rg_alloc (100 samples, 0.07%)</title><rect x="24.1469%" y="341" width="0.0693%" height="15" fill="rgb(219,14,44)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (100 samples, 0.07%)</title><rect x="24.1469%" y="325" width="0.0693%" height="15" fill="rgb(217,220,26)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="335.50"></text></g><g><title>sn_rust_alloc (100 samples, 0.07%)</title><rect x="24.1469%" y="309" width="0.0693%" height="15" fill="rgb(213,158,28)" fg:x="34865" fg:w="100"/><text x="24.3969%" y="319.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (2,823 samples, 1.96%)</title><rect x="22.2645%" y="1077" width="1.9552%" height="15" fill="rgb(252,51,52)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="1087.50">a..</text></g><g><title>std::panic::catch_unwind (2,823 samples, 1.96%)</title><rect x="22.2645%" y="1061" width="1.9552%" height="15" fill="rgb(246,89,16)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="1071.50">s..</text></g><g><title>std::panicking::try (2,823 samples, 1.96%)</title><rect x="22.2645%" y="1045" width="1.9552%" height="15" fill="rgb(216,158,49)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="1055.50">s..</text></g><g><title>std::panicking::try::do_call (2,823 samples, 1.96%)</title><rect x="22.2645%" y="1029" width="1.9552%" height="15" fill="rgb(236,107,19)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="1039.50">s..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="1013" width="1.9552%" height="15" fill="rgb(228,185,30)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="1023.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,823 samples, 1.96%)</title><rect x="22.2645%" y="997" width="1.9552%" height="15" fill="rgb(246,134,8)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="1007.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,823 samples, 1.96%)</title><rect x="22.2645%" y="981" width="1.9552%" height="15" fill="rgb(214,143,50)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="991.50">s..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="965" width="1.9552%" height="15" fill="rgb(228,75,8)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="975.50">a..</text></g><g><title>async_global_executor::reactor::block_on (2,823 samples, 1.96%)</title><rect x="22.2645%" y="949" width="1.9552%" height="15" fill="rgb(207,175,4)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="959.50">a..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="933" width="1.9552%" height="15" fill="rgb(205,108,24)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="943.50">a..</text></g><g><title>async_io::driver::block_on (2,823 samples, 1.96%)</title><rect x="22.2645%" y="917" width="1.9552%" height="15" fill="rgb(244,120,49)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="927.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="901" width="1.9552%" height="15" fill="rgb(223,47,38)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="911.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="885" width="1.9552%" height="15" fill="rgb(229,179,11)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="895.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="869" width="1.9552%" height="15" fill="rgb(231,122,1)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="879.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="853" width="1.9552%" height="15" fill="rgb(245,119,9)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="863.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="837" width="1.9552%" height="15" fill="rgb(241,163,25)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="847.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="821" width="1.9552%" height="15" fill="rgb(217,214,3)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="831.50">a..</text></g><g><title>async_task::runnable::Runnable::run (2,823 samples, 1.96%)</title><rect x="22.2645%" y="805" width="1.9552%" height="15" fill="rgb(240,86,28)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="815.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,823 samples, 1.96%)</title><rect x="22.2645%" y="789" width="1.9552%" height="15" fill="rgb(215,47,9)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="799.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="773" width="1.9552%" height="15" fill="rgb(252,25,45)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="783.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="757" width="1.9552%" height="15" fill="rgb(251,164,9)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="767.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="741" width="1.9552%" height="15" fill="rgb(233,194,0)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="751.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="725" width="1.9552%" height="15" fill="rgb(249,111,24)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="735.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,823 samples, 1.96%)</title><rect x="22.2645%" y="709" width="1.9552%" height="15" fill="rgb(250,223,3)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="719.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,823 samples, 1.96%)</title><rect x="22.2645%" y="693" width="1.9552%" height="15" fill="rgb(236,178,37)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="703.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,823 samples, 1.96%)</title><rect x="22.2645%" y="677" width="1.9552%" height="15" fill="rgb(241,158,50)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="687.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="661" width="1.9552%" height="15" fill="rgb(213,121,41)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="671.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,823 samples, 1.96%)</title><rect x="22.2645%" y="645" width="1.9552%" height="15" fill="rgb(240,92,3)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="655.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,823 samples, 1.96%)</title><rect x="22.2645%" y="629" width="1.9552%" height="15" fill="rgb(205,123,3)" fg:x="32147" fg:w="2823"/><text x="22.5145%" y="639.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="24.4142%" y="485" width="0.0152%" height="15" fill="rgb(205,97,47)" fg:x="35251" fg:w="22"/><text x="24.6642%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="24.4323%" y="469" width="0.0152%" height="15" fill="rgb(247,152,14)" fg:x="35277" fg:w="22"/><text x="24.6823%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="24.4323%" y="453" width="0.0152%" height="15" fill="rgb(248,195,53)" fg:x="35277" fg:w="22"/><text x="24.6823%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.01%)</title><rect x="24.4336%" y="437" width="0.0139%" height="15" fill="rgb(226,201,16)" fg:x="35279" fg:w="20"/><text x="24.6836%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (31 samples, 0.02%)</title><rect x="24.4295%" y="485" width="0.0215%" height="15" fill="rgb(205,98,0)" fg:x="35273" fg:w="31"/><text x="24.6795%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (18 samples, 0.01%)</title><rect x="24.4510%" y="485" width="0.0125%" height="15" fill="rgb(214,191,48)" fg:x="35304" fg:w="18"/><text x="24.7010%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (18 samples, 0.01%)</title><rect x="24.4510%" y="469" width="0.0125%" height="15" fill="rgb(237,112,39)" fg:x="35304" fg:w="18"/><text x="24.7010%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (24 samples, 0.02%)</title><rect x="24.4662%" y="485" width="0.0166%" height="15" fill="rgb(247,203,27)" fg:x="35326" fg:w="24"/><text x="24.7162%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (24 samples, 0.02%)</title><rect x="24.4662%" y="469" width="0.0166%" height="15" fill="rgb(235,124,28)" fg:x="35326" fg:w="24"/><text x="24.7162%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (29 samples, 0.02%)</title><rect x="24.4828%" y="485" width="0.0201%" height="15" fill="rgb(208,207,46)" fg:x="35350" fg:w="29"/><text x="24.7328%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (29 samples, 0.02%)</title><rect x="24.4828%" y="469" width="0.0201%" height="15" fill="rgb(234,176,4)" fg:x="35350" fg:w="29"/><text x="24.7328%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29 samples, 0.02%)</title><rect x="24.4828%" y="453" width="0.0201%" height="15" fill="rgb(230,133,28)" fg:x="35350" fg:w="29"/><text x="24.7328%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (29 samples, 0.02%)</title><rect x="24.4828%" y="437" width="0.0201%" height="15" fill="rgb(211,137,40)" fg:x="35350" fg:w="29"/><text x="24.7328%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (16 samples, 0.01%)</title><rect x="24.4918%" y="421" width="0.0111%" height="15" fill="rgb(254,35,13)" fg:x="35363" fg:w="16"/><text x="24.7418%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (16 samples, 0.01%)</title><rect x="24.4918%" y="405" width="0.0111%" height="15" fill="rgb(225,49,51)" fg:x="35363" fg:w="16"/><text x="24.7418%" y="415.50"></text></g><g><title>sn_rust_dealloc (94 samples, 0.07%)</title><rect x="24.5271%" y="325" width="0.0651%" height="15" fill="rgb(251,10,15)" fg:x="35414" fg:w="94"/><text x="24.7771%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 0.09%)</title><rect x="24.5168%" y="389" width="0.0866%" height="15" fill="rgb(228,207,15)" fg:x="35399" fg:w="125"/><text x="24.7668%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (125 samples, 0.09%)</title><rect x="24.5168%" y="373" width="0.0866%" height="15" fill="rgb(241,99,19)" fg:x="35399" fg:w="125"/><text x="24.7668%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (115 samples, 0.08%)</title><rect x="24.5237%" y="357" width="0.0796%" height="15" fill="rgb(207,104,49)" fg:x="35409" fg:w="115"/><text x="24.7737%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (115 samples, 0.08%)</title><rect x="24.5237%" y="341" width="0.0796%" height="15" fill="rgb(234,99,18)" fg:x="35409" fg:w="115"/><text x="24.7737%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="24.5922%" y="325" width="0.0111%" height="15" fill="rgb(213,191,49)" fg:x="35508" fg:w="16"/><text x="24.8422%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (140 samples, 0.10%)</title><rect x="24.5140%" y="453" width="0.0970%" height="15" fill="rgb(210,226,19)" fg:x="35395" fg:w="140"/><text x="24.7640%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (138 samples, 0.10%)</title><rect x="24.5154%" y="437" width="0.0956%" height="15" fill="rgb(229,97,18)" fg:x="35397" fg:w="138"/><text x="24.7654%" y="447.50"></text></g><g><title>core::mem::drop (136 samples, 0.09%)</title><rect x="24.5168%" y="421" width="0.0942%" height="15" fill="rgb(211,167,15)" fg:x="35399" fg:w="136"/><text x="24.7668%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (136 samples, 0.09%)</title><rect x="24.5168%" y="405" width="0.0942%" height="15" fill="rgb(210,169,34)" fg:x="35399" fg:w="136"/><text x="24.7668%" y="415.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.03%)</title><rect x="24.6109%" y="453" width="0.0298%" height="15" fill="rgb(241,121,31)" fg:x="35535" fg:w="43"/><text x="24.8609%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (192 samples, 0.13%)</title><rect x="24.5091%" y="485" width="0.1330%" height="15" fill="rgb(232,40,11)" fg:x="35388" fg:w="192"/><text x="24.7591%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (192 samples, 0.13%)</title><rect x="24.5091%" y="469" width="0.1330%" height="15" fill="rgb(205,86,26)" fg:x="35388" fg:w="192"/><text x="24.7591%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (20 samples, 0.01%)</title><rect x="24.6483%" y="389" width="0.0139%" height="15" fill="rgb(231,126,28)" fg:x="35589" fg:w="20"/><text x="24.8983%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (20 samples, 0.01%)</title><rect x="24.6483%" y="373" width="0.0139%" height="15" fill="rgb(219,221,18)" fg:x="35589" fg:w="20"/><text x="24.8983%" y="383.50"></text></g><g><title>sn_rust_dealloc (106 samples, 0.07%)</title><rect x="24.6622%" y="389" width="0.0734%" height="15" fill="rgb(211,40,0)" fg:x="35609" fg:w="106"/><text x="24.9122%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (129 samples, 0.09%)</title><rect x="24.6476%" y="437" width="0.0893%" height="15" fill="rgb(239,85,43)" fg:x="35588" fg:w="129"/><text x="24.8976%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (129 samples, 0.09%)</title><rect x="24.6476%" y="421" width="0.0893%" height="15" fill="rgb(231,55,21)" fg:x="35588" fg:w="129"/><text x="24.8976%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (129 samples, 0.09%)</title><rect x="24.6476%" y="405" width="0.0893%" height="15" fill="rgb(225,184,43)" fg:x="35588" fg:w="129"/><text x="24.8976%" y="415.50"></text></g><g><title>sn_rust_dealloc (121 samples, 0.08%)</title><rect x="24.8942%" y="261" width="0.0838%" height="15" fill="rgb(251,158,41)" fg:x="35944" fg:w="121"/><text x="25.1442%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (353 samples, 0.24%)</title><rect x="24.7453%" y="341" width="0.2445%" height="15" fill="rgb(234,159,37)" fg:x="35729" fg:w="353"/><text x="24.9953%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (353 samples, 0.24%)</title><rect x="24.7453%" y="325" width="0.2445%" height="15" fill="rgb(216,204,22)" fg:x="35729" fg:w="353"/><text x="24.9953%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (327 samples, 0.23%)</title><rect x="24.7633%" y="309" width="0.2265%" height="15" fill="rgb(214,17,3)" fg:x="35755" fg:w="327"/><text x="25.0133%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (327 samples, 0.23%)</title><rect x="24.7633%" y="293" width="0.2265%" height="15" fill="rgb(212,111,17)" fg:x="35755" fg:w="327"/><text x="25.0133%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (327 samples, 0.23%)</title><rect x="24.7633%" y="277" width="0.2265%" height="15" fill="rgb(221,157,24)" fg:x="35755" fg:w="327"/><text x="25.0133%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (17 samples, 0.01%)</title><rect x="24.9780%" y="261" width="0.0118%" height="15" fill="rgb(252,16,13)" fg:x="36065" fg:w="17"/><text x="25.2280%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (378 samples, 0.26%)</title><rect x="24.7377%" y="405" width="0.2618%" height="15" fill="rgb(221,62,2)" fg:x="35718" fg:w="378"/><text x="24.9877%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (375 samples, 0.26%)</title><rect x="24.7398%" y="389" width="0.2597%" height="15" fill="rgb(247,87,22)" fg:x="35721" fg:w="375"/><text x="24.9898%" y="399.50"></text></g><g><title>core::mem::drop (367 samples, 0.25%)</title><rect x="24.7453%" y="373" width="0.2542%" height="15" fill="rgb(215,73,9)" fg:x="35729" fg:w="367"/><text x="24.9953%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (367 samples, 0.25%)</title><rect x="24.7453%" y="357" width="0.2542%" height="15" fill="rgb(207,175,33)" fg:x="35729" fg:w="367"/><text x="24.9953%" y="367.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.05%)</title><rect x="24.9995%" y="405" width="0.0457%" height="15" fill="rgb(243,129,54)" fg:x="36096" fg:w="66"/><text x="25.2495%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (584 samples, 0.40%)</title><rect x="24.6421%" y="469" width="0.4045%" height="15" fill="rgb(227,119,45)" fg:x="35580" fg:w="584"/><text x="24.8921%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (576 samples, 0.40%)</title><rect x="24.6476%" y="453" width="0.3989%" height="15" fill="rgb(205,109,36)" fg:x="35588" fg:w="576"/><text x="24.8976%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (447 samples, 0.31%)</title><rect x="24.7370%" y="437" width="0.3096%" height="15" fill="rgb(205,6,39)" fg:x="35717" fg:w="447"/><text x="24.9870%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (447 samples, 0.31%)</title><rect x="24.7370%" y="421" width="0.3096%" height="15" fill="rgb(221,32,16)" fg:x="35717" fg:w="447"/><text x="24.9870%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (316 samples, 0.22%)</title><rect x="25.0708%" y="437" width="0.2189%" height="15" fill="rgb(228,144,50)" fg:x="36199" fg:w="316"/><text x="25.3208%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (316 samples, 0.22%)</title><rect x="25.0708%" y="421" width="0.2189%" height="15" fill="rgb(229,201,53)" fg:x="36199" fg:w="316"/><text x="25.3208%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (316 samples, 0.22%)</title><rect x="25.0708%" y="405" width="0.2189%" height="15" fill="rgb(249,153,27)" fg:x="36199" fg:w="316"/><text x="25.3208%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (339 samples, 0.23%)</title><rect x="25.0632%" y="453" width="0.2348%" height="15" fill="rgb(227,106,25)" fg:x="36188" fg:w="339"/><text x="25.3132%" y="463.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (364 samples, 0.25%)</title><rect x="25.3264%" y="293" width="0.2521%" height="15" fill="rgb(230,65,29)" fg:x="36568" fg:w="364"/><text x="25.5764%" y="303.50"></text></g><g><title>core::mem::drop (470 samples, 0.33%)</title><rect x="25.5875%" y="213" width="0.3255%" height="15" fill="rgb(221,57,46)" fg:x="36945" fg:w="470"/><text x="25.8375%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (470 samples, 0.33%)</title><rect x="25.5875%" y="197" width="0.3255%" height="15" fill="rgb(229,161,17)" fg:x="36945" fg:w="470"/><text x="25.8375%" y="207.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (470 samples, 0.33%)</title><rect x="25.5875%" y="181" width="0.3255%" height="15" fill="rgb(222,213,11)" fg:x="36945" fg:w="470"/><text x="25.8375%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (459 samples, 0.32%)</title><rect x="25.5951%" y="165" width="0.3179%" height="15" fill="rgb(235,35,13)" fg:x="36956" fg:w="459"/><text x="25.8451%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (459 samples, 0.32%)</title><rect x="25.5951%" y="149" width="0.3179%" height="15" fill="rgb(233,158,34)" fg:x="36956" fg:w="459"/><text x="25.8451%" y="159.50"></text></g><g><title>sn_rust_dealloc (112 samples, 0.08%)</title><rect x="25.9255%" y="165" width="0.0776%" height="15" fill="rgb(215,151,48)" fg:x="37433" fg:w="112"/><text x="26.1755%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (920 samples, 0.64%)</title><rect x="25.5840%" y="229" width="0.6372%" height="15" fill="rgb(229,84,14)" fg:x="36940" fg:w="920"/><text x="25.8340%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (445 samples, 0.31%)</title><rect x="25.9130%" y="213" width="0.3082%" height="15" fill="rgb(229,68,14)" fg:x="37415" fg:w="445"/><text x="26.1630%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (445 samples, 0.31%)</title><rect x="25.9130%" y="197" width="0.3082%" height="15" fill="rgb(243,106,26)" fg:x="37415" fg:w="445"/><text x="26.1630%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (445 samples, 0.31%)</title><rect x="25.9130%" y="181" width="0.3082%" height="15" fill="rgb(206,45,38)" fg:x="37415" fg:w="445"/><text x="26.1630%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (315 samples, 0.22%)</title><rect x="26.0030%" y="165" width="0.2182%" height="15" fill="rgb(226,6,15)" fg:x="37545" fg:w="315"/><text x="26.2530%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (631 samples, 0.44%)</title><rect x="26.2212%" y="229" width="0.4370%" height="15" fill="rgb(232,22,54)" fg:x="37860" fg:w="631"/><text x="26.4712%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (631 samples, 0.44%)</title><rect x="26.2212%" y="213" width="0.4370%" height="15" fill="rgb(229,222,32)" fg:x="37860" fg:w="631"/><text x="26.4712%" y="223.50"></text></g><g><title>sn_rust_dealloc (60 samples, 0.04%)</title><rect x="26.6582%" y="229" width="0.0416%" height="15" fill="rgb(228,62,29)" fg:x="38491" fg:w="60"/><text x="26.9082%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,020 samples, 1.40%)</title><rect x="25.3056%" y="357" width="1.3990%" height="15" fill="rgb(251,103,34)" fg:x="36538" fg:w="2020"/><text x="25.5556%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (2,020 samples, 1.40%)</title><rect x="25.3056%" y="341" width="1.3990%" height="15" fill="rgb(233,12,30)" fg:x="36538" fg:w="2020"/><text x="25.5556%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (2,007 samples, 1.39%)</title><rect x="25.3146%" y="325" width="1.3900%" height="15" fill="rgb(238,52,0)" fg:x="36551" fg:w="2007"/><text x="25.5646%" y="335.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (2,007 samples, 1.39%)</title><rect x="25.3146%" y="309" width="1.3900%" height="15" fill="rgb(223,98,5)" fg:x="36551" fg:w="2007"/><text x="25.5646%" y="319.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,626 samples, 1.13%)</title><rect x="25.5785%" y="293" width="1.1261%" height="15" fill="rgb(228,75,37)" fg:x="36932" fg:w="1626"/><text x="25.8285%" y="303.50"></text></g><g><title>core::mem::drop (1,618 samples, 1.12%)</title><rect x="25.5840%" y="277" width="1.1206%" height="15" fill="rgb(205,115,49)" fg:x="36940" fg:w="1618"/><text x="25.8340%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,618 samples, 1.12%)</title><rect x="25.5840%" y="261" width="1.1206%" height="15" fill="rgb(250,154,43)" fg:x="36940" fg:w="1618"/><text x="25.8340%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,618 samples, 1.12%)</title><rect x="25.5840%" y="245" width="1.1206%" height="15" fill="rgb(226,43,29)" fg:x="36940" fg:w="1618"/><text x="25.8340%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (2,046 samples, 1.42%)</title><rect x="25.2980%" y="421" width="1.4170%" height="15" fill="rgb(249,228,39)" fg:x="36527" fg:w="2046"/><text x="25.5480%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (2,043 samples, 1.41%)</title><rect x="25.3001%" y="405" width="1.4149%" height="15" fill="rgb(216,79,43)" fg:x="36530" fg:w="2043"/><text x="25.5501%" y="415.50"></text></g><g><title>core::mem::drop (2,035 samples, 1.41%)</title><rect x="25.3056%" y="389" width="1.4094%" height="15" fill="rgb(228,95,12)" fg:x="36538" fg:w="2035"/><text x="25.5556%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,035 samples, 1.41%)</title><rect x="25.3056%" y="373" width="1.4094%" height="15" fill="rgb(249,221,15)" fg:x="36538" fg:w="2035"/><text x="25.5556%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="26.7046%" y="357" width="0.0104%" height="15" fill="rgb(233,34,13)" fg:x="38558" fg:w="15"/><text x="26.9546%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="26.7046%" y="341" width="0.0104%" height="15" fill="rgb(214,103,39)" fg:x="38558" fg:w="15"/><text x="26.9546%" y="351.50"></text></g><g><title>sn_rust_dealloc (57 samples, 0.04%)</title><rect x="26.7150%" y="421" width="0.0395%" height="15" fill="rgb(251,126,39)" fg:x="38573" fg:w="57"/><text x="26.9650%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,104 samples, 1.46%)</title><rect x="25.2980%" y="453" width="1.4572%" height="15" fill="rgb(214,216,36)" fg:x="36527" fg:w="2104"/><text x="25.5480%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (2,104 samples, 1.46%)</title><rect x="25.2980%" y="437" width="1.4572%" height="15" fill="rgb(220,221,8)" fg:x="36527" fg:w="2104"/><text x="25.5480%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (78 samples, 0.05%)</title><rect x="26.8099%" y="213" width="0.0540%" height="15" fill="rgb(240,216,3)" fg:x="38710" fg:w="78"/><text x="27.0599%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (76 samples, 0.05%)</title><rect x="26.8113%" y="197" width="0.0526%" height="15" fill="rgb(232,218,17)" fg:x="38712" fg:w="76"/><text x="27.0613%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (195 samples, 0.14%)</title><rect x="26.8016%" y="245" width="0.1351%" height="15" fill="rgb(229,163,45)" fg:x="38698" fg:w="195"/><text x="27.0516%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (195 samples, 0.14%)</title><rect x="26.8016%" y="229" width="0.1351%" height="15" fill="rgb(231,110,42)" fg:x="38698" fg:w="195"/><text x="27.0516%" y="239.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (92 samples, 0.06%)</title><rect x="26.8729%" y="213" width="0.0637%" height="15" fill="rgb(208,170,48)" fg:x="38801" fg:w="92"/><text x="27.1229%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (15 samples, 0.01%)</title><rect x="26.9934%" y="181" width="0.0104%" height="15" fill="rgb(239,116,25)" fg:x="38975" fg:w="15"/><text x="27.2434%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (15 samples, 0.01%)</title><rect x="26.9934%" y="165" width="0.0104%" height="15" fill="rgb(219,200,50)" fg:x="38975" fg:w="15"/><text x="27.2434%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (691 samples, 0.48%)</title><rect x="27.0038%" y="149" width="0.4786%" height="15" fill="rgb(245,200,0)" fg:x="38990" fg:w="691"/><text x="27.2538%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (682 samples, 0.47%)</title><rect x="27.0100%" y="133" width="0.4723%" height="15" fill="rgb(245,119,33)" fg:x="38999" fg:w="682"/><text x="27.2600%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (636 samples, 0.44%)</title><rect x="27.0419%" y="117" width="0.4405%" height="15" fill="rgb(231,125,12)" fg:x="39045" fg:w="636"/><text x="27.2919%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (27 samples, 0.02%)</title><rect x="27.4637%" y="101" width="0.0187%" height="15" fill="rgb(216,96,41)" fg:x="39654" fg:w="27"/><text x="27.7137%" y="111.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (760 samples, 0.53%)</title><rect x="26.9810%" y="213" width="0.5264%" height="15" fill="rgb(248,43,45)" fg:x="38957" fg:w="760"/><text x="27.2310%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (750 samples, 0.52%)</title><rect x="26.9879%" y="197" width="0.5194%" height="15" fill="rgb(217,222,7)" fg:x="38967" fg:w="750"/><text x="27.2379%" y="207.50"></text></g><g><title>core::mem::drop (727 samples, 0.50%)</title><rect x="27.0038%" y="181" width="0.5035%" height="15" fill="rgb(233,28,6)" fg:x="38990" fg:w="727"/><text x="27.2538%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (727 samples, 0.50%)</title><rect x="27.0038%" y="165" width="0.5035%" height="15" fill="rgb(231,218,15)" fg:x="38990" fg:w="727"/><text x="27.2538%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (36 samples, 0.02%)</title><rect x="27.4824%" y="149" width="0.0249%" height="15" fill="rgb(226,171,48)" fg:x="39681" fg:w="36"/><text x="27.7324%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.02%)</title><rect x="27.4824%" y="133" width="0.0249%" height="15" fill="rgb(235,201,9)" fg:x="39681" fg:w="36"/><text x="27.7324%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (28 samples, 0.02%)</title><rect x="27.4879%" y="117" width="0.0194%" height="15" fill="rgb(217,80,15)" fg:x="39689" fg:w="28"/><text x="27.7379%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (277 samples, 0.19%)</title><rect x="27.5073%" y="197" width="0.1918%" height="15" fill="rgb(219,152,8)" fg:x="39717" fg:w="277"/><text x="27.7573%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (75 samples, 0.05%)</title><rect x="27.6472%" y="181" width="0.0519%" height="15" fill="rgb(243,107,38)" fg:x="39919" fg:w="75"/><text x="27.8972%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (549 samples, 0.38%)</title><rect x="27.5073%" y="213" width="0.3802%" height="15" fill="rgb(231,17,5)" fg:x="39717" fg:w="549"/><text x="27.7573%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (272 samples, 0.19%)</title><rect x="27.6992%" y="197" width="0.1884%" height="15" fill="rgb(209,25,54)" fg:x="39994" fg:w="272"/><text x="27.9492%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="27.8765%" y="181" width="0.0111%" height="15" fill="rgb(219,0,2)" fg:x="40250" fg:w="16"/><text x="28.1265%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="27.8765%" y="165" width="0.0111%" height="15" fill="rgb(246,9,5)" fg:x="40250" fg:w="16"/><text x="28.1265%" y="175.50"></text></g><g><title>sn_rust_dealloc (170 samples, 0.12%)</title><rect x="27.8876%" y="213" width="0.1177%" height="15" fill="rgb(226,159,4)" fg:x="40266" fg:w="170"/><text x="28.1376%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,953 samples, 1.35%)</title><rect x="26.9366%" y="229" width="1.3526%" height="15" fill="rgb(219,175,34)" fg:x="38893" fg:w="1953"/><text x="27.1866%" y="239.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (410 samples, 0.28%)</title><rect x="28.0053%" y="213" width="0.2840%" height="15" fill="rgb(236,10,46)" fg:x="40436" fg:w="410"/><text x="28.2553%" y="223.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,963 samples, 1.36%)</title><rect x="26.9366%" y="245" width="1.3595%" height="15" fill="rgb(240,211,16)" fg:x="38893" fg:w="1963"/><text x="27.1866%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (31 samples, 0.02%)</title><rect x="28.3045%" y="213" width="0.0215%" height="15" fill="rgb(205,3,43)" fg:x="40868" fg:w="31"/><text x="28.5545%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (31 samples, 0.02%)</title><rect x="28.3045%" y="197" width="0.0215%" height="15" fill="rgb(245,7,22)" fg:x="40868" fg:w="31"/><text x="28.5545%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (2,205 samples, 1.53%)</title><rect x="26.8009%" y="261" width="1.5271%" height="15" fill="rgb(239,132,32)" fg:x="38697" fg:w="2205"/><text x="27.0509%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (42 samples, 0.03%)</title><rect x="28.2989%" y="245" width="0.0291%" height="15" fill="rgb(228,202,34)" fg:x="40860" fg:w="42"/><text x="28.5489%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (41 samples, 0.03%)</title><rect x="28.2996%" y="229" width="0.0284%" height="15" fill="rgb(254,200,22)" fg:x="40861" fg:w="41"/><text x="28.5496%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (15 samples, 0.01%)</title><rect x="28.3280%" y="261" width="0.0104%" height="15" fill="rgb(219,10,39)" fg:x="40902" fg:w="15"/><text x="28.5780%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (15 samples, 0.01%)</title><rect x="28.3280%" y="245" width="0.0104%" height="15" fill="rgb(226,210,39)" fg:x="40902" fg:w="15"/><text x="28.5780%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,221 samples, 1.54%)</title><rect x="26.8009%" y="309" width="1.5382%" height="15" fill="rgb(208,219,16)" fg:x="38697" fg:w="2221"/><text x="27.0509%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,221 samples, 1.54%)</title><rect x="26.8009%" y="293" width="1.5382%" height="15" fill="rgb(216,158,51)" fg:x="38697" fg:w="2221"/><text x="27.0509%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,221 samples, 1.54%)</title><rect x="26.8009%" y="277" width="1.5382%" height="15" fill="rgb(233,14,44)" fg:x="38697" fg:w="2221"/><text x="27.0509%" y="287.50"></text></g><g><title>sn_rust_dealloc (92 samples, 0.06%)</title><rect x="28.3391%" y="309" width="0.0637%" height="15" fill="rgb(237,97,39)" fg:x="40918" fg:w="92"/><text x="28.5891%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,724 samples, 1.89%)</title><rect x="26.7877%" y="357" width="1.8866%" height="15" fill="rgb(218,198,43)" fg:x="38678" fg:w="2724"/><text x="27.0377%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,724 samples, 1.89%)</title><rect x="26.7877%" y="341" width="1.8866%" height="15" fill="rgb(231,104,20)" fg:x="38678" fg:w="2724"/><text x="27.0377%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,724 samples, 1.89%)</title><rect x="26.7877%" y="325" width="1.8866%" height="15" fill="rgb(254,36,13)" fg:x="38678" fg:w="2724"/><text x="27.0377%" y="335.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (392 samples, 0.27%)</title><rect x="28.4028%" y="309" width="0.2715%" height="15" fill="rgb(248,14,50)" fg:x="41010" fg:w="392"/><text x="28.6528%" y="319.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,751 samples, 1.91%)</title><rect x="26.7808%" y="373" width="1.9053%" height="15" fill="rgb(217,107,29)" fg:x="38668" fg:w="2751"/><text x="27.0308%" y="383.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="28.6743%" y="357" width="0.0118%" height="15" fill="rgb(251,169,33)" fg:x="41402" fg:w="17"/><text x="28.9243%" y="367.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="28.6743%" y="341" width="0.0118%" height="15" fill="rgb(217,108,32)" fg:x="41402" fg:w="17"/><text x="28.9243%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="28.6743%" y="325" width="0.0118%" height="15" fill="rgb(219,66,42)" fg:x="41402" fg:w="17"/><text x="28.9243%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="28.6743%" y="309" width="0.0118%" height="15" fill="rgb(206,180,7)" fg:x="41402" fg:w="17"/><text x="28.9243%" y="319.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="28.6743%" y="293" width="0.0118%" height="15" fill="rgb(208,226,31)" fg:x="41402" fg:w="17"/><text x="28.9243%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="28.6743%" y="277" width="0.0118%" height="15" fill="rgb(218,26,49)" fg:x="41402" fg:w="17"/><text x="28.9243%" y="287.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.05%)</title><rect x="28.6861%" y="373" width="0.0540%" height="15" fill="rgb(233,197,48)" fg:x="41419" fg:w="78"/><text x="28.9361%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,910 samples, 2.02%)</title><rect x="26.7552%" y="453" width="2.0154%" height="15" fill="rgb(252,181,51)" fg:x="38631" fg:w="2910"/><text x="27.0052%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,909 samples, 2.01%)</title><rect x="26.7559%" y="437" width="2.0147%" height="15" fill="rgb(253,90,19)" fg:x="38632" fg:w="2909"/><text x="27.0059%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,896 samples, 2.01%)</title><rect x="26.7649%" y="421" width="2.0057%" height="15" fill="rgb(215,171,30)" fg:x="38645" fg:w="2896"/><text x="27.0149%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,896 samples, 2.01%)</title><rect x="26.7649%" y="405" width="2.0057%" height="15" fill="rgb(214,222,9)" fg:x="38645" fg:w="2896"/><text x="27.0149%" y="415.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,896 samples, 2.01%)</title><rect x="26.7649%" y="389" width="2.0057%" height="15" fill="rgb(223,3,22)" fg:x="38645" fg:w="2896"/><text x="27.0149%" y="399.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (44 samples, 0.03%)</title><rect x="28.7401%" y="373" width="0.0305%" height="15" fill="rgb(225,196,46)" fg:x="41497" fg:w="44"/><text x="28.9901%" y="383.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.03%)</title><rect x="28.7706%" y="453" width="0.0332%" height="15" fill="rgb(209,110,37)" fg:x="41541" fg:w="48"/><text x="29.0206%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,157 samples, 4.26%)</title><rect x="24.6421%" y="485" width="4.2642%" height="15" fill="rgb(249,89,12)" fg:x="35580" fg:w="6157"/><text x="24.8921%" y="495.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,550 samples, 3.84%)</title><rect x="25.0625%" y="469" width="3.8438%" height="15" fill="rgb(226,27,33)" fg:x="36187" fg:w="5550"/><text x="25.3125%" y="479.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (148 samples, 0.10%)</title><rect x="28.8038%" y="453" width="0.1025%" height="15" fill="rgb(213,82,22)" fg:x="41589" fg:w="148"/><text x="29.0538%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (33 samples, 0.02%)</title><rect x="28.9375%" y="437" width="0.0229%" height="15" fill="rgb(248,140,0)" fg:x="41782" fg:w="33"/><text x="29.1875%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (33 samples, 0.02%)</title><rect x="28.9375%" y="421" width="0.0229%" height="15" fill="rgb(228,106,3)" fg:x="41782" fg:w="33"/><text x="29.1875%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (70 samples, 0.05%)</title><rect x="28.9167%" y="485" width="0.0485%" height="15" fill="rgb(209,23,37)" fg:x="41752" fg:w="70"/><text x="29.1667%" y="495.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (68 samples, 0.05%)</title><rect x="28.9181%" y="469" width="0.0471%" height="15" fill="rgb(241,93,50)" fg:x="41754" fg:w="68"/><text x="29.1681%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (68 samples, 0.05%)</title><rect x="28.9181%" y="453" width="0.0471%" height="15" fill="rgb(253,46,43)" fg:x="41754" fg:w="68"/><text x="29.1681%" y="463.50"></text></g><g><title>sn_rust_dealloc (58 samples, 0.04%)</title><rect x="28.9652%" y="485" width="0.0402%" height="15" fill="rgb(226,206,43)" fg:x="41822" fg:w="58"/><text x="29.2152%" y="495.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (186 samples, 0.13%)</title><rect x="29.0054%" y="485" width="0.1288%" height="15" fill="rgb(217,54,7)" fg:x="41880" fg:w="186"/><text x="29.2554%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (26 samples, 0.02%)</title><rect x="29.1474%" y="469" width="0.0180%" height="15" fill="rgb(223,5,52)" fg:x="42085" fg:w="26"/><text x="29.3974%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (28 samples, 0.02%)</title><rect x="29.1654%" y="469" width="0.0194%" height="15" fill="rgb(206,52,46)" fg:x="42111" fg:w="28"/><text x="29.4154%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (90 samples, 0.06%)</title><rect x="29.1848%" y="453" width="0.0623%" height="15" fill="rgb(253,136,11)" fg:x="42139" fg:w="90"/><text x="29.4348%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (37 samples, 0.03%)</title><rect x="29.2686%" y="421" width="0.0256%" height="15" fill="rgb(208,106,33)" fg:x="42260" fg:w="37"/><text x="29.5186%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (37 samples, 0.03%)</title><rect x="29.2686%" y="405" width="0.0256%" height="15" fill="rgb(206,54,4)" fg:x="42260" fg:w="37"/><text x="29.5186%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (37 samples, 0.03%)</title><rect x="29.2686%" y="389" width="0.0256%" height="15" fill="rgb(213,3,15)" fg:x="42260" fg:w="37"/><text x="29.5186%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (22 samples, 0.02%)</title><rect x="29.2790%" y="373" width="0.0152%" height="15" fill="rgb(252,211,39)" fg:x="42275" fg:w="22"/><text x="29.5290%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (22 samples, 0.02%)</title><rect x="29.2790%" y="357" width="0.0152%" height="15" fill="rgb(223,6,36)" fg:x="42275" fg:w="22"/><text x="29.5290%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (179 samples, 0.12%)</title><rect x="29.1848%" y="469" width="0.1240%" height="15" fill="rgb(252,169,45)" fg:x="42139" fg:w="179"/><text x="29.4348%" y="479.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (89 samples, 0.06%)</title><rect x="29.2471%" y="453" width="0.0616%" height="15" fill="rgb(212,48,26)" fg:x="42229" fg:w="89"/><text x="29.4971%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (89 samples, 0.06%)</title><rect x="29.2471%" y="437" width="0.0616%" height="15" fill="rgb(251,102,48)" fg:x="42229" fg:w="89"/><text x="29.4971%" y="447.50"></text></g><g><title>core::time::Duration::new (21 samples, 0.01%)</title><rect x="29.2942%" y="421" width="0.0145%" height="15" fill="rgb(243,208,16)" fg:x="42297" fg:w="21"/><text x="29.5442%" y="431.50"></text></g><g><title>tremor_common::time::nanotime (613 samples, 0.42%)</title><rect x="29.1342%" y="485" width="0.4246%" height="15" fill="rgb(219,96,24)" fg:x="42066" fg:w="613"/><text x="29.3842%" y="495.50"></text></g><g><title>std::time::SystemTime::now (361 samples, 0.25%)</title><rect x="29.3087%" y="469" width="0.2500%" height="15" fill="rgb(219,33,29)" fg:x="42318" fg:w="361"/><text x="29.5587%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (361 samples, 0.25%)</title><rect x="29.3087%" y="453" width="0.2500%" height="15" fill="rgb(223,176,5)" fg:x="42318" fg:w="361"/><text x="29.5587%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (361 samples, 0.25%)</title><rect x="29.3087%" y="437" width="0.2500%" height="15" fill="rgb(228,140,14)" fg:x="42318" fg:w="361"/><text x="29.5587%" y="447.50"></text></g><g><title>__clock_gettime (286 samples, 0.20%)</title><rect x="29.3607%" y="421" width="0.1981%" height="15" fill="rgb(217,179,31)" fg:x="42393" fg:w="286"/><text x="29.6107%" y="431.50"></text></g><g><title>__vdso_clock_gettime (273 samples, 0.19%)</title><rect x="29.3697%" y="405" width="0.1891%" height="15" fill="rgb(230,9,30)" fg:x="42406" fg:w="273"/><text x="29.6197%" y="415.50"></text></g><g><title>[[vdso]] (239 samples, 0.17%)</title><rect x="29.3932%" y="389" width="0.1655%" height="15" fill="rgb(230,136,20)" fg:x="42440" fg:w="239"/><text x="29.6432%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (116 samples, 0.08%)</title><rect x="29.5622%" y="469" width="0.0803%" height="15" fill="rgb(215,210,22)" fg:x="42684" fg:w="116"/><text x="29.8122%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,837 samples, 5.43%)</title><rect x="24.2196%" y="741" width="5.4278%" height="15" fill="rgb(218,43,5)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="751.50">tremor_..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,837 samples, 5.43%)</title><rect x="24.2196%" y="725" width="5.4278%" height="15" fill="rgb(216,11,5)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="735.50">&lt;async_..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,837 samples, 5.43%)</title><rect x="24.2196%" y="709" width="5.4278%" height="15" fill="rgb(209,82,29)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="719.50">&lt;async_..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,837 samples, 5.43%)</title><rect x="24.2196%" y="693" width="5.4278%" height="15" fill="rgb(244,115,12)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="703.50">&lt;core::..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,837 samples, 5.43%)</title><rect x="24.2196%" y="677" width="5.4278%" height="15" fill="rgb(222,82,18)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="687.50">&lt;async_..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,837 samples, 5.43%)</title><rect x="24.2196%" y="661" width="5.4278%" height="15" fill="rgb(249,227,8)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="671.50">async_f..</text></g><g><title>std::panic::catch_unwind (7,837 samples, 5.43%)</title><rect x="24.2196%" y="645" width="5.4278%" height="15" fill="rgb(253,141,45)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="655.50">std::pa..</text></g><g><title>std::panicking::try (7,837 samples, 5.43%)</title><rect x="24.2196%" y="629" width="5.4278%" height="15" fill="rgb(234,184,4)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="639.50">std::pa..</text></g><g><title>std::panicking::try::do_call (7,837 samples, 5.43%)</title><rect x="24.2196%" y="613" width="5.4278%" height="15" fill="rgb(218,194,23)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="623.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,837 samples, 5.43%)</title><rect x="24.2196%" y="597" width="5.4278%" height="15" fill="rgb(235,66,41)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="607.50">&lt;core::..</text></g><g><title>core::ops::function::FnOnce::call_once (7,837 samples, 5.43%)</title><rect x="24.2196%" y="581" width="5.4278%" height="15" fill="rgb(245,217,1)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="591.50">core::o..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,837 samples, 5.43%)</title><rect x="24.2196%" y="565" width="5.4278%" height="15" fill="rgb(229,91,1)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="575.50">async_f..</text></g><g><title>async_ffi::FfiContext::with_context (7,837 samples, 5.43%)</title><rect x="24.2196%" y="549" width="5.4278%" height="15" fill="rgb(207,101,30)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="559.50">async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,837 samples, 5.43%)</title><rect x="24.2196%" y="533" width="5.4278%" height="15" fill="rgb(223,82,49)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="543.50">async_f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,837 samples, 5.43%)</title><rect x="24.2196%" y="517" width="5.4278%" height="15" fill="rgb(218,167,17)" fg:x="34970" fg:w="7837"/><text x="24.4696%" y="527.50">&lt;core::..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,785 samples, 5.39%)</title><rect x="24.2556%" y="501" width="5.3918%" height="15" fill="rgb(208,103,14)" fg:x="35022" fg:w="7785"/><text x="24.5056%" y="511.50">&lt;tremor..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (128 samples, 0.09%)</title><rect x="29.5588%" y="485" width="0.0887%" height="15" fill="rgb(238,20,8)" fg:x="42679" fg:w="128"/><text x="29.8088%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (50 samples, 0.03%)</title><rect x="29.6571%" y="629" width="0.0346%" height="15" fill="rgb(218,80,54)" fg:x="42821" fg:w="50"/><text x="29.9071%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (50 samples, 0.03%)</title><rect x="29.6571%" y="613" width="0.0346%" height="15" fill="rgb(240,144,17)" fg:x="42821" fg:w="50"/><text x="29.9071%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (50 samples, 0.03%)</title><rect x="29.6571%" y="597" width="0.0346%" height="15" fill="rgb(245,27,50)" fg:x="42821" fg:w="50"/><text x="29.9071%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="29.6813%" y="581" width="0.0104%" height="15" fill="rgb(251,51,7)" fg:x="42856" fg:w="15"/><text x="29.9313%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (15 samples, 0.01%)</title><rect x="29.6813%" y="565" width="0.0104%" height="15" fill="rgb(245,217,29)" fg:x="42856" fg:w="15"/><text x="29.9313%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="29.6813%" y="549" width="0.0104%" height="15" fill="rgb(221,176,29)" fg:x="42856" fg:w="15"/><text x="29.9313%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (72 samples, 0.05%)</title><rect x="29.6474%" y="645" width="0.0499%" height="15" fill="rgb(212,180,24)" fg:x="42807" fg:w="72"/><text x="29.8974%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,912 samples, 5.48%)</title><rect x="24.2196%" y="757" width="5.4797%" height="15" fill="rgb(254,24,2)" fg:x="34970" fg:w="7912"/><text x="24.4696%" y="767.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (75 samples, 0.05%)</title><rect x="29.6474%" y="741" width="0.0519%" height="15" fill="rgb(230,100,2)" fg:x="42807" fg:w="75"/><text x="29.8974%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (75 samples, 0.05%)</title><rect x="29.6474%" y="725" width="0.0519%" height="15" fill="rgb(219,142,25)" fg:x="42807" fg:w="75"/><text x="29.8974%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (75 samples, 0.05%)</title><rect x="29.6474%" y="709" width="0.0519%" height="15" fill="rgb(240,73,43)" fg:x="42807" fg:w="75"/><text x="29.8974%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (75 samples, 0.05%)</title><rect x="29.6474%" y="693" width="0.0519%" height="15" fill="rgb(214,114,15)" fg:x="42807" fg:w="75"/><text x="29.8974%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (75 samples, 0.05%)</title><rect x="29.6474%" y="677" width="0.0519%" height="15" fill="rgb(207,130,4)" fg:x="42807" fg:w="75"/><text x="29.8974%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (75 samples, 0.05%)</title><rect x="29.6474%" y="661" width="0.0519%" height="15" fill="rgb(221,25,40)" fg:x="42807" fg:w="75"/><text x="29.8974%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,932 samples, 5.49%)</title><rect x="24.2196%" y="773" width="5.4936%" height="15" fill="rgb(241,184,7)" fg:x="34970" fg:w="7932"/><text x="24.4696%" y="783.50">tremor_..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (375 samples, 0.26%)</title><rect x="29.8427%" y="661" width="0.2597%" height="15" fill="rgb(235,159,4)" fg:x="43089" fg:w="375"/><text x="30.0927%" y="671.50"></text></g><g><title>core::ptr::read (355 samples, 0.25%)</title><rect x="29.8566%" y="645" width="0.2459%" height="15" fill="rgb(214,87,48)" fg:x="43109" fg:w="355"/><text x="30.1066%" y="655.50"></text></g><g><title>[libc-2.31.so] (348 samples, 0.24%)</title><rect x="29.8614%" y="629" width="0.2410%" height="15" fill="rgb(246,198,24)" fg:x="43116" fg:w="348"/><text x="30.1114%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (160 samples, 0.11%)</title><rect x="30.1087%" y="533" width="0.1108%" height="15" fill="rgb(209,66,40)" fg:x="43473" fg:w="160"/><text x="30.3587%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (160 samples, 0.11%)</title><rect x="30.1087%" y="517" width="0.1108%" height="15" fill="rgb(233,147,39)" fg:x="43473" fg:w="160"/><text x="30.3587%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (160 samples, 0.11%)</title><rect x="30.1087%" y="501" width="0.1108%" height="15" fill="rgb(231,145,52)" fg:x="43473" fg:w="160"/><text x="30.3587%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (157 samples, 0.11%)</title><rect x="30.1107%" y="485" width="0.1087%" height="15" fill="rgb(206,20,26)" fg:x="43476" fg:w="157"/><text x="30.3607%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (157 samples, 0.11%)</title><rect x="30.1107%" y="469" width="0.1087%" height="15" fill="rgb(238,220,4)" fg:x="43476" fg:w="157"/><text x="30.3607%" y="479.50"></text></g><g><title>alloc::alloc::alloc (157 samples, 0.11%)</title><rect x="30.1107%" y="453" width="0.1087%" height="15" fill="rgb(252,195,42)" fg:x="43476" fg:w="157"/><text x="30.3607%" y="463.50"></text></g><g><title>__rg_alloc (157 samples, 0.11%)</title><rect x="30.1107%" y="437" width="0.1087%" height="15" fill="rgb(209,10,6)" fg:x="43476" fg:w="157"/><text x="30.3607%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (157 samples, 0.11%)</title><rect x="30.1107%" y="421" width="0.1087%" height="15" fill="rgb(229,3,52)" fg:x="43476" fg:w="157"/><text x="30.3607%" y="431.50"></text></g><g><title>sn_rust_alloc (150 samples, 0.10%)</title><rect x="30.1156%" y="405" width="0.1039%" height="15" fill="rgb(253,49,37)" fg:x="43483" fg:w="150"/><text x="30.3656%" y="415.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (186 samples, 0.13%)</title><rect x="30.1087%" y="661" width="0.1288%" height="15" fill="rgb(240,103,49)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (186 samples, 0.13%)</title><rect x="30.1087%" y="645" width="0.1288%" height="15" fill="rgb(250,182,30)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (186 samples, 0.13%)</title><rect x="30.1087%" y="629" width="0.1288%" height="15" fill="rgb(248,8,30)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (186 samples, 0.13%)</title><rect x="30.1087%" y="613" width="0.1288%" height="15" fill="rgb(237,120,30)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (186 samples, 0.13%)</title><rect x="30.1087%" y="597" width="0.1288%" height="15" fill="rgb(221,146,34)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (186 samples, 0.13%)</title><rect x="30.1087%" y="581" width="0.1288%" height="15" fill="rgb(242,55,13)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (186 samples, 0.13%)</title><rect x="30.1087%" y="565" width="0.1288%" height="15" fill="rgb(242,112,31)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (186 samples, 0.13%)</title><rect x="30.1087%" y="549" width="0.1288%" height="15" fill="rgb(249,192,27)" fg:x="43473" fg:w="186"/><text x="30.3587%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (26 samples, 0.02%)</title><rect x="30.2195%" y="533" width="0.0180%" height="15" fill="rgb(208,204,44)" fg:x="43633" fg:w="26"/><text x="30.4695%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="30.2195%" y="517" width="0.0180%" height="15" fill="rgb(208,93,54)" fg:x="43633" fg:w="26"/><text x="30.4695%" y="527.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.01%)</title><rect x="30.2229%" y="501" width="0.0145%" height="15" fill="rgb(242,1,31)" fg:x="43638" fg:w="21"/><text x="30.4729%" y="511.50"></text></g><g><title>[libc-2.31.so] (547 samples, 0.38%)</title><rect x="30.2375%" y="661" width="0.3788%" height="15" fill="rgb(241,83,25)" fg:x="43659" fg:w="547"/><text x="30.4875%" y="671.50"></text></g><g><title>[libc-2.31.so] (275 samples, 0.19%)</title><rect x="30.6205%" y="645" width="0.1905%" height="15" fill="rgb(205,169,50)" fg:x="44212" fg:w="275"/><text x="30.8705%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (319 samples, 0.22%)</title><rect x="30.8511%" y="533" width="0.2209%" height="15" fill="rgb(239,186,37)" fg:x="44545" fg:w="319"/><text x="31.1011%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (673 samples, 0.47%)</title><rect x="30.6163%" y="661" width="0.4661%" height="15" fill="rgb(205,221,10)" fg:x="44206" fg:w="673"/><text x="30.8663%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (392 samples, 0.27%)</title><rect x="30.8109%" y="645" width="0.2715%" height="15" fill="rgb(218,196,15)" fg:x="44487" fg:w="392"/><text x="31.0609%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (392 samples, 0.27%)</title><rect x="30.8109%" y="629" width="0.2715%" height="15" fill="rgb(218,196,35)" fg:x="44487" fg:w="392"/><text x="31.0609%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (392 samples, 0.27%)</title><rect x="30.8109%" y="613" width="0.2715%" height="15" fill="rgb(233,63,24)" fg:x="44487" fg:w="392"/><text x="31.0609%" y="623.50"></text></g><g><title>alloc::alloc::alloc (392 samples, 0.27%)</title><rect x="30.8109%" y="597" width="0.2715%" height="15" fill="rgb(225,8,4)" fg:x="44487" fg:w="392"/><text x="31.0609%" y="607.50"></text></g><g><title>__rg_alloc (392 samples, 0.27%)</title><rect x="30.8109%" y="581" width="0.2715%" height="15" fill="rgb(234,105,35)" fg:x="44487" fg:w="392"/><text x="31.0609%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (392 samples, 0.27%)</title><rect x="30.8109%" y="565" width="0.2715%" height="15" fill="rgb(236,21,32)" fg:x="44487" fg:w="392"/><text x="31.0609%" y="575.50"></text></g><g><title>sn_rust_alloc (392 samples, 0.27%)</title><rect x="30.8109%" y="549" width="0.2715%" height="15" fill="rgb(228,109,6)" fg:x="44487" fg:w="392"/><text x="31.0609%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (17 samples, 0.01%)</title><rect x="31.0921%" y="629" width="0.0118%" height="15" fill="rgb(229,215,31)" fg:x="44893" fg:w="17"/><text x="31.3421%" y="639.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="31.0921%" y="613" width="0.0118%" height="15" fill="rgb(221,52,54)" fg:x="44893" fg:w="17"/><text x="31.3421%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="31.0824%" y="645" width="0.0263%" height="15" fill="rgb(252,129,43)" fg:x="44879" fg:w="38"/><text x="31.3324%" y="655.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.04%)</title><rect x="31.1088%" y="645" width="0.0353%" height="15" fill="rgb(248,183,27)" fg:x="44917" fg:w="51"/><text x="31.3588%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (100 samples, 0.07%)</title><rect x="31.0824%" y="661" width="0.0693%" height="15" fill="rgb(250,0,22)" fg:x="44879" fg:w="100"/><text x="31.3324%" y="671.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (36 samples, 0.02%)</title><rect x="31.1655%" y="661" width="0.0249%" height="15" fill="rgb(213,166,10)" fg:x="44999" fg:w="36"/><text x="31.4155%" y="671.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (36 samples, 0.02%)</title><rect x="31.1655%" y="645" width="0.0249%" height="15" fill="rgb(207,163,36)" fg:x="44999" fg:w="36"/><text x="31.4155%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (34 samples, 0.02%)</title><rect x="31.1669%" y="629" width="0.0235%" height="15" fill="rgb(208,122,22)" fg:x="45001" fg:w="34"/><text x="31.4169%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 0.02%)</title><rect x="31.1669%" y="613" width="0.0235%" height="15" fill="rgb(207,104,49)" fg:x="45001" fg:w="34"/><text x="31.4169%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (22 samples, 0.02%)</title><rect x="31.1752%" y="597" width="0.0152%" height="15" fill="rgb(248,211,50)" fg:x="45013" fg:w="22"/><text x="31.4252%" y="607.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (22 samples, 0.02%)</title><rect x="31.1752%" y="581" width="0.0152%" height="15" fill="rgb(217,13,45)" fg:x="45013" fg:w="22"/><text x="31.4252%" y="591.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (22 samples, 0.02%)</title><rect x="31.1752%" y="565" width="0.0152%" height="15" fill="rgb(211,216,49)" fg:x="45013" fg:w="22"/><text x="31.4252%" y="575.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (19 samples, 0.01%)</title><rect x="31.1773%" y="549" width="0.0132%" height="15" fill="rgb(221,58,53)" fg:x="45016" fg:w="19"/><text x="31.4273%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,220 samples, 1.54%)</title><rect x="29.7132%" y="773" width="1.5375%" height="15" fill="rgb(220,112,41)" fg:x="42902" fg:w="2220"/><text x="29.9632%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,220 samples, 1.54%)</title><rect x="29.7132%" y="757" width="1.5375%" height="15" fill="rgb(236,38,28)" fg:x="42902" fg:w="2220"/><text x="29.9632%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,220 samples, 1.54%)</title><rect x="29.7132%" y="741" width="1.5375%" height="15" fill="rgb(227,195,22)" fg:x="42902" fg:w="2220"/><text x="29.9632%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,220 samples, 1.54%)</title><rect x="29.7132%" y="725" width="1.5375%" height="15" fill="rgb(214,55,33)" fg:x="42902" fg:w="2220"/><text x="29.9632%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,220 samples, 1.54%)</title><rect x="29.7132%" y="709" width="1.5375%" height="15" fill="rgb(248,80,13)" fg:x="42902" fg:w="2220"/><text x="29.9632%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,220 samples, 1.54%)</title><rect x="29.7132%" y="693" width="1.5375%" height="15" fill="rgb(238,52,6)" fg:x="42902" fg:w="2220"/><text x="29.9632%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,220 samples, 1.54%)</title><rect x="29.7132%" y="677" width="1.5375%" height="15" fill="rgb(224,198,47)" fg:x="42902" fg:w="2220"/><text x="29.9632%" y="687.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (73 samples, 0.05%)</title><rect x="31.2002%" y="661" width="0.0506%" height="15" fill="rgb(233,171,20)" fg:x="45049" fg:w="73"/><text x="31.4502%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (73 samples, 0.05%)</title><rect x="31.2002%" y="645" width="0.0506%" height="15" fill="rgb(241,30,25)" fg:x="45049" fg:w="73"/><text x="31.4502%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (73 samples, 0.05%)</title><rect x="31.2002%" y="629" width="0.0506%" height="15" fill="rgb(207,171,38)" fg:x="45049" fg:w="73"/><text x="31.4502%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29 samples, 0.02%)</title><rect x="31.2307%" y="613" width="0.0201%" height="15" fill="rgb(234,70,1)" fg:x="45093" fg:w="29"/><text x="31.4807%" y="623.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="1061" width="7.0318%" height="15" fill="rgb(232,178,18)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="1071.50">&lt;futures_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="1045" width="7.0318%" height="15" fill="rgb(241,78,40)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="1055.50">&lt;core::fu..</text></g><g><title>async_executor::Executor::run::{{closure}} (10,153 samples, 7.03%)</title><rect x="24.2196%" y="1029" width="7.0318%" height="15" fill="rgb(222,35,25)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="1039.50">async_exe..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="1013" width="7.0318%" height="15" fill="rgb(207,92,16)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="1023.50">&lt;futures_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="997" width="7.0318%" height="15" fill="rgb(216,59,51)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="1007.50">&lt;core::fu..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (10,153 samples, 7.03%)</title><rect x="24.2196%" y="981" width="7.0318%" height="15" fill="rgb(213,80,28)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="991.50">async_exe..</text></g><g><title>async_task::runnable::Runnable::run (10,153 samples, 7.03%)</title><rect x="24.2196%" y="965" width="7.0318%" height="15" fill="rgb(220,93,7)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="975.50">async_tas..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,153 samples, 7.03%)</title><rect x="24.2196%" y="949" width="7.0318%" height="15" fill="rgb(225,24,44)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="959.50">async_tas..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="933" width="7.0318%" height="15" fill="rgb(243,74,40)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="943.50">&lt;core::pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="917" width="7.0318%" height="15" fill="rgb(228,39,7)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="927.50">&lt;core::fu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,153 samples, 7.03%)</title><rect x="24.2196%" y="901" width="7.0318%" height="15" fill="rgb(227,79,8)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="911.50">async_exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="885" width="7.0318%" height="15" fill="rgb(236,58,11)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="895.50">&lt;async_st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,153 samples, 7.03%)</title><rect x="24.2196%" y="869" width="7.0318%" height="15" fill="rgb(249,63,35)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="879.50">async_std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,153 samples, 7.03%)</title><rect x="24.2196%" y="853" width="7.0318%" height="15" fill="rgb(252,114,16)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="863.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,153 samples, 7.03%)</title><rect x="24.2196%" y="837" width="7.0318%" height="15" fill="rgb(254,151,24)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="847.50">std::thre..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,153 samples, 7.03%)</title><rect x="24.2196%" y="821" width="7.0318%" height="15" fill="rgb(253,54,39)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="831.50">async_std..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,153 samples, 7.03%)</title><rect x="24.2196%" y="805" width="7.0318%" height="15" fill="rgb(243,25,45)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="815.50">&lt;async_st..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,153 samples, 7.03%)</title><rect x="24.2196%" y="789" width="7.0318%" height="15" fill="rgb(234,134,9)" fg:x="34970" fg:w="10153"/><text x="24.4696%" y="799.50">&lt;core::fu..</text></g><g><title>async_io::driver::block_on (10,154 samples, 7.03%)</title><rect x="24.2196%" y="1077" width="7.0325%" height="15" fill="rgb(227,166,31)" fg:x="34970" fg:w="10154"/><text x="24.4696%" y="1087.50">async_io:..</text></g><g><title>[libc-2.31.so] (395 samples, 0.27%)</title><rect x="31.3200%" y="821" width="0.2736%" height="15" fill="rgb(245,143,41)" fg:x="45222" fg:w="395"/><text x="31.5700%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (422 samples, 0.29%)</title><rect x="31.3068%" y="837" width="0.2923%" height="15" fill="rgb(238,181,32)" fg:x="45203" fg:w="422"/><text x="31.5568%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (676 samples, 0.47%)</title><rect x="31.2784%" y="853" width="0.4682%" height="15" fill="rgb(224,113,18)" fg:x="45162" fg:w="676"/><text x="31.5284%" y="863.50"></text></g><g><title>[libc-2.31.so] (213 samples, 0.15%)</title><rect x="31.5991%" y="837" width="0.1475%" height="15" fill="rgb(240,229,28)" fg:x="45625" fg:w="213"/><text x="31.8491%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (702 samples, 0.49%)</title><rect x="31.2681%" y="901" width="0.4862%" height="15" fill="rgb(250,185,3)" fg:x="45147" fg:w="702"/><text x="31.5181%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (702 samples, 0.49%)</title><rect x="31.2681%" y="885" width="0.4862%" height="15" fill="rgb(212,59,25)" fg:x="45147" fg:w="702"/><text x="31.5181%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (702 samples, 0.49%)</title><rect x="31.2681%" y="869" width="0.4862%" height="15" fill="rgb(221,87,20)" fg:x="45147" fg:w="702"/><text x="31.5181%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (232 samples, 0.16%)</title><rect x="31.8387%" y="693" width="0.1607%" height="15" fill="rgb(213,74,28)" fg:x="45971" fg:w="232"/><text x="32.0887%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (232 samples, 0.16%)</title><rect x="31.8387%" y="677" width="0.1607%" height="15" fill="rgb(224,132,34)" fg:x="45971" fg:w="232"/><text x="32.0887%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,055 samples, 0.73%)</title><rect x="31.9994%" y="693" width="0.7307%" height="15" fill="rgb(222,101,24)" fg:x="46203" fg:w="1055"/><text x="32.2494%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1,050 samples, 0.73%)</title><rect x="32.0029%" y="677" width="0.7272%" height="15" fill="rgb(254,142,4)" fg:x="46208" fg:w="1050"/><text x="32.2529%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,369 samples, 0.95%)</title><rect x="31.7854%" y="725" width="0.9481%" height="15" fill="rgb(230,229,49)" fg:x="45894" fg:w="1369"/><text x="32.0354%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,350 samples, 0.93%)</title><rect x="31.7986%" y="709" width="0.9350%" height="15" fill="rgb(238,70,47)" fg:x="45913" fg:w="1350"/><text x="32.0486%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (79 samples, 0.05%)</title><rect x="32.7439%" y="629" width="0.0547%" height="15" fill="rgb(231,160,17)" fg:x="47278" fg:w="79"/><text x="32.9939%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (79 samples, 0.05%)</title><rect x="32.7439%" y="613" width="0.0547%" height="15" fill="rgb(218,68,53)" fg:x="47278" fg:w="79"/><text x="32.9939%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (94 samples, 0.07%)</title><rect x="32.7370%" y="709" width="0.0651%" height="15" fill="rgb(236,111,10)" fg:x="47268" fg:w="94"/><text x="32.9870%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (85 samples, 0.06%)</title><rect x="32.7433%" y="693" width="0.0589%" height="15" fill="rgb(224,34,41)" fg:x="47277" fg:w="85"/><text x="32.9933%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.06%)</title><rect x="32.7433%" y="677" width="0.0589%" height="15" fill="rgb(241,118,19)" fg:x="47277" fg:w="85"/><text x="32.9933%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (84 samples, 0.06%)</title><rect x="32.7439%" y="661" width="0.0582%" height="15" fill="rgb(238,129,25)" fg:x="47278" fg:w="84"/><text x="32.9939%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (84 samples, 0.06%)</title><rect x="32.7439%" y="645" width="0.0582%" height="15" fill="rgb(238,22,31)" fg:x="47278" fg:w="84"/><text x="32.9939%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.03%)</title><rect x="32.8021%" y="709" width="0.0332%" height="15" fill="rgb(222,174,48)" fg:x="47362" fg:w="48"/><text x="33.0521%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.03%)</title><rect x="32.8021%" y="693" width="0.0332%" height="15" fill="rgb(206,152,40)" fg:x="47362" fg:w="48"/><text x="33.0521%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (50 samples, 0.03%)</title><rect x="32.8492%" y="645" width="0.0346%" height="15" fill="rgb(218,99,54)" fg:x="47430" fg:w="50"/><text x="33.0992%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (50 samples, 0.03%)</title><rect x="32.8492%" y="629" width="0.0346%" height="15" fill="rgb(220,174,26)" fg:x="47430" fg:w="50"/><text x="33.0992%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (59 samples, 0.04%)</title><rect x="32.8901%" y="629" width="0.0409%" height="15" fill="rgb(245,116,9)" fg:x="47489" fg:w="59"/><text x="33.1401%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.04%)</title><rect x="32.8901%" y="613" width="0.0409%" height="15" fill="rgb(209,72,35)" fg:x="47489" fg:w="59"/><text x="33.1401%" y="623.50"></text></g><g><title>core::hint::spin_loop (1,410 samples, 0.98%)</title><rect x="32.9462%" y="613" width="0.9765%" height="15" fill="rgb(226,126,21)" fg:x="47570" fg:w="1410"/><text x="33.1962%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1,410 samples, 0.98%)</title><rect x="32.9462%" y="597" width="0.9765%" height="15" fill="rgb(227,192,1)" fg:x="47570" fg:w="1410"/><text x="33.1962%" y="607.50"></text></g><g><title>event_listener::Inner::lock (1,642 samples, 1.14%)</title><rect x="32.8361%" y="709" width="1.1372%" height="15" fill="rgb(237,180,29)" fg:x="47411" fg:w="1642"/><text x="33.0861%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,635 samples, 1.13%)</title><rect x="32.8409%" y="693" width="1.1324%" height="15" fill="rgb(230,197,35)" fg:x="47418" fg:w="1635"/><text x="33.0909%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,627 samples, 1.13%)</title><rect x="32.8464%" y="677" width="1.1268%" height="15" fill="rgb(246,193,31)" fg:x="47426" fg:w="1627"/><text x="33.0964%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (1,627 samples, 1.13%)</title><rect x="32.8464%" y="661" width="1.1268%" height="15" fill="rgb(241,36,4)" fg:x="47426" fg:w="1627"/><text x="33.0964%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (1,573 samples, 1.09%)</title><rect x="32.8838%" y="645" width="1.0894%" height="15" fill="rgb(241,130,17)" fg:x="47480" fg:w="1573"/><text x="33.1338%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (1,492 samples, 1.03%)</title><rect x="32.9399%" y="629" width="1.0333%" height="15" fill="rgb(206,137,32)" fg:x="47561" fg:w="1492"/><text x="33.1899%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (73 samples, 0.05%)</title><rect x="33.9227%" y="613" width="0.0506%" height="15" fill="rgb(237,228,51)" fg:x="48980" fg:w="73"/><text x="34.1727%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (73 samples, 0.05%)</title><rect x="33.9227%" y="597" width="0.0506%" height="15" fill="rgb(243,6,42)" fg:x="48980" fg:w="73"/><text x="34.1727%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (25 samples, 0.02%)</title><rect x="33.9892%" y="661" width="0.0173%" height="15" fill="rgb(251,74,28)" fg:x="49076" fg:w="25"/><text x="34.2392%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="33.9892%" y="645" width="0.0173%" height="15" fill="rgb(218,20,49)" fg:x="49076" fg:w="25"/><text x="34.2392%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="33.9892%" y="629" width="0.0173%" height="15" fill="rgb(238,28,14)" fg:x="49076" fg:w="25"/><text x="34.2392%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (57 samples, 0.04%)</title><rect x="34.0169%" y="613" width="0.0395%" height="15" fill="rgb(229,40,46)" fg:x="49116" fg:w="57"/><text x="34.2669%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.04%)</title><rect x="34.0169%" y="597" width="0.0395%" height="15" fill="rgb(244,195,20)" fg:x="49116" fg:w="57"/><text x="34.2669%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (56 samples, 0.04%)</title><rect x="34.0176%" y="581" width="0.0388%" height="15" fill="rgb(253,56,35)" fg:x="49117" fg:w="56"/><text x="34.2676%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (56 samples, 0.04%)</title><rect x="34.0176%" y="565" width="0.0388%" height="15" fill="rgb(210,149,44)" fg:x="49117" fg:w="56"/><text x="34.2676%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (56 samples, 0.04%)</title><rect x="34.0176%" y="549" width="0.0388%" height="15" fill="rgb(240,135,12)" fg:x="49117" fg:w="56"/><text x="34.2676%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (56 samples, 0.04%)</title><rect x="34.0176%" y="533" width="0.0388%" height="15" fill="rgb(251,24,50)" fg:x="49117" fg:w="56"/><text x="34.2676%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (28 samples, 0.02%)</title><rect x="34.0564%" y="613" width="0.0194%" height="15" fill="rgb(243,200,47)" fg:x="49173" fg:w="28"/><text x="34.3064%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (28 samples, 0.02%)</title><rect x="34.0564%" y="597" width="0.0194%" height="15" fill="rgb(224,166,26)" fg:x="49173" fg:w="28"/><text x="34.3064%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (32 samples, 0.02%)</title><rect x="34.1076%" y="533" width="0.0222%" height="15" fill="rgb(233,0,47)" fg:x="49247" fg:w="32"/><text x="34.3576%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (32 samples, 0.02%)</title><rect x="34.1076%" y="517" width="0.0222%" height="15" fill="rgb(253,80,5)" fg:x="49247" fg:w="32"/><text x="34.3576%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (16 samples, 0.01%)</title><rect x="34.1298%" y="533" width="0.0111%" height="15" fill="rgb(214,133,25)" fg:x="49279" fg:w="16"/><text x="34.3798%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (16 samples, 0.01%)</title><rect x="34.1298%" y="517" width="0.0111%" height="15" fill="rgb(209,27,14)" fg:x="49279" fg:w="16"/><text x="34.3798%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (16 samples, 0.01%)</title><rect x="34.1298%" y="501" width="0.0111%" height="15" fill="rgb(219,102,51)" fg:x="49279" fg:w="16"/><text x="34.3798%" y="511.50"></text></g><g><title>parking::Unparker::unpark (82 samples, 0.06%)</title><rect x="34.0903%" y="565" width="0.0568%" height="15" fill="rgb(237,18,16)" fg:x="49222" fg:w="82"/><text x="34.3403%" y="575.50"></text></g><g><title>parking::Inner::unpark (66 samples, 0.05%)</title><rect x="34.1014%" y="549" width="0.0457%" height="15" fill="rgb(241,85,17)" fg:x="49238" fg:w="66"/><text x="34.3514%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (112 samples, 0.08%)</title><rect x="34.0758%" y="581" width="0.0776%" height="15" fill="rgb(236,90,42)" fg:x="49201" fg:w="112"/><text x="34.3258%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (158 samples, 0.11%)</title><rect x="34.0758%" y="613" width="0.1094%" height="15" fill="rgb(249,57,21)" fg:x="49201" fg:w="158"/><text x="34.3258%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (158 samples, 0.11%)</title><rect x="34.0758%" y="597" width="0.1094%" height="15" fill="rgb(243,12,36)" fg:x="49201" fg:w="158"/><text x="34.3258%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (46 samples, 0.03%)</title><rect x="34.1534%" y="581" width="0.0319%" height="15" fill="rgb(253,128,47)" fg:x="49313" fg:w="46"/><text x="34.4034%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.03%)</title><rect x="34.1534%" y="565" width="0.0319%" height="15" fill="rgb(207,33,20)" fg:x="49313" fg:w="46"/><text x="34.4034%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (46 samples, 0.03%)</title><rect x="34.1534%" y="549" width="0.0319%" height="15" fill="rgb(233,215,35)" fg:x="49313" fg:w="46"/><text x="34.4034%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (46 samples, 0.03%)</title><rect x="34.1534%" y="533" width="0.0319%" height="15" fill="rgb(249,188,52)" fg:x="49313" fg:w="46"/><text x="34.4034%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (49 samples, 0.03%)</title><rect x="34.1908%" y="565" width="0.0339%" height="15" fill="rgb(225,12,32)" fg:x="49367" fg:w="49"/><text x="34.4408%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (49 samples, 0.03%)</title><rect x="34.1908%" y="549" width="0.0339%" height="15" fill="rgb(247,98,14)" fg:x="49367" fg:w="49"/><text x="34.4408%" y="559.50"></text></g><g><title>async_executor::State::notify (338 samples, 0.23%)</title><rect x="34.0072%" y="629" width="0.2341%" height="15" fill="rgb(247,219,48)" fg:x="49102" fg:w="338"/><text x="34.2572%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (81 samples, 0.06%)</title><rect x="34.1852%" y="613" width="0.0561%" height="15" fill="rgb(253,60,48)" fg:x="49359" fg:w="81"/><text x="34.4352%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (75 samples, 0.05%)</title><rect x="34.1894%" y="597" width="0.0519%" height="15" fill="rgb(245,15,52)" fg:x="49365" fg:w="75"/><text x="34.4394%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (75 samples, 0.05%)</title><rect x="34.1894%" y="581" width="0.0519%" height="15" fill="rgb(220,133,28)" fg:x="49365" fg:w="75"/><text x="34.4394%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (24 samples, 0.02%)</title><rect x="34.2247%" y="565" width="0.0166%" height="15" fill="rgb(217,180,4)" fg:x="49416" fg:w="24"/><text x="34.4747%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (19 samples, 0.01%)</title><rect x="34.2282%" y="549" width="0.0132%" height="15" fill="rgb(251,24,1)" fg:x="49421" fg:w="19"/><text x="34.4782%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (106 samples, 0.07%)</title><rect x="34.2517%" y="597" width="0.0734%" height="15" fill="rgb(212,185,49)" fg:x="49455" fg:w="106"/><text x="34.5017%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (106 samples, 0.07%)</title><rect x="34.2517%" y="581" width="0.0734%" height="15" fill="rgb(215,175,22)" fg:x="49455" fg:w="106"/><text x="34.5017%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (36 samples, 0.02%)</title><rect x="34.3265%" y="597" width="0.0249%" height="15" fill="rgb(250,205,14)" fg:x="49563" fg:w="36"/><text x="34.5765%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (36 samples, 0.02%)</title><rect x="34.3265%" y="581" width="0.0249%" height="15" fill="rgb(225,211,22)" fg:x="49563" fg:w="36"/><text x="34.5765%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (508 samples, 0.35%)</title><rect x="34.0072%" y="645" width="0.3518%" height="15" fill="rgb(251,179,42)" fg:x="49102" fg:w="508"/><text x="34.2572%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (170 samples, 0.12%)</title><rect x="34.2413%" y="629" width="0.1177%" height="15" fill="rgb(208,216,51)" fg:x="49440" fg:w="170"/><text x="34.4913%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (169 samples, 0.12%)</title><rect x="34.2420%" y="613" width="0.1170%" height="15" fill="rgb(235,36,11)" fg:x="49441" fg:w="169"/><text x="34.4920%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (80 samples, 0.06%)</title><rect x="34.3590%" y="645" width="0.0554%" height="15" fill="rgb(213,189,28)" fg:x="49610" fg:w="80"/><text x="34.6090%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (80 samples, 0.06%)</title><rect x="34.3590%" y="629" width="0.0554%" height="15" fill="rgb(227,203,42)" fg:x="49610" fg:w="80"/><text x="34.6090%" y="639.50"></text></g><g><title>event_listener::List::notify (652 samples, 0.45%)</title><rect x="33.9733%" y="709" width="0.4516%" height="15" fill="rgb(244,72,36)" fg:x="49053" fg:w="652"/><text x="34.2233%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (630 samples, 0.44%)</title><rect x="33.9885%" y="693" width="0.4363%" height="15" fill="rgb(213,53,17)" fg:x="49075" fg:w="630"/><text x="34.2385%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (629 samples, 0.44%)</title><rect x="33.9892%" y="677" width="0.4356%" height="15" fill="rgb(207,167,3)" fg:x="49076" fg:w="629"/><text x="34.2392%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (604 samples, 0.42%)</title><rect x="34.0065%" y="661" width="0.4183%" height="15" fill="rgb(216,98,30)" fg:x="49101" fg:w="604"/><text x="34.2565%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="34.4145%" y="645" width="0.0104%" height="15" fill="rgb(236,123,15)" fg:x="49690" fg:w="15"/><text x="34.6645%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="34.4145%" y="629" width="0.0104%" height="15" fill="rgb(248,81,50)" fg:x="49690" fg:w="15"/><text x="34.6645%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (4,621 samples, 3.20%)</title><rect x="31.7785%" y="741" width="3.2004%" height="15" fill="rgb(214,120,4)" fg:x="45884" fg:w="4621"/><text x="32.0285%" y="751.50">asy..</text></g><g><title>event_listener::Event::notify (3,242 samples, 2.25%)</title><rect x="32.7336%" y="725" width="2.2454%" height="15" fill="rgb(208,179,34)" fg:x="47263" fg:w="3242"/><text x="32.9836%" y="735.50">e..</text></g><g><title>event_listener::full_fence (800 samples, 0.55%)</title><rect x="34.4248%" y="709" width="0.5541%" height="15" fill="rgb(227,140,7)" fg:x="49705" fg:w="800"/><text x="34.6748%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (800 samples, 0.55%)</title><rect x="34.4248%" y="693" width="0.5541%" height="15" fill="rgb(214,22,6)" fg:x="49705" fg:w="800"/><text x="34.6748%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (800 samples, 0.55%)</title><rect x="34.4248%" y="677" width="0.5541%" height="15" fill="rgb(207,137,27)" fg:x="49705" fg:w="800"/><text x="34.6748%" y="687.50"></text></g><g><title>event_listener::Event::listen (28 samples, 0.02%)</title><rect x="34.9886%" y="741" width="0.0194%" height="15" fill="rgb(210,8,46)" fg:x="50519" fg:w="28"/><text x="35.2386%" y="751.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (4,816 samples, 3.34%)</title><rect x="31.7542%" y="757" width="3.3355%" height="15" fill="rgb(240,16,54)" fg:x="45849" fg:w="4816"/><text x="32.0042%" y="767.50">&lt;as..</text></g><g><title>event_listener::Event::notify (118 samples, 0.08%)</title><rect x="35.0080%" y="741" width="0.0817%" height="15" fill="rgb(211,209,29)" fg:x="50547" fg:w="118"/><text x="35.2580%" y="751.50"></text></g><g><title>event_listener::full_fence (102 samples, 0.07%)</title><rect x="35.0191%" y="725" width="0.0706%" height="15" fill="rgb(226,228,24)" fg:x="50563" fg:w="102"/><text x="35.2691%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (102 samples, 0.07%)</title><rect x="35.0191%" y="709" width="0.0706%" height="15" fill="rgb(222,84,9)" fg:x="50563" fg:w="102"/><text x="35.2691%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (102 samples, 0.07%)</title><rect x="35.0191%" y="693" width="0.0706%" height="15" fill="rgb(234,203,30)" fg:x="50563" fg:w="102"/><text x="35.2691%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,840 samples, 3.35%)</title><rect x="31.7542%" y="821" width="3.3521%" height="15" fill="rgb(238,109,14)" fg:x="45849" fg:w="4840"/><text x="32.0042%" y="831.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (4,840 samples, 3.35%)</title><rect x="31.7542%" y="805" width="3.3521%" height="15" fill="rgb(233,206,34)" fg:x="45849" fg:w="4840"/><text x="32.0042%" y="815.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,840 samples, 3.35%)</title><rect x="31.7542%" y="789" width="3.3521%" height="15" fill="rgb(220,167,47)" fg:x="45849" fg:w="4840"/><text x="32.0042%" y="799.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (4,840 samples, 3.35%)</title><rect x="31.7542%" y="773" width="3.3521%" height="15" fill="rgb(238,105,10)" fg:x="45849" fg:w="4840"/><text x="32.0042%" y="783.50">tre..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="35.0897%" y="757" width="0.0166%" height="15" fill="rgb(213,227,17)" fg:x="50665" fg:w="24"/><text x="35.3397%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (24 samples, 0.02%)</title><rect x="35.0897%" y="741" width="0.0166%" height="15" fill="rgb(217,132,38)" fg:x="50665" fg:w="24"/><text x="35.3397%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (24 samples, 0.02%)</title><rect x="35.0897%" y="725" width="0.0166%" height="15" fill="rgb(242,146,4)" fg:x="50665" fg:w="24"/><text x="35.3397%" y="735.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="35.0897%" y="709" width="0.0166%" height="15" fill="rgb(212,61,9)" fg:x="50665" fg:w="24"/><text x="35.3397%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.02%)</title><rect x="35.5704%" y="805" width="0.0222%" height="15" fill="rgb(247,126,22)" fg:x="51359" fg:w="32"/><text x="35.8204%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (104 samples, 0.07%)</title><rect x="35.9118%" y="677" width="0.0720%" height="15" fill="rgb(220,196,2)" fg:x="51852" fg:w="104"/><text x="36.1618%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (104 samples, 0.07%)</title><rect x="35.9118%" y="661" width="0.0720%" height="15" fill="rgb(208,46,4)" fg:x="51852" fg:w="104"/><text x="36.1618%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (104 samples, 0.07%)</title><rect x="35.9118%" y="645" width="0.0720%" height="15" fill="rgb(252,104,46)" fg:x="51852" fg:w="104"/><text x="36.1618%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 0.07%)</title><rect x="35.9118%" y="629" width="0.0720%" height="15" fill="rgb(237,152,48)" fg:x="51852" fg:w="104"/><text x="36.1618%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 0.07%)</title><rect x="35.9118%" y="613" width="0.0720%" height="15" fill="rgb(221,59,37)" fg:x="51852" fg:w="104"/><text x="36.1618%" y="623.50"></text></g><g><title>alloc::alloc::alloc (95 samples, 0.07%)</title><rect x="35.9181%" y="597" width="0.0658%" height="15" fill="rgb(209,202,51)" fg:x="51861" fg:w="95"/><text x="36.1681%" y="607.50"></text></g><g><title>__rg_alloc (95 samples, 0.07%)</title><rect x="35.9181%" y="581" width="0.0658%" height="15" fill="rgb(228,81,30)" fg:x="51861" fg:w="95"/><text x="36.1681%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (95 samples, 0.07%)</title><rect x="35.9181%" y="565" width="0.0658%" height="15" fill="rgb(227,42,39)" fg:x="51861" fg:w="95"/><text x="36.1681%" y="575.50"></text></g><g><title>sn_rust_alloc (72 samples, 0.05%)</title><rect x="35.9340%" y="549" width="0.0499%" height="15" fill="rgb(221,26,2)" fg:x="51884" fg:w="72"/><text x="36.1840%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (170 samples, 0.12%)</title><rect x="35.8945%" y="789" width="0.1177%" height="15" fill="rgb(254,61,31)" fg:x="51827" fg:w="170"/><text x="36.1445%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (161 samples, 0.11%)</title><rect x="35.9007%" y="773" width="0.1115%" height="15" fill="rgb(222,173,38)" fg:x="51836" fg:w="161"/><text x="36.1507%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (154 samples, 0.11%)</title><rect x="35.9056%" y="757" width="0.1067%" height="15" fill="rgb(218,50,12)" fg:x="51843" fg:w="154"/><text x="36.1556%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (145 samples, 0.10%)</title><rect x="35.9118%" y="741" width="0.1004%" height="15" fill="rgb(223,88,40)" fg:x="51852" fg:w="145"/><text x="36.1618%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (145 samples, 0.10%)</title><rect x="35.9118%" y="725" width="0.1004%" height="15" fill="rgb(237,54,19)" fg:x="51852" fg:w="145"/><text x="36.1618%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (145 samples, 0.10%)</title><rect x="35.9118%" y="709" width="0.1004%" height="15" fill="rgb(251,129,25)" fg:x="51852" fg:w="145"/><text x="36.1618%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (145 samples, 0.10%)</title><rect x="35.9118%" y="693" width="0.1004%" height="15" fill="rgb(238,97,19)" fg:x="51852" fg:w="145"/><text x="36.1618%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (41 samples, 0.03%)</title><rect x="35.9838%" y="677" width="0.0284%" height="15" fill="rgb(240,169,18)" fg:x="51956" fg:w="41"/><text x="36.2338%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.03%)</title><rect x="35.9838%" y="661" width="0.0284%" height="15" fill="rgb(230,187,49)" fg:x="51956" fg:w="41"/><text x="36.2338%" y="671.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.02%)</title><rect x="35.9894%" y="645" width="0.0229%" height="15" fill="rgb(209,44,26)" fg:x="51964" fg:w="33"/><text x="36.2394%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (32 samples, 0.02%)</title><rect x="36.0593%" y="437" width="0.0222%" height="15" fill="rgb(244,0,6)" fg:x="52065" fg:w="32"/><text x="36.3093%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (77 samples, 0.05%)</title><rect x="36.0296%" y="581" width="0.0533%" height="15" fill="rgb(248,18,21)" fg:x="52022" fg:w="77"/><text x="36.2796%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77 samples, 0.05%)</title><rect x="36.0296%" y="565" width="0.0533%" height="15" fill="rgb(245,180,19)" fg:x="52022" fg:w="77"/><text x="36.2796%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (77 samples, 0.05%)</title><rect x="36.0296%" y="549" width="0.0533%" height="15" fill="rgb(252,118,36)" fg:x="52022" fg:w="77"/><text x="36.2796%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73 samples, 0.05%)</title><rect x="36.0323%" y="533" width="0.0506%" height="15" fill="rgb(210,224,19)" fg:x="52026" fg:w="73"/><text x="36.2823%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.05%)</title><rect x="36.0323%" y="517" width="0.0506%" height="15" fill="rgb(218,30,24)" fg:x="52026" fg:w="73"/><text x="36.2823%" y="527.50"></text></g><g><title>alloc::alloc::alloc (73 samples, 0.05%)</title><rect x="36.0323%" y="501" width="0.0506%" height="15" fill="rgb(219,75,50)" fg:x="52026" fg:w="73"/><text x="36.2823%" y="511.50"></text></g><g><title>__rg_alloc (73 samples, 0.05%)</title><rect x="36.0323%" y="485" width="0.0506%" height="15" fill="rgb(234,72,50)" fg:x="52026" fg:w="73"/><text x="36.2823%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (73 samples, 0.05%)</title><rect x="36.0323%" y="469" width="0.0506%" height="15" fill="rgb(219,100,48)" fg:x="52026" fg:w="73"/><text x="36.2823%" y="479.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.05%)</title><rect x="36.0372%" y="453" width="0.0457%" height="15" fill="rgb(253,5,41)" fg:x="52033" fg:w="66"/><text x="36.2872%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (97 samples, 0.07%)</title><rect x="36.0289%" y="693" width="0.0672%" height="15" fill="rgb(247,181,11)" fg:x="52021" fg:w="97"/><text x="36.2789%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (97 samples, 0.07%)</title><rect x="36.0289%" y="677" width="0.0672%" height="15" fill="rgb(222,223,25)" fg:x="52021" fg:w="97"/><text x="36.2789%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (97 samples, 0.07%)</title><rect x="36.0289%" y="661" width="0.0672%" height="15" fill="rgb(214,198,28)" fg:x="52021" fg:w="97"/><text x="36.2789%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (96 samples, 0.07%)</title><rect x="36.0296%" y="645" width="0.0665%" height="15" fill="rgb(230,46,43)" fg:x="52022" fg:w="96"/><text x="36.2796%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (96 samples, 0.07%)</title><rect x="36.0296%" y="629" width="0.0665%" height="15" fill="rgb(233,65,53)" fg:x="52022" fg:w="96"/><text x="36.2796%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (96 samples, 0.07%)</title><rect x="36.0296%" y="613" width="0.0665%" height="15" fill="rgb(221,121,27)" fg:x="52022" fg:w="96"/><text x="36.2796%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (96 samples, 0.07%)</title><rect x="36.0296%" y="597" width="0.0665%" height="15" fill="rgb(247,70,47)" fg:x="52022" fg:w="96"/><text x="36.2796%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.01%)</title><rect x="36.0829%" y="581" width="0.0132%" height="15" fill="rgb(228,85,35)" fg:x="52099" fg:w="19"/><text x="36.3329%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.01%)</title><rect x="36.0829%" y="565" width="0.0132%" height="15" fill="rgb(209,50,18)" fg:x="52099" fg:w="19"/><text x="36.3329%" y="575.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="36.0850%" y="549" width="0.0111%" height="15" fill="rgb(250,19,35)" fg:x="52102" fg:w="16"/><text x="36.3350%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.03%)</title><rect x="36.1127%" y="645" width="0.0305%" height="15" fill="rgb(253,107,29)" fg:x="52142" fg:w="44"/><text x="36.3627%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.03%)</title><rect x="36.1127%" y="629" width="0.0305%" height="15" fill="rgb(252,179,29)" fg:x="52142" fg:w="44"/><text x="36.3627%" y="639.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.03%)</title><rect x="36.1127%" y="613" width="0.0305%" height="15" fill="rgb(238,194,6)" fg:x="52142" fg:w="44"/><text x="36.3627%" y="623.50"></text></g><g><title>__rg_alloc (44 samples, 0.03%)</title><rect x="36.1127%" y="597" width="0.0305%" height="15" fill="rgb(238,164,29)" fg:x="52142" fg:w="44"/><text x="36.3627%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.03%)</title><rect x="36.1127%" y="581" width="0.0305%" height="15" fill="rgb(224,25,9)" fg:x="52142" fg:w="44"/><text x="36.3627%" y="591.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.03%)</title><rect x="36.1127%" y="565" width="0.0305%" height="15" fill="rgb(244,153,23)" fg:x="52142" fg:w="44"/><text x="36.3627%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51 samples, 0.04%)</title><rect x="36.1106%" y="693" width="0.0353%" height="15" fill="rgb(212,203,14)" fg:x="52139" fg:w="51"/><text x="36.3606%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (48 samples, 0.03%)</title><rect x="36.1127%" y="677" width="0.0332%" height="15" fill="rgb(220,164,20)" fg:x="52142" fg:w="48"/><text x="36.3627%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (48 samples, 0.03%)</title><rect x="36.1127%" y="661" width="0.0332%" height="15" fill="rgb(222,203,48)" fg:x="52142" fg:w="48"/><text x="36.3627%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (795 samples, 0.55%)</title><rect x="35.6002%" y="805" width="0.5506%" height="15" fill="rgb(215,159,22)" fg:x="51402" fg:w="795"/><text x="35.8502%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (200 samples, 0.14%)</title><rect x="36.0122%" y="789" width="0.1385%" height="15" fill="rgb(216,183,47)" fg:x="51997" fg:w="200"/><text x="36.2622%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (183 samples, 0.13%)</title><rect x="36.0240%" y="773" width="0.1267%" height="15" fill="rgb(229,195,25)" fg:x="52014" fg:w="183"/><text x="36.2740%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (183 samples, 0.13%)</title><rect x="36.0240%" y="757" width="0.1267%" height="15" fill="rgb(224,132,51)" fg:x="52014" fg:w="183"/><text x="36.2740%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (183 samples, 0.13%)</title><rect x="36.0240%" y="741" width="0.1267%" height="15" fill="rgb(240,63,7)" fg:x="52014" fg:w="183"/><text x="36.2740%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (183 samples, 0.13%)</title><rect x="36.0240%" y="725" width="0.1267%" height="15" fill="rgb(249,182,41)" fg:x="52014" fg:w="183"/><text x="36.2740%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (183 samples, 0.13%)</title><rect x="36.0240%" y="709" width="0.1267%" height="15" fill="rgb(243,47,26)" fg:x="52014" fg:w="183"/><text x="36.2740%" y="719.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.06%)</title><rect x="36.1508%" y="805" width="0.0582%" height="15" fill="rgb(233,48,2)" fg:x="52197" fg:w="84"/><text x="36.4008%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (390 samples, 0.27%)</title><rect x="36.2138%" y="805" width="0.2701%" height="15" fill="rgb(244,165,34)" fg:x="52288" fg:w="390"/><text x="36.4638%" y="815.50"></text></g><g><title>core::ptr::write (367 samples, 0.25%)</title><rect x="36.2297%" y="789" width="0.2542%" height="15" fill="rgb(207,89,7)" fg:x="52311" fg:w="367"/><text x="36.4797%" y="799.50"></text></g><g><title>[libc-2.31.so] (366 samples, 0.25%)</title><rect x="36.2304%" y="773" width="0.2535%" height="15" fill="rgb(244,117,36)" fg:x="52312" fg:w="366"/><text x="36.4804%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (367 samples, 0.25%)</title><rect x="36.5206%" y="645" width="0.2542%" height="15" fill="rgb(226,144,34)" fg:x="52731" fg:w="367"/><text x="36.7706%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (426 samples, 0.30%)</title><rect x="36.4887%" y="741" width="0.2950%" height="15" fill="rgb(213,23,19)" fg:x="52685" fg:w="426"/><text x="36.7387%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (426 samples, 0.30%)</title><rect x="36.4887%" y="725" width="0.2950%" height="15" fill="rgb(217,75,12)" fg:x="52685" fg:w="426"/><text x="36.7387%" y="735.50"></text></g><g><title>alloc::alloc::alloc (421 samples, 0.29%)</title><rect x="36.4922%" y="709" width="0.2916%" height="15" fill="rgb(224,159,17)" fg:x="52690" fg:w="421"/><text x="36.7422%" y="719.50"></text></g><g><title>__rg_alloc (421 samples, 0.29%)</title><rect x="36.4922%" y="693" width="0.2916%" height="15" fill="rgb(217,118,1)" fg:x="52690" fg:w="421"/><text x="36.7422%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (421 samples, 0.29%)</title><rect x="36.4922%" y="677" width="0.2916%" height="15" fill="rgb(232,180,48)" fg:x="52690" fg:w="421"/><text x="36.7422%" y="687.50"></text></g><g><title>sn_rust_alloc (421 samples, 0.29%)</title><rect x="36.4922%" y="661" width="0.2916%" height="15" fill="rgb(230,27,33)" fg:x="52690" fg:w="421"/><text x="36.7422%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (436 samples, 0.30%)</title><rect x="36.4839%" y="805" width="0.3020%" height="15" fill="rgb(205,31,21)" fg:x="52678" fg:w="436"/><text x="36.7339%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (436 samples, 0.30%)</title><rect x="36.4839%" y="789" width="0.3020%" height="15" fill="rgb(253,59,4)" fg:x="52678" fg:w="436"/><text x="36.7339%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (433 samples, 0.30%)</title><rect x="36.4860%" y="773" width="0.2999%" height="15" fill="rgb(224,201,9)" fg:x="52681" fg:w="433"/><text x="36.7360%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (433 samples, 0.30%)</title><rect x="36.4860%" y="757" width="0.2999%" height="15" fill="rgb(229,206,30)" fg:x="52681" fg:w="433"/><text x="36.7360%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (61 samples, 0.04%)</title><rect x="36.7859%" y="805" width="0.0422%" height="15" fill="rgb(212,67,47)" fg:x="53114" fg:w="61"/><text x="37.0359%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.04%)</title><rect x="36.7859%" y="789" width="0.0422%" height="15" fill="rgb(211,96,50)" fg:x="53114" fg:w="61"/><text x="37.0359%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (56 samples, 0.04%)</title><rect x="36.7893%" y="773" width="0.0388%" height="15" fill="rgb(252,114,18)" fg:x="53119" fg:w="56"/><text x="37.0393%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.04%)</title><rect x="36.7893%" y="757" width="0.0388%" height="15" fill="rgb(223,58,37)" fg:x="53119" fg:w="56"/><text x="37.0393%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="36.7928%" y="741" width="0.0353%" height="15" fill="rgb(237,70,4)" fg:x="53124" fg:w="51"/><text x="37.0428%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="36.7928%" y="725" width="0.0353%" height="15" fill="rgb(244,85,46)" fg:x="53124" fg:w="51"/><text x="37.0428%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.04%)</title><rect x="36.7928%" y="709" width="0.0353%" height="15" fill="rgb(223,39,52)" fg:x="53124" fg:w="51"/><text x="37.0428%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.04%)</title><rect x="36.7928%" y="693" width="0.0353%" height="15" fill="rgb(218,200,14)" fg:x="53124" fg:w="51"/><text x="37.0428%" y="703.50"></text></g><g><title>__rg_dealloc (51 samples, 0.04%)</title><rect x="36.7928%" y="677" width="0.0353%" height="15" fill="rgb(208,171,16)" fg:x="53124" fg:w="51"/><text x="37.0428%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (51 samples, 0.04%)</title><rect x="36.7928%" y="661" width="0.0353%" height="15" fill="rgb(234,200,18)" fg:x="53124" fg:w="51"/><text x="37.0428%" y="671.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.03%)</title><rect x="36.7949%" y="645" width="0.0332%" height="15" fill="rgb(228,45,11)" fg:x="53127" fg:w="48"/><text x="37.0449%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (7,340 samples, 5.08%)</title><rect x="31.7542%" y="901" width="5.0836%" height="15" fill="rgb(237,182,11)" fg:x="45849" fg:w="7340"/><text x="32.0042%" y="911.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,340 samples, 5.08%)</title><rect x="31.7542%" y="885" width="5.0836%" height="15" fill="rgb(241,175,49)" fg:x="45849" fg:w="7340"/><text x="32.0042%" y="895.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (7,340 samples, 5.08%)</title><rect x="31.7542%" y="869" width="5.0836%" height="15" fill="rgb(247,38,35)" fg:x="45849" fg:w="7340"/><text x="32.0042%" y="879.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,340 samples, 5.08%)</title><rect x="31.7542%" y="853" width="5.0836%" height="15" fill="rgb(228,39,49)" fg:x="45849" fg:w="7340"/><text x="32.0042%" y="863.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (7,340 samples, 5.08%)</title><rect x="31.7542%" y="837" width="5.0836%" height="15" fill="rgb(226,101,26)" fg:x="45849" fg:w="7340"/><text x="32.0042%" y="847.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,498 samples, 1.73%)</title><rect x="35.1077%" y="821" width="1.7301%" height="15" fill="rgb(206,141,19)" fg:x="50691" fg:w="2498"/><text x="35.3577%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (48 samples, 0.03%)</title><rect x="36.9147%" y="837" width="0.0332%" height="15" fill="rgb(211,200,13)" fg:x="53300" fg:w="48"/><text x="37.1647%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (42 samples, 0.03%)</title><rect x="36.9188%" y="821" width="0.0291%" height="15" fill="rgb(241,121,6)" fg:x="53306" fg:w="42"/><text x="37.1688%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (507 samples, 0.35%)</title><rect x="36.8544%" y="853" width="0.3511%" height="15" fill="rgb(234,221,29)" fg:x="53213" fg:w="507"/><text x="37.1044%" y="863.50"></text></g><g><title>[libc-2.31.so] (372 samples, 0.26%)</title><rect x="36.9479%" y="837" width="0.2576%" height="15" fill="rgb(229,136,5)" fg:x="53348" fg:w="372"/><text x="37.1979%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (758 samples, 0.52%)</title><rect x="36.8378%" y="885" width="0.5250%" height="15" fill="rgb(238,36,11)" fg:x="53189" fg:w="758"/><text x="37.0878%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (758 samples, 0.52%)</title><rect x="36.8378%" y="869" width="0.5250%" height="15" fill="rgb(251,55,41)" fg:x="53189" fg:w="758"/><text x="37.0878%" y="879.50"></text></g><g><title>[libc-2.31.so] (227 samples, 0.16%)</title><rect x="37.2056%" y="853" width="0.1572%" height="15" fill="rgb(242,34,40)" fg:x="53720" fg:w="227"/><text x="37.4556%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (72 samples, 0.05%)</title><rect x="37.5262%" y="581" width="0.0499%" height="15" fill="rgb(215,42,17)" fg:x="54183" fg:w="72"/><text x="37.7762%" y="591.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (309 samples, 0.21%)</title><rect x="37.3628%" y="853" width="0.2140%" height="15" fill="rgb(207,44,46)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (309 samples, 0.21%)</title><rect x="37.3628%" y="837" width="0.2140%" height="15" fill="rgb(211,206,28)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (309 samples, 0.21%)</title><rect x="37.3628%" y="821" width="0.2140%" height="15" fill="rgb(237,167,16)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (309 samples, 0.21%)</title><rect x="37.3628%" y="805" width="0.2140%" height="15" fill="rgb(233,66,6)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (309 samples, 0.21%)</title><rect x="37.3628%" y="789" width="0.2140%" height="15" fill="rgb(246,123,29)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (309 samples, 0.21%)</title><rect x="37.3628%" y="773" width="0.2140%" height="15" fill="rgb(209,62,40)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (309 samples, 0.21%)</title><rect x="37.3628%" y="757" width="0.2140%" height="15" fill="rgb(218,4,25)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (309 samples, 0.21%)</title><rect x="37.3628%" y="741" width="0.2140%" height="15" fill="rgb(253,91,49)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (309 samples, 0.21%)</title><rect x="37.3628%" y="725" width="0.2140%" height="15" fill="rgb(228,155,29)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (309 samples, 0.21%)</title><rect x="37.3628%" y="709" width="0.2140%" height="15" fill="rgb(243,57,37)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (309 samples, 0.21%)</title><rect x="37.3628%" y="693" width="0.2140%" height="15" fill="rgb(244,167,17)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (309 samples, 0.21%)</title><rect x="37.3628%" y="677" width="0.2140%" height="15" fill="rgb(207,181,38)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (309 samples, 0.21%)</title><rect x="37.3628%" y="661" width="0.2140%" height="15" fill="rgb(211,8,23)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="671.50"></text></g><g><title>alloc::alloc::alloc (309 samples, 0.21%)</title><rect x="37.3628%" y="645" width="0.2140%" height="15" fill="rgb(235,11,44)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="655.50"></text></g><g><title>__rg_alloc (309 samples, 0.21%)</title><rect x="37.3628%" y="629" width="0.2140%" height="15" fill="rgb(248,18,52)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (309 samples, 0.21%)</title><rect x="37.3628%" y="613" width="0.2140%" height="15" fill="rgb(208,4,7)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="623.50"></text></g><g><title>sn_rust_alloc (309 samples, 0.21%)</title><rect x="37.3628%" y="597" width="0.2140%" height="15" fill="rgb(240,17,39)" fg:x="53947" fg:w="309"/><text x="37.6128%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (20 samples, 0.01%)</title><rect x="37.5768%" y="853" width="0.0139%" height="15" fill="rgb(207,170,3)" fg:x="54256" fg:w="20"/><text x="37.8268%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="37.5768%" y="837" width="0.0139%" height="15" fill="rgb(236,100,52)" fg:x="54256" fg:w="20"/><text x="37.8268%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (149 samples, 0.10%)</title><rect x="37.5990%" y="821" width="0.1032%" height="15" fill="rgb(246,78,51)" fg:x="54288" fg:w="149"/><text x="37.8490%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (143 samples, 0.10%)</title><rect x="37.6031%" y="805" width="0.0990%" height="15" fill="rgb(211,17,15)" fg:x="54294" fg:w="143"/><text x="37.8531%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (143 samples, 0.10%)</title><rect x="37.6031%" y="789" width="0.0990%" height="15" fill="rgb(209,59,46)" fg:x="54294" fg:w="143"/><text x="37.8531%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (143 samples, 0.10%)</title><rect x="37.6031%" y="773" width="0.0990%" height="15" fill="rgb(210,92,25)" fg:x="54294" fg:w="143"/><text x="37.8531%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (143 samples, 0.10%)</title><rect x="37.6031%" y="757" width="0.0990%" height="15" fill="rgb(238,174,52)" fg:x="54294" fg:w="143"/><text x="37.8531%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (143 samples, 0.10%)</title><rect x="37.6031%" y="741" width="0.0990%" height="15" fill="rgb(230,73,7)" fg:x="54294" fg:w="143"/><text x="37.8531%" y="751.50"></text></g><g><title>[libc-2.31.so] (110 samples, 0.08%)</title><rect x="37.6260%" y="725" width="0.0762%" height="15" fill="rgb(243,124,40)" fg:x="54327" fg:w="110"/><text x="37.8760%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,304 samples, 6.44%)</title><rect x="31.2674%" y="1077" width="6.4438%" height="15" fill="rgb(244,170,11)" fg:x="45146" fg:w="9304"/><text x="31.5174%" y="1087.50">async_ta..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,303 samples, 6.44%)</title><rect x="31.2681%" y="1061" width="6.4431%" height="15" fill="rgb(207,114,54)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="1071.50">&lt;core::p..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,303 samples, 6.44%)</title><rect x="31.2681%" y="1045" width="6.4431%" height="15" fill="rgb(205,42,20)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="1055.50">&lt;core::f..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,303 samples, 6.44%)</title><rect x="31.2681%" y="1029" width="6.4431%" height="15" fill="rgb(230,30,28)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="1039.50">async_ex..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,303 samples, 6.44%)</title><rect x="31.2681%" y="1013" width="6.4431%" height="15" fill="rgb(205,73,54)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="1023.50">&lt;async_s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,303 samples, 6.44%)</title><rect x="31.2681%" y="997" width="6.4431%" height="15" fill="rgb(254,227,23)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="1007.50">async_st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,303 samples, 6.44%)</title><rect x="31.2681%" y="981" width="6.4431%" height="15" fill="rgb(228,202,34)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="991.50">std::thr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,303 samples, 6.44%)</title><rect x="31.2681%" y="965" width="6.4431%" height="15" fill="rgb(222,225,37)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="975.50">std::thr..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,303 samples, 6.44%)</title><rect x="31.2681%" y="949" width="6.4431%" height="15" fill="rgb(221,14,54)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="959.50">async_st..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,303 samples, 6.44%)</title><rect x="31.2681%" y="933" width="6.4431%" height="15" fill="rgb(254,102,2)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="943.50">&lt;async_s..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,303 samples, 6.44%)</title><rect x="31.2681%" y="917" width="6.4431%" height="15" fill="rgb(232,104,17)" fg:x="45147" fg:w="9303"/><text x="31.5181%" y="927.50">&lt;core::f..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,261 samples, 0.87%)</title><rect x="36.8378%" y="901" width="0.8733%" height="15" fill="rgb(250,220,14)" fg:x="53189" fg:w="1261"/><text x="37.0878%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (503 samples, 0.35%)</title><rect x="37.3628%" y="885" width="0.3484%" height="15" fill="rgb(241,158,9)" fg:x="53947" fg:w="503"/><text x="37.6128%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (503 samples, 0.35%)</title><rect x="37.3628%" y="869" width="0.3484%" height="15" fill="rgb(246,9,43)" fg:x="53947" fg:w="503"/><text x="37.6128%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (170 samples, 0.12%)</title><rect x="37.5934%" y="853" width="0.1177%" height="15" fill="rgb(206,73,33)" fg:x="54280" fg:w="170"/><text x="37.8434%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (163 samples, 0.11%)</title><rect x="37.5983%" y="837" width="0.1129%" height="15" fill="rgb(222,79,8)" fg:x="54287" fg:w="163"/><text x="37.8483%" y="847.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (149 samples, 0.10%)</title><rect x="37.7679%" y="373" width="0.1032%" height="15" fill="rgb(234,8,54)" fg:x="54532" fg:w="149"/><text x="38.0179%" y="383.50"></text></g><g><title>[libc-2.31.so] (169 samples, 0.12%)</title><rect x="37.8725%" y="357" width="0.1170%" height="15" fill="rgb(209,134,38)" fg:x="54683" fg:w="169"/><text x="38.1225%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (324 samples, 0.22%)</title><rect x="37.8711%" y="373" width="0.2244%" height="15" fill="rgb(230,127,29)" fg:x="54681" fg:w="324"/><text x="38.1211%" y="383.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (153 samples, 0.11%)</title><rect x="37.9896%" y="357" width="0.1060%" height="15" fill="rgb(242,44,41)" fg:x="54852" fg:w="153"/><text x="38.2396%" y="367.50"></text></g><g><title>[libc-2.31.so] (151 samples, 0.10%)</title><rect x="37.9910%" y="341" width="0.1046%" height="15" fill="rgb(222,56,43)" fg:x="54854" fg:w="151"/><text x="38.2410%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (143 samples, 0.10%)</title><rect x="38.0983%" y="341" width="0.0990%" height="15" fill="rgb(238,39,47)" fg:x="55009" fg:w="143"/><text x="38.3483%" y="351.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (142 samples, 0.10%)</title><rect x="38.0990%" y="325" width="0.0983%" height="15" fill="rgb(226,79,43)" fg:x="55010" fg:w="142"/><text x="38.3490%" y="335.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (142 samples, 0.10%)</title><rect x="38.0990%" y="309" width="0.0983%" height="15" fill="rgb(242,105,53)" fg:x="55010" fg:w="142"/><text x="38.3490%" y="319.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.09%)</title><rect x="38.1038%" y="293" width="0.0935%" height="15" fill="rgb(251,132,46)" fg:x="55017" fg:w="135"/><text x="38.3538%" y="303.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (282 samples, 0.20%)</title><rect x="38.0955%" y="373" width="0.1953%" height="15" fill="rgb(231,77,14)" fg:x="55005" fg:w="282"/><text x="38.3455%" y="383.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (282 samples, 0.20%)</title><rect x="38.0955%" y="357" width="0.1953%" height="15" fill="rgb(240,135,9)" fg:x="55005" fg:w="282"/><text x="38.3455%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (121 samples, 0.08%)</title><rect x="38.2070%" y="341" width="0.0838%" height="15" fill="rgb(248,109,14)" fg:x="55166" fg:w="121"/><text x="38.4570%" y="351.50"></text></g><g><title>[libc-2.31.so] (120 samples, 0.08%)</title><rect x="38.2077%" y="325" width="0.0831%" height="15" fill="rgb(227,146,52)" fg:x="55167" fg:w="120"/><text x="38.4577%" y="335.50"></text></g><g><title>[libc-2.31.so] (289 samples, 0.20%)</title><rect x="38.2908%" y="373" width="0.2002%" height="15" fill="rgb(232,54,3)" fg:x="55287" fg:w="289"/><text x="38.5408%" y="383.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (78 samples, 0.05%)</title><rect x="38.4910%" y="373" width="0.0540%" height="15" fill="rgb(229,201,43)" fg:x="55576" fg:w="78"/><text x="38.7410%" y="383.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.05%)</title><rect x="38.5000%" y="357" width="0.0450%" height="15" fill="rgb(252,161,33)" fg:x="55589" fg:w="65"/><text x="38.7500%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (178 samples, 0.12%)</title><rect x="38.5450%" y="373" width="0.1233%" height="15" fill="rgb(226,146,40)" fg:x="55654" fg:w="178"/><text x="38.7950%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (178 samples, 0.12%)</title><rect x="38.5450%" y="357" width="0.1233%" height="15" fill="rgb(219,47,25)" fg:x="55654" fg:w="178"/><text x="38.7950%" y="367.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (178 samples, 0.12%)</title><rect x="38.5450%" y="341" width="0.1233%" height="15" fill="rgb(250,135,13)" fg:x="55654" fg:w="178"/><text x="38.7950%" y="351.50"></text></g><g><title>sn_rust_dealloc (173 samples, 0.12%)</title><rect x="38.5485%" y="325" width="0.1198%" height="15" fill="rgb(219,229,18)" fg:x="55659" fg:w="173"/><text x="38.7985%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="1077" width="0.9253%" height="15" fill="rgb(217,152,27)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="1087.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="1061" width="0.9253%" height="15" fill="rgb(225,71,47)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (1,336 samples, 0.93%)</title><rect x="37.7506%" y="1045" width="0.9253%" height="15" fill="rgb(220,139,14)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="1055.50"></text></g><g><title>std::panicking::try (1,336 samples, 0.93%)</title><rect x="37.7506%" y="1029" width="0.9253%" height="15" fill="rgb(247,54,32)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (1,336 samples, 0.93%)</title><rect x="37.7506%" y="1013" width="0.9253%" height="15" fill="rgb(252,131,39)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="1023.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,336 samples, 0.93%)</title><rect x="37.7506%" y="997" width="0.9253%" height="15" fill="rgb(210,108,39)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="981" width="0.9253%" height="15" fill="rgb(205,23,29)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="991.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,336 samples, 0.93%)</title><rect x="37.7506%" y="965" width="0.9253%" height="15" fill="rgb(246,139,46)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,336 samples, 0.93%)</title><rect x="37.7506%" y="949" width="0.9253%" height="15" fill="rgb(250,81,26)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,336 samples, 0.93%)</title><rect x="37.7506%" y="933" width="0.9253%" height="15" fill="rgb(214,104,7)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="943.50"></text></g><g><title>std::panic::catch_unwind (1,336 samples, 0.93%)</title><rect x="37.7506%" y="917" width="0.9253%" height="15" fill="rgb(233,189,8)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="927.50"></text></g><g><title>std::panicking::try (1,336 samples, 0.93%)</title><rect x="37.7506%" y="901" width="0.9253%" height="15" fill="rgb(228,141,17)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1,336 samples, 0.93%)</title><rect x="37.7506%" y="885" width="0.9253%" height="15" fill="rgb(247,157,1)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="895.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="869" width="0.9253%" height="15" fill="rgb(249,225,5)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,336 samples, 0.93%)</title><rect x="37.7506%" y="853" width="0.9253%" height="15" fill="rgb(242,55,13)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,336 samples, 0.93%)</title><rect x="37.7506%" y="837" width="0.9253%" height="15" fill="rgb(230,49,50)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="847.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="821" width="0.9253%" height="15" fill="rgb(241,111,38)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="831.50"></text></g><g><title>async_global_executor::reactor::block_on (1,336 samples, 0.93%)</title><rect x="37.7506%" y="805" width="0.9253%" height="15" fill="rgb(252,155,4)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="815.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="789" width="0.9253%" height="15" fill="rgb(212,69,32)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="799.50"></text></g><g><title>async_io::driver::block_on (1,336 samples, 0.93%)</title><rect x="37.7506%" y="773" width="0.9253%" height="15" fill="rgb(243,107,47)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="783.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="757" width="0.9253%" height="15" fill="rgb(247,130,12)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="741" width="0.9253%" height="15" fill="rgb(233,74,16)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="751.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="725" width="0.9253%" height="15" fill="rgb(208,58,18)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="735.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="709" width="0.9253%" height="15" fill="rgb(242,225,1)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="693" width="0.9253%" height="15" fill="rgb(249,39,40)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="677" width="0.9253%" height="15" fill="rgb(207,72,44)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="687.50"></text></g><g><title>async_task::runnable::Runnable::run (1,336 samples, 0.93%)</title><rect x="37.7506%" y="661" width="0.9253%" height="15" fill="rgb(215,193,12)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,336 samples, 0.93%)</title><rect x="37.7506%" y="645" width="0.9253%" height="15" fill="rgb(248,41,39)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="655.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="629" width="0.9253%" height="15" fill="rgb(253,85,4)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="613" width="0.9253%" height="15" fill="rgb(243,70,31)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="623.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="597" width="0.9253%" height="15" fill="rgb(253,195,26)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="607.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="581" width="0.9253%" height="15" fill="rgb(243,42,11)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="591.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,336 samples, 0.93%)</title><rect x="37.7506%" y="565" width="0.9253%" height="15" fill="rgb(239,66,17)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,336 samples, 0.93%)</title><rect x="37.7506%" y="549" width="0.9253%" height="15" fill="rgb(217,132,21)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,336 samples, 0.93%)</title><rect x="37.7506%" y="533" width="0.9253%" height="15" fill="rgb(252,202,21)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="517" width="0.9253%" height="15" fill="rgb(233,98,36)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="501" width="0.9253%" height="15" fill="rgb(216,153,54)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="485" width="0.9253%" height="15" fill="rgb(250,99,7)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,336 samples, 0.93%)</title><rect x="37.7506%" y="469" width="0.9253%" height="15" fill="rgb(207,56,50)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="479.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="453" width="0.9253%" height="15" fill="rgb(244,61,34)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="463.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,336 samples, 0.93%)</title><rect x="37.7506%" y="437" width="0.9253%" height="15" fill="rgb(241,50,38)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="421" width="0.9253%" height="15" fill="rgb(212,166,30)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,336 samples, 0.93%)</title><rect x="37.7506%" y="405" width="0.9253%" height="15" fill="rgb(249,127,32)" fg:x="54507" fg:w="1336"/><text x="38.0006%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,331 samples, 0.92%)</title><rect x="37.7541%" y="389" width="0.9218%" height="15" fill="rgb(209,103,0)" fg:x="54512" fg:w="1331"/><text x="38.0041%" y="399.50"></text></g><g><title>event_listener::Event::notify (49 samples, 0.03%)</title><rect x="38.7341%" y="1077" width="0.0339%" height="15" fill="rgb(238,209,51)" fg:x="55927" fg:w="49"/><text x="38.9841%" y="1087.50"></text></g><g><title>event_listener::full_fence (21 samples, 0.01%)</title><rect x="38.7535%" y="1061" width="0.0145%" height="15" fill="rgb(237,56,23)" fg:x="55955" fg:w="21"/><text x="39.0035%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (285 samples, 0.20%)</title><rect x="38.7812%" y="1077" width="0.1974%" height="15" fill="rgb(215,153,46)" fg:x="55995" fg:w="285"/><text x="39.0312%" y="1087.50"></text></g><g><title>hashbrown::map::make_insert_hash (67 samples, 0.05%)</title><rect x="38.9322%" y="1061" width="0.0464%" height="15" fill="rgb(224,49,31)" fg:x="56213" fg:w="67"/><text x="39.1822%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (67 samples, 0.05%)</title><rect x="38.9322%" y="1045" width="0.0464%" height="15" fill="rgb(250,18,42)" fg:x="56213" fg:w="67"/><text x="39.1822%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.02%)</title><rect x="38.9786%" y="1077" width="0.0159%" height="15" fill="rgb(215,176,39)" fg:x="56280" fg:w="23"/><text x="39.2286%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (30 samples, 0.02%)</title><rect x="38.9945%" y="1077" width="0.0208%" height="15" fill="rgb(223,77,29)" fg:x="56303" fg:w="30"/><text x="39.2445%" y="1087.50"></text></g><g><title>parking::Inner::park (28 samples, 0.02%)</title><rect x="39.0153%" y="1077" width="0.0194%" height="15" fill="rgb(234,94,52)" fg:x="56333" fg:w="28"/><text x="39.2653%" y="1087.50"></text></g><g><title>polling::epoll::Poller::wait (32 samples, 0.02%)</title><rect x="39.0361%" y="1077" width="0.0222%" height="15" fill="rgb(220,154,50)" fg:x="56363" fg:w="32"/><text x="39.2861%" y="1087.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (28 samples, 0.02%)</title><rect x="39.0589%" y="1077" width="0.0194%" height="15" fill="rgb(212,11,10)" fg:x="56396" fg:w="28"/><text x="39.3089%" y="1087.50"></text></g><g><title>sn_rust_alloc (77 samples, 0.05%)</title><rect x="39.0783%" y="1077" width="0.0533%" height="15" fill="rgb(205,166,19)" fg:x="56424" fg:w="77"/><text x="39.3283%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="39.1538%" y="1077" width="0.0111%" height="15" fill="rgb(244,198,16)" fg:x="56533" fg:w="16"/><text x="39.4038%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (37 samples, 0.03%)</title><rect x="39.1815%" y="1077" width="0.0256%" height="15" fill="rgb(219,69,12)" fg:x="56573" fg:w="37"/><text x="39.4315%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (63 samples, 0.04%)</title><rect x="39.2688%" y="645" width="0.0436%" height="15" fill="rgb(245,30,7)" fg:x="56699" fg:w="63"/><text x="39.5188%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (123 samples, 0.09%)</title><rect x="39.2293%" y="805" width="0.0852%" height="15" fill="rgb(218,221,48)" fg:x="56642" fg:w="123"/><text x="39.4793%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (123 samples, 0.09%)</title><rect x="39.2293%" y="789" width="0.0852%" height="15" fill="rgb(216,66,15)" fg:x="56642" fg:w="123"/><text x="39.4793%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (109 samples, 0.08%)</title><rect x="39.2390%" y="773" width="0.0755%" height="15" fill="rgb(226,122,50)" fg:x="56656" fg:w="109"/><text x="39.4890%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (104 samples, 0.07%)</title><rect x="39.2425%" y="757" width="0.0720%" height="15" fill="rgb(239,156,16)" fg:x="56661" fg:w="104"/><text x="39.4925%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 0.07%)</title><rect x="39.2425%" y="741" width="0.0720%" height="15" fill="rgb(224,27,38)" fg:x="56661" fg:w="104"/><text x="39.4925%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 0.07%)</title><rect x="39.2425%" y="725" width="0.0720%" height="15" fill="rgb(224,39,27)" fg:x="56661" fg:w="104"/><text x="39.4925%" y="735.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.07%)</title><rect x="39.2480%" y="709" width="0.0665%" height="15" fill="rgb(215,92,29)" fg:x="56669" fg:w="96"/><text x="39.4980%" y="719.50"></text></g><g><title>__rg_alloc (96 samples, 0.07%)</title><rect x="39.2480%" y="693" width="0.0665%" height="15" fill="rgb(207,159,16)" fg:x="56669" fg:w="96"/><text x="39.4980%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (96 samples, 0.07%)</title><rect x="39.2480%" y="677" width="0.0665%" height="15" fill="rgb(238,163,47)" fg:x="56669" fg:w="96"/><text x="39.4980%" y="687.50"></text></g><g><title>sn_rust_alloc (96 samples, 0.07%)</title><rect x="39.2480%" y="661" width="0.0665%" height="15" fill="rgb(219,91,49)" fg:x="56669" fg:w="96"/><text x="39.4980%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (142 samples, 0.10%)</title><rect x="39.2224%" y="869" width="0.0983%" height="15" fill="rgb(227,167,31)" fg:x="56632" fg:w="142"/><text x="39.4724%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (142 samples, 0.10%)</title><rect x="39.2224%" y="853" width="0.0983%" height="15" fill="rgb(234,80,54)" fg:x="56632" fg:w="142"/><text x="39.4724%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (142 samples, 0.10%)</title><rect x="39.2224%" y="837" width="0.0983%" height="15" fill="rgb(212,114,2)" fg:x="56632" fg:w="142"/><text x="39.4724%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (142 samples, 0.10%)</title><rect x="39.2224%" y="821" width="0.0983%" height="15" fill="rgb(234,50,24)" fg:x="56632" fg:w="142"/><text x="39.4724%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (248 samples, 0.17%)</title><rect x="39.7799%" y="581" width="0.1718%" height="15" fill="rgb(221,68,8)" fg:x="57437" fg:w="248"/><text x="40.0299%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (834 samples, 0.58%)</title><rect x="39.3865%" y="741" width="0.5776%" height="15" fill="rgb(254,180,31)" fg:x="56869" fg:w="834"/><text x="39.6365%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (834 samples, 0.58%)</title><rect x="39.3865%" y="725" width="0.5776%" height="15" fill="rgb(247,130,50)" fg:x="56869" fg:w="834"/><text x="39.6365%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (339 samples, 0.23%)</title><rect x="39.7293%" y="709" width="0.2348%" height="15" fill="rgb(211,109,4)" fg:x="57364" fg:w="339"/><text x="39.9793%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (324 samples, 0.22%)</title><rect x="39.7397%" y="693" width="0.2244%" height="15" fill="rgb(238,50,21)" fg:x="57379" fg:w="324"/><text x="39.9897%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (324 samples, 0.22%)</title><rect x="39.7397%" y="677" width="0.2244%" height="15" fill="rgb(225,57,45)" fg:x="57379" fg:w="324"/><text x="39.9897%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (324 samples, 0.22%)</title><rect x="39.7397%" y="661" width="0.2244%" height="15" fill="rgb(209,196,50)" fg:x="57379" fg:w="324"/><text x="39.9897%" y="671.50"></text></g><g><title>alloc::alloc::alloc (324 samples, 0.22%)</title><rect x="39.7397%" y="645" width="0.2244%" height="15" fill="rgb(242,140,13)" fg:x="57379" fg:w="324"/><text x="39.9897%" y="655.50"></text></g><g><title>__rg_alloc (324 samples, 0.22%)</title><rect x="39.7397%" y="629" width="0.2244%" height="15" fill="rgb(217,111,7)" fg:x="57379" fg:w="324"/><text x="39.9897%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (324 samples, 0.22%)</title><rect x="39.7397%" y="613" width="0.2244%" height="15" fill="rgb(253,193,51)" fg:x="57379" fg:w="324"/><text x="39.9897%" y="623.50"></text></g><g><title>sn_rust_alloc (316 samples, 0.22%)</title><rect x="39.7453%" y="597" width="0.2189%" height="15" fill="rgb(252,70,29)" fg:x="57387" fg:w="316"/><text x="39.9953%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (861 samples, 0.60%)</title><rect x="39.3747%" y="789" width="0.5963%" height="15" fill="rgb(232,127,12)" fg:x="56852" fg:w="861"/><text x="39.6247%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (861 samples, 0.60%)</title><rect x="39.3747%" y="773" width="0.5963%" height="15" fill="rgb(211,180,21)" fg:x="56852" fg:w="861"/><text x="39.6247%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (861 samples, 0.60%)</title><rect x="39.3747%" y="757" width="0.5963%" height="15" fill="rgb(229,72,13)" fg:x="56852" fg:w="861"/><text x="39.6247%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (905 samples, 0.63%)</title><rect x="39.3747%" y="805" width="0.6268%" height="15" fill="rgb(240,211,49)" fg:x="56852" fg:w="905"/><text x="39.6247%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (44 samples, 0.03%)</title><rect x="39.9711%" y="789" width="0.0305%" height="15" fill="rgb(219,149,40)" fg:x="57713" fg:w="44"/><text x="40.2211%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (33 samples, 0.02%)</title><rect x="39.9787%" y="773" width="0.0229%" height="15" fill="rgb(210,127,46)" fg:x="57724" fg:w="33"/><text x="40.2287%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (23 samples, 0.02%)</title><rect x="39.9856%" y="757" width="0.0159%" height="15" fill="rgb(220,106,7)" fg:x="57734" fg:w="23"/><text x="40.2356%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (22 samples, 0.02%)</title><rect x="39.9863%" y="741" width="0.0152%" height="15" fill="rgb(249,31,22)" fg:x="57735" fg:w="22"/><text x="40.2363%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (22 samples, 0.02%)</title><rect x="39.9863%" y="725" width="0.0152%" height="15" fill="rgb(253,1,49)" fg:x="57735" fg:w="22"/><text x="40.2363%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (22 samples, 0.02%)</title><rect x="39.9863%" y="709" width="0.0152%" height="15" fill="rgb(227,144,33)" fg:x="57735" fg:w="22"/><text x="40.2363%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,515 samples, 1.05%)</title><rect x="39.2224%" y="885" width="1.0493%" height="15" fill="rgb(249,163,44)" fg:x="56632" fg:w="1515"/><text x="39.4724%" y="895.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,373 samples, 0.95%)</title><rect x="39.3207%" y="869" width="0.9509%" height="15" fill="rgb(234,15,39)" fg:x="56774" fg:w="1373"/><text x="39.5707%" y="879.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,373 samples, 0.95%)</title><rect x="39.3207%" y="853" width="0.9509%" height="15" fill="rgb(207,66,16)" fg:x="56774" fg:w="1373"/><text x="39.5707%" y="863.50"></text></g><g><title>value_trait::Builder::object (1,295 samples, 0.90%)</title><rect x="39.3747%" y="837" width="0.8969%" height="15" fill="rgb(233,112,24)" fg:x="56852" fg:w="1295"/><text x="39.6247%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,295 samples, 0.90%)</title><rect x="39.3747%" y="821" width="0.8969%" height="15" fill="rgb(230,90,22)" fg:x="56852" fg:w="1295"/><text x="39.6247%" y="831.50"></text></g><g><title>tremor_value::value::Value::Object (390 samples, 0.27%)</title><rect x="40.0015%" y="805" width="0.2701%" height="15" fill="rgb(229,61,13)" fg:x="57757" fg:w="390"/><text x="40.2515%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (33 samples, 0.02%)</title><rect x="40.2813%" y="869" width="0.0229%" height="15" fill="rgb(225,57,24)" fg:x="58161" fg:w="33"/><text x="40.5313%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (33 samples, 0.02%)</title><rect x="40.2813%" y="853" width="0.0229%" height="15" fill="rgb(208,169,48)" fg:x="58161" fg:w="33"/><text x="40.5313%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (33 samples, 0.02%)</title><rect x="40.2813%" y="837" width="0.0229%" height="15" fill="rgb(244,218,51)" fg:x="58161" fg:w="33"/><text x="40.5313%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (33 samples, 0.02%)</title><rect x="40.2813%" y="821" width="0.0229%" height="15" fill="rgb(214,148,10)" fg:x="58161" fg:w="33"/><text x="40.5313%" y="831.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="40.2931%" y="805" width="0.0111%" height="15" fill="rgb(225,174,27)" fg:x="58178" fg:w="16"/><text x="40.5431%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="40.2931%" y="789" width="0.0111%" height="15" fill="rgb(230,96,26)" fg:x="58178" fg:w="16"/><text x="40.5431%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (15 samples, 0.01%)</title><rect x="40.3340%" y="789" width="0.0104%" height="15" fill="rgb(232,10,30)" fg:x="58237" fg:w="15"/><text x="40.5840%" y="799.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="40.3444%" y="789" width="0.0256%" height="15" fill="rgb(222,8,50)" fg:x="58252" fg:w="37"/><text x="40.5944%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (99 samples, 0.07%)</title><rect x="40.3042%" y="869" width="0.0686%" height="15" fill="rgb(213,81,27)" fg:x="58194" fg:w="99"/><text x="40.5542%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (99 samples, 0.07%)</title><rect x="40.3042%" y="853" width="0.0686%" height="15" fill="rgb(245,50,10)" fg:x="58194" fg:w="99"/><text x="40.5542%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (67 samples, 0.05%)</title><rect x="40.3263%" y="837" width="0.0464%" height="15" fill="rgb(216,100,18)" fg:x="58226" fg:w="67"/><text x="40.5763%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (67 samples, 0.05%)</title><rect x="40.3263%" y="821" width="0.0464%" height="15" fill="rgb(236,147,54)" fg:x="58226" fg:w="67"/><text x="40.5763%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (67 samples, 0.05%)</title><rect x="40.3263%" y="805" width="0.0464%" height="15" fill="rgb(205,143,26)" fg:x="58226" fg:w="67"/><text x="40.5763%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,664 samples, 1.15%)</title><rect x="39.2224%" y="901" width="1.1525%" height="15" fill="rgb(236,26,9)" fg:x="56632" fg:w="1664"/><text x="39.4724%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (149 samples, 0.10%)</title><rect x="40.2716%" y="885" width="0.1032%" height="15" fill="rgb(221,165,53)" fg:x="58147" fg:w="149"/><text x="40.5216%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (105 samples, 0.07%)</title><rect x="40.5307%" y="885" width="0.0727%" height="15" fill="rgb(214,110,17)" fg:x="58521" fg:w="105"/><text x="40.7807%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="40.6366%" y="741" width="0.0180%" height="15" fill="rgb(237,197,12)" fg:x="58674" fg:w="26"/><text x="40.8866%" y="751.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (77 samples, 0.05%)</title><rect x="40.6034%" y="885" width="0.0533%" height="15" fill="rgb(205,84,17)" fg:x="58626" fg:w="77"/><text x="40.8534%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (77 samples, 0.05%)</title><rect x="40.6034%" y="869" width="0.0533%" height="15" fill="rgb(237,18,45)" fg:x="58626" fg:w="77"/><text x="40.8534%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (62 samples, 0.04%)</title><rect x="40.6138%" y="853" width="0.0429%" height="15" fill="rgb(221,87,14)" fg:x="58641" fg:w="62"/><text x="40.8638%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.04%)</title><rect x="40.6138%" y="837" width="0.0429%" height="15" fill="rgb(238,186,15)" fg:x="58641" fg:w="62"/><text x="40.8638%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.04%)</title><rect x="40.6138%" y="821" width="0.0429%" height="15" fill="rgb(208,115,11)" fg:x="58641" fg:w="62"/><text x="40.8638%" y="831.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.04%)</title><rect x="40.6138%" y="805" width="0.0429%" height="15" fill="rgb(254,175,0)" fg:x="58641" fg:w="62"/><text x="40.8638%" y="815.50"></text></g><g><title>__rg_alloc (62 samples, 0.04%)</title><rect x="40.6138%" y="789" width="0.0429%" height="15" fill="rgb(227,24,42)" fg:x="58641" fg:w="62"/><text x="40.8638%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (62 samples, 0.04%)</title><rect x="40.6138%" y="773" width="0.0429%" height="15" fill="rgb(223,211,37)" fg:x="58641" fg:w="62"/><text x="40.8638%" y="783.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.04%)</title><rect x="40.6200%" y="757" width="0.0367%" height="15" fill="rgb(235,49,27)" fg:x="58650" fg:w="53"/><text x="40.8700%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (44 samples, 0.03%)</title><rect x="40.6567%" y="885" width="0.0305%" height="15" fill="rgb(254,97,51)" fg:x="58703" fg:w="44"/><text x="40.9067%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.03%)</title><rect x="40.6567%" y="869" width="0.0305%" height="15" fill="rgb(249,51,40)" fg:x="58703" fg:w="44"/><text x="40.9067%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.03%)</title><rect x="40.6567%" y="853" width="0.0305%" height="15" fill="rgb(210,128,45)" fg:x="58703" fg:w="44"/><text x="40.9067%" y="863.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.03%)</title><rect x="40.6581%" y="837" width="0.0291%" height="15" fill="rgb(224,137,50)" fg:x="58705" fg:w="42"/><text x="40.9081%" y="847.50"></text></g><g><title>__rg_alloc (42 samples, 0.03%)</title><rect x="40.6581%" y="821" width="0.0291%" height="15" fill="rgb(242,15,9)" fg:x="58705" fg:w="42"/><text x="40.9081%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.03%)</title><rect x="40.6581%" y="805" width="0.0291%" height="15" fill="rgb(233,187,41)" fg:x="58705" fg:w="42"/><text x="40.9081%" y="815.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="40.6678%" y="789" width="0.0194%" height="15" fill="rgb(227,2,29)" fg:x="58719" fg:w="28"/><text x="40.9178%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (24 samples, 0.02%)</title><rect x="40.8645%" y="853" width="0.0166%" height="15" fill="rgb(222,70,3)" fg:x="59003" fg:w="24"/><text x="41.1145%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (22 samples, 0.02%)</title><rect x="40.8811%" y="853" width="0.0152%" height="15" fill="rgb(213,11,42)" fg:x="59027" fg:w="22"/><text x="41.1311%" y="863.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.03%)</title><rect x="41.1858%" y="693" width="0.0339%" height="15" fill="rgb(225,150,9)" fg:x="59467" fg:w="49"/><text x="41.4358%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (101 samples, 0.07%)</title><rect x="41.1796%" y="757" width="0.0700%" height="15" fill="rgb(230,162,45)" fg:x="59458" fg:w="101"/><text x="41.4296%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (101 samples, 0.07%)</title><rect x="41.1796%" y="741" width="0.0700%" height="15" fill="rgb(222,14,52)" fg:x="59458" fg:w="101"/><text x="41.4296%" y="751.50"></text></g><g><title>__rg_dealloc (101 samples, 0.07%)</title><rect x="41.1796%" y="725" width="0.0700%" height="15" fill="rgb(254,198,14)" fg:x="59458" fg:w="101"/><text x="41.4296%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (101 samples, 0.07%)</title><rect x="41.1796%" y="709" width="0.0700%" height="15" fill="rgb(220,217,30)" fg:x="59458" fg:w="101"/><text x="41.4296%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (43 samples, 0.03%)</title><rect x="41.2198%" y="693" width="0.0298%" height="15" fill="rgb(215,146,41)" fg:x="59516" fg:w="43"/><text x="41.4698%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (115 samples, 0.08%)</title><rect x="41.1727%" y="837" width="0.0796%" height="15" fill="rgb(217,27,36)" fg:x="59448" fg:w="115"/><text x="41.4227%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (115 samples, 0.08%)</title><rect x="41.1727%" y="821" width="0.0796%" height="15" fill="rgb(219,218,39)" fg:x="59448" fg:w="115"/><text x="41.4227%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (115 samples, 0.08%)</title><rect x="41.1727%" y="805" width="0.0796%" height="15" fill="rgb(219,4,42)" fg:x="59448" fg:w="115"/><text x="41.4227%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (115 samples, 0.08%)</title><rect x="41.1727%" y="789" width="0.0796%" height="15" fill="rgb(249,119,36)" fg:x="59448" fg:w="115"/><text x="41.4227%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.08%)</title><rect x="41.1727%" y="773" width="0.0796%" height="15" fill="rgb(209,23,33)" fg:x="59448" fg:w="115"/><text x="41.4227%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (199 samples, 0.14%)</title><rect x="41.3167%" y="821" width="0.1378%" height="15" fill="rgb(211,10,0)" fg:x="59656" fg:w="199"/><text x="41.5667%" y="831.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (199 samples, 0.14%)</title><rect x="41.3167%" y="805" width="0.1378%" height="15" fill="rgb(208,99,37)" fg:x="59656" fg:w="199"/><text x="41.5667%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (199 samples, 0.14%)</title><rect x="41.3167%" y="789" width="0.1378%" height="15" fill="rgb(213,132,31)" fg:x="59656" fg:w="199"/><text x="41.5667%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (199 samples, 0.14%)</title><rect x="41.3167%" y="773" width="0.1378%" height="15" fill="rgb(243,129,40)" fg:x="59656" fg:w="199"/><text x="41.5667%" y="783.50"></text></g><g><title>[libc-2.31.so] (188 samples, 0.13%)</title><rect x="41.3244%" y="757" width="0.1302%" height="15" fill="rgb(210,66,33)" fg:x="59667" fg:w="188"/><text x="41.5744%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (46 samples, 0.03%)</title><rect x="41.8237%" y="789" width="0.0319%" height="15" fill="rgb(209,189,4)" fg:x="60388" fg:w="46"/><text x="42.0737%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (67 samples, 0.05%)</title><rect x="41.8556%" y="789" width="0.0464%" height="15" fill="rgb(214,107,37)" fg:x="60434" fg:w="67"/><text x="42.1056%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (91 samples, 0.06%)</title><rect x="41.9020%" y="789" width="0.0630%" height="15" fill="rgb(245,88,54)" fg:x="60501" fg:w="91"/><text x="42.1520%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (86 samples, 0.06%)</title><rect x="41.9650%" y="789" width="0.0596%" height="15" fill="rgb(205,146,20)" fg:x="60592" fg:w="86"/><text x="42.2150%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (426 samples, 0.30%)</title><rect x="41.7614%" y="805" width="0.2950%" height="15" fill="rgb(220,161,25)" fg:x="60298" fg:w="426"/><text x="42.0114%" y="815.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (46 samples, 0.03%)</title><rect x="42.0246%" y="789" width="0.0319%" height="15" fill="rgb(215,152,15)" fg:x="60678" fg:w="46"/><text x="42.2746%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (46 samples, 0.03%)</title><rect x="42.7795%" y="757" width="0.0319%" height="15" fill="rgb(233,192,44)" fg:x="61768" fg:w="46"/><text x="43.0295%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (54 samples, 0.04%)</title><rect x="42.8141%" y="725" width="0.0374%" height="15" fill="rgb(240,170,46)" fg:x="61818" fg:w="54"/><text x="43.0641%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (15 samples, 0.01%)</title><rect x="42.8515%" y="725" width="0.0104%" height="15" fill="rgb(207,104,33)" fg:x="61872" fg:w="15"/><text x="43.1015%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.02%)</title><rect x="42.8654%" y="725" width="0.0194%" height="15" fill="rgb(219,21,39)" fg:x="61892" fg:w="28"/><text x="43.1154%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (185 samples, 0.13%)</title><rect x="42.7663%" y="789" width="0.1281%" height="15" fill="rgb(214,133,29)" fg:x="61749" fg:w="185"/><text x="43.0163%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (185 samples, 0.13%)</title><rect x="42.7663%" y="773" width="0.1281%" height="15" fill="rgb(226,93,6)" fg:x="61749" fg:w="185"/><text x="43.0163%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (120 samples, 0.08%)</title><rect x="42.8113%" y="757" width="0.0831%" height="15" fill="rgb(252,222,34)" fg:x="61814" fg:w="120"/><text x="43.0613%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (120 samples, 0.08%)</title><rect x="42.8113%" y="741" width="0.0831%" height="15" fill="rgb(252,92,48)" fg:x="61814" fg:w="120"/><text x="43.0613%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (37 samples, 0.03%)</title><rect x="42.8944%" y="789" width="0.0256%" height="15" fill="rgb(245,223,24)" fg:x="61934" fg:w="37"/><text x="43.1444%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (23 samples, 0.02%)</title><rect x="42.9201%" y="789" width="0.0159%" height="15" fill="rgb(205,176,3)" fg:x="61971" fg:w="23"/><text x="43.1701%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (492 samples, 0.34%)</title><rect x="42.9360%" y="789" width="0.3408%" height="15" fill="rgb(235,151,15)" fg:x="61994" fg:w="492"/><text x="43.1860%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (492 samples, 0.34%)</title><rect x="42.9360%" y="773" width="0.3408%" height="15" fill="rgb(237,209,11)" fg:x="61994" fg:w="492"/><text x="43.1860%" y="783.50"></text></g><g><title>core::core_arch::simd::i32x8::new (492 samples, 0.34%)</title><rect x="42.9360%" y="757" width="0.3408%" height="15" fill="rgb(243,227,24)" fg:x="61994" fg:w="492"/><text x="43.1860%" y="767.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (43 samples, 0.03%)</title><rect x="43.2767%" y="789" width="0.0298%" height="15" fill="rgb(239,193,16)" fg:x="62486" fg:w="43"/><text x="43.5267%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (293 samples, 0.20%)</title><rect x="43.3065%" y="789" width="0.2029%" height="15" fill="rgb(231,27,9)" fg:x="62529" fg:w="293"/><text x="43.5565%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (317 samples, 0.22%)</title><rect x="43.5095%" y="789" width="0.2195%" height="15" fill="rgb(219,169,10)" fg:x="62822" fg:w="317"/><text x="43.7595%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (2,503 samples, 1.73%)</title><rect x="42.0564%" y="805" width="1.7335%" height="15" fill="rgb(244,229,43)" fg:x="60724" fg:w="2503"/><text x="42.3064%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (88 samples, 0.06%)</title><rect x="43.7290%" y="789" width="0.0609%" height="15" fill="rgb(254,38,20)" fg:x="63139" fg:w="88"/><text x="43.9790%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (31 samples, 0.02%)</title><rect x="43.8190%" y="773" width="0.0215%" height="15" fill="rgb(250,47,30)" fg:x="63269" fg:w="31"/><text x="44.0690%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (31 samples, 0.02%)</title><rect x="43.8190%" y="757" width="0.0215%" height="15" fill="rgb(224,124,36)" fg:x="63269" fg:w="31"/><text x="44.0690%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (31 samples, 0.02%)</title><rect x="43.8190%" y="741" width="0.0215%" height="15" fill="rgb(246,68,51)" fg:x="63269" fg:w="31"/><text x="44.0690%" y="751.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (69 samples, 0.05%)</title><rect x="43.8405%" y="757" width="0.0478%" height="15" fill="rgb(253,43,49)" fg:x="63300" fg:w="69"/><text x="44.0905%" y="767.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (174 samples, 0.12%)</title><rect x="43.7962%" y="789" width="0.1205%" height="15" fill="rgb(219,54,36)" fg:x="63236" fg:w="174"/><text x="44.0462%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (110 samples, 0.08%)</title><rect x="43.8405%" y="773" width="0.0762%" height="15" fill="rgb(227,133,34)" fg:x="63300" fg:w="110"/><text x="44.0905%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (41 samples, 0.03%)</title><rect x="43.8883%" y="757" width="0.0284%" height="15" fill="rgb(247,227,15)" fg:x="63369" fg:w="41"/><text x="44.1383%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (41 samples, 0.03%)</title><rect x="43.8883%" y="741" width="0.0284%" height="15" fill="rgb(229,96,14)" fg:x="63369" fg:w="41"/><text x="44.1383%" y="751.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (322 samples, 0.22%)</title><rect x="43.7962%" y="805" width="0.2230%" height="15" fill="rgb(220,79,17)" fg:x="63236" fg:w="322"/><text x="44.0462%" y="815.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (148 samples, 0.10%)</title><rect x="43.9167%" y="789" width="0.1025%" height="15" fill="rgb(205,131,53)" fg:x="63410" fg:w="148"/><text x="44.1667%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (148 samples, 0.10%)</title><rect x="43.9167%" y="773" width="0.1025%" height="15" fill="rgb(209,50,29)" fg:x="63410" fg:w="148"/><text x="44.1667%" y="783.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (148 samples, 0.10%)</title><rect x="43.9167%" y="757" width="0.1025%" height="15" fill="rgb(245,86,46)" fg:x="63410" fg:w="148"/><text x="44.1667%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (148 samples, 0.10%)</title><rect x="43.9167%" y="741" width="0.1025%" height="15" fill="rgb(235,66,46)" fg:x="63410" fg:w="148"/><text x="44.1667%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21 samples, 0.01%)</title><rect x="44.0192%" y="805" width="0.0145%" height="15" fill="rgb(232,148,31)" fg:x="63558" fg:w="21"/><text x="44.2692%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (281 samples, 0.19%)</title><rect x="44.1480%" y="645" width="0.1946%" height="15" fill="rgb(217,149,8)" fg:x="63744" fg:w="281"/><text x="44.3980%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="44.3426%" y="645" width="0.0125%" height="15" fill="rgb(209,183,11)" fg:x="64025" fg:w="18"/><text x="44.5926%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (462 samples, 0.32%)</title><rect x="44.0393%" y="741" width="0.3200%" height="15" fill="rgb(208,55,20)" fg:x="63587" fg:w="462"/><text x="44.2893%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (462 samples, 0.32%)</title><rect x="44.0393%" y="725" width="0.3200%" height="15" fill="rgb(218,39,14)" fg:x="63587" fg:w="462"/><text x="44.2893%" y="735.50"></text></g><g><title>alloc::alloc::alloc (457 samples, 0.32%)</title><rect x="44.0427%" y="709" width="0.3165%" height="15" fill="rgb(216,169,33)" fg:x="63592" fg:w="457"/><text x="44.2927%" y="719.50"></text></g><g><title>__rg_alloc (457 samples, 0.32%)</title><rect x="44.0427%" y="693" width="0.3165%" height="15" fill="rgb(233,80,24)" fg:x="63592" fg:w="457"/><text x="44.2927%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (457 samples, 0.32%)</title><rect x="44.0427%" y="677" width="0.3165%" height="15" fill="rgb(213,179,31)" fg:x="63592" fg:w="457"/><text x="44.2927%" y="687.50"></text></g><g><title>sn_rust_alloc (457 samples, 0.32%)</title><rect x="44.0427%" y="661" width="0.3165%" height="15" fill="rgb(209,19,5)" fg:x="63592" fg:w="457"/><text x="44.2927%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (471 samples, 0.33%)</title><rect x="44.0337%" y="805" width="0.3262%" height="15" fill="rgb(219,18,35)" fg:x="63579" fg:w="471"/><text x="44.2837%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (471 samples, 0.33%)</title><rect x="44.0337%" y="789" width="0.3262%" height="15" fill="rgb(209,169,16)" fg:x="63579" fg:w="471"/><text x="44.2837%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (465 samples, 0.32%)</title><rect x="44.0379%" y="773" width="0.3221%" height="15" fill="rgb(245,90,51)" fg:x="63585" fg:w="465"/><text x="44.2879%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (465 samples, 0.32%)</title><rect x="44.0379%" y="757" width="0.3221%" height="15" fill="rgb(220,99,45)" fg:x="63585" fg:w="465"/><text x="44.2879%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (87 samples, 0.06%)</title><rect x="44.3599%" y="805" width="0.0603%" height="15" fill="rgb(249,89,25)" fg:x="64050" fg:w="87"/><text x="44.6099%" y="815.50"></text></g><g><title>core::intrinsics::copy (87 samples, 0.06%)</title><rect x="44.3599%" y="789" width="0.0603%" height="15" fill="rgb(239,193,0)" fg:x="64050" fg:w="87"/><text x="44.6099%" y="799.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.04%)</title><rect x="44.3800%" y="773" width="0.0402%" height="15" fill="rgb(231,126,1)" fg:x="64079" fg:w="58"/><text x="44.6300%" y="783.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (265 samples, 0.18%)</title><rect x="44.4202%" y="805" width="0.1835%" height="15" fill="rgb(243,166,3)" fg:x="64137" fg:w="265"/><text x="44.6702%" y="815.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (100 samples, 0.07%)</title><rect x="44.8004%" y="789" width="0.0693%" height="15" fill="rgb(223,22,34)" fg:x="64686" fg:w="100"/><text x="45.0504%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (49 samples, 0.03%)</title><rect x="44.8358%" y="773" width="0.0339%" height="15" fill="rgb(251,52,51)" fg:x="64737" fg:w="49"/><text x="45.0858%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (34 samples, 0.02%)</title><rect x="44.8697%" y="789" width="0.0235%" height="15" fill="rgb(221,165,28)" fg:x="64786" fg:w="34"/><text x="45.1197%" y="799.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (436 samples, 0.30%)</title><rect x="44.6037%" y="805" width="0.3020%" height="15" fill="rgb(218,121,47)" fg:x="64402" fg:w="436"/><text x="44.8537%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18 samples, 0.01%)</title><rect x="44.8932%" y="789" width="0.0125%" height="15" fill="rgb(209,120,9)" fg:x="64820" fg:w="18"/><text x="45.1432%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (84 samples, 0.06%)</title><rect x="45.0754%" y="789" width="0.0582%" height="15" fill="rgb(236,68,12)" fg:x="65083" fg:w="84"/><text x="45.3254%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (53 samples, 0.04%)</title><rect x="45.0969%" y="773" width="0.0367%" height="15" fill="rgb(225,194,26)" fg:x="65114" fg:w="53"/><text x="45.3469%" y="783.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (206 samples, 0.14%)</title><rect x="45.2305%" y="773" width="0.1427%" height="15" fill="rgb(231,84,39)" fg:x="65307" fg:w="206"/><text x="45.4805%" y="783.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (5,675 samples, 3.93%)</title><rect x="41.4615%" y="821" width="3.9304%" height="15" fill="rgb(210,11,45)" fg:x="59865" fg:w="5675"/><text x="41.7115%" y="831.50">simd..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (702 samples, 0.49%)</title><rect x="44.9057%" y="805" width="0.4862%" height="15" fill="rgb(224,54,52)" fg:x="64838" fg:w="702"/><text x="45.1557%" y="815.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (373 samples, 0.26%)</title><rect x="45.1336%" y="789" width="0.2583%" height="15" fill="rgb(238,102,14)" fg:x="65167" fg:w="373"/><text x="45.3836%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi64x (27 samples, 0.02%)</title><rect x="45.3732%" y="773" width="0.0187%" height="15" fill="rgb(243,160,52)" fg:x="65513" fg:w="27"/><text x="45.6232%" y="783.50"></text></g><g><title>core::core_arch::simd::i64x2::new (27 samples, 0.02%)</title><rect x="45.3732%" y="757" width="0.0187%" height="15" fill="rgb(216,114,19)" fg:x="65513" fg:w="27"/><text x="45.6232%" y="767.50"></text></g><g><title>sn_rust_dealloc (102 samples, 0.07%)</title><rect x="45.3933%" y="821" width="0.0706%" height="15" fill="rgb(244,166,37)" fg:x="65542" fg:w="102"/><text x="45.6433%" y="831.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (6,103 samples, 4.23%)</title><rect x="41.2523%" y="837" width="4.2268%" height="15" fill="rgb(246,29,44)" fg:x="59563" fg:w="6103"/><text x="41.5023%" y="847.50">simd_..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (22 samples, 0.02%)</title><rect x="45.4639%" y="821" width="0.0152%" height="15" fill="rgb(215,56,53)" fg:x="65644" fg:w="22"/><text x="45.7139%" y="831.50"></text></g><g><title>simd_json::Deserializer::next_ (86 samples, 0.06%)</title><rect x="45.4833%" y="821" width="0.0596%" height="15" fill="rgb(217,60,2)" fg:x="65672" fg:w="86"/><text x="45.7333%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (68 samples, 0.05%)</title><rect x="45.5955%" y="805" width="0.0471%" height="15" fill="rgb(207,26,24)" fg:x="65834" fg:w="68"/><text x="45.8455%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (68 samples, 0.05%)</title><rect x="45.5955%" y="789" width="0.0471%" height="15" fill="rgb(252,210,15)" fg:x="65834" fg:w="68"/><text x="45.8455%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (57 samples, 0.04%)</title><rect x="50.6777%" y="773" width="0.0395%" height="15" fill="rgb(253,209,26)" fg:x="73172" fg:w="57"/><text x="50.9277%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (7,393 samples, 5.12%)</title><rect x="45.6426%" y="805" width="5.1203%" height="15" fill="rgb(238,170,14)" fg:x="65902" fg:w="7393"/><text x="45.8926%" y="815.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (2,623 samples, 1.82%)</title><rect x="48.9462%" y="789" width="1.8166%" height="15" fill="rgb(216,178,15)" fg:x="70672" fg:w="2623"/><text x="49.1962%" y="799.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (66 samples, 0.05%)</title><rect x="50.7172%" y="773" width="0.0457%" height="15" fill="rgb(250,197,2)" fg:x="73229" fg:w="66"/><text x="50.9672%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (120 samples, 0.08%)</title><rect x="50.8134%" y="581" width="0.0831%" height="15" fill="rgb(212,70,42)" fg:x="73368" fg:w="120"/><text x="51.0634%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (191 samples, 0.13%)</title><rect x="50.7747%" y="741" width="0.1323%" height="15" fill="rgb(227,213,9)" fg:x="73312" fg:w="191"/><text x="51.0247%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (191 samples, 0.13%)</title><rect x="50.7747%" y="725" width="0.1323%" height="15" fill="rgb(245,99,25)" fg:x="73312" fg:w="191"/><text x="51.0247%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (186 samples, 0.13%)</title><rect x="50.7781%" y="709" width="0.1288%" height="15" fill="rgb(250,82,29)" fg:x="73317" fg:w="186"/><text x="51.0281%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (182 samples, 0.13%)</title><rect x="50.7809%" y="693" width="0.1261%" height="15" fill="rgb(241,226,54)" fg:x="73321" fg:w="182"/><text x="51.0309%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (178 samples, 0.12%)</title><rect x="50.7837%" y="677" width="0.1233%" height="15" fill="rgb(221,99,41)" fg:x="73325" fg:w="178"/><text x="51.0337%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (178 samples, 0.12%)</title><rect x="50.7837%" y="661" width="0.1233%" height="15" fill="rgb(213,90,21)" fg:x="73325" fg:w="178"/><text x="51.0337%" y="671.50"></text></g><g><title>alloc::alloc::alloc (178 samples, 0.12%)</title><rect x="50.7837%" y="645" width="0.1233%" height="15" fill="rgb(205,208,24)" fg:x="73325" fg:w="178"/><text x="51.0337%" y="655.50"></text></g><g><title>__rg_alloc (178 samples, 0.12%)</title><rect x="50.7837%" y="629" width="0.1233%" height="15" fill="rgb(246,31,12)" fg:x="73325" fg:w="178"/><text x="51.0337%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (178 samples, 0.12%)</title><rect x="50.7837%" y="613" width="0.1233%" height="15" fill="rgb(213,154,6)" fg:x="73325" fg:w="178"/><text x="51.0337%" y="623.50"></text></g><g><title>sn_rust_alloc (178 samples, 0.12%)</title><rect x="50.7837%" y="597" width="0.1233%" height="15" fill="rgb(222,163,29)" fg:x="73325" fg:w="178"/><text x="51.0337%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (217 samples, 0.15%)</title><rect x="50.7629%" y="789" width="0.1503%" height="15" fill="rgb(227,201,8)" fg:x="73295" fg:w="217"/><text x="51.0129%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (216 samples, 0.15%)</title><rect x="50.7636%" y="773" width="0.1496%" height="15" fill="rgb(233,9,32)" fg:x="73296" fg:w="216"/><text x="51.0136%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (216 samples, 0.15%)</title><rect x="50.7636%" y="757" width="0.1496%" height="15" fill="rgb(217,54,24)" fg:x="73296" fg:w="216"/><text x="51.0136%" y="767.50"></text></g><g><title>core::mem::swap (629 samples, 0.44%)</title><rect x="50.9651%" y="613" width="0.4356%" height="15" fill="rgb(235,192,0)" fg:x="73587" fg:w="629"/><text x="51.2151%" y="623.50"></text></g><g><title>core::mem::swap_simple (629 samples, 0.44%)</title><rect x="50.9651%" y="597" width="0.4356%" height="15" fill="rgb(235,45,9)" fg:x="73587" fg:w="629"/><text x="51.2151%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (675 samples, 0.47%)</title><rect x="50.9464%" y="629" width="0.4675%" height="15" fill="rgb(246,42,40)" fg:x="73560" fg:w="675"/><text x="51.1964%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (950 samples, 0.66%)</title><rect x="50.7629%" y="805" width="0.6580%" height="15" fill="rgb(248,111,24)" fg:x="73295" fg:w="950"/><text x="51.0129%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (733 samples, 0.51%)</title><rect x="50.9132%" y="789" width="0.5077%" height="15" fill="rgb(249,65,22)" fg:x="73512" fg:w="733"/><text x="51.1632%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (722 samples, 0.50%)</title><rect x="50.9208%" y="773" width="0.5000%" height="15" fill="rgb(238,111,51)" fg:x="73523" fg:w="722"/><text x="51.1708%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (722 samples, 0.50%)</title><rect x="50.9208%" y="757" width="0.5000%" height="15" fill="rgb(250,118,22)" fg:x="73523" fg:w="722"/><text x="51.1708%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (715 samples, 0.50%)</title><rect x="50.9256%" y="741" width="0.4952%" height="15" fill="rgb(234,84,26)" fg:x="73530" fg:w="715"/><text x="51.1756%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (715 samples, 0.50%)</title><rect x="50.9256%" y="725" width="0.4952%" height="15" fill="rgb(243,172,12)" fg:x="73530" fg:w="715"/><text x="51.1756%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (715 samples, 0.50%)</title><rect x="50.9256%" y="709" width="0.4952%" height="15" fill="rgb(236,150,49)" fg:x="73530" fg:w="715"/><text x="51.1756%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (713 samples, 0.49%)</title><rect x="50.9270%" y="693" width="0.4938%" height="15" fill="rgb(225,197,26)" fg:x="73532" fg:w="713"/><text x="51.1770%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (713 samples, 0.49%)</title><rect x="50.9270%" y="677" width="0.4938%" height="15" fill="rgb(214,17,42)" fg:x="73532" fg:w="713"/><text x="51.1770%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (712 samples, 0.49%)</title><rect x="50.9277%" y="661" width="0.4931%" height="15" fill="rgb(224,165,40)" fg:x="73533" fg:w="712"/><text x="51.1777%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (708 samples, 0.49%)</title><rect x="50.9305%" y="645" width="0.4903%" height="15" fill="rgb(246,100,4)" fg:x="73537" fg:w="708"/><text x="51.1805%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (64 samples, 0.04%)</title><rect x="51.4208%" y="805" width="0.0443%" height="15" fill="rgb(222,103,0)" fg:x="74245" fg:w="64"/><text x="51.6708%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (64 samples, 0.04%)</title><rect x="51.4208%" y="789" width="0.0443%" height="15" fill="rgb(227,189,26)" fg:x="74245" fg:w="64"/><text x="51.6708%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (56 samples, 0.04%)</title><rect x="51.4264%" y="773" width="0.0388%" height="15" fill="rgb(214,202,17)" fg:x="74253" fg:w="56"/><text x="51.6764%" y="783.50"></text></g><g><title>simd_json::Deserializer::next_ (168 samples, 0.12%)</title><rect x="51.4652%" y="805" width="0.1164%" height="15" fill="rgb(229,111,3)" fg:x="74309" fg:w="168"/><text x="51.7152%" y="815.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (48 samples, 0.03%)</title><rect x="51.5815%" y="805" width="0.0332%" height="15" fill="rgb(229,172,15)" fg:x="74477" fg:w="48"/><text x="51.8315%" y="815.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (15,557 samples, 10.77%)</title><rect x="40.8437%" y="869" width="10.7745%" height="15" fill="rgb(230,224,35)" fg:x="58973" fg:w="15557"/><text x="41.0937%" y="879.50">&lt;tremor_runtime:..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (15,481 samples, 10.72%)</title><rect x="40.8963%" y="853" width="10.7219%" height="15" fill="rgb(251,141,6)" fg:x="59049" fg:w="15481"/><text x="41.1463%" y="863.50">tremor_value::va..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (8,864 samples, 6.14%)</title><rect x="45.4792%" y="837" width="6.1391%" height="15" fill="rgb(225,208,6)" fg:x="65666" fg:w="8864"/><text x="45.7292%" y="847.50">tremor_v..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (8,772 samples, 6.08%)</title><rect x="45.5429%" y="821" width="6.0753%" height="15" fill="rgb(246,181,16)" fg:x="65758" fg:w="8772"/><text x="45.7929%" y="831.50">tremor_v..</text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (81 samples, 0.06%)</title><rect x="51.6923%" y="757" width="0.0561%" height="15" fill="rgb(227,129,36)" fg:x="74637" fg:w="81"/><text x="51.9423%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (78 samples, 0.05%)</title><rect x="51.6944%" y="741" width="0.0540%" height="15" fill="rgb(248,117,24)" fg:x="74640" fg:w="78"/><text x="51.9444%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (78 samples, 0.05%)</title><rect x="51.6944%" y="725" width="0.0540%" height="15" fill="rgb(214,185,35)" fg:x="74640" fg:w="78"/><text x="51.9444%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (69 samples, 0.05%)</title><rect x="51.7006%" y="709" width="0.0478%" height="15" fill="rgb(236,150,34)" fg:x="74649" fg:w="69"/><text x="51.9506%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (69 samples, 0.05%)</title><rect x="51.7006%" y="693" width="0.0478%" height="15" fill="rgb(243,228,27)" fg:x="74649" fg:w="69"/><text x="51.9506%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (69 samples, 0.05%)</title><rect x="51.7006%" y="677" width="0.0478%" height="15" fill="rgb(245,77,44)" fg:x="74649" fg:w="69"/><text x="51.9506%" y="687.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.05%)</title><rect x="51.7013%" y="661" width="0.0471%" height="15" fill="rgb(235,214,42)" fg:x="74650" fg:w="68"/><text x="51.9513%" y="671.50"></text></g><g><title>__rg_alloc (68 samples, 0.05%)</title><rect x="51.7013%" y="645" width="0.0471%" height="15" fill="rgb(221,74,3)" fg:x="74650" fg:w="68"/><text x="51.9513%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (68 samples, 0.05%)</title><rect x="51.7013%" y="629" width="0.0471%" height="15" fill="rgb(206,121,29)" fg:x="74650" fg:w="68"/><text x="51.9513%" y="639.50"></text></g><g><title>sn_rust_alloc (68 samples, 0.05%)</title><rect x="51.7013%" y="613" width="0.0471%" height="15" fill="rgb(249,131,53)" fg:x="74650" fg:w="68"/><text x="51.9513%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (31 samples, 0.02%)</title><rect x="51.7270%" y="597" width="0.0215%" height="15" fill="rgb(236,170,29)" fg:x="74687" fg:w="31"/><text x="51.9770%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (114 samples, 0.08%)</title><rect x="51.6826%" y="837" width="0.0790%" height="15" fill="rgb(247,96,15)" fg:x="74623" fg:w="114"/><text x="51.9326%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (104 samples, 0.07%)</title><rect x="51.6896%" y="821" width="0.0720%" height="15" fill="rgb(211,210,7)" fg:x="74633" fg:w="104"/><text x="51.9396%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (104 samples, 0.07%)</title><rect x="51.6896%" y="805" width="0.0720%" height="15" fill="rgb(240,88,50)" fg:x="74633" fg:w="104"/><text x="51.9396%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (100 samples, 0.07%)</title><rect x="51.6923%" y="789" width="0.0693%" height="15" fill="rgb(209,229,26)" fg:x="74637" fg:w="100"/><text x="51.9423%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (100 samples, 0.07%)</title><rect x="51.6923%" y="773" width="0.0693%" height="15" fill="rgb(210,68,23)" fg:x="74637" fg:w="100"/><text x="51.9423%" y="783.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (19 samples, 0.01%)</title><rect x="51.7484%" y="757" width="0.0132%" height="15" fill="rgb(229,180,13)" fg:x="74718" fg:w="19"/><text x="51.9984%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (17 samples, 0.01%)</title><rect x="51.7498%" y="741" width="0.0118%" height="15" fill="rgb(236,53,44)" fg:x="74720" fg:w="17"/><text x="51.9998%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (17 samples, 0.01%)</title><rect x="51.7498%" y="725" width="0.0118%" height="15" fill="rgb(244,214,29)" fg:x="74720" fg:w="17"/><text x="51.9998%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (133 samples, 0.09%)</title><rect x="51.9285%" y="597" width="0.0921%" height="15" fill="rgb(220,75,29)" fg:x="74978" fg:w="133"/><text x="52.1785%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (184 samples, 0.13%)</title><rect x="51.9001%" y="757" width="0.1274%" height="15" fill="rgb(214,183,37)" fg:x="74937" fg:w="184"/><text x="52.1501%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (184 samples, 0.13%)</title><rect x="51.9001%" y="741" width="0.1274%" height="15" fill="rgb(239,117,29)" fg:x="74937" fg:w="184"/><text x="52.1501%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (176 samples, 0.12%)</title><rect x="51.9056%" y="725" width="0.1219%" height="15" fill="rgb(237,171,35)" fg:x="74945" fg:w="176"/><text x="52.1556%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (166 samples, 0.11%)</title><rect x="51.9126%" y="709" width="0.1150%" height="15" fill="rgb(229,178,53)" fg:x="74955" fg:w="166"/><text x="52.1626%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (166 samples, 0.11%)</title><rect x="51.9126%" y="693" width="0.1150%" height="15" fill="rgb(210,102,19)" fg:x="74955" fg:w="166"/><text x="52.1626%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (166 samples, 0.11%)</title><rect x="51.9126%" y="677" width="0.1150%" height="15" fill="rgb(235,127,22)" fg:x="74955" fg:w="166"/><text x="52.1626%" y="687.50"></text></g><g><title>alloc::alloc::alloc (166 samples, 0.11%)</title><rect x="51.9126%" y="661" width="0.1150%" height="15" fill="rgb(244,31,31)" fg:x="74955" fg:w="166"/><text x="52.1626%" y="671.50"></text></g><g><title>__rg_alloc (166 samples, 0.11%)</title><rect x="51.9126%" y="645" width="0.1150%" height="15" fill="rgb(231,43,21)" fg:x="74955" fg:w="166"/><text x="52.1626%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (166 samples, 0.11%)</title><rect x="51.9126%" y="629" width="0.1150%" height="15" fill="rgb(217,131,35)" fg:x="74955" fg:w="166"/><text x="52.1626%" y="639.50"></text></g><g><title>sn_rust_alloc (165 samples, 0.11%)</title><rect x="51.9133%" y="613" width="0.1143%" height="15" fill="rgb(221,149,4)" fg:x="74956" fg:w="165"/><text x="52.1633%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (201 samples, 0.14%)</title><rect x="51.8959%" y="805" width="0.1392%" height="15" fill="rgb(232,170,28)" fg:x="74931" fg:w="201"/><text x="52.1459%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (201 samples, 0.14%)</title><rect x="51.8959%" y="789" width="0.1392%" height="15" fill="rgb(238,56,10)" fg:x="74931" fg:w="201"/><text x="52.1459%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (201 samples, 0.14%)</title><rect x="51.8959%" y="773" width="0.1392%" height="15" fill="rgb(235,196,14)" fg:x="74931" fg:w="201"/><text x="52.1459%" y="783.50"></text></g><g><title>abi_stable::erased_types::iterator::next (17 samples, 0.01%)</title><rect x="52.0476%" y="757" width="0.0118%" height="15" fill="rgb(216,45,48)" fg:x="75150" fg:w="17"/><text x="52.2976%" y="767.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (16 samples, 0.01%)</title><rect x="52.0483%" y="741" width="0.0111%" height="15" fill="rgb(238,213,17)" fg:x="75151" fg:w="16"/><text x="52.2983%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="52.0490%" y="725" width="0.0104%" height="15" fill="rgb(212,13,2)" fg:x="75152" fg:w="15"/><text x="52.2990%" y="735.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="52.0490%" y="709" width="0.0104%" height="15" fill="rgb(240,114,20)" fg:x="75152" fg:w="15"/><text x="52.2990%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="52.0442%" y="789" width="0.0166%" height="15" fill="rgb(228,41,40)" fg:x="75145" fg:w="24"/><text x="52.2942%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (24 samples, 0.02%)</title><rect x="52.0442%" y="773" width="0.0166%" height="15" fill="rgb(244,132,35)" fg:x="75145" fg:w="24"/><text x="52.2942%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.02%)</title><rect x="52.0608%" y="789" width="0.0235%" height="15" fill="rgb(253,189,4)" fg:x="75169" fg:w="34"/><text x="52.3108%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (34 samples, 0.02%)</title><rect x="52.0608%" y="773" width="0.0235%" height="15" fill="rgb(224,37,19)" fg:x="75169" fg:w="34"/><text x="52.3108%" y="783.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (21 samples, 0.01%)</title><rect x="52.0698%" y="757" width="0.0145%" height="15" fill="rgb(235,223,18)" fg:x="75182" fg:w="21"/><text x="52.3198%" y="767.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (21 samples, 0.01%)</title><rect x="52.0698%" y="741" width="0.0145%" height="15" fill="rgb(235,163,25)" fg:x="75182" fg:w="21"/><text x="52.3198%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="52.0843%" y="789" width="0.0104%" height="15" fill="rgb(217,145,28)" fg:x="75203" fg:w="15"/><text x="52.3343%" y="799.50"></text></g><g><title>sn_rust_dealloc (98 samples, 0.07%)</title><rect x="52.1065%" y="677" width="0.0679%" height="15" fill="rgb(223,223,32)" fg:x="75235" fg:w="98"/><text x="52.3565%" y="687.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (804 samples, 0.56%)</title><rect x="51.6182%" y="869" width="0.5568%" height="15" fill="rgb(227,189,39)" fg:x="74530" fg:w="804"/><text x="51.8682%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (711 samples, 0.49%)</title><rect x="51.6826%" y="853" width="0.4924%" height="15" fill="rgb(248,10,22)" fg:x="74623" fg:w="711"/><text x="51.9326%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (597 samples, 0.41%)</title><rect x="51.7616%" y="837" width="0.4135%" height="15" fill="rgb(248,46,39)" fg:x="74737" fg:w="597"/><text x="52.0116%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (403 samples, 0.28%)</title><rect x="51.8959%" y="821" width="0.2791%" height="15" fill="rgb(248,113,48)" fg:x="74931" fg:w="403"/><text x="52.1459%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (202 samples, 0.14%)</title><rect x="52.0352%" y="805" width="0.1399%" height="15" fill="rgb(245,16,25)" fg:x="75132" fg:w="202"/><text x="52.2852%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (116 samples, 0.08%)</title><rect x="52.0947%" y="789" width="0.0803%" height="15" fill="rgb(249,152,16)" fg:x="75218" fg:w="116"/><text x="52.3447%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (116 samples, 0.08%)</title><rect x="52.0947%" y="773" width="0.0803%" height="15" fill="rgb(250,16,1)" fg:x="75218" fg:w="116"/><text x="52.3447%" y="783.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (116 samples, 0.08%)</title><rect x="52.0947%" y="757" width="0.0803%" height="15" fill="rgb(249,138,3)" fg:x="75218" fg:w="116"/><text x="52.3447%" y="767.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (113 samples, 0.08%)</title><rect x="52.0968%" y="741" width="0.0783%" height="15" fill="rgb(227,71,41)" fg:x="75221" fg:w="113"/><text x="52.3468%" y="751.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (111 samples, 0.08%)</title><rect x="52.0982%" y="725" width="0.0769%" height="15" fill="rgb(209,184,23)" fg:x="75223" fg:w="111"/><text x="52.3482%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (111 samples, 0.08%)</title><rect x="52.0982%" y="709" width="0.0769%" height="15" fill="rgb(223,215,31)" fg:x="75223" fg:w="111"/><text x="52.3482%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (111 samples, 0.08%)</title><rect x="52.0982%" y="693" width="0.0769%" height="15" fill="rgb(210,146,28)" fg:x="75223" fg:w="111"/><text x="52.3482%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (19,037 samples, 13.18%)</title><rect x="39.2085%" y="1077" width="13.1847%" height="15" fill="rgb(209,183,41)" fg:x="56612" fg:w="19037"/><text x="39.4585%" y="1087.50">std::thread::local::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19,029 samples, 13.18%)</title><rect x="39.2141%" y="1061" width="13.1792%" height="15" fill="rgb(209,224,45)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="1071.50">std::thread::local::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (19,029 samples, 13.18%)</title><rect x="39.2141%" y="1045" width="13.1792%" height="15" fill="rgb(224,209,51)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="1055.50">async_std::task::tas..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (19,029 samples, 13.18%)</title><rect x="39.2141%" y="1029" width="13.1792%" height="15" fill="rgb(223,17,39)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="1039.50">&lt;async_std::task::bu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19,029 samples, 13.18%)</title><rect x="39.2141%" y="1013" width="13.1792%" height="15" fill="rgb(234,204,37)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="1023.50">&lt;core::future::from_..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (19,029 samples, 13.18%)</title><rect x="39.2141%" y="997" width="13.1792%" height="15" fill="rgb(236,120,5)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="1007.50">tremor_runtime::conn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19,029 samples, 13.18%)</title><rect x="39.2141%" y="981" width="13.1792%" height="15" fill="rgb(248,97,27)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="991.50">&lt;core::future::from_..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (19,029 samples, 13.18%)</title><rect x="39.2141%" y="965" width="13.1792%" height="15" fill="rgb(240,66,17)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="975.50">tremor_runtime::conn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19,029 samples, 13.18%)</title><rect x="39.2141%" y="949" width="13.1792%" height="15" fill="rgb(210,79,3)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="959.50">&lt;core::future::from_..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (19,029 samples, 13.18%)</title><rect x="39.2141%" y="933" width="13.1792%" height="15" fill="rgb(214,176,27)" fg:x="56620" fg:w="19029"/><text x="39.4641%" y="943.50">tremor_runtime::conn..</text></g><g><title>tremor_runtime::connectors::source::build_events (19,025 samples, 13.18%)</title><rect x="39.2168%" y="917" width="13.1764%" height="15" fill="rgb(235,185,3)" fg:x="56624" fg:w="19025"/><text x="39.4668%" y="927.50">tremor_runtime::conn..</text></g><g><title>tremor_script::srs::EventPayload::try_new (17,339 samples, 12.01%)</title><rect x="40.3845%" y="901" width="12.0087%" height="15" fill="rgb(227,24,12)" fg:x="58310" fg:w="17339"/><text x="40.6345%" y="911.50">tremor_script::srs..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (16,896 samples, 11.70%)</title><rect x="40.6913%" y="885" width="11.7019%" height="15" fill="rgb(252,169,48)" fg:x="58753" fg:w="16896"/><text x="40.9413%" y="895.50">tremor_runtime::c..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (315 samples, 0.22%)</title><rect x="52.1751%" y="869" width="0.2182%" height="15" fill="rgb(212,65,1)" fg:x="75334" fg:w="315"/><text x="52.4251%" y="879.50"></text></g><g><title>tremor_common::time::nanotime (40 samples, 0.03%)</title><rect x="52.3939%" y="1077" width="0.0277%" height="15" fill="rgb(242,39,24)" fg:x="75650" fg:w="40"/><text x="52.6439%" y="1087.50"></text></g><g><title>std::time::SystemTime::now (22 samples, 0.02%)</title><rect x="52.4064%" y="1061" width="0.0152%" height="15" fill="rgb(249,32,23)" fg:x="75668" fg:w="22"/><text x="52.6564%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (22 samples, 0.02%)</title><rect x="52.4064%" y="1045" width="0.0152%" height="15" fill="rgb(251,195,23)" fg:x="75668" fg:w="22"/><text x="52.6564%" y="1055.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (22 samples, 0.02%)</title><rect x="52.4064%" y="1029" width="0.0152%" height="15" fill="rgb(236,174,8)" fg:x="75668" fg:w="22"/><text x="52.6564%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (18 samples, 0.01%)</title><rect x="52.4216%" y="1077" width="0.0125%" height="15" fill="rgb(220,197,8)" fg:x="75690" fg:w="18"/><text x="52.6716%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="52.4708%" y="901" width="0.0152%" height="15" fill="rgb(240,108,37)" fg:x="75761" fg:w="22"/><text x="52.7208%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="52.4708%" y="885" width="0.0152%" height="15" fill="rgb(232,176,24)" fg:x="75761" fg:w="22"/><text x="52.7208%" y="895.50"></text></g><g><title>event_listener::Inner::lock (29 samples, 0.02%)</title><rect x="52.4701%" y="965" width="0.0201%" height="15" fill="rgb(243,35,29)" fg:x="75760" fg:w="29"/><text x="52.7201%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.02%)</title><rect x="52.4701%" y="949" width="0.0201%" height="15" fill="rgb(210,37,18)" fg:x="75760" fg:w="29"/><text x="52.7201%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (28 samples, 0.02%)</title><rect x="52.4708%" y="933" width="0.0194%" height="15" fill="rgb(224,184,40)" fg:x="75761" fg:w="28"/><text x="52.7208%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (28 samples, 0.02%)</title><rect x="52.4708%" y="917" width="0.0194%" height="15" fill="rgb(236,39,29)" fg:x="75761" fg:w="28"/><text x="52.7208%" y="927.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (71 samples, 0.05%)</title><rect x="52.4521%" y="981" width="0.0492%" height="15" fill="rgb(232,48,39)" fg:x="75734" fg:w="71"/><text x="52.7021%" y="991.50"></text></g><g><title>event_listener::List::remove (16 samples, 0.01%)</title><rect x="52.4902%" y="965" width="0.0111%" height="15" fill="rgb(236,34,42)" fg:x="75789" fg:w="16"/><text x="52.7402%" y="975.50"></text></g><g><title>[libc-2.31.so] (422 samples, 0.29%)</title><rect x="52.5013%" y="981" width="0.2923%" height="15" fill="rgb(243,106,37)" fg:x="75805" fg:w="422"/><text x="52.7513%" y="991.50"></text></g><g><title>[libc-2.31.so] (554 samples, 0.38%)</title><rect x="52.8095%" y="965" width="0.3837%" height="15" fill="rgb(218,96,6)" fg:x="76250" fg:w="554"/><text x="53.0595%" y="975.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.11%)</title><rect x="53.2659%" y="933" width="0.1101%" height="15" fill="rgb(235,130,12)" fg:x="76909" fg:w="159"/><text x="53.5159%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (27 samples, 0.02%)</title><rect x="53.3760%" y="933" width="0.0187%" height="15" fill="rgb(231,95,0)" fg:x="77068" fg:w="27"/><text x="53.6260%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (27 samples, 0.02%)</title><rect x="53.3760%" y="917" width="0.0187%" height="15" fill="rgb(228,12,23)" fg:x="77068" fg:w="27"/><text x="53.6260%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (27 samples, 0.02%)</title><rect x="53.3760%" y="901" width="0.0187%" height="15" fill="rgb(216,12,1)" fg:x="77068" fg:w="27"/><text x="53.6260%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.02%)</title><rect x="53.3760%" y="885" width="0.0187%" height="15" fill="rgb(219,59,3)" fg:x="77068" fg:w="27"/><text x="53.6260%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (494 samples, 0.34%)</title><rect x="53.3947%" y="933" width="0.3421%" height="15" fill="rgb(215,208,46)" fg:x="77095" fg:w="494"/><text x="53.6447%" y="943.50"></text></g><g><title>core::ptr::read (494 samples, 0.34%)</title><rect x="53.3947%" y="917" width="0.3421%" height="15" fill="rgb(254,224,29)" fg:x="77095" fg:w="494"/><text x="53.6447%" y="927.50"></text></g><g><title>[libc-2.31.so] (494 samples, 0.34%)</title><rect x="53.3947%" y="901" width="0.3421%" height="15" fill="rgb(232,14,29)" fg:x="77095" fg:w="494"/><text x="53.6447%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (451 samples, 0.31%)</title><rect x="53.7368%" y="933" width="0.3124%" height="15" fill="rgb(208,45,52)" fg:x="77589" fg:w="451"/><text x="53.9868%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (451 samples, 0.31%)</title><rect x="53.7368%" y="917" width="0.3124%" height="15" fill="rgb(234,191,28)" fg:x="77589" fg:w="451"/><text x="53.9868%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,576 samples, 1.09%)</title><rect x="53.1932%" y="965" width="1.0915%" height="15" fill="rgb(244,67,43)" fg:x="76804" fg:w="1576"/><text x="53.4432%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,544 samples, 1.07%)</title><rect x="53.2153%" y="949" width="1.0693%" height="15" fill="rgb(236,189,24)" fg:x="76836" fg:w="1544"/><text x="53.4653%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (340 samples, 0.24%)</title><rect x="54.0492%" y="933" width="0.2355%" height="15" fill="rgb(239,214,33)" fg:x="78040" fg:w="340"/><text x="54.2992%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (336 samples, 0.23%)</title><rect x="54.0520%" y="917" width="0.2327%" height="15" fill="rgb(226,176,41)" fg:x="78044" fg:w="336"/><text x="54.3020%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (22 samples, 0.02%)</title><rect x="54.2895%" y="949" width="0.0152%" height="15" fill="rgb(248,47,8)" fg:x="78387" fg:w="22"/><text x="54.5395%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (18 samples, 0.01%)</title><rect x="54.2923%" y="933" width="0.0125%" height="15" fill="rgb(218,81,44)" fg:x="78391" fg:w="18"/><text x="54.5423%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="54.2923%" y="917" width="0.0125%" height="15" fill="rgb(213,98,6)" fg:x="78391" fg:w="18"/><text x="54.5423%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="54.2930%" y="901" width="0.0118%" height="15" fill="rgb(222,85,22)" fg:x="78392" fg:w="17"/><text x="54.5430%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (17 samples, 0.01%)</title><rect x="54.2930%" y="885" width="0.0118%" height="15" fill="rgb(239,46,39)" fg:x="78392" fg:w="17"/><text x="54.5430%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (17 samples, 0.01%)</title><rect x="54.2930%" y="869" width="0.0118%" height="15" fill="rgb(237,12,29)" fg:x="78392" fg:w="17"/><text x="54.5430%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (17 samples, 0.01%)</title><rect x="54.2930%" y="853" width="0.0118%" height="15" fill="rgb(214,77,8)" fg:x="78392" fg:w="17"/><text x="54.5430%" y="863.50"></text></g><g><title>event_listener::Inner::lock (31 samples, 0.02%)</title><rect x="54.3110%" y="949" width="0.0215%" height="15" fill="rgb(217,168,37)" fg:x="78418" fg:w="31"/><text x="54.5610%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.02%)</title><rect x="54.3110%" y="933" width="0.0215%" height="15" fill="rgb(221,217,23)" fg:x="78418" fg:w="31"/><text x="54.5610%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (30 samples, 0.02%)</title><rect x="54.3117%" y="917" width="0.0208%" height="15" fill="rgb(243,229,36)" fg:x="78419" fg:w="30"/><text x="54.5617%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (30 samples, 0.02%)</title><rect x="54.3117%" y="901" width="0.0208%" height="15" fill="rgb(251,163,40)" fg:x="78419" fg:w="30"/><text x="54.5617%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (29 samples, 0.02%)</title><rect x="54.3124%" y="885" width="0.0201%" height="15" fill="rgb(237,222,12)" fg:x="78420" fg:w="29"/><text x="54.5624%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="54.3124%" y="869" width="0.0201%" height="15" fill="rgb(248,132,6)" fg:x="78420" fg:w="29"/><text x="54.5624%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (28 samples, 0.02%)</title><rect x="54.3387%" y="901" width="0.0194%" height="15" fill="rgb(227,167,50)" fg:x="78458" fg:w="28"/><text x="54.5887%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (28 samples, 0.02%)</title><rect x="54.3387%" y="885" width="0.0194%" height="15" fill="rgb(242,84,37)" fg:x="78458" fg:w="28"/><text x="54.5887%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (28 samples, 0.02%)</title><rect x="54.3387%" y="869" width="0.0194%" height="15" fill="rgb(212,4,50)" fg:x="78458" fg:w="28"/><text x="54.5887%" y="879.50"></text></g><g><title>async_executor::Sleepers::notify (27 samples, 0.02%)</title><rect x="54.3615%" y="853" width="0.0187%" height="15" fill="rgb(230,228,32)" fg:x="78491" fg:w="27"/><text x="54.6115%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (20 samples, 0.01%)</title><rect x="54.3664%" y="837" width="0.0139%" height="15" fill="rgb(248,217,23)" fg:x="78498" fg:w="20"/><text x="54.6164%" y="847.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="54.3692%" y="821" width="0.0111%" height="15" fill="rgb(238,197,32)" fg:x="78502" fg:w="16"/><text x="54.6192%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (29 samples, 0.02%)</title><rect x="54.3809%" y="789" width="0.0201%" height="15" fill="rgb(236,106,1)" fg:x="78519" fg:w="29"/><text x="54.6309%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_swap (29 samples, 0.02%)</title><rect x="54.3809%" y="773" width="0.0201%" height="15" fill="rgb(219,228,13)" fg:x="78519" fg:w="29"/><text x="54.6309%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (31 samples, 0.02%)</title><rect x="54.3802%" y="853" width="0.0215%" height="15" fill="rgb(238,30,35)" fg:x="78518" fg:w="31"/><text x="54.6302%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="54.3802%" y="837" width="0.0215%" height="15" fill="rgb(236,70,23)" fg:x="78518" fg:w="31"/><text x="54.6302%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.02%)</title><rect x="54.3809%" y="821" width="0.0208%" height="15" fill="rgb(249,104,48)" fg:x="78519" fg:w="30"/><text x="54.6309%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (30 samples, 0.02%)</title><rect x="54.3809%" y="805" width="0.0208%" height="15" fill="rgb(254,117,50)" fg:x="78519" fg:w="30"/><text x="54.6309%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (26 samples, 0.02%)</title><rect x="54.4017%" y="853" width="0.0180%" height="15" fill="rgb(223,152,4)" fg:x="78549" fg:w="26"/><text x="54.6517%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="54.4017%" y="837" width="0.0180%" height="15" fill="rgb(245,6,2)" fg:x="78549" fg:w="26"/><text x="54.6517%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (35 samples, 0.02%)</title><rect x="54.4356%" y="773" width="0.0242%" height="15" fill="rgb(249,150,24)" fg:x="78598" fg:w="35"/><text x="54.6856%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (35 samples, 0.02%)</title><rect x="54.4356%" y="757" width="0.0242%" height="15" fill="rgb(228,185,42)" fg:x="78598" fg:w="35"/><text x="54.6856%" y="767.50"></text></g><g><title>parking::Unparker::unpark (55 samples, 0.04%)</title><rect x="54.4273%" y="805" width="0.0381%" height="15" fill="rgb(226,39,33)" fg:x="78586" fg:w="55"/><text x="54.6773%" y="815.50"></text></g><g><title>parking::Inner::unpark (47 samples, 0.03%)</title><rect x="54.4329%" y="789" width="0.0326%" height="15" fill="rgb(221,166,19)" fg:x="78594" fg:w="47"/><text x="54.6829%" y="799.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (69 samples, 0.05%)</title><rect x="54.4197%" y="821" width="0.0478%" height="15" fill="rgb(209,109,2)" fg:x="78575" fg:w="69"/><text x="54.6697%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (92 samples, 0.06%)</title><rect x="54.4197%" y="853" width="0.0637%" height="15" fill="rgb(252,216,26)" fg:x="78575" fg:w="92"/><text x="54.6697%" y="863.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (92 samples, 0.06%)</title><rect x="54.4197%" y="837" width="0.0637%" height="15" fill="rgb(227,173,36)" fg:x="78575" fg:w="92"/><text x="54.6697%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="54.4675%" y="821" width="0.0159%" height="15" fill="rgb(209,90,7)" fg:x="78644" fg:w="23"/><text x="54.7175%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="54.4675%" y="805" width="0.0159%" height="15" fill="rgb(250,194,11)" fg:x="78644" fg:w="23"/><text x="54.7175%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.02%)</title><rect x="54.4682%" y="789" width="0.0152%" height="15" fill="rgb(220,72,50)" fg:x="78645" fg:w="22"/><text x="54.7182%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.02%)</title><rect x="54.4682%" y="773" width="0.0152%" height="15" fill="rgb(222,106,48)" fg:x="78645" fg:w="22"/><text x="54.7182%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (39 samples, 0.03%)</title><rect x="54.4931%" y="805" width="0.0270%" height="15" fill="rgb(216,220,45)" fg:x="78681" fg:w="39"/><text x="54.7431%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.03%)</title><rect x="54.4931%" y="789" width="0.0270%" height="15" fill="rgb(234,112,18)" fg:x="78681" fg:w="39"/><text x="54.7431%" y="799.50"></text></g><g><title>async_executor::State::notify (276 samples, 0.19%)</title><rect x="54.3602%" y="869" width="0.1912%" height="15" fill="rgb(206,179,9)" fg:x="78489" fg:w="276"/><text x="54.6102%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (98 samples, 0.07%)</title><rect x="54.4834%" y="853" width="0.0679%" height="15" fill="rgb(215,115,40)" fg:x="78667" fg:w="98"/><text x="54.7334%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (85 samples, 0.06%)</title><rect x="54.4924%" y="837" width="0.0589%" height="15" fill="rgb(222,69,34)" fg:x="78680" fg:w="85"/><text x="54.7424%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (85 samples, 0.06%)</title><rect x="54.4924%" y="821" width="0.0589%" height="15" fill="rgb(209,161,10)" fg:x="78680" fg:w="85"/><text x="54.7424%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (45 samples, 0.03%)</title><rect x="54.5201%" y="805" width="0.0312%" height="15" fill="rgb(217,6,38)" fg:x="78720" fg:w="45"/><text x="54.7701%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (31 samples, 0.02%)</title><rect x="54.5298%" y="789" width="0.0215%" height="15" fill="rgb(229,229,48)" fg:x="78734" fg:w="31"/><text x="54.7798%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (75 samples, 0.05%)</title><rect x="54.5555%" y="837" width="0.0519%" height="15" fill="rgb(225,21,28)" fg:x="78771" fg:w="75"/><text x="54.8055%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (75 samples, 0.05%)</title><rect x="54.5555%" y="821" width="0.0519%" height="15" fill="rgb(206,33,13)" fg:x="78771" fg:w="75"/><text x="54.8055%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (24 samples, 0.02%)</title><rect x="54.6074%" y="837" width="0.0166%" height="15" fill="rgb(242,178,17)" fg:x="78846" fg:w="24"/><text x="54.8574%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_or (24 samples, 0.02%)</title><rect x="54.6074%" y="821" width="0.0166%" height="15" fill="rgb(220,162,5)" fg:x="78846" fg:w="24"/><text x="54.8574%" y="831.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (386 samples, 0.27%)</title><rect x="54.3602%" y="885" width="0.2673%" height="15" fill="rgb(210,33,43)" fg:x="78489" fg:w="386"/><text x="54.6102%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (110 samples, 0.08%)</title><rect x="54.5513%" y="869" width="0.0762%" height="15" fill="rgb(216,116,54)" fg:x="78765" fg:w="110"/><text x="54.8013%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (110 samples, 0.08%)</title><rect x="54.5513%" y="853" width="0.0762%" height="15" fill="rgb(249,92,24)" fg:x="78765" fg:w="110"/><text x="54.8013%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (87 samples, 0.06%)</title><rect x="54.6275%" y="885" width="0.0603%" height="15" fill="rgb(231,189,14)" fg:x="78875" fg:w="87"/><text x="54.8775%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (87 samples, 0.06%)</title><rect x="54.6275%" y="869" width="0.0603%" height="15" fill="rgb(230,8,41)" fg:x="78875" fg:w="87"/><text x="54.8775%" y="879.50"></text></g><g><title>event_listener::List::notify (534 samples, 0.37%)</title><rect x="54.3325%" y="949" width="0.3698%" height="15" fill="rgb(249,7,27)" fg:x="78449" fg:w="534"/><text x="54.5825%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake (526 samples, 0.36%)</title><rect x="54.3380%" y="933" width="0.3643%" height="15" fill="rgb(232,86,5)" fg:x="78457" fg:w="526"/><text x="54.5880%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (526 samples, 0.36%)</title><rect x="54.3380%" y="917" width="0.3643%" height="15" fill="rgb(224,175,18)" fg:x="78457" fg:w="526"/><text x="54.5880%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (497 samples, 0.34%)</title><rect x="54.3581%" y="901" width="0.3442%" height="15" fill="rgb(220,129,12)" fg:x="78486" fg:w="497"/><text x="54.6081%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.01%)</title><rect x="54.6877%" y="885" width="0.0145%" height="15" fill="rgb(210,19,36)" fg:x="78962" fg:w="21"/><text x="54.9377%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.01%)</title><rect x="54.6877%" y="869" width="0.0145%" height="15" fill="rgb(219,96,14)" fg:x="78962" fg:w="21"/><text x="54.9377%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,976 samples, 2.06%)</title><rect x="52.7935%" y="981" width="2.0611%" height="15" fill="rgb(249,106,1)" fg:x="76227" fg:w="2976"/><text x="53.0435%" y="991.50">a..</text></g><g><title>event_listener::Event::notify (823 samples, 0.57%)</title><rect x="54.2847%" y="965" width="0.5700%" height="15" fill="rgb(249,155,20)" fg:x="78380" fg:w="823"/><text x="54.5347%" y="975.50"></text></g><g><title>event_listener::full_fence (220 samples, 0.15%)</title><rect x="54.7023%" y="949" width="0.1524%" height="15" fill="rgb(244,168,9)" fg:x="78983" fg:w="220"/><text x="54.9523%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (213 samples, 0.15%)</title><rect x="54.7071%" y="933" width="0.1475%" height="15" fill="rgb(216,23,50)" fg:x="78990" fg:w="213"/><text x="54.9571%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (213 samples, 0.15%)</title><rect x="54.7071%" y="917" width="0.1475%" height="15" fill="rgb(224,219,20)" fg:x="78990" fg:w="213"/><text x="54.9571%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (32 samples, 0.02%)</title><rect x="54.8588%" y="981" width="0.0222%" height="15" fill="rgb(222,156,15)" fg:x="79209" fg:w="32"/><text x="55.1088%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (23 samples, 0.02%)</title><rect x="54.8651%" y="965" width="0.0159%" height="15" fill="rgb(231,97,17)" fg:x="79218" fg:w="23"/><text x="55.1151%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (21 samples, 0.01%)</title><rect x="54.8664%" y="949" width="0.0145%" height="15" fill="rgb(218,70,48)" fg:x="79220" fg:w="21"/><text x="55.1164%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="54.8664%" y="933" width="0.0145%" height="15" fill="rgb(212,196,52)" fg:x="79220" fg:w="21"/><text x="55.1164%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (21 samples, 0.01%)</title><rect x="54.8664%" y="917" width="0.0145%" height="15" fill="rgb(243,203,18)" fg:x="79220" fg:w="21"/><text x="55.1164%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (21 samples, 0.01%)</title><rect x="54.8664%" y="901" width="0.0145%" height="15" fill="rgb(252,125,41)" fg:x="79220" fg:w="21"/><text x="55.1164%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (22 samples, 0.02%)</title><rect x="54.8893%" y="965" width="0.0152%" height="15" fill="rgb(223,180,33)" fg:x="79253" fg:w="22"/><text x="55.1393%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.01%)</title><rect x="54.8900%" y="949" width="0.0145%" height="15" fill="rgb(254,159,46)" fg:x="79254" fg:w="21"/><text x="55.1400%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="54.8900%" y="933" width="0.0145%" height="15" fill="rgb(254,38,10)" fg:x="79254" fg:w="21"/><text x="55.1400%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.01%)</title><rect x="54.8900%" y="917" width="0.0145%" height="15" fill="rgb(208,217,32)" fg:x="79254" fg:w="21"/><text x="55.1400%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (21 samples, 0.01%)</title><rect x="54.8900%" y="901" width="0.0145%" height="15" fill="rgb(221,120,13)" fg:x="79254" fg:w="21"/><text x="55.1400%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.01%)</title><rect x="54.8900%" y="885" width="0.0145%" height="15" fill="rgb(246,54,52)" fg:x="79254" fg:w="21"/><text x="55.1400%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.01%)</title><rect x="54.8900%" y="869" width="0.0145%" height="15" fill="rgb(242,34,25)" fg:x="79254" fg:w="21"/><text x="55.1400%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,581 samples, 2.48%)</title><rect x="52.4341%" y="1061" width="2.4801%" height="15" fill="rgb(247,209,9)" fg:x="75708" fg:w="3581"/><text x="52.6841%" y="1071.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,581 samples, 2.48%)</title><rect x="52.4341%" y="1045" width="2.4801%" height="15" fill="rgb(228,71,26)" fg:x="75708" fg:w="3581"/><text x="52.6841%" y="1055.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,581 samples, 2.48%)</title><rect x="52.4341%" y="1029" width="2.4801%" height="15" fill="rgb(222,145,49)" fg:x="75708" fg:w="3581"/><text x="52.6841%" y="1039.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,581 samples, 2.48%)</title><rect x="52.4341%" y="1013" width="2.4801%" height="15" fill="rgb(218,121,17)" fg:x="75708" fg:w="3581"/><text x="52.6841%" y="1023.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,581 samples, 2.48%)</title><rect x="52.4341%" y="997" width="2.4801%" height="15" fill="rgb(244,50,7)" fg:x="75708" fg:w="3581"/><text x="52.6841%" y="1007.50">&lt;a..</text></g><g><title>event_listener::Event::listen (48 samples, 0.03%)</title><rect x="54.8810%" y="981" width="0.0332%" height="15" fill="rgb(246,229,37)" fg:x="79241" fg:w="48"/><text x="55.1310%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (31 samples, 0.02%)</title><rect x="54.9350%" y="645" width="0.0215%" height="15" fill="rgb(225,18,5)" fg:x="79319" fg:w="31"/><text x="55.1850%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 0.02%)</title><rect x="54.9371%" y="629" width="0.0194%" height="15" fill="rgb(213,204,8)" fg:x="79322" fg:w="28"/><text x="55.1871%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (28 samples, 0.02%)</title><rect x="54.9371%" y="613" width="0.0194%" height="15" fill="rgb(238,103,6)" fg:x="79322" fg:w="28"/><text x="55.1871%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.01%)</title><rect x="54.9426%" y="597" width="0.0139%" height="15" fill="rgb(222,25,35)" fg:x="79330" fg:w="20"/><text x="55.1926%" y="607.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="54.9461%" y="581" width="0.0104%" height="15" fill="rgb(213,203,35)" fg:x="79335" fg:w="15"/><text x="55.1961%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.02%)</title><rect x="55.1282%" y="629" width="0.0208%" height="15" fill="rgb(221,79,53)" fg:x="79598" fg:w="30"/><text x="55.3782%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (59 samples, 0.04%)</title><rect x="55.1712%" y="613" width="0.0409%" height="15" fill="rgb(243,200,35)" fg:x="79660" fg:w="59"/><text x="55.4212%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (59 samples, 0.04%)</title><rect x="55.1712%" y="597" width="0.0409%" height="15" fill="rgb(248,60,25)" fg:x="79660" fg:w="59"/><text x="55.4212%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (59 samples, 0.04%)</title><rect x="55.1712%" y="581" width="0.0409%" height="15" fill="rgb(227,53,46)" fg:x="79660" fg:w="59"/><text x="55.4212%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (27 samples, 0.02%)</title><rect x="55.3769%" y="485" width="0.0187%" height="15" fill="rgb(216,120,32)" fg:x="79957" fg:w="27"/><text x="55.6269%" y="495.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (27 samples, 0.02%)</title><rect x="55.3769%" y="469" width="0.0187%" height="15" fill="rgb(220,134,1)" fg:x="79957" fg:w="27"/><text x="55.6269%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (27 samples, 0.02%)</title><rect x="55.3769%" y="453" width="0.0187%" height="15" fill="rgb(237,168,5)" fg:x="79957" fg:w="27"/><text x="55.6269%" y="463.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (63 samples, 0.04%)</title><rect x="55.3769%" y="501" width="0.0436%" height="15" fill="rgb(231,100,33)" fg:x="79957" fg:w="63"/><text x="55.6269%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (36 samples, 0.02%)</title><rect x="55.3956%" y="485" width="0.0249%" height="15" fill="rgb(236,177,47)" fg:x="79984" fg:w="36"/><text x="55.6456%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (220 samples, 0.15%)</title><rect x="55.3118%" y="533" width="0.1524%" height="15" fill="rgb(235,7,49)" fg:x="79863" fg:w="220"/><text x="55.5618%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 0.11%)</title><rect x="55.3575%" y="517" width="0.1067%" height="15" fill="rgb(232,119,22)" fg:x="79929" fg:w="154"/><text x="55.6075%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (52 samples, 0.04%)</title><rect x="55.4281%" y="501" width="0.0360%" height="15" fill="rgb(254,73,53)" fg:x="80031" fg:w="52"/><text x="55.6781%" y="511.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (346 samples, 0.24%)</title><rect x="55.2619%" y="565" width="0.2396%" height="15" fill="rgb(251,35,20)" fg:x="79791" fg:w="346"/><text x="55.5119%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (312 samples, 0.22%)</title><rect x="55.2854%" y="549" width="0.2161%" height="15" fill="rgb(241,119,20)" fg:x="79825" fg:w="312"/><text x="55.5354%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (54 samples, 0.04%)</title><rect x="55.4641%" y="533" width="0.0374%" height="15" fill="rgb(207,102,14)" fg:x="80083" fg:w="54"/><text x="55.7141%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (54 samples, 0.04%)</title><rect x="55.4641%" y="517" width="0.0374%" height="15" fill="rgb(248,201,50)" fg:x="80083" fg:w="54"/><text x="55.7141%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (54 samples, 0.04%)</title><rect x="55.4641%" y="501" width="0.0374%" height="15" fill="rgb(222,185,44)" fg:x="80083" fg:w="54"/><text x="55.7141%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (54 samples, 0.04%)</title><rect x="55.4641%" y="485" width="0.0374%" height="15" fill="rgb(218,107,18)" fg:x="80083" fg:w="54"/><text x="55.7141%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,286 samples, 0.89%)</title><rect x="55.2619%" y="581" width="0.8907%" height="15" fill="rgb(237,177,39)" fg:x="79791" fg:w="1286"/><text x="55.5119%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (940 samples, 0.65%)</title><rect x="55.5015%" y="565" width="0.6510%" height="15" fill="rgb(246,69,6)" fg:x="80137" fg:w="940"/><text x="55.7515%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (940 samples, 0.65%)</title><rect x="55.5015%" y="549" width="0.6510%" height="15" fill="rgb(234,208,37)" fg:x="80137" fg:w="940"/><text x="55.7515%" y="559.50"></text></g><g><title>core::ops::function::FnMut::call_mut (940 samples, 0.65%)</title><rect x="55.5015%" y="533" width="0.6510%" height="15" fill="rgb(225,4,6)" fg:x="80137" fg:w="940"/><text x="55.7515%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (940 samples, 0.65%)</title><rect x="55.5015%" y="517" width="0.6510%" height="15" fill="rgb(233,45,0)" fg:x="80137" fg:w="940"/><text x="55.7515%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (940 samples, 0.65%)</title><rect x="55.5015%" y="501" width="0.6510%" height="15" fill="rgb(226,136,5)" fg:x="80137" fg:w="940"/><text x="55.7515%" y="511.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,420 samples, 0.98%)</title><rect x="55.2141%" y="613" width="0.9835%" height="15" fill="rgb(211,91,47)" fg:x="79722" fg:w="1420"/><text x="55.4641%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,374 samples, 0.95%)</title><rect x="55.2460%" y="597" width="0.9516%" height="15" fill="rgb(242,88,51)" fg:x="79768" fg:w="1374"/><text x="55.4960%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (65 samples, 0.05%)</title><rect x="56.1526%" y="581" width="0.0450%" height="15" fill="rgb(230,91,28)" fg:x="81077" fg:w="65"/><text x="56.4026%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (65 samples, 0.05%)</title><rect x="56.1526%" y="565" width="0.0450%" height="15" fill="rgb(254,186,29)" fg:x="81077" fg:w="65"/><text x="56.4026%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (65 samples, 0.05%)</title><rect x="56.1526%" y="549" width="0.0450%" height="15" fill="rgb(238,6,4)" fg:x="81077" fg:w="65"/><text x="56.4026%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (42 samples, 0.03%)</title><rect x="56.2149%" y="581" width="0.0291%" height="15" fill="rgb(221,151,16)" fg:x="81167" fg:w="42"/><text x="56.4649%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (42 samples, 0.03%)</title><rect x="56.2149%" y="565" width="0.0291%" height="15" fill="rgb(251,143,52)" fg:x="81167" fg:w="42"/><text x="56.4649%" y="575.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,689 samples, 1.17%)</title><rect x="55.1490%" y="629" width="1.1698%" height="15" fill="rgb(206,90,15)" fg:x="79628" fg:w="1689"/><text x="55.3990%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (175 samples, 0.12%)</title><rect x="56.1976%" y="613" width="0.1212%" height="15" fill="rgb(218,35,8)" fg:x="81142" fg:w="175"/><text x="56.4476%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (175 samples, 0.12%)</title><rect x="56.1976%" y="597" width="0.1212%" height="15" fill="rgb(239,215,6)" fg:x="81142" fg:w="175"/><text x="56.4476%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (108 samples, 0.07%)</title><rect x="56.2440%" y="581" width="0.0748%" height="15" fill="rgb(245,116,39)" fg:x="81209" fg:w="108"/><text x="56.4940%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (227 samples, 0.16%)</title><rect x="56.3188%" y="629" width="0.1572%" height="15" fill="rgb(242,65,28)" fg:x="81317" fg:w="227"/><text x="56.5688%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (225 samples, 0.16%)</title><rect x="56.3202%" y="613" width="0.1558%" height="15" fill="rgb(252,132,53)" fg:x="81319" fg:w="225"/><text x="56.5702%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (217 samples, 0.15%)</title><rect x="56.3257%" y="597" width="0.1503%" height="15" fill="rgb(224,159,50)" fg:x="81327" fg:w="217"/><text x="56.5757%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (217 samples, 0.15%)</title><rect x="56.3257%" y="581" width="0.1503%" height="15" fill="rgb(224,93,4)" fg:x="81327" fg:w="217"/><text x="56.5757%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (212 samples, 0.15%)</title><rect x="56.3292%" y="565" width="0.1468%" height="15" fill="rgb(208,81,34)" fg:x="81332" fg:w="212"/><text x="56.5792%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (212 samples, 0.15%)</title><rect x="56.3292%" y="549" width="0.1468%" height="15" fill="rgb(233,92,54)" fg:x="81332" fg:w="212"/><text x="56.5792%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (212 samples, 0.15%)</title><rect x="56.3292%" y="533" width="0.1468%" height="15" fill="rgb(237,21,14)" fg:x="81332" fg:w="212"/><text x="56.5792%" y="543.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (59 samples, 0.04%)</title><rect x="56.4781%" y="549" width="0.0409%" height="15" fill="rgb(249,128,51)" fg:x="81547" fg:w="59"/><text x="56.7281%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="56.4864%" y="533" width="0.0326%" height="15" fill="rgb(223,129,24)" fg:x="81559" fg:w="47"/><text x="56.7364%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="56.4864%" y="517" width="0.0326%" height="15" fill="rgb(231,168,25)" fg:x="81559" fg:w="47"/><text x="56.7364%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.02%)</title><rect x="56.4968%" y="501" width="0.0222%" height="15" fill="rgb(224,39,20)" fg:x="81574" fg:w="32"/><text x="56.7468%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="56.4968%" y="485" width="0.0222%" height="15" fill="rgb(225,152,53)" fg:x="81574" fg:w="32"/><text x="56.7468%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="56.4968%" y="469" width="0.0222%" height="15" fill="rgb(252,17,24)" fg:x="81574" fg:w="32"/><text x="56.7468%" y="479.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.02%)</title><rect x="56.4968%" y="453" width="0.0222%" height="15" fill="rgb(250,114,30)" fg:x="81574" fg:w="32"/><text x="56.7468%" y="463.50"></text></g><g><title>__rg_alloc (32 samples, 0.02%)</title><rect x="56.4968%" y="437" width="0.0222%" height="15" fill="rgb(229,5,4)" fg:x="81574" fg:w="32"/><text x="56.7468%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.02%)</title><rect x="56.4968%" y="421" width="0.0222%" height="15" fill="rgb(225,176,49)" fg:x="81574" fg:w="32"/><text x="56.7468%" y="431.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="56.5002%" y="405" width="0.0187%" height="15" fill="rgb(224,221,49)" fg:x="81579" fg:w="27"/><text x="56.7502%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (335 samples, 0.23%)</title><rect x="56.5231%" y="485" width="0.2320%" height="15" fill="rgb(253,169,27)" fg:x="81612" fg:w="335"/><text x="56.7731%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (335 samples, 0.23%)</title><rect x="56.5231%" y="469" width="0.2320%" height="15" fill="rgb(211,206,16)" fg:x="81612" fg:w="335"/><text x="56.7731%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (352 samples, 0.24%)</title><rect x="56.5217%" y="501" width="0.2438%" height="15" fill="rgb(244,87,35)" fg:x="81610" fg:w="352"/><text x="56.7717%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (15 samples, 0.01%)</title><rect x="56.7551%" y="485" width="0.0104%" height="15" fill="rgb(246,28,10)" fg:x="81947" fg:w="15"/><text x="57.0051%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (419 samples, 0.29%)</title><rect x="56.4760%" y="629" width="0.2902%" height="15" fill="rgb(229,12,44)" fg:x="81544" fg:w="419"/><text x="56.7260%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (419 samples, 0.29%)</title><rect x="56.4760%" y="613" width="0.2902%" height="15" fill="rgb(210,145,37)" fg:x="81544" fg:w="419"/><text x="56.7260%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (417 samples, 0.29%)</title><rect x="56.4774%" y="597" width="0.2888%" height="15" fill="rgb(227,112,52)" fg:x="81546" fg:w="417"/><text x="56.7274%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (416 samples, 0.29%)</title><rect x="56.4781%" y="581" width="0.2881%" height="15" fill="rgb(238,155,34)" fg:x="81547" fg:w="416"/><text x="56.7281%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (416 samples, 0.29%)</title><rect x="56.4781%" y="565" width="0.2881%" height="15" fill="rgb(239,226,36)" fg:x="81547" fg:w="416"/><text x="56.7281%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (357 samples, 0.25%)</title><rect x="56.5189%" y="549" width="0.2473%" height="15" fill="rgb(230,16,23)" fg:x="81606" fg:w="357"/><text x="56.7689%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (353 samples, 0.24%)</title><rect x="56.5217%" y="533" width="0.2445%" height="15" fill="rgb(236,171,36)" fg:x="81610" fg:w="353"/><text x="56.7717%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (353 samples, 0.24%)</title><rect x="56.5217%" y="517" width="0.2445%" height="15" fill="rgb(221,22,14)" fg:x="81610" fg:w="353"/><text x="56.7717%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (126 samples, 0.09%)</title><rect x="56.7662%" y="629" width="0.0873%" height="15" fill="rgb(242,43,11)" fg:x="81963" fg:w="126"/><text x="57.0162%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.09%)</title><rect x="56.7662%" y="613" width="0.0873%" height="15" fill="rgb(232,69,23)" fg:x="81963" fg:w="126"/><text x="57.0162%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (126 samples, 0.09%)</title><rect x="56.7662%" y="597" width="0.0873%" height="15" fill="rgb(216,180,54)" fg:x="81963" fg:w="126"/><text x="57.0162%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (126 samples, 0.09%)</title><rect x="56.7662%" y="581" width="0.0873%" height="15" fill="rgb(216,5,24)" fg:x="81963" fg:w="126"/><text x="57.0162%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (126 samples, 0.09%)</title><rect x="56.7662%" y="565" width="0.0873%" height="15" fill="rgb(225,89,9)" fg:x="81963" fg:w="126"/><text x="57.0162%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (126 samples, 0.09%)</title><rect x="56.7662%" y="549" width="0.0873%" height="15" fill="rgb(243,75,33)" fg:x="81963" fg:w="126"/><text x="57.0162%" y="559.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.08%)</title><rect x="56.7731%" y="533" width="0.0803%" height="15" fill="rgb(247,141,45)" fg:x="81973" fg:w="116"/><text x="57.0231%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="57.1810%" y="613" width="0.0256%" height="15" fill="rgb(232,177,36)" fg:x="82562" fg:w="37"/><text x="57.4310%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.04%)</title><rect x="57.2067%" y="613" width="0.0402%" height="15" fill="rgb(219,125,36)" fg:x="82599" fg:w="58"/><text x="57.4567%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.03%)</title><rect x="57.2649%" y="565" width="0.0284%" height="15" fill="rgb(227,94,9)" fg:x="82683" fg:w="41"/><text x="57.5149%" y="575.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.03%)</title><rect x="57.2649%" y="549" width="0.0284%" height="15" fill="rgb(240,34,52)" fg:x="82683" fg:w="41"/><text x="57.5149%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (49 samples, 0.03%)</title><rect x="57.2607%" y="613" width="0.0339%" height="15" fill="rgb(216,45,12)" fg:x="82677" fg:w="49"/><text x="57.5107%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (49 samples, 0.03%)</title><rect x="57.2607%" y="597" width="0.0339%" height="15" fill="rgb(246,21,19)" fg:x="82677" fg:w="49"/><text x="57.5107%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (49 samples, 0.03%)</title><rect x="57.2607%" y="581" width="0.0339%" height="15" fill="rgb(213,98,42)" fg:x="82677" fg:w="49"/><text x="57.5107%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="58.0156%" y="597" width="0.0256%" height="15" fill="rgb(250,136,47)" fg:x="83767" fg:w="37"/><text x="58.2656%" y="607.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.09%)</title><rect x="58.0412%" y="597" width="0.0949%" height="15" fill="rgb(251,124,27)" fg:x="83804" fg:w="137"/><text x="58.2912%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (124 samples, 0.09%)</title><rect x="58.1361%" y="597" width="0.0859%" height="15" fill="rgb(229,180,14)" fg:x="83941" fg:w="124"/><text x="58.3861%" y="607.50"></text></g><g><title>itoa::write (124 samples, 0.09%)</title><rect x="58.1361%" y="581" width="0.0859%" height="15" fill="rgb(245,216,25)" fg:x="83941" fg:w="124"/><text x="58.3861%" y="591.50"></text></g><g><title>itoa::Buffer::format (124 samples, 0.09%)</title><rect x="58.1361%" y="565" width="0.0859%" height="15" fill="rgb(251,43,5)" fg:x="83941" fg:w="124"/><text x="58.3861%" y="575.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (124 samples, 0.09%)</title><rect x="58.1361%" y="549" width="0.0859%" height="15" fill="rgb(250,128,24)" fg:x="83941" fg:w="124"/><text x="58.3861%" y="559.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (124 samples, 0.09%)</title><rect x="58.1361%" y="533" width="0.0859%" height="15" fill="rgb(217,117,27)" fg:x="83941" fg:w="124"/><text x="58.3861%" y="543.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (18 samples, 0.01%)</title><rect x="58.2220%" y="565" width="0.0125%" height="15" fill="rgb(245,147,4)" fg:x="84065" fg:w="18"/><text x="58.4720%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (29 samples, 0.02%)</title><rect x="58.2629%" y="501" width="0.0201%" height="15" fill="rgb(242,201,35)" fg:x="84124" fg:w="29"/><text x="58.5129%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.02%)</title><rect x="58.2642%" y="485" width="0.0187%" height="15" fill="rgb(218,181,1)" fg:x="84126" fg:w="27"/><text x="58.5142%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (27 samples, 0.02%)</title><rect x="58.2642%" y="469" width="0.0187%" height="15" fill="rgb(222,6,29)" fg:x="84126" fg:w="27"/><text x="58.5142%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (103 samples, 0.07%)</title><rect x="58.2220%" y="581" width="0.0713%" height="15" fill="rgb(208,186,3)" fg:x="84065" fg:w="103"/><text x="58.4720%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (85 samples, 0.06%)</title><rect x="58.2345%" y="565" width="0.0589%" height="15" fill="rgb(216,36,26)" fg:x="84083" fg:w="85"/><text x="58.4845%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (85 samples, 0.06%)</title><rect x="58.2345%" y="549" width="0.0589%" height="15" fill="rgb(248,201,23)" fg:x="84083" fg:w="85"/><text x="58.4845%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (85 samples, 0.06%)</title><rect x="58.2345%" y="533" width="0.0589%" height="15" fill="rgb(251,170,31)" fg:x="84083" fg:w="85"/><text x="58.4845%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (85 samples, 0.06%)</title><rect x="58.2345%" y="517" width="0.0589%" height="15" fill="rgb(207,110,25)" fg:x="84083" fg:w="85"/><text x="58.4845%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="58.2829%" y="501" width="0.0104%" height="15" fill="rgb(250,54,15)" fg:x="84153" fg:w="15"/><text x="58.5329%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 0.07%)</title><rect x="58.3910%" y="565" width="0.0679%" height="15" fill="rgb(227,68,33)" fg:x="84309" fg:w="98"/><text x="58.6410%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 0.07%)</title><rect x="58.3910%" y="549" width="0.0679%" height="15" fill="rgb(238,34,41)" fg:x="84309" fg:w="98"/><text x="58.6410%" y="559.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (94 samples, 0.07%)</title><rect x="58.4589%" y="565" width="0.0651%" height="15" fill="rgb(220,11,15)" fg:x="84407" fg:w="94"/><text x="58.7089%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (94 samples, 0.07%)</title><rect x="58.4589%" y="549" width="0.0651%" height="15" fill="rgb(246,111,35)" fg:x="84407" fg:w="94"/><text x="58.7089%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (94 samples, 0.07%)</title><rect x="58.4589%" y="533" width="0.0651%" height="15" fill="rgb(209,88,53)" fg:x="84407" fg:w="94"/><text x="58.7089%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (94 samples, 0.07%)</title><rect x="58.4589%" y="517" width="0.0651%" height="15" fill="rgb(231,185,47)" fg:x="84407" fg:w="94"/><text x="58.7089%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (94 samples, 0.07%)</title><rect x="58.4589%" y="501" width="0.0651%" height="15" fill="rgb(233,154,1)" fg:x="84407" fg:w="94"/><text x="58.7089%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.05%)</title><rect x="58.4706%" y="485" width="0.0533%" height="15" fill="rgb(225,15,46)" fg:x="84424" fg:w="77"/><text x="58.7206%" y="495.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.05%)</title><rect x="58.4720%" y="469" width="0.0519%" height="15" fill="rgb(211,135,41)" fg:x="84426" fg:w="75"/><text x="58.7220%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (81 samples, 0.06%)</title><rect x="58.5344%" y="485" width="0.0561%" height="15" fill="rgb(208,54,0)" fg:x="84516" fg:w="81"/><text x="58.7844%" y="495.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.03%)</title><rect x="58.5579%" y="469" width="0.0326%" height="15" fill="rgb(244,136,14)" fg:x="84550" fg:w="47"/><text x="58.8079%" y="479.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,876 samples, 1.30%)</title><rect x="57.2946%" y="613" width="1.2993%" height="15" fill="rgb(241,56,14)" fg:x="82726" fg:w="1876"/><text x="57.5446%" y="623.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (537 samples, 0.37%)</title><rect x="58.2220%" y="597" width="0.3719%" height="15" fill="rgb(205,80,24)" fg:x="84065" fg:w="537"/><text x="58.4720%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (434 samples, 0.30%)</title><rect x="58.2933%" y="581" width="0.3006%" height="15" fill="rgb(220,57,4)" fg:x="84168" fg:w="434"/><text x="58.5433%" y="591.50"></text></g><g><title>value_trait::generator::write_str_simd (101 samples, 0.07%)</title><rect x="58.5240%" y="565" width="0.0700%" height="15" fill="rgb(226,193,50)" fg:x="84501" fg:w="101"/><text x="58.7740%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (89 samples, 0.06%)</title><rect x="58.5323%" y="549" width="0.0616%" height="15" fill="rgb(231,168,22)" fg:x="84513" fg:w="89"/><text x="58.7823%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (89 samples, 0.06%)</title><rect x="58.5323%" y="533" width="0.0616%" height="15" fill="rgb(254,215,14)" fg:x="84513" fg:w="89"/><text x="58.7823%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (89 samples, 0.06%)</title><rect x="58.5323%" y="517" width="0.0616%" height="15" fill="rgb(211,115,16)" fg:x="84513" fg:w="89"/><text x="58.7823%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (89 samples, 0.06%)</title><rect x="58.5323%" y="501" width="0.0616%" height="15" fill="rgb(236,210,16)" fg:x="84513" fg:w="89"/><text x="58.7823%" y="511.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (78 samples, 0.05%)</title><rect x="58.5939%" y="597" width="0.0540%" height="15" fill="rgb(221,94,12)" fg:x="84602" fg:w="78"/><text x="58.8439%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (36 samples, 0.02%)</title><rect x="58.6736%" y="533" width="0.0249%" height="15" fill="rgb(235,218,49)" fg:x="84717" fg:w="36"/><text x="58.9236%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (57 samples, 0.04%)</title><rect x="58.6985%" y="533" width="0.0395%" height="15" fill="rgb(217,114,14)" fg:x="84753" fg:w="57"/><text x="58.9485%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.01%)</title><rect x="58.7255%" y="517" width="0.0125%" height="15" fill="rgb(216,145,22)" fg:x="84792" fg:w="18"/><text x="58.9755%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.01%)</title><rect x="58.7255%" y="501" width="0.0125%" height="15" fill="rgb(217,112,39)" fg:x="84792" fg:w="18"/><text x="58.9755%" y="511.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (378 samples, 0.26%)</title><rect x="58.5939%" y="613" width="0.2618%" height="15" fill="rgb(225,85,32)" fg:x="84602" fg:w="378"/><text x="58.8439%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (300 samples, 0.21%)</title><rect x="58.6479%" y="597" width="0.2078%" height="15" fill="rgb(245,209,47)" fg:x="84680" fg:w="300"/><text x="58.8979%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (300 samples, 0.21%)</title><rect x="58.6479%" y="581" width="0.2078%" height="15" fill="rgb(218,220,15)" fg:x="84680" fg:w="300"/><text x="58.8979%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (300 samples, 0.21%)</title><rect x="58.6479%" y="565" width="0.2078%" height="15" fill="rgb(222,202,31)" fg:x="84680" fg:w="300"/><text x="58.8979%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (300 samples, 0.21%)</title><rect x="58.6479%" y="549" width="0.2078%" height="15" fill="rgb(243,203,4)" fg:x="84680" fg:w="300"/><text x="58.8979%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (170 samples, 0.12%)</title><rect x="58.7380%" y="533" width="0.1177%" height="15" fill="rgb(237,92,17)" fg:x="84810" fg:w="170"/><text x="58.9880%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (35 samples, 0.02%)</title><rect x="58.8557%" y="613" width="0.0242%" height="15" fill="rgb(231,119,7)" fg:x="84980" fg:w="35"/><text x="59.1057%" y="623.50"></text></g><g><title>itoa::write (34 samples, 0.02%)</title><rect x="58.8564%" y="597" width="0.0235%" height="15" fill="rgb(237,82,41)" fg:x="84981" fg:w="34"/><text x="59.1064%" y="607.50"></text></g><g><title>itoa::Buffer::format (34 samples, 0.02%)</title><rect x="58.8564%" y="581" width="0.0235%" height="15" fill="rgb(226,81,48)" fg:x="84981" fg:w="34"/><text x="59.1064%" y="591.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (34 samples, 0.02%)</title><rect x="58.8564%" y="565" width="0.0235%" height="15" fill="rgb(234,70,51)" fg:x="84981" fg:w="34"/><text x="59.1064%" y="575.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (34 samples, 0.02%)</title><rect x="58.8564%" y="549" width="0.0235%" height="15" fill="rgb(251,86,4)" fg:x="84981" fg:w="34"/><text x="59.1064%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="58.8633%" y="533" width="0.0166%" height="15" fill="rgb(244,144,28)" fg:x="84991" fg:w="24"/><text x="59.1133%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (76 samples, 0.05%)</title><rect x="58.9319%" y="517" width="0.0526%" height="15" fill="rgb(232,161,39)" fg:x="85090" fg:w="76"/><text x="59.1819%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (59 samples, 0.04%)</title><rect x="58.9437%" y="501" width="0.0409%" height="15" fill="rgb(247,34,51)" fg:x="85107" fg:w="59"/><text x="59.1937%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (59 samples, 0.04%)</title><rect x="58.9437%" y="485" width="0.0409%" height="15" fill="rgb(225,132,2)" fg:x="85107" fg:w="59"/><text x="59.1937%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (186 samples, 0.13%)</title><rect x="58.8800%" y="597" width="0.1288%" height="15" fill="rgb(209,159,44)" fg:x="85015" fg:w="186"/><text x="59.1300%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (186 samples, 0.13%)</title><rect x="58.8800%" y="581" width="0.1288%" height="15" fill="rgb(251,214,1)" fg:x="85015" fg:w="186"/><text x="59.1300%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (186 samples, 0.13%)</title><rect x="58.8800%" y="565" width="0.1288%" height="15" fill="rgb(247,84,47)" fg:x="85015" fg:w="186"/><text x="59.1300%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (186 samples, 0.13%)</title><rect x="58.8800%" y="549" width="0.1288%" height="15" fill="rgb(240,111,43)" fg:x="85015" fg:w="186"/><text x="59.1300%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (186 samples, 0.13%)</title><rect x="58.8800%" y="533" width="0.1288%" height="15" fill="rgb(215,214,35)" fg:x="85015" fg:w="186"/><text x="59.1300%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.02%)</title><rect x="58.9845%" y="517" width="0.0242%" height="15" fill="rgb(248,207,23)" fg:x="85166" fg:w="35"/><text x="59.2345%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 0.13%)</title><rect x="59.3260%" y="581" width="0.1344%" height="15" fill="rgb(214,186,4)" fg:x="85659" fg:w="194"/><text x="59.5760%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 0.13%)</title><rect x="59.3260%" y="565" width="0.1344%" height="15" fill="rgb(220,133,22)" fg:x="85659" fg:w="194"/><text x="59.5760%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (41 samples, 0.03%)</title><rect x="59.4887%" y="501" width="0.0284%" height="15" fill="rgb(239,134,19)" fg:x="85894" fg:w="41"/><text x="59.7387%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (41 samples, 0.03%)</title><rect x="59.4887%" y="485" width="0.0284%" height="15" fill="rgb(250,140,9)" fg:x="85894" fg:w="41"/><text x="59.7387%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (41 samples, 0.03%)</title><rect x="59.4887%" y="469" width="0.0284%" height="15" fill="rgb(225,59,14)" fg:x="85894" fg:w="41"/><text x="59.7387%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (180 samples, 0.12%)</title><rect x="59.5171%" y="501" width="0.1247%" height="15" fill="rgb(214,152,51)" fg:x="85935" fg:w="180"/><text x="59.7671%" y="511.50"></text></g><g><title>[libc-2.31.so] (175 samples, 0.12%)</title><rect x="59.5206%" y="485" width="0.1212%" height="15" fill="rgb(251,227,43)" fg:x="85940" fg:w="175"/><text x="59.7706%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (267 samples, 0.18%)</title><rect x="59.4603%" y="581" width="0.1849%" height="15" fill="rgb(241,96,17)" fg:x="85853" fg:w="267"/><text x="59.7103%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (267 samples, 0.18%)</title><rect x="59.4603%" y="565" width="0.1849%" height="15" fill="rgb(234,198,43)" fg:x="85853" fg:w="267"/><text x="59.7103%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (267 samples, 0.18%)</title><rect x="59.4603%" y="549" width="0.1849%" height="15" fill="rgb(220,108,29)" fg:x="85853" fg:w="267"/><text x="59.7103%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (267 samples, 0.18%)</title><rect x="59.4603%" y="533" width="0.1849%" height="15" fill="rgb(226,163,33)" fg:x="85853" fg:w="267"/><text x="59.7103%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (267 samples, 0.18%)</title><rect x="59.4603%" y="517" width="0.1849%" height="15" fill="rgb(205,194,45)" fg:x="85853" fg:w="267"/><text x="59.7103%" y="527.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (87 samples, 0.06%)</title><rect x="59.7000%" y="565" width="0.0603%" height="15" fill="rgb(206,143,44)" fg:x="86199" fg:w="87"/><text x="59.9500%" y="575.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (15 samples, 0.01%)</title><rect x="59.7602%" y="565" width="0.0104%" height="15" fill="rgb(236,136,36)" fg:x="86286" fg:w="15"/><text x="60.0102%" y="575.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (26 samples, 0.02%)</title><rect x="59.7706%" y="565" width="0.0180%" height="15" fill="rgb(249,172,42)" fg:x="86301" fg:w="26"/><text x="60.0206%" y="575.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (79 samples, 0.05%)</title><rect x="59.7886%" y="565" width="0.0547%" height="15" fill="rgb(216,139,23)" fg:x="86327" fg:w="79"/><text x="60.0386%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (79 samples, 0.05%)</title><rect x="59.7886%" y="549" width="0.0547%" height="15" fill="rgb(207,166,20)" fg:x="86327" fg:w="79"/><text x="60.0386%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (264 samples, 0.18%)</title><rect x="59.8697%" y="501" width="0.1828%" height="15" fill="rgb(210,209,22)" fg:x="86444" fg:w="264"/><text x="60.1197%" y="511.50"></text></g><g><title>[libc-2.31.so] (198 samples, 0.14%)</title><rect x="59.9154%" y="485" width="0.1371%" height="15" fill="rgb(232,118,20)" fg:x="86510" fg:w="198"/><text x="60.1654%" y="495.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (4,629 samples, 3.21%)</title><rect x="56.8535%" y="629" width="3.2060%" height="15" fill="rgb(238,113,42)" fg:x="82089" fg:w="4629"/><text x="57.1035%" y="639.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,703 samples, 1.18%)</title><rect x="58.8800%" y="613" width="1.1795%" height="15" fill="rgb(231,42,5)" fg:x="85015" fg:w="1703"/><text x="59.1300%" y="623.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,517 samples, 1.05%)</title><rect x="59.0088%" y="597" width="1.0506%" height="15" fill="rgb(243,166,24)" fg:x="85201" fg:w="1517"/><text x="59.2588%" y="607.50"></text></g><g><title>value_trait::generator::write_str_simd (598 samples, 0.41%)</title><rect x="59.6453%" y="581" width="0.4142%" height="15" fill="rgb(237,226,12)" fg:x="86120" fg:w="598"/><text x="59.8953%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (305 samples, 0.21%)</title><rect x="59.8482%" y="565" width="0.2112%" height="15" fill="rgb(229,133,24)" fg:x="86413" fg:w="305"/><text x="60.0982%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (305 samples, 0.21%)</title><rect x="59.8482%" y="549" width="0.2112%" height="15" fill="rgb(238,33,43)" fg:x="86413" fg:w="305"/><text x="60.0982%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (305 samples, 0.21%)</title><rect x="59.8482%" y="533" width="0.2112%" height="15" fill="rgb(227,59,38)" fg:x="86413" fg:w="305"/><text x="60.0982%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (305 samples, 0.21%)</title><rect x="59.8482%" y="517" width="0.2112%" height="15" fill="rgb(230,97,0)" fg:x="86413" fg:w="305"/><text x="60.0982%" y="527.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (15 samples, 0.01%)</title><rect x="60.0594%" y="613" width="0.0104%" height="15" fill="rgb(250,173,50)" fg:x="86718" fg:w="15"/><text x="60.3094%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (138 samples, 0.10%)</title><rect x="60.1190%" y="549" width="0.0956%" height="15" fill="rgb(240,15,50)" fg:x="86804" fg:w="138"/><text x="60.3690%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (87 samples, 0.06%)</title><rect x="60.1543%" y="533" width="0.0603%" height="15" fill="rgb(221,93,22)" fg:x="86855" fg:w="87"/><text x="60.4043%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (77 samples, 0.05%)</title><rect x="60.1612%" y="517" width="0.0533%" height="15" fill="rgb(245,180,53)" fg:x="86865" fg:w="77"/><text x="60.4112%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (60 samples, 0.04%)</title><rect x="60.1730%" y="501" width="0.0416%" height="15" fill="rgb(231,88,51)" fg:x="86882" fg:w="60"/><text x="60.4230%" y="511.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (349 samples, 0.24%)</title><rect x="60.0594%" y="629" width="0.2417%" height="15" fill="rgb(240,58,21)" fg:x="86718" fg:w="349"/><text x="60.3094%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (334 samples, 0.23%)</title><rect x="60.0698%" y="613" width="0.2313%" height="15" fill="rgb(237,21,10)" fg:x="86733" fg:w="334"/><text x="60.3198%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (334 samples, 0.23%)</title><rect x="60.0698%" y="597" width="0.2313%" height="15" fill="rgb(218,43,11)" fg:x="86733" fg:w="334"/><text x="60.3198%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (334 samples, 0.23%)</title><rect x="60.0698%" y="581" width="0.2313%" height="15" fill="rgb(218,221,29)" fg:x="86733" fg:w="334"/><text x="60.3198%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (334 samples, 0.23%)</title><rect x="60.0698%" y="565" width="0.2313%" height="15" fill="rgb(214,118,42)" fg:x="86733" fg:w="334"/><text x="60.3198%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (125 samples, 0.09%)</title><rect x="60.2146%" y="549" width="0.0866%" height="15" fill="rgb(251,200,26)" fg:x="86942" fg:w="125"/><text x="60.4646%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (317 samples, 0.22%)</title><rect x="61.6482%" y="613" width="0.2195%" height="15" fill="rgb(237,101,39)" fg:x="89012" fg:w="317"/><text x="61.8982%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (317 samples, 0.22%)</title><rect x="61.6482%" y="597" width="0.2195%" height="15" fill="rgb(251,117,11)" fg:x="89012" fg:w="317"/><text x="61.8982%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (59 samples, 0.04%)</title><rect x="61.8844%" y="533" width="0.0409%" height="15" fill="rgb(216,223,23)" fg:x="89353" fg:w="59"/><text x="62.1344%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="61.9086%" y="517" width="0.0166%" height="15" fill="rgb(251,54,12)" fg:x="89388" fg:w="24"/><text x="62.1586%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.01%)</title><rect x="61.9128%" y="501" width="0.0125%" height="15" fill="rgb(254,176,54)" fg:x="89394" fg:w="18"/><text x="62.1628%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (224 samples, 0.16%)</title><rect x="61.9252%" y="533" width="0.1551%" height="15" fill="rgb(210,32,8)" fg:x="89412" fg:w="224"/><text x="62.1752%" y="543.50"></text></g><g><title>[libc-2.31.so] (221 samples, 0.15%)</title><rect x="61.9273%" y="517" width="0.1531%" height="15" fill="rgb(235,52,38)" fg:x="89415" fg:w="221"/><text x="62.1773%" y="527.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (10,379 samples, 7.19%)</title><rect x="54.9232%" y="693" width="7.1883%" height="15" fill="rgb(231,4,44)" fg:x="79302" fg:w="10379"/><text x="55.1732%" y="703.50">&lt;tremor_ru..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (10,377 samples, 7.19%)</title><rect x="54.9246%" y="677" width="7.1869%" height="15" fill="rgb(249,2,32)" fg:x="79304" fg:w="10377"/><text x="55.1746%" y="687.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (10,374 samples, 7.18%)</title><rect x="54.9267%" y="661" width="7.1849%" height="15" fill="rgb(224,65,26)" fg:x="79307" fg:w="10374"/><text x="55.1767%" y="671.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (10,331 samples, 7.16%)</title><rect x="54.9565%" y="645" width="7.1551%" height="15" fill="rgb(250,73,40)" fg:x="79350" fg:w="10331"/><text x="55.2065%" y="655.50">tremor_val..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,614 samples, 1.81%)</title><rect x="60.3011%" y="629" width="1.8104%" height="15" fill="rgb(253,177,16)" fg:x="87067" fg:w="2614"/><text x="60.5511%" y="639.50">v..</text></g><g><title>value_trait::generator::BaseGenerator::write (352 samples, 0.24%)</title><rect x="61.8678%" y="613" width="0.2438%" height="15" fill="rgb(217,32,34)" fg:x="89329" fg:w="352"/><text x="62.1178%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (351 samples, 0.24%)</title><rect x="61.8685%" y="597" width="0.2431%" height="15" fill="rgb(212,7,10)" fg:x="89330" fg:w="351"/><text x="62.1185%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (351 samples, 0.24%)</title><rect x="61.8685%" y="581" width="0.2431%" height="15" fill="rgb(245,89,8)" fg:x="89330" fg:w="351"/><text x="62.1185%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (351 samples, 0.24%)</title><rect x="61.8685%" y="565" width="0.2431%" height="15" fill="rgb(237,16,53)" fg:x="89330" fg:w="351"/><text x="62.1185%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (351 samples, 0.24%)</title><rect x="61.8685%" y="549" width="0.2431%" height="15" fill="rgb(250,204,30)" fg:x="89330" fg:w="351"/><text x="62.1185%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (45 samples, 0.03%)</title><rect x="62.0804%" y="533" width="0.0312%" height="15" fill="rgb(208,77,27)" fg:x="89636" fg:w="45"/><text x="62.3304%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (45 samples, 0.03%)</title><rect x="62.0804%" y="517" width="0.0312%" height="15" fill="rgb(250,204,28)" fg:x="89636" fg:w="45"/><text x="62.3304%" y="527.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (10,480 samples, 7.26%)</title><rect x="54.9142%" y="709" width="7.2583%" height="15" fill="rgb(244,63,21)" fg:x="79289" fg:w="10480"/><text x="55.1642%" y="719.50">&lt;tremor_ru..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (88 samples, 0.06%)</title><rect x="62.1115%" y="693" width="0.0609%" height="15" fill="rgb(236,85,44)" fg:x="89681" fg:w="88"/><text x="62.3615%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (88 samples, 0.06%)</title><rect x="62.1115%" y="677" width="0.0609%" height="15" fill="rgb(215,98,4)" fg:x="89681" fg:w="88"/><text x="62.3615%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84 samples, 0.06%)</title><rect x="62.1143%" y="661" width="0.0582%" height="15" fill="rgb(235,38,11)" fg:x="89685" fg:w="84"/><text x="62.3643%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (84 samples, 0.06%)</title><rect x="62.1143%" y="645" width="0.0582%" height="15" fill="rgb(254,186,25)" fg:x="89685" fg:w="84"/><text x="62.3643%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.06%)</title><rect x="62.1143%" y="629" width="0.0582%" height="15" fill="rgb(225,55,31)" fg:x="89685" fg:w="84"/><text x="62.3643%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.06%)</title><rect x="62.1143%" y="613" width="0.0582%" height="15" fill="rgb(211,15,21)" fg:x="89685" fg:w="84"/><text x="62.3643%" y="623.50"></text></g><g><title>alloc::alloc::alloc (78 samples, 0.05%)</title><rect x="62.1185%" y="597" width="0.0540%" height="15" fill="rgb(215,187,41)" fg:x="89691" fg:w="78"/><text x="62.3685%" y="607.50"></text></g><g><title>__rg_alloc (78 samples, 0.05%)</title><rect x="62.1185%" y="581" width="0.0540%" height="15" fill="rgb(248,69,32)" fg:x="89691" fg:w="78"/><text x="62.3685%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (78 samples, 0.05%)</title><rect x="62.1185%" y="565" width="0.0540%" height="15" fill="rgb(252,102,52)" fg:x="89691" fg:w="78"/><text x="62.3685%" y="575.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.05%)</title><rect x="62.1185%" y="549" width="0.0540%" height="15" fill="rgb(253,140,32)" fg:x="89691" fg:w="78"/><text x="62.3685%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (21 samples, 0.01%)</title><rect x="62.1580%" y="533" width="0.0145%" height="15" fill="rgb(216,56,42)" fg:x="89748" fg:w="21"/><text x="62.4080%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="62.1912%" y="693" width="0.0194%" height="15" fill="rgb(216,184,14)" fg:x="89796" fg:w="28"/><text x="62.4412%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="62.1912%" y="677" width="0.0194%" height="15" fill="rgb(237,187,27)" fg:x="89796" fg:w="28"/><text x="62.4412%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="62.1912%" y="661" width="0.0194%" height="15" fill="rgb(219,65,3)" fg:x="89796" fg:w="28"/><text x="62.4412%" y="671.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="62.1988%" y="645" width="0.0118%" height="15" fill="rgb(245,83,25)" fg:x="89807" fg:w="17"/><text x="62.4488%" y="655.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="62.1988%" y="629" width="0.0118%" height="15" fill="rgb(214,205,45)" fg:x="89807" fg:w="17"/><text x="62.4488%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="62.1988%" y="613" width="0.0118%" height="15" fill="rgb(241,20,18)" fg:x="89807" fg:w="17"/><text x="62.4488%" y="623.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="62.1988%" y="597" width="0.0118%" height="15" fill="rgb(232,163,23)" fg:x="89807" fg:w="17"/><text x="62.4488%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22 samples, 0.02%)</title><rect x="62.2300%" y="677" width="0.0152%" height="15" fill="rgb(214,5,46)" fg:x="89852" fg:w="22"/><text x="62.4800%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (79 samples, 0.05%)</title><rect x="62.2542%" y="661" width="0.0547%" height="15" fill="rgb(229,78,17)" fg:x="89887" fg:w="79"/><text x="62.5042%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (22 samples, 0.02%)</title><rect x="62.3249%" y="629" width="0.0152%" height="15" fill="rgb(248,89,10)" fg:x="89989" fg:w="22"/><text x="62.5749%" y="639.50"></text></g><g><title>core::cmp::PartialOrd::ge (22 samples, 0.02%)</title><rect x="62.3249%" y="613" width="0.0152%" height="15" fill="rgb(248,54,15)" fg:x="89989" fg:w="22"/><text x="62.5749%" y="623.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (22 samples, 0.02%)</title><rect x="62.3249%" y="597" width="0.0152%" height="15" fill="rgb(223,116,6)" fg:x="89989" fg:w="22"/><text x="62.5749%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (138 samples, 0.10%)</title><rect x="62.2542%" y="677" width="0.0956%" height="15" fill="rgb(205,125,38)" fg:x="89887" fg:w="138"/><text x="62.5042%" y="687.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (59 samples, 0.04%)</title><rect x="62.3089%" y="661" width="0.0409%" height="15" fill="rgb(251,78,38)" fg:x="89966" fg:w="59"/><text x="62.5589%" y="671.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (59 samples, 0.04%)</title><rect x="62.3089%" y="645" width="0.0409%" height="15" fill="rgb(253,78,28)" fg:x="89966" fg:w="59"/><text x="62.5589%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (14,642 samples, 10.14%)</title><rect x="52.4341%" y="1077" width="10.1408%" height="15" fill="rgb(209,120,3)" fg:x="75708" fg:w="14642"/><text x="52.6841%" y="1087.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,061 samples, 7.66%)</title><rect x="54.9142%" y="1061" width="7.6607%" height="15" fill="rgb(238,229,9)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="1071.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (11,061 samples, 7.66%)</title><rect x="54.9142%" y="1045" width="7.6607%" height="15" fill="rgb(253,159,18)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="1055.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,061 samples, 7.66%)</title><rect x="54.9142%" y="1029" width="7.6607%" height="15" fill="rgb(244,42,34)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="1039.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,061 samples, 7.66%)</title><rect x="54.9142%" y="1013" width="7.6607%" height="15" fill="rgb(224,8,7)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="1023.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (11,061 samples, 7.66%)</title><rect x="54.9142%" y="997" width="7.6607%" height="15" fill="rgb(210,201,45)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="1007.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (11,061 samples, 7.66%)</title><rect x="54.9142%" y="981" width="7.6607%" height="15" fill="rgb(252,185,21)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="991.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (11,061 samples, 7.66%)</title><rect x="54.9142%" y="965" width="7.6607%" height="15" fill="rgb(223,131,1)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="975.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (11,061 samples, 7.66%)</title><rect x="54.9142%" y="949" width="7.6607%" height="15" fill="rgb(245,141,16)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="959.50">std::panic..</text></g><g><title>std::panicking::try (11,061 samples, 7.66%)</title><rect x="54.9142%" y="933" width="7.6607%" height="15" fill="rgb(229,55,45)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="943.50">std::panic..</text></g><g><title>std::panicking::try::do_call (11,061 samples, 7.66%)</title><rect x="54.9142%" y="917" width="7.6607%" height="15" fill="rgb(208,92,15)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="927.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,061 samples, 7.66%)</title><rect x="54.9142%" y="901" width="7.6607%" height="15" fill="rgb(234,185,47)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="911.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (11,061 samples, 7.66%)</title><rect x="54.9142%" y="885" width="7.6607%" height="15" fill="rgb(253,104,50)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="895.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (11,061 samples, 7.66%)</title><rect x="54.9142%" y="869" width="7.6607%" height="15" fill="rgb(205,70,7)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="879.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (11,061 samples, 7.66%)</title><rect x="54.9142%" y="853" width="7.6607%" height="15" fill="rgb(240,178,43)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="863.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (11,061 samples, 7.66%)</title><rect x="54.9142%" y="837" width="7.6607%" height="15" fill="rgb(214,112,2)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="847.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,061 samples, 7.66%)</title><rect x="54.9142%" y="821" width="7.6607%" height="15" fill="rgb(206,46,17)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="831.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (11,061 samples, 7.66%)</title><rect x="54.9142%" y="805" width="7.6607%" height="15" fill="rgb(225,220,16)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="815.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (11,061 samples, 7.66%)</title><rect x="54.9142%" y="789" width="7.6607%" height="15" fill="rgb(238,65,40)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="799.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (11,061 samples, 7.66%)</title><rect x="54.9142%" y="773" width="7.6607%" height="15" fill="rgb(230,151,21)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="783.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (11,061 samples, 7.66%)</title><rect x="54.9142%" y="757" width="7.6607%" height="15" fill="rgb(218,58,49)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="767.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (11,061 samples, 7.66%)</title><rect x="54.9142%" y="741" width="7.6607%" height="15" fill="rgb(219,179,14)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="751.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (11,061 samples, 7.66%)</title><rect x="54.9142%" y="725" width="7.6607%" height="15" fill="rgb(223,72,1)" fg:x="79289" fg:w="11061"/><text x="55.1642%" y="735.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (581 samples, 0.40%)</title><rect x="62.1725%" y="709" width="0.4024%" height="15" fill="rgb(238,126,10)" fg:x="89769" fg:w="581"/><text x="62.4225%" y="719.50"></text></g><g><title>tremor_common::time::nanotime (509 samples, 0.35%)</title><rect x="62.2224%" y="693" width="0.3525%" height="15" fill="rgb(224,206,38)" fg:x="89841" fg:w="509"/><text x="62.4724%" y="703.50"></text></g><g><title>std::time::SystemTime::now (325 samples, 0.23%)</title><rect x="62.3498%" y="677" width="0.2251%" height="15" fill="rgb(212,201,54)" fg:x="90025" fg:w="325"/><text x="62.5998%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (325 samples, 0.23%)</title><rect x="62.3498%" y="661" width="0.2251%" height="15" fill="rgb(218,154,48)" fg:x="90025" fg:w="325"/><text x="62.5998%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (325 samples, 0.23%)</title><rect x="62.3498%" y="645" width="0.2251%" height="15" fill="rgb(232,93,24)" fg:x="90025" fg:w="325"/><text x="62.5998%" y="655.50"></text></g><g><title>__clock_gettime (271 samples, 0.19%)</title><rect x="62.3872%" y="629" width="0.1877%" height="15" fill="rgb(245,30,21)" fg:x="90079" fg:w="271"/><text x="62.6372%" y="639.50"></text></g><g><title>__vdso_clock_gettime (249 samples, 0.17%)</title><rect x="62.4024%" y="613" width="0.1725%" height="15" fill="rgb(242,148,29)" fg:x="90101" fg:w="249"/><text x="62.6524%" y="623.50"></text></g><g><title>[[vdso]] (225 samples, 0.16%)</title><rect x="62.4191%" y="597" width="0.1558%" height="15" fill="rgb(244,153,54)" fg:x="90125" fg:w="225"/><text x="62.6691%" y="607.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.08%)</title><rect x="62.7875%" y="725" width="0.0790%" height="15" fill="rgb(252,87,22)" fg:x="90657" fg:w="114"/><text x="63.0375%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (489 samples, 0.34%)</title><rect x="62.8741%" y="725" width="0.3387%" height="15" fill="rgb(210,51,29)" fg:x="90782" fg:w="489"/><text x="63.1241%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="63.2128%" y="725" width="0.0159%" height="15" fill="rgb(242,136,47)" fg:x="91271" fg:w="23"/><text x="63.4628%" y="735.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (918 samples, 0.64%)</title><rect x="62.5957%" y="917" width="0.6358%" height="15" fill="rgb(238,68,4)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (918 samples, 0.64%)</title><rect x="62.5957%" y="901" width="0.6358%" height="15" fill="rgb(242,161,30)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (918 samples, 0.64%)</title><rect x="62.5957%" y="885" width="0.6358%" height="15" fill="rgb(218,58,44)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (918 samples, 0.64%)</title><rect x="62.5957%" y="869" width="0.6358%" height="15" fill="rgb(252,125,32)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (918 samples, 0.64%)</title><rect x="62.5957%" y="853" width="0.6358%" height="15" fill="rgb(219,178,0)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (918 samples, 0.64%)</title><rect x="62.5957%" y="837" width="0.6358%" height="15" fill="rgb(213,152,7)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (918 samples, 0.64%)</title><rect x="62.5957%" y="821" width="0.6358%" height="15" fill="rgb(249,109,34)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="831.50"></text></g><g><title>alloc::alloc::Global::grow_impl (918 samples, 0.64%)</title><rect x="62.5957%" y="805" width="0.6358%" height="15" fill="rgb(232,96,21)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="815.50"></text></g><g><title>alloc::alloc::realloc (918 samples, 0.64%)</title><rect x="62.5957%" y="789" width="0.6358%" height="15" fill="rgb(228,27,39)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="799.50"></text></g><g><title>__rg_realloc (918 samples, 0.64%)</title><rect x="62.5957%" y="773" width="0.6358%" height="15" fill="rgb(211,182,52)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (918 samples, 0.64%)</title><rect x="62.5957%" y="757" width="0.6358%" height="15" fill="rgb(234,178,38)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="767.50"></text></g><g><title>sn_rust_realloc (918 samples, 0.64%)</title><rect x="62.5957%" y="741" width="0.6358%" height="15" fill="rgb(221,111,3)" fg:x="90380" fg:w="918"/><text x="62.8457%" y="751.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (927 samples, 0.64%)</title><rect x="62.5957%" y="933" width="0.6420%" height="15" fill="rgb(228,175,21)" fg:x="90380" fg:w="927"/><text x="62.8457%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (180 samples, 0.12%)</title><rect x="64.6339%" y="917" width="0.1247%" height="15" fill="rgb(228,174,43)" fg:x="93323" fg:w="180"/><text x="64.8839%" y="927.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,916 samples, 1.33%)</title><rect x="65.0315%" y="757" width="1.3270%" height="15" fill="rgb(211,191,0)" fg:x="93897" fg:w="1916"/><text x="65.2815%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (26 samples, 0.02%)</title><rect x="66.3405%" y="741" width="0.0180%" height="15" fill="rgb(253,117,3)" fg:x="95787" fg:w="26"/><text x="66.5905%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (20 samples, 0.01%)</title><rect x="66.3446%" y="725" width="0.0139%" height="15" fill="rgb(241,127,19)" fg:x="95793" fg:w="20"/><text x="66.5946%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,377 samples, 1.65%)</title><rect x="64.7759%" y="853" width="1.6463%" height="15" fill="rgb(218,103,12)" fg:x="93528" fg:w="2377"/><text x="65.0259%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,377 samples, 1.65%)</title><rect x="64.7759%" y="837" width="1.6463%" height="15" fill="rgb(236,214,43)" fg:x="93528" fg:w="2377"/><text x="65.0259%" y="847.50"></text></g><g><title>alloc::alloc::alloc (2,369 samples, 1.64%)</title><rect x="64.7815%" y="821" width="1.6407%" height="15" fill="rgb(244,144,19)" fg:x="93536" fg:w="2369"/><text x="65.0315%" y="831.50"></text></g><g><title>__rg_alloc (2,369 samples, 1.64%)</title><rect x="64.7815%" y="805" width="1.6407%" height="15" fill="rgb(246,188,10)" fg:x="93536" fg:w="2369"/><text x="65.0315%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2,369 samples, 1.64%)</title><rect x="64.7815%" y="789" width="1.6407%" height="15" fill="rgb(212,193,33)" fg:x="93536" fg:w="2369"/><text x="65.0315%" y="799.50"></text></g><g><title>sn_rust_alloc (2,363 samples, 1.64%)</title><rect x="64.7856%" y="773" width="1.6366%" height="15" fill="rgb(241,51,29)" fg:x="93542" fg:w="2363"/><text x="65.0356%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (92 samples, 0.06%)</title><rect x="66.3585%" y="757" width="0.0637%" height="15" fill="rgb(211,58,19)" fg:x="95813" fg:w="92"/><text x="66.6085%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,409 samples, 1.67%)</title><rect x="64.7593%" y="917" width="1.6684%" height="15" fill="rgb(229,111,26)" fg:x="93504" fg:w="2409"/><text x="65.0093%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,409 samples, 1.67%)</title><rect x="64.7593%" y="901" width="1.6684%" height="15" fill="rgb(213,115,40)" fg:x="93504" fg:w="2409"/><text x="65.0093%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,400 samples, 1.66%)</title><rect x="64.7655%" y="885" width="1.6622%" height="15" fill="rgb(209,56,44)" fg:x="93513" fg:w="2400"/><text x="65.0155%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,400 samples, 1.66%)</title><rect x="64.7655%" y="869" width="1.6622%" height="15" fill="rgb(230,108,32)" fg:x="93513" fg:w="2400"/><text x="65.0155%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (184 samples, 0.13%)</title><rect x="66.4312%" y="869" width="0.1274%" height="15" fill="rgb(216,165,31)" fg:x="95918" fg:w="184"/><text x="66.6812%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (184 samples, 0.13%)</title><rect x="66.4312%" y="853" width="0.1274%" height="15" fill="rgb(218,122,21)" fg:x="95918" fg:w="184"/><text x="66.6812%" y="863.50"></text></g><g><title>__rg_dealloc (184 samples, 0.13%)</title><rect x="66.4312%" y="837" width="0.1274%" height="15" fill="rgb(223,224,47)" fg:x="95918" fg:w="184"/><text x="66.6812%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (184 samples, 0.13%)</title><rect x="66.4312%" y="821" width="0.1274%" height="15" fill="rgb(238,102,44)" fg:x="95918" fg:w="184"/><text x="66.6812%" y="831.50"></text></g><g><title>sn_rust_dealloc (181 samples, 0.13%)</title><rect x="66.4333%" y="805" width="0.1254%" height="15" fill="rgb(236,46,40)" fg:x="95921" fg:w="181"/><text x="66.6833%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (192 samples, 0.13%)</title><rect x="66.4277%" y="917" width="0.1330%" height="15" fill="rgb(247,202,50)" fg:x="95913" fg:w="192"/><text x="66.6777%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (192 samples, 0.13%)</title><rect x="66.4277%" y="901" width="0.1330%" height="15" fill="rgb(209,99,20)" fg:x="95913" fg:w="192"/><text x="66.6777%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (192 samples, 0.13%)</title><rect x="66.4277%" y="885" width="0.1330%" height="15" fill="rgb(252,27,34)" fg:x="95913" fg:w="192"/><text x="66.6777%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,172 samples, 0.81%)</title><rect x="66.5607%" y="917" width="0.8117%" height="15" fill="rgb(215,206,23)" fg:x="96105" fg:w="1172"/><text x="66.8107%" y="927.50"></text></g><g><title>core::ptr::write (1,172 samples, 0.81%)</title><rect x="66.5607%" y="901" width="0.8117%" height="15" fill="rgb(212,135,36)" fg:x="96105" fg:w="1172"/><text x="66.8107%" y="911.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (503 samples, 0.35%)</title><rect x="67.5823%" y="901" width="0.3484%" height="15" fill="rgb(240,189,1)" fg:x="97580" fg:w="503"/><text x="67.8323%" y="911.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (173 samples, 0.12%)</title><rect x="67.9306%" y="901" width="0.1198%" height="15" fill="rgb(242,56,20)" fg:x="98083" fg:w="173"/><text x="68.1806%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (173 samples, 0.12%)</title><rect x="67.9306%" y="885" width="0.1198%" height="15" fill="rgb(247,132,33)" fg:x="98083" fg:w="173"/><text x="68.1806%" y="895.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (140 samples, 0.10%)</title><rect x="68.0504%" y="901" width="0.0970%" height="15" fill="rgb(208,149,11)" fg:x="98256" fg:w="140"/><text x="68.3004%" y="911.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (1,313 samples, 0.91%)</title><rect x="67.3724%" y="917" width="0.9094%" height="15" fill="rgb(211,33,11)" fg:x="97277" fg:w="1313"/><text x="67.6224%" y="927.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (194 samples, 0.13%)</title><rect x="68.1474%" y="901" width="0.1344%" height="15" fill="rgb(221,29,38)" fg:x="98396" fg:w="194"/><text x="68.3974%" y="911.50"></text></g><g><title>simd_json::numberparse::is_integer (21 samples, 0.01%)</title><rect x="68.8268%" y="901" width="0.0145%" height="15" fill="rgb(206,182,49)" fg:x="99377" fg:w="21"/><text x="69.0768%" y="911.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (21 samples, 0.01%)</title><rect x="68.8268%" y="885" width="0.0145%" height="15" fill="rgb(216,140,1)" fg:x="99377" fg:w="21"/><text x="69.0768%" y="895.50"></text></g><g><title>core::ops::range::RangeBounds::contains (21 samples, 0.01%)</title><rect x="68.8268%" y="869" width="0.0145%" height="15" fill="rgb(232,57,40)" fg:x="99377" fg:w="21"/><text x="69.0768%" y="879.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (900 samples, 0.62%)</title><rect x="68.2818%" y="917" width="0.6233%" height="15" fill="rgb(224,186,18)" fg:x="98590" fg:w="900"/><text x="68.5318%" y="927.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (92 samples, 0.06%)</title><rect x="68.8414%" y="901" width="0.0637%" height="15" fill="rgb(215,121,11)" fg:x="99398" fg:w="92"/><text x="69.0914%" y="911.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (27 samples, 0.02%)</title><rect x="68.9051%" y="917" width="0.0187%" height="15" fill="rgb(245,147,10)" fg:x="99490" fg:w="27"/><text x="69.1551%" y="927.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (18 samples, 0.01%)</title><rect x="68.9113%" y="901" width="0.0125%" height="15" fill="rgb(238,153,13)" fg:x="99499" fg:w="18"/><text x="69.1613%" y="911.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (8,233 samples, 5.70%)</title><rect x="63.2377%" y="933" width="5.7020%" height="15" fill="rgb(233,108,0)" fg:x="91307" fg:w="8233"/><text x="63.4877%" y="943.50">simd_js..</text></g><g><title>simd_json::stage2::is_valid_true_atom (23 samples, 0.02%)</title><rect x="68.9238%" y="917" width="0.0159%" height="15" fill="rgb(212,157,17)" fg:x="99517" fg:w="23"/><text x="69.1738%" y="927.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (17 samples, 0.01%)</title><rect x="68.9280%" y="901" width="0.0118%" height="15" fill="rgb(225,213,38)" fg:x="99523" fg:w="17"/><text x="69.1780%" y="911.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (9,161 samples, 6.34%)</title><rect x="62.5957%" y="949" width="6.3448%" height="15" fill="rgb(248,16,11)" fg:x="90380" fg:w="9161"/><text x="62.8457%" y="959.50">simd_jso..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (63 samples, 0.04%)</title><rect x="70.5306%" y="821" width="0.0436%" height="15" fill="rgb(241,33,4)" fg:x="101837" fg:w="63"/><text x="70.7806%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (62 samples, 0.04%)</title><rect x="70.5313%" y="805" width="0.0429%" height="15" fill="rgb(222,26,43)" fg:x="101838" fg:w="62"/><text x="70.7813%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (62 samples, 0.04%)</title><rect x="70.5313%" y="789" width="0.0429%" height="15" fill="rgb(243,29,36)" fg:x="101838" fg:w="62"/><text x="70.7813%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (68 samples, 0.05%)</title><rect x="71.4566%" y="741" width="0.0471%" height="15" fill="rgb(241,9,27)" fg:x="103174" fg:w="68"/><text x="71.7066%" y="751.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (37 samples, 0.03%)</title><rect x="71.6020%" y="661" width="0.0256%" height="15" fill="rgb(205,117,26)" fg:x="103384" fg:w="37"/><text x="71.8520%" y="671.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (37 samples, 0.03%)</title><rect x="71.6020%" y="645" width="0.0256%" height="15" fill="rgb(209,80,39)" fg:x="103384" fg:w="37"/><text x="71.8520%" y="655.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (37 samples, 0.03%)</title><rect x="71.6020%" y="629" width="0.0256%" height="15" fill="rgb(239,155,6)" fg:x="103384" fg:w="37"/><text x="71.8520%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (37 samples, 0.03%)</title><rect x="71.6020%" y="613" width="0.0256%" height="15" fill="rgb(212,104,12)" fg:x="103384" fg:w="37"/><text x="71.8520%" y="623.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (37 samples, 0.03%)</title><rect x="71.6020%" y="597" width="0.0256%" height="15" fill="rgb(234,204,3)" fg:x="103384" fg:w="37"/><text x="71.8520%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.11%)</title><rect x="71.6276%" y="661" width="0.1074%" height="15" fill="rgb(251,218,7)" fg:x="103421" fg:w="155"/><text x="71.8776%" y="671.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (68 samples, 0.05%)</title><rect x="71.7350%" y="645" width="0.0471%" height="15" fill="rgb(221,81,32)" fg:x="103576" fg:w="68"/><text x="71.9850%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (36 samples, 0.02%)</title><rect x="71.7821%" y="645" width="0.0249%" height="15" fill="rgb(214,152,26)" fg:x="103644" fg:w="36"/><text x="72.0321%" y="655.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (679 samples, 0.47%)</title><rect x="71.5037%" y="709" width="0.4703%" height="15" fill="rgb(223,22,3)" fg:x="103242" fg:w="679"/><text x="71.7537%" y="719.50"></text></g><g><title>fxhash::write (679 samples, 0.47%)</title><rect x="71.5037%" y="693" width="0.4703%" height="15" fill="rgb(207,174,7)" fg:x="103242" fg:w="679"/><text x="71.7537%" y="703.50"></text></g><g><title>fxhash::write64 (679 samples, 0.47%)</title><rect x="71.5037%" y="677" width="0.4703%" height="15" fill="rgb(224,19,52)" fg:x="103242" fg:w="679"/><text x="71.7537%" y="687.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (345 samples, 0.24%)</title><rect x="71.7350%" y="661" width="0.2389%" height="15" fill="rgb(228,24,14)" fg:x="103576" fg:w="345"/><text x="71.9850%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (241 samples, 0.17%)</title><rect x="71.8070%" y="645" width="0.1669%" height="15" fill="rgb(230,153,43)" fg:x="103680" fg:w="241"/><text x="72.0570%" y="655.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (32 samples, 0.02%)</title><rect x="72.0702%" y="677" width="0.0222%" height="15" fill="rgb(231,106,12)" fg:x="104060" fg:w="32"/><text x="72.3202%" y="687.50"></text></g><g><title>hashbrown::map::make_insert_hash (1,235 samples, 0.86%)</title><rect x="71.3319%" y="789" width="0.8553%" height="15" fill="rgb(215,92,2)" fg:x="102994" fg:w="1235"/><text x="71.5819%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (1,102 samples, 0.76%)</title><rect x="71.4240%" y="773" width="0.7632%" height="15" fill="rgb(249,143,25)" fg:x="103127" fg:w="1102"/><text x="71.6740%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (1,055 samples, 0.73%)</title><rect x="71.4566%" y="757" width="0.7307%" height="15" fill="rgb(252,7,35)" fg:x="103174" fg:w="1055"/><text x="71.7066%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (987 samples, 0.68%)</title><rect x="71.5037%" y="741" width="0.6836%" height="15" fill="rgb(216,69,40)" fg:x="103242" fg:w="987"/><text x="71.7537%" y="751.50"></text></g><g><title>core::hash::Hasher::write_str (987 samples, 0.68%)</title><rect x="71.5037%" y="725" width="0.6836%" height="15" fill="rgb(240,36,33)" fg:x="103242" fg:w="987"/><text x="71.7537%" y="735.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (308 samples, 0.21%)</title><rect x="71.9739%" y="709" width="0.2133%" height="15" fill="rgb(231,128,14)" fg:x="103921" fg:w="308"/><text x="72.2239%" y="719.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (308 samples, 0.21%)</title><rect x="71.9739%" y="693" width="0.2133%" height="15" fill="rgb(245,143,14)" fg:x="103921" fg:w="308"/><text x="72.2239%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (136 samples, 0.09%)</title><rect x="72.0931%" y="677" width="0.0942%" height="15" fill="rgb(222,130,28)" fg:x="104093" fg:w="136"/><text x="72.3431%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="72.1969%" y="741" width="0.0173%" height="15" fill="rgb(212,10,48)" fg:x="104243" fg:w="25"/><text x="72.4469%" y="751.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (24 samples, 0.02%)</title><rect x="72.1976%" y="725" width="0.0166%" height="15" fill="rgb(254,118,45)" fg:x="104244" fg:w="24"/><text x="72.4476%" y="735.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (30 samples, 0.02%)</title><rect x="72.2143%" y="725" width="0.0208%" height="15" fill="rgb(228,6,45)" fg:x="104268" fg:w="30"/><text x="72.4643%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (30 samples, 0.02%)</title><rect x="72.2143%" y="709" width="0.0208%" height="15" fill="rgb(241,18,35)" fg:x="104268" fg:w="30"/><text x="72.4643%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (56 samples, 0.04%)</title><rect x="72.2143%" y="741" width="0.0388%" height="15" fill="rgb(227,214,53)" fg:x="104268" fg:w="56"/><text x="72.4643%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (21 samples, 0.01%)</title><rect x="72.2385%" y="725" width="0.0145%" height="15" fill="rgb(224,107,51)" fg:x="104303" fg:w="21"/><text x="72.4885%" y="735.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (21 samples, 0.01%)</title><rect x="72.2385%" y="709" width="0.0145%" height="15" fill="rgb(248,60,28)" fg:x="104303" fg:w="21"/><text x="72.4885%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (292 samples, 0.20%)</title><rect x="72.2530%" y="741" width="0.2022%" height="15" fill="rgb(249,101,23)" fg:x="104324" fg:w="292"/><text x="72.5030%" y="751.50"></text></g><g><title>hashbrown::raw::inner::h2 (58 samples, 0.04%)</title><rect x="72.4553%" y="741" width="0.0402%" height="15" fill="rgb(228,51,19)" fg:x="104616" fg:w="58"/><text x="72.7053%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (135 samples, 0.09%)</title><rect x="72.4954%" y="741" width="0.0935%" height="15" fill="rgb(213,20,6)" fg:x="104674" fg:w="135"/><text x="72.7454%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (135 samples, 0.09%)</title><rect x="72.4954%" y="725" width="0.0935%" height="15" fill="rgb(212,124,10)" fg:x="104674" fg:w="135"/><text x="72.7454%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (135 samples, 0.09%)</title><rect x="72.4954%" y="709" width="0.0935%" height="15" fill="rgb(248,3,40)" fg:x="104674" fg:w="135"/><text x="72.7454%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (298 samples, 0.21%)</title><rect x="72.5889%" y="741" width="0.2064%" height="15" fill="rgb(223,178,23)" fg:x="104809" fg:w="298"/><text x="72.8389%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (298 samples, 0.21%)</title><rect x="72.5889%" y="725" width="0.2064%" height="15" fill="rgb(240,132,45)" fg:x="104809" fg:w="298"/><text x="72.8389%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (1,035 samples, 0.72%)</title><rect x="72.1872%" y="789" width="0.7168%" height="15" fill="rgb(245,164,36)" fg:x="104229" fg:w="1035"/><text x="72.4372%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,035 samples, 0.72%)</title><rect x="72.1872%" y="773" width="0.7168%" height="15" fill="rgb(231,188,53)" fg:x="104229" fg:w="1035"/><text x="72.4372%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,035 samples, 0.72%)</title><rect x="72.1872%" y="757" width="0.7168%" height="15" fill="rgb(237,198,39)" fg:x="104229" fg:w="1035"/><text x="72.4372%" y="767.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (157 samples, 0.11%)</title><rect x="72.7953%" y="741" width="0.1087%" height="15" fill="rgb(223,120,35)" fg:x="105107" fg:w="157"/><text x="73.0453%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (157 samples, 0.11%)</title><rect x="72.7953%" y="725" width="0.1087%" height="15" fill="rgb(253,107,49)" fg:x="105107" fg:w="157"/><text x="73.0453%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (157 samples, 0.11%)</title><rect x="72.7953%" y="709" width="0.1087%" height="15" fill="rgb(216,44,31)" fg:x="105107" fg:w="157"/><text x="73.0453%" y="719.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (467 samples, 0.32%)</title><rect x="72.9713%" y="773" width="0.3234%" height="15" fill="rgb(253,87,21)" fg:x="105361" fg:w="467"/><text x="73.2213%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (467 samples, 0.32%)</title><rect x="72.9713%" y="757" width="0.3234%" height="15" fill="rgb(226,18,2)" fg:x="105361" fg:w="467"/><text x="73.2213%" y="767.50"></text></g><g><title>core::ptr::write (467 samples, 0.32%)</title><rect x="72.9713%" y="741" width="0.3234%" height="15" fill="rgb(216,8,46)" fg:x="105361" fg:w="467"/><text x="73.2213%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (18 samples, 0.01%)</title><rect x="73.2947%" y="773" width="0.0125%" height="15" fill="rgb(226,140,39)" fg:x="105828" fg:w="18"/><text x="73.5447%" y="783.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (18 samples, 0.01%)</title><rect x="73.2947%" y="757" width="0.0125%" height="15" fill="rgb(221,194,54)" fg:x="105828" fg:w="18"/><text x="73.5447%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (18 samples, 0.01%)</title><rect x="73.2947%" y="741" width="0.0125%" height="15" fill="rgb(213,92,11)" fg:x="105828" fg:w="18"/><text x="73.5447%" y="751.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (18 samples, 0.01%)</title><rect x="73.2947%" y="725" width="0.0125%" height="15" fill="rgb(229,162,46)" fg:x="105828" fg:w="18"/><text x="73.5447%" y="735.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (18 samples, 0.01%)</title><rect x="73.2947%" y="709" width="0.0125%" height="15" fill="rgb(214,111,36)" fg:x="105828" fg:w="18"/><text x="73.5447%" y="719.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (67 samples, 0.05%)</title><rect x="73.5883%" y="757" width="0.0464%" height="15" fill="rgb(207,6,21)" fg:x="106252" fg:w="67"/><text x="73.8383%" y="767.50"></text></g><g><title>hashbrown::raw::inner::is_full (67 samples, 0.05%)</title><rect x="73.6347%" y="757" width="0.0464%" height="15" fill="rgb(213,127,38)" fg:x="106319" fg:w="67"/><text x="73.8847%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (546 samples, 0.38%)</title><rect x="73.3072%" y="773" width="0.3782%" height="15" fill="rgb(238,118,32)" fg:x="105846" fg:w="546"/><text x="73.5572%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (7,041 samples, 4.88%)</title><rect x="68.9404%" y="917" width="4.8765%" height="15" fill="rgb(240,139,39)" fg:x="99541" fg:w="7041"/><text x="69.1904%" y="927.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (7,041 samples, 4.88%)</title><rect x="68.9404%" y="901" width="4.8765%" height="15" fill="rgb(235,10,37)" fg:x="99541" fg:w="7041"/><text x="69.1904%" y="911.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (7,041 samples, 4.88%)</title><rect x="68.9404%" y="885" width="4.8765%" height="15" fill="rgb(249,171,38)" fg:x="99541" fg:w="7041"/><text x="69.1904%" y="895.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (6,161 samples, 4.27%)</title><rect x="69.5499%" y="869" width="4.2670%" height="15" fill="rgb(242,144,32)" fg:x="100421" fg:w="6161"/><text x="69.7999%" y="879.50">abi_s..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (6,160 samples, 4.27%)</title><rect x="69.5506%" y="853" width="4.2663%" height="15" fill="rgb(217,117,21)" fg:x="100422" fg:w="6160"/><text x="69.8006%" y="863.50">abi_s..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (5,812 samples, 4.03%)</title><rect x="69.7916%" y="837" width="4.0253%" height="15" fill="rgb(249,87,1)" fg:x="100770" fg:w="5812"/><text x="70.0416%" y="847.50">abi_..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (4,682 samples, 3.24%)</title><rect x="70.5742%" y="821" width="3.2427%" height="15" fill="rgb(248,196,48)" fg:x="101900" fg:w="4682"/><text x="70.8242%" y="831.50">hal..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,885 samples, 2.69%)</title><rect x="71.1262%" y="805" width="2.6907%" height="15" fill="rgb(251,206,33)" fg:x="102697" fg:w="3885"/><text x="71.3762%" y="815.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1,318 samples, 0.91%)</title><rect x="72.9041%" y="789" width="0.9128%" height="15" fill="rgb(232,141,28)" fg:x="105264" fg:w="1318"/><text x="73.1541%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (190 samples, 0.13%)</title><rect x="73.6853%" y="773" width="0.1316%" height="15" fill="rgb(209,167,14)" fg:x="106392" fg:w="190"/><text x="73.9353%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (87 samples, 0.06%)</title><rect x="73.7566%" y="757" width="0.0603%" height="15" fill="rgb(225,11,50)" fg:x="106495" fg:w="87"/><text x="74.0066%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (87 samples, 0.06%)</title><rect x="73.7566%" y="741" width="0.0603%" height="15" fill="rgb(209,50,20)" fg:x="106495" fg:w="87"/><text x="74.0066%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (32 samples, 0.02%)</title><rect x="73.8446%" y="693" width="0.0222%" height="15" fill="rgb(212,17,46)" fg:x="106622" fg:w="32"/><text x="74.0946%" y="703.50"></text></g><g><title>core::intrinsics::write_bytes (32 samples, 0.02%)</title><rect x="73.8446%" y="677" width="0.0222%" height="15" fill="rgb(216,101,39)" fg:x="106622" fg:w="32"/><text x="74.0946%" y="687.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.02%)</title><rect x="73.8460%" y="661" width="0.0208%" height="15" fill="rgb(212,228,48)" fg:x="106624" fg:w="30"/><text x="74.0960%" y="671.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (17 samples, 0.01%)</title><rect x="73.8695%" y="677" width="0.0118%" height="15" fill="rgb(250,6,50)" fg:x="106658" fg:w="17"/><text x="74.1195%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,372 samples, 0.95%)</title><rect x="74.0129%" y="581" width="0.9502%" height="15" fill="rgb(250,160,48)" fg:x="106865" fg:w="1372"/><text x="74.2629%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (17 samples, 0.01%)</title><rect x="74.9513%" y="565" width="0.0118%" height="15" fill="rgb(244,216,33)" fg:x="108220" fg:w="17"/><text x="75.2013%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (63 samples, 0.04%)</title><rect x="74.9631%" y="581" width="0.0436%" height="15" fill="rgb(207,157,5)" fg:x="108237" fg:w="63"/><text x="75.2131%" y="591.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (57 samples, 0.04%)</title><rect x="75.0241%" y="549" width="0.0395%" height="15" fill="rgb(228,199,8)" fg:x="108325" fg:w="57"/><text x="75.2741%" y="559.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_path (25 samples, 0.02%)</title><rect x="75.0462%" y="533" width="0.0173%" height="15" fill="rgb(227,80,20)" fg:x="108357" fg:w="25"/><text x="75.2962%" y="543.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,755 samples, 1.22%)</title><rect x="73.8813%" y="677" width="1.2155%" height="15" fill="rgb(222,9,33)" fg:x="106675" fg:w="1755"/><text x="74.1313%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,755 samples, 1.22%)</title><rect x="73.8813%" y="661" width="1.2155%" height="15" fill="rgb(239,44,28)" fg:x="106675" fg:w="1755"/><text x="74.1313%" y="671.50"></text></g><g><title>alloc::alloc::alloc (1,755 samples, 1.22%)</title><rect x="73.8813%" y="645" width="1.2155%" height="15" fill="rgb(249,187,43)" fg:x="106675" fg:w="1755"/><text x="74.1313%" y="655.50"></text></g><g><title>__rg_alloc (1,755 samples, 1.22%)</title><rect x="73.8813%" y="629" width="1.2155%" height="15" fill="rgb(216,141,28)" fg:x="106675" fg:w="1755"/><text x="74.1313%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,755 samples, 1.22%)</title><rect x="73.8813%" y="613" width="1.2155%" height="15" fill="rgb(230,154,53)" fg:x="106675" fg:w="1755"/><text x="74.1313%" y="623.50"></text></g><g><title>sn_rust_alloc (1,753 samples, 1.21%)</title><rect x="73.8827%" y="597" width="1.2141%" height="15" fill="rgb(227,82,4)" fg:x="106677" fg:w="1753"/><text x="74.1327%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (130 samples, 0.09%)</title><rect x="75.0068%" y="581" width="0.0900%" height="15" fill="rgb(220,107,16)" fg:x="108300" fg:w="130"/><text x="75.2568%" y="591.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (120 samples, 0.08%)</title><rect x="75.0137%" y="565" width="0.0831%" height="15" fill="rgb(207,187,2)" fg:x="108310" fg:w="120"/><text x="75.2637%" y="575.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (48 samples, 0.03%)</title><rect x="75.0635%" y="549" width="0.0332%" height="15" fill="rgb(210,162,52)" fg:x="108382" fg:w="48"/><text x="75.3135%" y="559.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (39 samples, 0.03%)</title><rect x="75.0698%" y="533" width="0.0270%" height="15" fill="rgb(217,216,49)" fg:x="108391" fg:w="39"/><text x="75.3198%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,782 samples, 1.23%)</title><rect x="73.8668%" y="693" width="1.2342%" height="15" fill="rgb(218,146,49)" fg:x="106654" fg:w="1782"/><text x="74.1168%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,892 samples, 1.31%)</title><rect x="73.8169%" y="917" width="1.3104%" height="15" fill="rgb(216,55,40)" fg:x="106582" fg:w="1892"/><text x="74.0669%" y="927.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,879 samples, 1.30%)</title><rect x="73.8259%" y="901" width="1.3014%" height="15" fill="rgb(208,196,21)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,879 samples, 1.30%)</title><rect x="73.8259%" y="885" width="1.3014%" height="15" fill="rgb(242,117,42)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,879 samples, 1.30%)</title><rect x="73.8259%" y="869" width="1.3014%" height="15" fill="rgb(210,11,23)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,879 samples, 1.30%)</title><rect x="73.8259%" y="853" width="1.3014%" height="15" fill="rgb(217,110,2)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,879 samples, 1.30%)</title><rect x="73.8259%" y="837" width="1.3014%" height="15" fill="rgb(229,77,54)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="847.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,879 samples, 1.30%)</title><rect x="73.8259%" y="821" width="1.3014%" height="15" fill="rgb(218,53,16)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,879 samples, 1.30%)</title><rect x="73.8259%" y="805" width="1.3014%" height="15" fill="rgb(215,38,13)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="815.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,879 samples, 1.30%)</title><rect x="73.8259%" y="789" width="1.3014%" height="15" fill="rgb(235,42,18)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,879 samples, 1.30%)</title><rect x="73.8259%" y="773" width="1.3014%" height="15" fill="rgb(219,66,54)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,879 samples, 1.30%)</title><rect x="73.8259%" y="757" width="1.3014%" height="15" fill="rgb(222,205,4)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,879 samples, 1.30%)</title><rect x="73.8259%" y="741" width="1.3014%" height="15" fill="rgb(227,213,46)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,879 samples, 1.30%)</title><rect x="73.8259%" y="725" width="1.3014%" height="15" fill="rgb(250,145,42)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,879 samples, 1.30%)</title><rect x="73.8259%" y="709" width="1.3014%" height="15" fill="rgb(219,15,2)" fg:x="106595" fg:w="1879"/><text x="74.0759%" y="719.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (38 samples, 0.03%)</title><rect x="75.1009%" y="693" width="0.0263%" height="15" fill="rgb(231,181,52)" fg:x="108436" fg:w="38"/><text x="75.3509%" y="703.50"></text></g><g><title>simd_json::Deserializer::next_ (208 samples, 0.14%)</title><rect x="75.1944%" y="901" width="0.1441%" height="15" fill="rgb(235,1,42)" fg:x="108571" fg:w="208"/><text x="75.4444%" y="911.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (312 samples, 0.22%)</title><rect x="75.6218%" y="709" width="0.2161%" height="15" fill="rgb(249,88,27)" fg:x="109188" fg:w="312"/><text x="75.8718%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (25 samples, 0.02%)</title><rect x="75.8379%" y="709" width="0.0173%" height="15" fill="rgb(235,145,16)" fg:x="109500" fg:w="25"/><text x="76.0879%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (580 samples, 0.40%)</title><rect x="75.4694%" y="805" width="0.4017%" height="15" fill="rgb(237,114,19)" fg:x="108968" fg:w="580"/><text x="75.7194%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (580 samples, 0.40%)</title><rect x="75.4694%" y="789" width="0.4017%" height="15" fill="rgb(238,51,50)" fg:x="108968" fg:w="580"/><text x="75.7194%" y="799.50"></text></g><g><title>alloc::alloc::alloc (563 samples, 0.39%)</title><rect x="75.4812%" y="773" width="0.3899%" height="15" fill="rgb(205,194,25)" fg:x="108985" fg:w="563"/><text x="75.7312%" y="783.50"></text></g><g><title>__rg_alloc (563 samples, 0.39%)</title><rect x="75.4812%" y="757" width="0.3899%" height="15" fill="rgb(215,203,17)" fg:x="108985" fg:w="563"/><text x="75.7312%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (563 samples, 0.39%)</title><rect x="75.4812%" y="741" width="0.3899%" height="15" fill="rgb(233,112,49)" fg:x="108985" fg:w="563"/><text x="75.7312%" y="751.50"></text></g><g><title>sn_rust_alloc (562 samples, 0.39%)</title><rect x="75.4819%" y="725" width="0.3892%" height="15" fill="rgb(241,130,26)" fg:x="108986" fg:w="562"/><text x="75.7319%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="75.8552%" y="709" width="0.0159%" height="15" fill="rgb(252,223,19)" fg:x="109525" fg:w="23"/><text x="76.1052%" y="719.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (15 samples, 0.01%)</title><rect x="75.8607%" y="693" width="0.0104%" height="15" fill="rgb(211,95,25)" fg:x="109533" fg:w="15"/><text x="76.1107%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (606 samples, 0.42%)</title><rect x="75.4597%" y="885" width="0.4197%" height="15" fill="rgb(251,182,27)" fg:x="108954" fg:w="606"/><text x="75.7097%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (597 samples, 0.41%)</title><rect x="75.4659%" y="869" width="0.4135%" height="15" fill="rgb(238,24,4)" fg:x="108963" fg:w="597"/><text x="75.7159%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (597 samples, 0.41%)</title><rect x="75.4659%" y="853" width="0.4135%" height="15" fill="rgb(224,220,25)" fg:x="108963" fg:w="597"/><text x="75.7159%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (597 samples, 0.41%)</title><rect x="75.4659%" y="837" width="0.4135%" height="15" fill="rgb(239,133,26)" fg:x="108963" fg:w="597"/><text x="75.7159%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (597 samples, 0.41%)</title><rect x="75.4659%" y="821" width="0.4135%" height="15" fill="rgb(211,94,48)" fg:x="108963" fg:w="597"/><text x="75.7159%" y="831.50"></text></g><g><title>core::ptr::write (2,717 samples, 1.88%)</title><rect x="75.8794%" y="885" width="1.8817%" height="15" fill="rgb(239,87,6)" fg:x="109560" fg:w="2717"/><text x="76.1294%" y="895.50">c..</text></g><g><title>simd_json::Deserializer::next_ (197 samples, 0.14%)</title><rect x="77.8360%" y="869" width="0.1364%" height="15" fill="rgb(227,62,0)" fg:x="112385" fg:w="197"/><text x="78.0860%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (58 samples, 0.04%)</title><rect x="77.9322%" y="853" width="0.0402%" height="15" fill="rgb(211,226,4)" fg:x="112524" fg:w="58"/><text x="78.1822%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (58 samples, 0.04%)</title><rect x="77.9322%" y="837" width="0.0402%" height="15" fill="rgb(253,38,52)" fg:x="112524" fg:w="58"/><text x="78.1822%" y="847.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (3,859 samples, 2.67%)</title><rect x="75.3385%" y="901" width="2.6727%" height="15" fill="rgb(229,126,40)" fg:x="108779" fg:w="3859"/><text x="75.5885%" y="911.50">tr..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (361 samples, 0.25%)</title><rect x="77.7612%" y="885" width="0.2500%" height="15" fill="rgb(229,165,44)" fg:x="112277" fg:w="361"/><text x="78.0112%" y="895.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (56 samples, 0.04%)</title><rect x="77.9724%" y="869" width="0.0388%" height="15" fill="rgb(247,95,47)" fg:x="112582" fg:w="56"/><text x="78.2224%" y="879.50"></text></g><g><title>tremor_value::value::Value::String (56 samples, 0.04%)</title><rect x="77.9724%" y="853" width="0.0388%" height="15" fill="rgb(216,140,30)" fg:x="112582" fg:w="56"/><text x="78.2224%" y="863.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (22,329 samples, 15.46%)</title><rect x="62.5957%" y="981" width="15.4647%" height="15" fill="rgb(246,214,8)" fg:x="90380" fg:w="22329"/><text x="62.8457%" y="991.50">&lt;tremor_runtime::codec::..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (22,329 samples, 15.46%)</title><rect x="62.5957%" y="965" width="15.4647%" height="15" fill="rgb(227,224,15)" fg:x="90380" fg:w="22329"/><text x="62.8457%" y="975.50">tremor_value::value::par..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (13,168 samples, 9.12%)</title><rect x="68.9404%" y="949" width="9.1199%" height="15" fill="rgb(233,175,4)" fg:x="99541" fg:w="13168"/><text x="69.1904%" y="959.50">tremor_value:..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (13,168 samples, 9.12%)</title><rect x="68.9404%" y="933" width="9.1199%" height="15" fill="rgb(221,66,45)" fg:x="99541" fg:w="13168"/><text x="69.1904%" y="943.50">tremor_value:..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (4,235 samples, 2.93%)</title><rect x="75.1273%" y="917" width="2.9331%" height="15" fill="rgb(221,178,18)" fg:x="108474" fg:w="4235"/><text x="75.3773%" y="927.50">tr..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (71 samples, 0.05%)</title><rect x="78.0112%" y="901" width="0.0492%" height="15" fill="rgb(213,81,29)" fg:x="112638" fg:w="71"/><text x="78.2612%" y="911.50"></text></g><g><title>tremor_value::value::Value::String (71 samples, 0.05%)</title><rect x="78.0112%" y="885" width="0.0492%" height="15" fill="rgb(220,89,49)" fg:x="112638" fg:w="71"/><text x="78.2612%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (22,349 samples, 15.48%)</title><rect x="62.5832%" y="1077" width="15.4785%" height="15" fill="rgb(227,60,33)" fg:x="90362" fg:w="22349"/><text x="62.8332%" y="1087.50">tremor_runtime::connecto..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22,340 samples, 15.47%)</title><rect x="62.5894%" y="1061" width="15.4723%" height="15" fill="rgb(205,113,12)" fg:x="90371" fg:w="22340"/><text x="62.8394%" y="1071.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (22,340 samples, 15.47%)</title><rect x="62.5894%" y="1045" width="15.4723%" height="15" fill="rgb(211,32,1)" fg:x="90371" fg:w="22340"/><text x="62.8394%" y="1055.50">tremor_runtime::connecto..</text></g><g><title>tremor_runtime::connectors::source::build_events (22,338 samples, 15.47%)</title><rect x="62.5908%" y="1029" width="15.4709%" height="15" fill="rgb(246,2,12)" fg:x="90373" fg:w="22338"/><text x="62.8408%" y="1039.50">tremor_runtime::connecto..</text></g><g><title>tremor_script::srs::EventPayload::try_new (22,331 samples, 15.47%)</title><rect x="62.5957%" y="1013" width="15.4661%" height="15" fill="rgb(243,37,27)" fg:x="90380" fg:w="22331"/><text x="62.8457%" y="1023.50">tremor_script::srs::Even..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (22,331 samples, 15.47%)</title><rect x="62.5957%" y="997" width="15.4661%" height="15" fill="rgb(248,211,31)" fg:x="90380" fg:w="22331"/><text x="62.8457%" y="1007.50">tremor_runtime::connecto..</text></g><g><title>tremor_runtime::connectors::source::build_event (21 samples, 0.01%)</title><rect x="78.0645%" y="1077" width="0.0145%" height="15" fill="rgb(242,146,47)" fg:x="112715" fg:w="21"/><text x="78.3145%" y="1087.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="78.2203%" y="933" width="0.0173%" height="15" fill="rgb(206,70,20)" fg:x="112940" fg:w="25"/><text x="78.4703%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (24 samples, 0.02%)</title><rect x="78.2210%" y="917" width="0.0166%" height="15" fill="rgb(215,10,51)" fg:x="112941" fg:w="24"/><text x="78.4710%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (23 samples, 0.02%)</title><rect x="78.2217%" y="901" width="0.0159%" height="15" fill="rgb(243,178,53)" fg:x="112942" fg:w="23"/><text x="78.4717%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (23 samples, 0.02%)</title><rect x="78.2217%" y="885" width="0.0159%" height="15" fill="rgb(233,221,20)" fg:x="112942" fg:w="23"/><text x="78.4717%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (102 samples, 0.07%)</title><rect x="78.2688%" y="917" width="0.0706%" height="15" fill="rgb(218,95,35)" fg:x="113010" fg:w="102"/><text x="78.5188%" y="927.50"></text></g><g><title>core::mem::replace (102 samples, 0.07%)</title><rect x="78.2688%" y="901" width="0.0706%" height="15" fill="rgb(229,13,5)" fg:x="113010" fg:w="102"/><text x="78.5188%" y="911.50"></text></g><g><title>core::ptr::read (102 samples, 0.07%)</title><rect x="78.2688%" y="885" width="0.0706%" height="15" fill="rgb(252,164,30)" fg:x="113010" fg:w="102"/><text x="78.5188%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (188 samples, 0.13%)</title><rect x="78.2418%" y="933" width="0.1302%" height="15" fill="rgb(232,68,36)" fg:x="112971" fg:w="188"/><text x="78.4918%" y="943.50"></text></g><g><title>core::mem::drop (47 samples, 0.03%)</title><rect x="78.3395%" y="917" width="0.0326%" height="15" fill="rgb(219,59,54)" fg:x="113112" fg:w="47"/><text x="78.5895%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (47 samples, 0.03%)</title><rect x="78.3395%" y="901" width="0.0326%" height="15" fill="rgb(250,92,33)" fg:x="113112" fg:w="47"/><text x="78.5895%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (40 samples, 0.03%)</title><rect x="78.3762%" y="837" width="0.0277%" height="15" fill="rgb(229,162,54)" fg:x="113165" fg:w="40"/><text x="78.6262%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (40 samples, 0.03%)</title><rect x="78.3762%" y="821" width="0.0277%" height="15" fill="rgb(244,114,52)" fg:x="113165" fg:w="40"/><text x="78.6262%" y="831.50"></text></g><g><title>core::mem::drop (52 samples, 0.04%)</title><rect x="78.3720%" y="933" width="0.0360%" height="15" fill="rgb(212,211,43)" fg:x="113159" fg:w="52"/><text x="78.6220%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (52 samples, 0.04%)</title><rect x="78.3720%" y="917" width="0.0360%" height="15" fill="rgb(226,147,8)" fg:x="113159" fg:w="52"/><text x="78.6220%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (47 samples, 0.03%)</title><rect x="78.3755%" y="901" width="0.0326%" height="15" fill="rgb(226,23,13)" fg:x="113164" fg:w="47"/><text x="78.6255%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="78.3755%" y="885" width="0.0326%" height="15" fill="rgb(240,63,4)" fg:x="113164" fg:w="47"/><text x="78.6255%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.03%)</title><rect x="78.3762%" y="869" width="0.0319%" height="15" fill="rgb(221,1,32)" fg:x="113165" fg:w="46"/><text x="78.6262%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (46 samples, 0.03%)</title><rect x="78.3762%" y="853" width="0.0319%" height="15" fill="rgb(242,117,10)" fg:x="113165" fg:w="46"/><text x="78.6262%" y="863.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="78.4080%" y="917" width="0.0111%" height="15" fill="rgb(249,172,44)" fg:x="113211" fg:w="16"/><text x="78.6580%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (217 samples, 0.15%)</title><rect x="78.4080%" y="933" width="0.1503%" height="15" fill="rgb(244,46,45)" fg:x="113211" fg:w="217"/><text x="78.6580%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (201 samples, 0.14%)</title><rect x="78.4191%" y="917" width="0.1392%" height="15" fill="rgb(206,43,17)" fg:x="113227" fg:w="201"/><text x="78.6691%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (201 samples, 0.14%)</title><rect x="78.4191%" y="901" width="0.1392%" height="15" fill="rgb(239,218,39)" fg:x="113227" fg:w="201"/><text x="78.6691%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (183 samples, 0.13%)</title><rect x="78.4316%" y="885" width="0.1267%" height="15" fill="rgb(208,169,54)" fg:x="113245" fg:w="183"/><text x="78.6816%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (183 samples, 0.13%)</title><rect x="78.4316%" y="869" width="0.1267%" height="15" fill="rgb(247,25,42)" fg:x="113245" fg:w="183"/><text x="78.6816%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (183 samples, 0.13%)</title><rect x="78.4316%" y="853" width="0.1267%" height="15" fill="rgb(226,23,31)" fg:x="113245" fg:w="183"/><text x="78.6816%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (183 samples, 0.13%)</title><rect x="78.4316%" y="837" width="0.1267%" height="15" fill="rgb(247,16,28)" fg:x="113245" fg:w="183"/><text x="78.6816%" y="847.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="78.5666%" y="933" width="0.0118%" height="15" fill="rgb(231,147,38)" fg:x="113440" fg:w="17"/><text x="78.8166%" y="943.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="78.5666%" y="917" width="0.0118%" height="15" fill="rgb(253,81,48)" fg:x="113440" fg:w="17"/><text x="78.8166%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.01%)</title><rect x="78.5666%" y="901" width="0.0118%" height="15" fill="rgb(249,222,43)" fg:x="113440" fg:w="17"/><text x="78.8166%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="78.5666%" y="885" width="0.0118%" height="15" fill="rgb(221,3,27)" fg:x="113440" fg:w="17"/><text x="78.8166%" y="895.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="78.5839%" y="901" width="0.0180%" height="15" fill="rgb(228,180,5)" fg:x="113465" fg:w="26"/><text x="78.8339%" y="911.50"></text></g><g><title>std::sync::poison::Flag::borrow (26 samples, 0.02%)</title><rect x="78.5839%" y="885" width="0.0180%" height="15" fill="rgb(227,131,42)" fg:x="113465" fg:w="26"/><text x="78.8339%" y="895.50"></text></g><g><title>std::thread::panicking (16 samples, 0.01%)</title><rect x="78.5909%" y="869" width="0.0111%" height="15" fill="rgb(212,3,39)" fg:x="113475" fg:w="16"/><text x="78.8409%" y="879.50"></text></g><g><title>std::panicking::panicking (16 samples, 0.01%)</title><rect x="78.5909%" y="853" width="0.0111%" height="15" fill="rgb(226,45,5)" fg:x="113475" fg:w="16"/><text x="78.8409%" y="863.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (16 samples, 0.01%)</title><rect x="78.5909%" y="837" width="0.0111%" height="15" fill="rgb(215,167,45)" fg:x="113475" fg:w="16"/><text x="78.8409%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="78.5909%" y="821" width="0.0111%" height="15" fill="rgb(250,218,53)" fg:x="113475" fg:w="16"/><text x="78.8409%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="78.5909%" y="805" width="0.0111%" height="15" fill="rgb(207,140,0)" fg:x="113475" fg:w="16"/><text x="78.8409%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (348 samples, 0.24%)</title><rect x="78.6040%" y="869" width="0.2410%" height="15" fill="rgb(238,133,51)" fg:x="113494" fg:w="348"/><text x="78.8540%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (348 samples, 0.24%)</title><rect x="78.6040%" y="853" width="0.2410%" height="15" fill="rgb(218,203,53)" fg:x="113494" fg:w="348"/><text x="78.8540%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.01%)</title><rect x="78.8478%" y="853" width="0.0132%" height="15" fill="rgb(226,184,25)" fg:x="113846" fg:w="19"/><text x="79.0978%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.01%)</title><rect x="78.8478%" y="837" width="0.0132%" height="15" fill="rgb(231,121,21)" fg:x="113846" fg:w="19"/><text x="79.0978%" y="847.50"></text></g><g><title>core::hint::spin_loop (360 samples, 0.25%)</title><rect x="78.8714%" y="837" width="0.2493%" height="15" fill="rgb(251,14,34)" fg:x="113880" fg:w="360"/><text x="79.1214%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (360 samples, 0.25%)</title><rect x="78.8714%" y="821" width="0.2493%" height="15" fill="rgb(249,193,11)" fg:x="113880" fg:w="360"/><text x="79.1214%" y="831.50"></text></g><g><title>event_listener::Inner::lock (808 samples, 0.56%)</title><rect x="78.5784%" y="933" width="0.5596%" height="15" fill="rgb(220,172,37)" fg:x="113457" fg:w="808"/><text x="78.8284%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (800 samples, 0.55%)</title><rect x="78.5839%" y="917" width="0.5541%" height="15" fill="rgb(231,229,43)" fg:x="113465" fg:w="800"/><text x="78.8339%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (774 samples, 0.54%)</title><rect x="78.6020%" y="901" width="0.5361%" height="15" fill="rgb(250,161,5)" fg:x="113491" fg:w="774"/><text x="78.8520%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (774 samples, 0.54%)</title><rect x="78.6020%" y="885" width="0.5361%" height="15" fill="rgb(218,225,18)" fg:x="113491" fg:w="774"/><text x="78.8520%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (423 samples, 0.29%)</title><rect x="78.8450%" y="869" width="0.2930%" height="15" fill="rgb(245,45,42)" fg:x="113842" fg:w="423"/><text x="79.0950%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (388 samples, 0.27%)</title><rect x="78.8693%" y="853" width="0.2687%" height="15" fill="rgb(211,115,1)" fg:x="113877" fg:w="388"/><text x="79.1193%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (25 samples, 0.02%)</title><rect x="79.1207%" y="837" width="0.0173%" height="15" fill="rgb(248,133,52)" fg:x="114240" fg:w="25"/><text x="79.3707%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.02%)</title><rect x="79.1207%" y="821" width="0.0173%" height="15" fill="rgb(238,100,21)" fg:x="114240" fg:w="25"/><text x="79.3707%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,436 samples, 0.99%)</title><rect x="78.1885%" y="949" width="0.9945%" height="15" fill="rgb(247,144,11)" fg:x="112894" fg:w="1436"/><text x="78.4385%" y="959.50"></text></g><g><title>event_listener::List::remove (65 samples, 0.05%)</title><rect x="79.1380%" y="933" width="0.0450%" height="15" fill="rgb(206,164,16)" fg:x="114265" fg:w="65"/><text x="79.3880%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (47 samples, 0.03%)</title><rect x="79.1505%" y="917" width="0.0326%" height="15" fill="rgb(222,34,3)" fg:x="114283" fg:w="47"/><text x="79.4005%" y="927.50"></text></g><g><title>core::mem::replace (47 samples, 0.03%)</title><rect x="79.1505%" y="901" width="0.0326%" height="15" fill="rgb(248,82,4)" fg:x="114283" fg:w="47"/><text x="79.4005%" y="911.50"></text></g><g><title>core::ptr::read (47 samples, 0.03%)</title><rect x="79.1505%" y="885" width="0.0326%" height="15" fill="rgb(228,81,46)" fg:x="114283" fg:w="47"/><text x="79.4005%" y="895.50"></text></g><g><title>concurrent_queue::full_fence (65 samples, 0.05%)</title><rect x="79.2668%" y="901" width="0.0450%" height="15" fill="rgb(227,67,47)" fg:x="114451" fg:w="65"/><text x="79.5168%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (63 samples, 0.04%)</title><rect x="79.2682%" y="885" width="0.0436%" height="15" fill="rgb(215,93,53)" fg:x="114453" fg:w="63"/><text x="79.5182%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (63 samples, 0.04%)</title><rect x="79.2682%" y="869" width="0.0436%" height="15" fill="rgb(248,194,39)" fg:x="114453" fg:w="63"/><text x="79.5182%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.04%)</title><rect x="79.2682%" y="853" width="0.0436%" height="15" fill="rgb(215,5,19)" fg:x="114453" fg:w="63"/><text x="79.5182%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (153 samples, 0.11%)</title><rect x="79.3139%" y="901" width="0.1060%" height="15" fill="rgb(226,215,51)" fg:x="114519" fg:w="153"/><text x="79.5639%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (153 samples, 0.11%)</title><rect x="79.3139%" y="885" width="0.1060%" height="15" fill="rgb(225,56,26)" fg:x="114519" fg:w="153"/><text x="79.5639%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (222 samples, 0.15%)</title><rect x="79.4199%" y="901" width="0.1538%" height="15" fill="rgb(222,75,29)" fg:x="114672" fg:w="222"/><text x="79.6699%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (222 samples, 0.15%)</title><rect x="79.4199%" y="885" width="0.1538%" height="15" fill="rgb(236,139,6)" fg:x="114672" fg:w="222"/><text x="79.6699%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (543 samples, 0.38%)</title><rect x="79.1990%" y="933" width="0.3761%" height="15" fill="rgb(223,137,36)" fg:x="114353" fg:w="543"/><text x="79.4490%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (521 samples, 0.36%)</title><rect x="79.2142%" y="917" width="0.3608%" height="15" fill="rgb(226,99,2)" fg:x="114375" fg:w="521"/><text x="79.4642%" y="927.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (25 samples, 0.02%)</title><rect x="79.5903%" y="853" width="0.0173%" height="15" fill="rgb(206,133,23)" fg:x="114918" fg:w="25"/><text x="79.8403%" y="863.50"></text></g><g><title>event_listener::List::notify (37 samples, 0.03%)</title><rect x="79.5882%" y="917" width="0.0256%" height="15" fill="rgb(243,173,15)" fg:x="114915" fg:w="37"/><text x="79.8382%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (36 samples, 0.02%)</title><rect x="79.5889%" y="901" width="0.0249%" height="15" fill="rgb(228,69,28)" fg:x="114916" fg:w="36"/><text x="79.8389%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (36 samples, 0.02%)</title><rect x="79.5889%" y="885" width="0.0249%" height="15" fill="rgb(212,51,22)" fg:x="114916" fg:w="36"/><text x="79.8389%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (34 samples, 0.02%)</title><rect x="79.5903%" y="869" width="0.0235%" height="15" fill="rgb(227,113,0)" fg:x="114918" fg:w="34"/><text x="79.8403%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,130 samples, 0.78%)</title><rect x="79.1830%" y="949" width="0.7826%" height="15" fill="rgb(252,84,27)" fg:x="114330" fg:w="1130"/><text x="79.4330%" y="959.50"></text></g><g><title>event_listener::Event::notify (564 samples, 0.39%)</title><rect x="79.5750%" y="933" width="0.3906%" height="15" fill="rgb(223,145,39)" fg:x="114896" fg:w="564"/><text x="79.8250%" y="943.50"></text></g><g><title>event_listener::full_fence (508 samples, 0.35%)</title><rect x="79.6138%" y="917" width="0.3518%" height="15" fill="rgb(239,219,30)" fg:x="114952" fg:w="508"/><text x="79.8638%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (508 samples, 0.35%)</title><rect x="79.6138%" y="901" width="0.3518%" height="15" fill="rgb(224,196,39)" fg:x="114952" fg:w="508"/><text x="79.8638%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (508 samples, 0.35%)</title><rect x="79.6138%" y="885" width="0.3518%" height="15" fill="rgb(205,35,43)" fg:x="114952" fg:w="508"/><text x="79.8638%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="79.9740%" y="917" width="0.0215%" height="15" fill="rgb(228,201,21)" fg:x="115472" fg:w="31"/><text x="80.2240%" y="927.50"></text></g><g><title>event_listener::Inner::lock (27 samples, 0.02%)</title><rect x="79.9767%" y="901" width="0.0187%" height="15" fill="rgb(237,118,16)" fg:x="115476" fg:w="27"/><text x="80.2267%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="79.9767%" y="885" width="0.0187%" height="15" fill="rgb(241,17,19)" fg:x="115476" fg:w="27"/><text x="80.2267%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (24 samples, 0.02%)</title><rect x="79.9788%" y="869" width="0.0166%" height="15" fill="rgb(214,10,25)" fg:x="115479" fg:w="24"/><text x="80.2288%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (24 samples, 0.02%)</title><rect x="79.9788%" y="853" width="0.0166%" height="15" fill="rgb(238,37,29)" fg:x="115479" fg:w="24"/><text x="80.2288%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (17 samples, 0.01%)</title><rect x="79.9837%" y="837" width="0.0118%" height="15" fill="rgb(253,83,25)" fg:x="115486" fg:w="17"/><text x="80.2337%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (102 samples, 0.07%)</title><rect x="79.9691%" y="949" width="0.0706%" height="15" fill="rgb(234,192,12)" fg:x="115465" fg:w="102"/><text x="80.2191%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (95 samples, 0.07%)</title><rect x="79.9740%" y="933" width="0.0658%" height="15" fill="rgb(241,216,45)" fg:x="115472" fg:w="95"/><text x="80.2240%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (64 samples, 0.04%)</title><rect x="79.9954%" y="917" width="0.0443%" height="15" fill="rgb(242,22,33)" fg:x="115503" fg:w="64"/><text x="80.2454%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.04%)</title><rect x="79.9954%" y="901" width="0.0443%" height="15" fill="rgb(231,105,49)" fg:x="115503" fg:w="64"/><text x="80.2454%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (61 samples, 0.04%)</title><rect x="79.9975%" y="885" width="0.0422%" height="15" fill="rgb(218,204,15)" fg:x="115506" fg:w="61"/><text x="80.2475%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (61 samples, 0.04%)</title><rect x="79.9975%" y="869" width="0.0422%" height="15" fill="rgb(235,138,41)" fg:x="115506" fg:w="61"/><text x="80.2475%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (54 samples, 0.04%)</title><rect x="80.0474%" y="933" width="0.0374%" height="15" fill="rgb(246,0,9)" fg:x="115578" fg:w="54"/><text x="80.2974%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (54 samples, 0.04%)</title><rect x="80.0474%" y="917" width="0.0374%" height="15" fill="rgb(210,74,4)" fg:x="115578" fg:w="54"/><text x="80.2974%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (54 samples, 0.04%)</title><rect x="80.0474%" y="901" width="0.0374%" height="15" fill="rgb(250,60,41)" fg:x="115578" fg:w="54"/><text x="80.2974%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (49 samples, 0.03%)</title><rect x="80.0848%" y="933" width="0.0339%" height="15" fill="rgb(220,115,12)" fg:x="115632" fg:w="49"/><text x="80.3348%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (45 samples, 0.03%)</title><rect x="80.0875%" y="917" width="0.0312%" height="15" fill="rgb(237,100,13)" fg:x="115636" fg:w="45"/><text x="80.3375%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.03%)</title><rect x="80.0875%" y="901" width="0.0312%" height="15" fill="rgb(213,55,26)" fg:x="115636" fg:w="45"/><text x="80.3375%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (45 samples, 0.03%)</title><rect x="80.0875%" y="885" width="0.0312%" height="15" fill="rgb(216,17,4)" fg:x="115636" fg:w="45"/><text x="80.3375%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (45 samples, 0.03%)</title><rect x="80.0875%" y="869" width="0.0312%" height="15" fill="rgb(220,153,47)" fg:x="115636" fg:w="45"/><text x="80.3375%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (45 samples, 0.03%)</title><rect x="80.0875%" y="853" width="0.0312%" height="15" fill="rgb(215,131,9)" fg:x="115636" fg:w="45"/><text x="80.3375%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (45 samples, 0.03%)</title><rect x="80.0875%" y="837" width="0.0312%" height="15" fill="rgb(233,46,42)" fg:x="115636" fg:w="45"/><text x="80.3375%" y="847.50"></text></g><g><title>event_listener::Inner::lock (31 samples, 0.02%)</title><rect x="80.1187%" y="933" width="0.0215%" height="15" fill="rgb(226,86,7)" fg:x="115681" fg:w="31"/><text x="80.3687%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.02%)</title><rect x="80.1187%" y="917" width="0.0215%" height="15" fill="rgb(239,226,21)" fg:x="115681" fg:w="31"/><text x="80.3687%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (29 samples, 0.02%)</title><rect x="80.1201%" y="901" width="0.0201%" height="15" fill="rgb(244,137,22)" fg:x="115683" fg:w="29"/><text x="80.3701%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (29 samples, 0.02%)</title><rect x="80.1201%" y="885" width="0.0201%" height="15" fill="rgb(211,139,35)" fg:x="115683" fg:w="29"/><text x="80.3701%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (29 samples, 0.02%)</title><rect x="80.1201%" y="869" width="0.0201%" height="15" fill="rgb(214,62,50)" fg:x="115683" fg:w="29"/><text x="80.3701%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="80.1201%" y="853" width="0.0201%" height="15" fill="rgb(212,113,44)" fg:x="115683" fg:w="29"/><text x="80.3701%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,918 samples, 2.02%)</title><rect x="78.1435%" y="965" width="2.0210%" height="15" fill="rgb(226,150,43)" fg:x="112829" fg:w="2918"/><text x="78.3935%" y="975.50">&lt;..</text></g><g><title>event_listener::Event::listen (180 samples, 0.12%)</title><rect x="80.0398%" y="949" width="0.1247%" height="15" fill="rgb(250,71,37)" fg:x="115567" fg:w="180"/><text x="80.2898%" y="959.50"></text></g><g><title>event_listener::full_fence (25 samples, 0.02%)</title><rect x="80.1471%" y="933" width="0.0173%" height="15" fill="rgb(219,76,19)" fg:x="115722" fg:w="25"/><text x="80.3971%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="80.1485%" y="917" width="0.0159%" height="15" fill="rgb(250,39,11)" fg:x="115724" fg:w="23"/><text x="80.3985%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="80.1485%" y="901" width="0.0159%" height="15" fill="rgb(230,64,31)" fg:x="115724" fg:w="23"/><text x="80.3985%" y="911.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.10%)</title><rect x="80.1679%" y="949" width="0.1004%" height="15" fill="rgb(208,222,23)" fg:x="115752" fg:w="145"/><text x="80.4179%" y="959.50"></text></g><g><title>[libc-2.31.so] (724 samples, 0.50%)</title><rect x="80.2711%" y="917" width="0.5014%" height="15" fill="rgb(227,125,18)" fg:x="115901" fg:w="724"/><text x="80.5211%" y="927.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.05%)</title><rect x="80.7746%" y="837" width="0.0526%" height="15" fill="rgb(234,210,9)" fg:x="116628" fg:w="76"/><text x="81.0246%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,150 samples, 2.87%)</title><rect x="78.1165%" y="997" width="2.8742%" height="15" fill="rgb(217,127,24)" fg:x="112790" fg:w="4150"/><text x="78.3665%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (4,131 samples, 2.86%)</title><rect x="78.1296%" y="981" width="2.8611%" height="15" fill="rgb(239,141,48)" fg:x="112809" fg:w="4131"/><text x="78.3796%" y="991.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,193 samples, 0.83%)</title><rect x="80.1644%" y="965" width="0.8263%" height="15" fill="rgb(227,109,8)" fg:x="115747" fg:w="1193"/><text x="80.4144%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,043 samples, 0.72%)</title><rect x="80.2683%" y="949" width="0.7224%" height="15" fill="rgb(235,184,23)" fg:x="115897" fg:w="1043"/><text x="80.5183%" y="959.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,043 samples, 0.72%)</title><rect x="80.2683%" y="933" width="0.7224%" height="15" fill="rgb(227,226,48)" fg:x="115897" fg:w="1043"/><text x="80.5183%" y="943.50"></text></g><g><title>alloc::alloc::box_free (315 samples, 0.22%)</title><rect x="80.7725%" y="917" width="0.2182%" height="15" fill="rgb(206,150,11)" fg:x="116625" fg:w="315"/><text x="81.0225%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (315 samples, 0.22%)</title><rect x="80.7725%" y="901" width="0.2182%" height="15" fill="rgb(254,2,33)" fg:x="116625" fg:w="315"/><text x="81.0225%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (315 samples, 0.22%)</title><rect x="80.7725%" y="885" width="0.2182%" height="15" fill="rgb(243,160,20)" fg:x="116625" fg:w="315"/><text x="81.0225%" y="895.50"></text></g><g><title>__rg_dealloc (315 samples, 0.22%)</title><rect x="80.7725%" y="869" width="0.2182%" height="15" fill="rgb(218,208,30)" fg:x="116625" fg:w="315"/><text x="81.0225%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (315 samples, 0.22%)</title><rect x="80.7725%" y="853" width="0.2182%" height="15" fill="rgb(224,120,49)" fg:x="116625" fg:w="315"/><text x="81.0225%" y="863.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (236 samples, 0.16%)</title><rect x="80.8272%" y="837" width="0.1634%" height="15" fill="rgb(246,12,2)" fg:x="116704" fg:w="236"/><text x="81.0772%" y="847.50"></text></g><g><title>[libc-2.31.so] (723 samples, 0.50%)</title><rect x="80.9907%" y="997" width="0.5007%" height="15" fill="rgb(236,117,3)" fg:x="116940" fg:w="723"/><text x="81.2407%" y="1007.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,901 samples, 3.39%)</title><rect x="78.0978%" y="1061" width="3.3943%" height="15" fill="rgb(216,128,52)" fg:x="112763" fg:w="4901"/><text x="78.3478%" y="1071.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,896 samples, 3.39%)</title><rect x="78.1012%" y="1045" width="3.3909%" height="15" fill="rgb(246,145,19)" fg:x="112768" fg:w="4896"/><text x="78.3512%" y="1055.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,896 samples, 3.39%)</title><rect x="78.1012%" y="1029" width="3.3909%" height="15" fill="rgb(222,11,46)" fg:x="112768" fg:w="4896"/><text x="78.3512%" y="1039.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,896 samples, 3.39%)</title><rect x="78.1012%" y="1013" width="3.3909%" height="15" fill="rgb(245,82,36)" fg:x="112768" fg:w="4896"/><text x="78.3512%" y="1023.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (82 samples, 0.06%)</title><rect x="81.4956%" y="1013" width="0.0568%" height="15" fill="rgb(250,73,51)" fg:x="117669" fg:w="82"/><text x="81.7456%" y="1023.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="81.6452%" y="965" width="0.0111%" height="15" fill="rgb(221,189,23)" fg:x="117885" fg:w="16"/><text x="81.8952%" y="975.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (16 samples, 0.01%)</title><rect x="81.6452%" y="949" width="0.0111%" height="15" fill="rgb(210,33,7)" fg:x="117885" fg:w="16"/><text x="81.8952%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (20 samples, 0.01%)</title><rect x="81.6597%" y="965" width="0.0139%" height="15" fill="rgb(210,107,22)" fg:x="117906" fg:w="20"/><text x="81.9097%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (19 samples, 0.01%)</title><rect x="81.6604%" y="949" width="0.0132%" height="15" fill="rgb(222,116,37)" fg:x="117907" fg:w="19"/><text x="81.9104%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="81.6604%" y="933" width="0.0132%" height="15" fill="rgb(254,17,48)" fg:x="117907" fg:w="19"/><text x="81.9104%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="81.6618%" y="917" width="0.0118%" height="15" fill="rgb(224,36,32)" fg:x="117909" fg:w="17"/><text x="81.9118%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (17 samples, 0.01%)</title><rect x="81.6618%" y="901" width="0.0118%" height="15" fill="rgb(232,90,46)" fg:x="117909" fg:w="17"/><text x="81.9118%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (17 samples, 0.01%)</title><rect x="81.6618%" y="885" width="0.0118%" height="15" fill="rgb(241,66,40)" fg:x="117909" fg:w="17"/><text x="81.9118%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (17 samples, 0.01%)</title><rect x="81.6618%" y="869" width="0.0118%" height="15" fill="rgb(249,184,29)" fg:x="117909" fg:w="17"/><text x="81.9118%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (74 samples, 0.05%)</title><rect x="81.6431%" y="981" width="0.0513%" height="15" fill="rgb(231,181,1)" fg:x="117882" fg:w="74"/><text x="81.8931%" y="991.50"></text></g><g><title>event_listener::Inner::lock (28 samples, 0.02%)</title><rect x="81.6749%" y="965" width="0.0194%" height="15" fill="rgb(224,94,2)" fg:x="117928" fg:w="28"/><text x="81.9249%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="81.6756%" y="949" width="0.0187%" height="15" fill="rgb(229,170,15)" fg:x="117929" fg:w="27"/><text x="81.9256%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (27 samples, 0.02%)</title><rect x="81.6756%" y="933" width="0.0187%" height="15" fill="rgb(240,127,35)" fg:x="117929" fg:w="27"/><text x="81.9256%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (27 samples, 0.02%)</title><rect x="81.6756%" y="917" width="0.0187%" height="15" fill="rgb(248,196,34)" fg:x="117929" fg:w="27"/><text x="81.9256%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (27 samples, 0.02%)</title><rect x="81.6756%" y="901" width="0.0187%" height="15" fill="rgb(236,137,7)" fg:x="117929" fg:w="27"/><text x="81.9256%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.02%)</title><rect x="81.6756%" y="885" width="0.0187%" height="15" fill="rgb(235,127,16)" fg:x="117929" fg:w="27"/><text x="81.9256%" y="895.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.03%)</title><rect x="81.6943%" y="981" width="0.0326%" height="15" fill="rgb(250,192,54)" fg:x="117956" fg:w="47"/><text x="81.9443%" y="991.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.08%)</title><rect x="81.7387%" y="965" width="0.0824%" height="15" fill="rgb(218,98,20)" fg:x="118020" fg:w="119"/><text x="81.9887%" y="975.50"></text></g><g><title>[libc-2.31.so] (351 samples, 0.24%)</title><rect x="81.8592%" y="949" width="0.2431%" height="15" fill="rgb(230,176,47)" fg:x="118194" fg:w="351"/><text x="82.1092%" y="959.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="82.1604%" y="933" width="0.0180%" height="15" fill="rgb(244,2,33)" fg:x="118629" fg:w="26"/><text x="82.4104%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (61 samples, 0.04%)</title><rect x="82.1785%" y="933" width="0.0422%" height="15" fill="rgb(231,100,17)" fg:x="118655" fg:w="61"/><text x="82.4285%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (60 samples, 0.04%)</title><rect x="82.1791%" y="917" width="0.0416%" height="15" fill="rgb(245,23,12)" fg:x="118656" fg:w="60"/><text x="82.4291%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 0.04%)</title><rect x="82.1791%" y="901" width="0.0416%" height="15" fill="rgb(249,55,22)" fg:x="118656" fg:w="60"/><text x="82.4291%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.04%)</title><rect x="82.1791%" y="885" width="0.0416%" height="15" fill="rgb(207,134,9)" fg:x="118656" fg:w="60"/><text x="82.4291%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (17 samples, 0.01%)</title><rect x="82.2207%" y="933" width="0.0118%" height="15" fill="rgb(218,134,0)" fg:x="118716" fg:w="17"/><text x="82.4707%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (108 samples, 0.07%)</title><rect x="82.2325%" y="933" width="0.0748%" height="15" fill="rgb(213,212,33)" fg:x="118733" fg:w="108"/><text x="82.4825%" y="943.50"></text></g><g><title>core::ptr::write (108 samples, 0.07%)</title><rect x="82.2325%" y="917" width="0.0748%" height="15" fill="rgb(252,106,18)" fg:x="118733" fg:w="108"/><text x="82.4825%" y="927.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.07%)</title><rect x="82.2366%" y="901" width="0.0706%" height="15" fill="rgb(208,126,42)" fg:x="118739" fg:w="102"/><text x="82.4866%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (177 samples, 0.12%)</title><rect x="82.3073%" y="933" width="0.1226%" height="15" fill="rgb(246,175,29)" fg:x="118841" fg:w="177"/><text x="82.5573%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (177 samples, 0.12%)</title><rect x="82.3073%" y="917" width="0.1226%" height="15" fill="rgb(215,13,50)" fg:x="118841" fg:w="177"/><text x="82.5573%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (258 samples, 0.18%)</title><rect x="82.4299%" y="933" width="0.1787%" height="15" fill="rgb(216,172,15)" fg:x="119018" fg:w="258"/><text x="82.6799%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (256 samples, 0.18%)</title><rect x="82.4312%" y="917" width="0.1773%" height="15" fill="rgb(212,103,13)" fg:x="119020" fg:w="256"/><text x="82.6812%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,144 samples, 0.79%)</title><rect x="81.8211%" y="965" width="0.7923%" height="15" fill="rgb(231,171,36)" fg:x="118139" fg:w="1144"/><text x="82.0711%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (738 samples, 0.51%)</title><rect x="82.1023%" y="949" width="0.5111%" height="15" fill="rgb(250,123,20)" fg:x="118545" fg:w="738"/><text x="82.3523%" y="959.50"></text></g><g><title>async_executor::State::notify (27 samples, 0.02%)</title><rect x="82.6487%" y="869" width="0.0187%" height="15" fill="rgb(212,53,50)" fg:x="119334" fg:w="27"/><text x="82.8987%" y="879.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (48 samples, 0.03%)</title><rect x="82.6487%" y="885" width="0.0332%" height="15" fill="rgb(243,54,12)" fg:x="119334" fg:w="48"/><text x="82.8987%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (21 samples, 0.01%)</title><rect x="82.6674%" y="869" width="0.0145%" height="15" fill="rgb(234,101,34)" fg:x="119361" fg:w="21"/><text x="82.9174%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (20 samples, 0.01%)</title><rect x="82.6681%" y="853" width="0.0139%" height="15" fill="rgb(254,67,22)" fg:x="119362" fg:w="20"/><text x="82.9181%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (15 samples, 0.01%)</title><rect x="82.6820%" y="885" width="0.0104%" height="15" fill="rgb(250,35,47)" fg:x="119382" fg:w="15"/><text x="82.9320%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (15 samples, 0.01%)</title><rect x="82.6820%" y="869" width="0.0104%" height="15" fill="rgb(226,126,38)" fg:x="119382" fg:w="15"/><text x="82.9320%" y="879.50"></text></g><g><title>event_listener::List::notify (73 samples, 0.05%)</title><rect x="82.6432%" y="949" width="0.0506%" height="15" fill="rgb(216,138,53)" fg:x="119326" fg:w="73"/><text x="82.8932%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake (70 samples, 0.05%)</title><rect x="82.6453%" y="933" width="0.0485%" height="15" fill="rgb(246,199,43)" fg:x="119329" fg:w="70"/><text x="82.8953%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (68 samples, 0.05%)</title><rect x="82.6466%" y="917" width="0.0471%" height="15" fill="rgb(232,125,11)" fg:x="119331" fg:w="68"/><text x="82.8966%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (65 samples, 0.05%)</title><rect x="82.6487%" y="901" width="0.0450%" height="15" fill="rgb(218,219,45)" fg:x="119334" fg:w="65"/><text x="82.8987%" y="911.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,450 samples, 1.70%)</title><rect x="81.7269%" y="981" width="1.6968%" height="15" fill="rgb(216,102,54)" fg:x="118003" fg:w="2450"/><text x="81.9769%" y="991.50"></text></g><g><title>event_listener::Event::notify (1,170 samples, 0.81%)</title><rect x="82.6134%" y="965" width="0.8103%" height="15" fill="rgb(250,228,7)" fg:x="119283" fg:w="1170"/><text x="82.8634%" y="975.50"></text></g><g><title>event_listener::full_fence (1,054 samples, 0.73%)</title><rect x="82.6937%" y="949" width="0.7300%" height="15" fill="rgb(226,125,25)" fg:x="119399" fg:w="1054"/><text x="82.9437%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,047 samples, 0.73%)</title><rect x="82.6986%" y="933" width="0.7251%" height="15" fill="rgb(224,165,27)" fg:x="119406" fg:w="1047"/><text x="82.9486%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,047 samples, 0.73%)</title><rect x="82.6986%" y="917" width="0.7251%" height="15" fill="rgb(233,86,3)" fg:x="119406" fg:w="1047"/><text x="82.9486%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (47 samples, 0.03%)</title><rect x="83.4431%" y="965" width="0.0326%" height="15" fill="rgb(228,116,20)" fg:x="120481" fg:w="47"/><text x="83.6931%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (47 samples, 0.03%)</title><rect x="83.4431%" y="949" width="0.0326%" height="15" fill="rgb(209,192,17)" fg:x="120481" fg:w="47"/><text x="83.6931%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_add (47 samples, 0.03%)</title><rect x="83.4431%" y="933" width="0.0326%" height="15" fill="rgb(224,88,34)" fg:x="120481" fg:w="47"/><text x="83.6931%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (30 samples, 0.02%)</title><rect x="83.4757%" y="965" width="0.0208%" height="15" fill="rgb(233,38,6)" fg:x="120528" fg:w="30"/><text x="83.7257%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.02%)</title><rect x="83.4764%" y="949" width="0.0201%" height="15" fill="rgb(212,59,30)" fg:x="120529" fg:w="29"/><text x="83.7264%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="83.4764%" y="933" width="0.0201%" height="15" fill="rgb(213,80,3)" fg:x="120529" fg:w="29"/><text x="83.7264%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.02%)</title><rect x="83.4764%" y="917" width="0.0201%" height="15" fill="rgb(251,178,7)" fg:x="120529" fg:w="29"/><text x="83.7264%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (29 samples, 0.02%)</title><rect x="83.4764%" y="901" width="0.0201%" height="15" fill="rgb(213,154,26)" fg:x="120529" fg:w="29"/><text x="83.7264%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (29 samples, 0.02%)</title><rect x="83.4764%" y="885" width="0.0201%" height="15" fill="rgb(238,165,49)" fg:x="120529" fg:w="29"/><text x="83.7264%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (29 samples, 0.02%)</title><rect x="83.4764%" y="869" width="0.0201%" height="15" fill="rgb(248,91,46)" fg:x="120529" fg:w="29"/><text x="83.7264%" y="879.50"></text></g><g><title>event_listener::Inner::lock (16 samples, 0.01%)</title><rect x="83.4964%" y="965" width="0.0111%" height="15" fill="rgb(244,21,52)" fg:x="120558" fg:w="16"/><text x="83.7464%" y="975.50"></text></g><g><title>event_listener::Event::listen (125 samples, 0.09%)</title><rect x="83.4390%" y="981" width="0.0866%" height="15" fill="rgb(247,122,20)" fg:x="120475" fg:w="125"/><text x="83.6890%" y="991.50"></text></g><g><title>event_listener::full_fence (22 samples, 0.02%)</title><rect x="83.5103%" y="965" width="0.0152%" height="15" fill="rgb(218,27,9)" fg:x="120578" fg:w="22"/><text x="83.7603%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.01%)</title><rect x="83.5124%" y="949" width="0.0132%" height="15" fill="rgb(246,7,6)" fg:x="120581" fg:w="19"/><text x="83.7624%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.01%)</title><rect x="83.5124%" y="933" width="0.0132%" height="15" fill="rgb(227,135,54)" fg:x="120581" fg:w="19"/><text x="83.7624%" y="943.50"></text></g><g><title>core::hint::spin_loop (208 samples, 0.14%)</title><rect x="83.5470%" y="869" width="0.1441%" height="15" fill="rgb(247,14,11)" fg:x="120631" fg:w="208"/><text x="83.7970%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (208 samples, 0.14%)</title><rect x="83.5470%" y="853" width="0.1441%" height="15" fill="rgb(206,149,34)" fg:x="120631" fg:w="208"/><text x="83.7970%" y="863.50"></text></g><g><title>event_listener::Inner::lock (232 samples, 0.16%)</title><rect x="83.5366%" y="965" width="0.1607%" height="15" fill="rgb(227,228,4)" fg:x="120616" fg:w="232"/><text x="83.7866%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (231 samples, 0.16%)</title><rect x="83.5373%" y="949" width="0.1600%" height="15" fill="rgb(238,218,28)" fg:x="120617" fg:w="231"/><text x="83.7873%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (231 samples, 0.16%)</title><rect x="83.5373%" y="933" width="0.1600%" height="15" fill="rgb(252,86,40)" fg:x="120617" fg:w="231"/><text x="83.7873%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (231 samples, 0.16%)</title><rect x="83.5373%" y="917" width="0.1600%" height="15" fill="rgb(251,225,11)" fg:x="120617" fg:w="231"/><text x="83.7873%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (228 samples, 0.16%)</title><rect x="83.5394%" y="901" width="0.1579%" height="15" fill="rgb(206,46,49)" fg:x="120620" fg:w="228"/><text x="83.7894%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (217 samples, 0.15%)</title><rect x="83.5470%" y="885" width="0.1503%" height="15" fill="rgb(245,128,24)" fg:x="120631" fg:w="217"/><text x="83.7970%" y="895.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,174 samples, 2.20%)</title><rect x="81.6064%" y="997" width="2.1983%" height="15" fill="rgb(219,177,34)" fg:x="117829" fg:w="3174"/><text x="81.8564%" y="1007.50">&lt;..</text></g><g><title>event_listener::Event::notify (403 samples, 0.28%)</title><rect x="83.5255%" y="981" width="0.2791%" height="15" fill="rgb(218,60,48)" fg:x="120600" fg:w="403"/><text x="83.7755%" y="991.50"></text></g><g><title>event_listener::full_fence (155 samples, 0.11%)</title><rect x="83.6973%" y="965" width="0.1074%" height="15" fill="rgb(221,11,5)" fg:x="120848" fg:w="155"/><text x="83.9473%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (151 samples, 0.10%)</title><rect x="83.7001%" y="949" width="0.1046%" height="15" fill="rgb(220,148,13)" fg:x="120852" fg:w="151"/><text x="83.9501%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (151 samples, 0.10%)</title><rect x="83.7001%" y="933" width="0.1046%" height="15" fill="rgb(210,16,3)" fg:x="120852" fg:w="151"/><text x="83.9501%" y="943.50"></text></g><g><title>[libc-2.31.so] (266 samples, 0.18%)</title><rect x="83.8109%" y="997" width="0.1842%" height="15" fill="rgb(236,80,2)" fg:x="121012" fg:w="266"/><text x="84.0609%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (47 samples, 0.03%)</title><rect x="84.0027%" y="933" width="0.0326%" height="15" fill="rgb(239,129,19)" fg:x="121289" fg:w="47"/><text x="84.2527%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (46 samples, 0.03%)</title><rect x="84.0034%" y="917" width="0.0319%" height="15" fill="rgb(220,106,35)" fg:x="121290" fg:w="46"/><text x="84.2534%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.03%)</title><rect x="84.0034%" y="901" width="0.0319%" height="15" fill="rgb(252,139,45)" fg:x="121290" fg:w="46"/><text x="84.2534%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (43 samples, 0.03%)</title><rect x="84.0055%" y="885" width="0.0298%" height="15" fill="rgb(229,8,36)" fg:x="121293" fg:w="43"/><text x="84.2555%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (43 samples, 0.03%)</title><rect x="84.0055%" y="869" width="0.0298%" height="15" fill="rgb(230,126,33)" fg:x="121293" fg:w="43"/><text x="84.2555%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (42 samples, 0.03%)</title><rect x="84.0062%" y="853" width="0.0291%" height="15" fill="rgb(239,140,21)" fg:x="121294" fg:w="42"/><text x="84.2562%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (42 samples, 0.03%)</title><rect x="84.0062%" y="837" width="0.0291%" height="15" fill="rgb(254,104,9)" fg:x="121294" fg:w="42"/><text x="84.2562%" y="847.50"></text></g><g><title>event_listener::Inner::lock (51 samples, 0.04%)</title><rect x="84.0367%" y="933" width="0.0353%" height="15" fill="rgb(239,52,14)" fg:x="121338" fg:w="51"/><text x="84.2867%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.03%)</title><rect x="84.0373%" y="917" width="0.0346%" height="15" fill="rgb(208,227,44)" fg:x="121339" fg:w="50"/><text x="84.2873%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (49 samples, 0.03%)</title><rect x="84.0380%" y="901" width="0.0339%" height="15" fill="rgb(246,18,19)" fg:x="121340" fg:w="49"/><text x="84.2880%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (49 samples, 0.03%)</title><rect x="84.0380%" y="885" width="0.0339%" height="15" fill="rgb(235,228,25)" fg:x="121340" fg:w="49"/><text x="84.2880%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (49 samples, 0.03%)</title><rect x="84.0380%" y="869" width="0.0339%" height="15" fill="rgb(240,156,20)" fg:x="121340" fg:w="49"/><text x="84.2880%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (49 samples, 0.03%)</title><rect x="84.0380%" y="853" width="0.0339%" height="15" fill="rgb(224,8,20)" fg:x="121340" fg:w="49"/><text x="84.2880%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (120 samples, 0.08%)</title><rect x="84.0006%" y="949" width="0.0831%" height="15" fill="rgb(214,12,52)" fg:x="121286" fg:w="120"/><text x="84.2506%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (139 samples, 0.10%)</title><rect x="83.9993%" y="981" width="0.0963%" height="15" fill="rgb(211,220,47)" fg:x="121284" fg:w="139"/><text x="84.2493%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (139 samples, 0.10%)</title><rect x="83.9993%" y="965" width="0.0963%" height="15" fill="rgb(250,173,5)" fg:x="121284" fg:w="139"/><text x="84.2493%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (17 samples, 0.01%)</title><rect x="84.0837%" y="949" width="0.0118%" height="15" fill="rgb(250,125,52)" fg:x="121406" fg:w="17"/><text x="84.3337%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="84.0837%" y="933" width="0.0118%" height="15" fill="rgb(209,133,18)" fg:x="121406" fg:w="17"/><text x="84.3337%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="84.0844%" y="917" width="0.0111%" height="15" fill="rgb(216,173,22)" fg:x="121407" fg:w="16"/><text x="84.3344%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="84.0844%" y="901" width="0.0111%" height="15" fill="rgb(205,3,22)" fg:x="121407" fg:w="16"/><text x="84.3344%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,769 samples, 2.61%)</title><rect x="81.4921%" y="1029" width="2.6103%" height="15" fill="rgb(248,22,20)" fg:x="117664" fg:w="3769"/><text x="81.7421%" y="1039.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (3,682 samples, 2.55%)</title><rect x="81.5524%" y="1013" width="2.5501%" height="15" fill="rgb(233,6,29)" fg:x="117751" fg:w="3682"/><text x="81.8024%" y="1023.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (155 samples, 0.11%)</title><rect x="83.9951%" y="997" width="0.1074%" height="15" fill="rgb(240,22,54)" fg:x="121278" fg:w="155"/><text x="84.2451%" y="1007.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (8,686 samples, 6.02%)</title><rect x="78.0957%" y="1077" width="6.0158%" height="15" fill="rgb(231,133,32)" fg:x="112760" fg:w="8686"/><text x="78.3457%" y="1087.50">tremor_r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,782 samples, 2.62%)</title><rect x="81.4921%" y="1061" width="2.6193%" height="15" fill="rgb(248,193,4)" fg:x="117664" fg:w="3782"/><text x="81.7421%" y="1071.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (3,782 samples, 2.62%)</title><rect x="81.4921%" y="1045" width="2.6193%" height="15" fill="rgb(211,178,46)" fg:x="117664" fg:w="3782"/><text x="81.7421%" y="1055.50">tr..</text></g><g><title>tremor_runtime::postprocessor::postprocess (21 samples, 0.01%)</title><rect x="84.1115%" y="1077" width="0.0145%" height="15" fill="rgb(224,5,42)" fg:x="121446" fg:w="21"/><text x="84.3615%" y="1087.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (533 samples, 0.37%)</title><rect x="84.1419%" y="1077" width="0.3691%" height="15" fill="rgb(239,176,25)" fg:x="121490" fg:w="533"/><text x="84.3919%" y="1087.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (57 samples, 0.04%)</title><rect x="84.6288%" y="1045" width="0.0395%" height="15" fill="rgb(245,187,50)" fg:x="122193" fg:w="57"/><text x="84.8788%" y="1055.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (124 samples, 0.09%)</title><rect x="84.6212%" y="1061" width="0.0859%" height="15" fill="rgb(248,24,15)" fg:x="122182" fg:w="124"/><text x="84.8712%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (50 samples, 0.03%)</title><rect x="84.6724%" y="1045" width="0.0346%" height="15" fill="rgb(205,166,13)" fg:x="122256" fg:w="50"/><text x="84.9224%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (50 samples, 0.03%)</title><rect x="84.6724%" y="1029" width="0.0346%" height="15" fill="rgb(208,114,23)" fg:x="122256" fg:w="50"/><text x="84.9224%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (50 samples, 0.03%)</title><rect x="84.6724%" y="1013" width="0.0346%" height="15" fill="rgb(239,127,18)" fg:x="122256" fg:w="50"/><text x="84.9224%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (50 samples, 0.03%)</title><rect x="84.6724%" y="997" width="0.0346%" height="15" fill="rgb(219,154,28)" fg:x="122256" fg:w="50"/><text x="84.9224%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (50 samples, 0.03%)</title><rect x="84.6724%" y="981" width="0.0346%" height="15" fill="rgb(225,157,23)" fg:x="122256" fg:w="50"/><text x="84.9224%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (50 samples, 0.03%)</title><rect x="84.6724%" y="965" width="0.0346%" height="15" fill="rgb(219,8,6)" fg:x="122256" fg:w="50"/><text x="84.9224%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.03%)</title><rect x="84.6724%" y="949" width="0.0346%" height="15" fill="rgb(212,47,6)" fg:x="122256" fg:w="50"/><text x="84.9224%" y="959.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (289 samples, 0.20%)</title><rect x="84.5111%" y="1077" width="0.2002%" height="15" fill="rgb(224,190,4)" fg:x="122023" fg:w="289"/><text x="84.7611%" y="1087.50"></text></g><g><title>value_trait::Builder::object (17 samples, 0.01%)</title><rect x="84.7112%" y="1077" width="0.0118%" height="15" fill="rgb(239,183,29)" fg:x="122312" fg:w="17"/><text x="84.9612%" y="1087.50"></text></g><g><title>[unknown] (117,019 samples, 81.05%)</title><rect x="3.6783%" y="1093" width="81.0454%" height="15" fill="rgb(213,57,7)" fg:x="5311" fg:w="117019"/><text x="3.9283%" y="1103.50">[unknown]</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="84.7375%" y="1077" width="0.0118%" height="15" fill="rgb(216,148,1)" fg:x="122350" fg:w="17"/><text x="84.9875%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.02%)</title><rect x="84.7535%" y="1077" width="0.0249%" height="15" fill="rgb(236,182,29)" fg:x="122373" fg:w="36"/><text x="85.0035%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (30 samples, 0.02%)</title><rect x="84.7576%" y="1061" width="0.0208%" height="15" fill="rgb(244,120,48)" fg:x="122379" fg:w="30"/><text x="85.0076%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (30 samples, 0.02%)</title><rect x="84.7576%" y="1045" width="0.0208%" height="15" fill="rgb(206,71,34)" fg:x="122379" fg:w="30"/><text x="85.0076%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 0.01%)</title><rect x="84.7784%" y="1077" width="0.0139%" height="15" fill="rgb(242,32,6)" fg:x="122409" fg:w="20"/><text x="85.0284%" y="1087.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (22 samples, 0.02%)</title><rect x="84.7999%" y="1077" width="0.0152%" height="15" fill="rgb(241,35,3)" fg:x="122440" fg:w="22"/><text x="85.0499%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.01%)</title><rect x="84.8165%" y="1077" width="0.0145%" height="15" fill="rgb(222,62,19)" fg:x="122464" fg:w="21"/><text x="85.0665%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.01%)</title><rect x="84.8186%" y="1061" width="0.0125%" height="15" fill="rgb(223,110,41)" fg:x="122467" fg:w="18"/><text x="85.0686%" y="1071.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (17 samples, 0.01%)</title><rect x="84.8193%" y="1045" width="0.0118%" height="15" fill="rgb(208,224,4)" fg:x="122468" fg:w="17"/><text x="85.0693%" y="1055.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17 samples, 0.01%)</title><rect x="84.8193%" y="1029" width="0.0118%" height="15" fill="rgb(241,137,19)" fg:x="122468" fg:w="17"/><text x="85.0693%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="84.8193%" y="1013" width="0.0118%" height="15" fill="rgb(244,24,17)" fg:x="122468" fg:w="17"/><text x="85.0693%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (17 samples, 0.01%)</title><rect x="84.8193%" y="997" width="0.0118%" height="15" fill="rgb(245,178,49)" fg:x="122468" fg:w="17"/><text x="85.0693%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="84.8913%" y="1061" width="0.0111%" height="15" fill="rgb(219,160,38)" fg:x="122572" fg:w="16"/><text x="85.1413%" y="1071.50"></text></g><g><title>__dso_handle (263 samples, 0.18%)</title><rect x="84.7237%" y="1093" width="0.1821%" height="15" fill="rgb(228,137,14)" fg:x="122330" fg:w="263"/><text x="84.9737%" y="1103.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (106 samples, 0.07%)</title><rect x="84.8324%" y="1077" width="0.0734%" height="15" fill="rgb(237,134,11)" fg:x="122487" fg:w="106"/><text x="85.0824%" y="1087.50"></text></g><g><title>anon.07842ee8e079d9ed68873cd915a87b2c.9.llvm.16273340636564346165 (21 samples, 0.01%)</title><rect x="84.9571%" y="1093" width="0.0145%" height="15" fill="rgb(211,126,44)" fg:x="122667" fg:w="21"/><text x="85.2071%" y="1103.50"></text></g><g><title>anon.4c311a179685ed6cad067fd3e3c012c6.13.llvm.10583681047793362885 (58 samples, 0.04%)</title><rect x="84.9716%" y="1093" width="0.0402%" height="15" fill="rgb(226,171,33)" fg:x="122688" fg:w="58"/><text x="85.2216%" y="1103.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (35 samples, 0.02%)</title><rect x="84.9876%" y="1077" width="0.0242%" height="15" fill="rgb(253,99,13)" fg:x="122711" fg:w="35"/><text x="85.2376%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (27 samples, 0.02%)</title><rect x="85.0298%" y="1077" width="0.0187%" height="15" fill="rgb(244,48,7)" fg:x="122772" fg:w="27"/><text x="85.2798%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (18 samples, 0.01%)</title><rect x="85.0360%" y="1061" width="0.0125%" height="15" fill="rgb(244,217,54)" fg:x="122781" fg:w="18"/><text x="85.2860%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="85.0360%" y="1045" width="0.0125%" height="15" fill="rgb(224,15,18)" fg:x="122781" fg:w="18"/><text x="85.2860%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="85.0360%" y="1029" width="0.0125%" height="15" fill="rgb(244,99,12)" fg:x="122781" fg:w="18"/><text x="85.2860%" y="1039.50"></text></g><g><title>anon.5d1518877f76541a4ff931c86911bc7d.45.llvm.2393264764600995577 (28 samples, 0.02%)</title><rect x="85.0298%" y="1093" width="0.0194%" height="15" fill="rgb(233,226,8)" fg:x="122772" fg:w="28"/><text x="85.2798%" y="1103.50"></text></g><g><title>anon.c46420f524e661f72eda34f1244ed5fd.22.llvm.2797088575975404752 (35 samples, 0.02%)</title><rect x="85.0617%" y="1093" width="0.0242%" height="15" fill="rgb(229,211,3)" fg:x="122818" fg:w="35"/><text x="85.3117%" y="1103.50"></text></g><g><title>abi_stable::erased_types::iterator::next (23 samples, 0.02%)</title><rect x="85.0700%" y="1077" width="0.0159%" height="15" fill="rgb(216,140,21)" fg:x="122830" fg:w="23"/><text x="85.3200%" y="1087.50"></text></g><g><title>anon.ff31cb8ca33487f561eade7f4db5437a.14.llvm.3263491571492513569 (85 samples, 0.06%)</title><rect x="85.0977%" y="1093" width="0.0589%" height="15" fill="rgb(234,122,30)" fg:x="122870" fg:w="85"/><text x="85.3477%" y="1103.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (58 samples, 0.04%)</title><rect x="85.1164%" y="1077" width="0.0402%" height="15" fill="rgb(236,25,46)" fg:x="122897" fg:w="58"/><text x="85.3664%" y="1087.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="85.1649%" y="1077" width="0.0118%" height="15" fill="rgb(217,52,54)" fg:x="122967" fg:w="17"/><text x="85.4149%" y="1087.50"></text></g><g><title>anon.ff31cb8ca33487f561eade7f4db5437a.18.llvm.3263491571492513569 (41 samples, 0.03%)</title><rect x="85.1566%" y="1093" width="0.0284%" height="15" fill="rgb(222,29,26)" fg:x="122955" fg:w="41"/><text x="85.4066%" y="1103.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (33 samples, 0.02%)</title><rect x="85.2037%" y="1061" width="0.0229%" height="15" fill="rgb(216,177,29)" fg:x="123023" fg:w="33"/><text x="85.4537%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (32 samples, 0.02%)</title><rect x="85.2043%" y="1045" width="0.0222%" height="15" fill="rgb(247,136,51)" fg:x="123024" fg:w="32"/><text x="85.4543%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 0.03%)</title><rect x="85.1995%" y="1077" width="0.0298%" height="15" fill="rgb(231,47,47)" fg:x="123017" fg:w="43"/><text x="85.4495%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="85.2293%" y="1077" width="0.0270%" height="15" fill="rgb(211,192,36)" fg:x="123060" fg:w="39"/><text x="85.4793%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (39 samples, 0.03%)</title><rect x="85.2293%" y="1061" width="0.0270%" height="15" fill="rgb(229,156,32)" fg:x="123060" fg:w="39"/><text x="85.4793%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (37 samples, 0.03%)</title><rect x="85.2307%" y="1045" width="0.0256%" height="15" fill="rgb(248,213,20)" fg:x="123062" fg:w="37"/><text x="85.4807%" y="1055.50"></text></g><g><title>parking::Inner::park (17 samples, 0.01%)</title><rect x="85.2701%" y="1077" width="0.0118%" height="15" fill="rgb(217,64,7)" fg:x="123119" fg:w="17"/><text x="85.5201%" y="1087.50"></text></g><g><title>polling::epoll::Poller::modify (26 samples, 0.02%)</title><rect x="85.2826%" y="1077" width="0.0180%" height="15" fill="rgb(232,142,8)" fg:x="123137" fg:w="26"/><text x="85.5326%" y="1087.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (152 samples, 0.11%)</title><rect x="85.1967%" y="1093" width="0.1053%" height="15" fill="rgb(224,92,44)" fg:x="123013" fg:w="152"/><text x="85.4467%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (30 samples, 0.02%)</title><rect x="85.3172%" y="693" width="0.0208%" height="15" fill="rgb(214,169,17)" fg:x="123187" fg:w="30"/><text x="85.5672%" y="703.50"></text></g><g><title>async_channel::bounded (32 samples, 0.02%)</title><rect x="85.3172%" y="853" width="0.0222%" height="15" fill="rgb(210,59,37)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (32 samples, 0.02%)</title><rect x="85.3172%" y="837" width="0.0222%" height="15" fill="rgb(214,116,48)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.02%)</title><rect x="85.3172%" y="821" width="0.0222%" height="15" fill="rgb(244,191,6)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="85.3172%" y="805" width="0.0222%" height="15" fill="rgb(241,50,52)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="85.3172%" y="789" width="0.0222%" height="15" fill="rgb(236,75,39)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="799.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.02%)</title><rect x="85.3172%" y="773" width="0.0222%" height="15" fill="rgb(236,99,0)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="783.50"></text></g><g><title>__rg_alloc (32 samples, 0.02%)</title><rect x="85.3172%" y="757" width="0.0222%" height="15" fill="rgb(207,202,15)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.02%)</title><rect x="85.3172%" y="741" width="0.0222%" height="15" fill="rgb(233,207,14)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="751.50"></text></g><g><title>sn_rust_alloc (32 samples, 0.02%)</title><rect x="85.3172%" y="725" width="0.0222%" height="15" fill="rgb(226,27,51)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="735.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (32 samples, 0.02%)</title><rect x="85.3172%" y="709" width="0.0222%" height="15" fill="rgb(206,104,42)" fg:x="123187" fg:w="32"/><text x="85.5672%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (56 samples, 0.04%)</title><rect x="85.6995%" y="485" width="0.0388%" height="15" fill="rgb(212,225,4)" fg:x="123739" fg:w="56"/><text x="85.9495%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (15 samples, 0.01%)</title><rect x="85.8235%" y="421" width="0.0104%" height="15" fill="rgb(233,96,42)" fg:x="123918" fg:w="15"/><text x="86.0735%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (52 samples, 0.04%)</title><rect x="85.9655%" y="389" width="0.0360%" height="15" fill="rgb(229,21,32)" fg:x="124123" fg:w="52"/><text x="86.2155%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (52 samples, 0.04%)</title><rect x="85.9655%" y="373" width="0.0360%" height="15" fill="rgb(226,216,24)" fg:x="124123" fg:w="52"/><text x="86.2155%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (46 samples, 0.03%)</title><rect x="85.9697%" y="357" width="0.0319%" height="15" fill="rgb(221,163,17)" fg:x="124129" fg:w="46"/><text x="86.2197%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (46 samples, 0.03%)</title><rect x="85.9697%" y="341" width="0.0319%" height="15" fill="rgb(216,216,42)" fg:x="124129" fg:w="46"/><text x="86.2197%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (46 samples, 0.03%)</title><rect x="85.9697%" y="325" width="0.0319%" height="15" fill="rgb(240,118,7)" fg:x="124129" fg:w="46"/><text x="86.2197%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 0.10%)</title><rect x="86.0015%" y="389" width="0.1004%" height="15" fill="rgb(221,67,37)" fg:x="124175" fg:w="145"/><text x="86.2515%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (615 samples, 0.43%)</title><rect x="85.7501%" y="437" width="0.4259%" height="15" fill="rgb(241,32,44)" fg:x="123812" fg:w="615"/><text x="86.0001%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (494 samples, 0.34%)</title><rect x="85.8339%" y="421" width="0.3421%" height="15" fill="rgb(235,204,43)" fg:x="123933" fg:w="494"/><text x="86.0839%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (399 samples, 0.28%)</title><rect x="85.8997%" y="405" width="0.2763%" height="15" fill="rgb(213,116,10)" fg:x="124028" fg:w="399"/><text x="86.1497%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (107 samples, 0.07%)</title><rect x="86.1019%" y="389" width="0.0741%" height="15" fill="rgb(239,15,48)" fg:x="124320" fg:w="107"/><text x="86.3519%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (107 samples, 0.07%)</title><rect x="86.1019%" y="373" width="0.0741%" height="15" fill="rgb(207,123,36)" fg:x="124320" fg:w="107"/><text x="86.3519%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (46 samples, 0.03%)</title><rect x="86.1442%" y="357" width="0.0319%" height="15" fill="rgb(209,103,30)" fg:x="124381" fg:w="46"/><text x="86.3942%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (46 samples, 0.03%)</title><rect x="86.1442%" y="341" width="0.0319%" height="15" fill="rgb(238,100,19)" fg:x="124381" fg:w="46"/><text x="86.3942%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (36 samples, 0.02%)</title><rect x="86.1511%" y="325" width="0.0249%" height="15" fill="rgb(244,30,14)" fg:x="124391" fg:w="36"/><text x="86.4011%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (36 samples, 0.02%)</title><rect x="86.1511%" y="309" width="0.0249%" height="15" fill="rgb(249,174,6)" fg:x="124391" fg:w="36"/><text x="86.4011%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (682 samples, 0.47%)</title><rect x="85.7383%" y="485" width="0.4723%" height="15" fill="rgb(235,213,41)" fg:x="123795" fg:w="682"/><text x="85.9883%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (682 samples, 0.47%)</title><rect x="85.7383%" y="469" width="0.4723%" height="15" fill="rgb(213,118,6)" fg:x="123795" fg:w="682"/><text x="85.9883%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (682 samples, 0.47%)</title><rect x="85.7383%" y="453" width="0.4723%" height="15" fill="rgb(235,44,51)" fg:x="123795" fg:w="682"/><text x="85.9883%" y="463.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (50 samples, 0.03%)</title><rect x="86.1760%" y="437" width="0.0346%" height="15" fill="rgb(217,9,53)" fg:x="124427" fg:w="50"/><text x="86.4260%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,573 samples, 1.09%)</title><rect x="86.5978%" y="453" width="1.0894%" height="15" fill="rgb(237,172,34)" fg:x="125036" fg:w="1573"/><text x="86.8478%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,116 samples, 0.77%)</title><rect x="86.9143%" y="437" width="0.7729%" height="15" fill="rgb(206,206,11)" fg:x="125493" fg:w="1116"/><text x="87.1643%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1,116 samples, 0.77%)</title><rect x="86.9143%" y="421" width="0.7729%" height="15" fill="rgb(214,149,29)" fg:x="125493" fg:w="1116"/><text x="87.1643%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,994 samples, 1.38%)</title><rect x="86.3187%" y="469" width="1.3810%" height="15" fill="rgb(208,123,3)" fg:x="124633" fg:w="1994"/><text x="86.5687%" y="479.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (18 samples, 0.01%)</title><rect x="87.6873%" y="453" width="0.0125%" height="15" fill="rgb(229,126,4)" fg:x="126609" fg:w="18"/><text x="87.9373%" y="463.50"></text></g><g><title>async_executor::steal (2,156 samples, 1.49%)</title><rect x="86.2107%" y="485" width="1.4932%" height="15" fill="rgb(222,92,36)" fg:x="124477" fg:w="2156"/><text x="86.4607%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (2,510 samples, 1.74%)</title><rect x="88.5973%" y="453" width="1.7384%" height="15" fill="rgb(216,39,41)" fg:x="127923" fg:w="2510"/><text x="88.8473%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,456 samples, 1.70%)</title><rect x="88.6347%" y="437" width="1.7010%" height="15" fill="rgb(253,127,28)" fg:x="127977" fg:w="2456"/><text x="88.8847%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,456 samples, 1.70%)</title><rect x="88.6347%" y="421" width="1.7010%" height="15" fill="rgb(249,152,51)" fg:x="127977" fg:w="2456"/><text x="88.8847%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,456 samples, 1.70%)</title><rect x="88.6347%" y="405" width="1.7010%" height="15" fill="rgb(209,123,42)" fg:x="127977" fg:w="2456"/><text x="88.8847%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,558 samples, 2.46%)</title><rect x="87.9802%" y="469" width="2.4642%" height="15" fill="rgb(241,118,22)" fg:x="127032" fg:w="3558"/><text x="88.2302%" y="479.50">co..</text></g><g><title>core::sync::atomic::AtomicUsize::load (157 samples, 0.11%)</title><rect x="90.3357%" y="453" width="0.1087%" height="15" fill="rgb(208,25,7)" fg:x="130433" fg:w="157"/><text x="90.5857%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (88 samples, 0.06%)</title><rect x="90.3835%" y="437" width="0.0609%" height="15" fill="rgb(243,144,39)" fg:x="130502" fg:w="88"/><text x="90.6335%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (344 samples, 0.24%)</title><rect x="90.4929%" y="453" width="0.2382%" height="15" fill="rgb(250,50,5)" fg:x="130660" fg:w="344"/><text x="90.7429%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (344 samples, 0.24%)</title><rect x="90.4929%" y="437" width="0.2382%" height="15" fill="rgb(207,67,11)" fg:x="130660" fg:w="344"/><text x="90.7429%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (344 samples, 0.24%)</title><rect x="90.4929%" y="421" width="0.2382%" height="15" fill="rgb(245,204,40)" fg:x="130660" fg:w="344"/><text x="90.7429%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (344 samples, 0.24%)</title><rect x="90.4929%" y="405" width="0.2382%" height="15" fill="rgb(238,228,24)" fg:x="130660" fg:w="344"/><text x="90.7429%" y="415.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (48 samples, 0.03%)</title><rect x="90.7415%" y="453" width="0.0332%" height="15" fill="rgb(217,116,22)" fg:x="131019" fg:w="48"/><text x="90.9915%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (45 samples, 0.03%)</title><rect x="90.7436%" y="437" width="0.0312%" height="15" fill="rgb(234,98,12)" fg:x="131022" fg:w="45"/><text x="90.9936%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (45 samples, 0.03%)</title><rect x="90.7436%" y="421" width="0.0312%" height="15" fill="rgb(242,170,50)" fg:x="131022" fg:w="45"/><text x="90.9936%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (26 samples, 0.02%)</title><rect x="90.7838%" y="453" width="0.0180%" height="15" fill="rgb(235,7,5)" fg:x="131080" fg:w="26"/><text x="91.0338%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="90.7838%" y="437" width="0.0180%" height="15" fill="rgb(241,114,28)" fg:x="131080" fg:w="26"/><text x="91.0338%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (157 samples, 0.11%)</title><rect x="90.8018%" y="453" width="0.1087%" height="15" fill="rgb(246,112,42)" fg:x="131106" fg:w="157"/><text x="91.0518%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (157 samples, 0.11%)</title><rect x="90.8018%" y="437" width="0.1087%" height="15" fill="rgb(248,228,14)" fg:x="131106" fg:w="157"/><text x="91.0518%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (180 samples, 0.12%)</title><rect x="90.9105%" y="453" width="0.1247%" height="15" fill="rgb(208,133,18)" fg:x="131263" fg:w="180"/><text x="91.1605%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_or (180 samples, 0.12%)</title><rect x="90.9105%" y="437" width="0.1247%" height="15" fill="rgb(207,35,49)" fg:x="131263" fg:w="180"/><text x="91.1605%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (217 samples, 0.15%)</title><rect x="91.0352%" y="453" width="0.1503%" height="15" fill="rgb(205,68,36)" fg:x="131443" fg:w="217"/><text x="91.2852%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (217 samples, 0.15%)</title><rect x="91.0352%" y="437" width="0.1503%" height="15" fill="rgb(245,62,40)" fg:x="131443" fg:w="217"/><text x="91.2852%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (5,028 samples, 3.48%)</title><rect x="87.7039%" y="485" width="3.4823%" height="15" fill="rgb(228,27,24)" fg:x="126633" fg:w="5028"/><text x="87.9539%" y="495.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,071 samples, 0.74%)</title><rect x="90.4444%" y="469" width="0.7418%" height="15" fill="rgb(253,19,12)" fg:x="130590" fg:w="1071"/><text x="90.6944%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (285 samples, 0.20%)</title><rect x="91.1862%" y="485" width="0.1974%" height="15" fill="rgb(232,28,20)" fg:x="131661" fg:w="285"/><text x="91.4362%" y="495.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (285 samples, 0.20%)</title><rect x="91.1862%" y="469" width="0.1974%" height="15" fill="rgb(218,35,51)" fg:x="131661" fg:w="285"/><text x="91.4362%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (285 samples, 0.20%)</title><rect x="91.1862%" y="453" width="0.1974%" height="15" fill="rgb(212,90,40)" fg:x="131661" fg:w="285"/><text x="91.4362%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (285 samples, 0.20%)</title><rect x="91.1862%" y="437" width="0.1974%" height="15" fill="rgb(220,172,12)" fg:x="131661" fg:w="285"/><text x="91.4362%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (274 samples, 0.19%)</title><rect x="91.1938%" y="421" width="0.1898%" height="15" fill="rgb(226,159,20)" fg:x="131672" fg:w="274"/><text x="91.4438%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (274 samples, 0.19%)</title><rect x="91.1938%" y="405" width="0.1898%" height="15" fill="rgb(234,205,16)" fg:x="131672" fg:w="274"/><text x="91.4438%" y="415.50"></text></g><g><title>fastrand::RNG::__getit (15 samples, 0.01%)</title><rect x="91.3940%" y="437" width="0.0104%" height="15" fill="rgb(207,9,39)" fg:x="131961" fg:w="15"/><text x="91.6440%" y="447.50"></text></g><g><title>fastrand::Rng::gen_u64 (16 samples, 0.01%)</title><rect x="91.4127%" y="389" width="0.0111%" height="15" fill="rgb(249,143,15)" fg:x="131988" fg:w="16"/><text x="91.6627%" y="399.50"></text></g><g><title>fastrand::usize (63 samples, 0.04%)</title><rect x="91.3836%" y="485" width="0.0436%" height="15" fill="rgb(253,133,29)" fg:x="131946" fg:w="63"/><text x="91.6336%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (56 samples, 0.04%)</title><rect x="91.3884%" y="469" width="0.0388%" height="15" fill="rgb(221,187,0)" fg:x="131953" fg:w="56"/><text x="91.6384%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (55 samples, 0.04%)</title><rect x="91.3891%" y="453" width="0.0381%" height="15" fill="rgb(205,204,26)" fg:x="131954" fg:w="55"/><text x="91.6391%" y="463.50"></text></g><g><title>fastrand::usize::{{closure}} (33 samples, 0.02%)</title><rect x="91.4044%" y="437" width="0.0229%" height="15" fill="rgb(224,68,54)" fg:x="131976" fg:w="33"/><text x="91.6544%" y="447.50"></text></g><g><title>fastrand::Rng::usize (33 samples, 0.02%)</title><rect x="91.4044%" y="421" width="0.0229%" height="15" fill="rgb(209,67,4)" fg:x="131976" fg:w="33"/><text x="91.6544%" y="431.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (23 samples, 0.02%)</title><rect x="91.4113%" y="405" width="0.0159%" height="15" fill="rgb(228,229,18)" fg:x="131986" fg:w="23"/><text x="91.6613%" y="415.50"></text></g><g><title>std::sync::poison::Flag::get (59 samples, 0.04%)</title><rect x="91.4272%" y="437" width="0.0409%" height="15" fill="rgb(231,89,13)" fg:x="132009" fg:w="59"/><text x="91.6772%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (59 samples, 0.04%)</title><rect x="91.4272%" y="421" width="0.0409%" height="15" fill="rgb(210,182,18)" fg:x="132009" fg:w="59"/><text x="91.6772%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (59 samples, 0.04%)</title><rect x="91.4272%" y="405" width="0.0409%" height="15" fill="rgb(240,105,2)" fg:x="132009" fg:w="59"/><text x="91.6772%" y="415.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (66 samples, 0.05%)</title><rect x="91.4272%" y="469" width="0.0457%" height="15" fill="rgb(207,170,50)" fg:x="132009" fg:w="66"/><text x="91.6772%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (66 samples, 0.05%)</title><rect x="91.4272%" y="453" width="0.0457%" height="15" fill="rgb(232,133,24)" fg:x="132009" fg:w="66"/><text x="91.6772%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (435 samples, 0.30%)</title><rect x="91.4798%" y="437" width="0.3013%" height="15" fill="rgb(235,166,27)" fg:x="132085" fg:w="435"/><text x="91.7298%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (435 samples, 0.30%)</title><rect x="91.4798%" y="421" width="0.3013%" height="15" fill="rgb(209,19,13)" fg:x="132085" fg:w="435"/><text x="91.7298%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (93 samples, 0.06%)</title><rect x="91.7811%" y="437" width="0.0644%" height="15" fill="rgb(226,79,39)" fg:x="132520" fg:w="93"/><text x="92.0311%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (93 samples, 0.06%)</title><rect x="91.7811%" y="421" width="0.0644%" height="15" fill="rgb(222,163,10)" fg:x="132520" fg:w="93"/><text x="92.0311%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (16 samples, 0.01%)</title><rect x="91.8455%" y="437" width="0.0111%" height="15" fill="rgb(214,44,19)" fg:x="132613" fg:w="16"/><text x="92.0955%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (16 samples, 0.01%)</title><rect x="91.8455%" y="421" width="0.0111%" height="15" fill="rgb(210,217,13)" fg:x="132613" fg:w="16"/><text x="92.0955%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16 samples, 0.01%)</title><rect x="91.8455%" y="405" width="0.0111%" height="15" fill="rgb(237,61,54)" fg:x="132613" fg:w="16"/><text x="92.0955%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (9,164 samples, 6.35%)</title><rect x="85.5146%" y="501" width="6.3468%" height="15" fill="rgb(226,184,24)" fg:x="123472" fg:w="9164"/><text x="85.7646%" y="511.50">async_ex..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (627 samples, 0.43%)</title><rect x="91.4272%" y="485" width="0.4342%" height="15" fill="rgb(223,226,4)" fg:x="132009" fg:w="627"/><text x="91.6772%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (561 samples, 0.39%)</title><rect x="91.4729%" y="469" width="0.3885%" height="15" fill="rgb(210,26,41)" fg:x="132075" fg:w="561"/><text x="91.7229%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (561 samples, 0.39%)</title><rect x="91.4729%" y="453" width="0.3885%" height="15" fill="rgb(220,221,6)" fg:x="132075" fg:w="561"/><text x="91.7229%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (47 samples, 0.03%)</title><rect x="91.8663%" y="421" width="0.0326%" height="15" fill="rgb(225,89,49)" fg:x="132643" fg:w="47"/><text x="92.1163%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (47 samples, 0.03%)</title><rect x="91.8663%" y="405" width="0.0326%" height="15" fill="rgb(218,70,45)" fg:x="132643" fg:w="47"/><text x="92.1163%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (49 samples, 0.03%)</title><rect x="91.8656%" y="485" width="0.0339%" height="15" fill="rgb(238,166,21)" fg:x="132642" fg:w="49"/><text x="92.1156%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.03%)</title><rect x="91.8656%" y="469" width="0.0339%" height="15" fill="rgb(224,141,44)" fg:x="132642" fg:w="49"/><text x="92.1156%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (48 samples, 0.03%)</title><rect x="91.8663%" y="453" width="0.0332%" height="15" fill="rgb(230,12,49)" fg:x="132643" fg:w="48"/><text x="92.1163%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (48 samples, 0.03%)</title><rect x="91.8663%" y="437" width="0.0332%" height="15" fill="rgb(212,174,12)" fg:x="132643" fg:w="48"/><text x="92.1163%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (107 samples, 0.07%)</title><rect x="91.8995%" y="485" width="0.0741%" height="15" fill="rgb(246,67,9)" fg:x="132691" fg:w="107"/><text x="92.1495%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (107 samples, 0.07%)</title><rect x="91.8995%" y="469" width="0.0741%" height="15" fill="rgb(239,35,23)" fg:x="132691" fg:w="107"/><text x="92.1495%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (23 samples, 0.02%)</title><rect x="91.9882%" y="405" width="0.0159%" height="15" fill="rgb(211,167,0)" fg:x="132819" fg:w="23"/><text x="92.2382%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="91.9882%" y="389" width="0.0159%" height="15" fill="rgb(225,119,45)" fg:x="132819" fg:w="23"/><text x="92.2382%" y="399.50"></text></g><g><title>__libc_write (48 samples, 0.03%)</title><rect x="92.0076%" y="389" width="0.0332%" height="15" fill="rgb(210,162,6)" fg:x="132847" fg:w="48"/><text x="92.2576%" y="399.50"></text></g><g><title>__pthread_enable_asynccancel (16 samples, 0.01%)</title><rect x="92.0298%" y="373" width="0.0111%" height="15" fill="rgb(208,118,35)" fg:x="132879" fg:w="16"/><text x="92.2798%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::notify (86 samples, 0.06%)</title><rect x="91.9820%" y="437" width="0.0596%" height="15" fill="rgb(239,4,53)" fg:x="132810" fg:w="86"/><text x="92.2320%" y="447.50"></text></g><g><title>polling::Poller::notify (78 samples, 0.05%)</title><rect x="91.9875%" y="421" width="0.0540%" height="15" fill="rgb(213,130,21)" fg:x="132818" fg:w="78"/><text x="92.2375%" y="431.50"></text></g><g><title>polling::epoll::Poller::notify (53 samples, 0.04%)</title><rect x="92.0048%" y="405" width="0.0367%" height="15" fill="rgb(235,148,0)" fg:x="132843" fg:w="53"/><text x="92.2548%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (19 samples, 0.01%)</title><rect x="92.0415%" y="437" width="0.0132%" height="15" fill="rgb(244,224,18)" fg:x="132896" fg:w="19"/><text x="92.2915%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.01%)</title><rect x="92.0415%" y="421" width="0.0132%" height="15" fill="rgb(211,214,4)" fg:x="132896" fg:w="19"/><text x="92.2915%" y="431.50"></text></g><g><title>core::mem::drop (18 samples, 0.01%)</title><rect x="92.0893%" y="405" width="0.0125%" height="15" fill="rgb(206,119,25)" fg:x="132965" fg:w="18"/><text x="92.3393%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (18 samples, 0.01%)</title><rect x="92.0893%" y="389" width="0.0125%" height="15" fill="rgb(243,93,47)" fg:x="132965" fg:w="18"/><text x="92.3393%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="92.0893%" y="373" width="0.0125%" height="15" fill="rgb(224,194,6)" fg:x="132965" fg:w="18"/><text x="92.3393%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="92.0900%" y="357" width="0.0118%" height="15" fill="rgb(243,229,6)" fg:x="132966" fg:w="17"/><text x="92.3400%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (17 samples, 0.01%)</title><rect x="92.0900%" y="341" width="0.0118%" height="15" fill="rgb(207,23,50)" fg:x="132966" fg:w="17"/><text x="92.3400%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (17 samples, 0.01%)</title><rect x="92.0900%" y="325" width="0.0118%" height="15" fill="rgb(253,192,32)" fg:x="132966" fg:w="17"/><text x="92.3400%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (17 samples, 0.01%)</title><rect x="92.0900%" y="309" width="0.0118%" height="15" fill="rgb(213,21,6)" fg:x="132966" fg:w="17"/><text x="92.3400%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (114 samples, 0.08%)</title><rect x="92.1018%" y="405" width="0.0790%" height="15" fill="rgb(243,151,13)" fg:x="132983" fg:w="114"/><text x="92.3518%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (114 samples, 0.08%)</title><rect x="92.1018%" y="389" width="0.0790%" height="15" fill="rgb(233,165,41)" fg:x="132983" fg:w="114"/><text x="92.3518%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (24 samples, 0.02%)</title><rect x="92.1807%" y="357" width="0.0166%" height="15" fill="rgb(246,176,45)" fg:x="133097" fg:w="24"/><text x="92.4307%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (24 samples, 0.02%)</title><rect x="92.1807%" y="341" width="0.0166%" height="15" fill="rgb(217,170,52)" fg:x="133097" fg:w="24"/><text x="92.4307%" y="351.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (76 samples, 0.05%)</title><rect x="92.1807%" y="405" width="0.0526%" height="15" fill="rgb(214,203,54)" fg:x="133097" fg:w="76"/><text x="92.4307%" y="415.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (76 samples, 0.05%)</title><rect x="92.1807%" y="389" width="0.0526%" height="15" fill="rgb(248,215,49)" fg:x="133097" fg:w="76"/><text x="92.4307%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (76 samples, 0.05%)</title><rect x="92.1807%" y="373" width="0.0526%" height="15" fill="rgb(208,46,10)" fg:x="133097" fg:w="76"/><text x="92.4307%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wake (52 samples, 0.04%)</title><rect x="92.1974%" y="357" width="0.0360%" height="15" fill="rgb(254,5,31)" fg:x="133121" fg:w="52"/><text x="92.4474%" y="367.50"></text></g><g><title>syscall (52 samples, 0.04%)</title><rect x="92.1974%" y="341" width="0.0360%" height="15" fill="rgb(222,104,33)" fg:x="133121" fg:w="52"/><text x="92.4474%" y="351.50"></text></g><g><title>parking::Unparker::unpark (286 samples, 0.20%)</title><rect x="92.0547%" y="437" width="0.1981%" height="15" fill="rgb(248,49,16)" fg:x="132915" fg:w="286"/><text x="92.3047%" y="447.50"></text></g><g><title>parking::Inner::unpark (245 samples, 0.17%)</title><rect x="92.0831%" y="421" width="0.1697%" height="15" fill="rgb(232,198,41)" fg:x="132956" fg:w="245"/><text x="92.3331%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.02%)</title><rect x="92.2334%" y="405" width="0.0194%" height="15" fill="rgb(214,125,3)" fg:x="133173" fg:w="28"/><text x="92.4834%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (26 samples, 0.02%)</title><rect x="92.2348%" y="389" width="0.0180%" height="15" fill="rgb(229,220,28)" fg:x="133175" fg:w="26"/><text x="92.4848%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (26 samples, 0.02%)</title><rect x="92.2348%" y="373" width="0.0180%" height="15" fill="rgb(222,64,37)" fg:x="133175" fg:w="26"/><text x="92.4848%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (26 samples, 0.02%)</title><rect x="92.2348%" y="357" width="0.0180%" height="15" fill="rgb(249,184,13)" fg:x="133175" fg:w="26"/><text x="92.4848%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="92.2348%" y="341" width="0.0180%" height="15" fill="rgb(252,176,6)" fg:x="133175" fg:w="26"/><text x="92.4848%" y="351.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (17 samples, 0.01%)</title><rect x="92.2528%" y="405" width="0.0118%" height="15" fill="rgb(228,153,7)" fg:x="133201" fg:w="17"/><text x="92.5028%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="92.2528%" y="389" width="0.0118%" height="15" fill="rgb(242,193,5)" fg:x="133201" fg:w="17"/><text x="92.5028%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="92.2528%" y="373" width="0.0118%" height="15" fill="rgb(232,140,9)" fg:x="133201" fg:w="17"/><text x="92.5028%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.01%)</title><rect x="92.2528%" y="357" width="0.0118%" height="15" fill="rgb(213,222,16)" fg:x="133201" fg:w="17"/><text x="92.5028%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (420 samples, 0.29%)</title><rect x="91.9743%" y="453" width="0.2909%" height="15" fill="rgb(222,75,50)" fg:x="132799" fg:w="420"/><text x="92.2243%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.01%)</title><rect x="92.2528%" y="437" width="0.0125%" height="15" fill="rgb(205,180,2)" fg:x="133201" fg:w="18"/><text x="92.5028%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.01%)</title><rect x="92.2528%" y="421" width="0.0125%" height="15" fill="rgb(216,34,7)" fg:x="133201" fg:w="18"/><text x="92.5028%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (585 samples, 0.41%)</title><rect x="91.9737%" y="485" width="0.4052%" height="15" fill="rgb(253,16,32)" fg:x="132798" fg:w="585"/><text x="92.2237%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (585 samples, 0.41%)</title><rect x="91.9737%" y="469" width="0.4052%" height="15" fill="rgb(208,97,28)" fg:x="132798" fg:w="585"/><text x="92.2237%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (164 samples, 0.11%)</title><rect x="92.2652%" y="453" width="0.1136%" height="15" fill="rgb(225,92,11)" fg:x="133219" fg:w="164"/><text x="92.5152%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 samples, 0.11%)</title><rect x="92.2652%" y="437" width="0.1136%" height="15" fill="rgb(243,38,12)" fg:x="133219" fg:w="164"/><text x="92.5152%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (158 samples, 0.11%)</title><rect x="92.2694%" y="421" width="0.1094%" height="15" fill="rgb(208,139,16)" fg:x="133225" fg:w="158"/><text x="92.5194%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (158 samples, 0.11%)</title><rect x="92.2694%" y="405" width="0.1094%" height="15" fill="rgb(227,24,9)" fg:x="133225" fg:w="158"/><text x="92.5194%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (47 samples, 0.03%)</title><rect x="92.3823%" y="437" width="0.0326%" height="15" fill="rgb(206,62,11)" fg:x="133388" fg:w="47"/><text x="92.6323%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.03%)</title><rect x="92.3823%" y="421" width="0.0326%" height="15" fill="rgb(228,134,27)" fg:x="133388" fg:w="47"/><text x="92.6323%" y="431.50"></text></g><g><title>async_executor::State::notify (806 samples, 0.56%)</title><rect x="91.8615%" y="501" width="0.5582%" height="15" fill="rgb(205,55,33)" fg:x="132636" fg:w="806"/><text x="92.1115%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.04%)</title><rect x="92.3788%" y="485" width="0.0409%" height="15" fill="rgb(243,75,43)" fg:x="133383" fg:w="59"/><text x="92.6288%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (54 samples, 0.04%)</title><rect x="92.3823%" y="469" width="0.0374%" height="15" fill="rgb(223,27,42)" fg:x="133388" fg:w="54"/><text x="92.6323%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (54 samples, 0.04%)</title><rect x="92.3823%" y="453" width="0.0374%" height="15" fill="rgb(232,189,33)" fg:x="133388" fg:w="54"/><text x="92.6323%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (143 samples, 0.10%)</title><rect x="92.4522%" y="469" width="0.0990%" height="15" fill="rgb(210,9,39)" fg:x="133489" fg:w="143"/><text x="92.7022%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (142 samples, 0.10%)</title><rect x="92.4529%" y="453" width="0.0983%" height="15" fill="rgb(242,85,26)" fg:x="133490" fg:w="142"/><text x="92.7029%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (139 samples, 0.10%)</title><rect x="92.4550%" y="437" width="0.0963%" height="15" fill="rgb(248,44,4)" fg:x="133493" fg:w="139"/><text x="92.7050%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (139 samples, 0.10%)</title><rect x="92.4550%" y="421" width="0.0963%" height="15" fill="rgb(250,96,46)" fg:x="133493" fg:w="139"/><text x="92.7050%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (139 samples, 0.10%)</title><rect x="92.4550%" y="405" width="0.0963%" height="15" fill="rgb(229,116,26)" fg:x="133493" fg:w="139"/><text x="92.7050%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (139 samples, 0.10%)</title><rect x="92.4550%" y="389" width="0.0963%" height="15" fill="rgb(246,94,34)" fg:x="133493" fg:w="139"/><text x="92.7050%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (18 samples, 0.01%)</title><rect x="92.5513%" y="469" width="0.0125%" height="15" fill="rgb(251,73,21)" fg:x="133632" fg:w="18"/><text x="92.8013%" y="479.50"></text></g><g><title>async_executor::Sleepers::insert (219 samples, 0.15%)</title><rect x="92.4446%" y="485" width="0.1517%" height="15" fill="rgb(254,121,25)" fg:x="133478" fg:w="219"/><text x="92.6946%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (47 samples, 0.03%)</title><rect x="92.5637%" y="469" width="0.0326%" height="15" fill="rgb(215,161,49)" fg:x="133650" fg:w="47"/><text x="92.8137%" y="479.50"></text></g><g><title>core::ptr::write (32 samples, 0.02%)</title><rect x="92.5741%" y="453" width="0.0222%" height="15" fill="rgb(221,43,13)" fg:x="133665" fg:w="32"/><text x="92.8241%" y="463.50"></text></g><g><title>async_executor::Sleepers::is_notified (20 samples, 0.01%)</title><rect x="92.5963%" y="485" width="0.0139%" height="15" fill="rgb(249,5,37)" fg:x="133697" fg:w="20"/><text x="92.8463%" y="495.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="92.6877%" y="469" width="0.0270%" height="15" fill="rgb(226,25,44)" fg:x="133829" fg:w="39"/><text x="92.9377%" y="479.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (165 samples, 0.11%)</title><rect x="92.7147%" y="469" width="0.1143%" height="15" fill="rgb(238,189,16)" fg:x="133868" fg:w="165"/><text x="92.9647%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (163 samples, 0.11%)</title><rect x="92.7161%" y="453" width="0.1129%" height="15" fill="rgb(251,186,8)" fg:x="133870" fg:w="163"/><text x="92.9661%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (163 samples, 0.11%)</title><rect x="92.7161%" y="437" width="0.1129%" height="15" fill="rgb(254,34,31)" fg:x="133870" fg:w="163"/><text x="92.9661%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (163 samples, 0.11%)</title><rect x="92.7161%" y="421" width="0.1129%" height="15" fill="rgb(225,215,27)" fg:x="133870" fg:w="163"/><text x="92.9661%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (163 samples, 0.11%)</title><rect x="92.7161%" y="405" width="0.1129%" height="15" fill="rgb(221,192,48)" fg:x="133870" fg:w="163"/><text x="92.9661%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (163 samples, 0.11%)</title><rect x="92.7161%" y="389" width="0.1129%" height="15" fill="rgb(219,137,20)" fg:x="133870" fg:w="163"/><text x="92.9661%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (39 samples, 0.03%)</title><rect x="92.8290%" y="469" width="0.0270%" height="15" fill="rgb(219,84,11)" fg:x="134033" fg:w="39"/><text x="93.0790%" y="479.50"></text></g><g><title>core::ptr::write (29 samples, 0.02%)</title><rect x="92.8359%" y="453" width="0.0201%" height="15" fill="rgb(224,10,23)" fg:x="134043" fg:w="29"/><text x="93.0859%" y="463.50"></text></g><g><title>async_executor::Sleepers::update (367 samples, 0.25%)</title><rect x="92.6101%" y="485" width="0.2542%" height="15" fill="rgb(248,22,39)" fg:x="133717" fg:w="367"/><text x="92.8601%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (237 samples, 0.16%)</title><rect x="92.8719%" y="421" width="0.1641%" height="15" fill="rgb(212,154,20)" fg:x="134095" fg:w="237"/><text x="93.1219%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (237 samples, 0.16%)</title><rect x="92.8719%" y="405" width="0.1641%" height="15" fill="rgb(236,199,50)" fg:x="134095" fg:w="237"/><text x="93.1219%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (256 samples, 0.18%)</title><rect x="92.8643%" y="485" width="0.1773%" height="15" fill="rgb(211,9,17)" fg:x="134084" fg:w="256"/><text x="93.1143%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (256 samples, 0.18%)</title><rect x="92.8643%" y="469" width="0.1773%" height="15" fill="rgb(243,216,36)" fg:x="134084" fg:w="256"/><text x="93.1143%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (245 samples, 0.17%)</title><rect x="92.8719%" y="453" width="0.1697%" height="15" fill="rgb(250,2,10)" fg:x="134095" fg:w="245"/><text x="93.1219%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (245 samples, 0.17%)</title><rect x="92.8719%" y="437" width="0.1697%" height="15" fill="rgb(226,50,48)" fg:x="134095" fg:w="245"/><text x="93.1219%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (291 samples, 0.20%)</title><rect x="93.0416%" y="485" width="0.2015%" height="15" fill="rgb(243,81,16)" fg:x="134340" fg:w="291"/><text x="93.2916%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (291 samples, 0.20%)</title><rect x="93.0416%" y="469" width="0.2015%" height="15" fill="rgb(250,14,2)" fg:x="134340" fg:w="291"/><text x="93.2916%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (194 samples, 0.13%)</title><rect x="93.2432%" y="485" width="0.1344%" height="15" fill="rgb(233,135,29)" fg:x="134631" fg:w="194"/><text x="93.4932%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_store (194 samples, 0.13%)</title><rect x="93.2432%" y="469" width="0.1344%" height="15" fill="rgb(224,64,43)" fg:x="134631" fg:w="194"/><text x="93.4932%" y="479.50"></text></g><g><title>std::sync::poison::Flag::get (34 samples, 0.02%)</title><rect x="93.3824%" y="437" width="0.0235%" height="15" fill="rgb(238,84,13)" fg:x="134832" fg:w="34"/><text x="93.6324%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (34 samples, 0.02%)</title><rect x="93.3824%" y="421" width="0.0235%" height="15" fill="rgb(253,48,26)" fg:x="134832" fg:w="34"/><text x="93.6324%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (33 samples, 0.02%)</title><rect x="93.3831%" y="405" width="0.0229%" height="15" fill="rgb(205,223,31)" fg:x="134833" fg:w="33"/><text x="93.6331%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (51 samples, 0.04%)</title><rect x="93.3775%" y="469" width="0.0353%" height="15" fill="rgb(221,41,32)" fg:x="134825" fg:w="51"/><text x="93.6275%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (51 samples, 0.04%)</title><rect x="93.3775%" y="453" width="0.0353%" height="15" fill="rgb(213,158,31)" fg:x="134825" fg:w="51"/><text x="93.6275%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (296 samples, 0.21%)</title><rect x="93.4191%" y="437" width="0.2050%" height="15" fill="rgb(245,126,43)" fg:x="134885" fg:w="296"/><text x="93.6691%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (296 samples, 0.21%)</title><rect x="93.4191%" y="421" width="0.2050%" height="15" fill="rgb(227,7,22)" fg:x="134885" fg:w="296"/><text x="93.6691%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (66 samples, 0.05%)</title><rect x="93.6269%" y="421" width="0.0457%" height="15" fill="rgb(252,90,44)" fg:x="135185" fg:w="66"/><text x="93.8769%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.05%)</title><rect x="93.6269%" y="405" width="0.0457%" height="15" fill="rgb(253,91,0)" fg:x="135185" fg:w="66"/><text x="93.8769%" y="415.50"></text></g><g><title>core::hint::spin_loop (59 samples, 0.04%)</title><rect x="93.6913%" y="405" width="0.0409%" height="15" fill="rgb(252,175,49)" fg:x="135278" fg:w="59"/><text x="93.9413%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (59 samples, 0.04%)</title><rect x="93.6913%" y="389" width="0.0409%" height="15" fill="rgb(246,150,1)" fg:x="135278" fg:w="59"/><text x="93.9413%" y="399.50"></text></g><g><title>async_executor::Ticker::sleep (1,952 samples, 1.35%)</title><rect x="92.4197%" y="501" width="1.3519%" height="15" fill="rgb(241,192,25)" fg:x="133442" fg:w="1952"/><text x="92.6697%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (569 samples, 0.39%)</title><rect x="93.3775%" y="485" width="0.3941%" height="15" fill="rgb(239,187,11)" fg:x="134825" fg:w="569"/><text x="93.6275%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (518 samples, 0.36%)</title><rect x="93.4128%" y="469" width="0.3588%" height="15" fill="rgb(218,202,51)" fg:x="134876" fg:w="518"/><text x="93.6628%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (518 samples, 0.36%)</title><rect x="93.4128%" y="453" width="0.3588%" height="15" fill="rgb(225,176,8)" fg:x="134876" fg:w="518"/><text x="93.6628%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (213 samples, 0.15%)</title><rect x="93.6241%" y="437" width="0.1475%" height="15" fill="rgb(219,122,41)" fg:x="135181" fg:w="213"/><text x="93.8741%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (118 samples, 0.08%)</title><rect x="93.6899%" y="421" width="0.0817%" height="15" fill="rgb(248,140,20)" fg:x="135276" fg:w="118"/><text x="93.9399%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (57 samples, 0.04%)</title><rect x="93.7321%" y="405" width="0.0395%" height="15" fill="rgb(245,41,37)" fg:x="135337" fg:w="57"/><text x="93.9821%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (57 samples, 0.04%)</title><rect x="93.7321%" y="389" width="0.0395%" height="15" fill="rgb(235,82,39)" fg:x="135337" fg:w="57"/><text x="93.9821%" y="399.50"></text></g><g><title>async_executor::Sleepers::remove (155 samples, 0.11%)</title><rect x="93.7848%" y="485" width="0.1074%" height="15" fill="rgb(230,108,42)" fg:x="135413" fg:w="155"/><text x="94.0348%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (81 samples, 0.06%)</title><rect x="93.8360%" y="469" width="0.0561%" height="15" fill="rgb(215,150,50)" fg:x="135487" fg:w="81"/><text x="94.0860%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (81 samples, 0.06%)</title><rect x="93.8360%" y="453" width="0.0561%" height="15" fill="rgb(233,212,5)" fg:x="135487" fg:w="81"/><text x="94.0860%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (81 samples, 0.06%)</title><rect x="93.8360%" y="437" width="0.0561%" height="15" fill="rgb(245,80,22)" fg:x="135487" fg:w="81"/><text x="94.0860%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (81 samples, 0.06%)</title><rect x="93.8360%" y="421" width="0.0561%" height="15" fill="rgb(238,129,16)" fg:x="135487" fg:w="81"/><text x="94.0860%" y="431.50"></text></g><g><title>core::mem::drop (80 samples, 0.06%)</title><rect x="93.8367%" y="405" width="0.0554%" height="15" fill="rgb(240,19,0)" fg:x="135488" fg:w="80"/><text x="94.0867%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (80 samples, 0.06%)</title><rect x="93.8367%" y="389" width="0.0554%" height="15" fill="rgb(232,42,35)" fg:x="135488" fg:w="80"/><text x="94.0867%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.06%)</title><rect x="93.8367%" y="373" width="0.0554%" height="15" fill="rgb(223,130,24)" fg:x="135488" fg:w="80"/><text x="94.0867%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (80 samples, 0.06%)</title><rect x="93.8367%" y="357" width="0.0554%" height="15" fill="rgb(237,16,22)" fg:x="135488" fg:w="80"/><text x="94.0867%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (80 samples, 0.06%)</title><rect x="93.8367%" y="341" width="0.0554%" height="15" fill="rgb(248,192,20)" fg:x="135488" fg:w="80"/><text x="94.0867%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (61 samples, 0.04%)</title><rect x="93.8977%" y="421" width="0.0422%" height="15" fill="rgb(233,167,2)" fg:x="135576" fg:w="61"/><text x="94.1477%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.04%)</title><rect x="93.8977%" y="405" width="0.0422%" height="15" fill="rgb(252,71,44)" fg:x="135576" fg:w="61"/><text x="94.1477%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (72 samples, 0.05%)</title><rect x="93.8921%" y="485" width="0.0499%" height="15" fill="rgb(238,37,47)" fg:x="135568" fg:w="72"/><text x="94.1421%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.05%)</title><rect x="93.8921%" y="469" width="0.0499%" height="15" fill="rgb(214,202,54)" fg:x="135568" fg:w="72"/><text x="94.1421%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.04%)</title><rect x="93.8977%" y="453" width="0.0443%" height="15" fill="rgb(254,165,40)" fg:x="135576" fg:w="64"/><text x="94.1477%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (64 samples, 0.04%)</title><rect x="93.8977%" y="437" width="0.0443%" height="15" fill="rgb(246,173,38)" fg:x="135576" fg:w="64"/><text x="94.1477%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (103 samples, 0.07%)</title><rect x="93.9420%" y="485" width="0.0713%" height="15" fill="rgb(215,3,27)" fg:x="135640" fg:w="103"/><text x="94.1920%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (103 samples, 0.07%)</title><rect x="93.9420%" y="469" width="0.0713%" height="15" fill="rgb(239,169,51)" fg:x="135640" fg:w="103"/><text x="94.1920%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (105 samples, 0.07%)</title><rect x="94.0133%" y="485" width="0.0727%" height="15" fill="rgb(212,5,25)" fg:x="135743" fg:w="105"/><text x="94.2633%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (105 samples, 0.07%)</title><rect x="94.0133%" y="469" width="0.0727%" height="15" fill="rgb(243,45,17)" fg:x="135743" fg:w="105"/><text x="94.2633%" y="479.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="94.0860%" y="469" width="0.0166%" height="15" fill="rgb(242,97,9)" fg:x="135848" fg:w="24"/><text x="94.3360%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (24 samples, 0.02%)</title><rect x="94.0860%" y="453" width="0.0166%" height="15" fill="rgb(228,71,31)" fg:x="135848" fg:w="24"/><text x="94.3360%" y="463.50"></text></g><g><title>std::sync::poison::Flag::get (23 samples, 0.02%)</title><rect x="94.0867%" y="437" width="0.0159%" height="15" fill="rgb(252,184,16)" fg:x="135849" fg:w="23"/><text x="94.3367%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (23 samples, 0.02%)</title><rect x="94.0867%" y="421" width="0.0159%" height="15" fill="rgb(236,169,46)" fg:x="135849" fg:w="23"/><text x="94.3367%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="94.0874%" y="405" width="0.0152%" height="15" fill="rgb(207,17,47)" fg:x="135850" fg:w="22"/><text x="94.3374%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (92 samples, 0.06%)</title><rect x="94.1040%" y="437" width="0.0637%" height="15" fill="rgb(206,201,28)" fg:x="135874" fg:w="92"/><text x="94.3540%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (92 samples, 0.06%)</title><rect x="94.1040%" y="421" width="0.0637%" height="15" fill="rgb(224,184,23)" fg:x="135874" fg:w="92"/><text x="94.3540%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (29 samples, 0.02%)</title><rect x="94.1705%" y="421" width="0.0201%" height="15" fill="rgb(208,139,48)" fg:x="135970" fg:w="29"/><text x="94.4205%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="94.1705%" y="405" width="0.0201%" height="15" fill="rgb(208,130,10)" fg:x="135970" fg:w="29"/><text x="94.4205%" y="415.50"></text></g><g><title>core::hint::spin_loop (24 samples, 0.02%)</title><rect x="94.1927%" y="405" width="0.0166%" height="15" fill="rgb(211,213,45)" fg:x="136002" fg:w="24"/><text x="94.4427%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (24 samples, 0.02%)</title><rect x="94.1927%" y="389" width="0.0166%" height="15" fill="rgb(235,100,30)" fg:x="136002" fg:w="24"/><text x="94.4427%" y="399.50"></text></g><g><title>async_executor::Ticker::wake (661 samples, 0.46%)</title><rect x="93.7716%" y="501" width="0.4578%" height="15" fill="rgb(206,144,31)" fg:x="135394" fg:w="661"/><text x="94.0216%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (207 samples, 0.14%)</title><rect x="94.0860%" y="485" width="0.1434%" height="15" fill="rgb(224,200,26)" fg:x="135848" fg:w="207"/><text x="94.3360%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (183 samples, 0.13%)</title><rect x="94.1027%" y="469" width="0.1267%" height="15" fill="rgb(247,104,53)" fg:x="135872" fg:w="183"/><text x="94.3527%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (183 samples, 0.13%)</title><rect x="94.1027%" y="453" width="0.1267%" height="15" fill="rgb(220,14,17)" fg:x="135872" fg:w="183"/><text x="94.3527%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (89 samples, 0.06%)</title><rect x="94.1678%" y="437" width="0.0616%" height="15" fill="rgb(230,140,40)" fg:x="135966" fg:w="89"/><text x="94.4178%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (53 samples, 0.04%)</title><rect x="94.1927%" y="421" width="0.0367%" height="15" fill="rgb(229,2,41)" fg:x="136002" fg:w="53"/><text x="94.4427%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (29 samples, 0.02%)</title><rect x="94.2093%" y="405" width="0.0201%" height="15" fill="rgb(232,89,16)" fg:x="136026" fg:w="29"/><text x="94.4593%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.02%)</title><rect x="94.2093%" y="389" width="0.0201%" height="15" fill="rgb(247,59,52)" fg:x="136026" fg:w="29"/><text x="94.4593%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,641 samples, 8.75%)</title><rect x="85.4772%" y="565" width="8.7549%" height="15" fill="rgb(226,110,21)" fg:x="123418" fg:w="12641"/><text x="85.7272%" y="575.50">&lt;core::futur..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (12,641 samples, 8.75%)</title><rect x="85.4772%" y="549" width="8.7549%" height="15" fill="rgb(224,176,43)" fg:x="123418" fg:w="12641"/><text x="85.7272%" y="559.50">async_execut..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (12,613 samples, 8.74%)</title><rect x="85.4966%" y="533" width="8.7356%" height="15" fill="rgb(221,73,6)" fg:x="123446" fg:w="12613"/><text x="85.7466%" y="543.50">&lt;futures_lit..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (12,604 samples, 8.73%)</title><rect x="85.5028%" y="517" width="8.7293%" height="15" fill="rgb(232,78,19)" fg:x="123455" fg:w="12604"/><text x="85.7528%" y="527.50">async_execut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,732 samples, 8.82%)</title><rect x="85.4502%" y="597" width="8.8180%" height="15" fill="rgb(233,112,48)" fg:x="123379" fg:w="12732"/><text x="85.7002%" y="607.50">&lt;core::futur..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (12,726 samples, 8.81%)</title><rect x="85.4544%" y="581" width="8.8138%" height="15" fill="rgb(243,131,47)" fg:x="123385" fg:w="12726"/><text x="85.7044%" y="591.50">async_execut..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (50 samples, 0.03%)</title><rect x="94.2336%" y="565" width="0.0346%" height="15" fill="rgb(226,51,1)" fg:x="136061" fg:w="50"/><text x="94.4836%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (50 samples, 0.03%)</title><rect x="94.2336%" y="549" width="0.0346%" height="15" fill="rgb(247,58,7)" fg:x="136061" fg:w="50"/><text x="94.4836%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (208 samples, 0.14%)</title><rect x="94.6706%" y="389" width="0.1441%" height="15" fill="rgb(209,7,32)" fg:x="136692" fg:w="208"/><text x="94.9206%" y="399.50"></text></g><g><title>[libc-2.31.so] (201 samples, 0.14%)</title><rect x="94.6754%" y="373" width="0.1392%" height="15" fill="rgb(209,39,41)" fg:x="136699" fg:w="201"/><text x="94.9254%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (327 samples, 0.23%)</title><rect x="94.8146%" y="389" width="0.2265%" height="15" fill="rgb(226,182,46)" fg:x="136900" fg:w="327"/><text x="95.0646%" y="399.50"></text></g><g><title>[libc-2.31.so] (312 samples, 0.22%)</title><rect x="94.8250%" y="373" width="0.2161%" height="15" fill="rgb(230,219,10)" fg:x="136915" fg:w="312"/><text x="95.0750%" y="383.50"></text></g><g><title>[libc-2.31.so] (321 samples, 0.22%)</title><rect x="95.1284%" y="373" width="0.2223%" height="15" fill="rgb(227,175,30)" fg:x="137353" fg:w="321"/><text x="95.3784%" y="383.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="95.3555%" y="261" width="0.0159%" height="15" fill="rgb(217,2,50)" fg:x="137681" fg:w="23"/><text x="95.6055%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="95.3528%" y="373" width="0.0194%" height="15" fill="rgb(229,160,0)" fg:x="137677" fg:w="28"/><text x="95.6028%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="95.3528%" y="357" width="0.0194%" height="15" fill="rgb(207,78,37)" fg:x="137677" fg:w="28"/><text x="95.6028%" y="367.50"></text></g><g><title>alloc::alloc::box_free (28 samples, 0.02%)</title><rect x="95.3528%" y="341" width="0.0194%" height="15" fill="rgb(225,57,0)" fg:x="137677" fg:w="28"/><text x="95.6028%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.02%)</title><rect x="95.3528%" y="325" width="0.0194%" height="15" fill="rgb(232,154,2)" fg:x="137677" fg:w="28"/><text x="95.6028%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (28 samples, 0.02%)</title><rect x="95.3528%" y="309" width="0.0194%" height="15" fill="rgb(241,212,25)" fg:x="137677" fg:w="28"/><text x="95.6028%" y="319.50"></text></g><g><title>__rg_dealloc (28 samples, 0.02%)</title><rect x="95.3528%" y="293" width="0.0194%" height="15" fill="rgb(226,69,20)" fg:x="137677" fg:w="28"/><text x="95.6028%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (28 samples, 0.02%)</title><rect x="95.3528%" y="277" width="0.0194%" height="15" fill="rgb(247,184,54)" fg:x="137677" fg:w="28"/><text x="95.6028%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (83 samples, 0.06%)</title><rect x="95.4283%" y="309" width="0.0575%" height="15" fill="rgb(210,145,0)" fg:x="137786" fg:w="83"/><text x="95.6783%" y="319.50"></text></g><g><title>core::mem::replace (83 samples, 0.06%)</title><rect x="95.4283%" y="293" width="0.0575%" height="15" fill="rgb(253,82,12)" fg:x="137786" fg:w="83"/><text x="95.6783%" y="303.50"></text></g><g><title>core::ptr::read (83 samples, 0.06%)</title><rect x="95.4283%" y="277" width="0.0575%" height="15" fill="rgb(245,42,11)" fg:x="137786" fg:w="83"/><text x="95.6783%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (150 samples, 0.10%)</title><rect x="95.4096%" y="325" width="0.1039%" height="15" fill="rgb(219,147,32)" fg:x="137759" fg:w="150"/><text x="95.6596%" y="335.50"></text></g><g><title>core::mem::drop (40 samples, 0.03%)</title><rect x="95.4857%" y="309" width="0.0277%" height="15" fill="rgb(246,12,7)" fg:x="137869" fg:w="40"/><text x="95.7357%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (40 samples, 0.03%)</title><rect x="95.4857%" y="293" width="0.0277%" height="15" fill="rgb(243,50,9)" fg:x="137869" fg:w="40"/><text x="95.7357%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (106 samples, 0.07%)</title><rect x="95.5134%" y="325" width="0.0734%" height="15" fill="rgb(219,149,6)" fg:x="137909" fg:w="106"/><text x="95.7634%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (99 samples, 0.07%)</title><rect x="95.5183%" y="309" width="0.0686%" height="15" fill="rgb(241,51,42)" fg:x="137916" fg:w="99"/><text x="95.7683%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.07%)</title><rect x="95.5183%" y="293" width="0.0686%" height="15" fill="rgb(226,128,27)" fg:x="137916" fg:w="99"/><text x="95.7683%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (89 samples, 0.06%)</title><rect x="95.5252%" y="277" width="0.0616%" height="15" fill="rgb(244,144,4)" fg:x="137926" fg:w="89"/><text x="95.7752%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (89 samples, 0.06%)</title><rect x="95.5252%" y="261" width="0.0616%" height="15" fill="rgb(221,4,13)" fg:x="137926" fg:w="89"/><text x="95.7752%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (89 samples, 0.06%)</title><rect x="95.5252%" y="245" width="0.0616%" height="15" fill="rgb(208,170,28)" fg:x="137926" fg:w="89"/><text x="95.7752%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_swap (89 samples, 0.06%)</title><rect x="95.5252%" y="229" width="0.0616%" height="15" fill="rgb(226,131,13)" fg:x="137926" fg:w="89"/><text x="95.7752%" y="239.50"></text></g><g><title>core::task::wake::Waker::will_wake (19 samples, 0.01%)</title><rect x="95.5896%" y="325" width="0.0132%" height="15" fill="rgb(215,72,41)" fg:x="138019" fg:w="19"/><text x="95.8396%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (19 samples, 0.01%)</title><rect x="95.5896%" y="309" width="0.0132%" height="15" fill="rgb(243,108,20)" fg:x="138019" fg:w="19"/><text x="95.8396%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (19 samples, 0.01%)</title><rect x="95.5896%" y="293" width="0.0132%" height="15" fill="rgb(230,189,17)" fg:x="138019" fg:w="19"/><text x="95.8396%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (19 samples, 0.01%)</title><rect x="95.5896%" y="277" width="0.0132%" height="15" fill="rgb(220,50,17)" fg:x="138019" fg:w="19"/><text x="95.8396%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (442 samples, 0.31%)</title><rect x="95.3860%" y="341" width="0.3061%" height="15" fill="rgb(248,152,48)" fg:x="137725" fg:w="442"/><text x="95.6360%" y="351.50"></text></g><g><title>event_listener::Inner::lock (129 samples, 0.09%)</title><rect x="95.6028%" y="325" width="0.0893%" height="15" fill="rgb(244,91,11)" fg:x="138038" fg:w="129"/><text x="95.8528%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (125 samples, 0.09%)</title><rect x="95.6056%" y="309" width="0.0866%" height="15" fill="rgb(220,157,5)" fg:x="138042" fg:w="125"/><text x="95.8556%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (115 samples, 0.08%)</title><rect x="95.6125%" y="293" width="0.0796%" height="15" fill="rgb(253,137,8)" fg:x="138052" fg:w="115"/><text x="95.8625%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (115 samples, 0.08%)</title><rect x="95.6125%" y="277" width="0.0796%" height="15" fill="rgb(217,137,51)" fg:x="138052" fg:w="115"/><text x="95.8625%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (115 samples, 0.08%)</title><rect x="95.6125%" y="261" width="0.0796%" height="15" fill="rgb(218,209,53)" fg:x="138052" fg:w="115"/><text x="95.8625%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (115 samples, 0.08%)</title><rect x="95.6125%" y="245" width="0.0796%" height="15" fill="rgb(249,137,25)" fg:x="138052" fg:w="115"/><text x="95.8625%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (176 samples, 0.12%)</title><rect x="95.7247%" y="293" width="0.1219%" height="15" fill="rgb(239,155,26)" fg:x="138214" fg:w="176"/><text x="95.9747%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (165 samples, 0.11%)</title><rect x="95.7323%" y="277" width="0.1143%" height="15" fill="rgb(227,85,46)" fg:x="138225" fg:w="165"/><text x="95.9823%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (165 samples, 0.11%)</title><rect x="95.7323%" y="261" width="0.1143%" height="15" fill="rgb(251,107,43)" fg:x="138225" fg:w="165"/><text x="95.9823%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (165 samples, 0.11%)</title><rect x="95.7323%" y="245" width="0.1143%" height="15" fill="rgb(234,170,33)" fg:x="138225" fg:w="165"/><text x="95.9823%" y="255.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,173 samples, 0.81%)</title><rect x="95.0411%" y="389" width="0.8124%" height="15" fill="rgb(206,29,35)" fg:x="137227" fg:w="1173"/><text x="95.2911%" y="399.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (695 samples, 0.48%)</title><rect x="95.3722%" y="373" width="0.4813%" height="15" fill="rgb(227,138,25)" fg:x="137705" fg:w="695"/><text x="95.6222%" y="383.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (695 samples, 0.48%)</title><rect x="95.3722%" y="357" width="0.4813%" height="15" fill="rgb(249,131,35)" fg:x="137705" fg:w="695"/><text x="95.6222%" y="367.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (233 samples, 0.16%)</title><rect x="95.6921%" y="341" width="0.1614%" height="15" fill="rgb(239,6,40)" fg:x="138167" fg:w="233"/><text x="95.9421%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (215 samples, 0.15%)</title><rect x="95.7046%" y="325" width="0.1489%" height="15" fill="rgb(246,136,47)" fg:x="138185" fg:w="215"/><text x="95.9546%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (211 samples, 0.15%)</title><rect x="95.7074%" y="309" width="0.1461%" height="15" fill="rgb(253,58,26)" fg:x="138189" fg:w="211"/><text x="95.9574%" y="319.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.08%)</title><rect x="95.8535%" y="389" width="0.0817%" height="15" fill="rgb(237,141,10)" fg:x="138400" fg:w="118"/><text x="96.1035%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (37 samples, 0.03%)</title><rect x="96.1361%" y="261" width="0.0256%" height="15" fill="rgb(234,156,12)" fg:x="138808" fg:w="37"/><text x="96.3861%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (330 samples, 0.23%)</title><rect x="95.9352%" y="389" width="0.2286%" height="15" fill="rgb(243,224,36)" fg:x="138518" fg:w="330"/><text x="96.1852%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (97 samples, 0.07%)</title><rect x="96.0966%" y="373" width="0.0672%" height="15" fill="rgb(205,229,51)" fg:x="138751" fg:w="97"/><text x="96.3466%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (97 samples, 0.07%)</title><rect x="96.0966%" y="357" width="0.0672%" height="15" fill="rgb(223,189,4)" fg:x="138751" fg:w="97"/><text x="96.3466%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (97 samples, 0.07%)</title><rect x="96.0966%" y="341" width="0.0672%" height="15" fill="rgb(249,167,54)" fg:x="138751" fg:w="97"/><text x="96.3466%" y="351.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.07%)</title><rect x="96.0973%" y="325" width="0.0665%" height="15" fill="rgb(218,34,28)" fg:x="138752" fg:w="96"/><text x="96.3473%" y="335.50"></text></g><g><title>__rg_alloc (96 samples, 0.07%)</title><rect x="96.0973%" y="309" width="0.0665%" height="15" fill="rgb(232,109,42)" fg:x="138752" fg:w="96"/><text x="96.3473%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (96 samples, 0.07%)</title><rect x="96.0973%" y="293" width="0.0665%" height="15" fill="rgb(248,214,46)" fg:x="138752" fg:w="96"/><text x="96.3473%" y="303.50"></text></g><g><title>sn_rust_alloc (91 samples, 0.06%)</title><rect x="96.1008%" y="277" width="0.0630%" height="15" fill="rgb(244,216,40)" fg:x="138757" fg:w="91"/><text x="96.3508%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,523 samples, 1.75%)</title><rect x="94.4413%" y="405" width="1.7474%" height="15" fill="rgb(231,226,31)" fg:x="136361" fg:w="2523"/><text x="94.6913%" y="415.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,536 samples, 1.76%)</title><rect x="94.4379%" y="437" width="1.7564%" height="15" fill="rgb(238,38,43)" fg:x="136356" fg:w="2536"/><text x="94.6879%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,536 samples, 1.76%)</title><rect x="94.4379%" y="421" width="1.7564%" height="15" fill="rgb(208,88,43)" fg:x="136356" fg:w="2536"/><text x="94.6879%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,650 samples, 1.84%)</title><rect x="94.3651%" y="549" width="1.8353%" height="15" fill="rgb(205,136,37)" fg:x="136251" fg:w="2650"/><text x="94.6151%" y="559.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,647 samples, 1.83%)</title><rect x="94.3672%" y="533" width="1.8333%" height="15" fill="rgb(237,34,14)" fg:x="136254" fg:w="2647"/><text x="94.6172%" y="543.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,569 samples, 1.78%)</title><rect x="94.4212%" y="517" width="1.7792%" height="15" fill="rgb(236,193,44)" fg:x="136332" fg:w="2569"/><text x="94.6712%" y="527.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,569 samples, 1.78%)</title><rect x="94.4212%" y="501" width="1.7792%" height="15" fill="rgb(231,48,10)" fg:x="136332" fg:w="2569"/><text x="94.6712%" y="511.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,569 samples, 1.78%)</title><rect x="94.4212%" y="485" width="1.7792%" height="15" fill="rgb(213,141,34)" fg:x="136332" fg:w="2569"/><text x="94.6712%" y="495.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,568 samples, 1.78%)</title><rect x="94.4219%" y="469" width="1.7786%" height="15" fill="rgb(249,130,34)" fg:x="136333" fg:w="2568"/><text x="94.6719%" y="479.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,551 samples, 1.77%)</title><rect x="94.4337%" y="453" width="1.7668%" height="15" fill="rgb(219,42,41)" fg:x="136350" fg:w="2551"/><text x="94.6837%" y="463.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,652 samples, 1.84%)</title><rect x="94.3651%" y="565" width="1.8367%" height="15" fill="rgb(224,100,54)" fg:x="136251" fg:w="2652"/><text x="94.6151%" y="575.50">&lt;..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (54 samples, 0.04%)</title><rect x="96.2019%" y="565" width="0.0374%" height="15" fill="rgb(229,200,27)" fg:x="138903" fg:w="54"/><text x="96.4519%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (52 samples, 0.04%)</title><rect x="96.2033%" y="549" width="0.0360%" height="15" fill="rgb(217,118,10)" fg:x="138905" fg:w="52"/><text x="96.4533%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (52 samples, 0.04%)</title><rect x="96.2033%" y="533" width="0.0360%" height="15" fill="rgb(206,22,3)" fg:x="138905" fg:w="52"/><text x="96.4533%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (312 samples, 0.22%)</title><rect x="96.2420%" y="565" width="0.2161%" height="15" fill="rgb(232,163,46)" fg:x="138961" fg:w="312"/><text x="96.4920%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (312 samples, 0.22%)</title><rect x="96.2420%" y="549" width="0.2161%" height="15" fill="rgb(206,95,13)" fg:x="138961" fg:w="312"/><text x="96.4920%" y="559.50"></text></g><g><title>async_task::runnable::Runnable::run (3,167 samples, 2.19%)</title><rect x="94.2696%" y="597" width="2.1934%" height="15" fill="rgb(253,154,18)" fg:x="136113" fg:w="3167"/><text x="94.5196%" y="607.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,074 samples, 2.13%)</title><rect x="94.3340%" y="581" width="2.1290%" height="15" fill="rgb(219,32,23)" fg:x="136206" fg:w="3074"/><text x="94.5840%" y="591.50">a..</text></g><g><title>async_executor::Executor::run::{{closure}} (15,956 samples, 11.05%)</title><rect x="85.4170%" y="661" width="11.0509%" height="15" fill="rgb(230,191,45)" fg:x="123331" fg:w="15956"/><text x="85.6670%" y="671.50">async_executor::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,926 samples, 11.03%)</title><rect x="85.4377%" y="645" width="11.0301%" height="15" fill="rgb(229,64,36)" fg:x="123361" fg:w="15926"/><text x="85.6877%" y="655.50">&lt;futures_lite::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,926 samples, 11.03%)</title><rect x="85.4377%" y="629" width="11.0301%" height="15" fill="rgb(205,129,25)" fg:x="123361" fg:w="15926"/><text x="85.6877%" y="639.50">&lt;core::future::f..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15,922 samples, 11.03%)</title><rect x="85.4405%" y="613" width="11.0273%" height="15" fill="rgb(254,112,7)" fg:x="123365" fg:w="15922"/><text x="85.6905%" y="623.50">async_executor::..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.03%)</title><rect x="96.5385%" y="453" width="0.0277%" height="15" fill="rgb(226,53,48)" fg:x="139389" fg:w="40"/><text x="96.7885%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (40 samples, 0.03%)</title><rect x="96.5385%" y="437" width="0.0277%" height="15" fill="rgb(214,153,38)" fg:x="139389" fg:w="40"/><text x="96.7885%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.03%)</title><rect x="96.5385%" y="421" width="0.0277%" height="15" fill="rgb(243,101,7)" fg:x="139389" fg:w="40"/><text x="96.7885%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.03%)</title><rect x="96.5385%" y="405" width="0.0277%" height="15" fill="rgb(240,140,22)" fg:x="139389" fg:w="40"/><text x="96.7885%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.03%)</title><rect x="96.5385%" y="389" width="0.0277%" height="15" fill="rgb(235,114,2)" fg:x="139389" fg:w="40"/><text x="96.7885%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (40 samples, 0.03%)</title><rect x="96.5385%" y="373" width="0.0277%" height="15" fill="rgb(242,59,12)" fg:x="139389" fg:w="40"/><text x="96.7885%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (32 samples, 0.02%)</title><rect x="96.5440%" y="357" width="0.0222%" height="15" fill="rgb(252,134,9)" fg:x="139397" fg:w="32"/><text x="96.7940%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (32 samples, 0.02%)</title><rect x="96.5440%" y="341" width="0.0222%" height="15" fill="rgb(236,4,44)" fg:x="139397" fg:w="32"/><text x="96.7940%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (31 samples, 0.02%)</title><rect x="96.5447%" y="325" width="0.0215%" height="15" fill="rgb(254,172,41)" fg:x="139398" fg:w="31"/><text x="96.7947%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (31 samples, 0.02%)</title><rect x="96.5447%" y="309" width="0.0215%" height="15" fill="rgb(244,63,20)" fg:x="139398" fg:w="31"/><text x="96.7947%" y="319.50"></text></g><g><title>concurrent_queue::full_fence (63 samples, 0.04%)</title><rect x="96.5994%" y="421" width="0.0436%" height="15" fill="rgb(250,73,31)" fg:x="139477" fg:w="63"/><text x="96.8494%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (61 samples, 0.04%)</title><rect x="96.6008%" y="405" width="0.0422%" height="15" fill="rgb(241,38,36)" fg:x="139479" fg:w="61"/><text x="96.8508%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (61 samples, 0.04%)</title><rect x="96.6008%" y="389" width="0.0422%" height="15" fill="rgb(245,211,2)" fg:x="139479" fg:w="61"/><text x="96.8508%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.04%)</title><rect x="96.6008%" y="373" width="0.0422%" height="15" fill="rgb(206,120,28)" fg:x="139479" fg:w="61"/><text x="96.8508%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (155 samples, 0.11%)</title><rect x="96.5779%" y="437" width="0.1074%" height="15" fill="rgb(211,59,34)" fg:x="139446" fg:w="155"/><text x="96.8279%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (61 samples, 0.04%)</title><rect x="96.6430%" y="421" width="0.0422%" height="15" fill="rgb(233,168,5)" fg:x="139540" fg:w="61"/><text x="96.8930%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (61 samples, 0.04%)</title><rect x="96.6430%" y="405" width="0.0422%" height="15" fill="rgb(234,33,13)" fg:x="139540" fg:w="61"/><text x="96.8930%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (66 samples, 0.05%)</title><rect x="96.6978%" y="421" width="0.0457%" height="15" fill="rgb(231,150,26)" fg:x="139619" fg:w="66"/><text x="96.9478%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (66 samples, 0.05%)</title><rect x="96.6978%" y="405" width="0.0457%" height="15" fill="rgb(217,191,4)" fg:x="139619" fg:w="66"/><text x="96.9478%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (66 samples, 0.05%)</title><rect x="96.6978%" y="389" width="0.0457%" height="15" fill="rgb(246,198,38)" fg:x="139619" fg:w="66"/><text x="96.9478%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.05%)</title><rect x="96.6978%" y="373" width="0.0457%" height="15" fill="rgb(245,64,37)" fg:x="139619" fg:w="66"/><text x="96.9478%" y="383.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (292 samples, 0.20%)</title><rect x="96.5662%" y="453" width="0.2022%" height="15" fill="rgb(250,30,36)" fg:x="139429" fg:w="292"/><text x="96.8162%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (120 samples, 0.08%)</title><rect x="96.6853%" y="437" width="0.0831%" height="15" fill="rgb(217,86,53)" fg:x="139601" fg:w="120"/><text x="96.9353%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.02%)</title><rect x="96.7483%" y="421" width="0.0201%" height="15" fill="rgb(228,157,16)" fg:x="139692" fg:w="29"/><text x="96.9983%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.02%)</title><rect x="96.7483%" y="405" width="0.0201%" height="15" fill="rgb(217,59,31)" fg:x="139692" fg:w="29"/><text x="96.9983%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (82 samples, 0.06%)</title><rect x="96.7684%" y="453" width="0.0568%" height="15" fill="rgb(237,138,41)" fg:x="139721" fg:w="82"/><text x="97.0184%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.06%)</title><rect x="96.7684%" y="437" width="0.0568%" height="15" fill="rgb(227,91,49)" fg:x="139721" fg:w="82"/><text x="97.0184%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (77 samples, 0.05%)</title><rect x="96.7719%" y="421" width="0.0533%" height="15" fill="rgb(247,21,44)" fg:x="139726" fg:w="77"/><text x="97.0219%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (77 samples, 0.05%)</title><rect x="96.7719%" y="405" width="0.0533%" height="15" fill="rgb(219,210,51)" fg:x="139726" fg:w="77"/><text x="97.0219%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (73 samples, 0.05%)</title><rect x="96.7746%" y="389" width="0.0506%" height="15" fill="rgb(209,140,6)" fg:x="139730" fg:w="73"/><text x="97.0246%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (73 samples, 0.05%)</title><rect x="96.7746%" y="373" width="0.0506%" height="15" fill="rgb(221,188,24)" fg:x="139730" fg:w="73"/><text x="97.0246%" y="383.50"></text></g><g><title>fastrand::RNG::__getit (17 samples, 0.01%)</title><rect x="96.8273%" y="405" width="0.0118%" height="15" fill="rgb(232,154,20)" fg:x="139806" fg:w="17"/><text x="97.0773%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="96.8273%" y="389" width="0.0118%" height="15" fill="rgb(244,137,50)" fg:x="139806" fg:w="17"/><text x="97.0773%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="96.8273%" y="373" width="0.0118%" height="15" fill="rgb(225,185,43)" fg:x="139806" fg:w="17"/><text x="97.0773%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.01%)</title><rect x="96.8273%" y="357" width="0.0118%" height="15" fill="rgb(213,205,38)" fg:x="139806" fg:w="17"/><text x="97.0773%" y="367.50"></text></g><g><title>fastrand::usize (28 samples, 0.02%)</title><rect x="96.8252%" y="453" width="0.0194%" height="15" fill="rgb(236,73,12)" fg:x="139803" fg:w="28"/><text x="97.0752%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="96.8273%" y="437" width="0.0173%" height="15" fill="rgb(235,219,13)" fg:x="139806" fg:w="25"/><text x="97.0773%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="96.8273%" y="421" width="0.0173%" height="15" fill="rgb(218,59,36)" fg:x="139806" fg:w="25"/><text x="97.0773%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (56 samples, 0.04%)</title><rect x="96.8508%" y="405" width="0.0388%" height="15" fill="rgb(205,110,39)" fg:x="139840" fg:w="56"/><text x="97.1008%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (56 samples, 0.04%)</title><rect x="96.8508%" y="389" width="0.0388%" height="15" fill="rgb(218,206,42)" fg:x="139840" fg:w="56"/><text x="97.1008%" y="399.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (520 samples, 0.36%)</title><rect x="96.5302%" y="469" width="0.3601%" height="15" fill="rgb(248,125,24)" fg:x="139377" fg:w="520"/><text x="96.7802%" y="479.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (66 samples, 0.05%)</title><rect x="96.8446%" y="453" width="0.0457%" height="15" fill="rgb(242,28,27)" fg:x="139831" fg:w="66"/><text x="97.0946%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (61 samples, 0.04%)</title><rect x="96.8481%" y="437" width="0.0422%" height="15" fill="rgb(216,228,15)" fg:x="139836" fg:w="61"/><text x="97.0981%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (61 samples, 0.04%)</title><rect x="96.8481%" y="421" width="0.0422%" height="15" fill="rgb(235,116,46)" fg:x="139836" fg:w="61"/><text x="97.0981%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (23 samples, 0.02%)</title><rect x="96.8986%" y="453" width="0.0159%" height="15" fill="rgb(224,18,32)" fg:x="139909" fg:w="23"/><text x="97.1486%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (59 samples, 0.04%)</title><rect x="96.9145%" y="453" width="0.0409%" height="15" fill="rgb(252,5,12)" fg:x="139932" fg:w="59"/><text x="97.1645%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.04%)</title><rect x="96.9145%" y="437" width="0.0409%" height="15" fill="rgb(251,36,5)" fg:x="139932" fg:w="59"/><text x="97.1645%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (58 samples, 0.04%)</title><rect x="96.9152%" y="421" width="0.0402%" height="15" fill="rgb(217,53,14)" fg:x="139933" fg:w="58"/><text x="97.1652%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (58 samples, 0.04%)</title><rect x="96.9152%" y="405" width="0.0402%" height="15" fill="rgb(215,86,45)" fg:x="139933" fg:w="58"/><text x="97.1652%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (58 samples, 0.04%)</title><rect x="96.9152%" y="389" width="0.0402%" height="15" fill="rgb(242,169,11)" fg:x="139933" fg:w="58"/><text x="97.1652%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (58 samples, 0.04%)</title><rect x="96.9152%" y="373" width="0.0402%" height="15" fill="rgb(211,213,45)" fg:x="139933" fg:w="58"/><text x="97.1652%" y="383.50"></text></g><g><title>async_executor::Ticker::sleep (160 samples, 0.11%)</title><rect x="96.8903%" y="469" width="0.1108%" height="15" fill="rgb(205,88,11)" fg:x="139897" fg:w="160"/><text x="97.1403%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (66 samples, 0.05%)</title><rect x="96.9554%" y="453" width="0.0457%" height="15" fill="rgb(252,69,26)" fg:x="139991" fg:w="66"/><text x="97.2054%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (63 samples, 0.04%)</title><rect x="96.9575%" y="437" width="0.0436%" height="15" fill="rgb(246,123,37)" fg:x="139994" fg:w="63"/><text x="97.2075%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (63 samples, 0.04%)</title><rect x="96.9575%" y="421" width="0.0436%" height="15" fill="rgb(212,205,5)" fg:x="139994" fg:w="63"/><text x="97.2075%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (63 samples, 0.04%)</title><rect x="96.9575%" y="405" width="0.0436%" height="15" fill="rgb(253,148,0)" fg:x="139994" fg:w="63"/><text x="97.2075%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.04%)</title><rect x="96.9575%" y="389" width="0.0436%" height="15" fill="rgb(239,22,4)" fg:x="139994" fg:w="63"/><text x="97.2075%" y="399.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (721 samples, 0.50%)</title><rect x="96.5045%" y="581" width="0.4994%" height="15" fill="rgb(226,26,53)" fg:x="139340" fg:w="721"/><text x="96.7545%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (709 samples, 0.49%)</title><rect x="96.5128%" y="565" width="0.4910%" height="15" fill="rgb(225,229,45)" fg:x="139352" fg:w="709"/><text x="96.7628%" y="575.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (706 samples, 0.49%)</title><rect x="96.5149%" y="549" width="0.4890%" height="15" fill="rgb(220,60,37)" fg:x="139355" fg:w="706"/><text x="96.7649%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (697 samples, 0.48%)</title><rect x="96.5212%" y="533" width="0.4827%" height="15" fill="rgb(217,180,35)" fg:x="139364" fg:w="697"/><text x="96.7712%" y="543.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (697 samples, 0.48%)</title><rect x="96.5212%" y="517" width="0.4827%" height="15" fill="rgb(229,7,53)" fg:x="139364" fg:w="697"/><text x="96.7712%" y="527.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (687 samples, 0.48%)</title><rect x="96.5281%" y="501" width="0.4758%" height="15" fill="rgb(254,137,3)" fg:x="139374" fg:w="687"/><text x="96.7781%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (687 samples, 0.48%)</title><rect x="96.5281%" y="485" width="0.4758%" height="15" fill="rgb(215,140,41)" fg:x="139374" fg:w="687"/><text x="96.7781%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (44 samples, 0.03%)</title><rect x="97.0738%" y="517" width="0.0305%" height="15" fill="rgb(250,80,15)" fg:x="140162" fg:w="44"/><text x="97.3238%" y="527.50"></text></g><g><title>core::mem::replace (44 samples, 0.03%)</title><rect x="97.0738%" y="501" width="0.0305%" height="15" fill="rgb(252,191,6)" fg:x="140162" fg:w="44"/><text x="97.3238%" y="511.50"></text></g><g><title>core::ptr::read (44 samples, 0.03%)</title><rect x="97.0738%" y="485" width="0.0305%" height="15" fill="rgb(246,217,18)" fg:x="140162" fg:w="44"/><text x="97.3238%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (67 samples, 0.05%)</title><rect x="97.0669%" y="533" width="0.0464%" height="15" fill="rgb(223,93,7)" fg:x="140152" fg:w="67"/><text x="97.3169%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (72 samples, 0.05%)</title><rect x="97.1133%" y="533" width="0.0499%" height="15" fill="rgb(225,55,52)" fg:x="140219" fg:w="72"/><text x="97.3633%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (67 samples, 0.05%)</title><rect x="97.1168%" y="517" width="0.0464%" height="15" fill="rgb(240,31,24)" fg:x="140224" fg:w="67"/><text x="97.3668%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="97.1168%" y="501" width="0.0464%" height="15" fill="rgb(205,56,52)" fg:x="140224" fg:w="67"/><text x="97.3668%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.04%)</title><rect x="97.1189%" y="485" width="0.0443%" height="15" fill="rgb(246,146,12)" fg:x="140227" fg:w="64"/><text x="97.3689%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (64 samples, 0.04%)</title><rect x="97.1189%" y="469" width="0.0443%" height="15" fill="rgb(239,84,36)" fg:x="140227" fg:w="64"/><text x="97.3689%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (64 samples, 0.04%)</title><rect x="97.1189%" y="453" width="0.0443%" height="15" fill="rgb(207,41,40)" fg:x="140227" fg:w="64"/><text x="97.3689%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (64 samples, 0.04%)</title><rect x="97.1189%" y="437" width="0.0443%" height="15" fill="rgb(241,179,25)" fg:x="140227" fg:w="64"/><text x="97.3689%" y="447.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (292 samples, 0.20%)</title><rect x="97.0378%" y="549" width="0.2022%" height="15" fill="rgb(210,0,34)" fg:x="140110" fg:w="292"/><text x="97.2878%" y="559.50"></text></g><g><title>event_listener::Inner::lock (96 samples, 0.07%)</title><rect x="97.1736%" y="533" width="0.0665%" height="15" fill="rgb(225,217,29)" fg:x="140306" fg:w="96"/><text x="97.4236%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (91 samples, 0.06%)</title><rect x="97.1770%" y="517" width="0.0630%" height="15" fill="rgb(216,191,38)" fg:x="140311" fg:w="91"/><text x="97.4270%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (86 samples, 0.06%)</title><rect x="97.1805%" y="501" width="0.0596%" height="15" fill="rgb(232,140,52)" fg:x="140316" fg:w="86"/><text x="97.4305%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (86 samples, 0.06%)</title><rect x="97.1805%" y="485" width="0.0596%" height="15" fill="rgb(223,158,51)" fg:x="140316" fg:w="86"/><text x="97.4305%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (86 samples, 0.06%)</title><rect x="97.1805%" y="469" width="0.0596%" height="15" fill="rgb(235,29,51)" fg:x="140316" fg:w="86"/><text x="97.4305%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (86 samples, 0.06%)</title><rect x="97.1805%" y="453" width="0.0596%" height="15" fill="rgb(215,181,18)" fg:x="140316" fg:w="86"/><text x="97.4305%" y="463.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (122 samples, 0.08%)</title><rect x="97.2401%" y="549" width="0.0845%" height="15" fill="rgb(227,125,34)" fg:x="140402" fg:w="122"/><text x="97.4901%" y="559.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (122 samples, 0.08%)</title><rect x="97.2401%" y="533" width="0.0845%" height="15" fill="rgb(230,197,49)" fg:x="140402" fg:w="122"/><text x="97.4901%" y="543.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (94 samples, 0.07%)</title><rect x="97.2594%" y="517" width="0.0651%" height="15" fill="rgb(239,141,16)" fg:x="140430" fg:w="94"/><text x="97.5094%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (89 samples, 0.06%)</title><rect x="97.2629%" y="501" width="0.0616%" height="15" fill="rgb(225,105,43)" fg:x="140435" fg:w="89"/><text x="97.5129%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (89 samples, 0.06%)</title><rect x="97.2629%" y="485" width="0.0616%" height="15" fill="rgb(214,131,14)" fg:x="140435" fg:w="89"/><text x="97.5129%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (89 samples, 0.06%)</title><rect x="97.2629%" y="469" width="0.0616%" height="15" fill="rgb(229,177,11)" fg:x="140435" fg:w="89"/><text x="97.5129%" y="479.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,214 samples, 0.84%)</title><rect x="96.4941%" y="613" width="0.8408%" height="15" fill="rgb(231,180,14)" fg:x="139325" fg:w="1214"/><text x="96.7441%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,207 samples, 0.84%)</title><rect x="96.4990%" y="597" width="0.8359%" height="15" fill="rgb(232,88,2)" fg:x="139332" fg:w="1207"/><text x="96.7490%" y="607.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (478 samples, 0.33%)</title><rect x="97.0039%" y="581" width="0.3311%" height="15" fill="rgb(205,220,8)" fg:x="140061" fg:w="478"/><text x="97.2539%" y="591.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (463 samples, 0.32%)</title><rect x="97.0143%" y="565" width="0.3207%" height="15" fill="rgb(225,23,53)" fg:x="140076" fg:w="463"/><text x="97.2643%" y="575.50"></text></g><g><title>event_listener::Event::listen (15 samples, 0.01%)</title><rect x="97.3246%" y="549" width="0.0104%" height="15" fill="rgb(213,62,29)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="559.50"></text></g><g><title>event_listener::Event::inner (15 samples, 0.01%)</title><rect x="97.3246%" y="533" width="0.0104%" height="15" fill="rgb(227,75,7)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="97.3246%" y="517" width="0.0104%" height="15" fill="rgb(207,105,14)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="97.3246%" y="501" width="0.0104%" height="15" fill="rgb(245,62,29)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="97.3246%" y="485" width="0.0104%" height="15" fill="rgb(236,202,4)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="97.3246%" y="469" width="0.0104%" height="15" fill="rgb(250,67,1)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="479.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="97.3246%" y="453" width="0.0104%" height="15" fill="rgb(253,115,44)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="463.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="97.3246%" y="437" width="0.0104%" height="15" fill="rgb(251,139,18)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="97.3246%" y="421" width="0.0104%" height="15" fill="rgb(218,22,32)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="431.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="97.3246%" y="405" width="0.0104%" height="15" fill="rgb(243,53,5)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="97.3246%" y="389" width="0.0104%" height="15" fill="rgb(227,56,16)" fg:x="140524" fg:w="15"/><text x="97.5746%" y="399.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,251 samples, 11.95%)</title><rect x="85.3962%" y="693" width="11.9478%" height="15" fill="rgb(245,53,0)" fg:x="123301" fg:w="17251"/><text x="85.6462%" y="703.50">&lt;futures_lite::fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,224 samples, 11.93%)</title><rect x="85.4149%" y="677" width="11.9291%" height="15" fill="rgb(216,170,35)" fg:x="123328" fg:w="17224"/><text x="85.6649%" y="687.50">&lt;core::future::fro..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,265 samples, 0.88%)</title><rect x="96.4678%" y="661" width="0.8761%" height="15" fill="rgb(211,200,8)" fg:x="139287" fg:w="1265"/><text x="96.7178%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,238 samples, 0.86%)</title><rect x="96.4865%" y="645" width="0.8574%" height="15" fill="rgb(228,204,44)" fg:x="139314" fg:w="1238"/><text x="96.7365%" y="655.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,238 samples, 0.86%)</title><rect x="96.4865%" y="629" width="0.8574%" height="15" fill="rgb(214,121,17)" fg:x="139314" fg:w="1238"/><text x="96.7365%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (114 samples, 0.08%)</title><rect x="97.3550%" y="693" width="0.0790%" height="15" fill="rgb(233,64,38)" fg:x="140568" fg:w="114"/><text x="97.6050%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (114 samples, 0.08%)</title><rect x="97.3550%" y="677" width="0.0790%" height="15" fill="rgb(253,54,19)" fg:x="140568" fg:w="114"/><text x="97.6050%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (103 samples, 0.07%)</title><rect x="97.3626%" y="661" width="0.0713%" height="15" fill="rgb(253,94,18)" fg:x="140579" fg:w="103"/><text x="97.6126%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (103 samples, 0.07%)</title><rect x="97.3626%" y="645" width="0.0713%" height="15" fill="rgb(227,57,52)" fg:x="140579" fg:w="103"/><text x="97.6126%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (103 samples, 0.07%)</title><rect x="97.3626%" y="629" width="0.0713%" height="15" fill="rgb(230,228,50)" fg:x="140579" fg:w="103"/><text x="97.6126%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (103 samples, 0.07%)</title><rect x="97.3626%" y="613" width="0.0713%" height="15" fill="rgb(217,205,27)" fg:x="140579" fg:w="103"/><text x="97.6126%" y="623.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.04%)</title><rect x="97.4790%" y="517" width="0.0360%" height="15" fill="rgb(252,71,50)" fg:x="140747" fg:w="52"/><text x="97.7290%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (84 samples, 0.06%)</title><rect x="97.4776%" y="581" width="0.0582%" height="15" fill="rgb(209,86,4)" fg:x="140745" fg:w="84"/><text x="97.7276%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (82 samples, 0.06%)</title><rect x="97.4790%" y="565" width="0.0568%" height="15" fill="rgb(229,94,0)" fg:x="140747" fg:w="82"/><text x="97.7290%" y="575.50"></text></g><g><title>__rg_dealloc (82 samples, 0.06%)</title><rect x="97.4790%" y="549" width="0.0568%" height="15" fill="rgb(252,223,21)" fg:x="140747" fg:w="82"/><text x="97.7290%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (82 samples, 0.06%)</title><rect x="97.4790%" y="533" width="0.0568%" height="15" fill="rgb(230,210,4)" fg:x="140747" fg:w="82"/><text x="97.7290%" y="543.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (23 samples, 0.02%)</title><rect x="97.5199%" y="517" width="0.0159%" height="15" fill="rgb(240,149,38)" fg:x="140806" fg:w="23"/><text x="97.7699%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (87 samples, 0.06%)</title><rect x="97.4769%" y="613" width="0.0603%" height="15" fill="rgb(254,105,20)" fg:x="140744" fg:w="87"/><text x="97.7269%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (86 samples, 0.06%)</title><rect x="97.4776%" y="597" width="0.0596%" height="15" fill="rgb(253,87,46)" fg:x="140745" fg:w="86"/><text x="97.7276%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.06%)</title><rect x="97.4755%" y="661" width="0.0623%" height="15" fill="rgb(253,116,33)" fg:x="140742" fg:w="90"/><text x="97.7255%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (89 samples, 0.06%)</title><rect x="97.4762%" y="645" width="0.0616%" height="15" fill="rgb(229,198,5)" fg:x="140743" fg:w="89"/><text x="97.7262%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (88 samples, 0.06%)</title><rect x="97.4769%" y="629" width="0.0609%" height="15" fill="rgb(242,38,37)" fg:x="140744" fg:w="88"/><text x="97.7269%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="97.5379%" y="661" width="0.0111%" height="15" fill="rgb(242,69,53)" fg:x="140832" fg:w="16"/><text x="97.7879%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="97.5379%" y="645" width="0.0111%" height="15" fill="rgb(249,80,16)" fg:x="140832" fg:w="16"/><text x="97.7879%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (34 samples, 0.02%)</title><rect x="97.5635%" y="629" width="0.0235%" height="15" fill="rgb(206,128,11)" fg:x="140869" fg:w="34"/><text x="97.8135%" y="639.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (31 samples, 0.02%)</title><rect x="97.5656%" y="613" width="0.0215%" height="15" fill="rgb(212,35,20)" fg:x="140872" fg:w="31"/><text x="97.8156%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.02%)</title><rect x="97.5656%" y="597" width="0.0215%" height="15" fill="rgb(236,79,13)" fg:x="140872" fg:w="31"/><text x="97.8156%" y="607.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="97.5704%" y="581" width="0.0166%" height="15" fill="rgb(233,123,3)" fg:x="140879" fg:w="24"/><text x="97.8204%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (38 samples, 0.03%)</title><rect x="97.5926%" y="597" width="0.0263%" height="15" fill="rgb(214,93,52)" fg:x="140911" fg:w="38"/><text x="97.8426%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (54 samples, 0.04%)</title><rect x="97.5912%" y="629" width="0.0374%" height="15" fill="rgb(251,37,40)" fg:x="140909" fg:w="54"/><text x="97.8412%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (54 samples, 0.04%)</title><rect x="97.5912%" y="613" width="0.0374%" height="15" fill="rgb(227,80,54)" fg:x="140909" fg:w="54"/><text x="97.8412%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (395 samples, 0.27%)</title><rect x="97.6833%" y="421" width="0.2736%" height="15" fill="rgb(254,48,11)" fg:x="141042" fg:w="395"/><text x="97.9333%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (42 samples, 0.03%)</title><rect x="97.9278%" y="405" width="0.0291%" height="15" fill="rgb(235,193,26)" fg:x="141395" fg:w="42"/><text x="98.1778%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (38 samples, 0.03%)</title><rect x="97.9306%" y="389" width="0.0263%" height="15" fill="rgb(229,99,21)" fg:x="141399" fg:w="38"/><text x="98.1806%" y="399.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (21 samples, 0.01%)</title><rect x="97.9423%" y="373" width="0.0145%" height="15" fill="rgb(211,140,41)" fg:x="141416" fg:w="21"/><text x="98.1923%" y="383.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (20 samples, 0.01%)</title><rect x="97.9430%" y="357" width="0.0139%" height="15" fill="rgb(240,227,30)" fg:x="141417" fg:w="20"/><text x="98.1930%" y="367.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (476 samples, 0.33%)</title><rect x="97.6286%" y="613" width="0.3297%" height="15" fill="rgb(215,224,45)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (476 samples, 0.33%)</title><rect x="97.6286%" y="597" width="0.3297%" height="15" fill="rgb(206,123,31)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="607.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (476 samples, 0.33%)</title><rect x="97.6286%" y="581" width="0.3297%" height="15" fill="rgb(210,138,16)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (476 samples, 0.33%)</title><rect x="97.6286%" y="565" width="0.3297%" height="15" fill="rgb(228,57,28)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (476 samples, 0.33%)</title><rect x="97.6286%" y="549" width="0.3297%" height="15" fill="rgb(242,170,10)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (476 samples, 0.33%)</title><rect x="97.6286%" y="533" width="0.3297%" height="15" fill="rgb(228,214,39)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (476 samples, 0.33%)</title><rect x="97.6286%" y="517" width="0.3297%" height="15" fill="rgb(218,179,33)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (476 samples, 0.33%)</title><rect x="97.6286%" y="501" width="0.3297%" height="15" fill="rgb(235,193,39)" fg:x="140963" fg:w="476"/><text x="97.8786%" y="511.50"></text></g><g><title>alloc::alloc::alloc (474 samples, 0.33%)</title><rect x="97.6300%" y="485" width="0.3283%" height="15" fill="rgb(219,221,36)" fg:x="140965" fg:w="474"/><text x="97.8800%" y="495.50"></text></g><g><title>__rg_alloc (474 samples, 0.33%)</title><rect x="97.6300%" y="469" width="0.3283%" height="15" fill="rgb(248,218,19)" fg:x="140965" fg:w="474"/><text x="97.8800%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (474 samples, 0.33%)</title><rect x="97.6300%" y="453" width="0.3283%" height="15" fill="rgb(205,50,9)" fg:x="140965" fg:w="474"/><text x="97.8800%" y="463.50"></text></g><g><title>sn_rust_alloc (472 samples, 0.33%)</title><rect x="97.6314%" y="437" width="0.3269%" height="15" fill="rgb(238,81,28)" fg:x="140967" fg:w="472"/><text x="97.8814%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (592 samples, 0.41%)</title><rect x="97.5510%" y="661" width="0.4100%" height="15" fill="rgb(235,110,19)" fg:x="140851" fg:w="592"/><text x="97.8010%" y="671.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (583 samples, 0.40%)</title><rect x="97.5573%" y="645" width="0.4038%" height="15" fill="rgb(214,7,14)" fg:x="140860" fg:w="583"/><text x="97.8073%" y="655.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (480 samples, 0.33%)</title><rect x="97.6286%" y="629" width="0.3324%" height="15" fill="rgb(211,77,3)" fg:x="140963" fg:w="480"/><text x="97.8786%" y="639.50"></text></g><g><title>concurrent_queue::full_fence (32 samples, 0.02%)</title><rect x="97.9860%" y="613" width="0.0222%" height="15" fill="rgb(229,5,9)" fg:x="141479" fg:w="32"/><text x="98.2360%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (32 samples, 0.02%)</title><rect x="97.9860%" y="597" width="0.0222%" height="15" fill="rgb(225,90,11)" fg:x="141479" fg:w="32"/><text x="98.2360%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (32 samples, 0.02%)</title><rect x="97.9860%" y="581" width="0.0222%" height="15" fill="rgb(242,56,8)" fg:x="141479" fg:w="32"/><text x="98.2360%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (32 samples, 0.02%)</title><rect x="97.9860%" y="565" width="0.0222%" height="15" fill="rgb(249,212,39)" fg:x="141479" fg:w="32"/><text x="98.2360%" y="575.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (88 samples, 0.06%)</title><rect x="97.9617%" y="661" width="0.0609%" height="15" fill="rgb(236,90,9)" fg:x="141444" fg:w="88"/><text x="98.2117%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (76 samples, 0.05%)</title><rect x="97.9700%" y="645" width="0.0526%" height="15" fill="rgb(206,88,35)" fg:x="141456" fg:w="76"/><text x="98.2200%" y="655.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (72 samples, 0.05%)</title><rect x="97.9728%" y="629" width="0.0499%" height="15" fill="rgb(205,126,30)" fg:x="141460" fg:w="72"/><text x="98.2228%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.01%)</title><rect x="98.0081%" y="613" width="0.0145%" height="15" fill="rgb(230,176,12)" fg:x="141511" fg:w="21"/><text x="98.2581%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.01%)</title><rect x="98.0081%" y="597" width="0.0145%" height="15" fill="rgb(243,19,9)" fg:x="141511" fg:w="21"/><text x="98.2581%" y="607.50"></text></g><g><title>core::mem::drop (129 samples, 0.09%)</title><rect x="98.0227%" y="661" width="0.0893%" height="15" fill="rgb(245,171,17)" fg:x="141532" fg:w="129"/><text x="98.2727%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (129 samples, 0.09%)</title><rect x="98.0227%" y="645" width="0.0893%" height="15" fill="rgb(227,52,21)" fg:x="141532" fg:w="129"/><text x="98.2727%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (129 samples, 0.09%)</title><rect x="98.0227%" y="629" width="0.0893%" height="15" fill="rgb(238,69,14)" fg:x="141532" fg:w="129"/><text x="98.2727%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (127 samples, 0.09%)</title><rect x="98.0241%" y="613" width="0.0880%" height="15" fill="rgb(241,156,39)" fg:x="141534" fg:w="127"/><text x="98.2741%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (127 samples, 0.09%)</title><rect x="98.0241%" y="597" width="0.0880%" height="15" fill="rgb(212,227,28)" fg:x="141534" fg:w="127"/><text x="98.2741%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (127 samples, 0.09%)</title><rect x="98.0241%" y="581" width="0.0880%" height="15" fill="rgb(209,118,27)" fg:x="141534" fg:w="127"/><text x="98.2741%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (127 samples, 0.09%)</title><rect x="98.0241%" y="565" width="0.0880%" height="15" fill="rgb(226,102,5)" fg:x="141534" fg:w="127"/><text x="98.2741%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.01%)</title><rect x="98.1120%" y="661" width="0.0132%" height="15" fill="rgb(223,34,3)" fg:x="141661" fg:w="19"/><text x="98.3620%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (85 samples, 0.06%)</title><rect x="98.1273%" y="661" width="0.0589%" height="15" fill="rgb(221,81,38)" fg:x="141683" fg:w="85"/><text x="98.3773%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (83 samples, 0.06%)</title><rect x="98.1286%" y="645" width="0.0575%" height="15" fill="rgb(236,219,28)" fg:x="141685" fg:w="83"/><text x="98.3786%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (83 samples, 0.06%)</title><rect x="98.1286%" y="629" width="0.0575%" height="15" fill="rgb(213,200,14)" fg:x="141685" fg:w="83"/><text x="98.3786%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (83 samples, 0.06%)</title><rect x="98.1286%" y="613" width="0.0575%" height="15" fill="rgb(240,33,19)" fg:x="141685" fg:w="83"/><text x="98.3786%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (83 samples, 0.06%)</title><rect x="98.1286%" y="597" width="0.0575%" height="15" fill="rgb(233,113,27)" fg:x="141685" fg:w="83"/><text x="98.3786%" y="607.50"></text></g><g><title>__clock_gettime (78 samples, 0.05%)</title><rect x="98.1868%" y="613" width="0.0540%" height="15" fill="rgb(220,221,18)" fg:x="141769" fg:w="78"/><text x="98.4368%" y="623.50"></text></g><g><title>__vdso_clock_gettime (70 samples, 0.05%)</title><rect x="98.1924%" y="597" width="0.0485%" height="15" fill="rgb(238,92,8)" fg:x="141777" fg:w="70"/><text x="98.4424%" y="607.50"></text></g><g><title>[[vdso]] (62 samples, 0.04%)</title><rect x="98.1979%" y="581" width="0.0429%" height="15" fill="rgb(222,164,16)" fg:x="141785" fg:w="62"/><text x="98.4479%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (1,131 samples, 0.78%)</title><rect x="97.4582%" y="677" width="0.7833%" height="15" fill="rgb(241,119,3)" fg:x="140717" fg:w="1131"/><text x="97.7082%" y="687.50"></text></g><g><title>std::time::Instant::now (80 samples, 0.06%)</title><rect x="98.1861%" y="661" width="0.0554%" height="15" fill="rgb(241,44,8)" fg:x="141768" fg:w="80"/><text x="98.4361%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (80 samples, 0.06%)</title><rect x="98.1861%" y="645" width="0.0554%" height="15" fill="rgb(230,36,40)" fg:x="141768" fg:w="80"/><text x="98.4361%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (80 samples, 0.06%)</title><rect x="98.1861%" y="629" width="0.0554%" height="15" fill="rgb(243,16,36)" fg:x="141768" fg:w="80"/><text x="98.4361%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (33 samples, 0.02%)</title><rect x="98.2457%" y="677" width="0.0229%" height="15" fill="rgb(231,4,26)" fg:x="141854" fg:w="33"/><text x="98.4957%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (33 samples, 0.02%)</title><rect x="98.2457%" y="661" width="0.0229%" height="15" fill="rgb(240,9,31)" fg:x="141854" fg:w="33"/><text x="98.4957%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (26 samples, 0.02%)</title><rect x="98.2983%" y="661" width="0.0180%" height="15" fill="rgb(207,173,15)" fg:x="141930" fg:w="26"/><text x="98.5483%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="98.2983%" y="645" width="0.0180%" height="15" fill="rgb(224,192,53)" fg:x="141930" fg:w="26"/><text x="98.5483%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.01%)</title><rect x="98.3025%" y="629" width="0.0139%" height="15" fill="rgb(223,67,28)" fg:x="141936" fg:w="20"/><text x="98.5525%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (20 samples, 0.01%)</title><rect x="98.3025%" y="613" width="0.0139%" height="15" fill="rgb(211,20,47)" fg:x="141936" fg:w="20"/><text x="98.5525%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (20 samples, 0.01%)</title><rect x="98.3025%" y="597" width="0.0139%" height="15" fill="rgb(240,228,2)" fg:x="141936" fg:w="20"/><text x="98.5525%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.01%)</title><rect x="98.3025%" y="581" width="0.0139%" height="15" fill="rgb(248,151,12)" fg:x="141936" fg:w="20"/><text x="98.5525%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (15 samples, 0.01%)</title><rect x="98.3163%" y="661" width="0.0104%" height="15" fill="rgb(244,8,39)" fg:x="141956" fg:w="15"/><text x="98.5663%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (15 samples, 0.01%)</title><rect x="98.3163%" y="645" width="0.0104%" height="15" fill="rgb(222,26,8)" fg:x="141956" fg:w="15"/><text x="98.5663%" y="655.50"></text></g><g><title>__pthread_disable_asynccancel (30 samples, 0.02%)</title><rect x="98.4334%" y="629" width="0.0208%" height="15" fill="rgb(213,106,44)" fg:x="142125" fg:w="30"/><text x="98.6834%" y="639.50"></text></g><g><title>__libc_read (159 samples, 0.11%)</title><rect x="98.3987%" y="645" width="0.1101%" height="15" fill="rgb(214,129,20)" fg:x="142075" fg:w="159"/><text x="98.6487%" y="655.50"></text></g><g><title>__pthread_enable_asynccancel (79 samples, 0.05%)</title><rect x="98.4542%" y="629" width="0.0547%" height="15" fill="rgb(212,32,13)" fg:x="142155" fg:w="79"/><text x="98.7042%" y="639.50"></text></g><g><title>epoll_wait (174 samples, 0.12%)</title><rect x="98.5089%" y="645" width="0.1205%" height="15" fill="rgb(208,168,33)" fg:x="142234" fg:w="174"/><text x="98.7589%" y="655.50"></text></g><g><title>[libc-2.31.so] (53 samples, 0.04%)</title><rect x="98.5927%" y="629" width="0.0367%" height="15" fill="rgb(231,207,8)" fg:x="142355" fg:w="53"/><text x="98.8427%" y="639.50"></text></g><g><title>polling::epoll::Poller::modify (92 samples, 0.06%)</title><rect x="98.6308%" y="645" width="0.0637%" height="15" fill="rgb(235,219,23)" fg:x="142410" fg:w="92"/><text x="98.8808%" y="655.50"></text></g><g><title>polling::epoll::Poller::ctl (73 samples, 0.05%)</title><rect x="98.6439%" y="629" width="0.0506%" height="15" fill="rgb(226,216,26)" fg:x="142429" fg:w="73"/><text x="98.8939%" y="639.50"></text></g><g><title>epoll_ctl (67 samples, 0.05%)</title><rect x="98.6481%" y="613" width="0.0464%" height="15" fill="rgb(239,137,16)" fg:x="142435" fg:w="67"/><text x="98.8981%" y="623.50"></text></g><g><title>polling::epoll::Poller::wait (572 samples, 0.40%)</title><rect x="98.3274%" y="661" width="0.3962%" height="15" fill="rgb(207,12,36)" fg:x="141972" fg:w="572"/><text x="98.5774%" y="671.50"></text></g><g><title>syscall (39 samples, 0.03%)</title><rect x="98.6966%" y="645" width="0.0270%" height="15" fill="rgb(210,214,24)" fg:x="142505" fg:w="39"/><text x="98.9466%" y="655.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,887 samples, 1.31%)</title><rect x="97.4340%" y="693" width="1.3069%" height="15" fill="rgb(206,56,30)" fg:x="140682" fg:w="1887"/><text x="97.6840%" y="703.50"></text></g><g><title>polling::Poller::wait (681 samples, 0.47%)</title><rect x="98.2692%" y="677" width="0.4716%" height="15" fill="rgb(228,143,26)" fg:x="141888" fg:w="681"/><text x="98.5192%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (25 samples, 0.02%)</title><rect x="98.7236%" y="661" width="0.0173%" height="15" fill="rgb(216,218,46)" fg:x="142544" fg:w="25"/><text x="98.9736%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (20 samples, 0.01%)</title><rect x="98.7270%" y="645" width="0.0139%" height="15" fill="rgb(206,6,19)" fg:x="142549" fg:w="20"/><text x="98.9770%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (20 samples, 0.01%)</title><rect x="98.7270%" y="629" width="0.0139%" height="15" fill="rgb(239,177,51)" fg:x="142549" fg:w="20"/><text x="98.9770%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.01%)</title><rect x="98.7270%" y="613" width="0.0139%" height="15" fill="rgb(216,55,25)" fg:x="142549" fg:w="20"/><text x="98.9770%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.01%)</title><rect x="98.7270%" y="597" width="0.0139%" height="15" fill="rgb(231,163,29)" fg:x="142549" fg:w="20"/><text x="98.9770%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (19 samples, 0.01%)</title><rect x="98.7416%" y="645" width="0.0132%" height="15" fill="rgb(232,149,50)" fg:x="142570" fg:w="19"/><text x="98.9916%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_store (19 samples, 0.01%)</title><rect x="98.7416%" y="629" width="0.0132%" height="15" fill="rgb(223,142,48)" fg:x="142570" fg:w="19"/><text x="98.9916%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (27 samples, 0.02%)</title><rect x="98.7409%" y="693" width="0.0187%" height="15" fill="rgb(245,83,23)" fg:x="142569" fg:w="27"/><text x="98.9909%" y="703.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="98.7409%" y="677" width="0.0187%" height="15" fill="rgb(224,63,2)" fg:x="142569" fg:w="27"/><text x="98.9909%" y="687.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (27 samples, 0.02%)</title><rect x="98.7409%" y="661" width="0.0187%" height="15" fill="rgb(218,65,53)" fg:x="142569" fg:w="27"/><text x="98.9909%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (31 samples, 0.02%)</title><rect x="98.7603%" y="693" width="0.0215%" height="15" fill="rgb(221,84,29)" fg:x="142597" fg:w="31"/><text x="99.0103%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_store (31 samples, 0.02%)</title><rect x="98.7603%" y="677" width="0.0215%" height="15" fill="rgb(234,0,32)" fg:x="142597" fg:w="31"/><text x="99.0103%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (47 samples, 0.03%)</title><rect x="98.8081%" y="661" width="0.0326%" height="15" fill="rgb(206,20,16)" fg:x="142666" fg:w="47"/><text x="99.0581%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="98.8081%" y="645" width="0.0326%" height="15" fill="rgb(244,172,18)" fg:x="142666" fg:w="47"/><text x="99.0581%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (44 samples, 0.03%)</title><rect x="98.8101%" y="629" width="0.0305%" height="15" fill="rgb(254,133,1)" fg:x="142669" fg:w="44"/><text x="99.0601%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (44 samples, 0.03%)</title><rect x="98.8101%" y="613" width="0.0305%" height="15" fill="rgb(222,206,41)" fg:x="142669" fg:w="44"/><text x="99.0601%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (39 samples, 0.03%)</title><rect x="98.8136%" y="597" width="0.0270%" height="15" fill="rgb(212,3,42)" fg:x="142674" fg:w="39"/><text x="99.0636%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (39 samples, 0.03%)</title><rect x="98.8136%" y="581" width="0.0270%" height="15" fill="rgb(241,11,4)" fg:x="142674" fg:w="39"/><text x="99.0636%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (120 samples, 0.08%)</title><rect x="98.8406%" y="661" width="0.0831%" height="15" fill="rgb(205,19,26)" fg:x="142713" fg:w="120"/><text x="99.0906%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (120 samples, 0.08%)</title><rect x="98.8406%" y="645" width="0.0831%" height="15" fill="rgb(210,179,32)" fg:x="142713" fg:w="120"/><text x="99.0906%" y="655.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (38 samples, 0.03%)</title><rect x="98.9307%" y="581" width="0.0263%" height="15" fill="rgb(227,116,49)" fg:x="142843" fg:w="38"/><text x="99.1807%" y="591.50"></text></g><g><title>std::sys::unix::futex::futex_wait (258 samples, 0.18%)</title><rect x="98.9265%" y="597" width="0.1787%" height="15" fill="rgb(211,146,6)" fg:x="142837" fg:w="258"/><text x="99.1765%" y="607.50"></text></g><g><title>syscall (203 samples, 0.14%)</title><rect x="98.9646%" y="581" width="0.1406%" height="15" fill="rgb(219,44,39)" fg:x="142892" fg:w="203"/><text x="99.2146%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (338 samples, 0.23%)</title><rect x="99.1052%" y="597" width="0.2341%" height="15" fill="rgb(234,128,11)" fg:x="143095" fg:w="338"/><text x="99.3552%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (338 samples, 0.23%)</title><rect x="99.1052%" y="581" width="0.2341%" height="15" fill="rgb(220,183,53)" fg:x="143095" fg:w="338"/><text x="99.3552%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (338 samples, 0.23%)</title><rect x="99.1052%" y="565" width="0.2341%" height="15" fill="rgb(213,219,32)" fg:x="143095" fg:w="338"/><text x="99.3552%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (637 samples, 0.44%)</title><rect x="98.9237%" y="661" width="0.4412%" height="15" fill="rgb(232,156,16)" fg:x="142833" fg:w="637"/><text x="99.1737%" y="671.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (635 samples, 0.44%)</title><rect x="98.9251%" y="645" width="0.4398%" height="15" fill="rgb(246,135,34)" fg:x="142835" fg:w="635"/><text x="99.1751%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (635 samples, 0.44%)</title><rect x="98.9251%" y="629" width="0.4398%" height="15" fill="rgb(241,99,0)" fg:x="142835" fg:w="635"/><text x="99.1751%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (635 samples, 0.44%)</title><rect x="98.9251%" y="613" width="0.4398%" height="15" fill="rgb(222,103,45)" fg:x="142835" fg:w="635"/><text x="99.1751%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (37 samples, 0.03%)</title><rect x="99.3393%" y="597" width="0.0256%" height="15" fill="rgb(212,57,4)" fg:x="143433" fg:w="37"/><text x="99.5893%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (37 samples, 0.03%)</title><rect x="99.3393%" y="581" width="0.0256%" height="15" fill="rgb(215,68,47)" fg:x="143433" fg:w="37"/><text x="99.5893%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (37 samples, 0.03%)</title><rect x="99.3393%" y="565" width="0.0256%" height="15" fill="rgb(230,84,2)" fg:x="143433" fg:w="37"/><text x="99.5893%" y="575.50"></text></g><g><title>parking::Parker::park (874 samples, 0.61%)</title><rect x="98.7880%" y="693" width="0.6053%" height="15" fill="rgb(220,102,14)" fg:x="142637" fg:w="874"/><text x="99.0380%" y="703.50"></text></g><g><title>parking::Inner::park (865 samples, 0.60%)</title><rect x="98.7942%" y="677" width="0.5991%" height="15" fill="rgb(240,10,32)" fg:x="142646" fg:w="865"/><text x="99.0442%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.03%)</title><rect x="99.3649%" y="661" width="0.0284%" height="15" fill="rgb(215,47,27)" fg:x="143470" fg:w="41"/><text x="99.6149%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.02%)</title><rect x="99.3691%" y="645" width="0.0242%" height="15" fill="rgb(233,188,43)" fg:x="143476" fg:w="35"/><text x="99.6191%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (35 samples, 0.02%)</title><rect x="99.3691%" y="629" width="0.0242%" height="15" fill="rgb(253,190,1)" fg:x="143476" fg:w="35"/><text x="99.6191%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (35 samples, 0.02%)</title><rect x="99.3691%" y="613" width="0.0242%" height="15" fill="rgb(206,114,52)" fg:x="143476" fg:w="35"/><text x="99.6191%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.02%)</title><rect x="99.3691%" y="597" width="0.0242%" height="15" fill="rgb(233,120,37)" fg:x="143476" fg:w="35"/><text x="99.6191%" y="607.50"></text></g><g><title>parking::Parker::park_timeout (392 samples, 0.27%)</title><rect x="99.3933%" y="693" width="0.2715%" height="15" fill="rgb(214,52,39)" fg:x="143511" fg:w="392"/><text x="99.6433%" y="703.50"></text></g><g><title>parking::Inner::park (347 samples, 0.24%)</title><rect x="99.4245%" y="677" width="0.2403%" height="15" fill="rgb(223,80,29)" fg:x="143556" fg:w="347"/><text x="99.6745%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (330 samples, 0.23%)</title><rect x="99.4362%" y="661" width="0.2286%" height="15" fill="rgb(230,101,40)" fg:x="143573" fg:w="330"/><text x="99.6862%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (330 samples, 0.23%)</title><rect x="99.4362%" y="645" width="0.2286%" height="15" fill="rgb(219,211,8)" fg:x="143573" fg:w="330"/><text x="99.6862%" y="655.50"></text></g><g><title>std::panic::catch_unwind (20,758 samples, 14.38%)</title><rect x="85.3172%" y="981" width="14.3766%" height="15" fill="rgb(252,126,28)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="991.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (20,758 samples, 14.38%)</title><rect x="85.3172%" y="965" width="14.3766%" height="15" fill="rgb(215,56,38)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,758 samples, 14.38%)</title><rect x="85.3172%" y="949" width="14.3766%" height="15" fill="rgb(249,55,44)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="959.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,758 samples, 14.38%)</title><rect x="85.3172%" y="933" width="14.3766%" height="15" fill="rgb(220,221,32)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="943.50">&lt;core::panic::unwind_s..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,758 samples, 14.38%)</title><rect x="85.3172%" y="917" width="14.3766%" height="15" fill="rgb(212,216,41)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="927.50">std::thread::Builder::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,758 samples, 14.38%)</title><rect x="85.3172%" y="901" width="14.3766%" height="15" fill="rgb(228,213,43)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="911.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (20,758 samples, 14.38%)</title><rect x="85.3172%" y="885" width="14.3766%" height="15" fill="rgb(211,31,26)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="895.50">core::ops::function::F..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,758 samples, 14.38%)</title><rect x="85.3172%" y="869" width="14.3766%" height="15" fill="rgb(229,202,19)" fg:x="123187" fg:w="20758"/><text x="85.5672%" y="879.50">async_global_executor:..</text></g><g><title>std::panic::catch_unwind (20,726 samples, 14.35%)</title><rect x="85.3394%" y="853" width="14.3545%" height="15" fill="rgb(229,105,46)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="863.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (20,726 samples, 14.35%)</title><rect x="85.3394%" y="837" width="14.3545%" height="15" fill="rgb(235,108,1)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,726 samples, 14.35%)</title><rect x="85.3394%" y="821" width="14.3545%" height="15" fill="rgb(245,111,35)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="831.50">std::panicking::try::d..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (20,726 samples, 14.35%)</title><rect x="85.3394%" y="805" width="14.3545%" height="15" fill="rgb(219,185,31)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="815.50">async_global_executor:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,726 samples, 14.35%)</title><rect x="85.3394%" y="789" width="14.3545%" height="15" fill="rgb(214,4,43)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="799.50">std::thread::local::Lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,726 samples, 14.35%)</title><rect x="85.3394%" y="773" width="14.3545%" height="15" fill="rgb(235,227,40)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="783.50">std::thread::local::Lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (20,726 samples, 14.35%)</title><rect x="85.3394%" y="757" width="14.3545%" height="15" fill="rgb(230,88,30)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="767.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on (20,726 samples, 14.35%)</title><rect x="85.3394%" y="741" width="14.3545%" height="15" fill="rgb(216,217,1)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="751.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,726 samples, 14.35%)</title><rect x="85.3394%" y="725" width="14.3545%" height="15" fill="rgb(248,139,50)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="735.50">async_global_executor:..</text></g><g><title>async_io::driver::block_on (20,726 samples, 14.35%)</title><rect x="85.3394%" y="709" width="14.3545%" height="15" fill="rgb(233,1,21)" fg:x="123219" fg:w="20726"/><text x="85.5894%" y="719.50">async_io::driver::bloc..</text></g><g><title>std::time::Instant::now (37 samples, 0.03%)</title><rect x="99.6683%" y="693" width="0.0256%" height="15" fill="rgb(215,183,12)" fg:x="143908" fg:w="37"/><text x="99.9183%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (37 samples, 0.03%)</title><rect x="99.6683%" y="677" width="0.0256%" height="15" fill="rgb(229,104,42)" fg:x="143908" fg:w="37"/><text x="99.9183%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (37 samples, 0.03%)</title><rect x="99.6683%" y="661" width="0.0256%" height="15" fill="rgb(243,34,48)" fg:x="143908" fg:w="37"/><text x="99.9183%" y="671.50"></text></g><g><title>__clock_gettime (32 samples, 0.02%)</title><rect x="99.6717%" y="645" width="0.0222%" height="15" fill="rgb(239,11,44)" fg:x="143913" fg:w="32"/><text x="99.9217%" y="655.50"></text></g><g><title>__vdso_clock_gettime (28 samples, 0.02%)</title><rect x="99.6745%" y="629" width="0.0194%" height="15" fill="rgb(231,98,35)" fg:x="143917" fg:w="28"/><text x="99.9245%" y="639.50"></text></g><g><title>[[vdso]] (24 samples, 0.02%)</title><rect x="99.6773%" y="613" width="0.0166%" height="15" fill="rgb(233,28,25)" fg:x="143921" fg:w="24"/><text x="99.9273%" y="623.50"></text></g><g><title>clone (20,783 samples, 14.39%)</title><rect x="85.3068%" y="1093" width="14.3940%" height="15" fill="rgb(234,123,11)" fg:x="123172" fg:w="20783"/><text x="85.5568%" y="1103.50">clone</text></g><g><title>start_thread (20,768 samples, 14.38%)</title><rect x="85.3172%" y="1077" width="14.3836%" height="15" fill="rgb(220,69,3)" fg:x="123187" fg:w="20768"/><text x="85.5672%" y="1087.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,768 samples, 14.38%)</title><rect x="85.3172%" y="1061" width="14.3836%" height="15" fill="rgb(214,64,36)" fg:x="123187" fg:w="20768"/><text x="85.5672%" y="1071.50">std::sys::unix::thread..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,768 samples, 14.38%)</title><rect x="85.3172%" y="1045" width="14.3836%" height="15" fill="rgb(211,138,32)" fg:x="123187" fg:w="20768"/><text x="85.5672%" y="1055.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,768 samples, 14.38%)</title><rect x="85.3172%" y="1029" width="14.3836%" height="15" fill="rgb(213,118,47)" fg:x="123187" fg:w="20768"/><text x="85.5672%" y="1039.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,768 samples, 14.38%)</title><rect x="85.3172%" y="1013" width="14.3836%" height="15" fill="rgb(243,124,49)" fg:x="123187" fg:w="20768"/><text x="85.5672%" y="1023.50">core::ops::function::F..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,768 samples, 14.38%)</title><rect x="85.3172%" y="997" width="14.3836%" height="15" fill="rgb(221,30,28)" fg:x="123187" fg:w="20768"/><text x="85.5672%" y="1007.50">std::thread::Builder::..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (15 samples, 0.01%)</title><rect x="99.7008%" y="1093" width="0.0104%" height="15" fill="rgb(246,37,13)" fg:x="143955" fg:w="15"/><text x="99.9508%" y="1103.50"></text></g><g><title>signal_hook_registry::GLOBAL_DATA (15 samples, 0.01%)</title><rect x="99.7244%" y="1093" width="0.0104%" height="15" fill="rgb(249,66,14)" fg:x="143989" fg:w="15"/><text x="99.9744%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (19 samples, 0.01%)</title><rect x="99.7444%" y="1093" width="0.0132%" height="15" fill="rgb(213,166,5)" fg:x="144018" fg:w="19"/><text x="99.9944%" y="1103.50"></text></g><g><title>async-std/runti (144,006 samples, 99.74%)</title><rect x="0.0471%" y="1109" width="99.7361%" height="15" fill="rgb(221,66,24)" fg:x="68" fg:w="144006"/><text x="0.2971%" y="1119.50">async-std/runti</text></g><g><title>tremor_value::value::ValueDeserializer::parse (32 samples, 0.02%)</title><rect x="99.7611%" y="1093" width="0.0222%" height="15" fill="rgb(210,132,17)" fg:x="144042" fg:w="32"/><text x="100.0111%" y="1103.50"></text></g><g><title>blocking-4 (17 samples, 0.01%)</title><rect x="99.8005%" y="1109" width="0.0118%" height="15" fill="rgb(243,202,5)" fg:x="144099" fg:w="17"/><text x="100.0505%" y="1119.50"></text></g><g><title>clone (16 samples, 0.01%)</title><rect x="99.8012%" y="1093" width="0.0111%" height="15" fill="rgb(233,70,48)" fg:x="144100" fg:w="16"/><text x="100.0512%" y="1103.50"></text></g><g><title>pdk-noknownkey (183 samples, 0.13%)</title><rect x="99.8130%" y="1109" width="0.1267%" height="15" fill="rgb(238,41,26)" fg:x="144117" fg:w="183"/><text x="100.0630%" y="1119.50"></text></g><g><title>clone (163 samples, 0.11%)</title><rect x="99.8269%" y="1093" width="0.1129%" height="15" fill="rgb(241,19,31)" fg:x="144137" fg:w="163"/><text x="100.0769%" y="1103.50"></text></g><g><title>std::sys::unix::futex::futex_wait (75 samples, 0.05%)</title><rect x="99.9404%" y="773" width="0.0519%" height="15" fill="rgb(214,76,10)" fg:x="144301" fg:w="75"/><text x="100.1904%" y="783.50"></text></g><g><title>syscall (74 samples, 0.05%)</title><rect x="99.9411%" y="757" width="0.0513%" height="15" fill="rgb(254,202,22)" fg:x="144302" fg:w="74"/><text x="100.1911%" y="767.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (83 samples, 0.06%)</title><rect x="99.9397%" y="853" width="0.0575%" height="15" fill="rgb(214,72,24)" fg:x="144300" fg:w="83"/><text x="100.1897%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (83 samples, 0.06%)</title><rect x="99.9397%" y="837" width="0.0575%" height="15" fill="rgb(221,92,46)" fg:x="144300" fg:w="83"/><text x="100.1897%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (83 samples, 0.06%)</title><rect x="99.9397%" y="821" width="0.0575%" height="15" fill="rgb(246,13,50)" fg:x="144300" fg:w="83"/><text x="100.1897%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (83 samples, 0.06%)</title><rect x="99.9397%" y="805" width="0.0575%" height="15" fill="rgb(240,165,38)" fg:x="144300" fg:w="83"/><text x="100.1897%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (82 samples, 0.06%)</title><rect x="99.9404%" y="789" width="0.0568%" height="15" fill="rgb(241,24,51)" fg:x="144301" fg:w="82"/><text x="100.1904%" y="799.50"></text></g><g><title>std::panic::catch_unwind (85 samples, 0.06%)</title><rect x="99.9397%" y="981" width="0.0589%" height="15" fill="rgb(227,51,44)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="991.50"></text></g><g><title>std::panicking::try (85 samples, 0.06%)</title><rect x="99.9397%" y="965" width="0.0589%" height="15" fill="rgb(231,121,3)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="975.50"></text></g><g><title>std::panicking::try::do_call (85 samples, 0.06%)</title><rect x="99.9397%" y="949" width="0.0589%" height="15" fill="rgb(245,3,41)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (85 samples, 0.06%)</title><rect x="99.9397%" y="933" width="0.0589%" height="15" fill="rgb(214,13,26)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (85 samples, 0.06%)</title><rect x="99.9397%" y="917" width="0.0589%" height="15" fill="rgb(252,75,11)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (85 samples, 0.06%)</title><rect x="99.9397%" y="901" width="0.0589%" height="15" fill="rgb(218,226,17)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (85 samples, 0.06%)</title><rect x="99.9397%" y="885" width="0.0589%" height="15" fill="rgb(248,89,38)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (85 samples, 0.06%)</title><rect x="99.9397%" y="869" width="0.0589%" height="15" fill="rgb(237,73,46)" fg:x="144300" fg:w="85"/><text x="100.1897%" y="879.50"></text></g><g><title>clone (86 samples, 0.06%)</title><rect x="99.9397%" y="1093" width="0.0596%" height="15" fill="rgb(242,78,33)" fg:x="144300" fg:w="86"/><text x="100.1897%" y="1103.50"></text></g><g><title>start_thread (86 samples, 0.06%)</title><rect x="99.9397%" y="1077" width="0.0596%" height="15" fill="rgb(235,60,3)" fg:x="144300" fg:w="86"/><text x="100.1897%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (86 samples, 0.06%)</title><rect x="99.9397%" y="1061" width="0.0596%" height="15" fill="rgb(216,172,19)" fg:x="144300" fg:w="86"/><text x="100.1897%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (86 samples, 0.06%)</title><rect x="99.9397%" y="1045" width="0.0596%" height="15" fill="rgb(227,6,42)" fg:x="144300" fg:w="86"/><text x="100.1897%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (86 samples, 0.06%)</title><rect x="99.9397%" y="1029" width="0.0596%" height="15" fill="rgb(223,207,42)" fg:x="144300" fg:w="86"/><text x="100.1897%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (86 samples, 0.06%)</title><rect x="99.9397%" y="1013" width="0.0596%" height="15" fill="rgb(246,138,30)" fg:x="144300" fg:w="86"/><text x="100.1897%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (86 samples, 0.06%)</title><rect x="99.9397%" y="997" width="0.0596%" height="15" fill="rgb(251,199,47)" fg:x="144300" fg:w="86"/><text x="100.1897%" y="1007.50"></text></g><g><title>all (144,387 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(228,218,44)" fg:x="0" fg:w="144387"/><text x="0.2500%" y="1135.50"></text></g><g><title>tokio-runtime-w (87 samples, 0.06%)</title><rect x="99.9397%" y="1109" width="0.0603%" height="15" fill="rgb(220,68,6)" fg:x="144300" fg:w="87"/><text x="100.1897%" y="1119.50"></text></g></svg></svg>