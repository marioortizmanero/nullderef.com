<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="981.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="110729"><g><title>std::sync::condvar::Condvar::wait_timeout (36 samples, 0.03%)</title><rect x="0.0072%" y="645" width="0.0325%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="36"/><text x="0.2572%" y="655.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (35 samples, 0.03%)</title><rect x="0.0081%" y="629" width="0.0316%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="35"/><text x="0.2581%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (35 samples, 0.03%)</title><rect x="0.0081%" y="613" width="0.0316%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="35"/><text x="0.2581%" y="623.50"></text></g><g><title>__pthread_cond_timedwait (35 samples, 0.03%)</title><rect x="0.0081%" y="597" width="0.0316%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="35"/><text x="0.2581%" y="607.50"></text></g><g><title>async-io (44 samples, 0.04%)</title><rect x="0.0009%" y="933" width="0.0397%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="44"/><text x="0.2509%" y="943.50"></text></g><g><title>clone (40 samples, 0.04%)</title><rect x="0.0045%" y="917" width="0.0361%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="40"/><text x="0.2545%" y="927.50"></text></g><g><title>start_thread (40 samples, 0.04%)</title><rect x="0.0045%" y="901" width="0.0361%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="40"/><text x="0.2545%" y="911.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (40 samples, 0.04%)</title><rect x="0.0045%" y="885" width="0.0361%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="40"/><text x="0.2545%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40 samples, 0.04%)</title><rect x="0.0045%" y="869" width="0.0361%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="40"/><text x="0.2545%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40 samples, 0.04%)</title><rect x="0.0045%" y="853" width="0.0361%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="40"/><text x="0.2545%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (40 samples, 0.04%)</title><rect x="0.0045%" y="837" width="0.0361%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="40"/><text x="0.2545%" y="847.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (40 samples, 0.04%)</title><rect x="0.0045%" y="821" width="0.0361%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="40"/><text x="0.2545%" y="831.50"></text></g><g><title>std::panic::catch_unwind (40 samples, 0.04%)</title><rect x="0.0045%" y="805" width="0.0361%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="40"/><text x="0.2545%" y="815.50"></text></g><g><title>std::panicking::try (40 samples, 0.04%)</title><rect x="0.0045%" y="789" width="0.0361%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="40"/><text x="0.2545%" y="799.50"></text></g><g><title>std::panicking::try::do_call (40 samples, 0.04%)</title><rect x="0.0045%" y="773" width="0.0361%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="40"/><text x="0.2545%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40 samples, 0.04%)</title><rect x="0.0045%" y="757" width="0.0361%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="40"/><text x="0.2545%" y="767.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (40 samples, 0.04%)</title><rect x="0.0045%" y="741" width="0.0361%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="40"/><text x="0.2545%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (40 samples, 0.04%)</title><rect x="0.0045%" y="725" width="0.0361%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="40"/><text x="0.2545%" y="735.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (40 samples, 0.04%)</title><rect x="0.0045%" y="709" width="0.0361%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="40"/><text x="0.2545%" y="719.50"></text></g><g><title>async_io::driver::main_loop (40 samples, 0.04%)</title><rect x="0.0045%" y="693" width="0.0361%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="40"/><text x="0.2545%" y="703.50"></text></g><g><title>parking::Parker::park_timeout (38 samples, 0.03%)</title><rect x="0.0063%" y="677" width="0.0343%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="38"/><text x="0.2563%" y="687.50"></text></g><g><title>parking::Inner::park (38 samples, 0.03%)</title><rect x="0.0063%" y="661" width="0.0343%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="38"/><text x="0.2563%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="0.0461%" y="917" width="0.0126%" height="15" fill="rgb(221,5,38)" fg:x="51" fg:w="14"/><text x="0.2961%" y="927.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="0.0786%" y="917" width="0.0135%" height="15" fill="rgb(247,18,42)" fg:x="87" fg:w="15"/><text x="0.3286%" y="927.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (39 samples, 0.04%)</title><rect x="0.2095%" y="869" width="0.0352%" height="15" fill="rgb(241,131,45)" fg:x="232" fg:w="39"/><text x="0.4595%" y="879.50"></text></g><g><title>serde::de::MapAccess::next_key (39 samples, 0.04%)</title><rect x="0.2095%" y="853" width="0.0352%" height="15" fill="rgb(249,31,29)" fg:x="232" fg:w="39"/><text x="0.4595%" y="863.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (39 samples, 0.04%)</title><rect x="0.2095%" y="837" width="0.0352%" height="15" fill="rgb(225,111,53)" fg:x="232" fg:w="39"/><text x="0.4595%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (39 samples, 0.04%)</title><rect x="0.2095%" y="821" width="0.0352%" height="15" fill="rgb(238,160,17)" fg:x="232" fg:w="39"/><text x="0.4595%" y="831.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (39 samples, 0.04%)</title><rect x="0.2095%" y="805" width="0.0352%" height="15" fill="rgb(214,148,48)" fg:x="232" fg:w="39"/><text x="0.4595%" y="815.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (39 samples, 0.04%)</title><rect x="0.2095%" y="789" width="0.0352%" height="15" fill="rgb(232,36,49)" fg:x="232" fg:w="39"/><text x="0.4595%" y="799.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (33 samples, 0.03%)</title><rect x="0.2447%" y="869" width="0.0298%" height="15" fill="rgb(209,103,24)" fg:x="271" fg:w="33"/><text x="0.4947%" y="879.50"></text></g><g><title>serde::de::MapAccess::next_value (33 samples, 0.03%)</title><rect x="0.2447%" y="853" width="0.0298%" height="15" fill="rgb(229,88,8)" fg:x="271" fg:w="33"/><text x="0.4947%" y="863.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (33 samples, 0.03%)</title><rect x="0.2447%" y="837" width="0.0298%" height="15" fill="rgb(213,181,19)" fg:x="271" fg:w="33"/><text x="0.4947%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (33 samples, 0.03%)</title><rect x="0.2447%" y="821" width="0.0298%" height="15" fill="rgb(254,191,54)" fg:x="271" fg:w="33"/><text x="0.4947%" y="831.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (33 samples, 0.03%)</title><rect x="0.2447%" y="805" width="0.0298%" height="15" fill="rgb(241,83,37)" fg:x="271" fg:w="33"/><text x="0.4947%" y="815.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (97 samples, 0.09%)</title><rect x="0.2095%" y="885" width="0.0876%" height="15" fill="rgb(233,36,39)" fg:x="232" fg:w="97"/><text x="0.4595%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (25 samples, 0.02%)</title><rect x="0.2745%" y="869" width="0.0226%" height="15" fill="rgb(226,3,54)" fg:x="304" fg:w="25"/><text x="0.5245%" y="879.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (270 samples, 0.24%)</title><rect x="0.0975%" y="901" width="0.2438%" height="15" fill="rgb(245,192,40)" fg:x="108" fg:w="270"/><text x="0.3475%" y="911.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (49 samples, 0.04%)</title><rect x="0.2971%" y="885" width="0.0443%" height="15" fill="rgb(238,167,29)" fg:x="329" fg:w="49"/><text x="0.5471%" y="895.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (89 samples, 0.08%)</title><rect x="0.5229%" y="869" width="0.0804%" height="15" fill="rgb(232,182,51)" fg:x="579" fg:w="89"/><text x="0.7729%" y="879.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (89 samples, 0.08%)</title><rect x="0.5229%" y="853" width="0.0804%" height="15" fill="rgb(231,60,39)" fg:x="579" fg:w="89"/><text x="0.7729%" y="863.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (89 samples, 0.08%)</title><rect x="0.5229%" y="837" width="0.0804%" height="15" fill="rgb(208,69,12)" fg:x="579" fg:w="89"/><text x="0.7729%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (89 samples, 0.08%)</title><rect x="0.5229%" y="821" width="0.0804%" height="15" fill="rgb(235,93,37)" fg:x="579" fg:w="89"/><text x="0.7729%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (89 samples, 0.08%)</title><rect x="0.5229%" y="805" width="0.0804%" height="15" fill="rgb(213,116,39)" fg:x="579" fg:w="89"/><text x="0.7729%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (89 samples, 0.08%)</title><rect x="0.5229%" y="789" width="0.0804%" height="15" fill="rgb(222,207,29)" fg:x="579" fg:w="89"/><text x="0.7729%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.08%)</title><rect x="0.5247%" y="773" width="0.0786%" height="15" fill="rgb(206,96,30)" fg:x="581" fg:w="87"/><text x="0.7747%" y="783.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (352 samples, 0.32%)</title><rect x="0.3414%" y="901" width="0.3179%" height="15" fill="rgb(218,138,4)" fg:x="378" fg:w="352"/><text x="0.5914%" y="911.50"></text></g><g><title>rmp::encode::str::write_str (151 samples, 0.14%)</title><rect x="0.5229%" y="885" width="0.1364%" height="15" fill="rgb(250,191,14)" fg:x="579" fg:w="151"/><text x="0.7729%" y="895.50"></text></g><g><title>rmp::encode::str::write_str_len (62 samples, 0.06%)</title><rect x="0.6033%" y="869" width="0.0560%" height="15" fill="rgb(239,60,40)" fg:x="668" fg:w="62"/><text x="0.8533%" y="879.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (23 samples, 0.02%)</title><rect x="0.6593%" y="901" width="0.0208%" height="15" fill="rgb(206,27,48)" fg:x="730" fg:w="23"/><text x="0.9093%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (40 samples, 0.04%)</title><rect x="0.6846%" y="901" width="0.0361%" height="15" fill="rgb(225,35,8)" fg:x="758" fg:w="40"/><text x="0.9346%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 0.02%)</title><rect x="0.7053%" y="885" width="0.0154%" height="15" fill="rgb(250,213,24)" fg:x="781" fg:w="17"/><text x="0.9553%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17 samples, 0.02%)</title><rect x="0.7053%" y="869" width="0.0154%" height="15" fill="rgb(247,123,22)" fg:x="781" fg:w="17"/><text x="0.9553%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 0.01%)</title><rect x="0.7089%" y="853" width="0.0117%" height="15" fill="rgb(231,138,38)" fg:x="785" fg:w="13"/><text x="0.9589%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.7225%" y="885" width="0.0181%" height="15" fill="rgb(231,145,46)" fg:x="800" fg:w="20"/><text x="0.9725%" y="895.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.7225%" y="869" width="0.0181%" height="15" fill="rgb(251,118,11)" fg:x="800" fg:w="20"/><text x="0.9725%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.7225%" y="853" width="0.0181%" height="15" fill="rgb(217,147,25)" fg:x="800" fg:w="20"/><text x="0.9725%" y="863.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (20 samples, 0.02%)</title><rect x="0.7225%" y="837" width="0.0181%" height="15" fill="rgb(247,81,37)" fg:x="800" fg:w="20"/><text x="0.9725%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (33 samples, 0.03%)</title><rect x="0.7207%" y="901" width="0.0298%" height="15" fill="rgb(209,12,38)" fg:x="798" fg:w="33"/><text x="0.9707%" y="911.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="0.7722%" y="901" width="0.0108%" height="15" fill="rgb(227,1,9)" fg:x="855" fg:w="12"/><text x="1.0222%" y="911.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.05%)</title><rect x="0.7830%" y="901" width="0.0452%" height="15" fill="rgb(248,47,43)" fg:x="867" fg:w="50"/><text x="1.0330%" y="911.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (19 samples, 0.02%)</title><rect x="0.9076%" y="885" width="0.0172%" height="15" fill="rgb(221,10,30)" fg:x="1005" fg:w="19"/><text x="1.1576%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (116 samples, 0.10%)</title><rect x="0.8281%" y="901" width="0.1048%" height="15" fill="rgb(210,229,1)" fg:x="917" fg:w="116"/><text x="1.0781%" y="911.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="0.9329%" y="901" width="0.0163%" height="15" fill="rgb(222,148,37)" fg:x="1033" fg:w="18"/><text x="1.1829%" y="911.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (30 samples, 0.03%)</title><rect x="0.9492%" y="901" width="0.0271%" height="15" fill="rgb(234,67,33)" fg:x="1051" fg:w="30"/><text x="1.1992%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="1.1515%" y="869" width="0.0108%" height="15" fill="rgb(247,98,35)" fg:x="1275" fg:w="12"/><text x="1.4015%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="1.1515%" y="853" width="0.0108%" height="15" fill="rgb(247,138,52)" fg:x="1275" fg:w="12"/><text x="1.4015%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (33 samples, 0.03%)</title><rect x="1.1361%" y="885" width="0.0298%" height="15" fill="rgb(213,79,30)" fg:x="1258" fg:w="33"/><text x="1.3861%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (29 samples, 0.03%)</title><rect x="1.1713%" y="853" width="0.0262%" height="15" fill="rgb(246,177,23)" fg:x="1297" fg:w="29"/><text x="1.4213%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (29 samples, 0.03%)</title><rect x="1.1713%" y="837" width="0.0262%" height="15" fill="rgb(230,62,27)" fg:x="1297" fg:w="29"/><text x="1.4213%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (29 samples, 0.03%)</title><rect x="1.1713%" y="821" width="0.0262%" height="15" fill="rgb(216,154,8)" fg:x="1297" fg:w="29"/><text x="1.4213%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (317 samples, 0.29%)</title><rect x="1.1713%" y="885" width="0.2863%" height="15" fill="rgb(244,35,45)" fg:x="1297" fg:w="317"/><text x="1.4213%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (317 samples, 0.29%)</title><rect x="1.1713%" y="869" width="0.2863%" height="15" fill="rgb(251,115,12)" fg:x="1297" fg:w="317"/><text x="1.4213%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (288 samples, 0.26%)</title><rect x="1.1975%" y="853" width="0.2601%" height="15" fill="rgb(240,54,50)" fg:x="1326" fg:w="288"/><text x="1.4475%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (288 samples, 0.26%)</title><rect x="1.1975%" y="837" width="0.2601%" height="15" fill="rgb(233,84,52)" fg:x="1326" fg:w="288"/><text x="1.4475%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (288 samples, 0.26%)</title><rect x="1.1975%" y="821" width="0.2601%" height="15" fill="rgb(207,117,47)" fg:x="1326" fg:w="288"/><text x="1.4475%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (288 samples, 0.26%)</title><rect x="1.1975%" y="805" width="0.2601%" height="15" fill="rgb(249,43,39)" fg:x="1326" fg:w="288"/><text x="1.4475%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (23 samples, 0.02%)</title><rect x="1.4576%" y="885" width="0.0208%" height="15" fill="rgb(209,38,44)" fg:x="1614" fg:w="23"/><text x="1.7076%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (595 samples, 0.54%)</title><rect x="0.9763%" y="901" width="0.5373%" height="15" fill="rgb(236,212,23)" fg:x="1081" fg:w="595"/><text x="1.2263%" y="911.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (25 samples, 0.02%)</title><rect x="1.4910%" y="885" width="0.0226%" height="15" fill="rgb(242,79,21)" fg:x="1651" fg:w="25"/><text x="1.7410%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (64 samples, 0.06%)</title><rect x="1.5136%" y="901" width="0.0578%" height="15" fill="rgb(211,96,35)" fg:x="1676" fg:w="64"/><text x="1.7636%" y="911.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="1.5714%" y="901" width="0.0154%" height="15" fill="rgb(253,215,40)" fg:x="1740" fg:w="17"/><text x="1.8214%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (14 samples, 0.01%)</title><rect x="1.5741%" y="885" width="0.0126%" height="15" fill="rgb(211,81,21)" fg:x="1743" fg:w="14"/><text x="1.8241%" y="895.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="1.5741%" y="869" width="0.0126%" height="15" fill="rgb(208,190,38)" fg:x="1743" fg:w="14"/><text x="1.8241%" y="879.50"></text></g><g><title>core::ptr::read (14 samples, 0.01%)</title><rect x="1.5741%" y="853" width="0.0126%" height="15" fill="rgb(235,213,38)" fg:x="1743" fg:w="14"/><text x="1.8241%" y="863.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="1.5868%" y="901" width="0.0181%" height="15" fill="rgb(237,122,38)" fg:x="1757" fg:w="20"/><text x="1.8368%" y="911.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="1.6048%" y="901" width="0.0172%" height="15" fill="rgb(244,218,35)" fg:x="1777" fg:w="19"/><text x="1.8548%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (30 samples, 0.03%)</title><rect x="1.6220%" y="901" width="0.0271%" height="15" fill="rgb(240,68,47)" fg:x="1796" fg:w="30"/><text x="1.8720%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (63 samples, 0.06%)</title><rect x="1.6491%" y="901" width="0.0569%" height="15" fill="rgb(210,16,53)" fg:x="1826" fg:w="63"/><text x="1.8991%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (40 samples, 0.04%)</title><rect x="1.7304%" y="901" width="0.0361%" height="15" fill="rgb(235,124,12)" fg:x="1916" fg:w="40"/><text x="1.9804%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 0.01%)</title><rect x="1.7538%" y="885" width="0.0126%" height="15" fill="rgb(224,169,11)" fg:x="1942" fg:w="14"/><text x="2.0038%" y="895.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="1.7665%" y="901" width="0.0280%" height="15" fill="rgb(250,166,2)" fg:x="1956" fg:w="31"/><text x="2.0165%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="1.8983%" y="885" width="0.0135%" height="15" fill="rgb(242,216,29)" fg:x="2102" fg:w="15"/><text x="2.1483%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (15 samples, 0.01%)</title><rect x="1.8983%" y="869" width="0.0135%" height="15" fill="rgb(230,116,27)" fg:x="2102" fg:w="15"/><text x="2.1483%" y="879.50"></text></g><g><title>[libc-2.31.so] (127 samples, 0.11%)</title><rect x="1.8035%" y="901" width="0.1147%" height="15" fill="rgb(228,99,48)" fg:x="1997" fg:w="127"/><text x="2.0535%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (83 samples, 0.07%)</title><rect x="1.9182%" y="805" width="0.0750%" height="15" fill="rgb(253,11,6)" fg:x="2124" fg:w="83"/><text x="2.1682%" y="815.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (83 samples, 0.07%)</title><rect x="1.9182%" y="789" width="0.0750%" height="15" fill="rgb(247,143,39)" fg:x="2124" fg:w="83"/><text x="2.1682%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (83 samples, 0.07%)</title><rect x="1.9182%" y="773" width="0.0750%" height="15" fill="rgb(236,97,10)" fg:x="2124" fg:w="83"/><text x="2.1682%" y="783.50"></text></g><g><title>[tremor-pdk-hashbrown] (87 samples, 0.08%)</title><rect x="1.9182%" y="901" width="0.0786%" height="15" fill="rgb(233,208,19)" fg:x="2124" fg:w="87"/><text x="2.1682%" y="911.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (87 samples, 0.08%)</title><rect x="1.9182%" y="885" width="0.0786%" height="15" fill="rgb(216,164,2)" fg:x="2124" fg:w="87"/><text x="2.1682%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (87 samples, 0.08%)</title><rect x="1.9182%" y="869" width="0.0786%" height="15" fill="rgb(220,129,5)" fg:x="2124" fg:w="87"/><text x="2.1682%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (87 samples, 0.08%)</title><rect x="1.9182%" y="853" width="0.0786%" height="15" fill="rgb(242,17,10)" fg:x="2124" fg:w="87"/><text x="2.1682%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (87 samples, 0.08%)</title><rect x="1.9182%" y="837" width="0.0786%" height="15" fill="rgb(242,107,0)" fg:x="2124" fg:w="87"/><text x="2.1682%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.08%)</title><rect x="1.9182%" y="821" width="0.0786%" height="15" fill="rgb(251,28,31)" fg:x="2124" fg:w="87"/><text x="2.1682%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (16 samples, 0.01%)</title><rect x="1.9968%" y="901" width="0.0144%" height="15" fill="rgb(233,223,10)" fg:x="2211" fg:w="16"/><text x="2.2468%" y="911.50"></text></g><g><title>__clock_gettime (16 samples, 0.01%)</title><rect x="2.0320%" y="901" width="0.0144%" height="15" fill="rgb(215,21,27)" fg:x="2250" fg:w="16"/><text x="2.2820%" y="911.50"></text></g><g><title>__pthread_cond_wait (18 samples, 0.02%)</title><rect x="2.0591%" y="901" width="0.0163%" height="15" fill="rgb(232,23,21)" fg:x="2280" fg:w="18"/><text x="2.3091%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (30 samples, 0.03%)</title><rect x="2.0817%" y="901" width="0.0271%" height="15" fill="rgb(244,5,23)" fg:x="2305" fg:w="30"/><text x="2.3317%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (26 samples, 0.02%)</title><rect x="2.0853%" y="885" width="0.0235%" height="15" fill="rgb(226,81,46)" fg:x="2309" fg:w="26"/><text x="2.3353%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="2.0853%" y="869" width="0.0235%" height="15" fill="rgb(247,70,30)" fg:x="2309" fg:w="26"/><text x="2.3353%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="2.0853%" y="853" width="0.0235%" height="15" fill="rgb(212,68,19)" fg:x="2309" fg:w="26"/><text x="2.3353%" y="863.50"></text></g><g><title>abi_stable::erased_types::iterator::next (66 samples, 0.06%)</title><rect x="2.1088%" y="901" width="0.0596%" height="15" fill="rgb(240,187,13)" fg:x="2335" fg:w="66"/><text x="2.3588%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="2.2018%" y="885" width="0.0244%" height="15" fill="rgb(223,113,26)" fg:x="2438" fg:w="27"/><text x="2.4518%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="2.2018%" y="869" width="0.0244%" height="15" fill="rgb(206,192,2)" fg:x="2438" fg:w="27"/><text x="2.4518%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (27 samples, 0.02%)</title><rect x="2.2018%" y="853" width="0.0244%" height="15" fill="rgb(241,108,4)" fg:x="2438" fg:w="27"/><text x="2.4518%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="2.2018%" y="837" width="0.0244%" height="15" fill="rgb(247,173,49)" fg:x="2438" fg:w="27"/><text x="2.4518%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="2.2262%" y="885" width="0.0370%" height="15" fill="rgb(224,114,35)" fg:x="2465" fg:w="41"/><text x="2.4762%" y="895.50"></text></g><g><title>alloc::alloc::box_free (41 samples, 0.04%)</title><rect x="2.2262%" y="869" width="0.0370%" height="15" fill="rgb(245,159,27)" fg:x="2465" fg:w="41"/><text x="2.4762%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.04%)</title><rect x="2.2262%" y="853" width="0.0370%" height="15" fill="rgb(245,172,44)" fg:x="2465" fg:w="41"/><text x="2.4762%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.04%)</title><rect x="2.2262%" y="837" width="0.0370%" height="15" fill="rgb(236,23,11)" fg:x="2465" fg:w="41"/><text x="2.4762%" y="847.50"></text></g><g><title>__rg_dealloc (41 samples, 0.04%)</title><rect x="2.2262%" y="821" width="0.0370%" height="15" fill="rgb(205,117,38)" fg:x="2465" fg:w="41"/><text x="2.4762%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (41 samples, 0.04%)</title><rect x="2.2262%" y="805" width="0.0370%" height="15" fill="rgb(237,72,25)" fg:x="2465" fg:w="41"/><text x="2.4762%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (107 samples, 0.10%)</title><rect x="2.1693%" y="901" width="0.0966%" height="15" fill="rgb(244,70,9)" fg:x="2402" fg:w="107"/><text x="2.4193%" y="911.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (17 samples, 0.02%)</title><rect x="2.3110%" y="885" width="0.0154%" height="15" fill="rgb(217,125,39)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="895.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.02%)</title><rect x="2.3110%" y="869" width="0.0154%" height="15" fill="rgb(235,36,10)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.02%)</title><rect x="2.3110%" y="853" width="0.0154%" height="15" fill="rgb(251,123,47)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.02%)</title><rect x="2.3110%" y="837" width="0.0154%" height="15" fill="rgb(221,13,13)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.02%)</title><rect x="2.3110%" y="821" width="0.0154%" height="15" fill="rgb(238,131,9)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.02%)</title><rect x="2.3110%" y="805" width="0.0154%" height="15" fill="rgb(211,50,8)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="815.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.02%)</title><rect x="2.3110%" y="789" width="0.0154%" height="15" fill="rgb(245,182,24)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="799.50"></text></g><g><title>__rg_alloc (17 samples, 0.02%)</title><rect x="2.3110%" y="773" width="0.0154%" height="15" fill="rgb(242,14,37)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.02%)</title><rect x="2.3110%" y="757" width="0.0154%" height="15" fill="rgb(246,228,12)" fg:x="2559" fg:w="17"/><text x="2.5610%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (77 samples, 0.07%)</title><rect x="2.2659%" y="901" width="0.0695%" height="15" fill="rgb(213,55,15)" fg:x="2509" fg:w="77"/><text x="2.5159%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (122 samples, 0.11%)</title><rect x="2.3354%" y="901" width="0.1102%" height="15" fill="rgb(209,9,3)" fg:x="2586" fg:w="122"/><text x="2.5854%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (27 samples, 0.02%)</title><rect x="2.4456%" y="901" width="0.0244%" height="15" fill="rgb(230,59,30)" fg:x="2708" fg:w="27"/><text x="2.6956%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (19 samples, 0.02%)</title><rect x="2.4700%" y="901" width="0.0172%" height="15" fill="rgb(209,121,21)" fg:x="2735" fg:w="19"/><text x="2.7200%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="2.4872%" y="901" width="0.0244%" height="15" fill="rgb(220,109,13)" fg:x="2754" fg:w="27"/><text x="2.7372%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (28 samples, 0.03%)</title><rect x="2.5115%" y="901" width="0.0253%" height="15" fill="rgb(232,18,1)" fg:x="2781" fg:w="28"/><text x="2.7615%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="2.5368%" y="901" width="0.0108%" height="15" fill="rgb(215,41,42)" fg:x="2809" fg:w="12"/><text x="2.7868%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (12 samples, 0.01%)</title><rect x="2.5368%" y="885" width="0.0108%" height="15" fill="rgb(224,123,36)" fg:x="2809" fg:w="12"/><text x="2.7868%" y="895.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (116 samples, 0.10%)</title><rect x="2.5603%" y="837" width="0.1048%" height="15" fill="rgb(240,125,3)" fg:x="2835" fg:w="116"/><text x="2.8103%" y="847.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (145 samples, 0.13%)</title><rect x="2.5477%" y="901" width="0.1310%" height="15" fill="rgb(205,98,50)" fg:x="2821" fg:w="145"/><text x="2.7977%" y="911.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (131 samples, 0.12%)</title><rect x="2.5603%" y="885" width="0.1183%" height="15" fill="rgb(205,185,37)" fg:x="2835" fg:w="131"/><text x="2.8103%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (131 samples, 0.12%)</title><rect x="2.5603%" y="869" width="0.1183%" height="15" fill="rgb(238,207,15)" fg:x="2835" fg:w="131"/><text x="2.8103%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (131 samples, 0.12%)</title><rect x="2.5603%" y="853" width="0.1183%" height="15" fill="rgb(213,199,42)" fg:x="2835" fg:w="131"/><text x="2.8103%" y="863.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (15 samples, 0.01%)</title><rect x="2.6651%" y="837" width="0.0135%" height="15" fill="rgb(235,201,11)" fg:x="2951" fg:w="15"/><text x="2.9151%" y="847.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (16 samples, 0.01%)</title><rect x="2.6786%" y="901" width="0.0144%" height="15" fill="rgb(207,46,11)" fg:x="2966" fg:w="16"/><text x="2.9286%" y="911.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (13 samples, 0.01%)</title><rect x="2.6931%" y="901" width="0.0117%" height="15" fill="rgb(241,35,35)" fg:x="2982" fg:w="13"/><text x="2.9431%" y="911.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (12 samples, 0.01%)</title><rect x="2.7418%" y="885" width="0.0108%" height="15" fill="rgb(243,32,47)" fg:x="3036" fg:w="12"/><text x="2.9918%" y="895.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (60 samples, 0.05%)</title><rect x="2.7048%" y="901" width="0.0542%" height="15" fill="rgb(247,202,23)" fg:x="2995" fg:w="60"/><text x="2.9548%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="2.7816%" y="837" width="0.0370%" height="15" fill="rgb(219,102,11)" fg:x="3080" fg:w="41"/><text x="3.0316%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (41 samples, 0.04%)</title><rect x="2.7816%" y="821" width="0.0370%" height="15" fill="rgb(243,110,44)" fg:x="3080" fg:w="41"/><text x="3.0316%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="2.7816%" y="805" width="0.0370%" height="15" fill="rgb(222,74,54)" fg:x="3080" fg:w="41"/><text x="3.0316%" y="815.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (41 samples, 0.04%)</title><rect x="2.7816%" y="789" width="0.0370%" height="15" fill="rgb(216,99,12)" fg:x="3080" fg:w="41"/><text x="3.0316%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="2.7816%" y="853" width="0.0406%" height="15" fill="rgb(226,22,26)" fg:x="3080" fg:w="45"/><text x="3.0316%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="2.8222%" y="837" width="0.0190%" height="15" fill="rgb(217,163,10)" fg:x="3125" fg:w="21"/><text x="3.0722%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (21 samples, 0.02%)</title><rect x="2.8222%" y="821" width="0.0190%" height="15" fill="rgb(213,25,53)" fg:x="3125" fg:w="21"/><text x="3.0722%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (21 samples, 0.02%)</title><rect x="2.8222%" y="805" width="0.0190%" height="15" fill="rgb(252,105,26)" fg:x="3125" fg:w="21"/><text x="3.0722%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (21 samples, 0.02%)</title><rect x="2.8222%" y="789" width="0.0190%" height="15" fill="rgb(220,39,43)" fg:x="3125" fg:w="21"/><text x="3.0722%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.02%)</title><rect x="2.8222%" y="773" width="0.0190%" height="15" fill="rgb(229,68,48)" fg:x="3125" fg:w="21"/><text x="3.0722%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (90 samples, 0.08%)</title><rect x="2.7635%" y="901" width="0.0813%" height="15" fill="rgb(252,8,32)" fg:x="3060" fg:w="90"/><text x="3.0135%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (70 samples, 0.06%)</title><rect x="2.7816%" y="885" width="0.0632%" height="15" fill="rgb(223,20,43)" fg:x="3080" fg:w="70"/><text x="3.0316%" y="895.50"></text></g><g><title>core::mem::drop (70 samples, 0.06%)</title><rect x="2.7816%" y="869" width="0.0632%" height="15" fill="rgb(229,81,49)" fg:x="3080" fg:w="70"/><text x="3.0316%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (25 samples, 0.02%)</title><rect x="2.8222%" y="853" width="0.0226%" height="15" fill="rgb(236,28,36)" fg:x="3125" fg:w="25"/><text x="3.0722%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 0.03%)</title><rect x="2.8457%" y="901" width="0.0298%" height="15" fill="rgb(249,185,26)" fg:x="3151" fg:w="33"/><text x="3.0957%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.02%)</title><rect x="2.8511%" y="885" width="0.0244%" height="15" fill="rgb(249,174,33)" fg:x="3157" fg:w="27"/><text x="3.1011%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (21 samples, 0.02%)</title><rect x="2.8565%" y="869" width="0.0190%" height="15" fill="rgb(233,201,37)" fg:x="3163" fg:w="21"/><text x="3.1065%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (21 samples, 0.02%)</title><rect x="2.8565%" y="853" width="0.0190%" height="15" fill="rgb(221,78,26)" fg:x="3163" fg:w="21"/><text x="3.1065%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.03%)</title><rect x="2.8755%" y="901" width="0.0325%" height="15" fill="rgb(250,127,30)" fg:x="3184" fg:w="36"/><text x="3.1255%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (20 samples, 0.02%)</title><rect x="2.8899%" y="885" width="0.0181%" height="15" fill="rgb(230,49,44)" fg:x="3200" fg:w="20"/><text x="3.1399%" y="895.50"></text></g><g><title>alloc::alloc::Global::grow_impl (20 samples, 0.02%)</title><rect x="2.8899%" y="869" width="0.0181%" height="15" fill="rgb(229,67,23)" fg:x="3200" fg:w="20"/><text x="3.1399%" y="879.50"></text></g><g><title>alloc::alloc::realloc (20 samples, 0.02%)</title><rect x="2.8899%" y="853" width="0.0181%" height="15" fill="rgb(249,83,47)" fg:x="3200" fg:w="20"/><text x="3.1399%" y="863.50"></text></g><g><title>__rg_realloc (20 samples, 0.02%)</title><rect x="2.8899%" y="837" width="0.0181%" height="15" fill="rgb(215,43,3)" fg:x="3200" fg:w="20"/><text x="3.1399%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (20 samples, 0.02%)</title><rect x="2.8899%" y="821" width="0.0181%" height="15" fill="rgb(238,154,13)" fg:x="3200" fg:w="20"/><text x="3.1399%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 0.02%)</title><rect x="2.9080%" y="901" width="0.0154%" height="15" fill="rgb(219,56,2)" fg:x="3220" fg:w="17"/><text x="3.1580%" y="911.50"></text></g><g><title>async_executor::Ticker::sleep (18 samples, 0.02%)</title><rect x="2.9342%" y="901" width="0.0163%" height="15" fill="rgb(233,0,4)" fg:x="3249" fg:w="18"/><text x="3.1842%" y="911.50"></text></g><g><title>async_executor::steal (208 samples, 0.19%)</title><rect x="2.9541%" y="901" width="0.1878%" height="15" fill="rgb(235,30,7)" fg:x="3271" fg:w="208"/><text x="3.2041%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (197 samples, 0.18%)</title><rect x="3.1735%" y="901" width="0.1779%" height="15" fill="rgb(250,79,13)" fg:x="3514" fg:w="197"/><text x="3.4235%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (20 samples, 0.02%)</title><rect x="3.3514%" y="901" width="0.0181%" height="15" fill="rgb(211,146,34)" fg:x="3711" fg:w="20"/><text x="3.6014%" y="911.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (36 samples, 0.03%)</title><rect x="3.3695%" y="901" width="0.0325%" height="15" fill="rgb(228,22,38)" fg:x="3731" fg:w="36"/><text x="3.6195%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.01%)</title><rect x="3.4146%" y="901" width="0.0144%" height="15" fill="rgb(235,168,5)" fg:x="3781" fg:w="16"/><text x="3.6646%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (110 samples, 0.10%)</title><rect x="3.4291%" y="901" width="0.0993%" height="15" fill="rgb(221,155,16)" fg:x="3797" fg:w="110"/><text x="3.6791%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (17 samples, 0.02%)</title><rect x="3.5429%" y="901" width="0.0154%" height="15" fill="rgb(215,215,53)" fg:x="3923" fg:w="17"/><text x="3.7929%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (12 samples, 0.01%)</title><rect x="3.5474%" y="885" width="0.0108%" height="15" fill="rgb(223,4,10)" fg:x="3928" fg:w="12"/><text x="3.7974%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (17 samples, 0.02%)</title><rect x="3.5709%" y="901" width="0.0154%" height="15" fill="rgb(234,103,6)" fg:x="3954" fg:w="17"/><text x="3.8209%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (15 samples, 0.01%)</title><rect x="3.6115%" y="885" width="0.0135%" height="15" fill="rgb(227,97,0)" fg:x="3999" fg:w="15"/><text x="3.8615%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (15 samples, 0.01%)</title><rect x="3.6115%" y="869" width="0.0135%" height="15" fill="rgb(234,150,53)" fg:x="3999" fg:w="15"/><text x="3.8615%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (38 samples, 0.03%)</title><rect x="3.6061%" y="901" width="0.0343%" height="15" fill="rgb(228,201,54)" fg:x="3993" fg:w="38"/><text x="3.8561%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (18 samples, 0.02%)</title><rect x="3.6404%" y="901" width="0.0163%" height="15" fill="rgb(222,22,37)" fg:x="4031" fg:w="18"/><text x="3.8904%" y="911.50"></text></g><g><title>event_listener::Event::listen (16 samples, 0.01%)</title><rect x="3.6576%" y="901" width="0.0144%" height="15" fill="rgb(237,53,32)" fg:x="4050" fg:w="16"/><text x="3.9076%" y="911.50"></text></g><g><title>event_listener::Event::inner (14 samples, 0.01%)</title><rect x="3.6594%" y="885" width="0.0126%" height="15" fill="rgb(233,25,53)" fg:x="4052" fg:w="14"/><text x="3.9094%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (14 samples, 0.01%)</title><rect x="3.6594%" y="869" width="0.0126%" height="15" fill="rgb(210,40,34)" fg:x="4052" fg:w="14"/><text x="3.9094%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="3.6594%" y="853" width="0.0126%" height="15" fill="rgb(241,220,44)" fg:x="4052" fg:w="14"/><text x="3.9094%" y="863.50"></text></g><g><title>event_listener::Event::notify (48 samples, 0.04%)</title><rect x="3.6720%" y="901" width="0.0433%" height="15" fill="rgb(235,28,35)" fg:x="4066" fg:w="48"/><text x="3.9220%" y="911.50"></text></g><g><title>event_listener::full_fence (24 samples, 0.02%)</title><rect x="3.6937%" y="885" width="0.0217%" height="15" fill="rgb(210,56,17)" fg:x="4090" fg:w="24"/><text x="3.9437%" y="895.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (21 samples, 0.02%)</title><rect x="3.7325%" y="901" width="0.0190%" height="15" fill="rgb(224,130,29)" fg:x="4133" fg:w="21"/><text x="3.9825%" y="911.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (35 samples, 0.03%)</title><rect x="3.7515%" y="901" width="0.0316%" height="15" fill="rgb(235,212,8)" fg:x="4154" fg:w="35"/><text x="4.0015%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (52 samples, 0.05%)</title><rect x="3.7858%" y="901" width="0.0470%" height="15" fill="rgb(223,33,50)" fg:x="4192" fg:w="52"/><text x="4.0358%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (19 samples, 0.02%)</title><rect x="3.8156%" y="885" width="0.0172%" height="15" fill="rgb(219,149,13)" fg:x="4225" fg:w="19"/><text x="4.0656%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (19 samples, 0.02%)</title><rect x="3.8156%" y="869" width="0.0172%" height="15" fill="rgb(250,156,29)" fg:x="4225" fg:w="19"/><text x="4.0656%" y="879.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (19 samples, 0.02%)</title><rect x="3.8156%" y="853" width="0.0172%" height="15" fill="rgb(216,193,19)" fg:x="4225" fg:w="19"/><text x="4.0656%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (118 samples, 0.11%)</title><rect x="3.8328%" y="901" width="0.1066%" height="15" fill="rgb(216,135,14)" fg:x="4244" fg:w="118"/><text x="4.0828%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (79 samples, 0.07%)</title><rect x="3.8680%" y="885" width="0.0713%" height="15" fill="rgb(241,47,5)" fg:x="4283" fg:w="79"/><text x="4.1180%" y="895.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (79 samples, 0.07%)</title><rect x="3.8680%" y="869" width="0.0713%" height="15" fill="rgb(233,42,35)" fg:x="4283" fg:w="79"/><text x="4.1180%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (79 samples, 0.07%)</title><rect x="3.8680%" y="853" width="0.0713%" height="15" fill="rgb(231,13,6)" fg:x="4283" fg:w="79"/><text x="4.1180%" y="863.50"></text></g><g><title>alloc::alloc::alloc (79 samples, 0.07%)</title><rect x="3.8680%" y="837" width="0.0713%" height="15" fill="rgb(207,181,40)" fg:x="4283" fg:w="79"/><text x="4.1180%" y="847.50"></text></g><g><title>__rg_alloc (79 samples, 0.07%)</title><rect x="3.8680%" y="821" width="0.0713%" height="15" fill="rgb(254,173,49)" fg:x="4283" fg:w="79"/><text x="4.1180%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (79 samples, 0.07%)</title><rect x="3.8680%" y="805" width="0.0713%" height="15" fill="rgb(221,1,38)" fg:x="4283" fg:w="79"/><text x="4.1180%" y="815.50"></text></g><g><title>parking::Unparker::unpark (16 samples, 0.01%)</title><rect x="3.9393%" y="901" width="0.0144%" height="15" fill="rgb(206,124,46)" fg:x="4362" fg:w="16"/><text x="4.1893%" y="911.50"></text></g><g><title>rmp::encode::uint::write_uint (65 samples, 0.06%)</title><rect x="3.9574%" y="901" width="0.0587%" height="15" fill="rgb(249,21,11)" fg:x="4382" fg:w="65"/><text x="4.2074%" y="911.50"></text></g><g><title>rmp::encode::write_marker (189 samples, 0.17%)</title><rect x="4.0188%" y="901" width="0.1707%" height="15" fill="rgb(222,201,40)" fg:x="4450" fg:w="189"/><text x="4.2688%" y="911.50"></text></g><g><title>sn_rust_alloc (48 samples, 0.04%)</title><rect x="4.1895%" y="901" width="0.0433%" height="15" fill="rgb(235,61,29)" fg:x="4639" fg:w="48"/><text x="4.4395%" y="911.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.03%)</title><rect x="4.2329%" y="901" width="0.0253%" height="15" fill="rgb(219,207,3)" fg:x="4687" fg:w="28"/><text x="4.4829%" y="911.50"></text></g><g><title>sn_rust_realloc (21 samples, 0.02%)</title><rect x="4.2581%" y="901" width="0.0190%" height="15" fill="rgb(222,56,46)" fg:x="4715" fg:w="21"/><text x="4.5081%" y="911.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (44 samples, 0.04%)</title><rect x="4.2771%" y="901" width="0.0397%" height="15" fill="rgb(239,76,54)" fg:x="4736" fg:w="44"/><text x="4.5271%" y="911.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (23 samples, 0.02%)</title><rect x="4.3259%" y="901" width="0.0208%" height="15" fill="rgb(231,124,27)" fg:x="4790" fg:w="23"/><text x="4.5759%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35 samples, 0.03%)</title><rect x="4.3466%" y="901" width="0.0316%" height="15" fill="rgb(249,195,6)" fg:x="4813" fg:w="35"/><text x="4.5966%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.02%)</title><rect x="4.3584%" y="885" width="0.0199%" height="15" fill="rgb(237,174,47)" fg:x="4826" fg:w="22"/><text x="4.6084%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18 samples, 0.02%)</title><rect x="4.3620%" y="869" width="0.0163%" height="15" fill="rgb(206,201,31)" fg:x="4830" fg:w="18"/><text x="4.6120%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18 samples, 0.02%)</title><rect x="4.3620%" y="853" width="0.0163%" height="15" fill="rgb(231,57,52)" fg:x="4830" fg:w="18"/><text x="4.6120%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="4.3620%" y="837" width="0.0163%" height="15" fill="rgb(248,177,22)" fg:x="4830" fg:w="18"/><text x="4.6120%" y="847.50"></text></g><g><title>[tremor-pdk-hashbrown] (17 samples, 0.02%)</title><rect x="4.3629%" y="821" width="0.0154%" height="15" fill="rgb(215,211,37)" fg:x="4831" fg:w="17"/><text x="4.6129%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (17 samples, 0.02%)</title><rect x="4.3629%" y="805" width="0.0154%" height="15" fill="rgb(241,128,51)" fg:x="4831" fg:w="17"/><text x="4.6129%" y="815.50"></text></g><g><title>tremor_common::time::nanotime (17 samples, 0.02%)</title><rect x="4.3783%" y="901" width="0.0154%" height="15" fill="rgb(227,165,31)" fg:x="4848" fg:w="17"/><text x="4.6283%" y="911.50"></text></g><g><title>std::time::SystemTime::now (17 samples, 0.02%)</title><rect x="4.3783%" y="885" width="0.0154%" height="15" fill="rgb(228,167,24)" fg:x="4848" fg:w="17"/><text x="4.6283%" y="895.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (17 samples, 0.02%)</title><rect x="4.3783%" y="869" width="0.0154%" height="15" fill="rgb(228,143,12)" fg:x="4848" fg:w="17"/><text x="4.6283%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::now (17 samples, 0.02%)</title><rect x="4.3783%" y="853" width="0.0154%" height="15" fill="rgb(249,149,8)" fg:x="4848" fg:w="17"/><text x="4.6283%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (13 samples, 0.01%)</title><rect x="4.3936%" y="901" width="0.0117%" height="15" fill="rgb(243,35,44)" fg:x="4865" fg:w="13"/><text x="4.6436%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (20 samples, 0.02%)</title><rect x="4.4117%" y="901" width="0.0181%" height="15" fill="rgb(246,89,9)" fg:x="4885" fg:w="20"/><text x="4.6617%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (32 samples, 0.03%)</title><rect x="4.4442%" y="901" width="0.0289%" height="15" fill="rgb(233,213,13)" fg:x="4921" fg:w="32"/><text x="4.6942%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (20 samples, 0.02%)</title><rect x="4.5462%" y="885" width="0.0181%" height="15" fill="rgb(233,141,41)" fg:x="5034" fg:w="20"/><text x="4.7962%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="4.5462%" y="869" width="0.0181%" height="15" fill="rgb(239,167,4)" fg:x="5034" fg:w="20"/><text x="4.7962%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="4.5462%" y="853" width="0.0181%" height="15" fill="rgb(209,217,16)" fg:x="5034" fg:w="20"/><text x="4.7962%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="4.5462%" y="837" width="0.0181%" height="15" fill="rgb(219,88,35)" fg:x="5034" fg:w="20"/><text x="4.7962%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (76 samples, 0.07%)</title><rect x="4.5101%" y="901" width="0.0686%" height="15" fill="rgb(220,193,23)" fg:x="4994" fg:w="76"/><text x="4.7601%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (16 samples, 0.01%)</title><rect x="4.5643%" y="885" width="0.0144%" height="15" fill="rgb(230,90,52)" fg:x="5054" fg:w="16"/><text x="4.8143%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (16 samples, 0.01%)</title><rect x="4.5643%" y="869" width="0.0144%" height="15" fill="rgb(252,106,19)" fg:x="5054" fg:w="16"/><text x="4.8143%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (58 samples, 0.05%)</title><rect x="4.5787%" y="901" width="0.0524%" height="15" fill="rgb(206,74,20)" fg:x="5070" fg:w="58"/><text x="4.8287%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (18 samples, 0.02%)</title><rect x="4.6311%" y="901" width="0.0163%" height="15" fill="rgb(230,138,44)" fg:x="5128" fg:w="18"/><text x="4.8811%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (176 samples, 0.16%)</title><rect x="4.6474%" y="901" width="0.1589%" height="15" fill="rgb(235,182,43)" fg:x="5146" fg:w="176"/><text x="4.8974%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (94 samples, 0.08%)</title><rect x="4.8063%" y="901" width="0.0849%" height="15" fill="rgb(242,16,51)" fg:x="5322" fg:w="94"/><text x="5.0563%" y="911.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (149 samples, 0.13%)</title><rect x="4.8984%" y="901" width="0.1346%" height="15" fill="rgb(248,9,4)" fg:x="5424" fg:w="149"/><text x="5.1484%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve (42 samples, 0.04%)</title><rect x="5.0330%" y="901" width="0.0379%" height="15" fill="rgb(210,31,22)" fg:x="5573" fg:w="42"/><text x="5.2830%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve_value (28 samples, 0.03%)</title><rect x="5.0709%" y="901" width="0.0253%" height="15" fill="rgb(239,54,39)" fg:x="5615" fg:w="28"/><text x="5.3209%" y="911.50"></text></g><g><title>tremor_script::interpreter::test_guard (24 samples, 0.02%)</title><rect x="5.0962%" y="901" width="0.0217%" height="15" fill="rgb(230,99,41)" fg:x="5643" fg:w="24"/><text x="5.3462%" y="911.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (142 samples, 0.13%)</title><rect x="5.1179%" y="901" width="0.1282%" height="15" fill="rgb(253,106,12)" fg:x="5667" fg:w="142"/><text x="5.3679%" y="911.50"></text></g><g><title>tremor_script::interpreter::val_eq (32 samples, 0.03%)</title><rect x="5.2461%" y="901" width="0.0289%" height="15" fill="rgb(213,46,41)" fg:x="5809" fg:w="32"/><text x="5.4961%" y="911.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (24 samples, 0.02%)</title><rect x="5.2850%" y="901" width="0.0217%" height="15" fill="rgb(215,133,35)" fg:x="5852" fg:w="24"/><text x="5.5350%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (13 samples, 0.01%)</title><rect x="5.2949%" y="885" width="0.0117%" height="15" fill="rgb(213,28,5)" fg:x="5863" fg:w="13"/><text x="5.5449%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (51 samples, 0.05%)</title><rect x="5.4168%" y="869" width="0.0461%" height="15" fill="rgb(215,77,49)" fg:x="5998" fg:w="51"/><text x="5.6668%" y="879.50"></text></g><g><title>rmp::encode::write_marker (51 samples, 0.05%)</title><rect x="5.4168%" y="853" width="0.0461%" height="15" fill="rgb(248,100,22)" fg:x="5998" fg:w="51"/><text x="5.6668%" y="863.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (52 samples, 0.05%)</title><rect x="5.4168%" y="885" width="0.0470%" height="15" fill="rgb(208,67,9)" fg:x="5998" fg:w="52"/><text x="5.6668%" y="895.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (14 samples, 0.01%)</title><rect x="5.4728%" y="885" width="0.0126%" height="15" fill="rgb(219,133,21)" fg:x="6060" fg:w="14"/><text x="5.7228%" y="895.50"></text></g><g><title>rmp::encode::write_marker (31 samples, 0.03%)</title><rect x="5.4882%" y="885" width="0.0280%" height="15" fill="rgb(246,46,29)" fg:x="6077" fg:w="31"/><text x="5.7382%" y="895.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (255 samples, 0.23%)</title><rect x="5.3066%" y="901" width="0.2303%" height="15" fill="rgb(246,185,52)" fg:x="5876" fg:w="255"/><text x="5.5566%" y="911.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (23 samples, 0.02%)</title><rect x="5.5162%" y="885" width="0.0208%" height="15" fill="rgb(252,136,11)" fg:x="6108" fg:w="23"/><text x="5.7662%" y="895.50"></text></g><g><title>rmp::encode::write_marker (23 samples, 0.02%)</title><rect x="5.5162%" y="869" width="0.0208%" height="15" fill="rgb(219,138,53)" fg:x="6108" fg:w="23"/><text x="5.7662%" y="879.50"></text></g><g><title>[anon] (6,039 samples, 5.45%)</title><rect x="0.0975%" y="917" width="5.4539%" height="15" fill="rgb(211,51,23)" fg:x="108" fg:w="6039"/><text x="0.3475%" y="927.50">[anon]</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="5.5848%" y="901" width="0.0226%" height="15" fill="rgb(247,221,28)" fg:x="6184" fg:w="25"/><text x="5.8348%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (14 samples, 0.01%)</title><rect x="5.5947%" y="885" width="0.0126%" height="15" fill="rgb(251,222,45)" fg:x="6195" fg:w="14"/><text x="5.8447%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (31 samples, 0.03%)</title><rect x="5.6137%" y="901" width="0.0280%" height="15" fill="rgb(217,162,53)" fg:x="6216" fg:w="31"/><text x="5.8637%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (22 samples, 0.02%)</title><rect x="5.6218%" y="885" width="0.0199%" height="15" fill="rgb(229,93,14)" fg:x="6225" fg:w="22"/><text x="5.8718%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (19 samples, 0.02%)</title><rect x="5.6245%" y="869" width="0.0172%" height="15" fill="rgb(209,67,49)" fg:x="6228" fg:w="19"/><text x="5.8745%" y="879.50"></text></g><g><title>__clock_gettime (13 samples, 0.01%)</title><rect x="5.6435%" y="901" width="0.0117%" height="15" fill="rgb(213,87,29)" fg:x="6249" fg:w="13"/><text x="5.8935%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (18 samples, 0.02%)</title><rect x="5.6552%" y="901" width="0.0163%" height="15" fill="rgb(205,151,52)" fg:x="6262" fg:w="18"/><text x="5.9052%" y="911.50"></text></g><g><title>[libc-2.31.so] (170 samples, 0.15%)</title><rect x="5.5514%" y="917" width="0.1535%" height="15" fill="rgb(253,215,39)" fg:x="6147" fg:w="170"/><text x="5.8014%" y="927.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (19 samples, 0.02%)</title><rect x="5.6878%" y="901" width="0.0172%" height="15" fill="rgb(221,220,41)" fg:x="6298" fg:w="19"/><text x="5.9378%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (15 samples, 0.01%)</title><rect x="5.7094%" y="901" width="0.0135%" height="15" fill="rgb(218,133,21)" fg:x="6322" fg:w="15"/><text x="5.9594%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (31 samples, 0.03%)</title><rect x="5.7230%" y="901" width="0.0280%" height="15" fill="rgb(221,193,43)" fg:x="6337" fg:w="31"/><text x="5.9730%" y="911.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.02%)</title><rect x="5.7618%" y="901" width="0.0163%" height="15" fill="rgb(240,128,52)" fg:x="6380" fg:w="18"/><text x="6.0118%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (15 samples, 0.01%)</title><rect x="5.7781%" y="901" width="0.0135%" height="15" fill="rgb(253,114,12)" fg:x="6398" fg:w="15"/><text x="6.0281%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (14 samples, 0.01%)</title><rect x="5.7934%" y="901" width="0.0126%" height="15" fill="rgb(215,223,47)" fg:x="6415" fg:w="14"/><text x="6.0434%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (82 samples, 0.07%)</title><rect x="5.8196%" y="901" width="0.0741%" height="15" fill="rgb(248,225,23)" fg:x="6444" fg:w="82"/><text x="6.0696%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (18 samples, 0.02%)</title><rect x="5.8774%" y="885" width="0.0163%" height="15" fill="rgb(250,108,0)" fg:x="6508" fg:w="18"/><text x="6.1274%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (16 samples, 0.01%)</title><rect x="5.8937%" y="901" width="0.0144%" height="15" fill="rgb(228,208,7)" fg:x="6526" fg:w="16"/><text x="6.1437%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (23 samples, 0.02%)</title><rect x="5.9081%" y="901" width="0.0208%" height="15" fill="rgb(244,45,10)" fg:x="6542" fg:w="23"/><text x="6.1581%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.02%)</title><rect x="5.9289%" y="901" width="0.0226%" height="15" fill="rgb(207,125,25)" fg:x="6565" fg:w="25"/><text x="6.1789%" y="911.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (15 samples, 0.01%)</title><rect x="5.9515%" y="901" width="0.0135%" height="15" fill="rgb(210,195,18)" fg:x="6590" fg:w="15"/><text x="6.2015%" y="911.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="5.9822%" y="901" width="0.0144%" height="15" fill="rgb(249,80,12)" fg:x="6624" fg:w="16"/><text x="6.2322%" y="911.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="5.9966%" y="901" width="0.0117%" height="15" fill="rgb(221,65,9)" fg:x="6640" fg:w="13"/><text x="6.2466%" y="911.50"></text></g><g><title>tremor_script::ast::Script::run (26 samples, 0.02%)</title><rect x="6.0084%" y="901" width="0.0235%" height="15" fill="rgb(235,49,36)" fg:x="6653" fg:w="26"/><text x="6.2584%" y="911.50"></text></g><g><title>[tremor-pdk-hashbrown] (378 samples, 0.34%)</title><rect x="5.7049%" y="917" width="0.3414%" height="15" fill="rgb(225,32,20)" fg:x="6317" fg:w="378"/><text x="5.9549%" y="927.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (30 samples, 0.03%)</title><rect x="6.2576%" y="869" width="0.0271%" height="15" fill="rgb(215,141,46)" fg:x="6929" fg:w="30"/><text x="6.5076%" y="879.50"></text></g><g><title>serde::de::SeqAccess::next_element (30 samples, 0.03%)</title><rect x="6.2576%" y="853" width="0.0271%" height="15" fill="rgb(250,160,47)" fg:x="6929" fg:w="30"/><text x="6.5076%" y="863.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (30 samples, 0.03%)</title><rect x="6.2576%" y="837" width="0.0271%" height="15" fill="rgb(216,222,40)" fg:x="6929" fg:w="30"/><text x="6.5076%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (30 samples, 0.03%)</title><rect x="6.2576%" y="821" width="0.0271%" height="15" fill="rgb(234,217,39)" fg:x="6929" fg:w="30"/><text x="6.5076%" y="831.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (30 samples, 0.03%)</title><rect x="6.2576%" y="805" width="0.0271%" height="15" fill="rgb(207,178,40)" fg:x="6929" fg:w="30"/><text x="6.5076%" y="815.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (36 samples, 0.03%)</title><rect x="6.2576%" y="885" width="0.0325%" height="15" fill="rgb(221,136,13)" fg:x="6929" fg:w="36"/><text x="6.5076%" y="895.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (306 samples, 0.28%)</title><rect x="6.0463%" y="901" width="0.2764%" height="15" fill="rgb(249,199,10)" fg:x="6695" fg:w="306"/><text x="6.2963%" y="911.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (36 samples, 0.03%)</title><rect x="6.2901%" y="885" width="0.0325%" height="15" fill="rgb(249,222,13)" fg:x="6965" fg:w="36"/><text x="6.5401%" y="895.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (189 samples, 0.17%)</title><rect x="6.3226%" y="901" width="0.1707%" height="15" fill="rgb(244,185,38)" fg:x="7001" fg:w="189"/><text x="6.5726%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (24 samples, 0.02%)</title><rect x="6.5033%" y="901" width="0.0217%" height="15" fill="rgb(236,202,9)" fg:x="7201" fg:w="24"/><text x="6.7533%" y="911.50"></text></g><g><title>[libc-2.31.so] (277 samples, 0.25%)</title><rect x="6.6252%" y="677" width="0.2502%" height="15" fill="rgb(250,229,37)" fg:x="7336" fg:w="277"/><text x="6.8752%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (309 samples, 0.28%)</title><rect x="6.6044%" y="693" width="0.2791%" height="15" fill="rgb(206,174,23)" fg:x="7313" fg:w="309"/><text x="6.8544%" y="703.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (501 samples, 0.45%)</title><rect x="6.5773%" y="709" width="0.4525%" height="15" fill="rgb(211,33,43)" fg:x="7283" fg:w="501"/><text x="6.8273%" y="719.50"></text></g><g><title>[libc-2.31.so] (162 samples, 0.15%)</title><rect x="6.8835%" y="693" width="0.1463%" height="15" fill="rgb(245,58,50)" fg:x="7622" fg:w="162"/><text x="7.1335%" y="703.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (518 samples, 0.47%)</title><rect x="6.5629%" y="757" width="0.4678%" height="15" fill="rgb(244,68,36)" fg:x="7267" fg:w="518"/><text x="6.8129%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.47%)</title><rect x="6.5629%" y="741" width="0.4678%" height="15" fill="rgb(232,229,15)" fg:x="7267" fg:w="518"/><text x="6.8129%" y="751.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (518 samples, 0.47%)</title><rect x="6.5629%" y="725" width="0.4678%" height="15" fill="rgb(254,30,23)" fg:x="7267" fg:w="518"/><text x="6.8129%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="7.0325%" y="549" width="0.0199%" height="15" fill="rgb(235,160,14)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (22 samples, 0.02%)</title><rect x="7.0325%" y="533" width="0.0199%" height="15" fill="rgb(212,155,44)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.0325%" y="517" width="0.0199%" height="15" fill="rgb(226,2,50)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.0325%" y="501" width="0.0199%" height="15" fill="rgb(234,177,6)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.02%)</title><rect x="7.0325%" y="485" width="0.0199%" height="15" fill="rgb(217,24,9)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.02%)</title><rect x="7.0325%" y="469" width="0.0199%" height="15" fill="rgb(220,13,46)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.0325%" y="453" width="0.0199%" height="15" fill="rgb(239,221,27)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.02%)</title><rect x="7.0325%" y="437" width="0.0199%" height="15" fill="rgb(222,198,25)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.02%)</title><rect x="7.0325%" y="421" width="0.0199%" height="15" fill="rgb(211,99,13)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.02%)</title><rect x="7.0325%" y="405" width="0.0199%" height="15" fill="rgb(232,111,31)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="7.0325%" y="389" width="0.0199%" height="15" fill="rgb(245,82,37)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="7.0325%" y="373" width="0.0199%" height="15" fill="rgb(227,149,46)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="383.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="7.0325%" y="357" width="0.0199%" height="15" fill="rgb(218,36,50)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="367.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="7.0325%" y="341" width="0.0199%" height="15" fill="rgb(226,80,48)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="7.0325%" y="325" width="0.0199%" height="15" fill="rgb(238,224,15)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="335.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="7.0325%" y="309" width="0.0199%" height="15" fill="rgb(241,136,10)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="7.0325%" y="293" width="0.0199%" height="15" fill="rgb(208,32,45)" fg:x="7787" fg:w="22"/><text x="7.2825%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.03%)</title><rect x="7.0307%" y="741" width="0.0343%" height="15" fill="rgb(207,135,9)" fg:x="7785" fg:w="38"/><text x="7.2807%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (38 samples, 0.03%)</title><rect x="7.0307%" y="725" width="0.0343%" height="15" fill="rgb(206,86,44)" fg:x="7785" fg:w="38"/><text x="7.2807%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.03%)</title><rect x="7.0307%" y="709" width="0.0343%" height="15" fill="rgb(245,177,15)" fg:x="7785" fg:w="38"/><text x="7.2807%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (38 samples, 0.03%)</title><rect x="7.0307%" y="693" width="0.0343%" height="15" fill="rgb(206,64,50)" fg:x="7785" fg:w="38"/><text x="7.2807%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (36 samples, 0.03%)</title><rect x="7.0325%" y="677" width="0.0325%" height="15" fill="rgb(234,36,40)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="687.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="7.0325%" y="661" width="0.0325%" height="15" fill="rgb(213,64,8)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (36 samples, 0.03%)</title><rect x="7.0325%" y="645" width="0.0325%" height="15" fill="rgb(210,75,36)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (36 samples, 0.03%)</title><rect x="7.0325%" y="629" width="0.0325%" height="15" fill="rgb(229,88,21)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36 samples, 0.03%)</title><rect x="7.0325%" y="613" width="0.0325%" height="15" fill="rgb(252,204,47)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36 samples, 0.03%)</title><rect x="7.0325%" y="597" width="0.0325%" height="15" fill="rgb(208,77,27)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (36 samples, 0.03%)</title><rect x="7.0325%" y="581" width="0.0325%" height="15" fill="rgb(221,76,26)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36 samples, 0.03%)</title><rect x="7.0325%" y="565" width="0.0325%" height="15" fill="rgb(225,139,18)" fg:x="7787" fg:w="36"/><text x="7.2825%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="7.0524%" y="549" width="0.0126%" height="15" fill="rgb(230,137,11)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="7.0524%" y="533" width="0.0126%" height="15" fill="rgb(212,28,1)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="7.0524%" y="517" width="0.0126%" height="15" fill="rgb(248,164,17)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="7.0524%" y="501" width="0.0126%" height="15" fill="rgb(222,171,42)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="7.0524%" y="485" width="0.0126%" height="15" fill="rgb(243,84,45)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="495.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="7.0524%" y="469" width="0.0126%" height="15" fill="rgb(252,49,23)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="479.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="7.0524%" y="453" width="0.0126%" height="15" fill="rgb(215,19,7)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="7.0524%" y="437" width="0.0126%" height="15" fill="rgb(238,81,41)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="447.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="7.0524%" y="421" width="0.0126%" height="15" fill="rgb(210,199,37)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="7.0524%" y="405" width="0.0126%" height="15" fill="rgb(244,192,49)" fg:x="7809" fg:w="14"/><text x="7.3024%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (65 samples, 0.06%)</title><rect x="7.0794%" y="661" width="0.0587%" height="15" fill="rgb(226,211,11)" fg:x="7839" fg:w="65"/><text x="7.3294%" y="671.50"></text></g><g><title>[libc-2.31.so] (106 samples, 0.10%)</title><rect x="7.1381%" y="645" width="0.0957%" height="15" fill="rgb(236,162,54)" fg:x="7904" fg:w="106"/><text x="7.3881%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (192 samples, 0.17%)</title><rect x="7.1381%" y="661" width="0.1734%" height="15" fill="rgb(220,229,9)" fg:x="7904" fg:w="192"/><text x="7.3881%" y="671.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (86 samples, 0.08%)</title><rect x="7.2339%" y="645" width="0.0777%" height="15" fill="rgb(250,87,22)" fg:x="8010" fg:w="86"/><text x="7.4839%" y="655.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.08%)</title><rect x="7.2357%" y="629" width="0.0759%" height="15" fill="rgb(239,43,17)" fg:x="8012" fg:w="84"/><text x="7.4857%" y="639.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (81 samples, 0.07%)</title><rect x="7.3134%" y="629" width="0.0732%" height="15" fill="rgb(231,177,25)" fg:x="8098" fg:w="81"/><text x="7.5634%" y="639.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (81 samples, 0.07%)</title><rect x="7.3134%" y="613" width="0.0732%" height="15" fill="rgb(219,179,1)" fg:x="8098" fg:w="81"/><text x="7.5634%" y="623.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (81 samples, 0.07%)</title><rect x="7.3134%" y="597" width="0.0732%" height="15" fill="rgb(238,219,53)" fg:x="8098" fg:w="81"/><text x="7.5634%" y="607.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.07%)</title><rect x="7.3188%" y="581" width="0.0677%" height="15" fill="rgb(232,167,36)" fg:x="8104" fg:w="75"/><text x="7.5688%" y="591.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (152 samples, 0.14%)</title><rect x="7.3115%" y="661" width="0.1373%" height="15" fill="rgb(244,19,51)" fg:x="8096" fg:w="152"/><text x="7.5615%" y="671.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (152 samples, 0.14%)</title><rect x="7.3115%" y="645" width="0.1373%" height="15" fill="rgb(224,6,22)" fg:x="8096" fg:w="152"/><text x="7.5615%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (66 samples, 0.06%)</title><rect x="7.3892%" y="629" width="0.0596%" height="15" fill="rgb(224,145,5)" fg:x="8182" fg:w="66"/><text x="7.6392%" y="639.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="7.3892%" y="613" width="0.0596%" height="15" fill="rgb(234,130,49)" fg:x="8182" fg:w="66"/><text x="7.6392%" y="623.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.12%)</title><rect x="7.4488%" y="661" width="0.1219%" height="15" fill="rgb(254,6,2)" fg:x="8248" fg:w="135"/><text x="7.6988%" y="671.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (38 samples, 0.03%)</title><rect x="7.5707%" y="661" width="0.0343%" height="15" fill="rgb(208,96,46)" fg:x="8383" fg:w="38"/><text x="7.8207%" y="671.50"></text></g><g><title>[libc-2.31.so] (36 samples, 0.03%)</title><rect x="7.5725%" y="645" width="0.0325%" height="15" fill="rgb(239,3,39)" fg:x="8385" fg:w="36"/><text x="7.8225%" y="655.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.08%)</title><rect x="7.6141%" y="613" width="0.0804%" height="15" fill="rgb(233,210,1)" fg:x="8431" fg:w="89"/><text x="7.8641%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (100 samples, 0.09%)</title><rect x="7.6051%" y="661" width="0.0903%" height="15" fill="rgb(244,137,37)" fg:x="8421" fg:w="100"/><text x="7.8551%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (100 samples, 0.09%)</title><rect x="7.6051%" y="645" width="0.0903%" height="15" fill="rgb(240,136,2)" fg:x="8421" fg:w="100"/><text x="7.8551%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.09%)</title><rect x="7.6051%" y="629" width="0.0903%" height="15" fill="rgb(239,18,37)" fg:x="8421" fg:w="100"/><text x="7.8551%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (65 samples, 0.06%)</title><rect x="7.7279%" y="437" width="0.0587%" height="15" fill="rgb(218,185,22)" fg:x="8557" fg:w="65"/><text x="7.9779%" y="447.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (100 samples, 0.09%)</title><rect x="7.6972%" y="645" width="0.0903%" height="15" fill="rgb(225,218,4)" fg:x="8523" fg:w="100"/><text x="7.9472%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (93 samples, 0.08%)</title><rect x="7.7035%" y="629" width="0.0840%" height="15" fill="rgb(230,182,32)" fg:x="8530" fg:w="93"/><text x="7.9535%" y="639.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (93 samples, 0.08%)</title><rect x="7.7035%" y="613" width="0.0840%" height="15" fill="rgb(242,56,43)" fg:x="8530" fg:w="93"/><text x="7.9535%" y="623.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (93 samples, 0.08%)</title><rect x="7.7035%" y="597" width="0.0840%" height="15" fill="rgb(233,99,24)" fg:x="8530" fg:w="93"/><text x="7.9535%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (93 samples, 0.08%)</title><rect x="7.7035%" y="581" width="0.0840%" height="15" fill="rgb(234,209,42)" fg:x="8530" fg:w="93"/><text x="7.9535%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (91 samples, 0.08%)</title><rect x="7.7053%" y="565" width="0.0822%" height="15" fill="rgb(227,7,12)" fg:x="8532" fg:w="91"/><text x="7.9553%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (91 samples, 0.08%)</title><rect x="7.7053%" y="549" width="0.0822%" height="15" fill="rgb(245,203,43)" fg:x="8532" fg:w="91"/><text x="7.9553%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (91 samples, 0.08%)</title><rect x="7.7053%" y="533" width="0.0822%" height="15" fill="rgb(238,205,33)" fg:x="8532" fg:w="91"/><text x="7.9553%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (91 samples, 0.08%)</title><rect x="7.7053%" y="517" width="0.0822%" height="15" fill="rgb(231,56,7)" fg:x="8532" fg:w="91"/><text x="7.9553%" y="527.50"></text></g><g><title>alloc::alloc::alloc (91 samples, 0.08%)</title><rect x="7.7053%" y="501" width="0.0822%" height="15" fill="rgb(244,186,29)" fg:x="8532" fg:w="91"/><text x="7.9553%" y="511.50"></text></g><g><title>__rg_alloc (91 samples, 0.08%)</title><rect x="7.7053%" y="485" width="0.0822%" height="15" fill="rgb(234,111,31)" fg:x="8532" fg:w="91"/><text x="7.9553%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (91 samples, 0.08%)</title><rect x="7.7053%" y="469" width="0.0822%" height="15" fill="rgb(241,149,10)" fg:x="8532" fg:w="91"/><text x="7.9553%" y="479.50"></text></g><g><title>sn_rust_alloc (90 samples, 0.08%)</title><rect x="7.7062%" y="453" width="0.0813%" height="15" fill="rgb(249,206,44)" fg:x="8533" fg:w="90"/><text x="7.9562%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (845 samples, 0.76%)</title><rect x="7.0307%" y="757" width="0.7631%" height="15" fill="rgb(251,153,30)" fg:x="7785" fg:w="845"/><text x="7.2807%" y="767.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (807 samples, 0.73%)</title><rect x="7.0650%" y="741" width="0.7288%" height="15" fill="rgb(239,152,38)" fg:x="7823" fg:w="807"/><text x="7.3150%" y="751.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (807 samples, 0.73%)</title><rect x="7.0650%" y="725" width="0.7288%" height="15" fill="rgb(249,139,47)" fg:x="7823" fg:w="807"/><text x="7.3150%" y="735.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (807 samples, 0.73%)</title><rect x="7.0650%" y="709" width="0.7288%" height="15" fill="rgb(244,64,35)" fg:x="7823" fg:w="807"/><text x="7.3150%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (807 samples, 0.73%)</title><rect x="7.0650%" y="693" width="0.7288%" height="15" fill="rgb(216,46,15)" fg:x="7823" fg:w="807"/><text x="7.3150%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (806 samples, 0.73%)</title><rect x="7.0659%" y="677" width="0.7279%" height="15" fill="rgb(250,74,19)" fg:x="7824" fg:w="806"/><text x="7.3159%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (109 samples, 0.10%)</title><rect x="7.6954%" y="661" width="0.0984%" height="15" fill="rgb(249,42,33)" fg:x="8521" fg:w="109"/><text x="7.9454%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (32 samples, 0.03%)</title><rect x="7.8335%" y="693" width="0.0289%" height="15" fill="rgb(242,149,17)" fg:x="8674" fg:w="32"/><text x="8.0835%" y="703.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (25 samples, 0.02%)</title><rect x="7.8399%" y="677" width="0.0226%" height="15" fill="rgb(244,29,21)" fg:x="8681" fg:w="25"/><text x="8.0899%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (309 samples, 0.28%)</title><rect x="7.8001%" y="709" width="0.2791%" height="15" fill="rgb(220,130,37)" fg:x="8637" fg:w="309"/><text x="8.0501%" y="719.50"></text></g><g><title>[libc-2.31.so] (240 samples, 0.22%)</title><rect x="7.8624%" y="693" width="0.2167%" height="15" fill="rgb(211,67,2)" fg:x="8706" fg:w="240"/><text x="8.1124%" y="703.50"></text></g><g><title>[libc-2.31.so] (144 samples, 0.13%)</title><rect x="8.0792%" y="709" width="0.1300%" height="15" fill="rgb(235,68,52)" fg:x="8946" fg:w="144"/><text x="8.3292%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (461 samples, 0.42%)</title><rect x="7.7938%" y="741" width="0.4163%" height="15" fill="rgb(246,142,3)" fg:x="8630" fg:w="461"/><text x="8.0438%" y="751.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (461 samples, 0.42%)</title><rect x="7.7938%" y="725" width="0.4163%" height="15" fill="rgb(241,25,7)" fg:x="8630" fg:w="461"/><text x="8.0438%" y="735.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.07%)</title><rect x="8.2192%" y="725" width="0.0650%" height="15" fill="rgb(242,119,39)" fg:x="9101" fg:w="72"/><text x="8.4692%" y="735.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (440 samples, 0.40%)</title><rect x="8.2842%" y="613" width="0.3974%" height="15" fill="rgb(241,98,45)" fg:x="9173" fg:w="440"/><text x="8.5342%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (440 samples, 0.40%)</title><rect x="8.2842%" y="597" width="0.3974%" height="15" fill="rgb(254,28,30)" fg:x="9173" fg:w="440"/><text x="8.5342%" y="607.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (459 samples, 0.41%)</title><rect x="8.2842%" y="725" width="0.4145%" height="15" fill="rgb(241,142,54)" fg:x="9173" fg:w="459"/><text x="8.5342%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (459 samples, 0.41%)</title><rect x="8.2842%" y="709" width="0.4145%" height="15" fill="rgb(222,85,15)" fg:x="9173" fg:w="459"/><text x="8.5342%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (459 samples, 0.41%)</title><rect x="8.2842%" y="693" width="0.4145%" height="15" fill="rgb(210,85,47)" fg:x="9173" fg:w="459"/><text x="8.5342%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (459 samples, 0.41%)</title><rect x="8.2842%" y="677" width="0.4145%" height="15" fill="rgb(224,206,25)" fg:x="9173" fg:w="459"/><text x="8.5342%" y="687.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (459 samples, 0.41%)</title><rect x="8.2842%" y="661" width="0.4145%" height="15" fill="rgb(243,201,19)" fg:x="9173" fg:w="459"/><text x="8.5342%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (459 samples, 0.41%)</title><rect x="8.2842%" y="645" width="0.4145%" height="15" fill="rgb(236,59,4)" fg:x="9173" fg:w="459"/><text x="8.5342%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (459 samples, 0.41%)</title><rect x="8.2842%" y="629" width="0.4145%" height="15" fill="rgb(254,179,45)" fg:x="9173" fg:w="459"/><text x="8.5342%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.02%)</title><rect x="8.6816%" y="613" width="0.0172%" height="15" fill="rgb(226,14,10)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="8.6816%" y="597" width="0.0172%" height="15" fill="rgb(244,27,41)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="8.6816%" y="581" width="0.0172%" height="15" fill="rgb(235,35,32)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="591.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="8.6816%" y="565" width="0.0172%" height="15" fill="rgb(218,68,31)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="575.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="8.6816%" y="549" width="0.0172%" height="15" fill="rgb(207,120,37)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="8.6816%" y="533" width="0.0172%" height="15" fill="rgb(227,98,0)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="543.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="8.6816%" y="517" width="0.0172%" height="15" fill="rgb(207,7,3)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="8.6816%" y="501" width="0.0172%" height="15" fill="rgb(206,98,19)" fg:x="9613" fg:w="19"/><text x="8.9316%" y="511.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (138 samples, 0.12%)</title><rect x="8.8324%" y="709" width="0.1246%" height="15" fill="rgb(217,5,26)" fg:x="9780" fg:w="138"/><text x="9.0824%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (129 samples, 0.12%)</title><rect x="8.8405%" y="693" width="0.1165%" height="15" fill="rgb(235,190,38)" fg:x="9789" fg:w="129"/><text x="9.0905%" y="703.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (128 samples, 0.12%)</title><rect x="8.8414%" y="677" width="0.1156%" height="15" fill="rgb(247,86,24)" fg:x="9790" fg:w="128"/><text x="9.0914%" y="687.50"></text></g><g><title>core::ptr::read (128 samples, 0.12%)</title><rect x="8.8414%" y="661" width="0.1156%" height="15" fill="rgb(205,101,16)" fg:x="9790" fg:w="128"/><text x="9.0914%" y="671.50"></text></g><g><title>[libc-2.31.so] (128 samples, 0.12%)</title><rect x="8.8414%" y="645" width="0.1156%" height="15" fill="rgb(246,168,33)" fg:x="9790" fg:w="128"/><text x="9.0914%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (148 samples, 0.13%)</title><rect x="8.9597%" y="581" width="0.1337%" height="15" fill="rgb(231,114,1)" fg:x="9921" fg:w="148"/><text x="9.2097%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (148 samples, 0.13%)</title><rect x="8.9597%" y="565" width="0.1337%" height="15" fill="rgb(207,184,53)" fg:x="9921" fg:w="148"/><text x="9.2097%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (148 samples, 0.13%)</title><rect x="8.9597%" y="549" width="0.1337%" height="15" fill="rgb(224,95,51)" fg:x="9921" fg:w="148"/><text x="9.2097%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (145 samples, 0.13%)</title><rect x="8.9624%" y="533" width="0.1310%" height="15" fill="rgb(212,188,45)" fg:x="9924" fg:w="145"/><text x="9.2124%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145 samples, 0.13%)</title><rect x="8.9624%" y="517" width="0.1310%" height="15" fill="rgb(223,154,38)" fg:x="9924" fg:w="145"/><text x="9.2124%" y="527.50"></text></g><g><title>alloc::alloc::alloc (145 samples, 0.13%)</title><rect x="8.9624%" y="501" width="0.1310%" height="15" fill="rgb(251,22,52)" fg:x="9924" fg:w="145"/><text x="9.2124%" y="511.50"></text></g><g><title>__rg_alloc (145 samples, 0.13%)</title><rect x="8.9624%" y="485" width="0.1310%" height="15" fill="rgb(229,209,22)" fg:x="9924" fg:w="145"/><text x="9.2124%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (145 samples, 0.13%)</title><rect x="8.9624%" y="469" width="0.1310%" height="15" fill="rgb(234,138,34)" fg:x="9924" fg:w="145"/><text x="9.2124%" y="479.50"></text></g><g><title>sn_rust_alloc (145 samples, 0.13%)</title><rect x="8.9624%" y="453" width="0.1310%" height="15" fill="rgb(212,95,11)" fg:x="9924" fg:w="145"/><text x="9.2124%" y="463.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (155 samples, 0.14%)</title><rect x="8.9597%" y="709" width="0.1400%" height="15" fill="rgb(240,179,47)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (155 samples, 0.14%)</title><rect x="8.9597%" y="693" width="0.1400%" height="15" fill="rgb(240,163,11)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (155 samples, 0.14%)</title><rect x="8.9597%" y="677" width="0.1400%" height="15" fill="rgb(236,37,12)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (155 samples, 0.14%)</title><rect x="8.9597%" y="661" width="0.1400%" height="15" fill="rgb(232,164,16)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (155 samples, 0.14%)</title><rect x="8.9597%" y="645" width="0.1400%" height="15" fill="rgb(244,205,15)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (155 samples, 0.14%)</title><rect x="8.9597%" y="629" width="0.1400%" height="15" fill="rgb(223,117,47)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (155 samples, 0.14%)</title><rect x="8.9597%" y="613" width="0.1400%" height="15" fill="rgb(244,107,35)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (155 samples, 0.14%)</title><rect x="8.9597%" y="597" width="0.1400%" height="15" fill="rgb(205,140,8)" fg:x="9921" fg:w="155"/><text x="9.2097%" y="607.50"></text></g><g><title>[libc-2.31.so] (520 samples, 0.47%)</title><rect x="9.0997%" y="709" width="0.4696%" height="15" fill="rgb(228,84,46)" fg:x="10076" fg:w="520"/><text x="9.3497%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (15 samples, 0.01%)</title><rect x="9.5711%" y="709" width="0.0135%" height="15" fill="rgb(254,188,9)" fg:x="10598" fg:w="15"/><text x="9.8211%" y="719.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="9.5711%" y="693" width="0.0135%" height="15" fill="rgb(206,112,54)" fg:x="10598" fg:w="15"/><text x="9.8211%" y="703.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (71 samples, 0.06%)</title><rect x="9.6000%" y="677" width="0.0641%" height="15" fill="rgb(216,84,49)" fg:x="10630" fg:w="71"/><text x="9.8500%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (67 samples, 0.06%)</title><rect x="9.6036%" y="661" width="0.0605%" height="15" fill="rgb(214,194,35)" fg:x="10634" fg:w="67"/><text x="9.8536%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (67 samples, 0.06%)</title><rect x="9.6036%" y="645" width="0.0605%" height="15" fill="rgb(249,28,3)" fg:x="10634" fg:w="67"/><text x="9.8536%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (67 samples, 0.06%)</title><rect x="9.6036%" y="629" width="0.0605%" height="15" fill="rgb(222,56,52)" fg:x="10634" fg:w="67"/><text x="9.8536%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (67 samples, 0.06%)</title><rect x="9.6036%" y="613" width="0.0605%" height="15" fill="rgb(245,217,50)" fg:x="10634" fg:w="67"/><text x="9.8536%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (67 samples, 0.06%)</title><rect x="9.6036%" y="597" width="0.0605%" height="15" fill="rgb(213,201,24)" fg:x="10634" fg:w="67"/><text x="9.8536%" y="607.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="9.6145%" y="581" width="0.0497%" height="15" fill="rgb(248,116,28)" fg:x="10646" fg:w="55"/><text x="9.8645%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (87 samples, 0.08%)</title><rect x="9.5928%" y="709" width="0.0786%" height="15" fill="rgb(219,72,43)" fg:x="10622" fg:w="87"/><text x="9.8428%" y="719.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (80 samples, 0.07%)</title><rect x="9.5991%" y="693" width="0.0722%" height="15" fill="rgb(209,138,14)" fg:x="10629" fg:w="80"/><text x="9.8491%" y="703.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,475 samples, 3.14%)</title><rect x="6.5629%" y="885" width="3.1383%" height="15" fill="rgb(222,18,33)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="895.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,475 samples, 3.14%)</title><rect x="6.5629%" y="869" width="3.1383%" height="15" fill="rgb(213,199,7)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="879.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,475 samples, 3.14%)</title><rect x="6.5629%" y="853" width="3.1383%" height="15" fill="rgb(250,110,10)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="863.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,475 samples, 3.14%)</title><rect x="6.5629%" y="837" width="3.1383%" height="15" fill="rgb(248,123,6)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="847.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,475 samples, 3.14%)</title><rect x="6.5629%" y="821" width="3.1383%" height="15" fill="rgb(206,91,31)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="831.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,475 samples, 3.14%)</title><rect x="6.5629%" y="805" width="3.1383%" height="15" fill="rgb(211,154,13)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="815.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,475 samples, 3.14%)</title><rect x="6.5629%" y="789" width="3.1383%" height="15" fill="rgb(225,148,7)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="799.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,475 samples, 3.14%)</title><rect x="6.5629%" y="773" width="3.1383%" height="15" fill="rgb(220,160,43)" fg:x="7267" fg:w="3475"/><text x="6.8129%" y="783.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,112 samples, 1.91%)</title><rect x="7.7938%" y="757" width="1.9074%" height="15" fill="rgb(213,52,39)" fg:x="8630" fg:w="2112"/><text x="8.0438%" y="767.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,651 samples, 1.49%)</title><rect x="8.2101%" y="741" width="1.4910%" height="15" fill="rgb(243,137,7)" fg:x="9091" fg:w="1651"/><text x="8.4601%" y="751.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,110 samples, 1.00%)</title><rect x="8.6987%" y="725" width="1.0024%" height="15" fill="rgb(230,79,13)" fg:x="9632" fg:w="1110"/><text x="8.9487%" y="735.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (33 samples, 0.03%)</title><rect x="9.6714%" y="709" width="0.0298%" height="15" fill="rgb(247,105,23)" fg:x="10709" fg:w="33"/><text x="9.9214%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (33 samples, 0.03%)</title><rect x="9.6714%" y="693" width="0.0298%" height="15" fill="rgb(223,179,41)" fg:x="10709" fg:w="33"/><text x="9.9214%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.03%)</title><rect x="9.6714%" y="677" width="0.0298%" height="15" fill="rgb(218,9,34)" fg:x="10709" fg:w="33"/><text x="9.9214%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (21 samples, 0.02%)</title><rect x="9.6822%" y="661" width="0.0190%" height="15" fill="rgb(222,106,8)" fg:x="10721" fg:w="21"/><text x="9.9322%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (84 samples, 0.08%)</title><rect x="9.7120%" y="741" width="0.0759%" height="15" fill="rgb(211,220,0)" fg:x="10754" fg:w="84"/><text x="9.9620%" y="751.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (42 samples, 0.04%)</title><rect x="9.7879%" y="741" width="0.0379%" height="15" fill="rgb(229,52,16)" fg:x="10838" fg:w="42"/><text x="10.0379%" y="751.50"></text></g><g><title>core::str::converts::from_utf8 (735 samples, 0.66%)</title><rect x="11.5841%" y="533" width="0.6638%" height="15" fill="rgb(212,155,18)" fg:x="12827" fg:w="735"/><text x="11.8341%" y="543.50"></text></g><g><title>core::str::validations::run_utf8_validation (676 samples, 0.61%)</title><rect x="11.6374%" y="517" width="0.6105%" height="15" fill="rgb(242,21,14)" fg:x="12886" fg:w="676"/><text x="11.8874%" y="527.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (2,446 samples, 2.21%)</title><rect x="10.1220%" y="549" width="2.2090%" height="15" fill="rgb(222,19,48)" fg:x="11208" fg:w="2446"/><text x="10.3720%" y="559.50">r..</text></g><g><title>rmp_serde::decode::read_bin_data (92 samples, 0.08%)</title><rect x="12.2479%" y="533" width="0.0831%" height="15" fill="rgb(232,45,27)" fg:x="13562" fg:w="92"/><text x="12.4979%" y="543.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (92 samples, 0.08%)</title><rect x="12.2479%" y="517" width="0.0831%" height="15" fill="rgb(249,103,42)" fg:x="13562" fg:w="92"/><text x="12.4979%" y="527.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (67 samples, 0.06%)</title><rect x="12.3328%" y="485" width="0.0605%" height="15" fill="rgb(246,81,33)" fg:x="13656" fg:w="67"/><text x="12.5828%" y="495.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (67 samples, 0.06%)</title><rect x="12.3328%" y="469" width="0.0605%" height="15" fill="rgb(252,33,42)" fg:x="13656" fg:w="67"/><text x="12.5828%" y="479.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (67 samples, 0.06%)</title><rect x="12.3328%" y="453" width="0.0605%" height="15" fill="rgb(209,212,41)" fg:x="13656" fg:w="67"/><text x="12.5828%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (67 samples, 0.06%)</title><rect x="12.3328%" y="437" width="0.0605%" height="15" fill="rgb(207,154,6)" fg:x="13656" fg:w="67"/><text x="12.5828%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (191 samples, 0.17%)</title><rect x="12.3310%" y="533" width="0.1725%" height="15" fill="rgb(223,64,47)" fg:x="13654" fg:w="191"/><text x="12.5810%" y="543.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (189 samples, 0.17%)</title><rect x="12.3328%" y="517" width="0.1707%" height="15" fill="rgb(211,161,38)" fg:x="13656" fg:w="189"/><text x="12.5828%" y="527.50"></text></g><g><title>rmp::decode::read_marker (189 samples, 0.17%)</title><rect x="12.3328%" y="501" width="0.1707%" height="15" fill="rgb(219,138,40)" fg:x="13656" fg:w="189"/><text x="12.5828%" y="511.50"></text></g><g><title>rmp::marker::Marker::from_u8 (122 samples, 0.11%)</title><rect x="12.3933%" y="485" width="0.1102%" height="15" fill="rgb(241,228,46)" fg:x="13723" fg:w="122"/><text x="12.6433%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,787 samples, 2.52%)</title><rect x="9.9902%" y="613" width="2.5170%" height="15" fill="rgb(223,209,38)" fg:x="11062" fg:w="2787"/><text x="10.2402%" y="623.50">&lt;c..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (2,787 samples, 2.52%)</title><rect x="9.9902%" y="597" width="2.5170%" height="15" fill="rgb(236,164,45)" fg:x="11062" fg:w="2787"/><text x="10.2402%" y="607.50">se..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (2,787 samples, 2.52%)</title><rect x="9.9902%" y="581" width="2.5170%" height="15" fill="rgb(231,15,5)" fg:x="11062" fg:w="2787"/><text x="10.2402%" y="591.50">&lt;&amp;..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (2,787 samples, 2.52%)</title><rect x="9.9902%" y="565" width="2.5170%" height="15" fill="rgb(252,35,15)" fg:x="11062" fg:w="2787"/><text x="10.2402%" y="575.50">&lt;&amp;..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (195 samples, 0.18%)</title><rect x="12.3310%" y="549" width="0.1761%" height="15" fill="rgb(248,181,18)" fg:x="13654" fg:w="195"/><text x="12.5810%" y="559.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (2,850 samples, 2.57%)</title><rect x="9.9874%" y="661" width="2.5739%" height="15" fill="rgb(233,39,42)" fg:x="11059" fg:w="2850"/><text x="10.2374%" y="671.50">&lt;&amp;..</text></g><g><title>serde::de::MapAccess::next_key (2,850 samples, 2.57%)</title><rect x="9.9874%" y="645" width="2.5739%" height="15" fill="rgb(238,110,33)" fg:x="11059" fg:w="2850"/><text x="10.2374%" y="655.50">se..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (2,850 samples, 2.57%)</title><rect x="9.9874%" y="629" width="2.5739%" height="15" fill="rgb(233,195,10)" fg:x="11059" fg:w="2850"/><text x="10.2374%" y="639.50">&lt;r..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (60 samples, 0.05%)</title><rect x="12.5071%" y="613" width="0.0542%" height="15" fill="rgb(254,105,3)" fg:x="13849" fg:w="60"/><text x="12.7571%" y="623.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_u8 (26 samples, 0.02%)</title><rect x="14.7504%" y="453" width="0.0235%" height="15" fill="rgb(221,225,9)" fg:x="16333" fg:w="26"/><text x="15.0004%" y="463.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (26 samples, 0.02%)</title><rect x="14.7504%" y="437" width="0.0235%" height="15" fill="rgb(224,227,45)" fg:x="16333" fg:w="26"/><text x="15.0004%" y="447.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (13 samples, 0.01%)</title><rect x="14.8136%" y="437" width="0.0117%" height="15" fill="rgb(229,198,43)" fg:x="16403" fg:w="13"/><text x="15.0636%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (146 samples, 0.13%)</title><rect x="14.8254%" y="437" width="0.1319%" height="15" fill="rgb(206,209,35)" fg:x="16416" fg:w="146"/><text x="15.0754%" y="447.50"></text></g><g><title>core::str::validations::run_utf8_validation (133 samples, 0.12%)</title><rect x="14.8371%" y="421" width="0.1201%" height="15" fill="rgb(245,195,53)" fg:x="16429" fg:w="133"/><text x="15.0871%" y="431.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (249 samples, 0.22%)</title><rect x="14.7739%" y="453" width="0.2249%" height="15" fill="rgb(240,92,26)" fg:x="16359" fg:w="249"/><text x="15.0239%" y="463.50"></text></g><g><title>rmp_serde::decode::read_bin_data (46 samples, 0.04%)</title><rect x="14.9572%" y="437" width="0.0415%" height="15" fill="rgb(207,40,23)" fg:x="16562" fg:w="46"/><text x="15.2072%" y="447.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (46 samples, 0.04%)</title><rect x="14.9572%" y="421" width="0.0415%" height="15" fill="rgb(223,111,35)" fg:x="16562" fg:w="46"/><text x="15.2072%" y="431.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (74 samples, 0.07%)</title><rect x="14.9988%" y="389" width="0.0668%" height="15" fill="rgb(229,147,28)" fg:x="16608" fg:w="74"/><text x="15.2488%" y="399.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (74 samples, 0.07%)</title><rect x="14.9988%" y="373" width="0.0668%" height="15" fill="rgb(211,29,28)" fg:x="16608" fg:w="74"/><text x="15.2488%" y="383.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (74 samples, 0.07%)</title><rect x="14.9988%" y="357" width="0.0668%" height="15" fill="rgb(228,72,33)" fg:x="16608" fg:w="74"/><text x="15.2488%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (74 samples, 0.07%)</title><rect x="14.9988%" y="341" width="0.0668%" height="15" fill="rgb(205,214,31)" fg:x="16608" fg:w="74"/><text x="15.2488%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (117 samples, 0.11%)</title><rect x="14.9988%" y="437" width="0.1057%" height="15" fill="rgb(224,111,15)" fg:x="16608" fg:w="117"/><text x="15.2488%" y="447.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (117 samples, 0.11%)</title><rect x="14.9988%" y="421" width="0.1057%" height="15" fill="rgb(253,21,26)" fg:x="16608" fg:w="117"/><text x="15.2488%" y="431.50"></text></g><g><title>rmp::decode::read_marker (117 samples, 0.11%)</title><rect x="14.9988%" y="405" width="0.1057%" height="15" fill="rgb(245,139,43)" fg:x="16608" fg:w="117"/><text x="15.2488%" y="415.50"></text></g><g><title>rmp::marker::Marker::from_u8 (43 samples, 0.04%)</title><rect x="15.0656%" y="389" width="0.0388%" height="15" fill="rgb(252,170,7)" fg:x="16682" fg:w="43"/><text x="15.3156%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (663 samples, 0.60%)</title><rect x="14.5210%" y="501" width="0.5988%" height="15" fill="rgb(231,118,14)" fg:x="16079" fg:w="663"/><text x="14.7710%" y="511.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (663 samples, 0.60%)</title><rect x="14.5210%" y="485" width="0.5988%" height="15" fill="rgb(238,83,0)" fg:x="16079" fg:w="663"/><text x="14.7710%" y="495.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (625 samples, 0.56%)</title><rect x="14.5554%" y="469" width="0.5644%" height="15" fill="rgb(221,39,39)" fg:x="16117" fg:w="625"/><text x="14.8054%" y="479.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (134 samples, 0.12%)</title><rect x="14.9988%" y="453" width="0.1210%" height="15" fill="rgb(222,119,46)" fg:x="16608" fg:w="134"/><text x="15.2488%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (17 samples, 0.02%)</title><rect x="15.1044%" y="437" width="0.0154%" height="15" fill="rgb(222,165,49)" fg:x="16725" fg:w="17"/><text x="15.3544%" y="447.50"></text></g><g><title>core::mem::replace (17 samples, 0.02%)</title><rect x="15.1044%" y="421" width="0.0154%" height="15" fill="rgb(219,113,52)" fg:x="16725" fg:w="17"/><text x="15.3544%" y="431.50"></text></g><g><title>core::ptr::write (12 samples, 0.01%)</title><rect x="15.1090%" y="405" width="0.0108%" height="15" fill="rgb(214,7,15)" fg:x="16730" fg:w="12"/><text x="15.3590%" y="415.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (2,275 samples, 2.05%)</title><rect x="13.7155%" y="549" width="2.0546%" height="15" fill="rgb(235,32,4)" fg:x="15187" fg:w="2275"/><text x="13.9655%" y="559.50">&lt;..</text></g><g><title>serde::de::SeqAccess::next_element (2,275 samples, 2.05%)</title><rect x="13.7155%" y="533" width="2.0546%" height="15" fill="rgb(238,90,54)" fg:x="15187" fg:w="2275"/><text x="13.9655%" y="543.50">s..</text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,275 samples, 2.05%)</title><rect x="13.7155%" y="517" width="2.0546%" height="15" fill="rgb(213,208,19)" fg:x="15187" fg:w="2275"/><text x="13.9655%" y="527.50">&lt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (720 samples, 0.65%)</title><rect x="15.1198%" y="501" width="0.6502%" height="15" fill="rgb(233,156,4)" fg:x="16742" fg:w="720"/><text x="15.3698%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (710 samples, 0.64%)</title><rect x="15.7736%" y="549" width="0.6412%" height="15" fill="rgb(207,194,5)" fg:x="17466" fg:w="710"/><text x="16.0236%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (41 samples, 0.04%)</title><rect x="16.4149%" y="533" width="0.0370%" height="15" fill="rgb(206,111,30)" fg:x="18176" fg:w="41"/><text x="16.6649%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::push (726 samples, 0.66%)</title><rect x="16.4149%" y="549" width="0.6557%" height="15" fill="rgb(243,70,54)" fg:x="18176" fg:w="726"/><text x="16.6649%" y="559.50"></text></g><g><title>core::ptr::write (685 samples, 0.62%)</title><rect x="16.4519%" y="533" width="0.6186%" height="15" fill="rgb(242,28,8)" fg:x="18217" fg:w="685"/><text x="16.7019%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="17.0705%" y="533" width="0.0144%" height="15" fill="rgb(219,106,18)" fg:x="18902" fg:w="16"/><text x="17.3205%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="17.0705%" y="517" width="0.0144%" height="15" fill="rgb(244,222,10)" fg:x="18902" fg:w="16"/><text x="17.3205%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (382 samples, 0.34%)</title><rect x="17.1527%" y="373" width="0.3450%" height="15" fill="rgb(236,179,52)" fg:x="18993" fg:w="382"/><text x="17.4027%" y="383.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (5,083 samples, 4.59%)</title><rect x="12.9144%" y="565" width="4.5905%" height="15" fill="rgb(213,23,39)" fg:x="14300" fg:w="5083"/><text x="13.1644%" y="575.50">&lt;trem..</text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (481 samples, 0.43%)</title><rect x="17.0705%" y="549" width="0.4344%" height="15" fill="rgb(238,48,10)" fg:x="18902" fg:w="481"/><text x="17.3205%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (465 samples, 0.42%)</title><rect x="17.0850%" y="533" width="0.4199%" height="15" fill="rgb(251,196,23)" fg:x="18918" fg:w="465"/><text x="17.3350%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (465 samples, 0.42%)</title><rect x="17.0850%" y="517" width="0.4199%" height="15" fill="rgb(250,152,24)" fg:x="18918" fg:w="465"/><text x="17.3350%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (465 samples, 0.42%)</title><rect x="17.0850%" y="501" width="0.4199%" height="15" fill="rgb(209,150,17)" fg:x="18918" fg:w="465"/><text x="17.3350%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (465 samples, 0.42%)</title><rect x="17.0850%" y="485" width="0.4199%" height="15" fill="rgb(234,202,34)" fg:x="18918" fg:w="465"/><text x="17.3350%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (461 samples, 0.42%)</title><rect x="17.0886%" y="469" width="0.4163%" height="15" fill="rgb(253,148,53)" fg:x="18922" fg:w="461"/><text x="17.3386%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (461 samples, 0.42%)</title><rect x="17.0886%" y="453" width="0.4163%" height="15" fill="rgb(218,129,16)" fg:x="18922" fg:w="461"/><text x="17.3386%" y="463.50"></text></g><g><title>alloc::alloc::alloc (456 samples, 0.41%)</title><rect x="17.0931%" y="437" width="0.4118%" height="15" fill="rgb(216,85,19)" fg:x="18927" fg:w="456"/><text x="17.3431%" y="447.50"></text></g><g><title>__rg_alloc (456 samples, 0.41%)</title><rect x="17.0931%" y="421" width="0.4118%" height="15" fill="rgb(235,228,7)" fg:x="18927" fg:w="456"/><text x="17.3431%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (456 samples, 0.41%)</title><rect x="17.0931%" y="405" width="0.4118%" height="15" fill="rgb(245,175,0)" fg:x="18927" fg:w="456"/><text x="17.3431%" y="415.50"></text></g><g><title>sn_rust_alloc (456 samples, 0.41%)</title><rect x="17.0931%" y="389" width="0.4118%" height="15" fill="rgb(208,168,36)" fg:x="18927" fg:w="456"/><text x="17.3431%" y="399.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (18 samples, 0.02%)</title><rect x="17.5762%" y="549" width="0.0163%" height="15" fill="rgb(246,171,24)" fg:x="19462" fg:w="18"/><text x="17.8262%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (17 samples, 0.02%)</title><rect x="18.1109%" y="517" width="0.0154%" height="15" fill="rgb(215,142,24)" fg:x="20054" fg:w="17"/><text x="18.3609%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (612 samples, 0.55%)</title><rect x="17.5925%" y="549" width="0.5527%" height="15" fill="rgb(250,187,7)" fg:x="19480" fg:w="612"/><text x="17.8425%" y="559.50"></text></g><g><title>core::str::validations::run_utf8_validation (562 samples, 0.51%)</title><rect x="17.6377%" y="533" width="0.5075%" height="15" fill="rgb(228,66,33)" fg:x="19530" fg:w="562"/><text x="17.8877%" y="543.50"></text></g><g><title>core::str::validations::contains_nonascii (21 samples, 0.02%)</title><rect x="18.1262%" y="517" width="0.0190%" height="15" fill="rgb(234,215,21)" fg:x="20071" fg:w="21"/><text x="18.3762%" y="527.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (789 samples, 0.71%)</title><rect x="17.5103%" y="565" width="0.7126%" height="15" fill="rgb(222,191,20)" fg:x="19389" fg:w="789"/><text x="17.7603%" y="575.50"></text></g><g><title>rmp_serde::decode::read_bin_data (86 samples, 0.08%)</title><rect x="18.1452%" y="549" width="0.0777%" height="15" fill="rgb(245,79,54)" fg:x="20092" fg:w="86"/><text x="18.3952%" y="559.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (84 samples, 0.08%)</title><rect x="18.1470%" y="533" width="0.0759%" height="15" fill="rgb(240,10,37)" fg:x="20094" fg:w="84"/><text x="18.3970%" y="543.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (74 samples, 0.07%)</title><rect x="18.2229%" y="501" width="0.0668%" height="15" fill="rgb(214,192,32)" fg:x="20178" fg:w="74"/><text x="18.4729%" y="511.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (74 samples, 0.07%)</title><rect x="18.2229%" y="485" width="0.0668%" height="15" fill="rgb(209,36,54)" fg:x="20178" fg:w="74"/><text x="18.4729%" y="495.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (74 samples, 0.07%)</title><rect x="18.2229%" y="469" width="0.0668%" height="15" fill="rgb(220,10,11)" fg:x="20178" fg:w="74"/><text x="18.4729%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (74 samples, 0.07%)</title><rect x="18.2229%" y="453" width="0.0668%" height="15" fill="rgb(221,106,17)" fg:x="20178" fg:w="74"/><text x="18.4729%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (34 samples, 0.03%)</title><rect x="18.2590%" y="437" width="0.0307%" height="15" fill="rgb(251,142,44)" fg:x="20218" fg:w="34"/><text x="18.5090%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (34 samples, 0.03%)</title><rect x="18.2590%" y="421" width="0.0307%" height="15" fill="rgb(238,13,15)" fg:x="20218" fg:w="34"/><text x="18.5090%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (34 samples, 0.03%)</title><rect x="18.2590%" y="405" width="0.0307%" height="15" fill="rgb(208,107,27)" fg:x="20218" fg:w="34"/><text x="18.5090%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (34 samples, 0.03%)</title><rect x="18.2590%" y="389" width="0.0307%" height="15" fill="rgb(205,136,37)" fg:x="20218" fg:w="34"/><text x="18.5090%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (34 samples, 0.03%)</title><rect x="18.2590%" y="373" width="0.0307%" height="15" fill="rgb(250,205,27)" fg:x="20218" fg:w="34"/><text x="18.5090%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (31 samples, 0.03%)</title><rect x="18.2617%" y="357" width="0.0280%" height="15" fill="rgb(210,80,43)" fg:x="20221" fg:w="31"/><text x="18.5117%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (31 samples, 0.03%)</title><rect x="18.2617%" y="341" width="0.0280%" height="15" fill="rgb(247,160,36)" fg:x="20221" fg:w="31"/><text x="18.5117%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (142 samples, 0.13%)</title><rect x="18.2229%" y="549" width="0.1282%" height="15" fill="rgb(234,13,49)" fg:x="20178" fg:w="142"/><text x="18.4729%" y="559.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (142 samples, 0.13%)</title><rect x="18.2229%" y="533" width="0.1282%" height="15" fill="rgb(234,122,0)" fg:x="20178" fg:w="142"/><text x="18.4729%" y="543.50"></text></g><g><title>rmp::decode::read_marker (142 samples, 0.13%)</title><rect x="18.2229%" y="517" width="0.1282%" height="15" fill="rgb(207,146,38)" fg:x="20178" fg:w="142"/><text x="18.4729%" y="527.50"></text></g><g><title>rmp::marker::Marker::from_u8 (68 samples, 0.06%)</title><rect x="18.2897%" y="501" width="0.0614%" height="15" fill="rgb(207,177,25)" fg:x="20252" fg:w="68"/><text x="18.5397%" y="511.50"></text></g><g><title>core::ptr::read (31 samples, 0.03%)</title><rect x="18.3511%" y="517" width="0.0280%" height="15" fill="rgb(211,178,42)" fg:x="20320" fg:w="31"/><text x="18.6011%" y="527.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (174 samples, 0.16%)</title><rect x="18.2229%" y="565" width="0.1571%" height="15" fill="rgb(230,69,54)" fg:x="20178" fg:w="174"/><text x="18.4729%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (32 samples, 0.03%)</title><rect x="18.3511%" y="549" width="0.0289%" height="15" fill="rgb(214,135,41)" fg:x="20320" fg:w="32"/><text x="18.6011%" y="559.50"></text></g><g><title>core::mem::replace (32 samples, 0.03%)</title><rect x="18.3511%" y="533" width="0.0289%" height="15" fill="rgb(237,67,25)" fg:x="20320" fg:w="32"/><text x="18.6011%" y="543.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (6,453 samples, 5.83%)</title><rect x="12.5613%" y="661" width="5.8277%" height="15" fill="rgb(222,189,50)" fg:x="13909" fg:w="6453"/><text x="12.8113%" y="671.50">&lt;&amp;mut A..</text></g><g><title>serde::de::MapAccess::next_value (6,453 samples, 5.83%)</title><rect x="12.5613%" y="645" width="5.8277%" height="15" fill="rgb(245,148,34)" fg:x="13909" fg:w="6453"/><text x="12.8113%" y="655.50">serde::..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (6,453 samples, 5.83%)</title><rect x="12.5613%" y="629" width="5.8277%" height="15" fill="rgb(222,29,6)" fg:x="13909" fg:w="6453"/><text x="12.8113%" y="639.50">&lt;rmp_se..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,453 samples, 5.83%)</title><rect x="12.5613%" y="613" width="5.8277%" height="15" fill="rgb(221,189,43)" fg:x="13909" fg:w="6453"/><text x="12.8113%" y="623.50">&lt;core::..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (6,453 samples, 5.83%)</title><rect x="12.5613%" y="597" width="5.8277%" height="15" fill="rgb(207,36,27)" fg:x="13909" fg:w="6453"/><text x="12.8113%" y="607.50">tremor_..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (6,451 samples, 5.83%)</title><rect x="12.5631%" y="581" width="5.8259%" height="15" fill="rgb(217,90,24)" fg:x="13911" fg:w="6451"/><text x="12.8131%" y="591.50">&lt;&amp;mut r..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (460 samples, 0.42%)</title><rect x="18.3908%" y="661" width="0.4154%" height="15" fill="rgb(224,66,35)" fg:x="20364" fg:w="460"/><text x="18.6408%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.03%)</title><rect x="21.2447%" y="517" width="0.0316%" height="15" fill="rgb(221,13,50)" fg:x="23524" fg:w="35"/><text x="21.4947%" y="527.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (20 samples, 0.02%)</title><rect x="21.3973%" y="453" width="0.0181%" height="15" fill="rgb(236,68,49)" fg:x="23693" fg:w="20"/><text x="21.6473%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (20 samples, 0.02%)</title><rect x="21.3973%" y="437" width="0.0181%" height="15" fill="rgb(229,146,28)" fg:x="23693" fg:w="20"/><text x="21.6473%" y="447.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (20 samples, 0.02%)</title><rect x="21.3973%" y="421" width="0.0181%" height="15" fill="rgb(225,31,38)" fg:x="23693" fg:w="20"/><text x="21.6473%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (20 samples, 0.02%)</title><rect x="21.3973%" y="405" width="0.0181%" height="15" fill="rgb(250,208,3)" fg:x="23693" fg:w="20"/><text x="21.6473%" y="415.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (20 samples, 0.02%)</title><rect x="21.3973%" y="389" width="0.0181%" height="15" fill="rgb(246,54,23)" fg:x="23693" fg:w="20"/><text x="21.6473%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.05%)</title><rect x="21.4153%" y="453" width="0.0506%" height="15" fill="rgb(243,76,11)" fg:x="23713" fg:w="56"/><text x="21.6653%" y="463.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (19 samples, 0.02%)</title><rect x="21.4488%" y="437" width="0.0172%" height="15" fill="rgb(245,21,50)" fg:x="23750" fg:w="19"/><text x="21.6988%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.02%)</title><rect x="21.4488%" y="421" width="0.0172%" height="15" fill="rgb(228,9,43)" fg:x="23750" fg:w="19"/><text x="21.6988%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.02%)</title><rect x="21.4731%" y="437" width="0.0172%" height="15" fill="rgb(208,100,47)" fg:x="23777" fg:w="19"/><text x="21.7231%" y="447.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (48 samples, 0.04%)</title><rect x="21.4659%" y="453" width="0.0433%" height="15" fill="rgb(232,26,8)" fg:x="23769" fg:w="48"/><text x="21.7159%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (21 samples, 0.02%)</title><rect x="21.4903%" y="437" width="0.0190%" height="15" fill="rgb(216,166,38)" fg:x="23796" fg:w="21"/><text x="21.7403%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (241 samples, 0.22%)</title><rect x="21.3070%" y="501" width="0.2176%" height="15" fill="rgb(251,202,51)" fg:x="23593" fg:w="241"/><text x="21.5570%" y="511.50"></text></g><g><title>fxhash::write (241 samples, 0.22%)</title><rect x="21.3070%" y="485" width="0.2176%" height="15" fill="rgb(254,216,34)" fg:x="23593" fg:w="241"/><text x="21.5570%" y="495.50"></text></g><g><title>fxhash::write64 (241 samples, 0.22%)</title><rect x="21.3070%" y="469" width="0.2176%" height="15" fill="rgb(251,32,27)" fg:x="23593" fg:w="241"/><text x="21.5570%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (17 samples, 0.02%)</title><rect x="21.5093%" y="453" width="0.0154%" height="15" fill="rgb(208,127,28)" fg:x="23817" fg:w="17"/><text x="21.7593%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (17 samples, 0.02%)</title><rect x="21.5093%" y="437" width="0.0154%" height="15" fill="rgb(224,137,22)" fg:x="23817" fg:w="17"/><text x="21.7593%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (17 samples, 0.02%)</title><rect x="21.5093%" y="421" width="0.0154%" height="15" fill="rgb(254,70,32)" fg:x="23817" fg:w="17"/><text x="21.7593%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (17 samples, 0.02%)</title><rect x="21.5093%" y="405" width="0.0154%" height="15" fill="rgb(229,75,37)" fg:x="23817" fg:w="17"/><text x="21.7593%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (17 samples, 0.02%)</title><rect x="21.5093%" y="389" width="0.0154%" height="15" fill="rgb(252,64,23)" fg:x="23817" fg:w="17"/><text x="21.7593%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (17 samples, 0.02%)</title><rect x="21.5093%" y="373" width="0.0154%" height="15" fill="rgb(232,162,48)" fg:x="23817" fg:w="17"/><text x="21.7593%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (17 samples, 0.02%)</title><rect x="21.5093%" y="357" width="0.0154%" height="15" fill="rgb(246,160,12)" fg:x="23817" fg:w="17"/><text x="21.7593%" y="367.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (13 samples, 0.01%)</title><rect x="21.5364%" y="469" width="0.0117%" height="15" fill="rgb(247,166,0)" fg:x="23847" fg:w="13"/><text x="21.7864%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (13 samples, 0.01%)</title><rect x="21.5481%" y="469" width="0.0117%" height="15" fill="rgb(249,219,21)" fg:x="23860" fg:w="13"/><text x="21.7981%" y="479.50"></text></g><g><title>hashbrown::map::make_insert_hash (418 samples, 0.38%)</title><rect x="21.1832%" y="565" width="0.3775%" height="15" fill="rgb(205,209,3)" fg:x="23456" fg:w="418"/><text x="21.4332%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (388 samples, 0.35%)</title><rect x="21.2103%" y="549" width="0.3504%" height="15" fill="rgb(243,44,1)" fg:x="23486" fg:w="388"/><text x="21.4603%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (388 samples, 0.35%)</title><rect x="21.2103%" y="533" width="0.3504%" height="15" fill="rgb(206,159,16)" fg:x="23486" fg:w="388"/><text x="21.4603%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (315 samples, 0.28%)</title><rect x="21.2763%" y="517" width="0.2845%" height="15" fill="rgb(244,77,30)" fg:x="23559" fg:w="315"/><text x="21.5263%" y="527.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (40 samples, 0.04%)</title><rect x="21.5246%" y="501" width="0.0361%" height="15" fill="rgb(218,69,12)" fg:x="23834" fg:w="40"/><text x="21.7746%" y="511.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (40 samples, 0.04%)</title><rect x="21.5246%" y="485" width="0.0361%" height="15" fill="rgb(212,87,7)" fg:x="23834" fg:w="40"/><text x="21.7746%" y="495.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (12 samples, 0.01%)</title><rect x="21.5924%" y="501" width="0.0108%" height="15" fill="rgb(245,114,25)" fg:x="23909" fg:w="12"/><text x="21.8424%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (17 samples, 0.02%)</title><rect x="21.5924%" y="517" width="0.0154%" height="15" fill="rgb(210,61,42)" fg:x="23909" fg:w="17"/><text x="21.8424%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (108 samples, 0.10%)</title><rect x="21.6077%" y="517" width="0.0975%" height="15" fill="rgb(211,52,33)" fg:x="23926" fg:w="108"/><text x="21.8577%" y="527.50"></text></g><g><title>hashbrown::raw::inner::h2 (16 samples, 0.01%)</title><rect x="21.7052%" y="517" width="0.0144%" height="15" fill="rgb(234,58,33)" fg:x="24034" fg:w="16"/><text x="21.9552%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (28 samples, 0.03%)</title><rect x="21.7197%" y="517" width="0.0253%" height="15" fill="rgb(220,115,36)" fg:x="24050" fg:w="28"/><text x="21.9697%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (28 samples, 0.03%)</title><rect x="21.7197%" y="501" width="0.0253%" height="15" fill="rgb(243,153,54)" fg:x="24050" fg:w="28"/><text x="21.9697%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.03%)</title><rect x="21.7197%" y="485" width="0.0253%" height="15" fill="rgb(251,47,18)" fg:x="24050" fg:w="28"/><text x="21.9697%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (28 samples, 0.03%)</title><rect x="21.7450%" y="517" width="0.0253%" height="15" fill="rgb(242,102,42)" fg:x="24078" fg:w="28"/><text x="21.9950%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (28 samples, 0.03%)</title><rect x="21.7450%" y="501" width="0.0253%" height="15" fill="rgb(234,31,38)" fg:x="24078" fg:w="28"/><text x="21.9950%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (263 samples, 0.24%)</title><rect x="21.5607%" y="565" width="0.2375%" height="15" fill="rgb(221,117,51)" fg:x="23874" fg:w="263"/><text x="21.8107%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (263 samples, 0.24%)</title><rect x="21.5607%" y="549" width="0.2375%" height="15" fill="rgb(212,20,18)" fg:x="23874" fg:w="263"/><text x="21.8107%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (263 samples, 0.24%)</title><rect x="21.5607%" y="533" width="0.2375%" height="15" fill="rgb(245,133,36)" fg:x="23874" fg:w="263"/><text x="21.8107%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (31 samples, 0.03%)</title><rect x="21.7703%" y="517" width="0.0280%" height="15" fill="rgb(212,6,19)" fg:x="24106" fg:w="31"/><text x="22.0203%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (31 samples, 0.03%)</title><rect x="21.7703%" y="501" width="0.0280%" height="15" fill="rgb(218,1,36)" fg:x="24106" fg:w="31"/><text x="22.0203%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (31 samples, 0.03%)</title><rect x="21.7703%" y="485" width="0.0280%" height="15" fill="rgb(246,84,54)" fg:x="24106" fg:w="31"/><text x="22.0203%" y="495.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (391 samples, 0.35%)</title><rect x="21.8362%" y="549" width="0.3531%" height="15" fill="rgb(242,110,6)" fg:x="24179" fg:w="391"/><text x="22.0862%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (391 samples, 0.35%)</title><rect x="21.8362%" y="533" width="0.3531%" height="15" fill="rgb(214,47,5)" fg:x="24179" fg:w="391"/><text x="22.0862%" y="543.50"></text></g><g><title>core::ptr::write (391 samples, 0.35%)</title><rect x="21.8362%" y="517" width="0.3531%" height="15" fill="rgb(218,159,25)" fg:x="24179" fg:w="391"/><text x="22.0862%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (24 samples, 0.02%)</title><rect x="22.1893%" y="549" width="0.0217%" height="15" fill="rgb(215,211,28)" fg:x="24570" fg:w="24"/><text x="22.4393%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (24 samples, 0.02%)</title><rect x="22.1893%" y="533" width="0.0217%" height="15" fill="rgb(238,59,32)" fg:x="24570" fg:w="24"/><text x="22.4393%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (21 samples, 0.02%)</title><rect x="22.1920%" y="517" width="0.0190%" height="15" fill="rgb(226,82,3)" fg:x="24573" fg:w="21"/><text x="22.4420%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (39 samples, 0.04%)</title><rect x="22.2850%" y="533" width="0.0352%" height="15" fill="rgb(240,164,32)" fg:x="24676" fg:w="39"/><text x="22.5350%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (157 samples, 0.14%)</title><rect x="22.2110%" y="549" width="0.1418%" height="15" fill="rgb(232,46,7)" fg:x="24594" fg:w="157"/><text x="22.4610%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (25 samples, 0.02%)</title><rect x="22.3302%" y="533" width="0.0226%" height="15" fill="rgb(229,129,53)" fg:x="24726" fg:w="25"/><text x="22.5802%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.02%)</title><rect x="22.3302%" y="517" width="0.0226%" height="15" fill="rgb(234,188,29)" fg:x="24726" fg:w="25"/><text x="22.5802%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (4,037 samples, 3.65%)</title><rect x="18.8063%" y="661" width="3.6458%" height="15" fill="rgb(246,141,4)" fg:x="20824" fg:w="4037"/><text x="19.0563%" y="671.50">abi_..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (2,996 samples, 2.71%)</title><rect x="19.7464%" y="645" width="2.7057%" height="15" fill="rgb(229,23,39)" fg:x="21865" fg:w="2996"/><text x="19.9964%" y="655.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,463 samples, 2.22%)</title><rect x="20.2278%" y="629" width="2.2243%" height="15" fill="rgb(206,12,3)" fg:x="22398" fg:w="2463"/><text x="20.4778%" y="639.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,463 samples, 2.22%)</title><rect x="20.2278%" y="613" width="2.2243%" height="15" fill="rgb(252,226,20)" fg:x="22398" fg:w="2463"/><text x="20.4778%" y="623.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (2,164 samples, 1.95%)</title><rect x="20.4978%" y="597" width="1.9543%" height="15" fill="rgb(216,123,35)" fg:x="22697" fg:w="2164"/><text x="20.7478%" y="607.50">a..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,605 samples, 1.45%)</title><rect x="21.0026%" y="581" width="1.4495%" height="15" fill="rgb(212,68,40)" fg:x="23256" fg:w="1605"/><text x="21.2526%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (724 samples, 0.65%)</title><rect x="21.7983%" y="565" width="0.6538%" height="15" fill="rgb(254,125,32)" fg:x="24137" fg:w="724"/><text x="22.0483%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (110 samples, 0.10%)</title><rect x="22.3528%" y="549" width="0.0993%" height="15" fill="rgb(253,97,22)" fg:x="24751" fg:w="110"/><text x="22.6028%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (32 samples, 0.03%)</title><rect x="22.4232%" y="533" width="0.0289%" height="15" fill="rgb(241,101,14)" fg:x="24829" fg:w="32"/><text x="22.6732%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (32 samples, 0.03%)</title><rect x="22.4232%" y="517" width="0.0289%" height="15" fill="rgb(238,103,29)" fg:x="24829" fg:w="32"/><text x="22.6732%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (92 samples, 0.08%)</title><rect x="22.4937%" y="485" width="0.0831%" height="15" fill="rgb(233,195,47)" fg:x="24907" fg:w="92"/><text x="22.7437%" y="495.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (135 samples, 0.12%)</title><rect x="22.4575%" y="645" width="0.1219%" height="15" fill="rgb(246,218,30)" fg:x="24867" fg:w="135"/><text x="22.7075%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (135 samples, 0.12%)</title><rect x="22.4575%" y="629" width="0.1219%" height="15" fill="rgb(219,145,47)" fg:x="24867" fg:w="135"/><text x="22.7075%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (129 samples, 0.12%)</title><rect x="22.4630%" y="613" width="0.1165%" height="15" fill="rgb(243,12,26)" fg:x="24873" fg:w="129"/><text x="22.7130%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (122 samples, 0.11%)</title><rect x="22.4693%" y="597" width="0.1102%" height="15" fill="rgb(214,87,16)" fg:x="24880" fg:w="122"/><text x="22.7193%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (122 samples, 0.11%)</title><rect x="22.4693%" y="581" width="0.1102%" height="15" fill="rgb(208,99,42)" fg:x="24880" fg:w="122"/><text x="22.7193%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 0.11%)</title><rect x="22.4693%" y="565" width="0.1102%" height="15" fill="rgb(253,99,2)" fg:x="24880" fg:w="122"/><text x="22.7193%" y="575.50"></text></g><g><title>alloc::alloc::alloc (122 samples, 0.11%)</title><rect x="22.4693%" y="549" width="0.1102%" height="15" fill="rgb(220,168,23)" fg:x="24880" fg:w="122"/><text x="22.7193%" y="559.50"></text></g><g><title>__rg_alloc (122 samples, 0.11%)</title><rect x="22.4693%" y="533" width="0.1102%" height="15" fill="rgb(242,38,24)" fg:x="24880" fg:w="122"/><text x="22.7193%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (122 samples, 0.11%)</title><rect x="22.4693%" y="517" width="0.1102%" height="15" fill="rgb(225,182,9)" fg:x="24880" fg:w="122"/><text x="22.7193%" y="527.50"></text></g><g><title>sn_rust_alloc (118 samples, 0.11%)</title><rect x="22.4729%" y="501" width="0.1066%" height="15" fill="rgb(243,178,37)" fg:x="24884" fg:w="118"/><text x="22.7229%" y="511.50"></text></g><g><title>core::mem::swap (244 samples, 0.22%)</title><rect x="22.6138%" y="501" width="0.2204%" height="15" fill="rgb(232,139,19)" fg:x="25040" fg:w="244"/><text x="22.8638%" y="511.50"></text></g><g><title>core::mem::swap_simple (244 samples, 0.22%)</title><rect x="22.6138%" y="485" width="0.2204%" height="15" fill="rgb(225,201,24)" fg:x="25040" fg:w="244"/><text x="22.8638%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (43 samples, 0.04%)</title><rect x="22.8495%" y="469" width="0.0388%" height="15" fill="rgb(221,47,46)" fg:x="25301" fg:w="43"/><text x="23.0995%" y="479.50"></text></g><g><title>core::intrinsics::write_bytes (43 samples, 0.04%)</title><rect x="22.8495%" y="453" width="0.0388%" height="15" fill="rgb(249,23,13)" fg:x="25301" fg:w="43"/><text x="23.0995%" y="463.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="22.8549%" y="437" width="0.0334%" height="15" fill="rgb(219,9,5)" fg:x="25307" fg:w="37"/><text x="23.1049%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,334 samples, 1.20%)</title><rect x="23.0328%" y="357" width="1.2047%" height="15" fill="rgb(254,171,16)" fg:x="25504" fg:w="1334"/><text x="23.2828%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (12 samples, 0.01%)</title><rect x="24.2267%" y="341" width="0.0108%" height="15" fill="rgb(230,171,20)" fg:x="26826" fg:w="12"/><text x="24.4767%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (36 samples, 0.03%)</title><rect x="24.2376%" y="357" width="0.0325%" height="15" fill="rgb(210,71,41)" fg:x="26838" fg:w="36"/><text x="24.4876%" y="367.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,525 samples, 1.38%)</title><rect x="22.8982%" y="453" width="1.3772%" height="15" fill="rgb(206,173,20)" fg:x="25355" fg:w="1525"/><text x="23.1482%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,525 samples, 1.38%)</title><rect x="22.8982%" y="437" width="1.3772%" height="15" fill="rgb(233,88,34)" fg:x="25355" fg:w="1525"/><text x="23.1482%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1,525 samples, 1.38%)</title><rect x="22.8982%" y="421" width="1.3772%" height="15" fill="rgb(223,209,46)" fg:x="25355" fg:w="1525"/><text x="23.1482%" y="431.50"></text></g><g><title>__rg_alloc (1,525 samples, 1.38%)</title><rect x="22.8982%" y="405" width="1.3772%" height="15" fill="rgb(250,43,18)" fg:x="25355" fg:w="1525"/><text x="23.1482%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,525 samples, 1.38%)</title><rect x="22.8982%" y="389" width="1.3772%" height="15" fill="rgb(208,13,10)" fg:x="25355" fg:w="1525"/><text x="23.1482%" y="399.50"></text></g><g><title>sn_rust_alloc (1,525 samples, 1.38%)</title><rect x="22.8982%" y="373" width="1.3772%" height="15" fill="rgb(212,200,36)" fg:x="25355" fg:w="1525"/><text x="23.1482%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,540 samples, 1.39%)</title><rect x="22.8883%" y="469" width="1.3908%" height="15" fill="rgb(225,90,30)" fg:x="25344" fg:w="1540"/><text x="23.1383%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,612 samples, 1.46%)</title><rect x="22.8359%" y="501" width="1.4558%" height="15" fill="rgb(236,182,39)" fg:x="25286" fg:w="1612"/><text x="23.0859%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,608 samples, 1.45%)</title><rect x="22.8395%" y="485" width="1.4522%" height="15" fill="rgb(212,144,35)" fg:x="25290" fg:w="1608"/><text x="23.0895%" y="495.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (14 samples, 0.01%)</title><rect x="24.2791%" y="469" width="0.0126%" height="15" fill="rgb(228,63,44)" fg:x="26884" fg:w="14"/><text x="24.5291%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,879 samples, 1.70%)</title><rect x="22.5993%" y="517" width="1.6969%" height="15" fill="rgb(228,109,6)" fg:x="25024" fg:w="1879"/><text x="22.8493%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,048 samples, 1.85%)</title><rect x="22.4521%" y="661" width="1.8496%" height="15" fill="rgb(238,117,24)" fg:x="24861" fg:w="2048"/><text x="22.7021%" y="671.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,907 samples, 1.72%)</title><rect x="22.5795%" y="645" width="1.7222%" height="15" fill="rgb(242,26,26)" fg:x="25002" fg:w="1907"/><text x="22.8295%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,907 samples, 1.72%)</title><rect x="22.5795%" y="629" width="1.7222%" height="15" fill="rgb(221,92,48)" fg:x="25002" fg:w="1907"/><text x="22.8295%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,907 samples, 1.72%)</title><rect x="22.5795%" y="613" width="1.7222%" height="15" fill="rgb(209,209,32)" fg:x="25002" fg:w="1907"/><text x="22.8295%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,907 samples, 1.72%)</title><rect x="22.5795%" y="597" width="1.7222%" height="15" fill="rgb(221,70,22)" fg:x="25002" fg:w="1907"/><text x="22.8295%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,907 samples, 1.72%)</title><rect x="22.5795%" y="581" width="1.7222%" height="15" fill="rgb(248,145,5)" fg:x="25002" fg:w="1907"/><text x="22.8295%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,907 samples, 1.72%)</title><rect x="22.5795%" y="565" width="1.7222%" height="15" fill="rgb(226,116,26)" fg:x="25002" fg:w="1907"/><text x="22.8295%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,901 samples, 1.72%)</title><rect x="22.5849%" y="549" width="1.7168%" height="15" fill="rgb(244,5,17)" fg:x="25008" fg:w="1901"/><text x="22.8349%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,896 samples, 1.71%)</title><rect x="22.5894%" y="533" width="1.7123%" height="15" fill="rgb(252,159,33)" fg:x="25013" fg:w="1896"/><text x="22.8394%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="24.3017%" y="661" width="0.0108%" height="15" fill="rgb(206,71,0)" fg:x="26909" fg:w="12"/><text x="24.5517%" y="671.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (16,016 samples, 14.46%)</title><rect x="9.8493%" y="677" width="14.4641%" height="15" fill="rgb(233,118,54)" fg:x="10906" fg:w="16016"/><text x="10.0993%" y="687.50">&lt;tremor_value::serde::..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (13 samples, 0.01%)</title><rect x="24.3134%" y="661" width="0.0117%" height="15" fill="rgb(234,83,48)" fg:x="26922" fg:w="13"/><text x="24.5634%" y="671.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (16,266 samples, 14.69%)</title><rect x="9.7066%" y="757" width="14.6899%" height="15" fill="rgb(228,3,54)" fg:x="10748" fg:w="16266"/><text x="9.9566%" y="767.50">&lt;tremor_runtime::codec..</text></g><g><title>rmp_serde::decode::from_slice (16,134 samples, 14.57%)</title><rect x="9.8258%" y="741" width="14.5707%" height="15" fill="rgb(226,155,13)" fg:x="10880" fg:w="16134"/><text x="10.0758%" y="751.50">rmp_serde::decode::fro..</text></g><g><title>rmp_serde::decode::from_read_ref (16,134 samples, 14.57%)</title><rect x="9.8258%" y="725" width="14.5707%" height="15" fill="rgb(241,28,37)" fg:x="10880" fg:w="16134"/><text x="10.0758%" y="735.50">rmp_serde::decode::fro..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (16,127 samples, 14.56%)</title><rect x="9.8321%" y="709" width="14.5644%" height="15" fill="rgb(233,93,10)" fg:x="10887" fg:w="16127"/><text x="10.0821%" y="719.50">tremor_value::serde::v..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (16,127 samples, 14.56%)</title><rect x="9.8321%" y="693" width="14.5644%" height="15" fill="rgb(225,113,19)" fg:x="10887" fg:w="16127"/><text x="10.0821%" y="703.50">&lt;&amp;mut rmp_serde::decod..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (92 samples, 0.08%)</title><rect x="24.3134%" y="677" width="0.0831%" height="15" fill="rgb(241,2,18)" fg:x="26922" fg:w="92"/><text x="24.5634%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (79 samples, 0.07%)</title><rect x="24.3252%" y="661" width="0.0713%" height="15" fill="rgb(228,207,21)" fg:x="26935" fg:w="79"/><text x="24.5752%" y="671.50"></text></g><g><title>core::mem::replace (79 samples, 0.07%)</title><rect x="24.3252%" y="645" width="0.0713%" height="15" fill="rgb(213,211,35)" fg:x="26935" fg:w="79"/><text x="24.5752%" y="655.50"></text></g><g><title>core::ptr::read (79 samples, 0.07%)</title><rect x="24.3252%" y="629" width="0.0713%" height="15" fill="rgb(209,83,10)" fg:x="26935" fg:w="79"/><text x="24.5752%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (81 samples, 0.07%)</title><rect x="24.4931%" y="485" width="0.0732%" height="15" fill="rgb(209,164,1)" fg:x="27121" fg:w="81"/><text x="24.7431%" y="495.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (112 samples, 0.10%)</title><rect x="24.4660%" y="645" width="0.1011%" height="15" fill="rgb(213,184,43)" fg:x="27091" fg:w="112"/><text x="24.7160%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (112 samples, 0.10%)</title><rect x="24.4660%" y="629" width="0.1011%" height="15" fill="rgb(231,61,34)" fg:x="27091" fg:w="112"/><text x="24.7160%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (112 samples, 0.10%)</title><rect x="24.4660%" y="613" width="0.1011%" height="15" fill="rgb(235,75,3)" fg:x="27091" fg:w="112"/><text x="24.7160%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (109 samples, 0.10%)</title><rect x="24.4687%" y="597" width="0.0984%" height="15" fill="rgb(220,106,47)" fg:x="27094" fg:w="109"/><text x="24.7187%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (109 samples, 0.10%)</title><rect x="24.4687%" y="581" width="0.0984%" height="15" fill="rgb(210,196,33)" fg:x="27094" fg:w="109"/><text x="24.7187%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (109 samples, 0.10%)</title><rect x="24.4687%" y="565" width="0.0984%" height="15" fill="rgb(229,154,42)" fg:x="27094" fg:w="109"/><text x="24.7187%" y="575.50"></text></g><g><title>alloc::alloc::alloc (109 samples, 0.10%)</title><rect x="24.4687%" y="549" width="0.0984%" height="15" fill="rgb(228,114,26)" fg:x="27094" fg:w="109"/><text x="24.7187%" y="559.50"></text></g><g><title>__rg_alloc (109 samples, 0.10%)</title><rect x="24.4687%" y="533" width="0.0984%" height="15" fill="rgb(208,144,1)" fg:x="27094" fg:w="109"/><text x="24.7187%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (109 samples, 0.10%)</title><rect x="24.4687%" y="517" width="0.0984%" height="15" fill="rgb(239,112,37)" fg:x="27094" fg:w="109"/><text x="24.7187%" y="527.50"></text></g><g><title>sn_rust_alloc (103 samples, 0.09%)</title><rect x="24.4742%" y="501" width="0.0930%" height="15" fill="rgb(210,96,50)" fg:x="27100" fg:w="103"/><text x="24.7242%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (118 samples, 0.11%)</title><rect x="24.4615%" y="693" width="0.1066%" height="15" fill="rgb(222,178,2)" fg:x="27086" fg:w="118"/><text x="24.7115%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (118 samples, 0.11%)</title><rect x="24.4615%" y="677" width="0.1066%" height="15" fill="rgb(226,74,18)" fg:x="27086" fg:w="118"/><text x="24.7115%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (118 samples, 0.11%)</title><rect x="24.4615%" y="661" width="0.1066%" height="15" fill="rgb(225,67,54)" fg:x="27086" fg:w="118"/><text x="24.7115%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="24.5744%" y="677" width="0.0108%" height="15" fill="rgb(251,92,32)" fg:x="27211" fg:w="12"/><text x="24.8244%" y="687.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (12 samples, 0.01%)</title><rect x="24.5744%" y="661" width="0.0108%" height="15" fill="rgb(228,149,22)" fg:x="27211" fg:w="12"/><text x="24.8244%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (24 samples, 0.02%)</title><rect x="24.5852%" y="677" width="0.0217%" height="15" fill="rgb(243,54,13)" fg:x="27223" fg:w="24"/><text x="24.8352%" y="687.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (24 samples, 0.02%)</title><rect x="24.5852%" y="661" width="0.0217%" height="15" fill="rgb(243,180,28)" fg:x="27223" fg:w="24"/><text x="24.8352%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,555 samples, 14.95%)</title><rect x="9.7039%" y="869" width="14.9509%" height="15" fill="rgb(208,167,24)" fg:x="10745" fg:w="16555"/><text x="9.9539%" y="879.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (16,555 samples, 14.95%)</title><rect x="9.7039%" y="853" width="14.9509%" height="15" fill="rgb(245,73,45)" fg:x="10745" fg:w="16555"/><text x="9.9539%" y="863.50">tremor_runtime::connect..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,555 samples, 14.95%)</title><rect x="9.7039%" y="837" width="14.9509%" height="15" fill="rgb(237,203,48)" fg:x="10745" fg:w="16555"/><text x="9.9539%" y="847.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (16,555 samples, 14.95%)</title><rect x="9.7039%" y="821" width="14.9509%" height="15" fill="rgb(211,197,16)" fg:x="10745" fg:w="16555"/><text x="9.9539%" y="831.50">tremor_runtime::connect..</text></g><g><title>tremor_runtime::connectors::source::build_events (16,555 samples, 14.95%)</title><rect x="9.7039%" y="805" width="14.9509%" height="15" fill="rgb(243,99,51)" fg:x="10745" fg:w="16555"/><text x="9.9539%" y="815.50">tremor_runtime::connect..</text></g><g><title>tremor_script::srs::EventPayload::try_new (16,552 samples, 14.95%)</title><rect x="9.7066%" y="789" width="14.9482%" height="15" fill="rgb(215,123,29)" fg:x="10748" fg:w="16552"/><text x="9.9566%" y="799.50">tremor_script::srs::Eve..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (16,552 samples, 14.95%)</title><rect x="9.7066%" y="773" width="14.9482%" height="15" fill="rgb(239,186,37)" fg:x="10748" fg:w="16552"/><text x="9.9566%" y="783.50">tremor_runtime::connect..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (286 samples, 0.26%)</title><rect x="24.3965%" y="757" width="0.2583%" height="15" fill="rgb(252,136,39)" fg:x="27014" fg:w="286"/><text x="24.6465%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (286 samples, 0.26%)</title><rect x="24.3965%" y="741" width="0.2583%" height="15" fill="rgb(223,213,32)" fg:x="27014" fg:w="286"/><text x="24.6465%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (286 samples, 0.26%)</title><rect x="24.3965%" y="725" width="0.2583%" height="15" fill="rgb(233,115,5)" fg:x="27014" fg:w="286"/><text x="24.6465%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (214 samples, 0.19%)</title><rect x="24.4615%" y="709" width="0.1933%" height="15" fill="rgb(207,226,44)" fg:x="27086" fg:w="214"/><text x="24.7115%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (96 samples, 0.09%)</title><rect x="24.5681%" y="693" width="0.0867%" height="15" fill="rgb(208,126,0)" fg:x="27204" fg:w="96"/><text x="24.8181%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (50 samples, 0.05%)</title><rect x="24.6096%" y="677" width="0.0452%" height="15" fill="rgb(244,66,21)" fg:x="27250" fg:w="50"/><text x="24.8596%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (50 samples, 0.05%)</title><rect x="24.6096%" y="661" width="0.0452%" height="15" fill="rgb(222,97,12)" fg:x="27250" fg:w="50"/><text x="24.8596%" y="671.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.05%)</title><rect x="24.6096%" y="645" width="0.0452%" height="15" fill="rgb(219,213,19)" fg:x="27250" fg:w="50"/><text x="24.8596%" y="655.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (48 samples, 0.04%)</title><rect x="24.6114%" y="629" width="0.0433%" height="15" fill="rgb(252,169,30)" fg:x="27252" fg:w="48"/><text x="24.8614%" y="639.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (45 samples, 0.04%)</title><rect x="24.6141%" y="613" width="0.0406%" height="15" fill="rgb(206,32,51)" fg:x="27255" fg:w="45"/><text x="24.8641%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="24.6141%" y="597" width="0.0406%" height="15" fill="rgb(250,172,42)" fg:x="27255" fg:w="45"/><text x="24.8641%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (45 samples, 0.04%)</title><rect x="24.6141%" y="581" width="0.0406%" height="15" fill="rgb(209,34,43)" fg:x="27255" fg:w="45"/><text x="24.8641%" y="591.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.04%)</title><rect x="24.6178%" y="565" width="0.0370%" height="15" fill="rgb(223,11,35)" fg:x="27259" fg:w="41"/><text x="24.8678%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (138 samples, 0.12%)</title><rect x="25.0973%" y="421" width="0.1246%" height="15" fill="rgb(251,219,26)" fg:x="27790" fg:w="138"/><text x="25.3473%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (138 samples, 0.12%)</title><rect x="25.0973%" y="405" width="0.1246%" height="15" fill="rgb(231,119,3)" fg:x="27790" fg:w="138"/><text x="25.3473%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (138 samples, 0.12%)</title><rect x="25.0973%" y="389" width="0.1246%" height="15" fill="rgb(216,97,11)" fg:x="27790" fg:w="138"/><text x="25.3473%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (137 samples, 0.12%)</title><rect x="25.0982%" y="373" width="0.1237%" height="15" fill="rgb(223,59,9)" fg:x="27791" fg:w="137"/><text x="25.3482%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (137 samples, 0.12%)</title><rect x="25.0982%" y="357" width="0.1237%" height="15" fill="rgb(233,93,31)" fg:x="27791" fg:w="137"/><text x="25.3482%" y="367.50"></text></g><g><title>alloc::alloc::alloc (136 samples, 0.12%)</title><rect x="25.0991%" y="341" width="0.1228%" height="15" fill="rgb(239,81,33)" fg:x="27792" fg:w="136"/><text x="25.3491%" y="351.50"></text></g><g><title>__rg_alloc (136 samples, 0.12%)</title><rect x="25.0991%" y="325" width="0.1228%" height="15" fill="rgb(213,120,34)" fg:x="27792" fg:w="136"/><text x="25.3491%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (136 samples, 0.12%)</title><rect x="25.0991%" y="309" width="0.1228%" height="15" fill="rgb(243,49,53)" fg:x="27792" fg:w="136"/><text x="25.3491%" y="319.50"></text></g><g><title>sn_rust_alloc (129 samples, 0.12%)</title><rect x="25.1054%" y="293" width="0.1165%" height="15" fill="rgb(247,216,33)" fg:x="27799" fg:w="129"/><text x="25.3554%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="25.2003%" y="277" width="0.0217%" height="15" fill="rgb(226,26,14)" fg:x="27904" fg:w="24"/><text x="25.4503%" y="287.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (174 samples, 0.16%)</title><rect x="25.0838%" y="533" width="0.1571%" height="15" fill="rgb(215,49,53)" fg:x="27775" fg:w="174"/><text x="25.3338%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (169 samples, 0.15%)</title><rect x="25.0883%" y="517" width="0.1526%" height="15" fill="rgb(245,162,40)" fg:x="27780" fg:w="169"/><text x="25.3383%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (164 samples, 0.15%)</title><rect x="25.0928%" y="501" width="0.1481%" height="15" fill="rgb(229,68,17)" fg:x="27785" fg:w="164"/><text x="25.3428%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (159 samples, 0.14%)</title><rect x="25.0973%" y="485" width="0.1436%" height="15" fill="rgb(213,182,10)" fg:x="27790" fg:w="159"/><text x="25.3473%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (159 samples, 0.14%)</title><rect x="25.0973%" y="469" width="0.1436%" height="15" fill="rgb(245,125,30)" fg:x="27790" fg:w="159"/><text x="25.3473%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (159 samples, 0.14%)</title><rect x="25.0973%" y="453" width="0.1436%" height="15" fill="rgb(232,202,2)" fg:x="27790" fg:w="159"/><text x="25.3473%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (159 samples, 0.14%)</title><rect x="25.0973%" y="437" width="0.1436%" height="15" fill="rgb(237,140,51)" fg:x="27790" fg:w="159"/><text x="25.3473%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (21 samples, 0.02%)</title><rect x="25.2219%" y="421" width="0.0190%" height="15" fill="rgb(236,157,25)" fg:x="27928" fg:w="21"/><text x="25.4719%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="25.2219%" y="405" width="0.0190%" height="15" fill="rgb(219,209,0)" fg:x="27928" fg:w="21"/><text x="25.4719%" y="415.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="25.2265%" y="389" width="0.0144%" height="15" fill="rgb(240,116,54)" fg:x="27933" fg:w="16"/><text x="25.4765%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="25.2445%" y="517" width="0.0144%" height="15" fill="rgb(216,10,36)" fg:x="27953" fg:w="16"/><text x="25.4945%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="25.2472%" y="501" width="0.0117%" height="15" fill="rgb(222,72,44)" fg:x="27956" fg:w="13"/><text x="25.4972%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (60 samples, 0.05%)</title><rect x="25.2671%" y="325" width="0.0542%" height="15" fill="rgb(232,159,9)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (60 samples, 0.05%)</title><rect x="25.2671%" y="309" width="0.0542%" height="15" fill="rgb(210,39,32)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (60 samples, 0.05%)</title><rect x="25.2671%" y="293" width="0.0542%" height="15" fill="rgb(216,194,45)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (60 samples, 0.05%)</title><rect x="25.2671%" y="277" width="0.0542%" height="15" fill="rgb(218,18,35)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (60 samples, 0.05%)</title><rect x="25.2671%" y="261" width="0.0542%" height="15" fill="rgb(207,83,51)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="271.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.05%)</title><rect x="25.2671%" y="245" width="0.0542%" height="15" fill="rgb(225,63,43)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="255.50"></text></g><g><title>__rg_alloc (60 samples, 0.05%)</title><rect x="25.2671%" y="229" width="0.0542%" height="15" fill="rgb(207,57,36)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.05%)</title><rect x="25.2671%" y="213" width="0.0542%" height="15" fill="rgb(216,99,33)" fg:x="27978" fg:w="60"/><text x="25.5171%" y="223.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.05%)</title><rect x="25.2698%" y="197" width="0.0515%" height="15" fill="rgb(225,42,16)" fg:x="27981" fg:w="57"/><text x="25.5198%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="25.3068%" y="181" width="0.0144%" height="15" fill="rgb(220,201,45)" fg:x="28022" fg:w="16"/><text x="25.5568%" y="191.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (93 samples, 0.08%)</title><rect x="25.2635%" y="437" width="0.0840%" height="15" fill="rgb(225,33,4)" fg:x="27974" fg:w="93"/><text x="25.5135%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (93 samples, 0.08%)</title><rect x="25.2635%" y="421" width="0.0840%" height="15" fill="rgb(224,33,50)" fg:x="27974" fg:w="93"/><text x="25.5135%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (93 samples, 0.08%)</title><rect x="25.2635%" y="405" width="0.0840%" height="15" fill="rgb(246,198,51)" fg:x="27974" fg:w="93"/><text x="25.5135%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (89 samples, 0.08%)</title><rect x="25.2671%" y="389" width="0.0804%" height="15" fill="rgb(205,22,4)" fg:x="27978" fg:w="89"/><text x="25.5171%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (89 samples, 0.08%)</title><rect x="25.2671%" y="373" width="0.0804%" height="15" fill="rgb(206,3,8)" fg:x="27978" fg:w="89"/><text x="25.5171%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (89 samples, 0.08%)</title><rect x="25.2671%" y="357" width="0.0804%" height="15" fill="rgb(251,23,15)" fg:x="27978" fg:w="89"/><text x="25.5171%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (89 samples, 0.08%)</title><rect x="25.2671%" y="341" width="0.0804%" height="15" fill="rgb(252,88,28)" fg:x="27978" fg:w="89"/><text x="25.5171%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.03%)</title><rect x="25.3213%" y="325" width="0.0262%" height="15" fill="rgb(212,127,14)" fg:x="28038" fg:w="29"/><text x="25.5713%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.03%)</title><rect x="25.3213%" y="309" width="0.0262%" height="15" fill="rgb(247,145,37)" fg:x="28038" fg:w="29"/><text x="25.5713%" y="319.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="25.3231%" y="293" width="0.0244%" height="15" fill="rgb(209,117,53)" fg:x="28040" fg:w="27"/><text x="25.5731%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.04%)</title><rect x="25.3547%" y="389" width="0.0397%" height="15" fill="rgb(212,90,42)" fg:x="28075" fg:w="44"/><text x="25.6047%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.04%)</title><rect x="25.3547%" y="373" width="0.0397%" height="15" fill="rgb(218,164,37)" fg:x="28075" fg:w="44"/><text x="25.6047%" y="383.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="25.3565%" y="357" width="0.0379%" height="15" fill="rgb(246,65,34)" fg:x="28077" fg:w="42"/><text x="25.6065%" y="367.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="25.3565%" y="341" width="0.0379%" height="15" fill="rgb(231,100,33)" fg:x="28077" fg:w="42"/><text x="25.6065%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="25.3565%" y="325" width="0.0379%" height="15" fill="rgb(228,126,14)" fg:x="28077" fg:w="42"/><text x="25.6065%" y="335.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.04%)</title><rect x="25.3583%" y="309" width="0.0361%" height="15" fill="rgb(215,173,21)" fg:x="28079" fg:w="40"/><text x="25.6083%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="25.3773%" y="293" width="0.0172%" height="15" fill="rgb(210,6,40)" fg:x="28100" fg:w="19"/><text x="25.6273%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (48 samples, 0.04%)</title><rect x="25.3538%" y="437" width="0.0433%" height="15" fill="rgb(212,48,18)" fg:x="28074" fg:w="48"/><text x="25.6038%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="25.3547%" y="421" width="0.0424%" height="15" fill="rgb(230,214,11)" fg:x="28075" fg:w="47"/><text x="25.6047%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.04%)</title><rect x="25.3547%" y="405" width="0.0424%" height="15" fill="rgb(254,105,39)" fg:x="28075" fg:w="47"/><text x="25.6047%" y="415.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (648 samples, 0.59%)</title><rect x="24.8182%" y="549" width="0.5852%" height="15" fill="rgb(245,158,5)" fg:x="27481" fg:w="648"/><text x="25.0682%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (180 samples, 0.16%)</title><rect x="25.2409%" y="533" width="0.1626%" height="15" fill="rgb(249,208,11)" fg:x="27949" fg:w="180"/><text x="25.4909%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (160 samples, 0.14%)</title><rect x="25.2590%" y="517" width="0.1445%" height="15" fill="rgb(210,39,28)" fg:x="27969" fg:w="160"/><text x="25.5090%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (160 samples, 0.14%)</title><rect x="25.2590%" y="501" width="0.1445%" height="15" fill="rgb(211,56,53)" fg:x="27969" fg:w="160"/><text x="25.5090%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (160 samples, 0.14%)</title><rect x="25.2590%" y="485" width="0.1445%" height="15" fill="rgb(226,201,30)" fg:x="27969" fg:w="160"/><text x="25.5090%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (160 samples, 0.14%)</title><rect x="25.2590%" y="469" width="0.1445%" height="15" fill="rgb(239,101,34)" fg:x="27969" fg:w="160"/><text x="25.5090%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (160 samples, 0.14%)</title><rect x="25.2590%" y="453" width="0.1445%" height="15" fill="rgb(226,209,5)" fg:x="27969" fg:w="160"/><text x="25.5090%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (16 samples, 0.01%)</title><rect x="25.4351%" y="469" width="0.0144%" height="15" fill="rgb(250,105,47)" fg:x="28164" fg:w="16"/><text x="25.6851%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (52 samples, 0.05%)</title><rect x="25.4495%" y="453" width="0.0470%" height="15" fill="rgb(230,72,3)" fg:x="28180" fg:w="52"/><text x="25.6995%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (28 samples, 0.03%)</title><rect x="25.5091%" y="421" width="0.0253%" height="15" fill="rgb(232,218,39)" fg:x="28246" fg:w="28"/><text x="25.7591%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (28 samples, 0.03%)</title><rect x="25.5091%" y="405" width="0.0253%" height="15" fill="rgb(248,166,6)" fg:x="28246" fg:w="28"/><text x="25.7591%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="25.5118%" y="389" width="0.0226%" height="15" fill="rgb(247,89,20)" fg:x="28249" fg:w="25"/><text x="25.7618%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (25 samples, 0.02%)</title><rect x="25.5118%" y="373" width="0.0226%" height="15" fill="rgb(248,130,54)" fg:x="28249" fg:w="25"/><text x="25.7618%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (25 samples, 0.02%)</title><rect x="25.5118%" y="357" width="0.0226%" height="15" fill="rgb(234,196,4)" fg:x="28249" fg:w="25"/><text x="25.7618%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (14 samples, 0.01%)</title><rect x="25.5218%" y="341" width="0.0126%" height="15" fill="rgb(250,143,31)" fg:x="28260" fg:w="14"/><text x="25.7718%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (103 samples, 0.09%)</title><rect x="25.4495%" y="469" width="0.0930%" height="15" fill="rgb(211,110,34)" fg:x="28180" fg:w="103"/><text x="25.6995%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (51 samples, 0.05%)</title><rect x="25.4965%" y="453" width="0.0461%" height="15" fill="rgb(215,124,48)" fg:x="28232" fg:w="51"/><text x="25.7465%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (51 samples, 0.05%)</title><rect x="25.4965%" y="437" width="0.0461%" height="15" fill="rgb(216,46,13)" fg:x="28232" fg:w="51"/><text x="25.7465%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (342 samples, 0.31%)</title><rect x="25.4035%" y="549" width="0.3089%" height="15" fill="rgb(205,184,25)" fg:x="28129" fg:w="342"/><text x="25.6535%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (342 samples, 0.31%)</title><rect x="25.4035%" y="533" width="0.3089%" height="15" fill="rgb(228,1,10)" fg:x="28129" fg:w="342"/><text x="25.6535%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (324 samples, 0.29%)</title><rect x="25.4197%" y="517" width="0.2926%" height="15" fill="rgb(213,116,27)" fg:x="28147" fg:w="324"/><text x="25.6697%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (324 samples, 0.29%)</title><rect x="25.4197%" y="501" width="0.2926%" height="15" fill="rgb(241,95,50)" fg:x="28147" fg:w="324"/><text x="25.6697%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (324 samples, 0.29%)</title><rect x="25.4197%" y="485" width="0.2926%" height="15" fill="rgb(238,48,32)" fg:x="28147" fg:w="324"/><text x="25.6697%" y="495.50"></text></g><g><title>std::time::SystemTime::now (188 samples, 0.17%)</title><rect x="25.5425%" y="469" width="0.1698%" height="15" fill="rgb(235,113,49)" fg:x="28283" fg:w="188"/><text x="25.7925%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (188 samples, 0.17%)</title><rect x="25.5425%" y="453" width="0.1698%" height="15" fill="rgb(205,127,43)" fg:x="28283" fg:w="188"/><text x="25.7925%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (188 samples, 0.17%)</title><rect x="25.5425%" y="437" width="0.1698%" height="15" fill="rgb(250,162,2)" fg:x="28283" fg:w="188"/><text x="25.7925%" y="447.50"></text></g><g><title>__clock_gettime (159 samples, 0.14%)</title><rect x="25.5687%" y="421" width="0.1436%" height="15" fill="rgb(220,13,41)" fg:x="28312" fg:w="159"/><text x="25.8187%" y="431.50"></text></g><g><title>__vdso_clock_gettime (150 samples, 0.14%)</title><rect x="25.5769%" y="405" width="0.1355%" height="15" fill="rgb(249,221,25)" fg:x="28321" fg:w="150"/><text x="25.8269%" y="415.50"></text></g><g><title>[[vdso]] (129 samples, 0.12%)</title><rect x="25.5958%" y="389" width="0.1165%" height="15" fill="rgb(215,208,19)" fg:x="28342" fg:w="129"/><text x="25.8458%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (44 samples, 0.04%)</title><rect x="25.7277%" y="517" width="0.0397%" height="15" fill="rgb(236,175,2)" fg:x="28488" fg:w="44"/><text x="25.9777%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="25.7557%" y="501" width="0.0117%" height="15" fill="rgb(241,52,2)" fg:x="28519" fg:w="13"/><text x="26.0057%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (326 samples, 0.29%)</title><rect x="25.9309%" y="325" width="0.2944%" height="15" fill="rgb(248,140,14)" fg:x="28713" fg:w="326"/><text x="26.1809%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (514 samples, 0.46%)</title><rect x="25.7692%" y="469" width="0.4642%" height="15" fill="rgb(253,22,42)" fg:x="28534" fg:w="514"/><text x="26.0192%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (510 samples, 0.46%)</title><rect x="25.7728%" y="453" width="0.4606%" height="15" fill="rgb(234,61,47)" fg:x="28538" fg:w="510"/><text x="26.0228%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (510 samples, 0.46%)</title><rect x="25.7728%" y="437" width="0.4606%" height="15" fill="rgb(208,226,15)" fg:x="28538" fg:w="510"/><text x="26.0228%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (508 samples, 0.46%)</title><rect x="25.7746%" y="421" width="0.4588%" height="15" fill="rgb(217,221,4)" fg:x="28540" fg:w="508"/><text x="26.0246%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (508 samples, 0.46%)</title><rect x="25.7746%" y="405" width="0.4588%" height="15" fill="rgb(212,174,34)" fg:x="28540" fg:w="508"/><text x="26.0246%" y="415.50"></text></g><g><title>alloc::alloc::alloc (508 samples, 0.46%)</title><rect x="25.7746%" y="389" width="0.4588%" height="15" fill="rgb(253,83,4)" fg:x="28540" fg:w="508"/><text x="26.0246%" y="399.50"></text></g><g><title>__rg_alloc (508 samples, 0.46%)</title><rect x="25.7746%" y="373" width="0.4588%" height="15" fill="rgb(250,195,49)" fg:x="28540" fg:w="508"/><text x="26.0246%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (508 samples, 0.46%)</title><rect x="25.7746%" y="357" width="0.4588%" height="15" fill="rgb(241,192,25)" fg:x="28540" fg:w="508"/><text x="26.0246%" y="367.50"></text></g><g><title>sn_rust_alloc (505 samples, 0.46%)</title><rect x="25.7773%" y="341" width="0.4561%" height="15" fill="rgb(208,124,10)" fg:x="28543" fg:w="505"/><text x="26.0273%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (687 samples, 0.62%)</title><rect x="25.7277%" y="533" width="0.6204%" height="15" fill="rgb(222,33,0)" fg:x="28488" fg:w="687"/><text x="25.9777%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (643 samples, 0.58%)</title><rect x="25.7674%" y="517" width="0.5807%" height="15" fill="rgb(234,209,28)" fg:x="28532" fg:w="643"/><text x="26.0174%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (643 samples, 0.58%)</title><rect x="25.7674%" y="501" width="0.5807%" height="15" fill="rgb(224,11,23)" fg:x="28532" fg:w="643"/><text x="26.0174%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (643 samples, 0.58%)</title><rect x="25.7674%" y="485" width="0.5807%" height="15" fill="rgb(232,99,1)" fg:x="28532" fg:w="643"/><text x="26.0174%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (127 samples, 0.11%)</title><rect x="26.2334%" y="469" width="0.1147%" height="15" fill="rgb(237,95,45)" fg:x="29048" fg:w="127"/><text x="26.4834%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (127 samples, 0.11%)</title><rect x="26.2334%" y="453" width="0.1147%" height="15" fill="rgb(208,109,11)" fg:x="29048" fg:w="127"/><text x="26.4834%" y="463.50"></text></g><g><title>[libc-2.31.so] (127 samples, 0.11%)</title><rect x="26.2334%" y="437" width="0.1147%" height="15" fill="rgb(216,190,48)" fg:x="29048" fg:w="127"/><text x="26.4834%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,951 samples, 19.82%)</title><rect x="6.5249%" y="901" width="19.8241%" height="15" fill="rgb(251,171,36)" fg:x="7225" fg:w="21951"/><text x="6.7749%" y="911.50">&lt;core::future::from_generator::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (18,431 samples, 16.65%)</title><rect x="9.7039%" y="885" width="16.6451%" height="15" fill="rgb(230,62,22)" fg:x="10745" fg:w="18431"/><text x="9.9539%" y="895.50">tremor_runtime::connectors..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,876 samples, 1.69%)</title><rect x="24.6548%" y="869" width="1.6942%" height="15" fill="rgb(225,114,35)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="879.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,876 samples, 1.69%)</title><rect x="24.6548%" y="853" width="1.6942%" height="15" fill="rgb(215,118,42)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="863.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,876 samples, 1.69%)</title><rect x="24.6548%" y="837" width="1.6942%" height="15" fill="rgb(243,119,21)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,876 samples, 1.69%)</title><rect x="24.6548%" y="821" width="1.6942%" height="15" fill="rgb(252,177,53)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,876 samples, 1.69%)</title><rect x="24.6548%" y="805" width="1.6942%" height="15" fill="rgb(237,209,29)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="815.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,876 samples, 1.69%)</title><rect x="24.6548%" y="789" width="1.6942%" height="15" fill="rgb(212,65,23)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="799.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,876 samples, 1.69%)</title><rect x="24.6548%" y="773" width="1.6942%" height="15" fill="rgb(230,222,46)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="783.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,876 samples, 1.69%)</title><rect x="24.6548%" y="757" width="1.6942%" height="15" fill="rgb(215,135,32)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="767.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,876 samples, 1.69%)</title><rect x="24.6548%" y="741" width="1.6942%" height="15" fill="rgb(246,101,22)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,876 samples, 1.69%)</title><rect x="24.6548%" y="725" width="1.6942%" height="15" fill="rgb(206,107,13)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="735.50"></text></g><g><title>std::panic::catch_unwind (1,876 samples, 1.69%)</title><rect x="24.6548%" y="709" width="1.6942%" height="15" fill="rgb(250,100,44)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="719.50"></text></g><g><title>std::panicking::try (1,876 samples, 1.69%)</title><rect x="24.6548%" y="693" width="1.6942%" height="15" fill="rgb(231,147,38)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="703.50"></text></g><g><title>std::panicking::try::do_call (1,876 samples, 1.69%)</title><rect x="24.6548%" y="677" width="1.6942%" height="15" fill="rgb(229,8,40)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="687.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,876 samples, 1.69%)</title><rect x="24.6548%" y="661" width="1.6942%" height="15" fill="rgb(221,135,30)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,876 samples, 1.69%)</title><rect x="24.6548%" y="645" width="1.6942%" height="15" fill="rgb(249,193,18)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="655.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,876 samples, 1.69%)</title><rect x="24.6548%" y="629" width="1.6942%" height="15" fill="rgb(209,133,39)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="639.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,876 samples, 1.69%)</title><rect x="24.6548%" y="613" width="1.6942%" height="15" fill="rgb(232,100,14)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,876 samples, 1.69%)</title><rect x="24.6548%" y="597" width="1.6942%" height="15" fill="rgb(224,185,1)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,876 samples, 1.69%)</title><rect x="24.6548%" y="581" width="1.6942%" height="15" fill="rgb(223,139,8)" fg:x="27300" fg:w="1876"/><text x="24.9048%" y="591.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,820 samples, 1.64%)</title><rect x="24.7054%" y="565" width="1.6437%" height="15" fill="rgb(232,213,38)" fg:x="27356" fg:w="1820"/><text x="24.9554%" y="575.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (701 samples, 0.63%)</title><rect x="25.7159%" y="549" width="0.6331%" height="15" fill="rgb(207,94,22)" fg:x="28475" fg:w="701"/><text x="25.9659%" y="559.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="26.3490%" y="901" width="0.0117%" height="15" fill="rgb(219,183,54)" fg:x="29176" fg:w="13"/><text x="26.5990%" y="911.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="26.4222%" y="485" width="0.0307%" height="15" fill="rgb(216,185,54)" fg:x="29257" fg:w="34"/><text x="26.6722%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (49 samples, 0.04%)</title><rect x="26.4222%" y="549" width="0.0443%" height="15" fill="rgb(254,217,39)" fg:x="29257" fg:w="49"/><text x="26.6722%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.04%)</title><rect x="26.4222%" y="533" width="0.0443%" height="15" fill="rgb(240,178,23)" fg:x="29257" fg:w="49"/><text x="26.6722%" y="543.50"></text></g><g><title>__rg_dealloc (49 samples, 0.04%)</title><rect x="26.4222%" y="517" width="0.0443%" height="15" fill="rgb(218,11,47)" fg:x="29257" fg:w="49"/><text x="26.6722%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (49 samples, 0.04%)</title><rect x="26.4222%" y="501" width="0.0443%" height="15" fill="rgb(218,51,51)" fg:x="29257" fg:w="49"/><text x="26.6722%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (15 samples, 0.01%)</title><rect x="26.4529%" y="485" width="0.0135%" height="15" fill="rgb(238,126,27)" fg:x="29291" fg:w="15"/><text x="26.7029%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (51 samples, 0.05%)</title><rect x="26.4222%" y="581" width="0.0461%" height="15" fill="rgb(249,202,22)" fg:x="29257" fg:w="51"/><text x="26.6722%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (51 samples, 0.05%)</title><rect x="26.4222%" y="565" width="0.0461%" height="15" fill="rgb(254,195,49)" fg:x="29257" fg:w="51"/><text x="26.6722%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (55 samples, 0.05%)</title><rect x="26.4195%" y="661" width="0.0497%" height="15" fill="rgb(208,123,14)" fg:x="29254" fg:w="55"/><text x="26.6695%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (54 samples, 0.05%)</title><rect x="26.4204%" y="645" width="0.0488%" height="15" fill="rgb(224,200,8)" fg:x="29255" fg:w="54"/><text x="26.6704%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (54 samples, 0.05%)</title><rect x="26.4204%" y="629" width="0.0488%" height="15" fill="rgb(217,61,36)" fg:x="29255" fg:w="54"/><text x="26.6704%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (54 samples, 0.05%)</title><rect x="26.4204%" y="613" width="0.0488%" height="15" fill="rgb(206,35,45)" fg:x="29255" fg:w="54"/><text x="26.6704%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.05%)</title><rect x="26.4204%" y="597" width="0.0488%" height="15" fill="rgb(217,65,33)" fg:x="29255" fg:w="54"/><text x="26.6704%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (71 samples, 0.06%)</title><rect x="26.4140%" y="725" width="0.0641%" height="15" fill="rgb(222,158,48)" fg:x="29248" fg:w="71"/><text x="26.6640%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="26.4140%" y="709" width="0.0641%" height="15" fill="rgb(254,2,54)" fg:x="29248" fg:w="71"/><text x="26.6640%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="26.4140%" y="693" width="0.0641%" height="15" fill="rgb(250,143,38)" fg:x="29248" fg:w="71"/><text x="26.6640%" y="703.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (71 samples, 0.06%)</title><rect x="26.4140%" y="677" width="0.0641%" height="15" fill="rgb(248,25,0)" fg:x="29248" fg:w="71"/><text x="26.6640%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="26.4845%" y="597" width="0.0135%" height="15" fill="rgb(206,152,27)" fg:x="29326" fg:w="15"/><text x="26.7345%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="26.4845%" y="581" width="0.0135%" height="15" fill="rgb(240,77,30)" fg:x="29326" fg:w="15"/><text x="26.7345%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (15 samples, 0.01%)</title><rect x="26.4845%" y="565" width="0.0135%" height="15" fill="rgb(231,5,3)" fg:x="29326" fg:w="15"/><text x="26.7345%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (15 samples, 0.01%)</title><rect x="26.4845%" y="549" width="0.0135%" height="15" fill="rgb(207,226,32)" fg:x="29326" fg:w="15"/><text x="26.7345%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (15 samples, 0.01%)</title><rect x="26.4845%" y="533" width="0.0135%" height="15" fill="rgb(222,207,47)" fg:x="29326" fg:w="15"/><text x="26.7345%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (15 samples, 0.01%)</title><rect x="26.4845%" y="517" width="0.0135%" height="15" fill="rgb(229,115,45)" fg:x="29326" fg:w="15"/><text x="26.7345%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (21 samples, 0.02%)</title><rect x="26.4809%" y="693" width="0.0190%" height="15" fill="rgb(224,191,6)" fg:x="29322" fg:w="21"/><text x="26.7309%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (18 samples, 0.02%)</title><rect x="26.4836%" y="677" width="0.0163%" height="15" fill="rgb(230,227,24)" fg:x="29325" fg:w="18"/><text x="26.7336%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (18 samples, 0.02%)</title><rect x="26.4836%" y="661" width="0.0163%" height="15" fill="rgb(228,80,19)" fg:x="29325" fg:w="18"/><text x="26.7336%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (17 samples, 0.02%)</title><rect x="26.4845%" y="645" width="0.0154%" height="15" fill="rgb(247,229,0)" fg:x="29326" fg:w="17"/><text x="26.7345%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (17 samples, 0.02%)</title><rect x="26.4845%" y="629" width="0.0154%" height="15" fill="rgb(237,194,15)" fg:x="29326" fg:w="17"/><text x="26.7345%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (17 samples, 0.02%)</title><rect x="26.4845%" y="613" width="0.0154%" height="15" fill="rgb(219,203,20)" fg:x="29326" fg:w="17"/><text x="26.7345%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (123 samples, 0.11%)</title><rect x="26.5323%" y="677" width="0.1111%" height="15" fill="rgb(234,128,8)" fg:x="29379" fg:w="123"/><text x="26.7823%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (74 samples, 0.07%)</title><rect x="26.5766%" y="661" width="0.0668%" height="15" fill="rgb(248,202,8)" fg:x="29428" fg:w="74"/><text x="26.8266%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (74 samples, 0.07%)</title><rect x="26.5766%" y="645" width="0.0668%" height="15" fill="rgb(206,104,37)" fg:x="29428" fg:w="74"/><text x="26.8266%" y="655.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (54 samples, 0.05%)</title><rect x="26.5947%" y="629" width="0.0488%" height="15" fill="rgb(223,8,27)" fg:x="29448" fg:w="54"/><text x="26.8447%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (45 samples, 0.04%)</title><rect x="26.6028%" y="613" width="0.0406%" height="15" fill="rgb(216,217,28)" fg:x="29457" fg:w="45"/><text x="26.8528%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (26 samples, 0.02%)</title><rect x="26.6199%" y="597" width="0.0235%" height="15" fill="rgb(249,199,1)" fg:x="29476" fg:w="26"/><text x="26.8699%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (13 samples, 0.01%)</title><rect x="26.6317%" y="581" width="0.0117%" height="15" fill="rgb(240,85,17)" fg:x="29489" fg:w="13"/><text x="26.8817%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (13 samples, 0.01%)</title><rect x="26.6317%" y="565" width="0.0117%" height="15" fill="rgb(206,108,45)" fg:x="29489" fg:w="13"/><text x="26.8817%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (13 samples, 0.01%)</title><rect x="26.6317%" y="549" width="0.0117%" height="15" fill="rgb(245,210,41)" fg:x="29489" fg:w="13"/><text x="26.8817%" y="559.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (14 samples, 0.01%)</title><rect x="26.6606%" y="613" width="0.0126%" height="15" fill="rgb(206,13,37)" fg:x="29521" fg:w="14"/><text x="26.9106%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="26.6606%" y="597" width="0.0126%" height="15" fill="rgb(250,61,18)" fg:x="29521" fg:w="14"/><text x="26.9106%" y="607.50"></text></g><g><title>core::mem::swap (49 samples, 0.04%)</title><rect x="26.6895%" y="469" width="0.0443%" height="15" fill="rgb(235,172,48)" fg:x="29553" fg:w="49"/><text x="26.9395%" y="479.50"></text></g><g><title>core::mem::swap_simple (49 samples, 0.04%)</title><rect x="26.6895%" y="453" width="0.0443%" height="15" fill="rgb(249,201,17)" fg:x="29553" fg:w="49"/><text x="26.9395%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (76 samples, 0.07%)</title><rect x="26.7437%" y="437" width="0.0686%" height="15" fill="rgb(219,208,6)" fg:x="29613" fg:w="76"/><text x="26.9937%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (72 samples, 0.07%)</title><rect x="26.7473%" y="421" width="0.0650%" height="15" fill="rgb(248,31,23)" fg:x="29617" fg:w="72"/><text x="26.9973%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (72 samples, 0.07%)</title><rect x="26.7473%" y="405" width="0.0650%" height="15" fill="rgb(245,15,42)" fg:x="29617" fg:w="72"/><text x="26.9973%" y="415.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.07%)</title><rect x="26.7473%" y="389" width="0.0650%" height="15" fill="rgb(222,217,39)" fg:x="29617" fg:w="72"/><text x="26.9973%" y="399.50"></text></g><g><title>__rg_alloc (72 samples, 0.07%)</title><rect x="26.7473%" y="373" width="0.0650%" height="15" fill="rgb(210,219,27)" fg:x="29617" fg:w="72"/><text x="26.9973%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (72 samples, 0.07%)</title><rect x="26.7473%" y="357" width="0.0650%" height="15" fill="rgb(252,166,36)" fg:x="29617" fg:w="72"/><text x="26.9973%" y="367.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.06%)</title><rect x="26.7527%" y="341" width="0.0596%" height="15" fill="rgb(245,132,34)" fg:x="29623" fg:w="66"/><text x="27.0027%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (151 samples, 0.14%)</title><rect x="26.6805%" y="485" width="0.1364%" height="15" fill="rgb(236,54,3)" fg:x="29543" fg:w="151"/><text x="26.9305%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (91 samples, 0.08%)</title><rect x="26.7346%" y="469" width="0.0822%" height="15" fill="rgb(241,173,43)" fg:x="29603" fg:w="91"/><text x="26.9846%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (88 samples, 0.08%)</title><rect x="26.7373%" y="453" width="0.0795%" height="15" fill="rgb(215,190,9)" fg:x="29606" fg:w="88"/><text x="26.9873%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (178 samples, 0.16%)</title><rect x="26.6597%" y="629" width="0.1608%" height="15" fill="rgb(242,101,16)" fg:x="29520" fg:w="178"/><text x="26.9097%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (163 samples, 0.15%)</title><rect x="26.6732%" y="613" width="0.1472%" height="15" fill="rgb(223,190,21)" fg:x="29535" fg:w="163"/><text x="26.9232%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (163 samples, 0.15%)</title><rect x="26.6732%" y="597" width="0.1472%" height="15" fill="rgb(215,228,25)" fg:x="29535" fg:w="163"/><text x="26.9232%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (163 samples, 0.15%)</title><rect x="26.6732%" y="581" width="0.1472%" height="15" fill="rgb(225,36,22)" fg:x="29535" fg:w="163"/><text x="26.9232%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (163 samples, 0.15%)</title><rect x="26.6732%" y="565" width="0.1472%" height="15" fill="rgb(251,106,46)" fg:x="29535" fg:w="163"/><text x="26.9232%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (163 samples, 0.15%)</title><rect x="26.6732%" y="549" width="0.1472%" height="15" fill="rgb(208,90,1)" fg:x="29535" fg:w="163"/><text x="26.9232%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (163 samples, 0.15%)</title><rect x="26.6732%" y="533" width="0.1472%" height="15" fill="rgb(243,10,4)" fg:x="29535" fg:w="163"/><text x="26.9232%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (160 samples, 0.14%)</title><rect x="26.6759%" y="517" width="0.1445%" height="15" fill="rgb(212,137,27)" fg:x="29538" fg:w="160"/><text x="26.9259%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (157 samples, 0.14%)</title><rect x="26.6786%" y="501" width="0.1418%" height="15" fill="rgb(231,220,49)" fg:x="29541" fg:w="157"/><text x="26.9286%" y="511.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (492 samples, 0.44%)</title><rect x="26.3897%" y="757" width="0.4443%" height="15" fill="rgb(237,96,20)" fg:x="29221" fg:w="492"/><text x="26.6397%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (492 samples, 0.44%)</title><rect x="26.3897%" y="741" width="0.4443%" height="15" fill="rgb(239,229,30)" fg:x="29221" fg:w="492"/><text x="26.6397%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (392 samples, 0.35%)</title><rect x="26.4800%" y="725" width="0.3540%" height="15" fill="rgb(219,65,33)" fg:x="29321" fg:w="392"/><text x="26.7300%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (392 samples, 0.35%)</title><rect x="26.4800%" y="709" width="0.3540%" height="15" fill="rgb(243,134,7)" fg:x="29321" fg:w="392"/><text x="26.7300%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (370 samples, 0.33%)</title><rect x="26.4998%" y="693" width="0.3341%" height="15" fill="rgb(216,177,54)" fg:x="29343" fg:w="370"/><text x="26.7498%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (211 samples, 0.19%)</title><rect x="26.6434%" y="677" width="0.1906%" height="15" fill="rgb(211,160,20)" fg:x="29502" fg:w="211"/><text x="26.8934%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (193 samples, 0.17%)</title><rect x="26.6597%" y="661" width="0.1743%" height="15" fill="rgb(239,85,39)" fg:x="29520" fg:w="193"/><text x="26.9097%" y="671.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (193 samples, 0.17%)</title><rect x="26.6597%" y="645" width="0.1743%" height="15" fill="rgb(232,125,22)" fg:x="29520" fg:w="193"/><text x="26.9097%" y="655.50"></text></g><g><title>tremor_value::value::Value::Object (15 samples, 0.01%)</title><rect x="26.8204%" y="629" width="0.0135%" height="15" fill="rgb(244,57,34)" fg:x="29698" fg:w="15"/><text x="27.0704%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (578 samples, 0.52%)</title><rect x="26.3888%" y="789" width="0.5220%" height="15" fill="rgb(214,203,32)" fg:x="29220" fg:w="578"/><text x="26.6388%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (578 samples, 0.52%)</title><rect x="26.3888%" y="773" width="0.5220%" height="15" fill="rgb(207,58,43)" fg:x="29220" fg:w="578"/><text x="26.6388%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (85 samples, 0.08%)</title><rect x="26.8340%" y="757" width="0.0768%" height="15" fill="rgb(215,193,15)" fg:x="29713" fg:w="85"/><text x="27.0840%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (582 samples, 0.53%)</title><rect x="26.3888%" y="805" width="0.5256%" height="15" fill="rgb(232,15,44)" fg:x="29220" fg:w="582"/><text x="26.6388%" y="815.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (24 samples, 0.02%)</title><rect x="27.7127%" y="533" width="0.0217%" height="15" fill="rgb(212,3,48)" fg:x="30686" fg:w="24"/><text x="27.9627%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (24 samples, 0.02%)</title><rect x="27.7127%" y="517" width="0.0217%" height="15" fill="rgb(218,128,7)" fg:x="30686" fg:w="24"/><text x="27.9627%" y="527.50"></text></g><g><title>core::ptr::write (24 samples, 0.02%)</title><rect x="27.7127%" y="501" width="0.0217%" height="15" fill="rgb(226,216,39)" fg:x="30686" fg:w="24"/><text x="27.9627%" y="511.50"></text></g><g><title>core::mem::swap (206 samples, 0.19%)</title><rect x="27.7850%" y="469" width="0.1860%" height="15" fill="rgb(243,47,51)" fg:x="30766" fg:w="206"/><text x="28.0350%" y="479.50"></text></g><g><title>core::mem::swap_simple (206 samples, 0.19%)</title><rect x="27.7850%" y="453" width="0.1860%" height="15" fill="rgb(241,183,40)" fg:x="30766" fg:w="206"/><text x="28.0350%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (15 samples, 0.01%)</title><rect x="27.9909%" y="437" width="0.0135%" height="15" fill="rgb(231,217,32)" fg:x="30994" fg:w="15"/><text x="28.2409%" y="447.50"></text></g><g><title>core::intrinsics::write_bytes (15 samples, 0.01%)</title><rect x="27.9909%" y="421" width="0.0135%" height="15" fill="rgb(229,61,38)" fg:x="30994" fg:w="15"/><text x="28.2409%" y="431.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (15 samples, 0.01%)</title><rect x="28.0044%" y="421" width="0.0135%" height="15" fill="rgb(225,210,5)" fg:x="31009" fg:w="15"/><text x="28.2544%" y="431.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (35 samples, 0.03%)</title><rect x="28.0180%" y="421" width="0.0316%" height="15" fill="rgb(231,79,45)" fg:x="31024" fg:w="35"/><text x="28.2680%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (35 samples, 0.03%)</title><rect x="28.0180%" y="405" width="0.0316%" height="15" fill="rgb(224,100,7)" fg:x="31024" fg:w="35"/><text x="28.2680%" y="415.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.03%)</title><rect x="28.0180%" y="389" width="0.0316%" height="15" fill="rgb(241,198,18)" fg:x="31024" fg:w="35"/><text x="28.2680%" y="399.50"></text></g><g><title>__rg_alloc (35 samples, 0.03%)</title><rect x="28.0180%" y="373" width="0.0316%" height="15" fill="rgb(252,97,53)" fg:x="31024" fg:w="35"/><text x="28.2680%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.03%)</title><rect x="28.0180%" y="357" width="0.0316%" height="15" fill="rgb(220,88,7)" fg:x="31024" fg:w="35"/><text x="28.2680%" y="367.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="28.0180%" y="341" width="0.0316%" height="15" fill="rgb(213,176,14)" fg:x="31024" fg:w="35"/><text x="28.2680%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (54 samples, 0.05%)</title><rect x="28.0044%" y="437" width="0.0488%" height="15" fill="rgb(246,73,7)" fg:x="31009" fg:w="54"/><text x="28.2544%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (92 samples, 0.08%)</title><rect x="27.9719%" y="469" width="0.0831%" height="15" fill="rgb(245,64,36)" fg:x="30973" fg:w="92"/><text x="28.2219%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (86 samples, 0.08%)</title><rect x="27.9773%" y="453" width="0.0777%" height="15" fill="rgb(245,80,10)" fg:x="30979" fg:w="86"/><text x="28.2273%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (316 samples, 0.29%)</title><rect x="27.7714%" y="485" width="0.2854%" height="15" fill="rgb(232,107,50)" fg:x="30751" fg:w="316"/><text x="28.0214%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (359 samples, 0.32%)</title><rect x="27.7407%" y="533" width="0.3242%" height="15" fill="rgb(253,3,0)" fg:x="30717" fg:w="359"/><text x="27.9907%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (346 samples, 0.31%)</title><rect x="27.7524%" y="517" width="0.3125%" height="15" fill="rgb(212,99,53)" fg:x="30730" fg:w="346"/><text x="28.0024%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (334 samples, 0.30%)</title><rect x="27.7633%" y="501" width="0.3016%" height="15" fill="rgb(249,111,54)" fg:x="30742" fg:w="334"/><text x="28.0133%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (18 samples, 0.02%)</title><rect x="28.0911%" y="517" width="0.0163%" height="15" fill="rgb(249,55,30)" fg:x="31105" fg:w="18"/><text x="28.3411%" y="527.50"></text></g><g><title>hashbrown::raw::inner::is_full (17 samples, 0.02%)</title><rect x="28.1173%" y="517" width="0.0154%" height="15" fill="rgb(237,47,42)" fg:x="31134" fg:w="17"/><text x="28.3673%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (12 samples, 0.01%)</title><rect x="28.1326%" y="517" width="0.0108%" height="15" fill="rgb(211,20,18)" fg:x="31151" fg:w="12"/><text x="28.3826%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.01%)</title><rect x="28.1326%" y="501" width="0.0108%" height="15" fill="rgb(231,203,46)" fg:x="31151" fg:w="12"/><text x="28.3826%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="28.1326%" y="485" width="0.0108%" height="15" fill="rgb(237,142,3)" fg:x="31151" fg:w="12"/><text x="28.3826%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (104 samples, 0.09%)</title><rect x="28.0649%" y="533" width="0.0939%" height="15" fill="rgb(241,107,1)" fg:x="31076" fg:w="104"/><text x="28.3149%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (17 samples, 0.02%)</title><rect x="28.1435%" y="517" width="0.0154%" height="15" fill="rgb(229,83,13)" fg:x="31163" fg:w="17"/><text x="28.3935%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.02%)</title><rect x="28.1435%" y="501" width="0.0154%" height="15" fill="rgb(241,91,40)" fg:x="31163" fg:w="17"/><text x="28.3935%" y="511.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (875 samples, 0.79%)</title><rect x="27.3813%" y="581" width="0.7902%" height="15" fill="rgb(225,3,45)" fg:x="30319" fg:w="875"/><text x="27.6313%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (686 samples, 0.62%)</title><rect x="27.5520%" y="565" width="0.6195%" height="15" fill="rgb(244,223,14)" fg:x="30508" fg:w="686"/><text x="27.8020%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (526 samples, 0.48%)</title><rect x="27.6964%" y="549" width="0.4750%" height="15" fill="rgb(224,124,37)" fg:x="30668" fg:w="526"/><text x="27.9464%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (14 samples, 0.01%)</title><rect x="28.1588%" y="533" width="0.0126%" height="15" fill="rgb(251,171,30)" fg:x="31180" fg:w="14"/><text x="28.4088%" y="543.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (14 samples, 0.01%)</title><rect x="28.2275%" y="469" width="0.0126%" height="15" fill="rgb(236,46,54)" fg:x="31256" fg:w="14"/><text x="28.4775%" y="479.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (14 samples, 0.01%)</title><rect x="28.2275%" y="453" width="0.0126%" height="15" fill="rgb(245,213,5)" fg:x="31256" fg:w="14"/><text x="28.4775%" y="463.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (14 samples, 0.01%)</title><rect x="28.2275%" y="437" width="0.0126%" height="15" fill="rgb(230,144,27)" fg:x="31256" fg:w="14"/><text x="28.4775%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (14 samples, 0.01%)</title><rect x="28.2275%" y="421" width="0.0126%" height="15" fill="rgb(220,86,6)" fg:x="31256" fg:w="14"/><text x="28.4775%" y="431.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (14 samples, 0.01%)</title><rect x="28.2275%" y="405" width="0.0126%" height="15" fill="rgb(240,20,13)" fg:x="31256" fg:w="14"/><text x="28.4775%" y="415.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (17 samples, 0.02%)</title><rect x="28.2464%" y="469" width="0.0154%" height="15" fill="rgb(217,89,34)" fg:x="31277" fg:w="17"/><text x="28.4964%" y="479.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (71 samples, 0.06%)</title><rect x="28.2013%" y="517" width="0.0641%" height="15" fill="rgb(229,13,5)" fg:x="31227" fg:w="71"/><text x="28.4513%" y="527.50"></text></g><g><title>fxhash::write (71 samples, 0.06%)</title><rect x="28.2013%" y="501" width="0.0641%" height="15" fill="rgb(244,67,35)" fg:x="31227" fg:w="71"/><text x="28.4513%" y="511.50"></text></g><g><title>fxhash::write64 (71 samples, 0.06%)</title><rect x="28.2013%" y="485" width="0.0641%" height="15" fill="rgb(221,40,2)" fg:x="31227" fg:w="71"/><text x="28.4513%" y="495.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,506 samples, 1.36%)</title><rect x="26.9144%" y="677" width="1.3601%" height="15" fill="rgb(237,157,21)" fg:x="29802" fg:w="1506"/><text x="27.1644%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,506 samples, 1.36%)</title><rect x="26.9144%" y="661" width="1.3601%" height="15" fill="rgb(222,94,11)" fg:x="29802" fg:w="1506"/><text x="27.1644%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,505 samples, 1.36%)</title><rect x="26.9153%" y="645" width="1.3592%" height="15" fill="rgb(249,113,6)" fg:x="29803" fg:w="1505"/><text x="27.1653%" y="655.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,368 samples, 1.24%)</title><rect x="27.0390%" y="629" width="1.2354%" height="15" fill="rgb(238,137,36)" fg:x="29940" fg:w="1368"/><text x="27.2890%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,279 samples, 1.16%)</title><rect x="27.1194%" y="613" width="1.1551%" height="15" fill="rgb(210,102,26)" fg:x="30029" fg:w="1279"/><text x="27.3694%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,117 samples, 1.01%)</title><rect x="27.2657%" y="597" width="1.0088%" height="15" fill="rgb(218,30,30)" fg:x="30191" fg:w="1117"/><text x="27.5157%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (114 samples, 0.10%)</title><rect x="28.1715%" y="581" width="0.1030%" height="15" fill="rgb(214,67,26)" fg:x="31194" fg:w="114"/><text x="28.4215%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (107 samples, 0.10%)</title><rect x="28.1778%" y="565" width="0.0966%" height="15" fill="rgb(251,9,53)" fg:x="31201" fg:w="107"/><text x="28.4278%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (107 samples, 0.10%)</title><rect x="28.1778%" y="549" width="0.0966%" height="15" fill="rgb(228,204,25)" fg:x="31201" fg:w="107"/><text x="28.4278%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (92 samples, 0.08%)</title><rect x="28.1914%" y="533" width="0.0831%" height="15" fill="rgb(207,153,8)" fg:x="31216" fg:w="92"/><text x="28.4414%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="28.4533%" y="453" width="0.0217%" height="15" fill="rgb(242,9,16)" fg:x="31506" fg:w="24"/><text x="28.7033%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (197 samples, 0.18%)</title><rect x="28.3042%" y="613" width="0.1779%" height="15" fill="rgb(217,211,10)" fg:x="31341" fg:w="197"/><text x="28.5542%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (197 samples, 0.18%)</title><rect x="28.3042%" y="597" width="0.1779%" height="15" fill="rgb(219,228,52)" fg:x="31341" fg:w="197"/><text x="28.5542%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (175 samples, 0.16%)</title><rect x="28.3241%" y="581" width="0.1580%" height="15" fill="rgb(231,92,29)" fg:x="31363" fg:w="175"/><text x="28.5741%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (155 samples, 0.14%)</title><rect x="28.3422%" y="565" width="0.1400%" height="15" fill="rgb(232,8,23)" fg:x="31383" fg:w="155"/><text x="28.5922%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (152 samples, 0.14%)</title><rect x="28.3449%" y="549" width="0.1373%" height="15" fill="rgb(216,211,34)" fg:x="31386" fg:w="152"/><text x="28.5949%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (152 samples, 0.14%)</title><rect x="28.3449%" y="533" width="0.1373%" height="15" fill="rgb(236,151,0)" fg:x="31386" fg:w="152"/><text x="28.5949%" y="543.50"></text></g><g><title>alloc::alloc::alloc (152 samples, 0.14%)</title><rect x="28.3449%" y="517" width="0.1373%" height="15" fill="rgb(209,168,3)" fg:x="31386" fg:w="152"/><text x="28.5949%" y="527.50"></text></g><g><title>__rg_alloc (152 samples, 0.14%)</title><rect x="28.3449%" y="501" width="0.1373%" height="15" fill="rgb(208,129,28)" fg:x="31386" fg:w="152"/><text x="28.5949%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (152 samples, 0.14%)</title><rect x="28.3449%" y="485" width="0.1373%" height="15" fill="rgb(229,78,22)" fg:x="31386" fg:w="152"/><text x="28.5949%" y="495.50"></text></g><g><title>sn_rust_alloc (147 samples, 0.13%)</title><rect x="28.3494%" y="469" width="0.1328%" height="15" fill="rgb(228,187,13)" fg:x="31391" fg:w="147"/><text x="28.5994%" y="479.50"></text></g><g><title>core::mem::swap (696 samples, 0.63%)</title><rect x="28.6095%" y="469" width="0.6286%" height="15" fill="rgb(240,119,24)" fg:x="31679" fg:w="696"/><text x="28.8595%" y="479.50"></text></g><g><title>core::mem::swap_simple (696 samples, 0.63%)</title><rect x="28.6095%" y="453" width="0.6286%" height="15" fill="rgb(209,194,42)" fg:x="31679" fg:w="696"/><text x="28.8595%" y="463.50"></text></g><g><title>core::ptr::read (26 samples, 0.02%)</title><rect x="29.2146%" y="437" width="0.0235%" height="15" fill="rgb(247,200,46)" fg:x="32349" fg:w="26"/><text x="29.4646%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.02%)</title><rect x="29.2516%" y="453" width="0.0154%" height="15" fill="rgb(218,76,16)" fg:x="32390" fg:w="17"/><text x="29.5016%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (74 samples, 0.07%)</title><rect x="29.3148%" y="437" width="0.0668%" height="15" fill="rgb(225,21,48)" fg:x="32460" fg:w="74"/><text x="29.5648%" y="447.50"></text></g><g><title>core::intrinsics::write_bytes (74 samples, 0.07%)</title><rect x="29.3148%" y="421" width="0.0668%" height="15" fill="rgb(239,223,50)" fg:x="32460" fg:w="74"/><text x="29.5648%" y="431.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="29.3347%" y="405" width="0.0470%" height="15" fill="rgb(244,45,21)" fg:x="32482" fg:w="52"/><text x="29.5847%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (19 samples, 0.02%)</title><rect x="29.4069%" y="405" width="0.0172%" height="15" fill="rgb(232,33,43)" fg:x="32562" fg:w="19"/><text x="29.6569%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (19 samples, 0.02%)</title><rect x="29.4069%" y="389" width="0.0172%" height="15" fill="rgb(209,8,3)" fg:x="32562" fg:w="19"/><text x="29.6569%" y="399.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (48 samples, 0.04%)</title><rect x="29.3925%" y="421" width="0.0433%" height="15" fill="rgb(214,25,53)" fg:x="32546" fg:w="48"/><text x="29.6425%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (13 samples, 0.01%)</title><rect x="29.4241%" y="405" width="0.0117%" height="15" fill="rgb(254,186,54)" fg:x="32581" fg:w="13"/><text x="29.6741%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (13 samples, 0.01%)</title><rect x="29.4241%" y="389" width="0.0117%" height="15" fill="rgb(208,174,49)" fg:x="32581" fg:w="13"/><text x="29.6741%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (788 samples, 0.71%)</title><rect x="29.9443%" y="325" width="0.7116%" height="15" fill="rgb(233,191,51)" fg:x="33157" fg:w="788"/><text x="30.1943%" y="335.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,473 samples, 1.33%)</title><rect x="29.4358%" y="421" width="1.3303%" height="15" fill="rgb(222,134,10)" fg:x="32594" fg:w="1473"/><text x="29.6858%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,473 samples, 1.33%)</title><rect x="29.4358%" y="405" width="1.3303%" height="15" fill="rgb(230,226,20)" fg:x="32594" fg:w="1473"/><text x="29.6858%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1,473 samples, 1.33%)</title><rect x="29.4358%" y="389" width="1.3303%" height="15" fill="rgb(251,111,25)" fg:x="32594" fg:w="1473"/><text x="29.6858%" y="399.50"></text></g><g><title>__rg_alloc (1,473 samples, 1.33%)</title><rect x="29.4358%" y="373" width="1.3303%" height="15" fill="rgb(224,40,46)" fg:x="32594" fg:w="1473"/><text x="29.6858%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,473 samples, 1.33%)</title><rect x="29.4358%" y="357" width="1.3303%" height="15" fill="rgb(236,108,47)" fg:x="32594" fg:w="1473"/><text x="29.6858%" y="367.50"></text></g><g><title>sn_rust_alloc (1,399 samples, 1.26%)</title><rect x="29.5027%" y="341" width="1.2634%" height="15" fill="rgb(234,93,0)" fg:x="32668" fg:w="1399"/><text x="29.7527%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (122 samples, 0.11%)</title><rect x="30.6559%" y="325" width="0.1102%" height="15" fill="rgb(224,213,32)" fg:x="33945" fg:w="122"/><text x="30.9059%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,548 samples, 1.40%)</title><rect x="29.3816%" y="437" width="1.3980%" height="15" fill="rgb(251,11,48)" fg:x="32534" fg:w="1548"/><text x="29.6316%" y="447.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (15 samples, 0.01%)</title><rect x="30.7661%" y="421" width="0.0135%" height="15" fill="rgb(236,173,5)" fg:x="34067" fg:w="15"/><text x="31.0161%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,795 samples, 1.62%)</title><rect x="29.2453%" y="469" width="1.6211%" height="15" fill="rgb(230,95,12)" fg:x="32383" fg:w="1795"/><text x="29.4953%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,771 samples, 1.60%)</title><rect x="29.2669%" y="453" width="1.5994%" height="15" fill="rgb(232,209,1)" fg:x="32407" fg:w="1771"/><text x="29.5169%" y="463.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (96 samples, 0.09%)</title><rect x="30.7797%" y="437" width="0.0867%" height="15" fill="rgb(232,6,1)" fg:x="34082" fg:w="96"/><text x="31.0297%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (55 samples, 0.05%)</title><rect x="30.8167%" y="421" width="0.0497%" height="15" fill="rgb(210,224,50)" fg:x="34123" fg:w="55"/><text x="31.0667%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (55 samples, 0.05%)</title><rect x="30.8167%" y="405" width="0.0497%" height="15" fill="rgb(228,127,35)" fg:x="34123" fg:w="55"/><text x="31.0667%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,585 samples, 2.33%)</title><rect x="28.5490%" y="485" width="2.3345%" height="15" fill="rgb(245,102,45)" fg:x="31612" fg:w="2585"/><text x="28.7990%" y="495.50">h..</text></g><g><title>hashbrown::raw::inner::is_full (19 samples, 0.02%)</title><rect x="30.8663%" y="469" width="0.0172%" height="15" fill="rgb(214,1,49)" fg:x="34178" fg:w="19"/><text x="31.1163%" y="479.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,416 samples, 3.99%)</title><rect x="26.9144%" y="757" width="3.9881%" height="15" fill="rgb(226,163,40)" fg:x="29802" fg:w="4416"/><text x="27.1644%" y="767.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,416 samples, 3.99%)</title><rect x="26.9144%" y="741" width="3.9881%" height="15" fill="rgb(239,212,28)" fg:x="29802" fg:w="4416"/><text x="27.1644%" y="751.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,416 samples, 3.99%)</title><rect x="26.9144%" y="725" width="3.9881%" height="15" fill="rgb(220,20,13)" fg:x="29802" fg:w="4416"/><text x="27.1644%" y="735.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,416 samples, 3.99%)</title><rect x="26.9144%" y="709" width="3.9881%" height="15" fill="rgb(210,164,35)" fg:x="29802" fg:w="4416"/><text x="27.1644%" y="719.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,416 samples, 3.99%)</title><rect x="26.9144%" y="693" width="3.9881%" height="15" fill="rgb(248,109,41)" fg:x="29802" fg:w="4416"/><text x="27.1644%" y="703.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,910 samples, 2.63%)</title><rect x="28.2744%" y="677" width="2.6280%" height="15" fill="rgb(238,23,50)" fg:x="31308" fg:w="2910"/><text x="28.5244%" y="687.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,910 samples, 2.63%)</title><rect x="28.2744%" y="661" width="2.6280%" height="15" fill="rgb(211,48,49)" fg:x="31308" fg:w="2910"/><text x="28.5244%" y="671.50">tr..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,910 samples, 2.63%)</title><rect x="28.2744%" y="645" width="2.6280%" height="15" fill="rgb(223,36,21)" fg:x="31308" fg:w="2910"/><text x="28.5244%" y="655.50">&lt;t..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,910 samples, 2.63%)</title><rect x="28.2744%" y="629" width="2.6280%" height="15" fill="rgb(207,123,46)" fg:x="31308" fg:w="2910"/><text x="28.5244%" y="639.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,680 samples, 2.42%)</title><rect x="28.4822%" y="613" width="2.4203%" height="15" fill="rgb(240,218,32)" fg:x="31538" fg:w="2680"/><text x="28.7322%" y="623.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,680 samples, 2.42%)</title><rect x="28.4822%" y="597" width="2.4203%" height="15" fill="rgb(252,5,43)" fg:x="31538" fg:w="2680"/><text x="28.7322%" y="607.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,674 samples, 2.41%)</title><rect x="28.4876%" y="581" width="2.4149%" height="15" fill="rgb(252,84,19)" fg:x="31544" fg:w="2674"/><text x="28.7376%" y="591.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,674 samples, 2.41%)</title><rect x="28.4876%" y="565" width="2.4149%" height="15" fill="rgb(243,152,39)" fg:x="31544" fg:w="2674"/><text x="28.7376%" y="575.50">ab..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,674 samples, 2.41%)</title><rect x="28.4876%" y="549" width="2.4149%" height="15" fill="rgb(234,160,15)" fg:x="31544" fg:w="2674"/><text x="28.7376%" y="559.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,674 samples, 2.41%)</title><rect x="28.4876%" y="533" width="2.4149%" height="15" fill="rgb(237,34,20)" fg:x="31544" fg:w="2674"/><text x="28.7376%" y="543.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,662 samples, 2.40%)</title><rect x="28.4984%" y="517" width="2.4041%" height="15" fill="rgb(229,97,13)" fg:x="31556" fg:w="2662"/><text x="28.7484%" y="527.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,637 samples, 2.38%)</title><rect x="28.5210%" y="501" width="2.3815%" height="15" fill="rgb(234,71,50)" fg:x="31581" fg:w="2637"/><text x="28.7710%" y="511.50">ha..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (21 samples, 0.02%)</title><rect x="30.8835%" y="485" width="0.0190%" height="15" fill="rgb(253,155,4)" fg:x="34197" fg:w="21"/><text x="31.1335%" y="495.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (5,088 samples, 4.60%)</title><rect x="26.3824%" y="901" width="4.5950%" height="15" fill="rgb(222,185,37)" fg:x="29213" fg:w="5088"/><text x="26.6324%" y="911.50">&lt;trem..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (5,081 samples, 4.59%)</title><rect x="26.3888%" y="885" width="4.5887%" height="15" fill="rgb(251,177,13)" fg:x="29220" fg:w="5081"/><text x="26.6388%" y="895.50">tremo..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (5,081 samples, 4.59%)</title><rect x="26.3888%" y="869" width="4.5887%" height="15" fill="rgb(250,179,40)" fg:x="29220" fg:w="5081"/><text x="26.6388%" y="879.50">&lt;trem..</text></g><g><title>tremor_script::script::Script::run (5,081 samples, 4.59%)</title><rect x="26.3888%" y="853" width="4.5887%" height="15" fill="rgb(242,44,2)" fg:x="29220" fg:w="5081"/><text x="26.6388%" y="863.50">tremo..</text></g><g><title>tremor_script::ast::Script::run (5,081 samples, 4.59%)</title><rect x="26.3888%" y="837" width="4.5887%" height="15" fill="rgb(216,177,13)" fg:x="29220" fg:w="5081"/><text x="26.6388%" y="847.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,081 samples, 4.59%)</title><rect x="26.3888%" y="821" width="4.5887%" height="15" fill="rgb(216,106,43)" fg:x="29220" fg:w="5081"/><text x="26.6388%" y="831.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,499 samples, 4.06%)</title><rect x="26.9144%" y="805" width="4.0631%" height="15" fill="rgb(216,183,2)" fg:x="29802" fg:w="4499"/><text x="27.1644%" y="815.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,499 samples, 4.06%)</title><rect x="26.9144%" y="789" width="4.0631%" height="15" fill="rgb(249,75,3)" fg:x="29802" fg:w="4499"/><text x="27.1644%" y="799.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,499 samples, 4.06%)</title><rect x="26.9144%" y="773" width="4.0631%" height="15" fill="rgb(219,67,39)" fg:x="29802" fg:w="4499"/><text x="27.1644%" y="783.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (83 samples, 0.07%)</title><rect x="30.9025%" y="757" width="0.0750%" height="15" fill="rgb(253,228,2)" fg:x="34218" fg:w="83"/><text x="31.1525%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (83 samples, 0.07%)</title><rect x="30.9025%" y="741" width="0.0750%" height="15" fill="rgb(235,138,27)" fg:x="34218" fg:w="83"/><text x="31.1525%" y="751.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (13 samples, 0.01%)</title><rect x="30.9801%" y="901" width="0.0117%" height="15" fill="rgb(236,97,51)" fg:x="34304" fg:w="13"/><text x="31.2301%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="31.0000%" y="901" width="0.0235%" height="15" fill="rgb(240,80,30)" fg:x="34326" fg:w="26"/><text x="31.2500%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.02%)</title><rect x="31.0081%" y="885" width="0.0154%" height="15" fill="rgb(230,178,19)" fg:x="34335" fg:w="17"/><text x="31.2581%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.01%)</title><rect x="31.0090%" y="869" width="0.0144%" height="15" fill="rgb(210,190,27)" fg:x="34336" fg:w="16"/><text x="31.2590%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="31.0235%" y="901" width="0.0163%" height="15" fill="rgb(222,107,31)" fg:x="34352" fg:w="18"/><text x="31.2735%" y="911.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.09%)</title><rect x="31.0397%" y="901" width="0.0921%" height="15" fill="rgb(216,127,34)" fg:x="34370" fg:w="102"/><text x="31.2897%" y="911.50"></text></g><g><title>__clock_gettime (36 samples, 0.03%)</title><rect x="31.1364%" y="901" width="0.0325%" height="15" fill="rgb(234,116,52)" fg:x="34477" fg:w="36"/><text x="31.3864%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (22 samples, 0.02%)</title><rect x="31.1806%" y="901" width="0.0199%" height="15" fill="rgb(222,124,15)" fg:x="34526" fg:w="22"/><text x="31.4306%" y="911.50"></text></g><g><title>abi_stable::erased_types::iterator::next (34 samples, 0.03%)</title><rect x="31.2005%" y="901" width="0.0307%" height="15" fill="rgb(231,179,28)" fg:x="34548" fg:w="34"/><text x="31.4505%" y="911.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (16 samples, 0.01%)</title><rect x="31.2321%" y="901" width="0.0144%" height="15" fill="rgb(226,93,45)" fg:x="34583" fg:w="16"/><text x="31.4821%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (36 samples, 0.03%)</title><rect x="31.2673%" y="901" width="0.0325%" height="15" fill="rgb(215,8,51)" fg:x="34622" fg:w="36"/><text x="31.5173%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (36 samples, 0.03%)</title><rect x="31.2998%" y="901" width="0.0325%" height="15" fill="rgb(223,106,5)" fg:x="34658" fg:w="36"/><text x="31.5498%" y="911.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (16 samples, 0.01%)</title><rect x="31.3522%" y="901" width="0.0144%" height="15" fill="rgb(250,191,5)" fg:x="34716" fg:w="16"/><text x="31.6022%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (49 samples, 0.04%)</title><rect x="31.3721%" y="901" width="0.0443%" height="15" fill="rgb(242,132,44)" fg:x="34738" fg:w="49"/><text x="31.6221%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (26 samples, 0.02%)</title><rect x="31.4163%" y="901" width="0.0235%" height="15" fill="rgb(251,152,29)" fg:x="34787" fg:w="26"/><text x="31.6663%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="31.4263%" y="885" width="0.0135%" height="15" fill="rgb(218,179,5)" fg:x="34798" fg:w="15"/><text x="31.6763%" y="895.50"></text></g><g><title>core::mem::drop (15 samples, 0.01%)</title><rect x="31.4263%" y="869" width="0.0135%" height="15" fill="rgb(227,67,19)" fg:x="34798" fg:w="15"/><text x="31.6763%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="31.4263%" y="853" width="0.0135%" height="15" fill="rgb(233,119,31)" fg:x="34798" fg:w="15"/><text x="31.6763%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="31.4263%" y="837" width="0.0135%" height="15" fill="rgb(241,120,22)" fg:x="34798" fg:w="15"/><text x="31.6763%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (15 samples, 0.01%)</title><rect x="31.4263%" y="821" width="0.0135%" height="15" fill="rgb(224,102,30)" fg:x="34798" fg:w="15"/><text x="31.6763%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="31.4263%" y="805" width="0.0135%" height="15" fill="rgb(210,164,37)" fg:x="34798" fg:w="15"/><text x="31.6763%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="31.4263%" y="789" width="0.0135%" height="15" fill="rgb(226,191,16)" fg:x="34798" fg:w="15"/><text x="31.6763%" y="799.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="31.4597%" y="901" width="0.0190%" height="15" fill="rgb(214,40,45)" fg:x="34835" fg:w="21"/><text x="31.7097%" y="911.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.10%)</title><rect x="31.6692%" y="533" width="0.1002%" height="15" fill="rgb(244,29,26)" fg:x="35067" fg:w="111"/><text x="31.9192%" y="543.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="32.0007%" y="469" width="0.0226%" height="15" fill="rgb(216,16,5)" fg:x="35434" fg:w="25"/><text x="32.2507%" y="479.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="32.0097%" y="453" width="0.0135%" height="15" fill="rgb(249,76,35)" fg:x="35444" fg:w="15"/><text x="32.2597%" y="463.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (12 samples, 0.01%)</title><rect x="32.0124%" y="437" width="0.0108%" height="15" fill="rgb(207,11,44)" fg:x="35447" fg:w="12"/><text x="32.2624%" y="447.50"></text></g><g><title>abi_stable::std_types::utypeid::UTypeId::new (12 samples, 0.01%)</title><rect x="32.0124%" y="421" width="0.0108%" height="15" fill="rgb(228,190,49)" fg:x="35447" fg:w="12"/><text x="32.2624%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (78 samples, 0.07%)</title><rect x="31.9898%" y="517" width="0.0704%" height="15" fill="rgb(214,173,12)" fg:x="35422" fg:w="78"/><text x="32.2398%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (76 samples, 0.07%)</title><rect x="31.9916%" y="501" width="0.0686%" height="15" fill="rgb(218,26,35)" fg:x="35424" fg:w="76"/><text x="32.2416%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (71 samples, 0.06%)</title><rect x="31.9961%" y="485" width="0.0641%" height="15" fill="rgb(220,200,19)" fg:x="35429" fg:w="71"/><text x="32.2461%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (41 samples, 0.04%)</title><rect x="32.0232%" y="469" width="0.0370%" height="15" fill="rgb(239,95,49)" fg:x="35459" fg:w="41"/><text x="32.2732%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (41 samples, 0.04%)</title><rect x="32.0232%" y="453" width="0.0370%" height="15" fill="rgb(235,85,53)" fg:x="35459" fg:w="41"/><text x="32.2732%" y="463.50"></text></g><g><title>[libc-2.31.so] (172 samples, 0.16%)</title><rect x="32.0603%" y="501" width="0.1553%" height="15" fill="rgb(233,133,31)" fg:x="35500" fg:w="172"/><text x="32.3103%" y="511.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="32.3529%" y="485" width="0.0415%" height="15" fill="rgb(218,25,20)" fg:x="35824" fg:w="46"/><text x="32.6029%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (94 samples, 0.08%)</title><rect x="32.4332%" y="245" width="0.0849%" height="15" fill="rgb(252,210,38)" fg:x="35913" fg:w="94"/><text x="32.6832%" y="255.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (128 samples, 0.12%)</title><rect x="32.4052%" y="405" width="0.1156%" height="15" fill="rgb(242,134,21)" fg:x="35882" fg:w="128"/><text x="32.6552%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (128 samples, 0.12%)</title><rect x="32.4052%" y="389" width="0.1156%" height="15" fill="rgb(213,28,48)" fg:x="35882" fg:w="128"/><text x="32.6552%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (121 samples, 0.11%)</title><rect x="32.4116%" y="373" width="0.1093%" height="15" fill="rgb(250,196,2)" fg:x="35889" fg:w="121"/><text x="32.6616%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (115 samples, 0.10%)</title><rect x="32.4170%" y="357" width="0.1039%" height="15" fill="rgb(227,5,17)" fg:x="35895" fg:w="115"/><text x="32.6670%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (113 samples, 0.10%)</title><rect x="32.4188%" y="341" width="0.1021%" height="15" fill="rgb(221,226,24)" fg:x="35897" fg:w="113"/><text x="32.6688%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (113 samples, 0.10%)</title><rect x="32.4188%" y="325" width="0.1021%" height="15" fill="rgb(211,5,48)" fg:x="35897" fg:w="113"/><text x="32.6688%" y="335.50"></text></g><g><title>alloc::alloc::alloc (113 samples, 0.10%)</title><rect x="32.4188%" y="309" width="0.1021%" height="15" fill="rgb(219,150,6)" fg:x="35897" fg:w="113"/><text x="32.6688%" y="319.50"></text></g><g><title>__rg_alloc (113 samples, 0.10%)</title><rect x="32.4188%" y="293" width="0.1021%" height="15" fill="rgb(251,46,16)" fg:x="35897" fg:w="113"/><text x="32.6688%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (113 samples, 0.10%)</title><rect x="32.4188%" y="277" width="0.1021%" height="15" fill="rgb(220,204,40)" fg:x="35897" fg:w="113"/><text x="32.6688%" y="287.50"></text></g><g><title>sn_rust_alloc (113 samples, 0.10%)</title><rect x="32.4188%" y="261" width="0.1021%" height="15" fill="rgb(211,85,2)" fg:x="35897" fg:w="113"/><text x="32.6688%" y="271.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (134 samples, 0.12%)</title><rect x="32.4016%" y="421" width="0.1210%" height="15" fill="rgb(229,17,7)" fg:x="35878" fg:w="134"/><text x="32.6516%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (291 samples, 0.26%)</title><rect x="32.3989%" y="485" width="0.2628%" height="15" fill="rgb(239,72,28)" fg:x="35875" fg:w="291"/><text x="32.6489%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (291 samples, 0.26%)</title><rect x="32.3989%" y="469" width="0.2628%" height="15" fill="rgb(230,47,54)" fg:x="35875" fg:w="291"/><text x="32.6489%" y="479.50"></text></g><g><title>value_trait::Builder::object (291 samples, 0.26%)</title><rect x="32.3989%" y="453" width="0.2628%" height="15" fill="rgb(214,50,8)" fg:x="35875" fg:w="291"/><text x="32.6489%" y="463.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (291 samples, 0.26%)</title><rect x="32.3989%" y="437" width="0.2628%" height="15" fill="rgb(216,198,43)" fg:x="35875" fg:w="291"/><text x="32.6489%" y="447.50"></text></g><g><title>tremor_value::value::Value::Object (154 samples, 0.14%)</title><rect x="32.5226%" y="421" width="0.1391%" height="15" fill="rgb(234,20,35)" fg:x="36012" fg:w="154"/><text x="32.7726%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (13 samples, 0.01%)</title><rect x="32.6735%" y="421" width="0.0117%" height="15" fill="rgb(254,45,19)" fg:x="36179" fg:w="13"/><text x="32.9235%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (13 samples, 0.01%)</title><rect x="32.6735%" y="405" width="0.0117%" height="15" fill="rgb(219,14,44)" fg:x="36179" fg:w="13"/><text x="32.9235%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (57 samples, 0.05%)</title><rect x="32.6717%" y="469" width="0.0515%" height="15" fill="rgb(217,220,26)" fg:x="36177" fg:w="57"/><text x="32.9217%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (57 samples, 0.05%)</title><rect x="32.6717%" y="453" width="0.0515%" height="15" fill="rgb(213,158,28)" fg:x="36177" fg:w="57"/><text x="32.9217%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (57 samples, 0.05%)</title><rect x="32.6717%" y="437" width="0.0515%" height="15" fill="rgb(252,51,52)" fg:x="36177" fg:w="57"/><text x="32.9217%" y="447.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="32.6852%" y="421" width="0.0379%" height="15" fill="rgb(246,89,16)" fg:x="36192" fg:w="42"/><text x="32.9352%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="32.7258%" y="373" width="0.0316%" height="15" fill="rgb(216,158,49)" fg:x="36237" fg:w="35"/><text x="32.9758%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (35 samples, 0.03%)</title><rect x="32.7258%" y="357" width="0.0316%" height="15" fill="rgb(236,107,19)" fg:x="36237" fg:w="35"/><text x="32.9758%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (30 samples, 0.03%)</title><rect x="32.7304%" y="341" width="0.0271%" height="15" fill="rgb(228,185,30)" fg:x="36242" fg:w="30"/><text x="32.9804%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (30 samples, 0.03%)</title><rect x="32.7304%" y="325" width="0.0271%" height="15" fill="rgb(246,134,8)" fg:x="36242" fg:w="30"/><text x="32.9804%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (30 samples, 0.03%)</title><rect x="32.7304%" y="309" width="0.0271%" height="15" fill="rgb(214,143,50)" fg:x="36242" fg:w="30"/><text x="32.9804%" y="319.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="32.7358%" y="293" width="0.0217%" height="15" fill="rgb(228,75,8)" fg:x="36248" fg:w="24"/><text x="32.9858%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (50 samples, 0.05%)</title><rect x="32.7231%" y="437" width="0.0452%" height="15" fill="rgb(207,175,4)" fg:x="36234" fg:w="50"/><text x="32.9731%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (49 samples, 0.04%)</title><rect x="32.7240%" y="421" width="0.0443%" height="15" fill="rgb(205,108,24)" fg:x="36235" fg:w="49"/><text x="32.9740%" y="431.50"></text></g><g><title>core::mem::drop (47 samples, 0.04%)</title><rect x="32.7258%" y="405" width="0.0424%" height="15" fill="rgb(244,120,49)" fg:x="36237" fg:w="47"/><text x="32.9758%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (47 samples, 0.04%)</title><rect x="32.7258%" y="389" width="0.0424%" height="15" fill="rgb(223,47,38)" fg:x="36237" fg:w="47"/><text x="32.9758%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (12 samples, 0.01%)</title><rect x="32.7575%" y="373" width="0.0108%" height="15" fill="rgb(229,179,11)" fg:x="36272" fg:w="12"/><text x="33.0075%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="32.7575%" y="357" width="0.0108%" height="15" fill="rgb(231,122,1)" fg:x="36272" fg:w="12"/><text x="33.0075%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (123 samples, 0.11%)</title><rect x="32.6708%" y="485" width="0.1111%" height="15" fill="rgb(245,119,9)" fg:x="36176" fg:w="123"/><text x="32.9208%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (65 samples, 0.06%)</title><rect x="32.7231%" y="469" width="0.0587%" height="15" fill="rgb(241,163,25)" fg:x="36234" fg:w="65"/><text x="32.9731%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (65 samples, 0.06%)</title><rect x="32.7231%" y="453" width="0.0587%" height="15" fill="rgb(217,214,3)" fg:x="36234" fg:w="65"/><text x="32.9731%" y="463.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="32.7683%" y="437" width="0.0135%" height="15" fill="rgb(240,86,28)" fg:x="36284" fg:w="15"/><text x="33.0183%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (32 samples, 0.03%)</title><rect x="32.7818%" y="485" width="0.0289%" height="15" fill="rgb(215,47,9)" fg:x="36299" fg:w="32"/><text x="33.0318%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="32.7882%" y="469" width="0.0226%" height="15" fill="rgb(252,25,45)" fg:x="36306" fg:w="25"/><text x="33.0382%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="32.7882%" y="453" width="0.0226%" height="15" fill="rgb(251,164,9)" fg:x="36306" fg:w="25"/><text x="33.0382%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="32.7882%" y="437" width="0.0226%" height="15" fill="rgb(233,194,0)" fg:x="36306" fg:w="25"/><text x="33.0382%" y="447.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="32.7990%" y="421" width="0.0117%" height="15" fill="rgb(249,111,24)" fg:x="36318" fg:w="13"/><text x="33.0490%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (44 samples, 0.04%)</title><rect x="32.8315%" y="453" width="0.0397%" height="15" fill="rgb(250,223,3)" fg:x="36354" fg:w="44"/><text x="33.0815%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (20 samples, 0.02%)</title><rect x="32.8866%" y="421" width="0.0181%" height="15" fill="rgb(236,178,37)" fg:x="36415" fg:w="20"/><text x="33.1366%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (20 samples, 0.02%)</title><rect x="32.8866%" y="405" width="0.0181%" height="15" fill="rgb(241,158,50)" fg:x="36415" fg:w="20"/><text x="33.1366%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (19 samples, 0.02%)</title><rect x="32.8875%" y="389" width="0.0172%" height="15" fill="rgb(213,121,41)" fg:x="36416" fg:w="19"/><text x="33.1375%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (19 samples, 0.02%)</title><rect x="32.8875%" y="373" width="0.0172%" height="15" fill="rgb(240,92,3)" fg:x="36416" fg:w="19"/><text x="33.1375%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (19 samples, 0.02%)</title><rect x="32.8875%" y="357" width="0.0172%" height="15" fill="rgb(205,123,3)" fg:x="36416" fg:w="19"/><text x="33.1375%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (13 samples, 0.01%)</title><rect x="32.8929%" y="341" width="0.0117%" height="15" fill="rgb(205,97,47)" fg:x="36422" fg:w="13"/><text x="33.1429%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (89 samples, 0.08%)</title><rect x="32.8315%" y="469" width="0.0804%" height="15" fill="rgb(247,152,14)" fg:x="36354" fg:w="89"/><text x="33.0815%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (45 samples, 0.04%)</title><rect x="32.8712%" y="453" width="0.0406%" height="15" fill="rgb(248,195,53)" fg:x="36398" fg:w="45"/><text x="33.1212%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (45 samples, 0.04%)</title><rect x="32.8712%" y="437" width="0.0406%" height="15" fill="rgb(226,201,16)" fg:x="36398" fg:w="45"/><text x="33.1212%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,114 samples, 1.01%)</title><rect x="32.0603%" y="517" width="1.0061%" height="15" fill="rgb(205,98,0)" fg:x="35500" fg:w="1114"/><text x="32.3103%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (942 samples, 0.85%)</title><rect x="32.2156%" y="501" width="0.8507%" height="15" fill="rgb(214,191,48)" fg:x="35672" fg:w="942"/><text x="32.4656%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (283 samples, 0.26%)</title><rect x="32.8107%" y="485" width="0.2556%" height="15" fill="rgb(237,112,39)" fg:x="36331" fg:w="283"/><text x="33.0607%" y="495.50"></text></g><g><title>std::time::SystemTime::now (171 samples, 0.15%)</title><rect x="32.9119%" y="469" width="0.1544%" height="15" fill="rgb(247,203,27)" fg:x="36443" fg:w="171"/><text x="33.1619%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (171 samples, 0.15%)</title><rect x="32.9119%" y="453" width="0.1544%" height="15" fill="rgb(235,124,28)" fg:x="36443" fg:w="171"/><text x="33.1619%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (171 samples, 0.15%)</title><rect x="32.9119%" y="437" width="0.1544%" height="15" fill="rgb(208,207,46)" fg:x="36443" fg:w="171"/><text x="33.1619%" y="447.50"></text></g><g><title>__clock_gettime (132 samples, 0.12%)</title><rect x="32.9471%" y="421" width="0.1192%" height="15" fill="rgb(234,176,4)" fg:x="36482" fg:w="132"/><text x="33.1971%" y="431.50"></text></g><g><title>__vdso_clock_gettime (119 samples, 0.11%)</title><rect x="32.9588%" y="405" width="0.1075%" height="15" fill="rgb(230,133,28)" fg:x="36495" fg:w="119"/><text x="33.2088%" y="415.50"></text></g><g><title>[[vdso]] (111 samples, 0.10%)</title><rect x="32.9661%" y="389" width="0.1002%" height="15" fill="rgb(211,137,40)" fg:x="36503" fg:w="111"/><text x="33.2161%" y="399.50"></text></g><g><title>[libc-2.31.so] (240 samples, 0.22%)</title><rect x="33.0663%" y="517" width="0.2167%" height="15" fill="rgb(254,35,13)" fg:x="36614" fg:w="240"/><text x="33.3163%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,859 samples, 1.68%)</title><rect x="31.6692%" y="549" width="1.6789%" height="15" fill="rgb(225,49,51)" fg:x="35067" fg:w="1859"/><text x="31.9192%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,748 samples, 1.58%)</title><rect x="31.7695%" y="533" width="1.5786%" height="15" fill="rgb(251,10,15)" fg:x="35178" fg:w="1748"/><text x="32.0195%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (63 samples, 0.06%)</title><rect x="33.2912%" y="517" width="0.0569%" height="15" fill="rgb(228,207,15)" fg:x="36863" fg:w="63"/><text x="33.5412%" y="527.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.15%)</title><rect x="33.3517%" y="549" width="0.1454%" height="15" fill="rgb(241,99,19)" fg:x="36930" fg:w="161"/><text x="33.6017%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="33.6109%" y="421" width="0.0135%" height="15" fill="rgb(207,104,49)" fg:x="37217" fg:w="15"/><text x="33.8609%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (142 samples, 0.13%)</title><rect x="33.4971%" y="549" width="0.1282%" height="15" fill="rgb(234,99,18)" fg:x="37091" fg:w="142"/><text x="33.7471%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="33.5874%" y="533" width="0.0379%" height="15" fill="rgb(213,191,49)" fg:x="37191" fg:w="42"/><text x="33.8374%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="33.5874%" y="517" width="0.0379%" height="15" fill="rgb(210,226,19)" fg:x="37191" fg:w="42"/><text x="33.8374%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="33.5874%" y="501" width="0.0379%" height="15" fill="rgb(229,97,18)" fg:x="37191" fg:w="42"/><text x="33.8374%" y="511.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.04%)</title><rect x="33.5892%" y="485" width="0.0361%" height="15" fill="rgb(211,167,15)" fg:x="37193" fg:w="40"/><text x="33.8392%" y="495.50"></text></g><g><title>__rg_alloc (40 samples, 0.04%)</title><rect x="33.5892%" y="469" width="0.0361%" height="15" fill="rgb(210,169,34)" fg:x="37193" fg:w="40"/><text x="33.8392%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.04%)</title><rect x="33.5892%" y="453" width="0.0361%" height="15" fill="rgb(241,121,31)" fg:x="37193" fg:w="40"/><text x="33.8392%" y="463.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="33.5955%" y="437" width="0.0298%" height="15" fill="rgb(232,40,11)" fg:x="37200" fg:w="33"/><text x="33.8455%" y="447.50"></text></g><g><title>async_global_executor::reactor::block_on (2,386 samples, 2.15%)</title><rect x="31.4850%" y="901" width="2.1548%" height="15" fill="rgb(205,86,26)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="911.50">a..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (2,386 samples, 2.15%)</title><rect x="31.4850%" y="885" width="2.1548%" height="15" fill="rgb(231,126,28)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="895.50">a..</text></g><g><title>async_io::driver::block_on (2,386 samples, 2.15%)</title><rect x="31.4850%" y="869" width="2.1548%" height="15" fill="rgb(219,221,18)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="879.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="853" width="2.1548%" height="15" fill="rgb(211,40,0)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="863.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="837" width="2.1548%" height="15" fill="rgb(239,85,43)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="847.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}} (2,386 samples, 2.15%)</title><rect x="31.4850%" y="821" width="2.1548%" height="15" fill="rgb(231,55,21)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="831.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="805" width="2.1548%" height="15" fill="rgb(225,184,43)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="815.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="789" width="2.1548%" height="15" fill="rgb(251,158,41)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="799.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2,386 samples, 2.15%)</title><rect x="31.4850%" y="773" width="2.1548%" height="15" fill="rgb(234,159,37)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="783.50">a..</text></g><g><title>async_task::runnable::Runnable::run (2,386 samples, 2.15%)</title><rect x="31.4850%" y="757" width="2.1548%" height="15" fill="rgb(216,204,22)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="767.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,386 samples, 2.15%)</title><rect x="31.4850%" y="741" width="2.1548%" height="15" fill="rgb(214,17,3)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="751.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="725" width="2.1548%" height="15" fill="rgb(212,111,17)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="735.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="709" width="2.1548%" height="15" fill="rgb(221,157,24)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="719.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,386 samples, 2.15%)</title><rect x="31.4850%" y="693" width="2.1548%" height="15" fill="rgb(252,16,13)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="703.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="677" width="2.1548%" height="15" fill="rgb(221,62,2)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="687.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,386 samples, 2.15%)</title><rect x="31.4850%" y="661" width="2.1548%" height="15" fill="rgb(247,87,22)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="671.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,386 samples, 2.15%)</title><rect x="31.4850%" y="645" width="2.1548%" height="15" fill="rgb(215,73,9)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="655.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,386 samples, 2.15%)</title><rect x="31.4850%" y="629" width="2.1548%" height="15" fill="rgb(207,175,33)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="639.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,386 samples, 2.15%)</title><rect x="31.4850%" y="613" width="2.1548%" height="15" fill="rgb(243,129,54)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="623.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,386 samples, 2.15%)</title><rect x="31.4850%" y="597" width="2.1548%" height="15" fill="rgb(227,119,45)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="607.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,386 samples, 2.15%)</title><rect x="31.4850%" y="581" width="2.1548%" height="15" fill="rgb(205,109,36)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="591.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,386 samples, 2.15%)</title><rect x="31.4850%" y="565" width="2.1548%" height="15" fill="rgb(205,6,39)" fg:x="34863" fg:w="2386"/><text x="31.7350%" y="575.50">t..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (335 samples, 0.30%)</title><rect x="33.8385%" y="581" width="0.3025%" height="15" fill="rgb(221,32,16)" fg:x="37469" fg:w="335"/><text x="34.0885%" y="591.50"></text></g><g><title>[libc-2.31.so] (297 samples, 0.27%)</title><rect x="33.8728%" y="565" width="0.2682%" height="15" fill="rgb(228,144,50)" fg:x="37507" fg:w="297"/><text x="34.1228%" y="575.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="34.1455%" y="581" width="0.0144%" height="15" fill="rgb(229,201,53)" fg:x="37809" fg:w="16"/><text x="34.3955%" y="591.50"></text></g><g><title>[libc-2.31.so] (106 samples, 0.10%)</title><rect x="34.1699%" y="565" width="0.0957%" height="15" fill="rgb(249,153,27)" fg:x="37836" fg:w="106"/><text x="34.4199%" y="575.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (387 samples, 0.35%)</title><rect x="34.3740%" y="549" width="0.3495%" height="15" fill="rgb(227,106,25)" fg:x="38062" fg:w="387"/><text x="34.6240%" y="559.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="34.7325%" y="533" width="0.0930%" height="15" fill="rgb(230,65,29)" fg:x="38459" fg:w="103"/><text x="34.9825%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (214 samples, 0.19%)</title><rect x="34.7235%" y="549" width="0.1933%" height="15" fill="rgb(221,57,46)" fg:x="38449" fg:w="214"/><text x="34.9735%" y="559.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (101 samples, 0.09%)</title><rect x="34.8256%" y="533" width="0.0912%" height="15" fill="rgb(229,161,17)" fg:x="38562" fg:w="101"/><text x="35.0756%" y="543.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (97 samples, 0.09%)</title><rect x="34.9168%" y="517" width="0.0876%" height="15" fill="rgb(222,213,11)" fg:x="38663" fg:w="97"/><text x="35.1668%" y="527.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (94 samples, 0.08%)</title><rect x="34.9195%" y="501" width="0.0849%" height="15" fill="rgb(235,35,13)" fg:x="38666" fg:w="94"/><text x="35.1695%" y="511.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (94 samples, 0.08%)</title><rect x="34.9195%" y="485" width="0.0849%" height="15" fill="rgb(233,158,34)" fg:x="38666" fg:w="94"/><text x="35.1695%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="35.0242%" y="469" width="0.0117%" height="15" fill="rgb(215,151,48)" fg:x="38782" fg:w="13"/><text x="35.2742%" y="479.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="35.0242%" y="453" width="0.0117%" height="15" fill="rgb(229,84,14)" fg:x="38782" fg:w="13"/><text x="35.2742%" y="463.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (13 samples, 0.01%)</title><rect x="35.0242%" y="437" width="0.0117%" height="15" fill="rgb(229,68,14)" fg:x="38782" fg:w="13"/><text x="35.2742%" y="447.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,433 samples, 2.20%)</title><rect x="35.0062%" y="501" width="2.1973%" height="15" fill="rgb(243,106,26)" fg:x="38762" fg:w="2433"/><text x="35.2562%" y="511.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,420 samples, 2.19%)</title><rect x="35.0179%" y="485" width="2.1855%" height="15" fill="rgb(206,45,38)" fg:x="38775" fg:w="2420"/><text x="35.2679%" y="495.50">a..</text></g><g><title>std::panic::catch_unwind (2,400 samples, 2.17%)</title><rect x="35.0360%" y="469" width="2.1675%" height="15" fill="rgb(226,6,15)" fg:x="38795" fg:w="2400"/><text x="35.2860%" y="479.50">s..</text></g><g><title>std::panicking::try (2,400 samples, 2.17%)</title><rect x="35.0360%" y="453" width="2.1675%" height="15" fill="rgb(232,22,54)" fg:x="38795" fg:w="2400"/><text x="35.2860%" y="463.50">s..</text></g><g><title>std::panicking::try::do_call (2,400 samples, 2.17%)</title><rect x="35.0360%" y="437" width="2.1675%" height="15" fill="rgb(229,222,32)" fg:x="38795" fg:w="2400"/><text x="35.2860%" y="447.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,442 samples, 2.21%)</title><rect x="35.0044%" y="517" width="2.2054%" height="15" fill="rgb(228,62,29)" fg:x="38760" fg:w="2442"/><text x="35.2544%" y="527.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,612 samples, 2.36%)</title><rect x="34.9168%" y="549" width="2.3589%" height="15" fill="rgb(251,103,34)" fg:x="38663" fg:w="2612"/><text x="35.1668%" y="559.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,612 samples, 2.36%)</title><rect x="34.9168%" y="533" width="2.3589%" height="15" fill="rgb(233,12,30)" fg:x="38663" fg:w="2612"/><text x="35.1668%" y="543.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (73 samples, 0.07%)</title><rect x="37.2098%" y="517" width="0.0659%" height="15" fill="rgb(238,52,0)" fg:x="41202" fg:w="73"/><text x="37.4598%" y="527.50"></text></g><g><title>[libc-2.31.so] (315 samples, 0.28%)</title><rect x="37.2757%" y="549" width="0.2845%" height="15" fill="rgb(223,98,5)" fg:x="41275" fg:w="315"/><text x="37.5257%" y="559.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (24 samples, 0.02%)</title><rect x="37.5602%" y="549" width="0.0217%" height="15" fill="rgb(228,75,37)" fg:x="41590" fg:w="24"/><text x="37.8102%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (14 samples, 0.01%)</title><rect x="37.5900%" y="501" width="0.0126%" height="15" fill="rgb(205,115,49)" fg:x="41623" fg:w="14"/><text x="37.8400%" y="511.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="37.6026%" y="501" width="0.0199%" height="15" fill="rgb(250,154,43)" fg:x="41637" fg:w="22"/><text x="37.8526%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="37.5818%" y="549" width="0.0443%" height="15" fill="rgb(226,43,29)" fg:x="41614" fg:w="49"/><text x="37.8318%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="37.5818%" y="533" width="0.0443%" height="15" fill="rgb(249,228,39)" fg:x="41614" fg:w="49"/><text x="37.8318%" y="543.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="37.5818%" y="517" width="0.0443%" height="15" fill="rgb(216,79,43)" fg:x="41614" fg:w="49"/><text x="37.8318%" y="527.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="37.8401%" y="533" width="0.0497%" height="15" fill="rgb(228,95,12)" fg:x="41900" fg:w="55"/><text x="38.0901%" y="543.50"></text></g><g><title>[libc-2.31.so] (124 samples, 0.11%)</title><rect x="37.9079%" y="453" width="0.1120%" height="15" fill="rgb(249,221,15)" fg:x="41975" fg:w="124"/><text x="38.1579%" y="463.50"></text></g><g><title>[libc-2.31.so] (83 samples, 0.07%)</title><rect x="38.0235%" y="437" width="0.0750%" height="15" fill="rgb(233,34,13)" fg:x="42103" fg:w="83"/><text x="38.2735%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="38.1923%" y="325" width="0.0217%" height="15" fill="rgb(214,103,39)" fg:x="42290" fg:w="24"/><text x="38.4423%" y="335.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (366 samples, 0.33%)</title><rect x="37.8898%" y="533" width="0.3305%" height="15" fill="rgb(251,126,39)" fg:x="41955" fg:w="366"/><text x="38.1398%" y="543.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (358 samples, 0.32%)</title><rect x="37.8970%" y="517" width="0.3233%" height="15" fill="rgb(214,216,36)" fg:x="41963" fg:w="358"/><text x="38.1470%" y="527.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (358 samples, 0.32%)</title><rect x="37.8970%" y="501" width="0.3233%" height="15" fill="rgb(220,221,8)" fg:x="41963" fg:w="358"/><text x="38.1470%" y="511.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (358 samples, 0.32%)</title><rect x="37.8970%" y="485" width="0.3233%" height="15" fill="rgb(240,216,3)" fg:x="41963" fg:w="358"/><text x="38.1470%" y="495.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (358 samples, 0.32%)</title><rect x="37.8970%" y="469" width="0.3233%" height="15" fill="rgb(232,218,17)" fg:x="41963" fg:w="358"/><text x="38.1470%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (222 samples, 0.20%)</title><rect x="38.0199%" y="453" width="0.2005%" height="15" fill="rgb(229,163,45)" fg:x="42099" fg:w="222"/><text x="38.2699%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (135 samples, 0.12%)</title><rect x="38.0984%" y="437" width="0.1219%" height="15" fill="rgb(231,110,42)" fg:x="42186" fg:w="135"/><text x="38.3484%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (135 samples, 0.12%)</title><rect x="38.0984%" y="421" width="0.1219%" height="15" fill="rgb(208,170,48)" fg:x="42186" fg:w="135"/><text x="38.3484%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (135 samples, 0.12%)</title><rect x="38.0984%" y="405" width="0.1219%" height="15" fill="rgb(239,116,25)" fg:x="42186" fg:w="135"/><text x="38.3484%" y="415.50"></text></g><g><title>alloc::alloc::alloc (132 samples, 0.12%)</title><rect x="38.1011%" y="389" width="0.1192%" height="15" fill="rgb(219,200,50)" fg:x="42189" fg:w="132"/><text x="38.3511%" y="399.50"></text></g><g><title>__rg_alloc (132 samples, 0.12%)</title><rect x="38.1011%" y="373" width="0.1192%" height="15" fill="rgb(245,200,0)" fg:x="42189" fg:w="132"/><text x="38.3511%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (132 samples, 0.12%)</title><rect x="38.1011%" y="357" width="0.1192%" height="15" fill="rgb(245,119,33)" fg:x="42189" fg:w="132"/><text x="38.3511%" y="367.50"></text></g><g><title>sn_rust_alloc (131 samples, 0.12%)</title><rect x="38.1020%" y="341" width="0.1183%" height="15" fill="rgb(231,125,12)" fg:x="42190" fg:w="131"/><text x="38.3520%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,388 samples, 3.96%)</title><rect x="34.2656%" y="565" width="3.9628%" height="15" fill="rgb(216,96,41)" fg:x="37942" fg:w="4388"/><text x="34.5156%" y="575.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (667 samples, 0.60%)</title><rect x="37.6261%" y="549" width="0.6024%" height="15" fill="rgb(248,43,45)" fg:x="41663" fg:w="667"/><text x="37.8761%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="38.3657%" y="469" width="0.0144%" height="15" fill="rgb(217,222,7)" fg:x="42482" fg:w="16"/><text x="38.6157%" y="479.50"></text></g><g><title>sn_rust_dealloc (19 samples, 0.02%)</title><rect x="38.3802%" y="469" width="0.0172%" height="15" fill="rgb(233,28,6)" fg:x="42498" fg:w="19"/><text x="38.6302%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,700 samples, 4.24%)</title><rect x="34.1600%" y="581" width="4.2446%" height="15" fill="rgb(231,218,15)" fg:x="37825" fg:w="4700"/><text x="34.4100%" y="591.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (195 samples, 0.18%)</title><rect x="38.2285%" y="565" width="0.1761%" height="15" fill="rgb(226,171,48)" fg:x="42330" fg:w="195"/><text x="38.4785%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (57 samples, 0.05%)</title><rect x="38.3531%" y="549" width="0.0515%" height="15" fill="rgb(235,201,9)" fg:x="42468" fg:w="57"/><text x="38.6031%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (47 samples, 0.04%)</title><rect x="38.3621%" y="533" width="0.0424%" height="15" fill="rgb(217,80,15)" fg:x="42478" fg:w="47"/><text x="38.6121%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="38.3621%" y="517" width="0.0424%" height="15" fill="rgb(219,152,8)" fg:x="42478" fg:w="47"/><text x="38.6121%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="38.3621%" y="501" width="0.0424%" height="15" fill="rgb(243,107,38)" fg:x="42478" fg:w="47"/><text x="38.6121%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (47 samples, 0.04%)</title><rect x="38.3621%" y="485" width="0.0424%" height="15" fill="rgb(231,17,5)" fg:x="42478" fg:w="47"/><text x="38.6121%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (40 samples, 0.04%)</title><rect x="38.4190%" y="469" width="0.0361%" height="15" fill="rgb(209,25,54)" fg:x="42541" fg:w="40"/><text x="38.6690%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="38.4244%" y="453" width="0.0307%" height="15" fill="rgb(219,0,2)" fg:x="42547" fg:w="34"/><text x="38.6744%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="38.4244%" y="437" width="0.0307%" height="15" fill="rgb(246,9,5)" fg:x="42547" fg:w="34"/><text x="38.6744%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (29 samples, 0.03%)</title><rect x="38.4290%" y="421" width="0.0262%" height="15" fill="rgb(226,159,4)" fg:x="42552" fg:w="29"/><text x="38.6790%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="38.4290%" y="405" width="0.0262%" height="15" fill="rgb(219,175,34)" fg:x="42552" fg:w="29"/><text x="38.6790%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="38.4290%" y="389" width="0.0262%" height="15" fill="rgb(236,10,46)" fg:x="42552" fg:w="29"/><text x="38.6790%" y="399.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="38.4290%" y="373" width="0.0262%" height="15" fill="rgb(240,211,16)" fg:x="42552" fg:w="29"/><text x="38.6790%" y="383.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="38.4290%" y="357" width="0.0262%" height="15" fill="rgb(205,3,43)" fg:x="42552" fg:w="29"/><text x="38.6790%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="38.4290%" y="341" width="0.0262%" height="15" fill="rgb(245,7,22)" fg:x="42552" fg:w="29"/><text x="38.6790%" y="351.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="38.4335%" y="325" width="0.0217%" height="15" fill="rgb(239,132,32)" fg:x="42557" fg:w="24"/><text x="38.6835%" y="335.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (63 samples, 0.06%)</title><rect x="38.4163%" y="549" width="0.0569%" height="15" fill="rgb(228,202,34)" fg:x="42538" fg:w="63"/><text x="38.6663%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (61 samples, 0.06%)</title><rect x="38.4181%" y="533" width="0.0551%" height="15" fill="rgb(254,200,22)" fg:x="42540" fg:w="61"/><text x="38.6681%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (61 samples, 0.06%)</title><rect x="38.4181%" y="517" width="0.0551%" height="15" fill="rgb(219,10,39)" fg:x="42540" fg:w="61"/><text x="38.6681%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (60 samples, 0.05%)</title><rect x="38.4190%" y="501" width="0.0542%" height="15" fill="rgb(226,210,39)" fg:x="42541" fg:w="60"/><text x="38.6690%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (60 samples, 0.05%)</title><rect x="38.4190%" y="485" width="0.0542%" height="15" fill="rgb(208,219,16)" fg:x="42541" fg:w="60"/><text x="38.6690%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (20 samples, 0.02%)</title><rect x="38.4551%" y="469" width="0.0181%" height="15" fill="rgb(216,158,51)" fg:x="42581" fg:w="20"/><text x="38.7051%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (20 samples, 0.02%)</title><rect x="38.4551%" y="453" width="0.0181%" height="15" fill="rgb(233,14,44)" fg:x="42581" fg:w="20"/><text x="38.7051%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="38.4615%" y="437" width="0.0117%" height="15" fill="rgb(237,97,39)" fg:x="42588" fg:w="13"/><text x="38.7115%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (45 samples, 0.04%)</title><rect x="38.6421%" y="517" width="0.0406%" height="15" fill="rgb(218,198,43)" fg:x="42788" fg:w="45"/><text x="38.8921%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (45 samples, 0.04%)</title><rect x="38.6421%" y="501" width="0.0406%" height="15" fill="rgb(231,104,20)" fg:x="42788" fg:w="45"/><text x="38.8921%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (45 samples, 0.04%)</title><rect x="38.6421%" y="485" width="0.0406%" height="15" fill="rgb(254,36,13)" fg:x="42788" fg:w="45"/><text x="38.8921%" y="495.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (40 samples, 0.04%)</title><rect x="38.6466%" y="469" width="0.0361%" height="15" fill="rgb(248,14,50)" fg:x="42793" fg:w="40"/><text x="38.8966%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (40 samples, 0.04%)</title><rect x="38.6466%" y="453" width="0.0361%" height="15" fill="rgb(217,107,29)" fg:x="42793" fg:w="40"/><text x="38.8966%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (37 samples, 0.03%)</title><rect x="38.6493%" y="437" width="0.0334%" height="15" fill="rgb(251,169,33)" fg:x="42796" fg:w="37"/><text x="38.8993%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.03%)</title><rect x="38.6574%" y="421" width="0.0253%" height="15" fill="rgb(217,108,32)" fg:x="42805" fg:w="28"/><text x="38.9074%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.03%)</title><rect x="38.6574%" y="405" width="0.0253%" height="15" fill="rgb(219,66,42)" fg:x="42805" fg:w="28"/><text x="38.9074%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.03%)</title><rect x="38.6574%" y="389" width="0.0253%" height="15" fill="rgb(206,180,7)" fg:x="42805" fg:w="28"/><text x="38.9074%" y="399.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.03%)</title><rect x="38.6574%" y="373" width="0.0253%" height="15" fill="rgb(208,226,31)" fg:x="42805" fg:w="28"/><text x="38.9074%" y="383.50"></text></g><g><title>__rg_alloc (28 samples, 0.03%)</title><rect x="38.6574%" y="357" width="0.0253%" height="15" fill="rgb(218,26,49)" fg:x="42805" fg:w="28"/><text x="38.9074%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.03%)</title><rect x="38.6574%" y="341" width="0.0253%" height="15" fill="rgb(233,197,48)" fg:x="42805" fg:w="28"/><text x="38.9074%" y="351.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="38.6611%" y="325" width="0.0217%" height="15" fill="rgb(252,181,51)" fg:x="42809" fg:w="24"/><text x="38.9111%" y="335.50"></text></g><g><title>abi_stable::erased_types::iterator::next (13 samples, 0.01%)</title><rect x="38.7053%" y="469" width="0.0117%" height="15" fill="rgb(253,90,19)" fg:x="42858" fg:w="13"/><text x="38.9553%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="38.6981%" y="501" width="0.0226%" height="15" fill="rgb(215,171,30)" fg:x="42850" fg:w="25"/><text x="38.9481%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (25 samples, 0.02%)</title><rect x="38.6981%" y="485" width="0.0226%" height="15" fill="rgb(214,222,9)" fg:x="42850" fg:w="25"/><text x="38.9481%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (15 samples, 0.01%)</title><rect x="38.7207%" y="501" width="0.0135%" height="15" fill="rgb(223,3,22)" fg:x="42875" fg:w="15"/><text x="38.9707%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (15 samples, 0.01%)</title><rect x="38.7207%" y="485" width="0.0135%" height="15" fill="rgb(225,196,46)" fg:x="42875" fg:w="15"/><text x="38.9707%" y="495.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.04%)</title><rect x="38.7541%" y="389" width="0.0370%" height="15" fill="rgb(209,110,37)" fg:x="42912" fg:w="41"/><text x="39.0041%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (429 samples, 0.39%)</title><rect x="38.4046%" y="581" width="0.3874%" height="15" fill="rgb(249,89,12)" fg:x="42525" fg:w="429"/><text x="38.6546%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (418 samples, 0.38%)</title><rect x="38.4145%" y="565" width="0.3775%" height="15" fill="rgb(226,27,33)" fg:x="42536" fg:w="418"/><text x="38.6645%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (353 samples, 0.32%)</title><rect x="38.4732%" y="549" width="0.3188%" height="15" fill="rgb(213,82,22)" fg:x="42601" fg:w="353"/><text x="38.7232%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (169 samples, 0.15%)</title><rect x="38.6394%" y="533" width="0.1526%" height="15" fill="rgb(248,140,0)" fg:x="42785" fg:w="169"/><text x="38.8894%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (121 samples, 0.11%)</title><rect x="38.6827%" y="517" width="0.1093%" height="15" fill="rgb(228,106,3)" fg:x="42833" fg:w="121"/><text x="38.9327%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (54 samples, 0.05%)</title><rect x="38.7432%" y="501" width="0.0488%" height="15" fill="rgb(209,23,37)" fg:x="42900" fg:w="54"/><text x="38.9932%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (54 samples, 0.05%)</title><rect x="38.7432%" y="485" width="0.0488%" height="15" fill="rgb(241,93,50)" fg:x="42900" fg:w="54"/><text x="38.9932%" y="495.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.05%)</title><rect x="38.7432%" y="469" width="0.0488%" height="15" fill="rgb(253,46,43)" fg:x="42900" fg:w="54"/><text x="38.9932%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (53 samples, 0.05%)</title><rect x="38.7441%" y="453" width="0.0479%" height="15" fill="rgb(226,206,43)" fg:x="42901" fg:w="53"/><text x="38.9941%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (47 samples, 0.04%)</title><rect x="38.7496%" y="437" width="0.0424%" height="15" fill="rgb(217,54,7)" fg:x="42907" fg:w="47"/><text x="38.9996%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="38.7496%" y="421" width="0.0424%" height="15" fill="rgb(223,5,52)" fg:x="42907" fg:w="47"/><text x="38.9996%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (47 samples, 0.04%)</title><rect x="38.7496%" y="405" width="0.0424%" height="15" fill="rgb(206,52,46)" fg:x="42907" fg:w="47"/><text x="38.9996%" y="415.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (28 samples, 0.03%)</title><rect x="38.7983%" y="565" width="0.0253%" height="15" fill="rgb(253,136,11)" fg:x="42961" fg:w="28"/><text x="39.0483%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (22 samples, 0.02%)</title><rect x="38.8037%" y="549" width="0.0199%" height="15" fill="rgb(208,106,33)" fg:x="42967" fg:w="22"/><text x="39.0537%" y="559.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (50 samples, 0.05%)</title><rect x="38.8670%" y="453" width="0.0452%" height="15" fill="rgb(206,54,4)" fg:x="43037" fg:w="50"/><text x="39.1170%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="38.8733%" y="437" width="0.0388%" height="15" fill="rgb(213,3,15)" fg:x="43044" fg:w="43"/><text x="39.1233%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="38.8733%" y="421" width="0.0388%" height="15" fill="rgb(252,211,39)" fg:x="43044" fg:w="43"/><text x="39.1233%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (36 samples, 0.03%)</title><rect x="38.8796%" y="405" width="0.0325%" height="15" fill="rgb(223,6,36)" fg:x="43051" fg:w="36"/><text x="39.1296%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="38.8832%" y="389" width="0.0289%" height="15" fill="rgb(252,169,45)" fg:x="43055" fg:w="32"/><text x="39.1332%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="38.8832%" y="373" width="0.0289%" height="15" fill="rgb(212,48,26)" fg:x="43055" fg:w="32"/><text x="39.1332%" y="383.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.03%)</title><rect x="38.8832%" y="357" width="0.0289%" height="15" fill="rgb(251,102,48)" fg:x="43055" fg:w="32"/><text x="39.1332%" y="367.50"></text></g><g><title>__rg_alloc (32 samples, 0.03%)</title><rect x="38.8832%" y="341" width="0.0289%" height="15" fill="rgb(243,208,16)" fg:x="43055" fg:w="32"/><text x="39.1332%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.03%)</title><rect x="38.8832%" y="325" width="0.0289%" height="15" fill="rgb(219,96,24)" fg:x="43055" fg:w="32"/><text x="39.1332%" y="335.50"></text></g><g><title>sn_rust_alloc (32 samples, 0.03%)</title><rect x="38.8832%" y="309" width="0.0289%" height="15" fill="rgb(219,33,29)" fg:x="43055" fg:w="32"/><text x="39.1332%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (75 samples, 0.07%)</title><rect x="38.9329%" y="405" width="0.0677%" height="15" fill="rgb(223,176,5)" fg:x="43110" fg:w="75"/><text x="39.1829%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (75 samples, 0.07%)</title><rect x="38.9329%" y="389" width="0.0677%" height="15" fill="rgb(228,140,14)" fg:x="43110" fg:w="75"/><text x="39.1829%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (82 samples, 0.07%)</title><rect x="38.9275%" y="421" width="0.0741%" height="15" fill="rgb(217,179,31)" fg:x="43104" fg:w="82"/><text x="39.1775%" y="431.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (513 samples, 0.46%)</title><rect x="38.8552%" y="533" width="0.4633%" height="15" fill="rgb(230,9,30)" fg:x="43024" fg:w="513"/><text x="39.1052%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (507 samples, 0.46%)</title><rect x="38.8606%" y="517" width="0.4579%" height="15" fill="rgb(230,136,20)" fg:x="43030" fg:w="507"/><text x="39.1106%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (507 samples, 0.46%)</title><rect x="38.8606%" y="501" width="0.4579%" height="15" fill="rgb(215,210,22)" fg:x="43030" fg:w="507"/><text x="39.1106%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (500 samples, 0.45%)</title><rect x="38.8670%" y="485" width="0.4516%" height="15" fill="rgb(218,43,5)" fg:x="43037" fg:w="500"/><text x="39.1170%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (500 samples, 0.45%)</title><rect x="38.8670%" y="469" width="0.4516%" height="15" fill="rgb(216,11,5)" fg:x="43037" fg:w="500"/><text x="39.1170%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (450 samples, 0.41%)</title><rect x="38.9121%" y="453" width="0.4064%" height="15" fill="rgb(209,82,29)" fg:x="43087" fg:w="450"/><text x="39.1621%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (450 samples, 0.41%)</title><rect x="38.9121%" y="437" width="0.4064%" height="15" fill="rgb(244,115,12)" fg:x="43087" fg:w="450"/><text x="39.1621%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (351 samples, 0.32%)</title><rect x="39.0015%" y="421" width="0.3170%" height="15" fill="rgb(222,82,18)" fg:x="43186" fg:w="351"/><text x="39.2515%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (49 samples, 0.04%)</title><rect x="39.4404%" y="501" width="0.0443%" height="15" fill="rgb(249,227,8)" fg:x="43672" fg:w="49"/><text x="39.6904%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (49 samples, 0.04%)</title><rect x="39.4404%" y="485" width="0.0443%" height="15" fill="rgb(253,141,45)" fg:x="43672" fg:w="49"/><text x="39.6904%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (49 samples, 0.04%)</title><rect x="39.4404%" y="469" width="0.0443%" height="15" fill="rgb(234,184,4)" fg:x="43672" fg:w="49"/><text x="39.6904%" y="479.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (44 samples, 0.04%)</title><rect x="39.4450%" y="453" width="0.0397%" height="15" fill="rgb(218,194,23)" fg:x="43677" fg:w="44"/><text x="39.6950%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (44 samples, 0.04%)</title><rect x="39.4450%" y="437" width="0.0397%" height="15" fill="rgb(235,66,41)" fg:x="43677" fg:w="44"/><text x="39.6950%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (40 samples, 0.04%)</title><rect x="39.4486%" y="421" width="0.0361%" height="15" fill="rgb(245,217,1)" fg:x="43681" fg:w="40"/><text x="39.6986%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.03%)</title><rect x="39.4567%" y="405" width="0.0280%" height="15" fill="rgb(229,91,1)" fg:x="43690" fg:w="31"/><text x="39.7067%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.03%)</title><rect x="39.4567%" y="389" width="0.0280%" height="15" fill="rgb(207,101,30)" fg:x="43690" fg:w="31"/><text x="39.7067%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.03%)</title><rect x="39.4567%" y="373" width="0.0280%" height="15" fill="rgb(223,82,49)" fg:x="43690" fg:w="31"/><text x="39.7067%" y="383.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="39.4567%" y="357" width="0.0280%" height="15" fill="rgb(218,167,17)" fg:x="43690" fg:w="31"/><text x="39.7067%" y="367.50"></text></g><g><title>__rg_alloc (31 samples, 0.03%)</title><rect x="39.4567%" y="341" width="0.0280%" height="15" fill="rgb(208,103,14)" fg:x="43690" fg:w="31"/><text x="39.7067%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.03%)</title><rect x="39.4567%" y="325" width="0.0280%" height="15" fill="rgb(238,20,8)" fg:x="43690" fg:w="31"/><text x="39.7067%" y="335.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="39.4612%" y="309" width="0.0235%" height="15" fill="rgb(218,80,54)" fg:x="43695" fg:w="26"/><text x="39.7112%" y="319.50"></text></g><g><title>abi_stable::erased_types::iterator::next (13 samples, 0.01%)</title><rect x="39.5082%" y="453" width="0.0117%" height="15" fill="rgb(240,144,17)" fg:x="43747" fg:w="13"/><text x="39.7582%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.03%)</title><rect x="39.4982%" y="485" width="0.0253%" height="15" fill="rgb(245,27,50)" fg:x="43736" fg:w="28"/><text x="39.7482%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (28 samples, 0.03%)</title><rect x="39.4982%" y="469" width="0.0253%" height="15" fill="rgb(251,51,7)" fg:x="43736" fg:w="28"/><text x="39.7482%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="39.5235%" y="485" width="0.0144%" height="15" fill="rgb(245,217,29)" fg:x="43764" fg:w="16"/><text x="39.7735%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (16 samples, 0.01%)</title><rect x="39.5235%" y="469" width="0.0144%" height="15" fill="rgb(221,176,29)" fg:x="43764" fg:w="16"/><text x="39.7735%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (15 samples, 0.01%)</title><rect x="39.5515%" y="373" width="0.0135%" height="15" fill="rgb(212,180,24)" fg:x="43795" fg:w="15"/><text x="39.8015%" y="383.50"></text></g><g><title>sn_rust_dealloc (96 samples, 0.09%)</title><rect x="39.5651%" y="373" width="0.0867%" height="15" fill="rgb(254,24,2)" fg:x="43810" fg:w="96"/><text x="39.8151%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (953 samples, 0.86%)</title><rect x="38.7920%" y="581" width="0.8607%" height="15" fill="rgb(230,100,2)" fg:x="42954" fg:w="953"/><text x="39.0420%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (918 samples, 0.83%)</title><rect x="38.8236%" y="565" width="0.8291%" height="15" fill="rgb(219,142,25)" fg:x="42989" fg:w="918"/><text x="39.0736%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (890 samples, 0.80%)</title><rect x="38.8489%" y="549" width="0.8038%" height="15" fill="rgb(240,73,43)" fg:x="43017" fg:w="890"/><text x="39.0989%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (370 samples, 0.33%)</title><rect x="39.3185%" y="533" width="0.3341%" height="15" fill="rgb(214,114,15)" fg:x="43537" fg:w="370"/><text x="39.5685%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (239 samples, 0.22%)</title><rect x="39.4368%" y="517" width="0.2158%" height="15" fill="rgb(207,130,4)" fg:x="43668" fg:w="239"/><text x="39.6868%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (186 samples, 0.17%)</title><rect x="39.4847%" y="501" width="0.1680%" height="15" fill="rgb(221,25,40)" fg:x="43721" fg:w="186"/><text x="39.7347%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (123 samples, 0.11%)</title><rect x="39.5416%" y="485" width="0.1111%" height="15" fill="rgb(241,184,7)" fg:x="43784" fg:w="123"/><text x="39.7916%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (123 samples, 0.11%)</title><rect x="39.5416%" y="469" width="0.1111%" height="15" fill="rgb(235,159,4)" fg:x="43784" fg:w="123"/><text x="39.7916%" y="479.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.11%)</title><rect x="39.5416%" y="453" width="0.1111%" height="15" fill="rgb(214,87,48)" fg:x="43784" fg:w="123"/><text x="39.7916%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (121 samples, 0.11%)</title><rect x="39.5434%" y="437" width="0.1093%" height="15" fill="rgb(246,198,24)" fg:x="43786" fg:w="121"/><text x="39.7934%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (118 samples, 0.11%)</title><rect x="39.5461%" y="421" width="0.1066%" height="15" fill="rgb(209,66,40)" fg:x="43789" fg:w="118"/><text x="39.7961%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (118 samples, 0.11%)</title><rect x="39.5461%" y="405" width="0.1066%" height="15" fill="rgb(233,147,39)" fg:x="43789" fg:w="118"/><text x="39.7961%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (118 samples, 0.11%)</title><rect x="39.5461%" y="389" width="0.1066%" height="15" fill="rgb(231,145,52)" fg:x="43789" fg:w="118"/><text x="39.7961%" y="399.50"></text></g><g><title>[libc-2.31.so] (782 samples, 0.71%)</title><rect x="39.6527%" y="581" width="0.7062%" height="15" fill="rgb(206,20,26)" fg:x="43907" fg:w="782"/><text x="39.9027%" y="591.50"></text></g><g><title>sn_rust_dealloc (35 samples, 0.03%)</title><rect x="40.3679%" y="421" width="0.0316%" height="15" fill="rgb(238,220,4)" fg:x="44699" fg:w="35"/><text x="40.6179%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (43 samples, 0.04%)</title><rect x="40.3616%" y="581" width="0.0388%" height="15" fill="rgb(252,195,42)" fg:x="44692" fg:w="43"/><text x="40.6116%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="40.3616%" y="565" width="0.0388%" height="15" fill="rgb(209,10,6)" fg:x="44692" fg:w="43"/><text x="40.6116%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (38 samples, 0.03%)</title><rect x="40.3661%" y="549" width="0.0343%" height="15" fill="rgb(229,3,52)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (38 samples, 0.03%)</title><rect x="40.3661%" y="533" width="0.0343%" height="15" fill="rgb(253,49,37)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (38 samples, 0.03%)</title><rect x="40.3661%" y="517" width="0.0343%" height="15" fill="rgb(240,103,49)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="40.3661%" y="501" width="0.0343%" height="15" fill="rgb(250,182,30)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.03%)</title><rect x="40.3661%" y="485" width="0.0343%" height="15" fill="rgb(248,8,30)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.03%)</title><rect x="40.3661%" y="469" width="0.0343%" height="15" fill="rgb(237,120,30)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="479.50"></text></g><g><title>__rg_dealloc (38 samples, 0.03%)</title><rect x="40.3661%" y="453" width="0.0343%" height="15" fill="rgb(221,146,34)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (38 samples, 0.03%)</title><rect x="40.3661%" y="437" width="0.0343%" height="15" fill="rgb(242,55,13)" fg:x="44697" fg:w="38"/><text x="40.6161%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (31 samples, 0.03%)</title><rect x="40.4329%" y="565" width="0.0280%" height="15" fill="rgb(242,112,31)" fg:x="44771" fg:w="31"/><text x="40.6829%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (38 samples, 0.03%)</title><rect x="40.4609%" y="565" width="0.0343%" height="15" fill="rgb(249,192,27)" fg:x="44802" fg:w="38"/><text x="40.7109%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (120 samples, 0.11%)</title><rect x="40.4953%" y="549" width="0.1084%" height="15" fill="rgb(208,204,44)" fg:x="44840" fg:w="120"/><text x="40.7453%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (54 samples, 0.05%)</title><rect x="40.6479%" y="517" width="0.0488%" height="15" fill="rgb(208,93,54)" fg:x="45009" fg:w="54"/><text x="40.8979%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (54 samples, 0.05%)</title><rect x="40.6479%" y="501" width="0.0488%" height="15" fill="rgb(242,1,31)" fg:x="45009" fg:w="54"/><text x="40.8979%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (54 samples, 0.05%)</title><rect x="40.6479%" y="485" width="0.0488%" height="15" fill="rgb(241,83,25)" fg:x="45009" fg:w="54"/><text x="40.8979%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (54 samples, 0.05%)</title><rect x="40.6479%" y="469" width="0.0488%" height="15" fill="rgb(205,169,50)" fg:x="45009" fg:w="54"/><text x="40.8979%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (54 samples, 0.05%)</title><rect x="40.6479%" y="453" width="0.0488%" height="15" fill="rgb(239,186,37)" fg:x="45009" fg:w="54"/><text x="40.8979%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (29 samples, 0.03%)</title><rect x="40.6705%" y="437" width="0.0262%" height="15" fill="rgb(205,221,10)" fg:x="45034" fg:w="29"/><text x="40.9205%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (254 samples, 0.23%)</title><rect x="40.4953%" y="565" width="0.2294%" height="15" fill="rgb(218,196,15)" fg:x="44840" fg:w="254"/><text x="40.7453%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (134 samples, 0.12%)</title><rect x="40.6036%" y="549" width="0.1210%" height="15" fill="rgb(218,196,35)" fg:x="44960" fg:w="134"/><text x="40.8536%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (134 samples, 0.12%)</title><rect x="40.6036%" y="533" width="0.1210%" height="15" fill="rgb(233,63,24)" fg:x="44960" fg:w="134"/><text x="40.8536%" y="543.50"></text></g><g><title>core::time::Duration::new (31 samples, 0.03%)</title><rect x="40.6967%" y="517" width="0.0280%" height="15" fill="rgb(225,8,4)" fg:x="45063" fg:w="31"/><text x="40.9467%" y="527.50"></text></g><g><title>tremor_common::time::nanotime (976 samples, 0.88%)</title><rect x="40.4086%" y="581" width="0.8814%" height="15" fill="rgb(234,105,35)" fg:x="44744" fg:w="976"/><text x="40.6586%" y="591.50"></text></g><g><title>std::time::SystemTime::now (626 samples, 0.57%)</title><rect x="40.7247%" y="565" width="0.5653%" height="15" fill="rgb(236,21,32)" fg:x="45094" fg:w="626"/><text x="40.9747%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (626 samples, 0.57%)</title><rect x="40.7247%" y="549" width="0.5653%" height="15" fill="rgb(228,109,6)" fg:x="45094" fg:w="626"/><text x="40.9747%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (626 samples, 0.57%)</title><rect x="40.7247%" y="533" width="0.5653%" height="15" fill="rgb(229,215,31)" fg:x="45094" fg:w="626"/><text x="40.9747%" y="543.50"></text></g><g><title>__clock_gettime (484 samples, 0.44%)</title><rect x="40.8529%" y="517" width="0.4371%" height="15" fill="rgb(221,52,54)" fg:x="45236" fg:w="484"/><text x="41.1029%" y="527.50"></text></g><g><title>__vdso_clock_gettime (458 samples, 0.41%)</title><rect x="40.8764%" y="501" width="0.4136%" height="15" fill="rgb(252,129,43)" fg:x="45262" fg:w="458"/><text x="41.1264%" y="511.50"></text></g><g><title>[[vdso]] (409 samples, 0.37%)</title><rect x="40.9206%" y="485" width="0.3694%" height="15" fill="rgb(248,183,27)" fg:x="45311" fg:w="409"/><text x="41.1706%" y="495.50"></text></g><g><title>abi_stable::erased_types::iterator::next (19 samples, 0.02%)</title><rect x="41.3044%" y="469" width="0.0172%" height="15" fill="rgb(250,0,22)" fg:x="45736" fg:w="19"/><text x="41.5544%" y="479.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (12 samples, 0.01%)</title><rect x="41.3108%" y="453" width="0.0108%" height="15" fill="rgb(213,166,10)" fg:x="45743" fg:w="12"/><text x="41.5608%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="41.2972%" y="533" width="0.0316%" height="15" fill="rgb(207,163,36)" fg:x="45728" fg:w="35"/><text x="41.5472%" y="543.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="41.2972%" y="517" width="0.0316%" height="15" fill="rgb(208,122,22)" fg:x="45728" fg:w="35"/><text x="41.5472%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="41.2972%" y="501" width="0.0316%" height="15" fill="rgb(207,104,49)" fg:x="45728" fg:w="35"/><text x="41.5472%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (35 samples, 0.03%)</title><rect x="41.2972%" y="485" width="0.0316%" height="15" fill="rgb(248,211,50)" fg:x="45728" fg:w="35"/><text x="41.5472%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (45 samples, 0.04%)</title><rect x="41.3288%" y="533" width="0.0406%" height="15" fill="rgb(217,13,45)" fg:x="45763" fg:w="45"/><text x="41.5788%" y="543.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (45 samples, 0.04%)</title><rect x="41.3288%" y="517" width="0.0406%" height="15" fill="rgb(211,216,49)" fg:x="45763" fg:w="45"/><text x="41.5788%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (45 samples, 0.04%)</title><rect x="41.3288%" y="501" width="0.0406%" height="15" fill="rgb(221,58,53)" fg:x="45763" fg:w="45"/><text x="41.5788%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (45 samples, 0.04%)</title><rect x="41.3288%" y="485" width="0.0406%" height="15" fill="rgb(220,112,41)" fg:x="45763" fg:w="45"/><text x="41.5788%" y="495.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (21 samples, 0.02%)</title><rect x="41.3505%" y="469" width="0.0190%" height="15" fill="rgb(236,38,28)" fg:x="45787" fg:w="21"/><text x="41.6005%" y="479.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (21 samples, 0.02%)</title><rect x="41.3505%" y="453" width="0.0190%" height="15" fill="rgb(227,195,22)" fg:x="45787" fg:w="21"/><text x="41.6005%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (108 samples, 0.10%)</title><rect x="41.2900%" y="565" width="0.0975%" height="15" fill="rgb(214,55,33)" fg:x="45720" fg:w="108"/><text x="41.5400%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (107 samples, 0.10%)</title><rect x="41.2909%" y="549" width="0.0966%" height="15" fill="rgb(248,80,13)" fg:x="45721" fg:w="107"/><text x="41.5409%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (20 samples, 0.02%)</title><rect x="41.3695%" y="533" width="0.0181%" height="15" fill="rgb(238,52,6)" fg:x="45808" fg:w="20"/><text x="41.6195%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="41.3749%" y="517" width="0.0126%" height="15" fill="rgb(224,198,47)" fg:x="45814" fg:w="14"/><text x="41.6249%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="41.3749%" y="501" width="0.0126%" height="15" fill="rgb(233,171,20)" fg:x="45814" fg:w="14"/><text x="41.6249%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.02%)</title><rect x="41.3948%" y="485" width="0.0163%" height="15" fill="rgb(241,30,25)" fg:x="45836" fg:w="18"/><text x="41.6448%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.02%)</title><rect x="41.3948%" y="469" width="0.0163%" height="15" fill="rgb(207,171,38)" fg:x="45836" fg:w="18"/><text x="41.6448%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (12 samples, 0.01%)</title><rect x="41.4002%" y="453" width="0.0108%" height="15" fill="rgb(234,70,1)" fg:x="45842" fg:w="12"/><text x="41.6502%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="41.4002%" y="437" width="0.0108%" height="15" fill="rgb(232,178,18)" fg:x="45842" fg:w="12"/><text x="41.6502%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (95 samples, 0.09%)</title><rect x="41.4110%" y="485" width="0.0858%" height="15" fill="rgb(241,78,40)" fg:x="45854" fg:w="95"/><text x="41.6610%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (95 samples, 0.09%)</title><rect x="41.4110%" y="469" width="0.0858%" height="15" fill="rgb(222,35,25)" fg:x="45854" fg:w="95"/><text x="41.6610%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (90 samples, 0.08%)</title><rect x="41.4155%" y="453" width="0.0813%" height="15" fill="rgb(207,92,16)" fg:x="45859" fg:w="90"/><text x="41.6655%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (75 samples, 0.07%)</title><rect x="41.4291%" y="437" width="0.0677%" height="15" fill="rgb(216,59,51)" fg:x="45874" fg:w="75"/><text x="41.6791%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (70 samples, 0.06%)</title><rect x="41.4336%" y="421" width="0.0632%" height="15" fill="rgb(213,80,28)" fg:x="45879" fg:w="70"/><text x="41.6836%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (70 samples, 0.06%)</title><rect x="41.4336%" y="405" width="0.0632%" height="15" fill="rgb(220,93,7)" fg:x="45879" fg:w="70"/><text x="41.6836%" y="415.50"></text></g><g><title>alloc::alloc::alloc (70 samples, 0.06%)</title><rect x="41.4336%" y="389" width="0.0632%" height="15" fill="rgb(225,24,44)" fg:x="45879" fg:w="70"/><text x="41.6836%" y="399.50"></text></g><g><title>__rg_alloc (70 samples, 0.06%)</title><rect x="41.4336%" y="373" width="0.0632%" height="15" fill="rgb(243,74,40)" fg:x="45879" fg:w="70"/><text x="41.6836%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (70 samples, 0.06%)</title><rect x="41.4336%" y="357" width="0.0632%" height="15" fill="rgb(228,39,7)" fg:x="45879" fg:w="70"/><text x="41.6836%" y="367.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.06%)</title><rect x="41.4363%" y="341" width="0.0605%" height="15" fill="rgb(227,79,8)" fg:x="45882" fg:w="67"/><text x="41.6863%" y="351.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (68 samples, 0.06%)</title><rect x="41.5049%" y="437" width="0.0614%" height="15" fill="rgb(236,58,11)" fg:x="45958" fg:w="68"/><text x="41.7549%" y="447.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="41.5266%" y="421" width="0.0397%" height="15" fill="rgb(249,63,35)" fg:x="45982" fg:w="44"/><text x="41.7766%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (224 samples, 0.20%)</title><rect x="41.3875%" y="565" width="0.2023%" height="15" fill="rgb(252,114,16)" fg:x="45828" fg:w="224"/><text x="41.6375%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (224 samples, 0.20%)</title><rect x="41.3875%" y="549" width="0.2023%" height="15" fill="rgb(254,151,24)" fg:x="45828" fg:w="224"/><text x="41.6375%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (219 samples, 0.20%)</title><rect x="41.3920%" y="533" width="0.1978%" height="15" fill="rgb(253,54,39)" fg:x="45833" fg:w="219"/><text x="41.6420%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (219 samples, 0.20%)</title><rect x="41.3920%" y="517" width="0.1978%" height="15" fill="rgb(243,25,45)" fg:x="45833" fg:w="219"/><text x="41.6420%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (219 samples, 0.20%)</title><rect x="41.3920%" y="501" width="0.1978%" height="15" fill="rgb(234,134,9)" fg:x="45833" fg:w="219"/><text x="41.6420%" y="511.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (94 samples, 0.08%)</title><rect x="41.5049%" y="485" width="0.0849%" height="15" fill="rgb(227,166,31)" fg:x="45958" fg:w="94"/><text x="41.7549%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (94 samples, 0.08%)</title><rect x="41.5049%" y="469" width="0.0849%" height="15" fill="rgb(245,143,41)" fg:x="45958" fg:w="94"/><text x="41.7549%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (94 samples, 0.08%)</title><rect x="41.5049%" y="453" width="0.0849%" height="15" fill="rgb(238,181,32)" fg:x="45958" fg:w="94"/><text x="41.7549%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (26 samples, 0.02%)</title><rect x="41.5663%" y="437" width="0.0235%" height="15" fill="rgb(224,113,18)" fg:x="46026" fg:w="26"/><text x="41.8163%" y="447.50"></text></g><g><title>core::ptr::read (26 samples, 0.02%)</title><rect x="41.5663%" y="421" width="0.0235%" height="15" fill="rgb(240,229,28)" fg:x="46026" fg:w="26"/><text x="41.8163%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.02%)</title><rect x="41.6061%" y="453" width="0.0163%" height="15" fill="rgb(250,185,3)" fg:x="46070" fg:w="18"/><text x="41.8561%" y="463.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (440 samples, 0.40%)</title><rect x="41.2900%" y="581" width="0.3974%" height="15" fill="rgb(212,59,25)" fg:x="45720" fg:w="440"/><text x="41.5400%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (108 samples, 0.10%)</title><rect x="41.5898%" y="565" width="0.0975%" height="15" fill="rgb(221,87,20)" fg:x="46052" fg:w="108"/><text x="41.8398%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (108 samples, 0.10%)</title><rect x="41.5898%" y="549" width="0.0975%" height="15" fill="rgb(213,74,28)" fg:x="46052" fg:w="108"/><text x="41.8398%" y="559.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.10%)</title><rect x="41.5898%" y="533" width="0.0975%" height="15" fill="rgb(224,132,34)" fg:x="46052" fg:w="108"/><text x="41.8398%" y="543.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (96 samples, 0.09%)</title><rect x="41.6007%" y="517" width="0.0867%" height="15" fill="rgb(222,101,24)" fg:x="46064" fg:w="96"/><text x="41.8507%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (93 samples, 0.08%)</title><rect x="41.6034%" y="501" width="0.0840%" height="15" fill="rgb(254,142,4)" fg:x="46067" fg:w="93"/><text x="41.8534%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (93 samples, 0.08%)</title><rect x="41.6034%" y="485" width="0.0840%" height="15" fill="rgb(230,229,49)" fg:x="46067" fg:w="93"/><text x="41.8534%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (93 samples, 0.08%)</title><rect x="41.6034%" y="469" width="0.0840%" height="15" fill="rgb(238,70,47)" fg:x="46067" fg:w="93"/><text x="41.8534%" y="479.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.07%)</title><rect x="41.6223%" y="453" width="0.0650%" height="15" fill="rgb(231,160,17)" fg:x="46088" fg:w="72"/><text x="41.8723%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,917 samples, 8.05%)</title><rect x="33.6470%" y="597" width="8.0530%" height="15" fill="rgb(218,68,53)" fg:x="37257" fg:w="8917"/><text x="33.8970%" y="607.50">tremor_runt..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 0.14%)</title><rect x="41.7686%" y="485" width="0.1418%" height="15" fill="rgb(236,111,10)" fg:x="46250" fg:w="157"/><text x="42.0186%" y="495.50"></text></g><g><title>core::ptr::read (150 samples, 0.14%)</title><rect x="41.7750%" y="469" width="0.1355%" height="15" fill="rgb(224,34,41)" fg:x="46257" fg:w="150"/><text x="42.0250%" y="479.50"></text></g><g><title>[libc-2.31.so] (143 samples, 0.13%)</title><rect x="41.7813%" y="453" width="0.1291%" height="15" fill="rgb(241,118,19)" fg:x="46264" fg:w="143"/><text x="42.0313%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (95 samples, 0.09%)</title><rect x="41.9140%" y="357" width="0.0858%" height="15" fill="rgb(238,129,25)" fg:x="46411" fg:w="95"/><text x="42.1640%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (95 samples, 0.09%)</title><rect x="41.9140%" y="341" width="0.0858%" height="15" fill="rgb(238,22,31)" fg:x="46411" fg:w="95"/><text x="42.1640%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (95 samples, 0.09%)</title><rect x="41.9140%" y="325" width="0.0858%" height="15" fill="rgb(222,174,48)" fg:x="46411" fg:w="95"/><text x="42.1640%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (94 samples, 0.08%)</title><rect x="41.9149%" y="309" width="0.0849%" height="15" fill="rgb(206,152,40)" fg:x="46412" fg:w="94"/><text x="42.1649%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (94 samples, 0.08%)</title><rect x="41.9149%" y="293" width="0.0849%" height="15" fill="rgb(218,99,54)" fg:x="46412" fg:w="94"/><text x="42.1649%" y="303.50"></text></g><g><title>alloc::alloc::alloc (94 samples, 0.08%)</title><rect x="41.9149%" y="277" width="0.0849%" height="15" fill="rgb(220,174,26)" fg:x="46412" fg:w="94"/><text x="42.1649%" y="287.50"></text></g><g><title>__rg_alloc (94 samples, 0.08%)</title><rect x="41.9149%" y="261" width="0.0849%" height="15" fill="rgb(245,116,9)" fg:x="46412" fg:w="94"/><text x="42.1649%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (94 samples, 0.08%)</title><rect x="41.9149%" y="245" width="0.0849%" height="15" fill="rgb(209,72,35)" fg:x="46412" fg:w="94"/><text x="42.1649%" y="255.50"></text></g><g><title>sn_rust_alloc (91 samples, 0.08%)</title><rect x="41.9177%" y="229" width="0.0822%" height="15" fill="rgb(226,126,21)" fg:x="46415" fg:w="91"/><text x="42.1677%" y="239.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (107 samples, 0.10%)</title><rect x="41.9140%" y="485" width="0.0966%" height="15" fill="rgb(227,192,1)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (107 samples, 0.10%)</title><rect x="41.9140%" y="469" width="0.0966%" height="15" fill="rgb(237,180,29)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="479.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (107 samples, 0.10%)</title><rect x="41.9140%" y="453" width="0.0966%" height="15" fill="rgb(230,197,35)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (107 samples, 0.10%)</title><rect x="41.9140%" y="437" width="0.0966%" height="15" fill="rgb(246,193,31)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (107 samples, 0.10%)</title><rect x="41.9140%" y="421" width="0.0966%" height="15" fill="rgb(241,36,4)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (107 samples, 0.10%)</title><rect x="41.9140%" y="405" width="0.0966%" height="15" fill="rgb(241,130,17)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (107 samples, 0.10%)</title><rect x="41.9140%" y="389" width="0.0966%" height="15" fill="rgb(206,137,32)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (107 samples, 0.10%)</title><rect x="41.9140%" y="373" width="0.0966%" height="15" fill="rgb(237,228,51)" fg:x="46411" fg:w="107"/><text x="42.1640%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.01%)</title><rect x="41.9998%" y="357" width="0.0108%" height="15" fill="rgb(243,6,42)" fg:x="46506" fg:w="12"/><text x="42.2498%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="41.9998%" y="341" width="0.0108%" height="15" fill="rgb(251,74,28)" fg:x="46506" fg:w="12"/><text x="42.2498%" y="351.50"></text></g><g><title>[libc-2.31.so] (319 samples, 0.29%)</title><rect x="42.0107%" y="485" width="0.2881%" height="15" fill="rgb(218,20,49)" fg:x="46518" fg:w="319"/><text x="42.2607%" y="495.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.11%)</title><rect x="42.3015%" y="469" width="0.1138%" height="15" fill="rgb(238,28,14)" fg:x="46840" fg:w="126"/><text x="42.5515%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (300 samples, 0.27%)</title><rect x="42.4451%" y="357" width="0.2709%" height="15" fill="rgb(229,40,46)" fg:x="46999" fg:w="300"/><text x="42.6951%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (477 samples, 0.43%)</title><rect x="42.2988%" y="485" width="0.4308%" height="15" fill="rgb(244,195,20)" fg:x="46837" fg:w="477"/><text x="42.5488%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (348 samples, 0.31%)</title><rect x="42.4153%" y="469" width="0.3143%" height="15" fill="rgb(253,56,35)" fg:x="46966" fg:w="348"/><text x="42.6653%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (348 samples, 0.31%)</title><rect x="42.4153%" y="453" width="0.3143%" height="15" fill="rgb(210,149,44)" fg:x="46966" fg:w="348"/><text x="42.6653%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (348 samples, 0.31%)</title><rect x="42.4153%" y="437" width="0.3143%" height="15" fill="rgb(240,135,12)" fg:x="46966" fg:w="348"/><text x="42.6653%" y="447.50"></text></g><g><title>alloc::alloc::alloc (348 samples, 0.31%)</title><rect x="42.4153%" y="421" width="0.3143%" height="15" fill="rgb(251,24,50)" fg:x="46966" fg:w="348"/><text x="42.6653%" y="431.50"></text></g><g><title>__rg_alloc (348 samples, 0.31%)</title><rect x="42.4153%" y="405" width="0.3143%" height="15" fill="rgb(243,200,47)" fg:x="46966" fg:w="348"/><text x="42.6653%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (348 samples, 0.31%)</title><rect x="42.4153%" y="389" width="0.3143%" height="15" fill="rgb(224,166,26)" fg:x="46966" fg:w="348"/><text x="42.6653%" y="399.50"></text></g><g><title>sn_rust_alloc (348 samples, 0.31%)</title><rect x="42.4153%" y="373" width="0.3143%" height="15" fill="rgb(233,0,47)" fg:x="46966" fg:w="348"/><text x="42.6653%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="42.7160%" y="357" width="0.0135%" height="15" fill="rgb(253,80,5)" fg:x="47299" fg:w="15"/><text x="42.9660%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="42.7295%" y="469" width="0.0199%" height="15" fill="rgb(214,133,25)" fg:x="47314" fg:w="22"/><text x="42.9795%" y="479.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="42.7494%" y="469" width="0.0163%" height="15" fill="rgb(209,27,14)" fg:x="47336" fg:w="18"/><text x="42.9994%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (46 samples, 0.04%)</title><rect x="42.7295%" y="485" width="0.0415%" height="15" fill="rgb(219,102,51)" fg:x="47314" fg:w="46"/><text x="42.9795%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (17 samples, 0.02%)</title><rect x="42.7774%" y="485" width="0.0154%" height="15" fill="rgb(237,18,16)" fg:x="47367" fg:w="17"/><text x="43.0274%" y="495.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (17 samples, 0.02%)</title><rect x="42.7774%" y="469" width="0.0154%" height="15" fill="rgb(241,85,17)" fg:x="47367" fg:w="17"/><text x="43.0274%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (16 samples, 0.01%)</title><rect x="42.7783%" y="453" width="0.0144%" height="15" fill="rgb(236,90,42)" fg:x="47368" fg:w="16"/><text x="43.0283%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 0.01%)</title><rect x="42.7783%" y="437" width="0.0144%" height="15" fill="rgb(249,57,21)" fg:x="47368" fg:w="16"/><text x="43.0283%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,220 samples, 1.10%)</title><rect x="41.7000%" y="517" width="1.1018%" height="15" fill="rgb(243,12,36)" fg:x="46174" fg:w="1220"/><text x="41.9500%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,220 samples, 1.10%)</title><rect x="41.7000%" y="501" width="1.1018%" height="15" fill="rgb(253,128,47)" fg:x="46174" fg:w="1220"/><text x="41.9500%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,248 samples, 1.13%)</title><rect x="41.7000%" y="581" width="1.1271%" height="15" fill="rgb(207,33,20)" fg:x="46174" fg:w="1248"/><text x="41.9500%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,248 samples, 1.13%)</title><rect x="41.7000%" y="565" width="1.1271%" height="15" fill="rgb(233,215,35)" fg:x="46174" fg:w="1248"/><text x="41.9500%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,248 samples, 1.13%)</title><rect x="41.7000%" y="549" width="1.1271%" height="15" fill="rgb(249,188,52)" fg:x="46174" fg:w="1248"/><text x="41.9500%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,248 samples, 1.13%)</title><rect x="41.7000%" y="533" width="1.1271%" height="15" fill="rgb(225,12,32)" fg:x="46174" fg:w="1248"/><text x="41.9500%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (28 samples, 0.03%)</title><rect x="42.8018%" y="517" width="0.0253%" height="15" fill="rgb(247,98,14)" fg:x="47394" fg:w="28"/><text x="43.0518%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (18 samples, 0.02%)</title><rect x="42.8108%" y="501" width="0.0163%" height="15" fill="rgb(247,219,48)" fg:x="47404" fg:w="18"/><text x="43.0608%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (18 samples, 0.02%)</title><rect x="42.8108%" y="485" width="0.0163%" height="15" fill="rgb(253,60,48)" fg:x="47404" fg:w="18"/><text x="43.0608%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (18 samples, 0.02%)</title><rect x="42.8108%" y="469" width="0.0163%" height="15" fill="rgb(245,15,52)" fg:x="47404" fg:w="18"/><text x="43.0608%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (18 samples, 0.02%)</title><rect x="42.8108%" y="453" width="0.0163%" height="15" fill="rgb(220,133,28)" fg:x="47404" fg:w="18"/><text x="43.0608%" y="463.50"></text></g><g><title>[libc-2.31.so] (266 samples, 0.24%)</title><rect x="42.8813%" y="565" width="0.2402%" height="15" fill="rgb(217,180,4)" fg:x="47482" fg:w="266"/><text x="43.1313%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="43.1215%" y="565" width="0.0108%" height="15" fill="rgb(251,24,1)" fg:x="47748" fg:w="12"/><text x="43.3715%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="43.1215%" y="549" width="0.0108%" height="15" fill="rgb(212,185,49)" fg:x="47748" fg:w="12"/><text x="43.3715%" y="559.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="43.1215%" y="533" width="0.0108%" height="15" fill="rgb(215,175,22)" fg:x="47748" fg:w="12"/><text x="43.3715%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="43.1215%" y="517" width="0.0108%" height="15" fill="rgb(250,205,14)" fg:x="47748" fg:w="12"/><text x="43.3715%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="43.1215%" y="501" width="0.0108%" height="15" fill="rgb(225,211,22)" fg:x="47748" fg:w="12"/><text x="43.3715%" y="511.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="43.1215%" y="485" width="0.0108%" height="15" fill="rgb(251,179,42)" fg:x="47748" fg:w="12"/><text x="43.3715%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="43.1215%" y="469" width="0.0108%" height="15" fill="rgb(208,216,51)" fg:x="47748" fg:w="12"/><text x="43.3715%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (41 samples, 0.04%)</title><rect x="43.1874%" y="501" width="0.0370%" height="15" fill="rgb(235,36,11)" fg:x="47821" fg:w="41"/><text x="43.4374%" y="511.50"></text></g><g><title>core::mem::replace (41 samples, 0.04%)</title><rect x="43.1874%" y="485" width="0.0370%" height="15" fill="rgb(213,189,28)" fg:x="47821" fg:w="41"/><text x="43.4374%" y="495.50"></text></g><g><title>core::ptr::read (41 samples, 0.04%)</title><rect x="43.1874%" y="469" width="0.0370%" height="15" fill="rgb(227,203,42)" fg:x="47821" fg:w="41"/><text x="43.4374%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (67 samples, 0.06%)</title><rect x="43.1694%" y="517" width="0.0605%" height="15" fill="rgb(244,72,36)" fg:x="47801" fg:w="67"/><text x="43.4194%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (71 samples, 0.06%)</title><rect x="43.2299%" y="517" width="0.0641%" height="15" fill="rgb(213,53,17)" fg:x="47868" fg:w="71"/><text x="43.4799%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (69 samples, 0.06%)</title><rect x="43.2317%" y="501" width="0.0623%" height="15" fill="rgb(207,167,3)" fg:x="47870" fg:w="69"/><text x="43.4817%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="43.2317%" y="485" width="0.0623%" height="15" fill="rgb(216,98,30)" fg:x="47870" fg:w="69"/><text x="43.4817%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (61 samples, 0.06%)</title><rect x="43.2389%" y="469" width="0.0551%" height="15" fill="rgb(236,123,15)" fg:x="47878" fg:w="61"/><text x="43.4889%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (61 samples, 0.06%)</title><rect x="43.2389%" y="453" width="0.0551%" height="15" fill="rgb(248,81,50)" fg:x="47878" fg:w="61"/><text x="43.4889%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (60 samples, 0.05%)</title><rect x="43.2398%" y="437" width="0.0542%" height="15" fill="rgb(214,120,4)" fg:x="47879" fg:w="60"/><text x="43.4898%" y="447.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.02%)</title><rect x="43.2940%" y="517" width="0.0154%" height="15" fill="rgb(208,179,34)" fg:x="47939" fg:w="17"/><text x="43.5440%" y="527.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.02%)</title><rect x="43.2940%" y="501" width="0.0154%" height="15" fill="rgb(227,140,7)" fg:x="47939" fg:w="17"/><text x="43.5440%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="43.2985%" y="485" width="0.0108%" height="15" fill="rgb(214,22,6)" fg:x="47944" fg:w="12"/><text x="43.5485%" y="495.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="43.2985%" y="469" width="0.0108%" height="15" fill="rgb(207,137,27)" fg:x="47944" fg:w="12"/><text x="43.5485%" y="479.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (289 samples, 0.26%)</title><rect x="43.1468%" y="533" width="0.2610%" height="15" fill="rgb(210,8,46)" fg:x="47776" fg:w="289"/><text x="43.3968%" y="543.50"></text></g><g><title>event_listener::Inner::lock (109 samples, 0.10%)</title><rect x="43.3093%" y="517" width="0.0984%" height="15" fill="rgb(240,16,54)" fg:x="47956" fg:w="109"/><text x="43.5593%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.09%)</title><rect x="43.3130%" y="501" width="0.0948%" height="15" fill="rgb(211,209,29)" fg:x="47960" fg:w="105"/><text x="43.5630%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (103 samples, 0.09%)</title><rect x="43.3148%" y="485" width="0.0930%" height="15" fill="rgb(226,228,24)" fg:x="47962" fg:w="103"/><text x="43.5648%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (103 samples, 0.09%)</title><rect x="43.3148%" y="469" width="0.0930%" height="15" fill="rgb(222,84,9)" fg:x="47962" fg:w="103"/><text x="43.5648%" y="479.50"></text></g><g><title>__GI___pthread_mutex_lock (103 samples, 0.09%)</title><rect x="43.3148%" y="453" width="0.0930%" height="15" fill="rgb(234,203,30)" fg:x="47962" fg:w="103"/><text x="43.5648%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (91 samples, 0.08%)</title><rect x="43.4204%" y="485" width="0.0822%" height="15" fill="rgb(238,109,14)" fg:x="48079" fg:w="91"/><text x="43.6704%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (91 samples, 0.08%)</title><rect x="43.4204%" y="469" width="0.0822%" height="15" fill="rgb(233,206,34)" fg:x="48079" fg:w="91"/><text x="43.6704%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (91 samples, 0.08%)</title><rect x="43.4204%" y="453" width="0.0822%" height="15" fill="rgb(220,167,47)" fg:x="48079" fg:w="91"/><text x="43.6704%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (91 samples, 0.08%)</title><rect x="43.4204%" y="437" width="0.0822%" height="15" fill="rgb(238,105,10)" fg:x="48079" fg:w="91"/><text x="43.6704%" y="447.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (422 samples, 0.38%)</title><rect x="43.1323%" y="549" width="0.3811%" height="15" fill="rgb(213,227,17)" fg:x="47760" fg:w="422"/><text x="43.3823%" y="559.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (117 samples, 0.11%)</title><rect x="43.4078%" y="533" width="0.1057%" height="15" fill="rgb(217,132,38)" fg:x="48065" fg:w="117"/><text x="43.6578%" y="543.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (111 samples, 0.10%)</title><rect x="43.4132%" y="517" width="0.1002%" height="15" fill="rgb(242,146,4)" fg:x="48071" fg:w="111"/><text x="43.6632%" y="527.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (110 samples, 0.10%)</title><rect x="43.4141%" y="501" width="0.0993%" height="15" fill="rgb(212,61,9)" fg:x="48072" fg:w="110"/><text x="43.6641%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,010 samples, 1.82%)</title><rect x="41.7000%" y="597" width="1.8152%" height="15" fill="rgb(247,126,22)" fg:x="46174" fg:w="2010"/><text x="41.9500%" y="607.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (762 samples, 0.69%)</title><rect x="42.8271%" y="581" width="0.6882%" height="15" fill="rgb(220,196,2)" fg:x="47422" fg:w="762"/><text x="43.0771%" y="591.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (424 samples, 0.38%)</title><rect x="43.1323%" y="565" width="0.3829%" height="15" fill="rgb(208,46,4)" fg:x="47760" fg:w="424"/><text x="43.3823%" y="575.50"></text></g><g><title>[libc-2.31.so] (172 samples, 0.16%)</title><rect x="43.7510%" y="565" width="0.1553%" height="15" fill="rgb(252,104,46)" fg:x="48445" fg:w="172"/><text x="44.0010%" y="575.50"></text></g><g><title>[libc-2.31.so] (372 samples, 0.34%)</title><rect x="43.9686%" y="549" width="0.3360%" height="15" fill="rgb(237,152,48)" fg:x="48686" fg:w="372"/><text x="44.2186%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (175 samples, 0.16%)</title><rect x="44.3046%" y="549" width="0.1580%" height="15" fill="rgb(221,59,37)" fg:x="49058" fg:w="175"/><text x="44.5546%" y="559.50"></text></g><g><title>core::ptr::write (170 samples, 0.15%)</title><rect x="44.3091%" y="533" width="0.1535%" height="15" fill="rgb(209,202,51)" fg:x="49063" fg:w="170"/><text x="44.5591%" y="543.50"></text></g><g><title>[libc-2.31.so] (164 samples, 0.15%)</title><rect x="44.3145%" y="517" width="0.1481%" height="15" fill="rgb(228,81,30)" fg:x="49069" fg:w="164"/><text x="44.5645%" y="527.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (307 samples, 0.28%)</title><rect x="44.4689%" y="549" width="0.2773%" height="15" fill="rgb(227,42,39)" fg:x="49240" fg:w="307"/><text x="44.7189%" y="559.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (300 samples, 0.27%)</title><rect x="44.4753%" y="533" width="0.2709%" height="15" fill="rgb(221,26,2)" fg:x="49247" fg:w="300"/><text x="44.7253%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (284 samples, 0.26%)</title><rect x="44.4897%" y="517" width="0.2565%" height="15" fill="rgb(254,61,31)" fg:x="49263" fg:w="284"/><text x="44.7397%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (284 samples, 0.26%)</title><rect x="44.4897%" y="501" width="0.2565%" height="15" fill="rgb(222,173,38)" fg:x="49263" fg:w="284"/><text x="44.7397%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (284 samples, 0.26%)</title><rect x="44.4897%" y="485" width="0.2565%" height="15" fill="rgb(218,50,12)" fg:x="49263" fg:w="284"/><text x="44.7397%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (284 samples, 0.26%)</title><rect x="44.4897%" y="469" width="0.2565%" height="15" fill="rgb(223,88,40)" fg:x="49263" fg:w="284"/><text x="44.7397%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (284 samples, 0.26%)</title><rect x="44.4897%" y="453" width="0.2565%" height="15" fill="rgb(237,54,19)" fg:x="49263" fg:w="284"/><text x="44.7397%" y="463.50"></text></g><g><title>[libc-2.31.so] (272 samples, 0.25%)</title><rect x="44.5005%" y="437" width="0.2456%" height="15" fill="rgb(251,129,25)" fg:x="49275" fg:w="272"/><text x="44.7505%" y="447.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="45.1417%" y="517" width="0.0135%" height="15" fill="rgb(238,97,19)" fg:x="49985" fg:w="15"/><text x="45.3917%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="45.1616%" y="517" width="0.0163%" height="15" fill="rgb(240,169,18)" fg:x="50007" fg:w="18"/><text x="45.4116%" y="527.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (227 samples, 0.21%)</title><rect x="45.1779%" y="517" width="0.2050%" height="15" fill="rgb(230,187,49)" fg:x="50025" fg:w="227"/><text x="45.4279%" y="527.50"></text></g><g><title>[libc-2.31.so] (196 samples, 0.18%)</title><rect x="45.2059%" y="501" width="0.1770%" height="15" fill="rgb(209,44,26)" fg:x="50056" fg:w="196"/><text x="45.4559%" y="511.50"></text></g><g><title>[libc-2.31.so] (995 samples, 0.90%)</title><rect x="45.3829%" y="517" width="0.8986%" height="15" fill="rgb(244,0,6)" fg:x="50252" fg:w="995"/><text x="45.6329%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (305 samples, 0.28%)</title><rect x="46.2869%" y="517" width="0.2754%" height="15" fill="rgb(248,18,21)" fg:x="51253" fg:w="305"/><text x="46.5369%" y="527.50"></text></g><g><title>core::ptr::read (278 samples, 0.25%)</title><rect x="46.3113%" y="501" width="0.2511%" height="15" fill="rgb(245,180,19)" fg:x="51280" fg:w="278"/><text x="46.5613%" y="511.50"></text></g><g><title>[libc-2.31.so] (223 samples, 0.20%)</title><rect x="46.3609%" y="485" width="0.2014%" height="15" fill="rgb(252,118,36)" fg:x="51335" fg:w="223"/><text x="46.6109%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (166 samples, 0.15%)</title><rect x="46.5623%" y="517" width="0.1499%" height="15" fill="rgb(210,224,19)" fg:x="51558" fg:w="166"/><text x="46.8123%" y="527.50"></text></g><g><title>core::ptr::write (158 samples, 0.14%)</title><rect x="46.5696%" y="501" width="0.1427%" height="15" fill="rgb(218,30,24)" fg:x="51566" fg:w="158"/><text x="46.8196%" y="511.50"></text></g><g><title>[libc-2.31.so] (158 samples, 0.14%)</title><rect x="46.5696%" y="485" width="0.1427%" height="15" fill="rgb(219,75,50)" fg:x="51566" fg:w="158"/><text x="46.8196%" y="495.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (23 samples, 0.02%)</title><rect x="46.7213%" y="485" width="0.0208%" height="15" fill="rgb(234,72,50)" fg:x="51734" fg:w="23"/><text x="46.9713%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (13 samples, 0.01%)</title><rect x="46.7303%" y="469" width="0.0117%" height="15" fill="rgb(219,100,48)" fg:x="51744" fg:w="13"/><text x="46.9803%" y="479.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (13 samples, 0.01%)</title><rect x="46.7303%" y="453" width="0.0117%" height="15" fill="rgb(253,5,41)" fg:x="51744" fg:w="13"/><text x="46.9803%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="46.7303%" y="437" width="0.0117%" height="15" fill="rgb(247,181,11)" fg:x="51744" fg:w="13"/><text x="46.9803%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (13 samples, 0.01%)</title><rect x="46.7303%" y="421" width="0.0117%" height="15" fill="rgb(222,223,25)" fg:x="51744" fg:w="13"/><text x="46.9803%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (54 samples, 0.05%)</title><rect x="46.7122%" y="517" width="0.0488%" height="15" fill="rgb(214,198,28)" fg:x="51724" fg:w="54"/><text x="46.9622%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="46.7204%" y="501" width="0.0406%" height="15" fill="rgb(230,46,43)" fg:x="51733" fg:w="45"/><text x="46.9704%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (12 samples, 0.01%)</title><rect x="46.7610%" y="517" width="0.0108%" height="15" fill="rgb(233,65,53)" fg:x="51778" fg:w="12"/><text x="47.0110%" y="527.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="46.7610%" y="501" width="0.0108%" height="15" fill="rgb(221,121,27)" fg:x="51778" fg:w="12"/><text x="47.0110%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (17 samples, 0.02%)</title><rect x="46.7718%" y="517" width="0.0154%" height="15" fill="rgb(247,70,47)" fg:x="51790" fg:w="17"/><text x="47.0218%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (17 samples, 0.02%)</title><rect x="46.7718%" y="501" width="0.0154%" height="15" fill="rgb(228,85,35)" fg:x="51790" fg:w="17"/><text x="47.0218%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (17 samples, 0.02%)</title><rect x="46.7718%" y="485" width="0.0154%" height="15" fill="rgb(209,50,18)" fg:x="51790" fg:w="17"/><text x="47.0218%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (17 samples, 0.02%)</title><rect x="46.7718%" y="469" width="0.0154%" height="15" fill="rgb(250,19,35)" fg:x="51790" fg:w="17"/><text x="47.0218%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (13 samples, 0.01%)</title><rect x="47.0310%" y="485" width="0.0117%" height="15" fill="rgb(253,107,29)" fg:x="52077" fg:w="13"/><text x="47.2810%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (187 samples, 0.17%)</title><rect x="47.0157%" y="501" width="0.1689%" height="15" fill="rgb(252,179,29)" fg:x="52060" fg:w="187"/><text x="47.2657%" y="511.50"></text></g><g><title>core::ptr::read (157 samples, 0.14%)</title><rect x="47.0428%" y="485" width="0.1418%" height="15" fill="rgb(238,194,6)" fg:x="52090" fg:w="157"/><text x="47.2928%" y="495.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.11%)</title><rect x="47.0708%" y="469" width="0.1138%" height="15" fill="rgb(238,164,29)" fg:x="52121" fg:w="126"/><text x="47.3208%" y="479.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="47.1846%" y="501" width="0.0135%" height="15" fill="rgb(224,25,9)" fg:x="52247" fg:w="15"/><text x="47.4346%" y="511.50"></text></g><g><title>[libc-2.31.so] (369 samples, 0.33%)</title><rect x="47.1981%" y="501" width="0.3332%" height="15" fill="rgb(244,153,23)" fg:x="52262" fg:w="369"/><text x="47.4481%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (343 samples, 0.31%)</title><rect x="47.5314%" y="501" width="0.3098%" height="15" fill="rgb(212,203,14)" fg:x="52631" fg:w="343"/><text x="47.7814%" y="511.50"></text></g><g><title>core::ptr::write (337 samples, 0.30%)</title><rect x="47.5368%" y="485" width="0.3043%" height="15" fill="rgb(220,164,20)" fg:x="52637" fg:w="337"/><text x="47.7868%" y="495.50"></text></g><g><title>[libc-2.31.so] (333 samples, 0.30%)</title><rect x="47.5404%" y="469" width="0.3007%" height="15" fill="rgb(222,203,48)" fg:x="52641" fg:w="333"/><text x="47.7904%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (13 samples, 0.01%)</title><rect x="47.8411%" y="501" width="0.0117%" height="15" fill="rgb(215,159,22)" fg:x="52974" fg:w="13"/><text x="48.0911%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (13 samples, 0.01%)</title><rect x="47.8411%" y="485" width="0.0117%" height="15" fill="rgb(216,183,47)" fg:x="52974" fg:w="13"/><text x="48.0911%" y="495.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (12 samples, 0.01%)</title><rect x="47.8673%" y="469" width="0.0108%" height="15" fill="rgb(229,195,25)" fg:x="53003" fg:w="12"/><text x="48.1173%" y="479.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (12 samples, 0.01%)</title><rect x="47.8673%" y="453" width="0.0108%" height="15" fill="rgb(224,132,51)" fg:x="53003" fg:w="12"/><text x="48.1173%" y="463.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (12 samples, 0.01%)</title><rect x="47.8673%" y="437" width="0.0108%" height="15" fill="rgb(240,63,7)" fg:x="53003" fg:w="12"/><text x="48.1173%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="47.8673%" y="421" width="0.0108%" height="15" fill="rgb(249,182,41)" fg:x="53003" fg:w="12"/><text x="48.1173%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (12 samples, 0.01%)</title><rect x="47.8673%" y="405" width="0.0108%" height="15" fill="rgb(243,47,26)" fg:x="53003" fg:w="12"/><text x="48.1173%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="47.8782%" y="405" width="0.0135%" height="15" fill="rgb(233,48,2)" fg:x="53015" fg:w="15"/><text x="48.1282%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="47.8782%" y="389" width="0.0135%" height="15" fill="rgb(244,165,34)" fg:x="53015" fg:w="15"/><text x="48.1282%" y="399.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="47.8782%" y="373" width="0.0135%" height="15" fill="rgb(207,89,7)" fg:x="53015" fg:w="15"/><text x="48.1282%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="47.8782%" y="357" width="0.0135%" height="15" fill="rgb(244,117,36)" fg:x="53015" fg:w="15"/><text x="48.1282%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (23 samples, 0.02%)</title><rect x="47.8782%" y="469" width="0.0208%" height="15" fill="rgb(226,144,34)" fg:x="53015" fg:w="23"/><text x="48.1282%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="47.8782%" y="453" width="0.0208%" height="15" fill="rgb(213,23,19)" fg:x="53015" fg:w="23"/><text x="48.1282%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (23 samples, 0.02%)</title><rect x="47.8782%" y="437" width="0.0208%" height="15" fill="rgb(217,75,12)" fg:x="53015" fg:w="23"/><text x="48.1282%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="47.8782%" y="421" width="0.0208%" height="15" fill="rgb(224,159,17)" fg:x="53015" fg:w="23"/><text x="48.1282%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.06%)</title><rect x="47.8601%" y="485" width="0.0551%" height="15" fill="rgb(217,118,1)" fg:x="52995" fg:w="61"/><text x="48.1101%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (18 samples, 0.02%)</title><rect x="47.8989%" y="469" width="0.0163%" height="15" fill="rgb(232,180,48)" fg:x="53038" fg:w="18"/><text x="48.1489%" y="479.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.08%)</title><rect x="47.9152%" y="485" width="0.0804%" height="15" fill="rgb(230,27,33)" fg:x="53056" fg:w="89"/><text x="48.1652%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (159 samples, 0.14%)</title><rect x="47.8601%" y="501" width="0.1436%" height="15" fill="rgb(205,31,21)" fg:x="52995" fg:w="159"/><text x="48.1101%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.05%)</title><rect x="48.0317%" y="469" width="0.0461%" height="15" fill="rgb(253,59,4)" fg:x="53185" fg:w="51"/><text x="48.2817%" y="479.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (30 samples, 0.03%)</title><rect x="48.0506%" y="453" width="0.0271%" height="15" fill="rgb(224,201,9)" fg:x="53206" fg:w="30"/><text x="48.3006%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (30 samples, 0.03%)</title><rect x="48.0506%" y="437" width="0.0271%" height="15" fill="rgb(229,206,30)" fg:x="53206" fg:w="30"/><text x="48.3006%" y="447.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (127 samples, 0.11%)</title><rect x="48.0976%" y="437" width="0.1147%" height="15" fill="rgb(212,67,47)" fg:x="53258" fg:w="127"/><text x="48.3476%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (122 samples, 0.11%)</title><rect x="48.1021%" y="421" width="0.1102%" height="15" fill="rgb(211,96,50)" fg:x="53263" fg:w="122"/><text x="48.3521%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (122 samples, 0.11%)</title><rect x="48.1021%" y="405" width="0.1102%" height="15" fill="rgb(252,114,18)" fg:x="53263" fg:w="122"/><text x="48.3521%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (122 samples, 0.11%)</title><rect x="48.1021%" y="389" width="0.1102%" height="15" fill="rgb(223,58,37)" fg:x="53263" fg:w="122"/><text x="48.3521%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (122 samples, 0.11%)</title><rect x="48.1021%" y="373" width="0.1102%" height="15" fill="rgb(237,70,4)" fg:x="53263" fg:w="122"/><text x="48.3521%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (122 samples, 0.11%)</title><rect x="48.1021%" y="357" width="0.1102%" height="15" fill="rgb(244,85,46)" fg:x="53263" fg:w="122"/><text x="48.3521%" y="367.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.09%)</title><rect x="48.1184%" y="341" width="0.0939%" height="15" fill="rgb(223,39,52)" fg:x="53281" fg:w="104"/><text x="48.3684%" y="351.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (222 samples, 0.20%)</title><rect x="48.0190%" y="501" width="0.2005%" height="15" fill="rgb(218,200,14)" fg:x="53171" fg:w="222"/><text x="48.2690%" y="511.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (217 samples, 0.20%)</title><rect x="48.0236%" y="485" width="0.1960%" height="15" fill="rgb(208,171,16)" fg:x="53176" fg:w="217"/><text x="48.2736%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (157 samples, 0.14%)</title><rect x="48.0777%" y="469" width="0.1418%" height="15" fill="rgb(234,200,18)" fg:x="53236" fg:w="157"/><text x="48.3277%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (157 samples, 0.14%)</title><rect x="48.0777%" y="453" width="0.1418%" height="15" fill="rgb(228,45,11)" fg:x="53236" fg:w="157"/><text x="48.3277%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (56 samples, 0.05%)</title><rect x="48.2412%" y="469" width="0.0506%" height="15" fill="rgb(237,182,11)" fg:x="53417" fg:w="56"/><text x="48.4912%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="48.3044%" y="453" width="0.0144%" height="15" fill="rgb(241,175,49)" fg:x="53487" fg:w="16"/><text x="48.5544%" y="463.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="48.3044%" y="437" width="0.0144%" height="15" fill="rgb(247,38,35)" fg:x="53487" fg:w="16"/><text x="48.5544%" y="447.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (15 samples, 0.01%)</title><rect x="48.3423%" y="357" width="0.0135%" height="15" fill="rgb(228,39,49)" fg:x="53529" fg:w="15"/><text x="48.5923%" y="367.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (166 samples, 0.15%)</title><rect x="48.2918%" y="469" width="0.1499%" height="15" fill="rgb(226,101,26)" fg:x="53473" fg:w="166"/><text x="48.5418%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (136 samples, 0.12%)</title><rect x="48.3189%" y="453" width="0.1228%" height="15" fill="rgb(206,141,19)" fg:x="53503" fg:w="136"/><text x="48.5689%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (136 samples, 0.12%)</title><rect x="48.3189%" y="437" width="0.1228%" height="15" fill="rgb(211,200,13)" fg:x="53503" fg:w="136"/><text x="48.5689%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (136 samples, 0.12%)</title><rect x="48.3189%" y="421" width="0.1228%" height="15" fill="rgb(241,121,6)" fg:x="53503" fg:w="136"/><text x="48.5689%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (136 samples, 0.12%)</title><rect x="48.3189%" y="405" width="0.1228%" height="15" fill="rgb(234,221,29)" fg:x="53503" fg:w="136"/><text x="48.5689%" y="415.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (110 samples, 0.10%)</title><rect x="48.3423%" y="389" width="0.0993%" height="15" fill="rgb(229,136,5)" fg:x="53529" fg:w="110"/><text x="48.5923%" y="399.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (110 samples, 0.10%)</title><rect x="48.3423%" y="373" width="0.0993%" height="15" fill="rgb(238,36,11)" fg:x="53529" fg:w="110"/><text x="48.5923%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (95 samples, 0.09%)</title><rect x="48.3559%" y="357" width="0.0858%" height="15" fill="rgb(251,55,41)" fg:x="53544" fg:w="95"/><text x="48.6059%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (95 samples, 0.09%)</title><rect x="48.3559%" y="341" width="0.0858%" height="15" fill="rgb(242,34,40)" fg:x="53544" fg:w="95"/><text x="48.6059%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (95 samples, 0.09%)</title><rect x="48.3559%" y="325" width="0.0858%" height="15" fill="rgb(215,42,17)" fg:x="53544" fg:w="95"/><text x="48.6059%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (95 samples, 0.09%)</title><rect x="48.3559%" y="309" width="0.0858%" height="15" fill="rgb(207,44,46)" fg:x="53544" fg:w="95"/><text x="48.6059%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (95 samples, 0.09%)</title><rect x="48.3559%" y="293" width="0.0858%" height="15" fill="rgb(211,206,28)" fg:x="53544" fg:w="95"/><text x="48.6059%" y="303.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="48.4011%" y="277" width="0.0406%" height="15" fill="rgb(237,167,16)" fg:x="53594" fg:w="45"/><text x="48.6511%" y="287.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,854 samples, 1.67%)</title><rect x="46.7872%" y="517" width="1.6744%" height="15" fill="rgb(233,66,6)" fg:x="51807" fg:w="1854"/><text x="47.0372%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (268 samples, 0.24%)</title><rect x="48.2195%" y="501" width="0.2420%" height="15" fill="rgb(246,123,29)" fg:x="53393" fg:w="268"/><text x="48.4695%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (261 samples, 0.24%)</title><rect x="48.2258%" y="485" width="0.2357%" height="15" fill="rgb(209,62,40)" fg:x="53400" fg:w="261"/><text x="48.4758%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (22 samples, 0.02%)</title><rect x="48.4417%" y="469" width="0.0199%" height="15" fill="rgb(218,4,25)" fg:x="53639" fg:w="22"/><text x="48.6917%" y="479.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (16 samples, 0.01%)</title><rect x="48.4471%" y="453" width="0.0144%" height="15" fill="rgb(253,91,49)" fg:x="53645" fg:w="16"/><text x="48.6971%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (24 samples, 0.02%)</title><rect x="48.4742%" y="485" width="0.0217%" height="15" fill="rgb(228,155,29)" fg:x="53675" fg:w="24"/><text x="48.7242%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (135 samples, 0.12%)</title><rect x="48.4959%" y="485" width="0.1219%" height="15" fill="rgb(243,57,37)" fg:x="53699" fg:w="135"/><text x="48.7459%" y="495.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (106 samples, 0.10%)</title><rect x="48.5221%" y="469" width="0.0957%" height="15" fill="rgb(244,167,17)" fg:x="53728" fg:w="106"/><text x="48.7721%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (106 samples, 0.10%)</title><rect x="48.5221%" y="453" width="0.0957%" height="15" fill="rgb(207,181,38)" fg:x="53728" fg:w="106"/><text x="48.7721%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (106 samples, 0.10%)</title><rect x="48.5221%" y="437" width="0.0957%" height="15" fill="rgb(211,8,23)" fg:x="53728" fg:w="106"/><text x="48.7721%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (106 samples, 0.10%)</title><rect x="48.5221%" y="421" width="0.0957%" height="15" fill="rgb(235,11,44)" fg:x="53728" fg:w="106"/><text x="48.7721%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (84 samples, 0.08%)</title><rect x="48.5419%" y="405" width="0.0759%" height="15" fill="rgb(248,18,52)" fg:x="53750" fg:w="84"/><text x="48.7919%" y="415.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (84 samples, 0.08%)</title><rect x="48.5419%" y="389" width="0.0759%" height="15" fill="rgb(208,4,7)" fg:x="53750" fg:w="84"/><text x="48.7919%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (81 samples, 0.07%)</title><rect x="48.5446%" y="373" width="0.0732%" height="15" fill="rgb(240,17,39)" fg:x="53753" fg:w="81"/><text x="48.7946%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (81 samples, 0.07%)</title><rect x="48.5446%" y="357" width="0.0732%" height="15" fill="rgb(207,170,3)" fg:x="53753" fg:w="81"/><text x="48.7946%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (81 samples, 0.07%)</title><rect x="48.5446%" y="341" width="0.0732%" height="15" fill="rgb(236,100,52)" fg:x="53753" fg:w="81"/><text x="48.7946%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (81 samples, 0.07%)</title><rect x="48.5446%" y="325" width="0.0732%" height="15" fill="rgb(246,78,51)" fg:x="53753" fg:w="81"/><text x="48.7946%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (81 samples, 0.07%)</title><rect x="48.5446%" y="309" width="0.0732%" height="15" fill="rgb(211,17,15)" fg:x="53753" fg:w="81"/><text x="48.7946%" y="319.50"></text></g><g><title>[libc-2.31.so] (42 samples, 0.04%)</title><rect x="48.5799%" y="293" width="0.0379%" height="15" fill="rgb(209,59,46)" fg:x="53792" fg:w="42"/><text x="48.8299%" y="303.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,267 samples, 4.76%)</title><rect x="43.9063%" y="565" width="4.7567%" height="15" fill="rgb(210,92,25)" fg:x="48617" fg:w="5267"/><text x="44.1563%" y="575.50">tremor..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,337 samples, 3.92%)</title><rect x="44.7462%" y="549" width="3.9168%" height="15" fill="rgb(238,174,52)" fg:x="49547" fg:w="4337"/><text x="44.9962%" y="559.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,318 samples, 3.90%)</title><rect x="44.7633%" y="533" width="3.8996%" height="15" fill="rgb(230,73,7)" fg:x="49566" fg:w="4318"/><text x="45.0133%" y="543.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (223 samples, 0.20%)</title><rect x="48.4616%" y="517" width="0.2014%" height="15" fill="rgb(243,124,40)" fg:x="53661" fg:w="223"/><text x="48.7116%" y="527.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (223 samples, 0.20%)</title><rect x="48.4616%" y="501" width="0.2014%" height="15" fill="rgb(244,170,11)" fg:x="53661" fg:w="223"/><text x="48.7116%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (50 samples, 0.05%)</title><rect x="48.6178%" y="485" width="0.0452%" height="15" fill="rgb(207,114,54)" fg:x="53834" fg:w="50"/><text x="48.8678%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (22 samples, 0.02%)</title><rect x="48.6431%" y="469" width="0.0199%" height="15" fill="rgb(205,42,20)" fg:x="53862" fg:w="22"/><text x="48.8931%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (13 samples, 0.01%)</title><rect x="48.6512%" y="453" width="0.0117%" height="15" fill="rgb(230,30,28)" fg:x="53871" fg:w="13"/><text x="48.9012%" y="463.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (13 samples, 0.01%)</title><rect x="48.6512%" y="437" width="0.0117%" height="15" fill="rgb(205,73,54)" fg:x="53871" fg:w="13"/><text x="48.9012%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,478 samples, 4.95%)</title><rect x="43.7392%" y="581" width="4.9472%" height="15" fill="rgb(254,227,23)" fg:x="48432" fg:w="5478"/><text x="43.9892%" y="591.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (26 samples, 0.02%)</title><rect x="48.6630%" y="565" width="0.0235%" height="15" fill="rgb(228,202,34)" fg:x="53884" fg:w="26"/><text x="48.9130%" y="575.50"></text></g><g><title>[libc-2.31.so] (694 samples, 0.63%)</title><rect x="48.6864%" y="581" width="0.6268%" height="15" fill="rgb(222,225,37)" fg:x="53910" fg:w="694"/><text x="48.9364%" y="591.50"></text></g><g><title>sn_rust_dealloc (104 samples, 0.09%)</title><rect x="49.3213%" y="421" width="0.0939%" height="15" fill="rgb(221,14,54)" fg:x="54613" fg:w="104"/><text x="49.5713%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (116 samples, 0.10%)</title><rect x="49.3132%" y="581" width="0.1048%" height="15" fill="rgb(254,102,2)" fg:x="54604" fg:w="116"/><text x="49.5632%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (116 samples, 0.10%)</title><rect x="49.3132%" y="565" width="0.1048%" height="15" fill="rgb(232,104,17)" fg:x="54604" fg:w="116"/><text x="49.5632%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (107 samples, 0.10%)</title><rect x="49.3213%" y="549" width="0.0966%" height="15" fill="rgb(250,220,14)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (107 samples, 0.10%)</title><rect x="49.3213%" y="533" width="0.0966%" height="15" fill="rgb(241,158,9)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (107 samples, 0.10%)</title><rect x="49.3213%" y="517" width="0.0966%" height="15" fill="rgb(246,9,43)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (107 samples, 0.10%)</title><rect x="49.3213%" y="501" width="0.0966%" height="15" fill="rgb(206,73,33)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (107 samples, 0.10%)</title><rect x="49.3213%" y="485" width="0.0966%" height="15" fill="rgb(222,79,8)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (107 samples, 0.10%)</title><rect x="49.3213%" y="469" width="0.0966%" height="15" fill="rgb(234,8,54)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="479.50"></text></g><g><title>__rg_dealloc (107 samples, 0.10%)</title><rect x="49.3213%" y="453" width="0.0966%" height="15" fill="rgb(209,134,38)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (107 samples, 0.10%)</title><rect x="49.3213%" y="437" width="0.0966%" height="15" fill="rgb(230,127,29)" fg:x="54613" fg:w="107"/><text x="49.5713%" y="447.50"></text></g><g><title>async_io::driver::block_on (17,468 samples, 15.78%)</title><rect x="33.6470%" y="901" width="15.7755%" height="15" fill="rgb(242,44,41)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="911.50">async_io::driver::block_..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="885" width="15.7755%" height="15" fill="rgb(222,56,43)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="895.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="869" width="15.7755%" height="15" fill="rgb(238,39,47)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="879.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}} (17,468 samples, 15.78%)</title><rect x="33.6470%" y="853" width="15.7755%" height="15" fill="rgb(226,79,43)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="863.50">async_executor::Executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="837" width="15.7755%" height="15" fill="rgb(242,105,53)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="847.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="821" width="15.7755%" height="15" fill="rgb(251,132,46)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="831.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (17,468 samples, 15.78%)</title><rect x="33.6470%" y="805" width="15.7755%" height="15" fill="rgb(231,77,14)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="815.50">async_executor::Executor..</text></g><g><title>async_task::runnable::Runnable::run (17,468 samples, 15.78%)</title><rect x="33.6470%" y="789" width="15.7755%" height="15" fill="rgb(240,135,9)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="799.50">async_task::runnable::Ru..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (17,468 samples, 15.78%)</title><rect x="33.6470%" y="773" width="15.7755%" height="15" fill="rgb(248,109,14)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="783.50">async_task::raw::RawTask..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="757" width="15.7755%" height="15" fill="rgb(227,146,52)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="767.50">&lt;core::pin::Pin&lt;P&gt; as co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="741" width="15.7755%" height="15" fill="rgb(232,54,3)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="751.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (17,468 samples, 15.78%)</title><rect x="33.6470%" y="725" width="15.7755%" height="15" fill="rgb(229,201,43)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="735.50">async_executor::Executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="709" width="15.7755%" height="15" fill="rgb(252,161,33)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="719.50">&lt;async_std::task::builde..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (17,468 samples, 15.78%)</title><rect x="33.6470%" y="693" width="15.7755%" height="15" fill="rgb(226,146,40)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="703.50">async_std::task::task_lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17,468 samples, 15.78%)</title><rect x="33.6470%" y="677" width="15.7755%" height="15" fill="rgb(219,47,25)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="687.50">std::thread::local::Loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17,468 samples, 15.78%)</title><rect x="33.6470%" y="661" width="15.7755%" height="15" fill="rgb(250,135,13)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="671.50">std::thread::local::Loca..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (17,468 samples, 15.78%)</title><rect x="33.6470%" y="645" width="15.7755%" height="15" fill="rgb(219,229,18)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="655.50">async_std::task::task_lo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17,468 samples, 15.78%)</title><rect x="33.6470%" y="629" width="15.7755%" height="15" fill="rgb(217,152,27)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="639.50">&lt;async_std::task::builde..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,468 samples, 15.78%)</title><rect x="33.6470%" y="613" width="15.7755%" height="15" fill="rgb(225,71,47)" fg:x="37257" fg:w="17468"/><text x="33.8970%" y="623.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,541 samples, 5.91%)</title><rect x="43.5152%" y="597" width="5.9072%" height="15" fill="rgb(220,139,14)" fg:x="48184" fg:w="6541"/><text x="43.7652%" y="607.50">tremor_r..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="49.6419%" y="437" width="0.0181%" height="15" fill="rgb(247,54,32)" fg:x="54968" fg:w="20"/><text x="49.8919%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (16 samples, 0.01%)</title><rect x="49.6780%" y="437" width="0.0144%" height="15" fill="rgb(252,131,39)" fg:x="55008" fg:w="16"/><text x="49.9280%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (16 samples, 0.01%)</title><rect x="49.6780%" y="421" width="0.0144%" height="15" fill="rgb(210,108,39)" fg:x="55008" fg:w="16"/><text x="49.9280%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.01%)</title><rect x="49.6780%" y="405" width="0.0144%" height="15" fill="rgb(205,23,29)" fg:x="55008" fg:w="16"/><text x="49.9280%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 0.01%)</title><rect x="49.6780%" y="389" width="0.0144%" height="15" fill="rgb(246,139,46)" fg:x="55008" fg:w="16"/><text x="49.9280%" y="399.50"></text></g><g><title>sn_rust_dealloc (131 samples, 0.12%)</title><rect x="49.7286%" y="277" width="0.1183%" height="15" fill="rgb(250,81,26)" fg:x="55064" fg:w="131"/><text x="49.9786%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (187 samples, 0.17%)</title><rect x="49.7078%" y="341" width="0.1689%" height="15" fill="rgb(214,104,7)" fg:x="55041" fg:w="187"/><text x="49.9578%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (187 samples, 0.17%)</title><rect x="49.7078%" y="325" width="0.1689%" height="15" fill="rgb(233,189,8)" fg:x="55041" fg:w="187"/><text x="49.9578%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (177 samples, 0.16%)</title><rect x="49.7169%" y="309" width="0.1598%" height="15" fill="rgb(228,141,17)" fg:x="55051" fg:w="177"/><text x="49.9669%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (177 samples, 0.16%)</title><rect x="49.7169%" y="293" width="0.1598%" height="15" fill="rgb(247,157,1)" fg:x="55051" fg:w="177"/><text x="49.9669%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (33 samples, 0.03%)</title><rect x="49.8469%" y="277" width="0.0298%" height="15" fill="rgb(249,225,5)" fg:x="55195" fg:w="33"/><text x="50.0969%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (203 samples, 0.18%)</title><rect x="49.7024%" y="405" width="0.1833%" height="15" fill="rgb(242,55,13)" fg:x="55035" fg:w="203"/><text x="49.9524%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (202 samples, 0.18%)</title><rect x="49.7033%" y="389" width="0.1824%" height="15" fill="rgb(230,49,50)" fg:x="55036" fg:w="202"/><text x="49.9533%" y="399.50"></text></g><g><title>core::mem::drop (197 samples, 0.18%)</title><rect x="49.7078%" y="373" width="0.1779%" height="15" fill="rgb(241,111,38)" fg:x="55041" fg:w="197"/><text x="49.9578%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (197 samples, 0.18%)</title><rect x="49.7078%" y="357" width="0.1779%" height="15" fill="rgb(252,155,4)" fg:x="55041" fg:w="197"/><text x="49.9578%" y="367.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="49.8858%" y="405" width="0.0163%" height="15" fill="rgb(212,69,32)" fg:x="55238" fg:w="18"/><text x="50.1358%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (225 samples, 0.20%)</title><rect x="49.7006%" y="437" width="0.2032%" height="15" fill="rgb(243,107,47)" fg:x="55033" fg:w="225"/><text x="49.9506%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (225 samples, 0.20%)</title><rect x="49.7006%" y="421" width="0.2032%" height="15" fill="rgb(247,130,12)" fg:x="55033" fg:w="225"/><text x="49.9506%" y="431.50"></text></g><g><title>sn_rust_dealloc (73 samples, 0.07%)</title><rect x="49.9246%" y="341" width="0.0659%" height="15" fill="rgb(233,74,16)" fg:x="55281" fg:w="73"/><text x="50.1746%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (90 samples, 0.08%)</title><rect x="49.9110%" y="389" width="0.0813%" height="15" fill="rgb(208,58,18)" fg:x="55266" fg:w="90"/><text x="50.1610%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (86 samples, 0.08%)</title><rect x="49.9147%" y="373" width="0.0777%" height="15" fill="rgb(242,225,1)" fg:x="55270" fg:w="86"/><text x="50.1647%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (86 samples, 0.08%)</title><rect x="49.9147%" y="357" width="0.0777%" height="15" fill="rgb(249,39,40)" fg:x="55270" fg:w="86"/><text x="50.1647%" y="367.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.10%)</title><rect x="50.3084%" y="213" width="0.1048%" height="15" fill="rgb(207,72,44)" fg:x="55706" fg:w="116"/><text x="50.5584%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (455 samples, 0.41%)</title><rect x="50.0041%" y="293" width="0.4109%" height="15" fill="rgb(215,193,12)" fg:x="55369" fg:w="455"/><text x="50.2541%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (455 samples, 0.41%)</title><rect x="50.0041%" y="277" width="0.4109%" height="15" fill="rgb(248,41,39)" fg:x="55369" fg:w="455"/><text x="50.2541%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (445 samples, 0.40%)</title><rect x="50.0131%" y="261" width="0.4019%" height="15" fill="rgb(253,85,4)" fg:x="55379" fg:w="445"/><text x="50.2631%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (445 samples, 0.40%)</title><rect x="50.0131%" y="245" width="0.4019%" height="15" fill="rgb(243,70,31)" fg:x="55379" fg:w="445"/><text x="50.2631%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (445 samples, 0.40%)</title><rect x="50.0131%" y="229" width="0.4019%" height="15" fill="rgb(253,195,26)" fg:x="55379" fg:w="445"/><text x="50.2631%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (482 samples, 0.44%)</title><rect x="49.9923%" y="357" width="0.4353%" height="15" fill="rgb(243,42,11)" fg:x="55356" fg:w="482"/><text x="50.2423%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (477 samples, 0.43%)</title><rect x="49.9968%" y="341" width="0.4308%" height="15" fill="rgb(239,66,17)" fg:x="55361" fg:w="477"/><text x="50.2468%" y="351.50"></text></g><g><title>core::mem::drop (469 samples, 0.42%)</title><rect x="50.0041%" y="325" width="0.4236%" height="15" fill="rgb(217,132,21)" fg:x="55369" fg:w="469"/><text x="50.2541%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (469 samples, 0.42%)</title><rect x="50.0041%" y="309" width="0.4236%" height="15" fill="rgb(252,202,21)" fg:x="55369" fg:w="469"/><text x="50.2541%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (14 samples, 0.01%)</title><rect x="50.4150%" y="293" width="0.0126%" height="15" fill="rgb(233,98,36)" fg:x="55824" fg:w="14"/><text x="50.6650%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="50.4150%" y="277" width="0.0126%" height="15" fill="rgb(216,153,54)" fg:x="55824" fg:w="14"/><text x="50.6650%" y="287.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.04%)</title><rect x="50.4276%" y="357" width="0.0361%" height="15" fill="rgb(250,99,7)" fg:x="55838" fg:w="40"/><text x="50.6776%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (622 samples, 0.56%)</title><rect x="49.9038%" y="421" width="0.5617%" height="15" fill="rgb(207,56,50)" fg:x="55258" fg:w="622"/><text x="50.1538%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (617 samples, 0.56%)</title><rect x="49.9083%" y="405" width="0.5572%" height="15" fill="rgb(244,61,34)" fg:x="55263" fg:w="617"/><text x="50.1583%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (524 samples, 0.47%)</title><rect x="49.9923%" y="389" width="0.4732%" height="15" fill="rgb(241,50,38)" fg:x="55356" fg:w="524"/><text x="50.2423%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (524 samples, 0.47%)</title><rect x="49.9923%" y="373" width="0.4732%" height="15" fill="rgb(212,166,30)" fg:x="55356" fg:w="524"/><text x="50.2423%" y="383.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (26 samples, 0.02%)</title><rect x="50.4963%" y="277" width="0.0235%" height="15" fill="rgb(249,127,32)" fg:x="55914" fg:w="26"/><text x="50.7463%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (16 samples, 0.01%)</title><rect x="50.5053%" y="261" width="0.0144%" height="15" fill="rgb(209,103,0)" fg:x="55924" fg:w="16"/><text x="50.7553%" y="271.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (12 samples, 0.01%)</title><rect x="50.5197%" y="277" width="0.0108%" height="15" fill="rgb(238,209,51)" fg:x="55940" fg:w="12"/><text x="50.7697%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.06%)</title><rect x="50.4872%" y="309" width="0.0578%" height="15" fill="rgb(237,56,23)" fg:x="55904" fg:w="64"/><text x="50.7372%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.06%)</title><rect x="50.4872%" y="293" width="0.0578%" height="15" fill="rgb(215,153,46)" fg:x="55904" fg:w="64"/><text x="50.7372%" y="303.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (16 samples, 0.01%)</title><rect x="50.5306%" y="277" width="0.0144%" height="15" fill="rgb(224,49,31)" fg:x="55952" fg:w="16"/><text x="50.7806%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (541 samples, 0.49%)</title><rect x="50.5694%" y="261" width="0.4886%" height="15" fill="rgb(250,18,42)" fg:x="55995" fg:w="541"/><text x="50.8194%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (35 samples, 0.03%)</title><rect x="51.0264%" y="245" width="0.0316%" height="15" fill="rgb(215,176,39)" fg:x="56501" fg:w="35"/><text x="51.2764%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (643 samples, 0.58%)</title><rect x="50.5694%" y="277" width="0.5807%" height="15" fill="rgb(223,77,29)" fg:x="55995" fg:w="643"/><text x="50.8194%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (102 samples, 0.09%)</title><rect x="51.0580%" y="261" width="0.0921%" height="15" fill="rgb(234,94,52)" fg:x="56536" fg:w="102"/><text x="51.3080%" y="271.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.06%)</title><rect x="51.1501%" y="277" width="0.0605%" height="15" fill="rgb(220,154,50)" fg:x="56638" fg:w="67"/><text x="51.4001%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (738 samples, 0.67%)</title><rect x="50.5450%" y="293" width="0.6665%" height="15" fill="rgb(212,11,10)" fg:x="55968" fg:w="738"/><text x="50.7950%" y="303.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (743 samples, 0.67%)</title><rect x="50.5450%" y="309" width="0.6710%" height="15" fill="rgb(205,166,19)" fg:x="55968" fg:w="743"/><text x="50.7950%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (435 samples, 0.39%)</title><rect x="51.2260%" y="277" width="0.3929%" height="15" fill="rgb(244,198,16)" fg:x="56722" fg:w="435"/><text x="51.4760%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (435 samples, 0.39%)</title><rect x="51.2260%" y="261" width="0.3929%" height="15" fill="rgb(219,69,12)" fg:x="56722" fg:w="435"/><text x="51.4760%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,274 samples, 1.15%)</title><rect x="50.4854%" y="325" width="1.1506%" height="15" fill="rgb(245,30,7)" fg:x="55902" fg:w="1274"/><text x="50.7354%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (460 samples, 0.42%)</title><rect x="51.2205%" y="309" width="0.4154%" height="15" fill="rgb(218,221,48)" fg:x="56716" fg:w="460"/><text x="51.4705%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (460 samples, 0.42%)</title><rect x="51.2205%" y="293" width="0.4154%" height="15" fill="rgb(216,66,15)" fg:x="56716" fg:w="460"/><text x="51.4705%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (19 samples, 0.02%)</title><rect x="51.6188%" y="277" width="0.0172%" height="15" fill="rgb(226,122,50)" fg:x="57157" fg:w="19"/><text x="51.8688%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (17 samples, 0.02%)</title><rect x="51.6206%" y="261" width="0.0154%" height="15" fill="rgb(239,156,16)" fg:x="57159" fg:w="17"/><text x="51.8706%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.02%)</title><rect x="51.6206%" y="245" width="0.0154%" height="15" fill="rgb(224,27,38)" fg:x="57159" fg:w="17"/><text x="51.8706%" y="255.50"></text></g><g><title>sn_rust_dealloc (57 samples, 0.05%)</title><rect x="51.6396%" y="229" width="0.0515%" height="15" fill="rgb(224,39,27)" fg:x="57180" fg:w="57"/><text x="51.8896%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (75 samples, 0.07%)</title><rect x="51.6396%" y="293" width="0.0677%" height="15" fill="rgb(215,92,29)" fg:x="57180" fg:w="75"/><text x="51.8896%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (75 samples, 0.07%)</title><rect x="51.6396%" y="277" width="0.0677%" height="15" fill="rgb(207,159,16)" fg:x="57180" fg:w="75"/><text x="51.8896%" y="287.50"></text></g><g><title>__rg_dealloc (75 samples, 0.07%)</title><rect x="51.6396%" y="261" width="0.0677%" height="15" fill="rgb(238,163,47)" fg:x="57180" fg:w="75"/><text x="51.8896%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (75 samples, 0.07%)</title><rect x="51.6396%" y="245" width="0.0677%" height="15" fill="rgb(219,91,49)" fg:x="57180" fg:w="75"/><text x="51.8896%" y="255.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (18 samples, 0.02%)</title><rect x="51.6911%" y="229" width="0.0163%" height="15" fill="rgb(227,167,31)" fg:x="57237" fg:w="18"/><text x="51.9411%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (86 samples, 0.08%)</title><rect x="51.6360%" y="325" width="0.0777%" height="15" fill="rgb(234,80,54)" fg:x="57176" fg:w="86"/><text x="51.8860%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (86 samples, 0.08%)</title><rect x="51.6360%" y="309" width="0.0777%" height="15" fill="rgb(212,114,2)" fg:x="57176" fg:w="86"/><text x="51.8860%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,659 samples, 1.50%)</title><rect x="50.4854%" y="389" width="1.4983%" height="15" fill="rgb(234,50,24)" fg:x="55902" fg:w="1659"/><text x="50.7354%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,659 samples, 1.50%)</title><rect x="50.4854%" y="373" width="1.4983%" height="15" fill="rgb(221,68,8)" fg:x="55902" fg:w="1659"/><text x="50.7354%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,659 samples, 1.50%)</title><rect x="50.4854%" y="357" width="1.4983%" height="15" fill="rgb(254,180,31)" fg:x="55902" fg:w="1659"/><text x="50.7354%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,659 samples, 1.50%)</title><rect x="50.4854%" y="341" width="1.4983%" height="15" fill="rgb(247,130,50)" fg:x="55902" fg:w="1659"/><text x="50.7354%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (299 samples, 0.27%)</title><rect x="51.7136%" y="325" width="0.2700%" height="15" fill="rgb(211,109,4)" fg:x="57262" fg:w="299"/><text x="51.9636%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,671 samples, 1.51%)</title><rect x="50.4800%" y="405" width="1.5091%" height="15" fill="rgb(238,50,21)" fg:x="55896" fg:w="1671"/><text x="50.7300%" y="415.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (174 samples, 0.16%)</title><rect x="52.0153%" y="245" width="0.1571%" height="15" fill="rgb(225,57,45)" fg:x="57596" fg:w="174"/><text x="52.2653%" y="255.50"></text></g><g><title>core::mem::drop (491 samples, 0.44%)</title><rect x="52.1860%" y="165" width="0.4434%" height="15" fill="rgb(209,196,50)" fg:x="57785" fg:w="491"/><text x="52.4360%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (491 samples, 0.44%)</title><rect x="52.1860%" y="149" width="0.4434%" height="15" fill="rgb(242,140,13)" fg:x="57785" fg:w="491"/><text x="52.4360%" y="159.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (491 samples, 0.44%)</title><rect x="52.1860%" y="133" width="0.4434%" height="15" fill="rgb(217,111,7)" fg:x="57785" fg:w="491"/><text x="52.4360%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (483 samples, 0.44%)</title><rect x="52.1932%" y="117" width="0.4362%" height="15" fill="rgb(253,193,51)" fg:x="57793" fg:w="483"/><text x="52.4432%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_sub (483 samples, 0.44%)</title><rect x="52.1932%" y="101" width="0.4362%" height="15" fill="rgb(252,70,29)" fg:x="57793" fg:w="483"/><text x="52.4432%" y="111.50"></text></g><g><title>sn_rust_dealloc (85 samples, 0.08%)</title><rect x="52.6447%" y="117" width="0.0768%" height="15" fill="rgb(232,127,12)" fg:x="58293" fg:w="85"/><text x="52.8947%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (627 samples, 0.57%)</title><rect x="52.1796%" y="181" width="0.5662%" height="15" fill="rgb(211,180,21)" fg:x="57778" fg:w="627"/><text x="52.4296%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (129 samples, 0.12%)</title><rect x="52.6294%" y="165" width="0.1165%" height="15" fill="rgb(229,72,13)" fg:x="58276" fg:w="129"/><text x="52.8794%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (129 samples, 0.12%)</title><rect x="52.6294%" y="149" width="0.1165%" height="15" fill="rgb(240,211,49)" fg:x="58276" fg:w="129"/><text x="52.8794%" y="159.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (129 samples, 0.12%)</title><rect x="52.6294%" y="133" width="0.1165%" height="15" fill="rgb(219,149,40)" fg:x="58276" fg:w="129"/><text x="52.8794%" y="143.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (27 samples, 0.02%)</title><rect x="52.7215%" y="117" width="0.0244%" height="15" fill="rgb(210,127,46)" fg:x="58378" fg:w="27"/><text x="52.9715%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (508 samples, 0.46%)</title><rect x="52.7459%" y="181" width="0.4588%" height="15" fill="rgb(220,106,7)" fg:x="58405" fg:w="508"/><text x="52.9959%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (508 samples, 0.46%)</title><rect x="52.7459%" y="165" width="0.4588%" height="15" fill="rgb(249,31,22)" fg:x="58405" fg:w="508"/><text x="52.9959%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,373 samples, 1.24%)</title><rect x="51.9972%" y="309" width="1.2400%" height="15" fill="rgb(253,1,49)" fg:x="57576" fg:w="1373"/><text x="52.2472%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,373 samples, 1.24%)</title><rect x="51.9972%" y="293" width="1.2400%" height="15" fill="rgb(227,144,33)" fg:x="57576" fg:w="1373"/><text x="52.2472%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,359 samples, 1.23%)</title><rect x="52.0099%" y="277" width="1.2273%" height="15" fill="rgb(249,163,44)" fg:x="57590" fg:w="1359"/><text x="52.2599%" y="287.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,359 samples, 1.23%)</title><rect x="52.0099%" y="261" width="1.2273%" height="15" fill="rgb(234,15,39)" fg:x="57590" fg:w="1359"/><text x="52.2599%" y="271.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,179 samples, 1.06%)</title><rect x="52.1724%" y="245" width="1.0648%" height="15" fill="rgb(207,66,16)" fg:x="57770" fg:w="1179"/><text x="52.4224%" y="255.50"></text></g><g><title>core::mem::drop (1,171 samples, 1.06%)</title><rect x="52.1796%" y="229" width="1.0575%" height="15" fill="rgb(233,112,24)" fg:x="57778" fg:w="1171"/><text x="52.4296%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,171 samples, 1.06%)</title><rect x="52.1796%" y="213" width="1.0575%" height="15" fill="rgb(230,90,22)" fg:x="57778" fg:w="1171"/><text x="52.4296%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,171 samples, 1.06%)</title><rect x="52.1796%" y="197" width="1.0575%" height="15" fill="rgb(229,61,13)" fg:x="57778" fg:w="1171"/><text x="52.4296%" y="207.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="53.2047%" y="181" width="0.0325%" height="15" fill="rgb(225,57,24)" fg:x="58913" fg:w="36"/><text x="53.4547%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,397 samples, 1.26%)</title><rect x="51.9891%" y="373" width="1.2616%" height="15" fill="rgb(208,169,48)" fg:x="57567" fg:w="1397"/><text x="52.2391%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,392 samples, 1.26%)</title><rect x="51.9936%" y="357" width="1.2571%" height="15" fill="rgb(244,218,51)" fg:x="57572" fg:w="1392"/><text x="52.2436%" y="367.50"></text></g><g><title>core::mem::drop (1,388 samples, 1.25%)</title><rect x="51.9972%" y="341" width="1.2535%" height="15" fill="rgb(214,148,10)" fg:x="57576" fg:w="1388"/><text x="52.2472%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,388 samples, 1.25%)</title><rect x="51.9972%" y="325" width="1.2535%" height="15" fill="rgb(225,174,27)" fg:x="57576" fg:w="1388"/><text x="52.2472%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="53.2372%" y="309" width="0.0135%" height="15" fill="rgb(230,96,26)" fg:x="58949" fg:w="15"/><text x="53.4872%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="53.2372%" y="293" width="0.0135%" height="15" fill="rgb(232,10,30)" fg:x="58949" fg:w="15"/><text x="53.4872%" y="303.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="53.2507%" y="373" width="0.0397%" height="15" fill="rgb(222,8,50)" fg:x="58964" fg:w="44"/><text x="53.5007%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,443 samples, 1.30%)</title><rect x="51.9891%" y="405" width="1.3032%" height="15" fill="rgb(213,81,27)" fg:x="57567" fg:w="1443"/><text x="52.2391%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,443 samples, 1.30%)</title><rect x="51.9891%" y="389" width="1.3032%" height="15" fill="rgb(245,50,10)" fg:x="57567" fg:w="1443"/><text x="52.2391%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (56 samples, 0.05%)</title><rect x="53.3437%" y="197" width="0.0506%" height="15" fill="rgb(216,100,18)" fg:x="59067" fg:w="56"/><text x="53.5937%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (54 samples, 0.05%)</title><rect x="53.3456%" y="181" width="0.0488%" height="15" fill="rgb(236,147,54)" fg:x="59069" fg:w="54"/><text x="53.5956%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 0.13%)</title><rect x="53.3347%" y="229" width="0.1255%" height="15" fill="rgb(205,143,26)" fg:x="59057" fg:w="139"/><text x="53.5847%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 0.13%)</title><rect x="53.3347%" y="213" width="0.1255%" height="15" fill="rgb(236,26,9)" fg:x="59057" fg:w="139"/><text x="53.5847%" y="223.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (63 samples, 0.06%)</title><rect x="53.4034%" y="197" width="0.0569%" height="15" fill="rgb(221,165,53)" fg:x="59133" fg:w="63"/><text x="53.6534%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (395 samples, 0.36%)</title><rect x="53.5180%" y="133" width="0.3567%" height="15" fill="rgb(214,110,17)" fg:x="59260" fg:w="395"/><text x="53.7680%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (392 samples, 0.35%)</title><rect x="53.5208%" y="117" width="0.3540%" height="15" fill="rgb(237,197,12)" fg:x="59263" fg:w="392"/><text x="53.7708%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (350 samples, 0.32%)</title><rect x="53.5587%" y="101" width="0.3161%" height="15" fill="rgb(205,84,17)" fg:x="59305" fg:w="350"/><text x="53.8087%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (31 samples, 0.03%)</title><rect x="53.8468%" y="85" width="0.0280%" height="15" fill="rgb(237,18,45)" fg:x="59624" fg:w="31"/><text x="54.0968%" y="95.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (445 samples, 0.40%)</title><rect x="53.4991%" y="197" width="0.4019%" height="15" fill="rgb(221,87,14)" fg:x="59239" fg:w="445"/><text x="53.7491%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (440 samples, 0.40%)</title><rect x="53.5036%" y="181" width="0.3974%" height="15" fill="rgb(238,186,15)" fg:x="59244" fg:w="440"/><text x="53.7536%" y="191.50"></text></g><g><title>core::mem::drop (424 samples, 0.38%)</title><rect x="53.5180%" y="165" width="0.3829%" height="15" fill="rgb(208,115,11)" fg:x="59260" fg:w="424"/><text x="53.7680%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (424 samples, 0.38%)</title><rect x="53.5180%" y="149" width="0.3829%" height="15" fill="rgb(254,175,0)" fg:x="59260" fg:w="424"/><text x="53.7680%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (29 samples, 0.03%)</title><rect x="53.8748%" y="133" width="0.0262%" height="15" fill="rgb(227,24,42)" fg:x="59655" fg:w="29"/><text x="54.1248%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="53.8748%" y="117" width="0.0262%" height="15" fill="rgb(223,211,37)" fg:x="59655" fg:w="29"/><text x="54.1248%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (22 samples, 0.02%)</title><rect x="53.8811%" y="101" width="0.0199%" height="15" fill="rgb(235,49,27)" fg:x="59662" fg:w="22"/><text x="54.1311%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array (15 samples, 0.01%)</title><rect x="53.8874%" y="85" width="0.0135%" height="15" fill="rgb(254,97,51)" fg:x="59669" fg:w="15"/><text x="54.1374%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (15 samples, 0.01%)</title><rect x="53.8874%" y="69" width="0.0135%" height="15" fill="rgb(249,51,40)" fg:x="59669" fg:w="15"/><text x="54.1374%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (15 samples, 0.01%)</title><rect x="53.8874%" y="53" width="0.0135%" height="15" fill="rgb(210,128,45)" fg:x="59669" fg:w="15"/><text x="54.1374%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (132 samples, 0.12%)</title><rect x="53.9046%" y="181" width="0.1192%" height="15" fill="rgb(224,137,50)" fg:x="59688" fg:w="132"/><text x="54.1546%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (52 samples, 0.05%)</title><rect x="53.9768%" y="165" width="0.0470%" height="15" fill="rgb(242,15,9)" fg:x="59768" fg:w="52"/><text x="54.2268%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (296 samples, 0.27%)</title><rect x="53.9010%" y="197" width="0.2673%" height="15" fill="rgb(233,187,41)" fg:x="59684" fg:w="296"/><text x="54.1510%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (160 samples, 0.14%)</title><rect x="54.0238%" y="181" width="0.1445%" height="15" fill="rgb(227,2,29)" fg:x="59820" fg:w="160"/><text x="54.2738%" y="191.50"></text></g><g><title>sn_rust_dealloc (146 samples, 0.13%)</title><rect x="54.1683%" y="197" width="0.1319%" height="15" fill="rgb(222,70,3)" fg:x="59980" fg:w="146"/><text x="54.4183%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (960 samples, 0.87%)</title><rect x="53.4602%" y="213" width="0.8670%" height="15" fill="rgb(213,11,42)" fg:x="59196" fg:w="960"/><text x="53.7102%" y="223.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (30 samples, 0.03%)</title><rect x="54.3001%" y="197" width="0.0271%" height="15" fill="rgb(225,150,9)" fg:x="60126" fg:w="30"/><text x="54.5501%" y="207.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (966 samples, 0.87%)</title><rect x="53.4602%" y="229" width="0.8724%" height="15" fill="rgb(230,162,45)" fg:x="59196" fg:w="966"/><text x="53.7102%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,119 samples, 1.01%)</title><rect x="53.3347%" y="245" width="1.0106%" height="15" fill="rgb(222,14,52)" fg:x="59057" fg:w="1119"/><text x="53.5847%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (14 samples, 0.01%)</title><rect x="54.3326%" y="229" width="0.0126%" height="15" fill="rgb(254,198,14)" fg:x="60162" fg:w="14"/><text x="54.5826%" y="239.50"></text></g><g><title>sn_rust_dealloc (95 samples, 0.09%)</title><rect x="54.3480%" y="149" width="0.0858%" height="15" fill="rgb(220,217,30)" fg:x="60179" fg:w="95"/><text x="54.5980%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (1,025 samples, 0.93%)</title><rect x="54.3462%" y="213" width="0.9257%" height="15" fill="rgb(215,146,41)" fg:x="60177" fg:w="1025"/><text x="54.5962%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1,025 samples, 0.93%)</title><rect x="54.3462%" y="197" width="0.9257%" height="15" fill="rgb(217,27,36)" fg:x="60177" fg:w="1025"/><text x="54.5962%" y="207.50"></text></g><g><title>__rg_dealloc (1,025 samples, 0.93%)</title><rect x="54.3462%" y="181" width="0.9257%" height="15" fill="rgb(219,218,39)" fg:x="60177" fg:w="1025"/><text x="54.5962%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1,025 samples, 0.93%)</title><rect x="54.3462%" y="165" width="0.9257%" height="15" fill="rgb(219,4,42)" fg:x="60177" fg:w="1025"/><text x="54.5962%" y="175.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (928 samples, 0.84%)</title><rect x="54.4338%" y="149" width="0.8381%" height="15" fill="rgb(249,119,36)" fg:x="60274" fg:w="928"/><text x="54.6838%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (1,033 samples, 0.93%)</title><rect x="54.3453%" y="245" width="0.9329%" height="15" fill="rgb(209,23,33)" fg:x="60176" fg:w="1033"/><text x="54.5953%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (1,033 samples, 0.93%)</title><rect x="54.3453%" y="229" width="0.9329%" height="15" fill="rgb(211,10,0)" fg:x="60176" fg:w="1033"/><text x="54.5953%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,164 samples, 1.95%)</title><rect x="53.3347%" y="309" width="1.9543%" height="15" fill="rgb(208,99,37)" fg:x="59057" fg:w="2164"/><text x="53.5847%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,164 samples, 1.95%)</title><rect x="53.3347%" y="293" width="1.9543%" height="15" fill="rgb(213,132,31)" fg:x="59057" fg:w="2164"/><text x="53.5847%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,164 samples, 1.95%)</title><rect x="53.3347%" y="277" width="1.9543%" height="15" fill="rgb(243,129,40)" fg:x="59057" fg:w="2164"/><text x="53.5847%" y="287.50">c..</text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,164 samples, 1.95%)</title><rect x="53.3347%" y="261" width="1.9543%" height="15" fill="rgb(210,66,33)" fg:x="59057" fg:w="2164"/><text x="53.5847%" y="271.50">&lt;..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (12 samples, 0.01%)</title><rect x="55.2782%" y="245" width="0.0108%" height="15" fill="rgb(209,189,4)" fg:x="61209" fg:w="12"/><text x="55.5282%" y="255.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,189 samples, 1.98%)</title><rect x="53.3266%" y="325" width="1.9769%" height="15" fill="rgb(214,107,37)" fg:x="59048" fg:w="2189"/><text x="53.5766%" y="335.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="55.2890%" y="309" width="0.0144%" height="15" fill="rgb(245,88,54)" fg:x="61221" fg:w="16"/><text x="55.5390%" y="319.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="55.2890%" y="293" width="0.0144%" height="15" fill="rgb(205,146,20)" fg:x="61221" fg:w="16"/><text x="55.5390%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="55.2890%" y="277" width="0.0144%" height="15" fill="rgb(220,161,25)" fg:x="61221" fg:w="16"/><text x="55.5390%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="55.2890%" y="261" width="0.0144%" height="15" fill="rgb(215,152,15)" fg:x="61221" fg:w="16"/><text x="55.5390%" y="271.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="55.2890%" y="245" width="0.0144%" height="15" fill="rgb(233,192,44)" fg:x="61221" fg:w="16"/><text x="55.5390%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="55.2890%" y="229" width="0.0144%" height="15" fill="rgb(240,170,46)" fg:x="61221" fg:w="16"/><text x="55.5390%" y="239.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.06%)</title><rect x="55.3035%" y="325" width="0.0596%" height="15" fill="rgb(207,104,33)" fg:x="61237" fg:w="66"/><text x="55.5535%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,306 samples, 2.08%)</title><rect x="53.2923%" y="405" width="2.0826%" height="15" fill="rgb(219,21,39)" fg:x="59010" fg:w="2306"/><text x="53.5423%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,306 samples, 2.08%)</title><rect x="53.2923%" y="389" width="2.0826%" height="15" fill="rgb(214,133,29)" fg:x="59010" fg:w="2306"/><text x="53.5423%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,291 samples, 2.07%)</title><rect x="53.3058%" y="373" width="2.0690%" height="15" fill="rgb(226,93,6)" fg:x="59025" fg:w="2291"/><text x="53.5558%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,291 samples, 2.07%)</title><rect x="53.3058%" y="357" width="2.0690%" height="15" fill="rgb(252,222,34)" fg:x="59025" fg:w="2291"/><text x="53.5558%" y="367.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,291 samples, 2.07%)</title><rect x="53.3058%" y="341" width="2.0690%" height="15" fill="rgb(252,92,48)" fg:x="59025" fg:w="2291"/><text x="53.5558%" y="351.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (13 samples, 0.01%)</title><rect x="55.3631%" y="325" width="0.0117%" height="15" fill="rgb(245,223,24)" fg:x="61303" fg:w="13"/><text x="55.6131%" y="335.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.03%)</title><rect x="55.3748%" y="405" width="0.0271%" height="15" fill="rgb(205,176,3)" fg:x="61316" fg:w="30"/><text x="55.6248%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,098 samples, 5.51%)</title><rect x="49.9038%" y="437" width="5.5071%" height="15" fill="rgb(235,151,15)" fg:x="55258" fg:w="6098"/><text x="50.1538%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,460 samples, 4.93%)</title><rect x="50.4800%" y="421" width="4.9310%" height="15" fill="rgb(237,209,11)" fg:x="55896" fg:w="5460"/><text x="50.7300%" y="431.50">core::..</text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (22 samples, 0.02%)</title><rect x="55.5103%" y="389" width="0.0199%" height="15" fill="rgb(243,227,24)" fg:x="61466" fg:w="22"/><text x="55.7603%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (21 samples, 0.02%)</title><rect x="55.5112%" y="373" width="0.0190%" height="15" fill="rgb(239,193,16)" fg:x="61467" fg:w="21"/><text x="55.7612%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (133 samples, 0.12%)</title><rect x="55.4164%" y="437" width="0.1201%" height="15" fill="rgb(231,27,9)" fg:x="61362" fg:w="133"/><text x="55.6664%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (130 samples, 0.12%)</title><rect x="55.4191%" y="421" width="0.1174%" height="15" fill="rgb(219,169,10)" fg:x="61365" fg:w="130"/><text x="55.6691%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (130 samples, 0.12%)</title><rect x="55.4191%" y="405" width="0.1174%" height="15" fill="rgb(244,229,43)" fg:x="61365" fg:w="130"/><text x="55.6691%" y="415.50"></text></g><g><title>sn_rust_dealloc (56 samples, 0.05%)</title><rect x="55.5365%" y="437" width="0.0506%" height="15" fill="rgb(254,38,20)" fg:x="61495" fg:w="56"/><text x="55.7865%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (20 samples, 0.02%)</title><rect x="55.6033%" y="421" width="0.0181%" height="15" fill="rgb(250,47,30)" fg:x="61569" fg:w="20"/><text x="55.8533%" y="431.50"></text></g><g><title>core::time::Duration::as_nanos (21 samples, 0.02%)</title><rect x="55.6214%" y="421" width="0.0190%" height="15" fill="rgb(224,124,36)" fg:x="61589" fg:w="21"/><text x="55.8714%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (59 samples, 0.05%)</title><rect x="55.6403%" y="405" width="0.0533%" height="15" fill="rgb(246,68,51)" fg:x="61610" fg:w="59"/><text x="55.8903%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (29 samples, 0.03%)</title><rect x="55.7126%" y="373" width="0.0262%" height="15" fill="rgb(253,43,49)" fg:x="61690" fg:w="29"/><text x="55.9626%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::ge (29 samples, 0.03%)</title><rect x="55.7126%" y="357" width="0.0262%" height="15" fill="rgb(219,54,36)" fg:x="61690" fg:w="29"/><text x="55.9626%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (29 samples, 0.03%)</title><rect x="55.7126%" y="341" width="0.0262%" height="15" fill="rgb(227,133,34)" fg:x="61690" fg:w="29"/><text x="55.9626%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (29 samples, 0.03%)</title><rect x="55.7126%" y="325" width="0.0262%" height="15" fill="rgb(247,227,15)" fg:x="61690" fg:w="29"/><text x="55.9626%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (29 samples, 0.03%)</title><rect x="55.7126%" y="309" width="0.0262%" height="15" fill="rgb(229,96,14)" fg:x="61690" fg:w="29"/><text x="55.9626%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (20 samples, 0.02%)</title><rect x="55.7207%" y="293" width="0.0181%" height="15" fill="rgb(220,79,17)" fg:x="61699" fg:w="20"/><text x="55.9707%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (121 samples, 0.11%)</title><rect x="55.6403%" y="421" width="0.1093%" height="15" fill="rgb(205,131,53)" fg:x="61610" fg:w="121"/><text x="55.8903%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (62 samples, 0.06%)</title><rect x="55.6936%" y="405" width="0.0560%" height="15" fill="rgb(209,50,29)" fg:x="61669" fg:w="62"/><text x="55.9436%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (62 samples, 0.06%)</title><rect x="55.6936%" y="389" width="0.0560%" height="15" fill="rgb(245,86,46)" fg:x="61669" fg:w="62"/><text x="55.9436%" y="399.50"></text></g><g><title>core::time::Duration::new (12 samples, 0.01%)</title><rect x="55.7388%" y="373" width="0.0108%" height="15" fill="rgb(235,66,46)" fg:x="61719" fg:w="12"/><text x="55.9888%" y="383.50"></text></g><g><title>tremor_common::time::nanotime (458 samples, 0.41%)</title><rect x="55.5889%" y="437" width="0.4136%" height="15" fill="rgb(232,148,31)" fg:x="61553" fg:w="458"/><text x="55.8389%" y="447.50"></text></g><g><title>std::time::SystemTime::now (280 samples, 0.25%)</title><rect x="55.7496%" y="421" width="0.2529%" height="15" fill="rgb(217,149,8)" fg:x="61731" fg:w="280"/><text x="55.9996%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (280 samples, 0.25%)</title><rect x="55.7496%" y="405" width="0.2529%" height="15" fill="rgb(209,183,11)" fg:x="61731" fg:w="280"/><text x="55.9996%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::now (280 samples, 0.25%)</title><rect x="55.7496%" y="389" width="0.2529%" height="15" fill="rgb(208,55,20)" fg:x="61731" fg:w="280"/><text x="55.9996%" y="399.50"></text></g><g><title>__clock_gettime (226 samples, 0.20%)</title><rect x="55.7984%" y="373" width="0.2041%" height="15" fill="rgb(218,39,14)" fg:x="61785" fg:w="226"/><text x="56.0484%" y="383.50"></text></g><g><title>__vdso_clock_gettime (220 samples, 0.20%)</title><rect x="55.8038%" y="357" width="0.1987%" height="15" fill="rgb(216,169,33)" fg:x="61791" fg:w="220"/><text x="56.0538%" y="367.50"></text></g><g><title>[[vdso]] (194 samples, 0.18%)</title><rect x="55.8273%" y="341" width="0.1752%" height="15" fill="rgb(233,80,24)" fg:x="61817" fg:w="194"/><text x="56.0773%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (90 samples, 0.08%)</title><rect x="56.0052%" y="421" width="0.0813%" height="15" fill="rgb(213,179,31)" fg:x="62014" fg:w="90"/><text x="56.2552%" y="431.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,374 samples, 6.66%)</title><rect x="49.4306%" y="693" width="6.6595%" height="15" fill="rgb(209,19,5)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="703.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,374 samples, 6.66%)</title><rect x="49.4306%" y="677" width="6.6595%" height="15" fill="rgb(219,18,35)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="687.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,374 samples, 6.66%)</title><rect x="49.4306%" y="661" width="6.6595%" height="15" fill="rgb(209,169,16)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="671.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,374 samples, 6.66%)</title><rect x="49.4306%" y="645" width="6.6595%" height="15" fill="rgb(245,90,51)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="655.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,374 samples, 6.66%)</title><rect x="49.4306%" y="629" width="6.6595%" height="15" fill="rgb(220,99,45)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="639.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,374 samples, 6.66%)</title><rect x="49.4306%" y="613" width="6.6595%" height="15" fill="rgb(249,89,25)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="623.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (7,374 samples, 6.66%)</title><rect x="49.4306%" y="597" width="6.6595%" height="15" fill="rgb(239,193,0)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="607.50">std::pani..</text></g><g><title>std::panicking::try (7,374 samples, 6.66%)</title><rect x="49.4306%" y="581" width="6.6595%" height="15" fill="rgb(231,126,1)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="591.50">std::pani..</text></g><g><title>std::panicking::try::do_call (7,374 samples, 6.66%)</title><rect x="49.4306%" y="565" width="6.6595%" height="15" fill="rgb(243,166,3)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="575.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,374 samples, 6.66%)</title><rect x="49.4306%" y="549" width="6.6595%" height="15" fill="rgb(223,22,34)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="559.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (7,374 samples, 6.66%)</title><rect x="49.4306%" y="533" width="6.6595%" height="15" fill="rgb(251,52,51)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="543.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,374 samples, 6.66%)</title><rect x="49.4306%" y="517" width="6.6595%" height="15" fill="rgb(221,165,28)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="527.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (7,374 samples, 6.66%)</title><rect x="49.4306%" y="501" width="6.6595%" height="15" fill="rgb(218,121,47)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="511.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,374 samples, 6.66%)</title><rect x="49.4306%" y="485" width="6.6595%" height="15" fill="rgb(209,120,9)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="495.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,374 samples, 6.66%)</title><rect x="49.4306%" y="469" width="6.6595%" height="15" fill="rgb(236,68,12)" fg:x="54734" fg:w="7374"/><text x="49.6806%" y="479.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,364 samples, 6.65%)</title><rect x="49.4396%" y="453" width="6.6505%" height="15" fill="rgb(225,194,26)" fg:x="54744" fg:w="7364"/><text x="49.6896%" y="463.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (97 samples, 0.09%)</title><rect x="56.0025%" y="437" width="0.0876%" height="15" fill="rgb(231,84,39)" fg:x="62011" fg:w="97"/><text x="56.2525%" y="447.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,375 samples, 6.66%)</title><rect x="49.4306%" y="725" width="6.6604%" height="15" fill="rgb(210,11,45)" fg:x="54734" fg:w="7375"/><text x="49.6806%" y="735.50">tremor_ru..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,375 samples, 6.66%)</title><rect x="49.4306%" y="709" width="6.6604%" height="15" fill="rgb(224,54,52)" fg:x="54734" fg:w="7375"/><text x="49.6806%" y="719.50">&lt;core::fu..</text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="56.0982%" y="597" width="0.0596%" height="15" fill="rgb(238,102,14)" fg:x="62117" fg:w="66"/><text x="56.3482%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (109 samples, 0.10%)</title><rect x="56.2373%" y="517" width="0.0984%" height="15" fill="rgb(243,160,52)" fg:x="62271" fg:w="109"/><text x="56.4873%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (109 samples, 0.10%)</title><rect x="56.2373%" y="501" width="0.0984%" height="15" fill="rgb(216,114,19)" fg:x="62271" fg:w="109"/><text x="56.4873%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (244 samples, 0.22%)</title><rect x="56.3357%" y="517" width="0.2204%" height="15" fill="rgb(244,166,37)" fg:x="62380" fg:w="244"/><text x="56.5857%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (242 samples, 0.22%)</title><rect x="56.3375%" y="501" width="0.2186%" height="15" fill="rgb(246,29,44)" fg:x="62382" fg:w="242"/><text x="56.5875%" y="511.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (410 samples, 0.37%)</title><rect x="56.1876%" y="549" width="0.3703%" height="15" fill="rgb(215,56,53)" fg:x="62216" fg:w="410"/><text x="56.4376%" y="559.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (389 samples, 0.35%)</title><rect x="56.2066%" y="533" width="0.3513%" height="15" fill="rgb(217,60,2)" fg:x="62237" fg:w="389"/><text x="56.4566%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (34 samples, 0.03%)</title><rect x="56.5651%" y="533" width="0.0307%" height="15" fill="rgb(207,26,24)" fg:x="62634" fg:w="34"/><text x="56.8151%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (32 samples, 0.03%)</title><rect x="56.5669%" y="517" width="0.0289%" height="15" fill="rgb(252,210,15)" fg:x="62636" fg:w="32"/><text x="56.8169%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="56.5669%" y="501" width="0.0289%" height="15" fill="rgb(253,209,26)" fg:x="62636" fg:w="32"/><text x="56.8169%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="56.5669%" y="485" width="0.0289%" height="15" fill="rgb(238,170,14)" fg:x="62636" fg:w="32"/><text x="56.8169%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.03%)</title><rect x="56.5687%" y="469" width="0.0271%" height="15" fill="rgb(216,178,15)" fg:x="62638" fg:w="30"/><text x="56.8187%" y="479.50"></text></g><g><title>__GI___pthread_mutex_unlock (30 samples, 0.03%)</title><rect x="56.5687%" y="453" width="0.0271%" height="15" fill="rgb(250,197,2)" fg:x="62638" fg:w="30"/><text x="56.8187%" y="463.50"></text></g><g><title>event_listener::Inner::lock (39 samples, 0.04%)</title><rect x="56.5994%" y="533" width="0.0352%" height="15" fill="rgb(212,70,42)" fg:x="62672" fg:w="39"/><text x="56.8494%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.04%)</title><rect x="56.5994%" y="517" width="0.0352%" height="15" fill="rgb(227,213,9)" fg:x="62672" fg:w="39"/><text x="56.8494%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="56.6003%" y="501" width="0.0343%" height="15" fill="rgb(245,99,25)" fg:x="62673" fg:w="38"/><text x="56.8503%" y="511.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (35 samples, 0.03%)</title><rect x="56.6031%" y="485" width="0.0316%" height="15" fill="rgb(250,82,29)" fg:x="62676" fg:w="35"/><text x="56.8531%" y="495.50"></text></g><g><title>__GI___pthread_mutex_lock (35 samples, 0.03%)</title><rect x="56.6031%" y="469" width="0.0316%" height="15" fill="rgb(241,226,54)" fg:x="62676" fg:w="35"/><text x="56.8531%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (27 samples, 0.02%)</title><rect x="56.6428%" y="437" width="0.0244%" height="15" fill="rgb(221,99,41)" fg:x="62720" fg:w="27"/><text x="56.8928%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="56.6428%" y="421" width="0.0244%" height="15" fill="rgb(213,90,21)" fg:x="62720" fg:w="27"/><text x="56.8928%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="56.6428%" y="405" width="0.0244%" height="15" fill="rgb(205,208,24)" fg:x="62720" fg:w="27"/><text x="56.8928%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="56.6428%" y="389" width="0.0244%" height="15" fill="rgb(246,31,12)" fg:x="62720" fg:w="27"/><text x="56.8928%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="56.6428%" y="373" width="0.0244%" height="15" fill="rgb(213,154,6)" fg:x="62720" fg:w="27"/><text x="56.8928%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (15 samples, 0.01%)</title><rect x="56.6843%" y="357" width="0.0135%" height="15" fill="rgb(222,163,29)" fg:x="62766" fg:w="15"/><text x="56.9343%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (15 samples, 0.01%)</title><rect x="56.6843%" y="341" width="0.0135%" height="15" fill="rgb(227,201,8)" fg:x="62766" fg:w="15"/><text x="56.9343%" y="351.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (22 samples, 0.02%)</title><rect x="56.6979%" y="357" width="0.0199%" height="15" fill="rgb(233,9,32)" fg:x="62781" fg:w="22"/><text x="56.9479%" y="367.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (22 samples, 0.02%)</title><rect x="56.6979%" y="341" width="0.0199%" height="15" fill="rgb(217,54,24)" fg:x="62781" fg:w="22"/><text x="56.9479%" y="351.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (22 samples, 0.02%)</title><rect x="56.6979%" y="325" width="0.0199%" height="15" fill="rgb(235,192,0)" fg:x="62781" fg:w="22"/><text x="56.9479%" y="335.50"></text></g><g><title>__pthread_cond_signal (22 samples, 0.02%)</title><rect x="56.6979%" y="309" width="0.0199%" height="15" fill="rgb(235,45,9)" fg:x="62781" fg:w="22"/><text x="56.9479%" y="319.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (57 samples, 0.05%)</title><rect x="56.6735%" y="405" width="0.0515%" height="15" fill="rgb(246,42,40)" fg:x="62754" fg:w="57"/><text x="56.9235%" y="415.50"></text></g><g><title>parking::Unparker::unpark (51 samples, 0.05%)</title><rect x="56.6789%" y="389" width="0.0461%" height="15" fill="rgb(248,111,24)" fg:x="62760" fg:w="51"/><text x="56.9289%" y="399.50"></text></g><g><title>parking::Inner::unpark (48 samples, 0.04%)</title><rect x="56.6816%" y="373" width="0.0433%" height="15" fill="rgb(249,65,22)" fg:x="62763" fg:w="48"/><text x="56.9316%" y="383.50"></text></g><g><title>core::task::wake::Waker::wake (66 samples, 0.06%)</title><rect x="56.6735%" y="437" width="0.0596%" height="15" fill="rgb(238,111,51)" fg:x="62754" fg:w="66"/><text x="56.9235%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (66 samples, 0.06%)</title><rect x="56.6735%" y="421" width="0.0596%" height="15" fill="rgb(250,118,22)" fg:x="62754" fg:w="66"/><text x="56.9235%" y="431.50"></text></g><g><title>async_executor::State::notify (133 samples, 0.12%)</title><rect x="56.6410%" y="453" width="0.1201%" height="15" fill="rgb(234,84,26)" fg:x="62718" fg:w="133"/><text x="56.8910%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.03%)</title><rect x="56.7331%" y="437" width="0.0280%" height="15" fill="rgb(243,172,12)" fg:x="62820" fg:w="31"/><text x="56.9831%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (31 samples, 0.03%)</title><rect x="56.7331%" y="421" width="0.0280%" height="15" fill="rgb(236,150,49)" fg:x="62820" fg:w="31"/><text x="56.9831%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (28 samples, 0.03%)</title><rect x="56.7358%" y="405" width="0.0253%" height="15" fill="rgb(225,197,26)" fg:x="62823" fg:w="28"/><text x="56.9858%" y="415.50"></text></g><g><title>__GI___pthread_mutex_lock (28 samples, 0.03%)</title><rect x="56.7358%" y="389" width="0.0253%" height="15" fill="rgb(214,17,42)" fg:x="62823" fg:w="28"/><text x="56.9858%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (17 samples, 0.02%)</title><rect x="56.7647%" y="421" width="0.0154%" height="15" fill="rgb(224,165,40)" fg:x="62855" fg:w="17"/><text x="57.0147%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (17 samples, 0.02%)</title><rect x="56.7647%" y="405" width="0.0154%" height="15" fill="rgb(246,100,4)" fg:x="62855" fg:w="17"/><text x="57.0147%" y="415.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (166 samples, 0.15%)</title><rect x="56.6410%" y="469" width="0.1499%" height="15" fill="rgb(222,103,0)" fg:x="62718" fg:w="166"/><text x="56.8910%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (33 samples, 0.03%)</title><rect x="56.7611%" y="453" width="0.0298%" height="15" fill="rgb(227,189,26)" fg:x="62851" fg:w="33"/><text x="57.0111%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (31 samples, 0.03%)</title><rect x="56.7629%" y="437" width="0.0280%" height="15" fill="rgb(214,202,17)" fg:x="62853" fg:w="31"/><text x="57.0129%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (21 samples, 0.02%)</title><rect x="56.7909%" y="469" width="0.0190%" height="15" fill="rgb(229,111,3)" fg:x="62884" fg:w="21"/><text x="57.0409%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (21 samples, 0.02%)</title><rect x="56.7909%" y="453" width="0.0190%" height="15" fill="rgb(229,172,15)" fg:x="62884" fg:w="21"/><text x="57.0409%" y="463.50"></text></g><g><title>event_listener::List::notify (197 samples, 0.18%)</title><rect x="56.6347%" y="533" width="0.1779%" height="15" fill="rgb(230,224,35)" fg:x="62711" fg:w="197"/><text x="56.8847%" y="543.50"></text></g><g><title>core::task::wake::Waker::wake (197 samples, 0.18%)</title><rect x="56.6347%" y="517" width="0.1779%" height="15" fill="rgb(251,141,6)" fg:x="62711" fg:w="197"/><text x="56.8847%" y="527.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (197 samples, 0.18%)</title><rect x="56.6347%" y="501" width="0.1779%" height="15" fill="rgb(225,208,6)" fg:x="62711" fg:w="197"/><text x="56.8847%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (190 samples, 0.17%)</title><rect x="56.6410%" y="485" width="0.1716%" height="15" fill="rgb(246,181,16)" fg:x="62718" fg:w="190"/><text x="56.8910%" y="495.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,009 samples, 0.91%)</title><rect x="56.1804%" y="565" width="0.9112%" height="15" fill="rgb(227,129,36)" fg:x="62208" fg:w="1009"/><text x="56.4304%" y="575.50"></text></g><g><title>event_listener::Event::notify (591 samples, 0.53%)</title><rect x="56.5579%" y="549" width="0.5337%" height="15" fill="rgb(248,117,24)" fg:x="62626" fg:w="591"/><text x="56.8079%" y="559.50"></text></g><g><title>event_listener::full_fence (309 samples, 0.28%)</title><rect x="56.8126%" y="533" width="0.2791%" height="15" fill="rgb(214,185,35)" fg:x="62908" fg:w="309"/><text x="57.0626%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (307 samples, 0.28%)</title><rect x="56.8144%" y="517" width="0.2773%" height="15" fill="rgb(236,150,34)" fg:x="62910" fg:w="307"/><text x="57.0644%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (307 samples, 0.28%)</title><rect x="56.8144%" y="501" width="0.2773%" height="15" fill="rgb(243,228,27)" fg:x="62910" fg:w="307"/><text x="57.0644%" y="511.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,091 samples, 0.99%)</title><rect x="56.1723%" y="581" width="0.9853%" height="15" fill="rgb(245,77,44)" fg:x="62199" fg:w="1091"/><text x="56.4223%" y="591.50"></text></g><g><title>event_listener::Event::notify (63 samples, 0.06%)</title><rect x="57.1007%" y="565" width="0.0569%" height="15" fill="rgb(235,214,42)" fg:x="63227" fg:w="63"/><text x="57.3507%" y="575.50"></text></g><g><title>event_listener::full_fence (61 samples, 0.06%)</title><rect x="57.1025%" y="549" width="0.0551%" height="15" fill="rgb(221,74,3)" fg:x="63229" fg:w="61"/><text x="57.3525%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 0.05%)</title><rect x="57.1034%" y="533" width="0.0542%" height="15" fill="rgb(206,121,29)" fg:x="63230" fg:w="60"/><text x="57.3534%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.05%)</title><rect x="57.1034%" y="517" width="0.0542%" height="15" fill="rgb(249,131,53)" fg:x="63230" fg:w="60"/><text x="57.3534%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,187 samples, 1.07%)</title><rect x="56.0910%" y="645" width="1.0720%" height="15" fill="rgb(236,170,29)" fg:x="62109" fg:w="1187"/><text x="56.3410%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,187 samples, 1.07%)</title><rect x="56.0910%" y="629" width="1.0720%" height="15" fill="rgb(247,96,15)" fg:x="62109" fg:w="1187"/><text x="56.3410%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,187 samples, 1.07%)</title><rect x="56.0910%" y="613" width="1.0720%" height="15" fill="rgb(211,210,7)" fg:x="62109" fg:w="1187"/><text x="56.3410%" y="623.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,113 samples, 1.01%)</title><rect x="56.1578%" y="597" width="1.0052%" height="15" fill="rgb(240,88,50)" fg:x="62183" fg:w="1113"/><text x="56.4078%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="57.4159%" y="629" width="0.0190%" height="15" fill="rgb(209,229,26)" fg:x="63576" fg:w="21"/><text x="57.6659%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="57.6588%" y="501" width="0.0515%" height="15" fill="rgb(210,68,23)" fg:x="63845" fg:w="57"/><text x="57.9088%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="57.6588%" y="485" width="0.0515%" height="15" fill="rgb(229,180,13)" fg:x="63845" fg:w="57"/><text x="57.9088%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (57 samples, 0.05%)</title><rect x="57.6588%" y="469" width="0.0515%" height="15" fill="rgb(236,53,44)" fg:x="63845" fg:w="57"/><text x="57.9088%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (57 samples, 0.05%)</title><rect x="57.6588%" y="453" width="0.0515%" height="15" fill="rgb(244,214,29)" fg:x="63845" fg:w="57"/><text x="57.9088%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (57 samples, 0.05%)</title><rect x="57.6588%" y="437" width="0.0515%" height="15" fill="rgb(220,75,29)" fg:x="63845" fg:w="57"/><text x="57.9088%" y="447.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.05%)</title><rect x="57.6624%" y="421" width="0.0479%" height="15" fill="rgb(214,183,37)" fg:x="63849" fg:w="53"/><text x="57.9124%" y="431.50"></text></g><g><title>__rg_alloc (53 samples, 0.05%)</title><rect x="57.6624%" y="405" width="0.0479%" height="15" fill="rgb(239,117,29)" fg:x="63849" fg:w="53"/><text x="57.9124%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 0.05%)</title><rect x="57.6624%" y="389" width="0.0479%" height="15" fill="rgb(237,171,35)" fg:x="63849" fg:w="53"/><text x="57.9124%" y="399.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="57.6705%" y="373" width="0.0397%" height="15" fill="rgb(229,178,53)" fg:x="63858" fg:w="44"/><text x="57.9205%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (88 samples, 0.08%)</title><rect x="57.6425%" y="613" width="0.0795%" height="15" fill="rgb(210,102,19)" fg:x="63827" fg:w="88"/><text x="57.8925%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (78 samples, 0.07%)</title><rect x="57.6516%" y="597" width="0.0704%" height="15" fill="rgb(235,127,22)" fg:x="63837" fg:w="78"/><text x="57.9016%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (73 samples, 0.07%)</title><rect x="57.6561%" y="581" width="0.0659%" height="15" fill="rgb(244,31,31)" fg:x="63842" fg:w="73"/><text x="57.9061%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (70 samples, 0.06%)</title><rect x="57.6588%" y="565" width="0.0632%" height="15" fill="rgb(231,43,21)" fg:x="63845" fg:w="70"/><text x="57.9088%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (70 samples, 0.06%)</title><rect x="57.6588%" y="549" width="0.0632%" height="15" fill="rgb(217,131,35)" fg:x="63845" fg:w="70"/><text x="57.9088%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (70 samples, 0.06%)</title><rect x="57.6588%" y="533" width="0.0632%" height="15" fill="rgb(221,149,4)" fg:x="63845" fg:w="70"/><text x="57.9088%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (70 samples, 0.06%)</title><rect x="57.6588%" y="517" width="0.0632%" height="15" fill="rgb(232,170,28)" fg:x="63845" fg:w="70"/><text x="57.9088%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="57.7103%" y="501" width="0.0117%" height="15" fill="rgb(238,56,10)" fg:x="63902" fg:w="13"/><text x="57.9603%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="57.7103%" y="485" width="0.0117%" height="15" fill="rgb(235,196,14)" fg:x="63902" fg:w="13"/><text x="57.9603%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.02%)</title><rect x="57.7374%" y="405" width="0.0190%" height="15" fill="rgb(216,45,48)" fg:x="63932" fg:w="21"/><text x="57.9874%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.02%)</title><rect x="57.7374%" y="389" width="0.0190%" height="15" fill="rgb(238,213,17)" fg:x="63932" fg:w="21"/><text x="57.9874%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.02%)</title><rect x="57.7374%" y="373" width="0.0190%" height="15" fill="rgb(212,13,2)" fg:x="63932" fg:w="21"/><text x="57.9874%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="57.7392%" y="357" width="0.0172%" height="15" fill="rgb(240,114,20)" fg:x="63934" fg:w="19"/><text x="57.9892%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="57.7392%" y="341" width="0.0172%" height="15" fill="rgb(228,41,40)" fg:x="63934" fg:w="19"/><text x="57.9892%" y="351.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="57.7392%" y="325" width="0.0172%" height="15" fill="rgb(244,132,35)" fg:x="63934" fg:w="19"/><text x="57.9892%" y="335.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="57.7392%" y="309" width="0.0172%" height="15" fill="rgb(253,189,4)" fg:x="63934" fg:w="19"/><text x="57.9892%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="57.7392%" y="293" width="0.0172%" height="15" fill="rgb(224,37,19)" fg:x="63934" fg:w="19"/><text x="57.9892%" y="303.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="57.7428%" y="277" width="0.0135%" height="15" fill="rgb(235,223,18)" fg:x="63938" fg:w="15"/><text x="57.9928%" y="287.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (39 samples, 0.04%)</title><rect x="57.7356%" y="517" width="0.0352%" height="15" fill="rgb(235,163,25)" fg:x="63930" fg:w="39"/><text x="57.9856%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (39 samples, 0.04%)</title><rect x="57.7356%" y="501" width="0.0352%" height="15" fill="rgb(217,145,28)" fg:x="63930" fg:w="39"/><text x="57.9856%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (39 samples, 0.04%)</title><rect x="57.7356%" y="485" width="0.0352%" height="15" fill="rgb(223,223,32)" fg:x="63930" fg:w="39"/><text x="57.9856%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (37 samples, 0.03%)</title><rect x="57.7374%" y="469" width="0.0334%" height="15" fill="rgb(227,189,39)" fg:x="63932" fg:w="37"/><text x="57.9874%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (37 samples, 0.03%)</title><rect x="57.7374%" y="453" width="0.0334%" height="15" fill="rgb(248,10,22)" fg:x="63932" fg:w="37"/><text x="57.9874%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (37 samples, 0.03%)</title><rect x="57.7374%" y="437" width="0.0334%" height="15" fill="rgb(248,46,39)" fg:x="63932" fg:w="37"/><text x="57.9874%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (37 samples, 0.03%)</title><rect x="57.7374%" y="421" width="0.0334%" height="15" fill="rgb(248,113,48)" fg:x="63932" fg:w="37"/><text x="57.9874%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.01%)</title><rect x="57.7563%" y="405" width="0.0144%" height="15" fill="rgb(245,16,25)" fg:x="63953" fg:w="16"/><text x="58.0063%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="57.7563%" y="389" width="0.0144%" height="15" fill="rgb(249,152,16)" fg:x="63953" fg:w="16"/><text x="58.0063%" y="399.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="57.7572%" y="373" width="0.0135%" height="15" fill="rgb(250,16,1)" fg:x="63954" fg:w="15"/><text x="58.0072%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="57.7825%" y="469" width="0.0235%" height="15" fill="rgb(249,138,3)" fg:x="63982" fg:w="26"/><text x="58.0325%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="57.7825%" y="453" width="0.0235%" height="15" fill="rgb(227,71,41)" fg:x="63982" fg:w="26"/><text x="58.0325%" y="463.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="57.7843%" y="437" width="0.0217%" height="15" fill="rgb(209,184,23)" fg:x="63984" fg:w="24"/><text x="58.0343%" y="447.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="57.7843%" y="421" width="0.0217%" height="15" fill="rgb(223,215,31)" fg:x="63984" fg:w="24"/><text x="58.0343%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="57.7843%" y="405" width="0.0217%" height="15" fill="rgb(210,146,28)" fg:x="63984" fg:w="24"/><text x="58.0343%" y="415.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="57.7852%" y="389" width="0.0208%" height="15" fill="rgb(209,183,41)" fg:x="63985" fg:w="23"/><text x="58.0352%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 0.03%)</title><rect x="57.7789%" y="517" width="0.0307%" height="15" fill="rgb(209,224,45)" fg:x="63978" fg:w="34"/><text x="58.0289%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.03%)</title><rect x="57.7825%" y="501" width="0.0271%" height="15" fill="rgb(224,209,51)" fg:x="63982" fg:w="30"/><text x="58.0325%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.03%)</title><rect x="57.7825%" y="485" width="0.0271%" height="15" fill="rgb(223,17,39)" fg:x="63982" fg:w="30"/><text x="58.0325%" y="495.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (413 samples, 0.37%)</title><rect x="57.4384%" y="629" width="0.3730%" height="15" fill="rgb(234,204,37)" fg:x="63601" fg:w="413"/><text x="57.6884%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (99 samples, 0.09%)</title><rect x="57.7220%" y="613" width="0.0894%" height="15" fill="rgb(236,120,5)" fg:x="63915" fg:w="99"/><text x="57.9720%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (91 samples, 0.08%)</title><rect x="57.7292%" y="597" width="0.0822%" height="15" fill="rgb(248,97,27)" fg:x="63923" fg:w="91"/><text x="57.9792%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (91 samples, 0.08%)</title><rect x="57.7292%" y="581" width="0.0822%" height="15" fill="rgb(240,66,17)" fg:x="63923" fg:w="91"/><text x="57.9792%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (91 samples, 0.08%)</title><rect x="57.7292%" y="565" width="0.0822%" height="15" fill="rgb(210,79,3)" fg:x="63923" fg:w="91"/><text x="57.9792%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (91 samples, 0.08%)</title><rect x="57.7292%" y="549" width="0.0822%" height="15" fill="rgb(214,176,27)" fg:x="63923" fg:w="91"/><text x="57.9792%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (91 samples, 0.08%)</title><rect x="57.7292%" y="533" width="0.0822%" height="15" fill="rgb(235,185,3)" fg:x="63923" fg:w="91"/><text x="57.9792%" y="543.50"></text></g><g><title>[libc-2.31.so] (51 samples, 0.05%)</title><rect x="57.8114%" y="629" width="0.0461%" height="15" fill="rgb(227,24,12)" fg:x="64014" fg:w="51"/><text x="58.0614%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (137 samples, 0.12%)</title><rect x="57.8593%" y="629" width="0.1237%" height="15" fill="rgb(252,169,48)" fg:x="64067" fg:w="137"/><text x="58.1093%" y="639.50"></text></g><g><title>core::ptr::write (129 samples, 0.12%)</title><rect x="57.8665%" y="613" width="0.1165%" height="15" fill="rgb(212,65,1)" fg:x="64075" fg:w="129"/><text x="58.1165%" y="623.50"></text></g><g><title>[libc-2.31.so] (128 samples, 0.12%)</title><rect x="57.8674%" y="597" width="0.1156%" height="15" fill="rgb(242,39,24)" fg:x="64076" fg:w="128"/><text x="58.1174%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (296 samples, 0.27%)</title><rect x="58.0137%" y="469" width="0.2673%" height="15" fill="rgb(249,32,23)" fg:x="64238" fg:w="296"/><text x="58.2637%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (336 samples, 0.30%)</title><rect x="57.9830%" y="629" width="0.3034%" height="15" fill="rgb(251,195,23)" fg:x="64204" fg:w="336"/><text x="58.2330%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (336 samples, 0.30%)</title><rect x="57.9830%" y="613" width="0.3034%" height="15" fill="rgb(236,174,8)" fg:x="64204" fg:w="336"/><text x="58.2330%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (329 samples, 0.30%)</title><rect x="57.9893%" y="597" width="0.2971%" height="15" fill="rgb(220,197,8)" fg:x="64211" fg:w="329"/><text x="58.2393%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (329 samples, 0.30%)</title><rect x="57.9893%" y="581" width="0.2971%" height="15" fill="rgb(240,108,37)" fg:x="64211" fg:w="329"/><text x="58.2393%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (327 samples, 0.30%)</title><rect x="57.9911%" y="565" width="0.2953%" height="15" fill="rgb(232,176,24)" fg:x="64213" fg:w="327"/><text x="58.2411%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (327 samples, 0.30%)</title><rect x="57.9911%" y="549" width="0.2953%" height="15" fill="rgb(243,35,29)" fg:x="64213" fg:w="327"/><text x="58.2411%" y="559.50"></text></g><g><title>alloc::alloc::alloc (326 samples, 0.29%)</title><rect x="57.9920%" y="533" width="0.2944%" height="15" fill="rgb(210,37,18)" fg:x="64214" fg:w="326"/><text x="58.2420%" y="543.50"></text></g><g><title>__rg_alloc (326 samples, 0.29%)</title><rect x="57.9920%" y="517" width="0.2944%" height="15" fill="rgb(224,184,40)" fg:x="64214" fg:w="326"/><text x="58.2420%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (326 samples, 0.29%)</title><rect x="57.9920%" y="501" width="0.2944%" height="15" fill="rgb(236,39,29)" fg:x="64214" fg:w="326"/><text x="58.2420%" y="511.50"></text></g><g><title>sn_rust_alloc (326 samples, 0.29%)</title><rect x="57.9920%" y="485" width="0.2944%" height="15" fill="rgb(232,48,39)" fg:x="64214" fg:w="326"/><text x="58.2420%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.04%)</title><rect x="58.2946%" y="533" width="0.0379%" height="15" fill="rgb(236,34,42)" fg:x="64549" fg:w="42"/><text x="58.5446%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.04%)</title><rect x="58.2946%" y="517" width="0.0379%" height="15" fill="rgb(243,106,37)" fg:x="64549" fg:w="42"/><text x="58.5446%" y="527.50"></text></g><g><title>__rg_dealloc (42 samples, 0.04%)</title><rect x="58.2946%" y="501" width="0.0379%" height="15" fill="rgb(218,96,6)" fg:x="64549" fg:w="42"/><text x="58.5446%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (42 samples, 0.04%)</title><rect x="58.2946%" y="485" width="0.0379%" height="15" fill="rgb(235,130,12)" fg:x="64549" fg:w="42"/><text x="58.5446%" y="495.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="58.2946%" y="469" width="0.0379%" height="15" fill="rgb(231,95,0)" fg:x="64549" fg:w="42"/><text x="58.5446%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (53 samples, 0.05%)</title><rect x="58.2864%" y="629" width="0.0479%" height="15" fill="rgb(228,12,23)" fg:x="64540" fg:w="53"/><text x="58.5364%" y="639.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.05%)</title><rect x="58.2864%" y="613" width="0.0479%" height="15" fill="rgb(216,12,1)" fg:x="64540" fg:w="53"/><text x="58.5364%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (47 samples, 0.04%)</title><rect x="58.2919%" y="597" width="0.0424%" height="15" fill="rgb(219,59,3)" fg:x="64546" fg:w="47"/><text x="58.5419%" y="607.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="58.2919%" y="581" width="0.0424%" height="15" fill="rgb(215,208,46)" fg:x="64546" fg:w="47"/><text x="58.5419%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="58.2946%" y="565" width="0.0397%" height="15" fill="rgb(254,224,29)" fg:x="64549" fg:w="44"/><text x="58.5446%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="58.2946%" y="549" width="0.0397%" height="15" fill="rgb(232,14,29)" fg:x="64549" fg:w="44"/><text x="58.5446%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,491 samples, 2.25%)</title><rect x="56.0910%" y="725" width="2.2496%" height="15" fill="rgb(208,45,52)" fg:x="62109" fg:w="2491"/><text x="56.3410%" y="735.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,491 samples, 2.25%)</title><rect x="56.0910%" y="709" width="2.2496%" height="15" fill="rgb(234,191,28)" fg:x="62109" fg:w="2491"/><text x="56.3410%" y="719.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,491 samples, 2.25%)</title><rect x="56.0910%" y="693" width="2.2496%" height="15" fill="rgb(244,67,43)" fg:x="62109" fg:w="2491"/><text x="56.3410%" y="703.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,491 samples, 2.25%)</title><rect x="56.0910%" y="677" width="2.2496%" height="15" fill="rgb(236,189,24)" fg:x="62109" fg:w="2491"/><text x="56.3410%" y="687.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,491 samples, 2.25%)</title><rect x="56.0910%" y="661" width="2.2496%" height="15" fill="rgb(239,214,33)" fg:x="62109" fg:w="2491"/><text x="56.3410%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,304 samples, 1.18%)</title><rect x="57.1630%" y="645" width="1.1776%" height="15" fill="rgb(226,176,41)" fg:x="63296" fg:w="1304"/><text x="57.4130%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (109 samples, 0.10%)</title><rect x="58.3406%" y="629" width="0.0984%" height="15" fill="rgb(248,47,8)" fg:x="64600" fg:w="109"/><text x="58.5906%" y="639.50"></text></g><g><title>[libc-2.31.so] (95 samples, 0.09%)</title><rect x="58.3533%" y="613" width="0.0858%" height="15" fill="rgb(218,81,44)" fg:x="64614" fg:w="95"/><text x="58.6033%" y="623.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="58.5348%" y="613" width="0.0415%" height="15" fill="rgb(213,98,6)" fg:x="64815" fg:w="46"/><text x="58.7848%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="58.5890%" y="581" width="0.0144%" height="15" fill="rgb(222,85,22)" fg:x="64875" fg:w="16"/><text x="58.8390%" y="591.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.11%)</title><rect x="58.6034%" y="581" width="0.1066%" height="15" fill="rgb(239,46,39)" fg:x="64891" fg:w="118"/><text x="58.8534%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (199 samples, 0.18%)</title><rect x="58.5845%" y="597" width="0.1797%" height="15" fill="rgb(237,12,29)" fg:x="64870" fg:w="199"/><text x="58.8345%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (60 samples, 0.05%)</title><rect x="58.7100%" y="581" width="0.0542%" height="15" fill="rgb(214,77,8)" fg:x="65009" fg:w="60"/><text x="58.9600%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (60 samples, 0.05%)</title><rect x="58.7100%" y="565" width="0.0542%" height="15" fill="rgb(217,168,37)" fg:x="65009" fg:w="60"/><text x="58.9600%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (60 samples, 0.05%)</title><rect x="58.7100%" y="549" width="0.0542%" height="15" fill="rgb(221,217,23)" fg:x="65009" fg:w="60"/><text x="58.9600%" y="559.50"></text></g><g><title>alloc::alloc::alloc (57 samples, 0.05%)</title><rect x="58.7127%" y="533" width="0.0515%" height="15" fill="rgb(243,229,36)" fg:x="65012" fg:w="57"/><text x="58.9627%" y="543.50"></text></g><g><title>__rg_alloc (57 samples, 0.05%)</title><rect x="58.7127%" y="517" width="0.0515%" height="15" fill="rgb(251,163,40)" fg:x="65012" fg:w="57"/><text x="58.9627%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (57 samples, 0.05%)</title><rect x="58.7127%" y="501" width="0.0515%" height="15" fill="rgb(237,222,12)" fg:x="65012" fg:w="57"/><text x="58.9627%" y="511.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.05%)</title><rect x="58.7127%" y="485" width="0.0515%" height="15" fill="rgb(248,132,6)" fg:x="65012" fg:w="57"/><text x="58.9627%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="58.7524%" y="469" width="0.0117%" height="15" fill="rgb(227,167,50)" fg:x="65056" fg:w="13"/><text x="59.0024%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (268 samples, 0.24%)</title><rect x="58.5782%" y="613" width="0.2420%" height="15" fill="rgb(242,84,37)" fg:x="64863" fg:w="268"/><text x="58.8282%" y="623.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.06%)</title><rect x="58.7642%" y="597" width="0.0560%" height="15" fill="rgb(212,4,50)" fg:x="65069" fg:w="62"/><text x="59.0142%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (430 samples, 0.39%)</title><rect x="58.4391%" y="629" width="0.3883%" height="15" fill="rgb(230,228,32)" fg:x="64709" fg:w="430"/><text x="58.6891%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (544 samples, 0.49%)</title><rect x="58.3406%" y="709" width="0.4913%" height="15" fill="rgb(248,217,23)" fg:x="64600" fg:w="544"/><text x="58.5906%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (544 samples, 0.49%)</title><rect x="58.3406%" y="693" width="0.4913%" height="15" fill="rgb(238,197,32)" fg:x="64600" fg:w="544"/><text x="58.5906%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (544 samples, 0.49%)</title><rect x="58.3406%" y="677" width="0.4913%" height="15" fill="rgb(236,106,1)" fg:x="64600" fg:w="544"/><text x="58.5906%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (544 samples, 0.49%)</title><rect x="58.3406%" y="661" width="0.4913%" height="15" fill="rgb(219,228,13)" fg:x="64600" fg:w="544"/><text x="58.5906%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (544 samples, 0.49%)</title><rect x="58.3406%" y="645" width="0.4913%" height="15" fill="rgb(238,30,35)" fg:x="64600" fg:w="544"/><text x="58.5906%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,414 samples, 9.40%)</title><rect x="49.4279%" y="901" width="9.4049%" height="15" fill="rgb(236,70,23)" fg:x="54731" fg:w="10414"/><text x="49.6779%" y="911.50">async_task::r..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,411 samples, 9.40%)</title><rect x="49.4306%" y="885" width="9.4022%" height="15" fill="rgb(249,104,48)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="895.50">&lt;core::pin::P..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,411 samples, 9.40%)</title><rect x="49.4306%" y="869" width="9.4022%" height="15" fill="rgb(254,117,50)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="879.50">&lt;core::future..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,411 samples, 9.40%)</title><rect x="49.4306%" y="853" width="9.4022%" height="15" fill="rgb(223,152,4)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="863.50">async_executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,411 samples, 9.40%)</title><rect x="49.4306%" y="837" width="9.4022%" height="15" fill="rgb(245,6,2)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="847.50">&lt;async_std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,411 samples, 9.40%)</title><rect x="49.4306%" y="821" width="9.4022%" height="15" fill="rgb(249,150,24)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="831.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,411 samples, 9.40%)</title><rect x="49.4306%" y="805" width="9.4022%" height="15" fill="rgb(228,185,42)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="815.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,411 samples, 9.40%)</title><rect x="49.4306%" y="789" width="9.4022%" height="15" fill="rgb(226,39,33)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="799.50">std::thread::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,411 samples, 9.40%)</title><rect x="49.4306%" y="773" width="9.4022%" height="15" fill="rgb(221,166,19)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="783.50">async_std::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,411 samples, 9.40%)</title><rect x="49.4306%" y="757" width="9.4022%" height="15" fill="rgb(209,109,2)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="767.50">&lt;async_std::t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,411 samples, 9.40%)</title><rect x="49.4306%" y="741" width="9.4022%" height="15" fill="rgb(252,216,26)" fg:x="54734" fg:w="10411"/><text x="49.6806%" y="751.50">&lt;core::future..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (545 samples, 0.49%)</title><rect x="58.3406%" y="725" width="0.4922%" height="15" fill="rgb(227,173,36)" fg:x="64600" fg:w="545"/><text x="58.5906%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (49 samples, 0.04%)</title><rect x="58.8391%" y="901" width="0.0443%" height="15" fill="rgb(209,90,7)" fg:x="65152" fg:w="49"/><text x="59.0891%" y="911.50"></text></g><g><title>core::str::converts::from_utf8 (97 samples, 0.09%)</title><rect x="58.9132%" y="901" width="0.0876%" height="15" fill="rgb(250,194,11)" fg:x="65234" fg:w="97"/><text x="59.1632%" y="911.50"></text></g><g><title>event_listener::Event::notify (36 samples, 0.03%)</title><rect x="59.0017%" y="901" width="0.0325%" height="15" fill="rgb(220,72,50)" fg:x="65332" fg:w="36"/><text x="59.2517%" y="911.50"></text></g><g><title>event_listener::full_fence (19 samples, 0.02%)</title><rect x="59.0171%" y="885" width="0.0172%" height="15" fill="rgb(222,106,48)" fg:x="65349" fg:w="19"/><text x="59.2671%" y="895.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (47 samples, 0.04%)</title><rect x="59.0423%" y="901" width="0.0424%" height="15" fill="rgb(216,220,45)" fg:x="65377" fg:w="47"/><text x="59.2923%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.01%)</title><rect x="59.0857%" y="901" width="0.0108%" height="15" fill="rgb(234,112,18)" fg:x="65425" fg:w="12"/><text x="59.3357%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (43 samples, 0.04%)</title><rect x="59.0965%" y="901" width="0.0388%" height="15" fill="rgb(206,179,9)" fg:x="65437" fg:w="43"/><text x="59.3465%" y="911.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (24 samples, 0.02%)</title><rect x="59.1354%" y="901" width="0.0217%" height="15" fill="rgb(215,115,40)" fg:x="65480" fg:w="24"/><text x="59.3854%" y="911.50"></text></g><g><title>parking::Inner::park (14 samples, 0.01%)</title><rect x="59.1570%" y="901" width="0.0126%" height="15" fill="rgb(222,69,34)" fg:x="65504" fg:w="14"/><text x="59.4070%" y="911.50"></text></g><g><title>polling::epoll::Poller::wait (24 samples, 0.02%)</title><rect x="59.1742%" y="901" width="0.0217%" height="15" fill="rgb(209,161,10)" fg:x="65523" fg:w="24"/><text x="59.4242%" y="911.50"></text></g><g><title>rmp::encode::uint::write_uint (38 samples, 0.03%)</title><rect x="59.1959%" y="901" width="0.0343%" height="15" fill="rgb(217,6,38)" fg:x="65547" fg:w="38"/><text x="59.4459%" y="911.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.07%)</title><rect x="59.2437%" y="901" width="0.0659%" height="15" fill="rgb(229,229,48)" fg:x="65600" fg:w="73"/><text x="59.4937%" y="911.50"></text></g><g><title>sn_rust_realloc (19 samples, 0.02%)</title><rect x="59.3097%" y="901" width="0.0172%" height="15" fill="rgb(225,21,28)" fg:x="65673" fg:w="19"/><text x="59.5597%" y="911.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.03%)</title><rect x="59.3350%" y="901" width="0.0271%" height="15" fill="rgb(206,33,13)" fg:x="65701" fg:w="30"/><text x="59.5850%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (22 samples, 0.02%)</title><rect x="59.5183%" y="453" width="0.0199%" height="15" fill="rgb(242,178,17)" fg:x="65904" fg:w="22"/><text x="59.7683%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (22 samples, 0.02%)</title><rect x="59.5183%" y="437" width="0.0199%" height="15" fill="rgb(220,162,5)" fg:x="65904" fg:w="22"/><text x="59.7683%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (22 samples, 0.02%)</title><rect x="59.5183%" y="421" width="0.0199%" height="15" fill="rgb(210,33,43)" fg:x="65904" fg:w="22"/><text x="59.7683%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (50 samples, 0.05%)</title><rect x="59.5661%" y="421" width="0.0452%" height="15" fill="rgb(216,116,54)" fg:x="65957" fg:w="50"/><text x="59.8161%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50 samples, 0.05%)</title><rect x="59.5661%" y="405" width="0.0452%" height="15" fill="rgb(249,92,24)" fg:x="65957" fg:w="50"/><text x="59.8161%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (45 samples, 0.04%)</title><rect x="59.5707%" y="389" width="0.0406%" height="15" fill="rgb(231,189,14)" fg:x="65962" fg:w="45"/><text x="59.8207%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (45 samples, 0.04%)</title><rect x="59.5707%" y="373" width="0.0406%" height="15" fill="rgb(230,8,41)" fg:x="65962" fg:w="45"/><text x="59.8207%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="59.5707%" y="357" width="0.0406%" height="15" fill="rgb(249,7,27)" fg:x="65962" fg:w="45"/><text x="59.8207%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="59.5707%" y="341" width="0.0406%" height="15" fill="rgb(232,86,5)" fg:x="65962" fg:w="45"/><text x="59.8207%" y="351.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.04%)</title><rect x="59.5716%" y="325" width="0.0397%" height="15" fill="rgb(224,175,18)" fg:x="65963" fg:w="44"/><text x="59.8216%" y="335.50"></text></g><g><title>__rg_alloc (44 samples, 0.04%)</title><rect x="59.5716%" y="309" width="0.0397%" height="15" fill="rgb(220,129,12)" fg:x="65963" fg:w="44"/><text x="59.8216%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.04%)</title><rect x="59.5716%" y="293" width="0.0397%" height="15" fill="rgb(210,19,36)" fg:x="65963" fg:w="44"/><text x="59.8216%" y="303.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.04%)</title><rect x="59.5752%" y="277" width="0.0361%" height="15" fill="rgb(219,96,14)" fg:x="65967" fg:w="40"/><text x="59.8252%" y="287.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (76 samples, 0.07%)</title><rect x="59.5472%" y="453" width="0.0686%" height="15" fill="rgb(249,106,1)" fg:x="65936" fg:w="76"/><text x="59.7972%" y="463.50"></text></g><g><title>rmp_serde::encode::to_vec (67 samples, 0.06%)</title><rect x="59.5553%" y="437" width="0.0605%" height="15" fill="rgb(249,155,20)" fg:x="65945" fg:w="67"/><text x="59.8053%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.03%)</title><rect x="59.7134%" y="181" width="0.0280%" height="15" fill="rgb(244,168,9)" fg:x="66120" fg:w="31"/><text x="59.9634%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.03%)</title><rect x="59.7134%" y="165" width="0.0280%" height="15" fill="rgb(216,23,50)" fg:x="66120" fg:w="31"/><text x="59.9634%" y="175.50"></text></g><g><title>__rg_dealloc (31 samples, 0.03%)</title><rect x="59.7134%" y="149" width="0.0280%" height="15" fill="rgb(224,219,20)" fg:x="66120" fg:w="31"/><text x="59.9634%" y="159.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (31 samples, 0.03%)</title><rect x="59.7134%" y="133" width="0.0280%" height="15" fill="rgb(222,156,15)" fg:x="66120" fg:w="31"/><text x="59.9634%" y="143.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="59.7170%" y="117" width="0.0244%" height="15" fill="rgb(231,97,17)" fg:x="66124" fg:w="27"/><text x="59.9670%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="59.7106%" y="277" width="0.0325%" height="15" fill="rgb(218,70,48)" fg:x="66117" fg:w="36"/><text x="59.9606%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="59.7106%" y="261" width="0.0325%" height="15" fill="rgb(212,196,52)" fg:x="66117" fg:w="36"/><text x="59.9606%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (33 samples, 0.03%)</title><rect x="59.7134%" y="245" width="0.0298%" height="15" fill="rgb(243,203,18)" fg:x="66120" fg:w="33"/><text x="59.9634%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="59.7134%" y="229" width="0.0298%" height="15" fill="rgb(252,125,41)" fg:x="66120" fg:w="33"/><text x="59.9634%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="59.7134%" y="213" width="0.0298%" height="15" fill="rgb(223,180,33)" fg:x="66120" fg:w="33"/><text x="59.9634%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="59.7134%" y="197" width="0.0298%" height="15" fill="rgb(254,159,46)" fg:x="66120" fg:w="33"/><text x="59.9634%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (55 samples, 0.05%)</title><rect x="59.6962%" y="325" width="0.0497%" height="15" fill="rgb(254,38,10)" fg:x="66101" fg:w="55"/><text x="59.9462%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (51 samples, 0.05%)</title><rect x="59.6998%" y="309" width="0.0461%" height="15" fill="rgb(208,217,32)" fg:x="66105" fg:w="51"/><text x="59.9498%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (51 samples, 0.05%)</title><rect x="59.6998%" y="293" width="0.0461%" height="15" fill="rgb(221,120,13)" fg:x="66105" fg:w="51"/><text x="59.9498%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (79 samples, 0.07%)</title><rect x="59.6781%" y="341" width="0.0713%" height="15" fill="rgb(246,54,52)" fg:x="66081" fg:w="79"/><text x="59.9281%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (44 samples, 0.04%)</title><rect x="59.7495%" y="341" width="0.0397%" height="15" fill="rgb(242,34,25)" fg:x="66160" fg:w="44"/><text x="59.9995%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.03%)</title><rect x="59.7576%" y="325" width="0.0316%" height="15" fill="rgb(247,209,9)" fg:x="66169" fg:w="35"/><text x="60.0076%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (35 samples, 0.03%)</title><rect x="59.7576%" y="309" width="0.0316%" height="15" fill="rgb(228,71,26)" fg:x="66169" fg:w="35"/><text x="60.0076%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.08%)</title><rect x="59.7919%" y="277" width="0.0777%" height="15" fill="rgb(222,145,49)" fg:x="66207" fg:w="86"/><text x="60.0419%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.08%)</title><rect x="59.7919%" y="261" width="0.0777%" height="15" fill="rgb(218,121,17)" fg:x="66207" fg:w="86"/><text x="60.0419%" y="271.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.07%)</title><rect x="59.7964%" y="245" width="0.0732%" height="15" fill="rgb(244,50,7)" fg:x="66212" fg:w="81"/><text x="60.0464%" y="255.50"></text></g><g><title>__rg_alloc (81 samples, 0.07%)</title><rect x="59.7964%" y="229" width="0.0732%" height="15" fill="rgb(246,229,37)" fg:x="66212" fg:w="81"/><text x="60.0464%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (81 samples, 0.07%)</title><rect x="59.7964%" y="213" width="0.0732%" height="15" fill="rgb(225,18,5)" fg:x="66212" fg:w="81"/><text x="60.0464%" y="223.50"></text></g><g><title>sn_rust_alloc (81 samples, 0.07%)</title><rect x="59.7964%" y="197" width="0.0732%" height="15" fill="rgb(213,204,8)" fg:x="66212" fg:w="81"/><text x="60.0464%" y="207.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (552 samples, 0.50%)</title><rect x="59.3720%" y="821" width="0.4985%" height="15" fill="rgb(238,103,6)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (552 samples, 0.50%)</title><rect x="59.3720%" y="805" width="0.4985%" height="15" fill="rgb(222,25,35)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (552 samples, 0.50%)</title><rect x="59.3720%" y="789" width="0.4985%" height="15" fill="rgb(213,203,35)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="799.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (552 samples, 0.50%)</title><rect x="59.3720%" y="773" width="0.4985%" height="15" fill="rgb(221,79,53)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="783.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (552 samples, 0.50%)</title><rect x="59.3720%" y="757" width="0.4985%" height="15" fill="rgb(243,200,35)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="767.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (552 samples, 0.50%)</title><rect x="59.3720%" y="741" width="0.4985%" height="15" fill="rgb(248,60,25)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="751.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (552 samples, 0.50%)</title><rect x="59.3720%" y="725" width="0.4985%" height="15" fill="rgb(227,53,46)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="735.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (552 samples, 0.50%)</title><rect x="59.3720%" y="709" width="0.4985%" height="15" fill="rgb(216,120,32)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="719.50"></text></g><g><title>std::panic::catch_unwind (552 samples, 0.50%)</title><rect x="59.3720%" y="693" width="0.4985%" height="15" fill="rgb(220,134,1)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="703.50"></text></g><g><title>std::panicking::try (552 samples, 0.50%)</title><rect x="59.3720%" y="677" width="0.4985%" height="15" fill="rgb(237,168,5)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="687.50"></text></g><g><title>std::panicking::try::do_call (552 samples, 0.50%)</title><rect x="59.3720%" y="661" width="0.4985%" height="15" fill="rgb(231,100,33)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="671.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (552 samples, 0.50%)</title><rect x="59.3720%" y="645" width="0.4985%" height="15" fill="rgb(236,177,47)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (552 samples, 0.50%)</title><rect x="59.3720%" y="629" width="0.4985%" height="15" fill="rgb(235,7,49)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (552 samples, 0.50%)</title><rect x="59.3720%" y="613" width="0.4985%" height="15" fill="rgb(232,119,22)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="623.50"></text></g><g><title>async_ffi::FfiContext::with_context (552 samples, 0.50%)</title><rect x="59.3720%" y="597" width="0.4985%" height="15" fill="rgb(254,73,53)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (552 samples, 0.50%)</title><rect x="59.3720%" y="581" width="0.4985%" height="15" fill="rgb(251,35,20)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (552 samples, 0.50%)</title><rect x="59.3720%" y="565" width="0.4985%" height="15" fill="rgb(241,119,20)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (552 samples, 0.50%)</title><rect x="59.3720%" y="549" width="0.4985%" height="15" fill="rgb(207,102,14)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (552 samples, 0.50%)</title><rect x="59.3720%" y="533" width="0.4985%" height="15" fill="rgb(248,201,50)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (552 samples, 0.50%)</title><rect x="59.3720%" y="517" width="0.4985%" height="15" fill="rgb(222,185,44)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (552 samples, 0.50%)</title><rect x="59.3720%" y="501" width="0.4985%" height="15" fill="rgb(218,107,18)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (552 samples, 0.50%)</title><rect x="59.3720%" y="485" width="0.4985%" height="15" fill="rgb(237,177,39)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (552 samples, 0.50%)</title><rect x="59.3720%" y="469" width="0.4985%" height="15" fill="rgb(246,69,6)" fg:x="65742" fg:w="552"/><text x="59.6220%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (282 samples, 0.25%)</title><rect x="59.6158%" y="453" width="0.2547%" height="15" fill="rgb(234,208,37)" fg:x="66012" fg:w="282"/><text x="59.8658%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (282 samples, 0.25%)</title><rect x="59.6158%" y="437" width="0.2547%" height="15" fill="rgb(225,4,6)" fg:x="66012" fg:w="282"/><text x="59.8658%" y="447.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (282 samples, 0.25%)</title><rect x="59.6158%" y="421" width="0.2547%" height="15" fill="rgb(233,45,0)" fg:x="66012" fg:w="282"/><text x="59.8658%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (280 samples, 0.25%)</title><rect x="59.6176%" y="405" width="0.2529%" height="15" fill="rgb(226,136,5)" fg:x="66014" fg:w="280"/><text x="59.8676%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (280 samples, 0.25%)</title><rect x="59.6176%" y="389" width="0.2529%" height="15" fill="rgb(211,91,47)" fg:x="66014" fg:w="280"/><text x="59.8676%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (277 samples, 0.25%)</title><rect x="59.6203%" y="373" width="0.2502%" height="15" fill="rgb(242,88,51)" fg:x="66017" fg:w="277"/><text x="59.8703%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (217 samples, 0.20%)</title><rect x="59.6745%" y="357" width="0.1960%" height="15" fill="rgb(230,91,28)" fg:x="66077" fg:w="217"/><text x="59.9245%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (90 samples, 0.08%)</title><rect x="59.7892%" y="341" width="0.0813%" height="15" fill="rgb(254,186,29)" fg:x="66204" fg:w="90"/><text x="60.0392%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="59.7892%" y="325" width="0.0813%" height="15" fill="rgb(238,6,4)" fg:x="66204" fg:w="90"/><text x="60.0392%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="59.7892%" y="309" width="0.0813%" height="15" fill="rgb(221,151,16)" fg:x="66204" fg:w="90"/><text x="60.0392%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 0.08%)</title><rect x="59.7892%" y="293" width="0.0813%" height="15" fill="rgb(251,143,52)" fg:x="66204" fg:w="90"/><text x="60.0392%" y="303.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (88 samples, 0.08%)</title><rect x="60.0755%" y="693" width="0.0795%" height="15" fill="rgb(206,90,15)" fg:x="66521" fg:w="88"/><text x="60.3255%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (81 samples, 0.07%)</title><rect x="60.0818%" y="677" width="0.0732%" height="15" fill="rgb(218,35,8)" fg:x="66528" fg:w="81"/><text x="60.3318%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (81 samples, 0.07%)</title><rect x="60.0818%" y="661" width="0.0732%" height="15" fill="rgb(239,215,6)" fg:x="66528" fg:w="81"/><text x="60.3318%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (81 samples, 0.07%)</title><rect x="60.0818%" y="645" width="0.0732%" height="15" fill="rgb(245,116,39)" fg:x="66528" fg:w="81"/><text x="60.3318%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (81 samples, 0.07%)</title><rect x="60.0818%" y="629" width="0.0732%" height="15" fill="rgb(242,65,28)" fg:x="66528" fg:w="81"/><text x="60.3318%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (81 samples, 0.07%)</title><rect x="60.0818%" y="613" width="0.0732%" height="15" fill="rgb(252,132,53)" fg:x="66528" fg:w="81"/><text x="60.3318%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (79 samples, 0.07%)</title><rect x="60.0836%" y="597" width="0.0713%" height="15" fill="rgb(224,159,50)" fg:x="66530" fg:w="79"/><text x="60.3336%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (72 samples, 0.07%)</title><rect x="60.0899%" y="581" width="0.0650%" height="15" fill="rgb(224,93,4)" fg:x="66537" fg:w="72"/><text x="60.3399%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (72 samples, 0.07%)</title><rect x="60.0899%" y="565" width="0.0650%" height="15" fill="rgb(208,81,34)" fg:x="66537" fg:w="72"/><text x="60.3399%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (72 samples, 0.07%)</title><rect x="60.0899%" y="549" width="0.0650%" height="15" fill="rgb(233,92,54)" fg:x="66537" fg:w="72"/><text x="60.3399%" y="559.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.07%)</title><rect x="60.0899%" y="533" width="0.0650%" height="15" fill="rgb(237,21,14)" fg:x="66537" fg:w="72"/><text x="60.3399%" y="543.50"></text></g><g><title>__rg_alloc (72 samples, 0.07%)</title><rect x="60.0899%" y="517" width="0.0650%" height="15" fill="rgb(249,128,51)" fg:x="66537" fg:w="72"/><text x="60.3399%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (72 samples, 0.07%)</title><rect x="60.0899%" y="501" width="0.0650%" height="15" fill="rgb(223,129,24)" fg:x="66537" fg:w="72"/><text x="60.3399%" y="511.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.06%)</title><rect x="60.0963%" y="485" width="0.0587%" height="15" fill="rgb(231,168,25)" fg:x="66544" fg:w="65"/><text x="60.3463%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (49 samples, 0.04%)</title><rect x="60.1107%" y="469" width="0.0443%" height="15" fill="rgb(224,39,20)" fg:x="66560" fg:w="49"/><text x="60.3607%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (192 samples, 0.17%)</title><rect x="60.3230%" y="453" width="0.1734%" height="15" fill="rgb(225,152,53)" fg:x="66795" fg:w="192"/><text x="60.5730%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (312 samples, 0.28%)</title><rect x="60.2173%" y="613" width="0.2818%" height="15" fill="rgb(252,17,24)" fg:x="66678" fg:w="312"/><text x="60.4673%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (312 samples, 0.28%)</title><rect x="60.2173%" y="597" width="0.2818%" height="15" fill="rgb(250,114,30)" fg:x="66678" fg:w="312"/><text x="60.4673%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (300 samples, 0.27%)</title><rect x="60.2281%" y="581" width="0.2709%" height="15" fill="rgb(229,5,4)" fg:x="66690" fg:w="300"/><text x="60.4781%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (294 samples, 0.27%)</title><rect x="60.2335%" y="565" width="0.2655%" height="15" fill="rgb(225,176,49)" fg:x="66696" fg:w="294"/><text x="60.4835%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (286 samples, 0.26%)</title><rect x="60.2408%" y="549" width="0.2583%" height="15" fill="rgb(224,221,49)" fg:x="66704" fg:w="286"/><text x="60.4908%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (286 samples, 0.26%)</title><rect x="60.2408%" y="533" width="0.2583%" height="15" fill="rgb(253,169,27)" fg:x="66704" fg:w="286"/><text x="60.4908%" y="543.50"></text></g><g><title>alloc::alloc::alloc (286 samples, 0.26%)</title><rect x="60.2408%" y="517" width="0.2583%" height="15" fill="rgb(211,206,16)" fg:x="66704" fg:w="286"/><text x="60.4908%" y="527.50"></text></g><g><title>__rg_alloc (286 samples, 0.26%)</title><rect x="60.2408%" y="501" width="0.2583%" height="15" fill="rgb(244,87,35)" fg:x="66704" fg:w="286"/><text x="60.4908%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (286 samples, 0.26%)</title><rect x="60.2408%" y="485" width="0.2583%" height="15" fill="rgb(246,28,10)" fg:x="66704" fg:w="286"/><text x="60.4908%" y="495.50"></text></g><g><title>sn_rust_alloc (282 samples, 0.25%)</title><rect x="60.2444%" y="469" width="0.2547%" height="15" fill="rgb(229,12,44)" fg:x="66708" fg:w="282"/><text x="60.4944%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (330 samples, 0.30%)</title><rect x="60.2092%" y="629" width="0.2980%" height="15" fill="rgb(210,145,37)" fg:x="66669" fg:w="330"/><text x="60.4592%" y="639.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (708 samples, 0.64%)</title><rect x="60.1550%" y="677" width="0.6394%" height="15" fill="rgb(227,112,52)" fg:x="66609" fg:w="708"/><text x="60.4050%" y="687.50"></text></g><g><title>value_trait::Builder::object (652 samples, 0.59%)</title><rect x="60.2055%" y="661" width="0.5888%" height="15" fill="rgb(238,155,34)" fg:x="66665" fg:w="652"/><text x="60.4555%" y="671.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (652 samples, 0.59%)</title><rect x="60.2055%" y="645" width="0.5888%" height="15" fill="rgb(239,226,36)" fg:x="66665" fg:w="652"/><text x="60.4555%" y="655.50"></text></g><g><title>tremor_value::value::Value::Object (318 samples, 0.29%)</title><rect x="60.5072%" y="629" width="0.2872%" height="15" fill="rgb(230,16,23)" fg:x="66999" fg:w="318"/><text x="60.7572%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (842 samples, 0.76%)</title><rect x="60.0403%" y="709" width="0.7604%" height="15" fill="rgb(236,171,36)" fg:x="66482" fg:w="842"/><text x="60.2903%" y="719.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (715 samples, 0.65%)</title><rect x="60.1550%" y="693" width="0.6457%" height="15" fill="rgb(221,22,14)" fg:x="66609" fg:w="715"/><text x="60.4050%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (13 samples, 0.01%)</title><rect x="60.8016%" y="709" width="0.0117%" height="15" fill="rgb(242,43,11)" fg:x="67325" fg:w="13"/><text x="61.0516%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (13 samples, 0.01%)</title><rect x="60.8016%" y="693" width="0.0117%" height="15" fill="rgb(232,69,23)" fg:x="67325" fg:w="13"/><text x="61.0516%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="60.8016%" y="677" width="0.0117%" height="15" fill="rgb(216,180,54)" fg:x="67325" fg:w="13"/><text x="61.0516%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="60.8224%" y="693" width="0.0108%" height="15" fill="rgb(216,5,24)" fg:x="67348" fg:w="12"/><text x="61.0724%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="60.8224%" y="677" width="0.0108%" height="15" fill="rgb(225,89,9)" fg:x="67348" fg:w="12"/><text x="61.0724%" y="687.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="60.8585%" y="613" width="0.0244%" height="15" fill="rgb(243,75,33)" fg:x="67388" fg:w="27"/><text x="61.1085%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (58 samples, 0.05%)</title><rect x="60.8332%" y="693" width="0.0524%" height="15" fill="rgb(247,141,45)" fg:x="67360" fg:w="58"/><text x="61.0832%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (58 samples, 0.05%)</title><rect x="60.8332%" y="677" width="0.0524%" height="15" fill="rgb(232,177,36)" fg:x="67360" fg:w="58"/><text x="61.0832%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="60.8431%" y="661" width="0.0424%" height="15" fill="rgb(219,125,36)" fg:x="67371" fg:w="47"/><text x="61.0931%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="60.8431%" y="645" width="0.0424%" height="15" fill="rgb(227,94,9)" fg:x="67371" fg:w="47"/><text x="61.0931%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (47 samples, 0.04%)</title><rect x="60.8431%" y="629" width="0.0424%" height="15" fill="rgb(240,34,52)" fg:x="67371" fg:w="47"/><text x="61.0931%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (91 samples, 0.08%)</title><rect x="60.8133%" y="709" width="0.0822%" height="15" fill="rgb(216,45,12)" fg:x="67338" fg:w="91"/><text x="61.0633%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,145 samples, 1.03%)</title><rect x="59.8705%" y="725" width="1.0341%" height="15" fill="rgb(246,21,19)" fg:x="66294" fg:w="1145"/><text x="60.1205%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="60.9154%" y="709" width="0.0244%" height="15" fill="rgb(213,98,42)" fg:x="67451" fg:w="27"/><text x="61.1654%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="60.9154%" y="693" width="0.0244%" height="15" fill="rgb(250,136,47)" fg:x="67451" fg:w="27"/><text x="61.1654%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="60.9154%" y="677" width="0.0244%" height="15" fill="rgb(251,124,27)" fg:x="67451" fg:w="27"/><text x="61.1654%" y="687.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="60.9154%" y="661" width="0.0244%" height="15" fill="rgb(229,180,14)" fg:x="67451" fg:w="27"/><text x="61.1654%" y="671.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="60.9154%" y="645" width="0.0244%" height="15" fill="rgb(245,216,25)" fg:x="67451" fg:w="27"/><text x="61.1654%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="60.9154%" y="629" width="0.0244%" height="15" fill="rgb(251,43,5)" fg:x="67451" fg:w="27"/><text x="61.1654%" y="639.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="60.9172%" y="613" width="0.0226%" height="15" fill="rgb(250,128,24)" fg:x="67453" fg:w="25"/><text x="61.1672%" y="623.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (45 samples, 0.04%)</title><rect x="60.9046%" y="725" width="0.0406%" height="15" fill="rgb(217,117,27)" fg:x="67439" fg:w="45"/><text x="61.1546%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (53 samples, 0.05%)</title><rect x="61.0536%" y="709" width="0.0479%" height="15" fill="rgb(245,147,4)" fg:x="67604" fg:w="53"/><text x="61.3036%" y="719.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (42 samples, 0.04%)</title><rect x="61.1014%" y="709" width="0.0379%" height="15" fill="rgb(242,201,35)" fg:x="67657" fg:w="42"/><text x="61.3514%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (42 samples, 0.04%)</title><rect x="61.1014%" y="693" width="0.0379%" height="15" fill="rgb(218,181,1)" fg:x="67657" fg:w="42"/><text x="61.3514%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (36 samples, 0.03%)</title><rect x="61.1068%" y="677" width="0.0325%" height="15" fill="rgb(222,6,29)" fg:x="67663" fg:w="36"/><text x="61.3568%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.03%)</title><rect x="61.1068%" y="661" width="0.0325%" height="15" fill="rgb(208,186,3)" fg:x="67663" fg:w="36"/><text x="61.3568%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.03%)</title><rect x="61.1068%" y="645" width="0.0325%" height="15" fill="rgb(216,36,26)" fg:x="67663" fg:w="36"/><text x="61.3568%" y="655.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.03%)</title><rect x="61.1068%" y="629" width="0.0325%" height="15" fill="rgb(248,201,23)" fg:x="67663" fg:w="36"/><text x="61.3568%" y="639.50"></text></g><g><title>__rg_alloc (36 samples, 0.03%)</title><rect x="61.1068%" y="613" width="0.0325%" height="15" fill="rgb(251,170,31)" fg:x="67663" fg:w="36"/><text x="61.3568%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (36 samples, 0.03%)</title><rect x="61.1068%" y="597" width="0.0325%" height="15" fill="rgb(207,110,25)" fg:x="67663" fg:w="36"/><text x="61.3568%" y="607.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="61.1123%" y="581" width="0.0271%" height="15" fill="rgb(250,54,15)" fg:x="67669" fg:w="30"/><text x="61.3623%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.02%)</title><rect x="61.1204%" y="565" width="0.0190%" height="15" fill="rgb(227,68,33)" fg:x="67678" fg:w="21"/><text x="61.3704%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.03%)</title><rect x="61.1394%" y="709" width="0.0307%" height="15" fill="rgb(238,34,41)" fg:x="67699" fg:w="34"/><text x="61.3894%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="61.1394%" y="693" width="0.0307%" height="15" fill="rgb(220,11,15)" fg:x="67699" fg:w="34"/><text x="61.3894%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="61.1394%" y="677" width="0.0307%" height="15" fill="rgb(246,111,35)" fg:x="67699" fg:w="34"/><text x="61.3894%" y="687.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="61.1439%" y="661" width="0.0262%" height="15" fill="rgb(209,88,53)" fg:x="67704" fg:w="29"/><text x="61.3939%" y="671.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="61.1439%" y="645" width="0.0262%" height="15" fill="rgb(231,185,47)" fg:x="67704" fg:w="29"/><text x="61.3939%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="61.1439%" y="629" width="0.0262%" height="15" fill="rgb(233,154,1)" fg:x="67704" fg:w="29"/><text x="61.3939%" y="639.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="61.1493%" y="613" width="0.0208%" height="15" fill="rgb(225,15,46)" fg:x="67710" fg:w="23"/><text x="61.3993%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="61.3335%" y="421" width="0.0181%" height="15" fill="rgb(211,135,41)" fg:x="67914" fg:w="20"/><text x="61.5835%" y="431.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (47 samples, 0.04%)</title><rect x="61.3100%" y="581" width="0.0424%" height="15" fill="rgb(208,54,0)" fg:x="67888" fg:w="47"/><text x="61.5600%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="61.3137%" y="565" width="0.0388%" height="15" fill="rgb(244,136,14)" fg:x="67892" fg:w="43"/><text x="61.5637%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="61.3137%" y="549" width="0.0388%" height="15" fill="rgb(241,56,14)" fg:x="67892" fg:w="43"/><text x="61.5637%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="61.3146%" y="533" width="0.0379%" height="15" fill="rgb(205,80,24)" fg:x="67893" fg:w="42"/><text x="61.5646%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="61.3146%" y="517" width="0.0379%" height="15" fill="rgb(220,57,4)" fg:x="67893" fg:w="42"/><text x="61.5646%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="61.3146%" y="501" width="0.0379%" height="15" fill="rgb(226,193,50)" fg:x="67893" fg:w="42"/><text x="61.5646%" y="511.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="61.3146%" y="485" width="0.0379%" height="15" fill="rgb(231,168,22)" fg:x="67893" fg:w="42"/><text x="61.5646%" y="495.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="61.3146%" y="469" width="0.0379%" height="15" fill="rgb(254,215,14)" fg:x="67893" fg:w="42"/><text x="61.5646%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="61.3146%" y="453" width="0.0379%" height="15" fill="rgb(211,115,16)" fg:x="67893" fg:w="42"/><text x="61.5646%" y="463.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="61.3200%" y="437" width="0.0325%" height="15" fill="rgb(236,210,16)" fg:x="67899" fg:w="36"/><text x="61.5700%" y="447.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="61.2857%" y="693" width="0.0722%" height="15" fill="rgb(221,94,12)" fg:x="67861" fg:w="80"/><text x="61.5357%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (59 samples, 0.05%)</title><rect x="61.3046%" y="677" width="0.0533%" height="15" fill="rgb(235,218,49)" fg:x="67882" fg:w="59"/><text x="61.5546%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (59 samples, 0.05%)</title><rect x="61.3046%" y="661" width="0.0533%" height="15" fill="rgb(217,114,14)" fg:x="67882" fg:w="59"/><text x="61.5546%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (57 samples, 0.05%)</title><rect x="61.3064%" y="645" width="0.0515%" height="15" fill="rgb(216,145,22)" fg:x="67884" fg:w="57"/><text x="61.5564%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (54 samples, 0.05%)</title><rect x="61.3091%" y="629" width="0.0488%" height="15" fill="rgb(217,112,39)" fg:x="67887" fg:w="54"/><text x="61.5591%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (53 samples, 0.05%)</title><rect x="61.3100%" y="613" width="0.0479%" height="15" fill="rgb(225,85,32)" fg:x="67888" fg:w="53"/><text x="61.5600%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (53 samples, 0.05%)</title><rect x="61.3100%" y="597" width="0.0479%" height="15" fill="rgb(245,209,47)" fg:x="67888" fg:w="53"/><text x="61.5600%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,775 samples, 1.60%)</title><rect x="59.8705%" y="805" width="1.6030%" height="15" fill="rgb(218,220,15)" fg:x="66294" fg:w="1775"/><text x="60.1205%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,775 samples, 1.60%)</title><rect x="59.8705%" y="789" width="1.6030%" height="15" fill="rgb(222,202,31)" fg:x="66294" fg:w="1775"/><text x="60.1205%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,775 samples, 1.60%)</title><rect x="59.8705%" y="773" width="1.6030%" height="15" fill="rgb(243,203,4)" fg:x="66294" fg:w="1775"/><text x="60.1205%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,775 samples, 1.60%)</title><rect x="59.8705%" y="757" width="1.6030%" height="15" fill="rgb(237,92,17)" fg:x="66294" fg:w="1775"/><text x="60.1205%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,775 samples, 1.60%)</title><rect x="59.8705%" y="741" width="1.6030%" height="15" fill="rgb(231,119,7)" fg:x="66294" fg:w="1775"/><text x="60.1205%" y="751.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (585 samples, 0.53%)</title><rect x="60.9452%" y="725" width="0.5283%" height="15" fill="rgb(237,82,41)" fg:x="67484" fg:w="585"/><text x="61.1952%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (333 samples, 0.30%)</title><rect x="61.1728%" y="709" width="0.3007%" height="15" fill="rgb(226,81,48)" fg:x="67736" fg:w="333"/><text x="61.4228%" y="719.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (128 samples, 0.12%)</title><rect x="61.3579%" y="693" width="0.1156%" height="15" fill="rgb(234,70,51)" fg:x="67941" fg:w="128"/><text x="61.6079%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (67 samples, 0.06%)</title><rect x="61.4771%" y="645" width="0.0605%" height="15" fill="rgb(251,86,4)" fg:x="68073" fg:w="67"/><text x="61.7271%" y="655.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (67 samples, 0.06%)</title><rect x="61.4771%" y="629" width="0.0605%" height="15" fill="rgb(244,144,28)" fg:x="68073" fg:w="67"/><text x="61.7271%" y="639.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (67 samples, 0.06%)</title><rect x="61.4771%" y="613" width="0.0605%" height="15" fill="rgb(232,161,39)" fg:x="68073" fg:w="67"/><text x="61.7271%" y="623.50"></text></g><g><title>[libc-2.31.so] (61 samples, 0.06%)</title><rect x="61.4825%" y="597" width="0.0551%" height="15" fill="rgb(247,34,51)" fg:x="68079" fg:w="61"/><text x="61.7325%" y="607.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.02%)</title><rect x="61.5837%" y="597" width="0.0181%" height="15" fill="rgb(225,132,2)" fg:x="68191" fg:w="20"/><text x="61.8337%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (20 samples, 0.02%)</title><rect x="61.5837%" y="581" width="0.0181%" height="15" fill="rgb(209,159,44)" fg:x="68191" fg:w="20"/><text x="61.8337%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (20 samples, 0.02%)</title><rect x="61.5837%" y="565" width="0.0181%" height="15" fill="rgb(251,214,1)" fg:x="68191" fg:w="20"/><text x="61.8337%" y="575.50"></text></g><g><title>async_ffi::FfiContext::with_context (19 samples, 0.02%)</title><rect x="61.5846%" y="549" width="0.0172%" height="15" fill="rgb(247,84,47)" fg:x="68192" fg:w="19"/><text x="61.8346%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,067 samples, 1.87%)</title><rect x="59.8705%" y="821" width="1.8667%" height="15" fill="rgb(240,111,43)" fg:x="66294" fg:w="2067"/><text x="60.1205%" y="831.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (292 samples, 0.26%)</title><rect x="61.4735%" y="805" width="0.2637%" height="15" fill="rgb(215,214,35)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="815.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (292 samples, 0.26%)</title><rect x="61.4735%" y="789" width="0.2637%" height="15" fill="rgb(248,207,23)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="799.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (292 samples, 0.26%)</title><rect x="61.4735%" y="773" width="0.2637%" height="15" fill="rgb(214,186,4)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.26%)</title><rect x="61.4735%" y="757" width="0.2637%" height="15" fill="rgb(220,133,22)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (292 samples, 0.26%)</title><rect x="61.4735%" y="741" width="0.2637%" height="15" fill="rgb(239,134,19)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="751.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.26%)</title><rect x="61.4735%" y="725" width="0.2637%" height="15" fill="rgb(250,140,9)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="735.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (292 samples, 0.26%)</title><rect x="61.4735%" y="709" width="0.2637%" height="15" fill="rgb(225,59,14)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="719.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (292 samples, 0.26%)</title><rect x="61.4735%" y="693" width="0.2637%" height="15" fill="rgb(214,152,51)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (292 samples, 0.26%)</title><rect x="61.4735%" y="677" width="0.2637%" height="15" fill="rgb(251,227,43)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (292 samples, 0.26%)</title><rect x="61.4735%" y="661" width="0.2637%" height="15" fill="rgb(241,96,17)" fg:x="68069" fg:w="292"/><text x="61.7235%" y="671.50"></text></g><g><title>std::panic::catch_unwind (221 samples, 0.20%)</title><rect x="61.5376%" y="645" width="0.1996%" height="15" fill="rgb(234,198,43)" fg:x="68140" fg:w="221"/><text x="61.7876%" y="655.50"></text></g><g><title>std::panicking::try (221 samples, 0.20%)</title><rect x="61.5376%" y="629" width="0.1996%" height="15" fill="rgb(220,108,29)" fg:x="68140" fg:w="221"/><text x="61.7876%" y="639.50"></text></g><g><title>std::panicking::try::do_call (221 samples, 0.20%)</title><rect x="61.5376%" y="613" width="0.1996%" height="15" fill="rgb(226,163,33)" fg:x="68140" fg:w="221"/><text x="61.7876%" y="623.50"></text></g><g><title>[libc-2.31.so] (150 samples, 0.14%)</title><rect x="61.6017%" y="597" width="0.1355%" height="15" fill="rgb(205,194,45)" fg:x="68211" fg:w="150"/><text x="61.8517%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (75 samples, 0.07%)</title><rect x="61.7896%" y="693" width="0.0677%" height="15" fill="rgb(206,143,44)" fg:x="68419" fg:w="75"/><text x="62.0396%" y="703.50"></text></g><g><title>core::mem::replace (75 samples, 0.07%)</title><rect x="61.7896%" y="677" width="0.0677%" height="15" fill="rgb(236,136,36)" fg:x="68419" fg:w="75"/><text x="62.0396%" y="687.50"></text></g><g><title>core::ptr::read (75 samples, 0.07%)</title><rect x="61.7896%" y="661" width="0.0677%" height="15" fill="rgb(249,172,42)" fg:x="68419" fg:w="75"/><text x="62.0396%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (130 samples, 0.12%)</title><rect x="61.7652%" y="709" width="0.1174%" height="15" fill="rgb(216,139,23)" fg:x="68392" fg:w="130"/><text x="62.0152%" y="719.50"></text></g><g><title>core::mem::drop (28 samples, 0.03%)</title><rect x="61.8573%" y="693" width="0.0253%" height="15" fill="rgb(207,166,20)" fg:x="68494" fg:w="28"/><text x="62.1073%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (28 samples, 0.03%)</title><rect x="61.8573%" y="677" width="0.0253%" height="15" fill="rgb(210,209,22)" fg:x="68494" fg:w="28"/><text x="62.1073%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (129 samples, 0.12%)</title><rect x="61.8826%" y="709" width="0.1165%" height="15" fill="rgb(232,118,20)" fg:x="68522" fg:w="129"/><text x="62.1326%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (121 samples, 0.11%)</title><rect x="61.8898%" y="693" width="0.1093%" height="15" fill="rgb(238,113,42)" fg:x="68530" fg:w="121"/><text x="62.1398%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.11%)</title><rect x="61.8898%" y="677" width="0.1093%" height="15" fill="rgb(231,42,5)" fg:x="68530" fg:w="121"/><text x="62.1398%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (110 samples, 0.10%)</title><rect x="61.8998%" y="661" width="0.0993%" height="15" fill="rgb(243,166,24)" fg:x="68541" fg:w="110"/><text x="62.1498%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (110 samples, 0.10%)</title><rect x="61.8998%" y="645" width="0.0993%" height="15" fill="rgb(237,226,12)" fg:x="68541" fg:w="110"/><text x="62.1498%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (106 samples, 0.10%)</title><rect x="61.9034%" y="629" width="0.0957%" height="15" fill="rgb(229,133,24)" fg:x="68545" fg:w="106"/><text x="62.1534%" y="639.50"></text></g><g><title>core::task::wake::Waker::will_wake (18 samples, 0.02%)</title><rect x="62.0018%" y="709" width="0.0163%" height="15" fill="rgb(238,33,43)" fg:x="68654" fg:w="18"/><text x="62.2518%" y="719.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="62.0018%" y="693" width="0.0163%" height="15" fill="rgb(227,59,38)" fg:x="68654" fg:w="18"/><text x="62.2518%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="62.0072%" y="677" width="0.0108%" height="15" fill="rgb(230,97,0)" fg:x="68660" fg:w="12"/><text x="62.2572%" y="687.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="62.0072%" y="661" width="0.0108%" height="15" fill="rgb(250,173,50)" fg:x="68660" fg:w="12"/><text x="62.2572%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (959 samples, 0.87%)</title><rect x="61.7372%" y="805" width="0.8661%" height="15" fill="rgb(240,15,50)" fg:x="68361" fg:w="959"/><text x="61.9872%" y="815.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (959 samples, 0.87%)</title><rect x="61.7372%" y="789" width="0.8661%" height="15" fill="rgb(221,93,22)" fg:x="68361" fg:w="959"/><text x="61.9872%" y="799.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (959 samples, 0.87%)</title><rect x="61.7372%" y="773" width="0.8661%" height="15" fill="rgb(245,180,53)" fg:x="68361" fg:w="959"/><text x="61.9872%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (959 samples, 0.87%)</title><rect x="61.7372%" y="757" width="0.8661%" height="15" fill="rgb(231,88,51)" fg:x="68361" fg:w="959"/><text x="61.9872%" y="767.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (959 samples, 0.87%)</title><rect x="61.7372%" y="741" width="0.8661%" height="15" fill="rgb(240,58,21)" fg:x="68361" fg:w="959"/><text x="61.9872%" y="751.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (959 samples, 0.87%)</title><rect x="61.7372%" y="725" width="0.8661%" height="15" fill="rgb(237,21,10)" fg:x="68361" fg:w="959"/><text x="61.9872%" y="735.50"></text></g><g><title>event_listener::Inner::lock (648 samples, 0.59%)</title><rect x="62.0181%" y="709" width="0.5852%" height="15" fill="rgb(218,43,11)" fg:x="68672" fg:w="648"/><text x="62.2681%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (640 samples, 0.58%)</title><rect x="62.0253%" y="693" width="0.5780%" height="15" fill="rgb(218,221,29)" fg:x="68680" fg:w="640"/><text x="62.2753%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (637 samples, 0.58%)</title><rect x="62.0280%" y="677" width="0.5753%" height="15" fill="rgb(214,118,42)" fg:x="68683" fg:w="637"/><text x="62.2780%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (625 samples, 0.56%)</title><rect x="62.0389%" y="661" width="0.5644%" height="15" fill="rgb(251,200,26)" fg:x="68695" fg:w="625"/><text x="62.2889%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (625 samples, 0.56%)</title><rect x="62.0389%" y="645" width="0.5644%" height="15" fill="rgb(237,101,39)" fg:x="68695" fg:w="625"/><text x="62.2889%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (323 samples, 0.29%)</title><rect x="62.7071%" y="677" width="0.2917%" height="15" fill="rgb(251,117,11)" fg:x="69435" fg:w="323"/><text x="62.9571%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="62.9862%" y="661" width="0.0126%" height="15" fill="rgb(216,223,23)" fg:x="69744" fg:w="14"/><text x="63.2362%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="63.0052%" y="661" width="0.0117%" height="15" fill="rgb(251,54,12)" fg:x="69765" fg:w="13"/><text x="63.2552%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (34 samples, 0.03%)</title><rect x="62.9989%" y="677" width="0.0307%" height="15" fill="rgb(254,176,54)" fg:x="69758" fg:w="34"/><text x="63.2489%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (372 samples, 0.34%)</title><rect x="62.7017%" y="693" width="0.3360%" height="15" fill="rgb(210,32,8)" fg:x="69429" fg:w="372"/><text x="62.9517%" y="703.50"></text></g><g><title>[libc-2.31.so] (226 samples, 0.20%)</title><rect x="63.0377%" y="693" width="0.2041%" height="15" fill="rgb(235,52,38)" fg:x="69801" fg:w="226"/><text x="63.2877%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="63.2626%" y="581" width="0.0181%" height="15" fill="rgb(231,4,44)" fg:x="70050" fg:w="20"/><text x="63.5126%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (47 samples, 0.04%)</title><rect x="63.2418%" y="693" width="0.0424%" height="15" fill="rgb(249,2,32)" fg:x="70027" fg:w="47"/><text x="63.4918%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.04%)</title><rect x="63.2418%" y="677" width="0.0424%" height="15" fill="rgb(224,65,26)" fg:x="70027" fg:w="47"/><text x="63.4918%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.04%)</title><rect x="63.2418%" y="661" width="0.0424%" height="15" fill="rgb(250,73,40)" fg:x="70027" fg:w="47"/><text x="63.4918%" y="671.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="63.2418%" y="645" width="0.0424%" height="15" fill="rgb(253,177,16)" fg:x="70027" fg:w="47"/><text x="63.4918%" y="655.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="63.2418%" y="629" width="0.0424%" height="15" fill="rgb(217,32,34)" fg:x="70027" fg:w="47"/><text x="63.4918%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="63.2418%" y="613" width="0.0424%" height="15" fill="rgb(212,7,10)" fg:x="70027" fg:w="47"/><text x="63.4918%" y="623.50"></text></g><g><title>sn_rust_alloc (47 samples, 0.04%)</title><rect x="63.2418%" y="597" width="0.0424%" height="15" fill="rgb(245,89,8)" fg:x="70027" fg:w="47"/><text x="63.4918%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (12 samples, 0.01%)</title><rect x="63.2942%" y="693" width="0.0108%" height="15" fill="rgb(237,16,53)" fg:x="70085" fg:w="12"/><text x="63.5442%" y="703.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (159 samples, 0.14%)</title><rect x="63.3050%" y="693" width="0.1436%" height="15" fill="rgb(250,204,30)" fg:x="70097" fg:w="159"/><text x="63.5550%" y="703.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (152 samples, 0.14%)</title><rect x="63.3113%" y="677" width="0.1373%" height="15" fill="rgb(208,77,27)" fg:x="70104" fg:w="152"/><text x="63.5613%" y="687.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (152 samples, 0.14%)</title><rect x="63.3113%" y="661" width="0.1373%" height="15" fill="rgb(250,204,28)" fg:x="70104" fg:w="152"/><text x="63.5613%" y="671.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (152 samples, 0.14%)</title><rect x="63.3113%" y="645" width="0.1373%" height="15" fill="rgb(244,63,21)" fg:x="70104" fg:w="152"/><text x="63.5613%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (152 samples, 0.14%)</title><rect x="63.3113%" y="629" width="0.1373%" height="15" fill="rgb(236,85,44)" fg:x="70104" fg:w="152"/><text x="63.5613%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (145 samples, 0.13%)</title><rect x="63.3176%" y="613" width="0.1310%" height="15" fill="rgb(215,98,4)" fg:x="70111" fg:w="145"/><text x="63.5676%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (138 samples, 0.12%)</title><rect x="63.3240%" y="597" width="0.1246%" height="15" fill="rgb(235,38,11)" fg:x="70118" fg:w="138"/><text x="63.5740%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (138 samples, 0.12%)</title><rect x="63.3240%" y="581" width="0.1246%" height="15" fill="rgb(254,186,25)" fg:x="70118" fg:w="138"/><text x="63.5740%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (138 samples, 0.12%)</title><rect x="63.3240%" y="565" width="0.1246%" height="15" fill="rgb(225,55,31)" fg:x="70118" fg:w="138"/><text x="63.5740%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (138 samples, 0.12%)</title><rect x="63.3240%" y="549" width="0.1246%" height="15" fill="rgb(211,15,21)" fg:x="70118" fg:w="138"/><text x="63.5740%" y="559.50"></text></g><g><title>[libc-2.31.so] (116 samples, 0.10%)</title><rect x="63.3438%" y="533" width="0.1048%" height="15" fill="rgb(215,187,41)" fg:x="70140" fg:w="116"/><text x="63.5938%" y="543.50"></text></g><g><title>ahash::operations::folded_multiply (21 samples, 0.02%)</title><rect x="63.4522%" y="613" width="0.0190%" height="15" fill="rgb(248,69,32)" fg:x="70260" fg:w="21"/><text x="63.7022%" y="623.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (15 samples, 0.01%)</title><rect x="63.4576%" y="597" width="0.0135%" height="15" fill="rgb(252,102,52)" fg:x="70266" fg:w="15"/><text x="63.7076%" y="607.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (24 samples, 0.02%)</title><rect x="63.4522%" y="629" width="0.0217%" height="15" fill="rgb(253,140,32)" fg:x="70260" fg:w="24"/><text x="63.7022%" y="639.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (13 samples, 0.01%)</title><rect x="63.4992%" y="581" width="0.0117%" height="15" fill="rgb(216,56,42)" fg:x="70312" fg:w="13"/><text x="63.7492%" y="591.50"></text></g><g><title>ahash::operations::read_small (12 samples, 0.01%)</title><rect x="63.5109%" y="581" width="0.0108%" height="15" fill="rgb(216,184,14)" fg:x="70325" fg:w="12"/><text x="63.7609%" y="591.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (52 samples, 0.05%)</title><rect x="63.4811%" y="597" width="0.0470%" height="15" fill="rgb(237,187,27)" fg:x="70292" fg:w="52"/><text x="63.7311%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (106 samples, 0.10%)</title><rect x="63.4486%" y="645" width="0.0957%" height="15" fill="rgb(219,65,3)" fg:x="70256" fg:w="106"/><text x="63.6986%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (71 samples, 0.06%)</title><rect x="63.4802%" y="629" width="0.0641%" height="15" fill="rgb(245,83,25)" fg:x="70291" fg:w="71"/><text x="63.7302%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (70 samples, 0.06%)</title><rect x="63.4811%" y="613" width="0.0632%" height="15" fill="rgb(214,205,45)" fg:x="70292" fg:w="70"/><text x="63.7311%" y="623.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (18 samples, 0.02%)</title><rect x="63.5281%" y="597" width="0.0163%" height="15" fill="rgb(241,20,18)" fg:x="70344" fg:w="18"/><text x="63.7781%" y="607.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (18 samples, 0.02%)</title><rect x="63.5281%" y="581" width="0.0163%" height="15" fill="rgb(232,163,23)" fg:x="70344" fg:w="18"/><text x="63.7781%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="63.5732%" y="597" width="0.0126%" height="15" fill="rgb(214,5,46)" fg:x="70394" fg:w="14"/><text x="63.8232%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="63.5732%" y="613" width="0.0208%" height="15" fill="rgb(229,78,17)" fg:x="70394" fg:w="23"/><text x="63.8232%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (108 samples, 0.10%)</title><rect x="63.5940%" y="597" width="0.0975%" height="15" fill="rgb(248,89,10)" fg:x="70417" fg:w="108"/><text x="63.8440%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (100 samples, 0.09%)</title><rect x="63.6012%" y="581" width="0.0903%" height="15" fill="rgb(248,54,15)" fg:x="70425" fg:w="100"/><text x="63.8512%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (100 samples, 0.09%)</title><rect x="63.6012%" y="565" width="0.0903%" height="15" fill="rgb(223,116,6)" fg:x="70425" fg:w="100"/><text x="63.8512%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (100 samples, 0.09%)</title><rect x="63.6012%" y="549" width="0.0903%" height="15" fill="rgb(205,125,38)" fg:x="70425" fg:w="100"/><text x="63.8512%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (100 samples, 0.09%)</title><rect x="63.6012%" y="533" width="0.0903%" height="15" fill="rgb(251,78,38)" fg:x="70425" fg:w="100"/><text x="63.8512%" y="543.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="63.6581%" y="517" width="0.0334%" height="15" fill="rgb(253,78,28)" fg:x="70488" fg:w="37"/><text x="63.9081%" y="527.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (195 samples, 0.18%)</title><rect x="63.5940%" y="613" width="0.1761%" height="15" fill="rgb(209,120,3)" fg:x="70417" fg:w="195"/><text x="63.8440%" y="623.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (87 samples, 0.08%)</title><rect x="63.6915%" y="597" width="0.0786%" height="15" fill="rgb(238,229,9)" fg:x="70525" fg:w="87"/><text x="63.9415%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (465 samples, 0.42%)</title><rect x="63.4486%" y="677" width="0.4199%" height="15" fill="rgb(253,159,18)" fg:x="70256" fg:w="465"/><text x="63.6986%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (465 samples, 0.42%)</title><rect x="63.4486%" y="661" width="0.4199%" height="15" fill="rgb(244,42,34)" fg:x="70256" fg:w="465"/><text x="63.6986%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (359 samples, 0.32%)</title><rect x="63.5443%" y="645" width="0.3242%" height="15" fill="rgb(224,8,7)" fg:x="70362" fg:w="359"/><text x="63.7943%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (359 samples, 0.32%)</title><rect x="63.5443%" y="629" width="0.3242%" height="15" fill="rgb(210,201,45)" fg:x="70362" fg:w="359"/><text x="63.7943%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (109 samples, 0.10%)</title><rect x="63.7701%" y="613" width="0.0984%" height="15" fill="rgb(252,185,21)" fg:x="70612" fg:w="109"/><text x="64.0201%" y="623.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (109 samples, 0.10%)</title><rect x="63.7701%" y="597" width="0.0984%" height="15" fill="rgb(223,131,1)" fg:x="70612" fg:w="109"/><text x="64.0201%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (109 samples, 0.10%)</title><rect x="63.7701%" y="581" width="0.0984%" height="15" fill="rgb(245,141,16)" fg:x="70612" fg:w="109"/><text x="64.0201%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (103 samples, 0.09%)</title><rect x="63.7755%" y="565" width="0.0930%" height="15" fill="rgb(229,55,45)" fg:x="70618" fg:w="103"/><text x="64.0255%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (103 samples, 0.09%)</title><rect x="63.7755%" y="549" width="0.0930%" height="15" fill="rgb(208,92,15)" fg:x="70618" fg:w="103"/><text x="64.0255%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (103 samples, 0.09%)</title><rect x="63.7755%" y="533" width="0.0930%" height="15" fill="rgb(234,185,47)" fg:x="70618" fg:w="103"/><text x="64.0255%" y="543.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (37 samples, 0.03%)</title><rect x="63.8685%" y="677" width="0.0334%" height="15" fill="rgb(253,104,50)" fg:x="70721" fg:w="37"/><text x="64.1185%" y="687.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (518 samples, 0.47%)</title><rect x="63.4486%" y="693" width="0.4678%" height="15" fill="rgb(205,70,7)" fg:x="70256" fg:w="518"/><text x="63.6986%" y="703.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (16 samples, 0.01%)</title><rect x="63.9020%" y="677" width="0.0144%" height="15" fill="rgb(240,178,43)" fg:x="70758" fg:w="16"/><text x="64.1520%" y="687.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="63.9164%" y="693" width="0.0208%" height="15" fill="rgb(214,112,2)" fg:x="70774" fg:w="23"/><text x="64.1664%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (35 samples, 0.03%)</title><rect x="64.0148%" y="485" width="0.0316%" height="15" fill="rgb(206,46,17)" fg:x="70883" fg:w="35"/><text x="64.2648%" y="495.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (126 samples, 0.11%)</title><rect x="63.9426%" y="693" width="0.1138%" height="15" fill="rgb(225,220,16)" fg:x="70803" fg:w="126"/><text x="64.1926%" y="703.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (99 samples, 0.09%)</title><rect x="63.9670%" y="677" width="0.0894%" height="15" fill="rgb(238,65,40)" fg:x="70830" fg:w="99"/><text x="64.2170%" y="687.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (99 samples, 0.09%)</title><rect x="63.9670%" y="661" width="0.0894%" height="15" fill="rgb(230,151,21)" fg:x="70830" fg:w="99"/><text x="64.2170%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (97 samples, 0.09%)</title><rect x="63.9688%" y="645" width="0.0876%" height="15" fill="rgb(218,58,49)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (97 samples, 0.09%)</title><rect x="63.9688%" y="629" width="0.0876%" height="15" fill="rgb(219,179,14)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (97 samples, 0.09%)</title><rect x="63.9688%" y="613" width="0.0876%" height="15" fill="rgb(223,72,1)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (97 samples, 0.09%)</title><rect x="63.9688%" y="597" width="0.0876%" height="15" fill="rgb(238,126,10)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (97 samples, 0.09%)</title><rect x="63.9688%" y="581" width="0.0876%" height="15" fill="rgb(224,206,38)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (97 samples, 0.09%)</title><rect x="63.9688%" y="565" width="0.0876%" height="15" fill="rgb(212,201,54)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="575.50"></text></g><g><title>alloc::alloc::alloc (97 samples, 0.09%)</title><rect x="63.9688%" y="549" width="0.0876%" height="15" fill="rgb(218,154,48)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="559.50"></text></g><g><title>__rg_alloc (97 samples, 0.09%)</title><rect x="63.9688%" y="533" width="0.0876%" height="15" fill="rgb(232,93,24)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (97 samples, 0.09%)</title><rect x="63.9688%" y="517" width="0.0876%" height="15" fill="rgb(245,30,21)" fg:x="70832" fg:w="97"/><text x="64.2188%" y="527.50"></text></g><g><title>sn_rust_alloc (91 samples, 0.08%)</title><rect x="63.9742%" y="501" width="0.0822%" height="15" fill="rgb(242,148,29)" fg:x="70838" fg:w="91"/><text x="64.2242%" y="511.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (60 samples, 0.05%)</title><rect x="64.2749%" y="405" width="0.0542%" height="15" fill="rgb(244,153,54)" fg:x="71171" fg:w="60"/><text x="64.5249%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (58 samples, 0.05%)</title><rect x="64.2767%" y="389" width="0.0524%" height="15" fill="rgb(252,87,22)" fg:x="71173" fg:w="58"/><text x="64.5267%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (57 samples, 0.05%)</title><rect x="64.2777%" y="373" width="0.0515%" height="15" fill="rgb(210,51,29)" fg:x="71174" fg:w="57"/><text x="64.5277%" y="383.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (57 samples, 0.05%)</title><rect x="64.2777%" y="357" width="0.0515%" height="15" fill="rgb(242,136,47)" fg:x="71174" fg:w="57"/><text x="64.5277%" y="367.50"></text></g><g><title>fxhash::write (47 samples, 0.04%)</title><rect x="64.2867%" y="341" width="0.0424%" height="15" fill="rgb(238,68,4)" fg:x="71184" fg:w="47"/><text x="64.5367%" y="351.50"></text></g><g><title>fxhash::write64 (47 samples, 0.04%)</title><rect x="64.2867%" y="325" width="0.0424%" height="15" fill="rgb(242,161,30)" fg:x="71184" fg:w="47"/><text x="64.5367%" y="335.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (22 samples, 0.02%)</title><rect x="64.3093%" y="309" width="0.0199%" height="15" fill="rgb(218,58,44)" fg:x="71209" fg:w="22"/><text x="64.5593%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (13 samples, 0.01%)</title><rect x="64.3174%" y="293" width="0.0117%" height="15" fill="rgb(252,125,32)" fg:x="71218" fg:w="13"/><text x="64.5674%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (235 samples, 0.21%)</title><rect x="64.1395%" y="517" width="0.2122%" height="15" fill="rgb(219,178,0)" fg:x="71021" fg:w="235"/><text x="64.3895%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (229 samples, 0.21%)</title><rect x="64.1449%" y="501" width="0.2068%" height="15" fill="rgb(213,152,7)" fg:x="71027" fg:w="229"/><text x="64.3949%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (227 samples, 0.21%)</title><rect x="64.1467%" y="485" width="0.2050%" height="15" fill="rgb(249,109,34)" fg:x="71029" fg:w="227"/><text x="64.3967%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (91 samples, 0.08%)</title><rect x="64.2695%" y="469" width="0.0822%" height="15" fill="rgb(232,96,21)" fg:x="71165" fg:w="91"/><text x="64.5195%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (85 samples, 0.08%)</title><rect x="64.2749%" y="453" width="0.0768%" height="15" fill="rgb(228,27,39)" fg:x="71171" fg:w="85"/><text x="64.5249%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (85 samples, 0.08%)</title><rect x="64.2749%" y="437" width="0.0768%" height="15" fill="rgb(211,182,52)" fg:x="71171" fg:w="85"/><text x="64.5249%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (85 samples, 0.08%)</title><rect x="64.2749%" y="421" width="0.0768%" height="15" fill="rgb(234,178,38)" fg:x="71171" fg:w="85"/><text x="64.5249%" y="431.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (25 samples, 0.02%)</title><rect x="64.3291%" y="405" width="0.0226%" height="15" fill="rgb(221,111,3)" fg:x="71231" fg:w="25"/><text x="64.5791%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (25 samples, 0.02%)</title><rect x="64.3291%" y="389" width="0.0226%" height="15" fill="rgb(228,175,21)" fg:x="71231" fg:w="25"/><text x="64.5791%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (25 samples, 0.02%)</title><rect x="64.3291%" y="373" width="0.0226%" height="15" fill="rgb(228,174,43)" fg:x="71231" fg:w="25"/><text x="64.5791%" y="383.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (25 samples, 0.02%)</title><rect x="64.3291%" y="357" width="0.0226%" height="15" fill="rgb(211,191,0)" fg:x="71231" fg:w="25"/><text x="64.5791%" y="367.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (25 samples, 0.02%)</title><rect x="64.3291%" y="341" width="0.0226%" height="15" fill="rgb(253,117,3)" fg:x="71231" fg:w="25"/><text x="64.5791%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (13 samples, 0.01%)</title><rect x="64.3400%" y="325" width="0.0117%" height="15" fill="rgb(241,127,19)" fg:x="71243" fg:w="13"/><text x="64.5900%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.01%)</title><rect x="64.3698%" y="469" width="0.0126%" height="15" fill="rgb(218,103,12)" fg:x="71276" fg:w="14"/><text x="64.6198%" y="479.50"></text></g><g><title>hashbrown::raw::inner::h2 (13 samples, 0.01%)</title><rect x="64.3869%" y="469" width="0.0117%" height="15" fill="rgb(236,214,43)" fg:x="71295" fg:w="13"/><text x="64.6369%" y="479.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (15 samples, 0.01%)</title><rect x="64.3987%" y="469" width="0.0135%" height="15" fill="rgb(244,144,19)" fg:x="71308" fg:w="15"/><text x="64.6487%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (15 samples, 0.01%)</title><rect x="64.3987%" y="453" width="0.0135%" height="15" fill="rgb(246,188,10)" fg:x="71308" fg:w="15"/><text x="64.6487%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="64.3987%" y="437" width="0.0135%" height="15" fill="rgb(212,193,33)" fg:x="71308" fg:w="15"/><text x="64.6487%" y="447.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (23 samples, 0.02%)</title><rect x="64.4122%" y="469" width="0.0208%" height="15" fill="rgb(241,51,29)" fg:x="71323" fg:w="23"/><text x="64.6622%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.02%)</title><rect x="64.4122%" y="453" width="0.0208%" height="15" fill="rgb(211,58,19)" fg:x="71323" fg:w="23"/><text x="64.6622%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (95 samples, 0.09%)</title><rect x="64.3517%" y="517" width="0.0858%" height="15" fill="rgb(229,111,26)" fg:x="71256" fg:w="95"/><text x="64.6017%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (95 samples, 0.09%)</title><rect x="64.3517%" y="501" width="0.0858%" height="15" fill="rgb(213,115,40)" fg:x="71256" fg:w="95"/><text x="64.6017%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (95 samples, 0.09%)</title><rect x="64.3517%" y="485" width="0.0858%" height="15" fill="rgb(209,56,44)" fg:x="71256" fg:w="95"/><text x="64.6017%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (346 samples, 0.31%)</title><rect x="64.1304%" y="613" width="0.3125%" height="15" fill="rgb(230,108,32)" fg:x="71011" fg:w="346"/><text x="64.3804%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (345 samples, 0.31%)</title><rect x="64.1313%" y="597" width="0.3116%" height="15" fill="rgb(216,165,31)" fg:x="71012" fg:w="345"/><text x="64.3813%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (342 samples, 0.31%)</title><rect x="64.1341%" y="581" width="0.3089%" height="15" fill="rgb(218,122,21)" fg:x="71015" fg:w="342"/><text x="64.3841%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (342 samples, 0.31%)</title><rect x="64.1341%" y="565" width="0.3089%" height="15" fill="rgb(223,224,47)" fg:x="71015" fg:w="342"/><text x="64.3841%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (338 samples, 0.31%)</title><rect x="64.1377%" y="549" width="0.3052%" height="15" fill="rgb(238,102,44)" fg:x="71019" fg:w="338"/><text x="64.3877%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (336 samples, 0.30%)</title><rect x="64.1395%" y="533" width="0.3034%" height="15" fill="rgb(236,46,40)" fg:x="71021" fg:w="336"/><text x="64.3895%" y="543.50"></text></g><g><title>value_trait::ValueAccess::get (433 samples, 0.39%)</title><rect x="64.0564%" y="693" width="0.3910%" height="15" fill="rgb(247,202,50)" fg:x="70929" fg:w="433"/><text x="64.3064%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (433 samples, 0.39%)</title><rect x="64.0564%" y="677" width="0.3910%" height="15" fill="rgb(209,99,20)" fg:x="70929" fg:w="433"/><text x="64.3064%" y="687.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (433 samples, 0.39%)</title><rect x="64.0564%" y="661" width="0.3910%" height="15" fill="rgb(252,27,34)" fg:x="70929" fg:w="433"/><text x="64.3064%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (433 samples, 0.39%)</title><rect x="64.0564%" y="645" width="0.3910%" height="15" fill="rgb(215,206,23)" fg:x="70929" fg:w="433"/><text x="64.3064%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (433 samples, 0.39%)</title><rect x="64.0564%" y="629" width="0.3910%" height="15" fill="rgb(212,135,36)" fg:x="70929" fg:w="433"/><text x="64.3064%" y="639.50"></text></g><g><title>abi_stable::erased_types::trait_objects::HasherObject::new (15 samples, 0.01%)</title><rect x="64.7184%" y="453" width="0.0135%" height="15" fill="rgb(240,189,1)" fg:x="71662" fg:w="15"/><text x="64.9684%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (32 samples, 0.03%)</title><rect x="64.7428%" y="389" width="0.0289%" height="15" fill="rgb(242,56,20)" fg:x="71689" fg:w="32"/><text x="64.9928%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (28 samples, 0.03%)</title><rect x="64.7464%" y="373" width="0.0253%" height="15" fill="rgb(247,132,33)" fg:x="71693" fg:w="28"/><text x="64.9964%" y="383.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (20 samples, 0.02%)</title><rect x="64.7536%" y="357" width="0.0181%" height="15" fill="rgb(208,149,11)" fg:x="71701" fg:w="20"/><text x="65.0036%" y="367.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (20 samples, 0.02%)</title><rect x="64.7536%" y="341" width="0.0181%" height="15" fill="rgb(211,33,11)" fg:x="71701" fg:w="20"/><text x="65.0036%" y="351.50"></text></g><g><title>fxhash::write (20 samples, 0.02%)</title><rect x="64.7536%" y="325" width="0.0181%" height="15" fill="rgb(221,29,38)" fg:x="71701" fg:w="20"/><text x="65.0036%" y="335.50"></text></g><g><title>fxhash::write64 (20 samples, 0.02%)</title><rect x="64.7536%" y="309" width="0.0181%" height="15" fill="rgb(206,182,49)" fg:x="71701" fg:w="20"/><text x="65.0036%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (213 samples, 0.19%)</title><rect x="64.5847%" y="501" width="0.1924%" height="15" fill="rgb(216,140,1)" fg:x="71514" fg:w="213"/><text x="64.8347%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (197 samples, 0.18%)</title><rect x="64.5992%" y="485" width="0.1779%" height="15" fill="rgb(232,57,40)" fg:x="71530" fg:w="197"/><text x="64.8492%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (196 samples, 0.18%)</title><rect x="64.6001%" y="469" width="0.1770%" height="15" fill="rgb(224,186,18)" fg:x="71531" fg:w="196"/><text x="64.8501%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (50 samples, 0.05%)</title><rect x="64.7319%" y="453" width="0.0452%" height="15" fill="rgb(215,121,11)" fg:x="71677" fg:w="50"/><text x="64.9819%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (38 samples, 0.03%)</title><rect x="64.7428%" y="437" width="0.0343%" height="15" fill="rgb(245,147,10)" fg:x="71689" fg:w="38"/><text x="64.9928%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (38 samples, 0.03%)</title><rect x="64.7428%" y="421" width="0.0343%" height="15" fill="rgb(238,153,13)" fg:x="71689" fg:w="38"/><text x="64.9928%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (38 samples, 0.03%)</title><rect x="64.7428%" y="405" width="0.0343%" height="15" fill="rgb(233,108,0)" fg:x="71689" fg:w="38"/><text x="64.9928%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="64.7870%" y="453" width="0.0108%" height="15" fill="rgb(212,157,17)" fg:x="71738" fg:w="12"/><text x="65.0370%" y="463.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (12 samples, 0.01%)</title><rect x="64.7870%" y="437" width="0.0108%" height="15" fill="rgb(225,213,38)" fg:x="71738" fg:w="12"/><text x="65.0370%" y="447.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (94 samples, 0.08%)</title><rect x="64.7978%" y="437" width="0.0849%" height="15" fill="rgb(248,16,11)" fg:x="71750" fg:w="94"/><text x="65.0478%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (88 samples, 0.08%)</title><rect x="64.8033%" y="421" width="0.0795%" height="15" fill="rgb(241,33,4)" fg:x="71756" fg:w="88"/><text x="65.0533%" y="431.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (70 samples, 0.06%)</title><rect x="64.8195%" y="405" width="0.0632%" height="15" fill="rgb(222,26,43)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="415.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (70 samples, 0.06%)</title><rect x="64.8195%" y="389" width="0.0632%" height="15" fill="rgb(243,29,36)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="399.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (70 samples, 0.06%)</title><rect x="64.8195%" y="373" width="0.0632%" height="15" fill="rgb(241,9,27)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (70 samples, 0.06%)</title><rect x="64.8195%" y="357" width="0.0632%" height="15" fill="rgb(205,117,26)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (70 samples, 0.06%)</title><rect x="64.8195%" y="341" width="0.0632%" height="15" fill="rgb(209,80,39)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (70 samples, 0.06%)</title><rect x="64.8195%" y="325" width="0.0632%" height="15" fill="rgb(239,155,6)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (70 samples, 0.06%)</title><rect x="64.8195%" y="309" width="0.0632%" height="15" fill="rgb(212,104,12)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (70 samples, 0.06%)</title><rect x="64.8195%" y="293" width="0.0632%" height="15" fill="rgb(234,204,3)" fg:x="71774" fg:w="70"/><text x="65.0695%" y="303.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="64.8249%" y="277" width="0.0578%" height="15" fill="rgb(251,218,7)" fg:x="71780" fg:w="64"/><text x="65.0749%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (102 samples, 0.09%)</title><rect x="64.7978%" y="453" width="0.0921%" height="15" fill="rgb(221,81,32)" fg:x="71750" fg:w="102"/><text x="65.0478%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (153 samples, 0.14%)</title><rect x="64.7771%" y="501" width="0.1382%" height="15" fill="rgb(214,152,26)" fg:x="71727" fg:w="153"/><text x="65.0271%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (153 samples, 0.14%)</title><rect x="64.7771%" y="485" width="0.1382%" height="15" fill="rgb(223,22,3)" fg:x="71727" fg:w="153"/><text x="65.0271%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (153 samples, 0.14%)</title><rect x="64.7771%" y="469" width="0.1382%" height="15" fill="rgb(207,174,7)" fg:x="71727" fg:w="153"/><text x="65.0271%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (377 samples, 0.34%)</title><rect x="64.5775%" y="597" width="0.3405%" height="15" fill="rgb(224,19,52)" fg:x="71506" fg:w="377"/><text x="64.8275%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (375 samples, 0.34%)</title><rect x="64.5793%" y="581" width="0.3387%" height="15" fill="rgb(228,24,14)" fg:x="71508" fg:w="375"/><text x="64.8293%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (375 samples, 0.34%)</title><rect x="64.5793%" y="565" width="0.3387%" height="15" fill="rgb(230,153,43)" fg:x="71508" fg:w="375"/><text x="64.8293%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (375 samples, 0.34%)</title><rect x="64.5793%" y="549" width="0.3387%" height="15" fill="rgb(231,106,12)" fg:x="71508" fg:w="375"/><text x="64.8293%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (370 samples, 0.33%)</title><rect x="64.5838%" y="533" width="0.3341%" height="15" fill="rgb(215,92,2)" fg:x="71513" fg:w="370"/><text x="64.8338%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (369 samples, 0.33%)</title><rect x="64.5847%" y="517" width="0.3332%" height="15" fill="rgb(249,143,25)" fg:x="71514" fg:w="369"/><text x="64.8347%" y="527.50"></text></g><g><title>value_trait::ValueAccess::get_str (525 samples, 0.47%)</title><rect x="64.4474%" y="693" width="0.4741%" height="15" fill="rgb(252,7,35)" fg:x="71362" fg:w="525"/><text x="64.6974%" y="703.50"></text></g><g><title>value_trait::ValueAccess::get (520 samples, 0.47%)</title><rect x="64.4520%" y="677" width="0.4696%" height="15" fill="rgb(216,69,40)" fg:x="71367" fg:w="520"/><text x="64.7020%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (520 samples, 0.47%)</title><rect x="64.4520%" y="661" width="0.4696%" height="15" fill="rgb(240,36,33)" fg:x="71367" fg:w="520"/><text x="64.7020%" y="671.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (518 samples, 0.47%)</title><rect x="64.4538%" y="645" width="0.4678%" height="15" fill="rgb(231,128,14)" fg:x="71369" fg:w="518"/><text x="64.7038%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (518 samples, 0.47%)</title><rect x="64.4538%" y="629" width="0.4678%" height="15" fill="rgb(245,143,14)" fg:x="71369" fg:w="518"/><text x="64.7038%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (518 samples, 0.47%)</title><rect x="64.4538%" y="613" width="0.4678%" height="15" fill="rgb(222,130,28)" fg:x="71369" fg:w="518"/><text x="64.7038%" y="623.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (39 samples, 0.04%)</title><rect x="64.9505%" y="645" width="0.0352%" height="15" fill="rgb(212,10,48)" fg:x="71919" fg:w="39"/><text x="65.2005%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,643 samples, 2.39%)</title><rect x="62.6033%" y="725" width="2.3869%" height="15" fill="rgb(254,118,45)" fg:x="69320" fg:w="2643"/><text x="62.8533%" y="735.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,643 samples, 2.39%)</title><rect x="62.6033%" y="709" width="2.3869%" height="15" fill="rgb(228,6,45)" fg:x="69320" fg:w="2643"/><text x="62.8533%" y="719.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (76 samples, 0.07%)</title><rect x="64.9216%" y="693" width="0.0686%" height="15" fill="rgb(241,18,35)" fg:x="71887" fg:w="76"/><text x="65.1716%" y="703.50"></text></g><g><title>window::TimeWindow::add_t (76 samples, 0.07%)</title><rect x="64.9216%" y="677" width="0.0686%" height="15" fill="rgb(227,214,53)" fg:x="71887" fg:w="76"/><text x="65.1716%" y="687.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (49 samples, 0.04%)</title><rect x="64.9459%" y="661" width="0.0443%" height="15" fill="rgb(224,107,51)" fg:x="71914" fg:w="49"/><text x="65.1959%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (58 samples, 0.05%)</title><rect x="65.0155%" y="677" width="0.0524%" height="15" fill="rgb(248,60,28)" fg:x="71991" fg:w="58"/><text x="65.2655%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,320 samples, 5.71%)</title><rect x="59.3629%" y="901" width="5.7076%" height="15" fill="rgb(249,101,23)" fg:x="65732" fg:w="6320"/><text x="59.6129%" y="911.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,313 samples, 5.70%)</title><rect x="59.3693%" y="885" width="5.7013%" height="15" fill="rgb(228,51,19)" fg:x="65739" fg:w="6313"/><text x="59.6193%" y="895.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,310 samples, 5.70%)</title><rect x="59.3720%" y="869" width="5.6986%" height="15" fill="rgb(213,20,6)" fg:x="65742" fg:w="6310"/><text x="59.6220%" y="879.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,310 samples, 5.70%)</title><rect x="59.3720%" y="853" width="5.6986%" height="15" fill="rgb(212,124,10)" fg:x="65742" fg:w="6310"/><text x="59.6220%" y="863.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,310 samples, 5.70%)</title><rect x="59.3720%" y="837" width="5.6986%" height="15" fill="rgb(248,3,40)" fg:x="65742" fg:w="6310"/><text x="59.6220%" y="847.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,691 samples, 3.33%)</title><rect x="61.7372%" y="821" width="3.3334%" height="15" fill="rgb(223,178,23)" fg:x="68361" fg:w="3691"/><text x="61.9872%" y="831.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,732 samples, 2.47%)</title><rect x="62.6033%" y="805" width="2.4673%" height="15" fill="rgb(240,132,45)" fg:x="69320" fg:w="2732"/><text x="62.8533%" y="815.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,732 samples, 2.47%)</title><rect x="62.6033%" y="789" width="2.4673%" height="15" fill="rgb(245,164,36)" fg:x="69320" fg:w="2732"/><text x="62.8533%" y="799.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,732 samples, 2.47%)</title><rect x="62.6033%" y="773" width="2.4673%" height="15" fill="rgb(231,188,53)" fg:x="69320" fg:w="2732"/><text x="62.8533%" y="783.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,732 samples, 2.47%)</title><rect x="62.6033%" y="757" width="2.4673%" height="15" fill="rgb(237,198,39)" fg:x="69320" fg:w="2732"/><text x="62.8533%" y="767.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,732 samples, 2.47%)</title><rect x="62.6033%" y="741" width="2.4673%" height="15" fill="rgb(223,120,35)" fg:x="69320" fg:w="2732"/><text x="62.8533%" y="751.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (89 samples, 0.08%)</title><rect x="64.9902%" y="725" width="0.0804%" height="15" fill="rgb(253,107,49)" fg:x="71963" fg:w="89"/><text x="65.2402%" y="735.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (89 samples, 0.08%)</title><rect x="64.9902%" y="709" width="0.0804%" height="15" fill="rgb(216,44,31)" fg:x="71963" fg:w="89"/><text x="65.2402%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (81 samples, 0.07%)</title><rect x="64.9974%" y="693" width="0.0732%" height="15" fill="rgb(253,87,21)" fg:x="71971" fg:w="81"/><text x="65.2474%" y="703.50"></text></g><g><title>tremor_common::time::nanotime (25 samples, 0.02%)</title><rect x="65.0715%" y="901" width="0.0226%" height="15" fill="rgb(226,18,2)" fg:x="72053" fg:w="25"/><text x="65.3215%" y="911.50"></text></g><g><title>std::time::SystemTime::now (25 samples, 0.02%)</title><rect x="65.0715%" y="885" width="0.0226%" height="15" fill="rgb(216,8,46)" fg:x="72053" fg:w="25"/><text x="65.3215%" y="895.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (25 samples, 0.02%)</title><rect x="65.0715%" y="869" width="0.0226%" height="15" fill="rgb(226,140,39)" fg:x="72053" fg:w="25"/><text x="65.3215%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::now (25 samples, 0.02%)</title><rect x="65.0715%" y="853" width="0.0226%" height="15" fill="rgb(221,194,54)" fg:x="72053" fg:w="25"/><text x="65.3215%" y="863.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="65.1528%" y="789" width="0.0208%" height="15" fill="rgb(213,92,11)" fg:x="72143" fg:w="23"/><text x="65.4028%" y="799.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (20 samples, 0.02%)</title><rect x="65.1555%" y="773" width="0.0181%" height="15" fill="rgb(229,162,46)" fg:x="72146" fg:w="20"/><text x="65.4055%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (20 samples, 0.02%)</title><rect x="65.1555%" y="757" width="0.0181%" height="15" fill="rgb(214,111,36)" fg:x="72146" fg:w="20"/><text x="65.4055%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (20 samples, 0.02%)</title><rect x="65.1555%" y="741" width="0.0181%" height="15" fill="rgb(207,6,21)" fg:x="72146" fg:w="20"/><text x="65.4055%" y="751.50"></text></g><g><title>core::mem::drop (38 samples, 0.03%)</title><rect x="65.1771%" y="789" width="0.0343%" height="15" fill="rgb(213,127,38)" fg:x="72170" fg:w="38"/><text x="65.4271%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (38 samples, 0.03%)</title><rect x="65.1771%" y="773" width="0.0343%" height="15" fill="rgb(238,118,32)" fg:x="72170" fg:w="38"/><text x="65.4271%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (35 samples, 0.03%)</title><rect x="65.1799%" y="757" width="0.0316%" height="15" fill="rgb(240,139,39)" fg:x="72173" fg:w="35"/><text x="65.4299%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="65.1799%" y="741" width="0.0316%" height="15" fill="rgb(235,10,37)" fg:x="72173" fg:w="35"/><text x="65.4299%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="65.1817%" y="725" width="0.0298%" height="15" fill="rgb(249,171,38)" fg:x="72175" fg:w="33"/><text x="65.4317%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (31 samples, 0.03%)</title><rect x="65.1835%" y="709" width="0.0280%" height="15" fill="rgb(242,144,32)" fg:x="72177" fg:w="31"/><text x="65.4335%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (31 samples, 0.03%)</title><rect x="65.1835%" y="693" width="0.0280%" height="15" fill="rgb(217,117,21)" fg:x="72177" fg:w="31"/><text x="65.4335%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (21 samples, 0.02%)</title><rect x="65.2115%" y="789" width="0.0190%" height="15" fill="rgb(249,87,1)" fg:x="72208" fg:w="21"/><text x="65.4615%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (20 samples, 0.02%)</title><rect x="65.2124%" y="773" width="0.0181%" height="15" fill="rgb(248,196,48)" fg:x="72209" fg:w="20"/><text x="65.4624%" y="783.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="65.2124%" y="757" width="0.0181%" height="15" fill="rgb(251,206,33)" fg:x="72209" fg:w="20"/><text x="65.4624%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (19 samples, 0.02%)</title><rect x="65.2133%" y="741" width="0.0172%" height="15" fill="rgb(232,141,28)" fg:x="72210" fg:w="19"/><text x="65.4633%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (19 samples, 0.02%)</title><rect x="65.2133%" y="725" width="0.0172%" height="15" fill="rgb(209,167,14)" fg:x="72210" fg:w="19"/><text x="65.4633%" y="735.50"></text></g><g><title>__GI___pthread_mutex_unlock (19 samples, 0.02%)</title><rect x="65.2133%" y="709" width="0.0172%" height="15" fill="rgb(225,11,50)" fg:x="72210" fg:w="19"/><text x="65.4633%" y="719.50"></text></g><g><title>std::sync::poison::Flag::get (17 samples, 0.02%)</title><rect x="65.2386%" y="725" width="0.0154%" height="15" fill="rgb(209,50,20)" fg:x="72238" fg:w="17"/><text x="65.4886%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (17 samples, 0.02%)</title><rect x="65.2386%" y="709" width="0.0154%" height="15" fill="rgb(212,17,46)" fg:x="72238" fg:w="17"/><text x="65.4886%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.02%)</title><rect x="65.2386%" y="693" width="0.0154%" height="15" fill="rgb(216,101,39)" fg:x="72238" fg:w="17"/><text x="65.4886%" y="703.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="65.2386%" y="757" width="0.0172%" height="15" fill="rgb(212,228,48)" fg:x="72238" fg:w="19"/><text x="65.4886%" y="767.50"></text></g><g><title>std::sync::poison::Flag::borrow (19 samples, 0.02%)</title><rect x="65.2386%" y="741" width="0.0172%" height="15" fill="rgb(250,6,50)" fg:x="72238" fg:w="19"/><text x="65.4886%" y="751.50"></text></g><g><title>event_listener::Inner::lock (267 samples, 0.24%)</title><rect x="65.2349%" y="789" width="0.2411%" height="15" fill="rgb(250,160,48)" fg:x="72234" fg:w="267"/><text x="65.4849%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (263 samples, 0.24%)</title><rect x="65.2386%" y="773" width="0.2375%" height="15" fill="rgb(244,216,33)" fg:x="72238" fg:w="263"/><text x="65.4886%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (244 samples, 0.22%)</title><rect x="65.2557%" y="757" width="0.2204%" height="15" fill="rgb(207,157,5)" fg:x="72257" fg:w="244"/><text x="65.5057%" y="767.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (189 samples, 0.17%)</title><rect x="65.3054%" y="741" width="0.1707%" height="15" fill="rgb(228,199,8)" fg:x="72312" fg:w="189"/><text x="65.5554%" y="751.50"></text></g><g><title>__GI___pthread_mutex_lock (189 samples, 0.17%)</title><rect x="65.3054%" y="725" width="0.1707%" height="15" fill="rgb(227,80,20)" fg:x="72312" fg:w="189"/><text x="65.5554%" y="735.50"></text></g><g><title>__lll_lock_wait (33 samples, 0.03%)</title><rect x="65.4463%" y="709" width="0.0298%" height="15" fill="rgb(222,9,33)" fg:x="72468" fg:w="33"/><text x="65.6963%" y="719.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (438 samples, 0.40%)</title><rect x="65.1383%" y="805" width="0.3956%" height="15" fill="rgb(239,44,28)" fg:x="72127" fg:w="438"/><text x="65.3883%" y="815.50"></text></g><g><title>event_listener::List::remove (64 samples, 0.06%)</title><rect x="65.4761%" y="789" width="0.0578%" height="15" fill="rgb(249,187,43)" fg:x="72501" fg:w="64"/><text x="65.7261%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (43 samples, 0.04%)</title><rect x="65.4950%" y="773" width="0.0388%" height="15" fill="rgb(216,141,28)" fg:x="72522" fg:w="43"/><text x="65.7450%" y="783.50"></text></g><g><title>core::mem::replace (43 samples, 0.04%)</title><rect x="65.4950%" y="757" width="0.0388%" height="15" fill="rgb(230,154,53)" fg:x="72522" fg:w="43"/><text x="65.7450%" y="767.50"></text></g><g><title>core::ptr::read (43 samples, 0.04%)</title><rect x="65.4950%" y="741" width="0.0388%" height="15" fill="rgb(227,82,4)" fg:x="72522" fg:w="43"/><text x="65.7450%" y="751.50"></text></g><g><title>[libc-2.31.so] (272 samples, 0.25%)</title><rect x="65.5339%" y="805" width="0.2456%" height="15" fill="rgb(220,107,16)" fg:x="72565" fg:w="272"/><text x="65.7839%" y="815.50"></text></g><g><title>[libc-2.31.so] (531 samples, 0.48%)</title><rect x="65.7958%" y="789" width="0.4795%" height="15" fill="rgb(207,187,2)" fg:x="72855" fg:w="531"/><text x="66.0458%" y="799.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.09%)</title><rect x="66.3873%" y="757" width="0.0921%" height="15" fill="rgb(210,162,52)" fg:x="73510" fg:w="102"/><text x="66.6373%" y="767.50"></text></g><g><title>concurrent_queue::full_fence (90 samples, 0.08%)</title><rect x="66.4794%" y="757" width="0.0813%" height="15" fill="rgb(217,216,49)" fg:x="73612" fg:w="90"/><text x="66.7294%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (87 samples, 0.08%)</title><rect x="66.4821%" y="741" width="0.0786%" height="15" fill="rgb(218,146,49)" fg:x="73615" fg:w="87"/><text x="66.7321%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (87 samples, 0.08%)</title><rect x="66.4821%" y="725" width="0.0786%" height="15" fill="rgb(216,55,40)" fg:x="73615" fg:w="87"/><text x="66.7321%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (87 samples, 0.08%)</title><rect x="66.4821%" y="709" width="0.0786%" height="15" fill="rgb(208,196,21)" fg:x="73615" fg:w="87"/><text x="66.7321%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (518 samples, 0.47%)</title><rect x="66.5625%" y="757" width="0.4678%" height="15" fill="rgb(242,117,42)" fg:x="73704" fg:w="518"/><text x="66.8125%" y="767.50"></text></g><g><title>core::ptr::read (518 samples, 0.47%)</title><rect x="66.5625%" y="741" width="0.4678%" height="15" fill="rgb(210,11,23)" fg:x="73704" fg:w="518"/><text x="66.8125%" y="751.50"></text></g><g><title>[libc-2.31.so] (518 samples, 0.47%)</title><rect x="66.5625%" y="725" width="0.4678%" height="15" fill="rgb(217,110,2)" fg:x="73704" fg:w="518"/><text x="66.8125%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (256 samples, 0.23%)</title><rect x="67.0303%" y="757" width="0.2312%" height="15" fill="rgb(229,77,54)" fg:x="74222" fg:w="256"/><text x="67.2803%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (256 samples, 0.23%)</title><rect x="67.0303%" y="741" width="0.2312%" height="15" fill="rgb(218,53,16)" fg:x="74222" fg:w="256"/><text x="67.2803%" y="751.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,454 samples, 1.31%)</title><rect x="66.2753%" y="789" width="1.3131%" height="15" fill="rgb(215,38,13)" fg:x="73386" fg:w="1454"/><text x="66.5253%" y="799.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,441 samples, 1.30%)</title><rect x="66.2871%" y="773" width="1.3014%" height="15" fill="rgb(235,42,18)" fg:x="73399" fg:w="1441"/><text x="66.5371%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (362 samples, 0.33%)</title><rect x="67.2615%" y="757" width="0.3269%" height="15" fill="rgb(219,66,54)" fg:x="74478" fg:w="362"/><text x="67.5115%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (362 samples, 0.33%)</title><rect x="67.2615%" y="741" width="0.3269%" height="15" fill="rgb(222,205,4)" fg:x="74478" fg:w="362"/><text x="67.5115%" y="751.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,168 samples, 1.96%)</title><rect x="65.7795%" y="805" width="1.9579%" height="15" fill="rgb(227,213,46)" fg:x="72837" fg:w="2168"/><text x="66.0295%" y="815.50">a..</text></g><g><title>event_listener::Event::notify (165 samples, 0.15%)</title><rect x="67.5884%" y="789" width="0.1490%" height="15" fill="rgb(250,145,42)" fg:x="74840" fg:w="165"/><text x="67.8384%" y="799.50"></text></g><g><title>event_listener::full_fence (160 samples, 0.14%)</title><rect x="67.5930%" y="773" width="0.1445%" height="15" fill="rgb(219,15,2)" fg:x="74845" fg:w="160"/><text x="67.8430%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (158 samples, 0.14%)</title><rect x="67.5948%" y="757" width="0.1427%" height="15" fill="rgb(231,181,52)" fg:x="74847" fg:w="158"/><text x="67.8448%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (158 samples, 0.14%)</title><rect x="67.5948%" y="741" width="0.1427%" height="15" fill="rgb(235,1,42)" fg:x="74847" fg:w="158"/><text x="67.8448%" y="751.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="67.7474%" y="773" width="0.0199%" height="15" fill="rgb(249,88,27)" fg:x="75016" fg:w="22"/><text x="67.9974%" y="783.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.02%)</title><rect x="67.7519%" y="757" width="0.0154%" height="15" fill="rgb(235,145,16)" fg:x="75021" fg:w="17"/><text x="68.0019%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.02%)</title><rect x="67.7519%" y="741" width="0.0154%" height="15" fill="rgb(237,114,19)" fg:x="75021" fg:w="17"/><text x="68.0019%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (17 samples, 0.02%)</title><rect x="67.7519%" y="725" width="0.0154%" height="15" fill="rgb(238,51,50)" fg:x="75021" fg:w="17"/><text x="68.0019%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (50 samples, 0.05%)</title><rect x="67.7420%" y="805" width="0.0452%" height="15" fill="rgb(205,194,25)" fg:x="75010" fg:w="50"/><text x="67.9920%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (44 samples, 0.04%)</title><rect x="67.7474%" y="789" width="0.0397%" height="15" fill="rgb(215,203,17)" fg:x="75016" fg:w="44"/><text x="67.9974%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (22 samples, 0.02%)</title><rect x="67.7673%" y="773" width="0.0199%" height="15" fill="rgb(233,112,49)" fg:x="75038" fg:w="22"/><text x="68.0173%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="67.7673%" y="757" width="0.0199%" height="15" fill="rgb(241,130,26)" fg:x="75038" fg:w="22"/><text x="68.0173%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20 samples, 0.02%)</title><rect x="67.7691%" y="741" width="0.0181%" height="15" fill="rgb(252,223,19)" fg:x="75040" fg:w="20"/><text x="68.0191%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (20 samples, 0.02%)</title><rect x="67.7691%" y="725" width="0.0181%" height="15" fill="rgb(211,95,25)" fg:x="75040" fg:w="20"/><text x="68.0191%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (64 samples, 0.06%)</title><rect x="67.7889%" y="789" width="0.0578%" height="15" fill="rgb(251,182,27)" fg:x="75062" fg:w="64"/><text x="68.0389%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (64 samples, 0.06%)</title><rect x="67.7889%" y="773" width="0.0578%" height="15" fill="rgb(238,24,4)" fg:x="75062" fg:w="64"/><text x="68.0389%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (64 samples, 0.06%)</title><rect x="67.7889%" y="757" width="0.0578%" height="15" fill="rgb(224,220,25)" fg:x="75062" fg:w="64"/><text x="68.0389%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (40 samples, 0.04%)</title><rect x="67.8467%" y="789" width="0.0361%" height="15" fill="rgb(239,133,26)" fg:x="75126" fg:w="40"/><text x="68.0967%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (40 samples, 0.04%)</title><rect x="67.8467%" y="773" width="0.0361%" height="15" fill="rgb(211,94,48)" fg:x="75126" fg:w="40"/><text x="68.0967%" y="783.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="67.8467%" y="757" width="0.0361%" height="15" fill="rgb(239,87,6)" fg:x="75126" fg:w="40"/><text x="68.0967%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="67.8485%" y="741" width="0.0343%" height="15" fill="rgb(227,62,0)" fg:x="75128" fg:w="38"/><text x="68.0985%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (38 samples, 0.03%)</title><rect x="67.8485%" y="725" width="0.0343%" height="15" fill="rgb(211,226,4)" fg:x="75128" fg:w="38"/><text x="68.0985%" y="735.50"></text></g><g><title>__GI___pthread_mutex_unlock (38 samples, 0.03%)</title><rect x="67.8485%" y="709" width="0.0343%" height="15" fill="rgb(253,38,52)" fg:x="75128" fg:w="38"/><text x="68.0985%" y="719.50"></text></g><g><title>event_listener::Inner::lock (53 samples, 0.05%)</title><rect x="67.8828%" y="789" width="0.0479%" height="15" fill="rgb(229,126,40)" fg:x="75166" fg:w="53"/><text x="68.1328%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.05%)</title><rect x="67.8838%" y="773" width="0.0470%" height="15" fill="rgb(229,165,44)" fg:x="75167" fg:w="52"/><text x="68.1338%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.05%)</title><rect x="67.8856%" y="757" width="0.0452%" height="15" fill="rgb(247,95,47)" fg:x="75169" fg:w="50"/><text x="68.1356%" y="767.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (50 samples, 0.05%)</title><rect x="67.8856%" y="741" width="0.0452%" height="15" fill="rgb(216,140,30)" fg:x="75169" fg:w="50"/><text x="68.1356%" y="751.50"></text></g><g><title>__GI___pthread_mutex_lock (50 samples, 0.05%)</title><rect x="67.8856%" y="725" width="0.0452%" height="15" fill="rgb(246,214,8)" fg:x="75169" fg:w="50"/><text x="68.1356%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,152 samples, 2.85%)</title><rect x="65.1058%" y="885" width="2.8466%" height="15" fill="rgb(227,224,15)" fg:x="72091" fg:w="3152"/><text x="65.3558%" y="895.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,152 samples, 2.85%)</title><rect x="65.1058%" y="869" width="2.8466%" height="15" fill="rgb(233,175,4)" fg:x="72091" fg:w="3152"/><text x="65.3558%" y="879.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,152 samples, 2.85%)</title><rect x="65.1058%" y="853" width="2.8466%" height="15" fill="rgb(221,66,45)" fg:x="72091" fg:w="3152"/><text x="65.3558%" y="863.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,152 samples, 2.85%)</title><rect x="65.1058%" y="837" width="2.8466%" height="15" fill="rgb(221,178,18)" fg:x="72091" fg:w="3152"/><text x="65.3558%" y="847.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,152 samples, 2.85%)</title><rect x="65.1058%" y="821" width="2.8466%" height="15" fill="rgb(213,81,29)" fg:x="72091" fg:w="3152"/><text x="65.3558%" y="831.50">&lt;a..</text></g><g><title>event_listener::Event::listen (183 samples, 0.17%)</title><rect x="67.7871%" y="805" width="0.1653%" height="15" fill="rgb(220,89,49)" fg:x="75060" fg:w="183"/><text x="68.0371%" y="815.50"></text></g><g><title>event_listener::full_fence (20 samples, 0.02%)</title><rect x="67.9343%" y="789" width="0.0181%" height="15" fill="rgb(227,60,33)" fg:x="75223" fg:w="20"/><text x="68.1843%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.02%)</title><rect x="67.9352%" y="773" width="0.0172%" height="15" fill="rgb(205,113,12)" fg:x="75224" fg:w="19"/><text x="68.1852%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="67.9352%" y="757" width="0.0172%" height="15" fill="rgb(211,32,1)" fg:x="75224" fg:w="19"/><text x="68.1852%" y="767.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map::{{closure}} (15 samples, 0.01%)</title><rect x="68.0021%" y="421" width="0.0135%" height="15" fill="rgb(246,2,12)" fg:x="75298" fg:w="15"/><text x="68.2521%" y="431.50"></text></g><g><title>rmp::encode::write_map_len (12 samples, 0.01%)</title><rect x="68.0048%" y="405" width="0.0108%" height="15" fill="rgb(243,37,27)" fg:x="75301" fg:w="12"/><text x="68.2548%" y="415.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map (19 samples, 0.02%)</title><rect x="68.0021%" y="453" width="0.0172%" height="15" fill="rgb(248,211,31)" fg:x="75298" fg:w="19"/><text x="68.2521%" y="463.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (19 samples, 0.02%)</title><rect x="68.0021%" y="437" width="0.0172%" height="15" fill="rgb(242,146,47)" fg:x="75298" fg:w="19"/><text x="68.2521%" y="447.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (129 samples, 0.12%)</title><rect x="68.0192%" y="453" width="0.1165%" height="15" fill="rgb(206,70,20)" fg:x="75317" fg:w="129"/><text x="68.2692%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (56 samples, 0.05%)</title><rect x="68.1357%" y="453" width="0.0506%" height="15" fill="rgb(215,10,51)" fg:x="75446" fg:w="56"/><text x="68.3857%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (60 samples, 0.05%)</title><rect x="68.1935%" y="437" width="0.0542%" height="15" fill="rgb(243,178,53)" fg:x="75510" fg:w="60"/><text x="68.4435%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (60 samples, 0.05%)</title><rect x="68.1935%" y="421" width="0.0542%" height="15" fill="rgb(233,221,20)" fg:x="75510" fg:w="60"/><text x="68.4435%" y="431.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (60 samples, 0.05%)</title><rect x="68.1935%" y="405" width="0.0542%" height="15" fill="rgb(218,95,35)" fg:x="75510" fg:w="60"/><text x="68.4435%" y="415.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (79 samples, 0.07%)</title><rect x="68.3859%" y="341" width="0.0713%" height="15" fill="rgb(229,13,5)" fg:x="75723" fg:w="79"/><text x="68.6359%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (79 samples, 0.07%)</title><rect x="68.3859%" y="325" width="0.0713%" height="15" fill="rgb(252,164,30)" fg:x="75723" fg:w="79"/><text x="68.6359%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (68 samples, 0.06%)</title><rect x="68.4572%" y="341" width="0.0614%" height="15" fill="rgb(232,68,36)" fg:x="75802" fg:w="68"/><text x="68.7072%" y="351.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (231 samples, 0.21%)</title><rect x="68.3136%" y="389" width="0.2086%" height="15" fill="rgb(219,59,54)" fg:x="75643" fg:w="231"/><text x="68.5636%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (231 samples, 0.21%)</title><rect x="68.3136%" y="373" width="0.2086%" height="15" fill="rgb(250,92,33)" fg:x="75643" fg:w="231"/><text x="68.5636%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (215 samples, 0.19%)</title><rect x="68.3281%" y="357" width="0.1942%" height="15" fill="rgb(229,162,54)" fg:x="75659" fg:w="215"/><text x="68.5781%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,089 samples, 0.98%)</title><rect x="68.2874%" y="405" width="0.9835%" height="15" fill="rgb(244,114,52)" fg:x="75614" fg:w="1089"/><text x="68.5374%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (829 samples, 0.75%)</title><rect x="68.5222%" y="389" width="0.7487%" height="15" fill="rgb(212,211,43)" fg:x="75874" fg:w="829"/><text x="68.7722%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (829 samples, 0.75%)</title><rect x="68.5222%" y="373" width="0.7487%" height="15" fill="rgb(226,147,8)" fg:x="75874" fg:w="829"/><text x="68.7722%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (829 samples, 0.75%)</title><rect x="68.5222%" y="357" width="0.7487%" height="15" fill="rgb(226,23,13)" fg:x="75874" fg:w="829"/><text x="68.7722%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (829 samples, 0.75%)</title><rect x="68.5222%" y="341" width="0.7487%" height="15" fill="rgb(240,63,4)" fg:x="75874" fg:w="829"/><text x="68.7722%" y="351.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (829 samples, 0.75%)</title><rect x="68.5222%" y="325" width="0.7487%" height="15" fill="rgb(221,1,32)" fg:x="75874" fg:w="829"/><text x="68.7722%" y="335.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,153 samples, 1.04%)</title><rect x="68.2495%" y="437" width="1.0413%" height="15" fill="rgb(242,117,10)" fg:x="75572" fg:w="1153"/><text x="68.4995%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,111 samples, 1.00%)</title><rect x="68.2874%" y="421" width="1.0034%" height="15" fill="rgb(249,172,44)" fg:x="75614" fg:w="1111"/><text x="68.5374%" y="431.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (22 samples, 0.02%)</title><rect x="69.2709%" y="405" width="0.0199%" height="15" fill="rgb(244,46,45)" fg:x="76703" fg:w="22"/><text x="69.5209%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (22 samples, 0.02%)</title><rect x="69.2709%" y="389" width="0.0199%" height="15" fill="rgb(206,43,17)" fg:x="76703" fg:w="22"/><text x="69.5209%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (22 samples, 0.02%)</title><rect x="69.2709%" y="373" width="0.0199%" height="15" fill="rgb(239,218,39)" fg:x="76703" fg:w="22"/><text x="69.5209%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="69.3332%" y="405" width="0.0108%" height="15" fill="rgb(208,169,54)" fg:x="76772" fg:w="12"/><text x="69.5832%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (12 samples, 0.01%)</title><rect x="69.3332%" y="389" width="0.0108%" height="15" fill="rgb(247,25,42)" fg:x="76772" fg:w="12"/><text x="69.5832%" y="399.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,326 samples, 1.20%)</title><rect x="68.1935%" y="453" width="1.1975%" height="15" fill="rgb(226,23,31)" fg:x="75510" fg:w="1326"/><text x="68.4435%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (111 samples, 0.10%)</title><rect x="69.2908%" y="437" width="0.1002%" height="15" fill="rgb(247,16,28)" fg:x="76725" fg:w="111"/><text x="69.5408%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (111 samples, 0.10%)</title><rect x="69.2908%" y="421" width="0.1002%" height="15" fill="rgb(231,147,38)" fg:x="76725" fg:w="111"/><text x="69.5408%" y="431.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (52 samples, 0.05%)</title><rect x="69.3441%" y="405" width="0.0470%" height="15" fill="rgb(253,81,48)" fg:x="76784" fg:w="52"/><text x="69.5941%" y="415.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (18 samples, 0.02%)</title><rect x="69.4019%" y="373" width="0.0163%" height="15" fill="rgb(249,222,43)" fg:x="76848" fg:w="18"/><text x="69.6519%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="69.4046%" y="357" width="0.0135%" height="15" fill="rgb(221,3,27)" fg:x="76851" fg:w="15"/><text x="69.6546%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="69.4046%" y="341" width="0.0135%" height="15" fill="rgb(228,180,5)" fg:x="76851" fg:w="15"/><text x="69.6546%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="69.4055%" y="325" width="0.0126%" height="15" fill="rgb(227,131,42)" fg:x="76852" fg:w="14"/><text x="69.6555%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="69.4055%" y="309" width="0.0126%" height="15" fill="rgb(212,3,39)" fg:x="76852" fg:w="14"/><text x="69.6555%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="69.4055%" y="293" width="0.0126%" height="15" fill="rgb(226,45,5)" fg:x="76852" fg:w="14"/><text x="69.6555%" y="303.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="69.4055%" y="277" width="0.0126%" height="15" fill="rgb(215,167,45)" fg:x="76852" fg:w="14"/><text x="69.6555%" y="287.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="69.4055%" y="261" width="0.0126%" height="15" fill="rgb(250,218,53)" fg:x="76852" fg:w="14"/><text x="69.6555%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="69.4055%" y="245" width="0.0126%" height="15" fill="rgb(207,140,0)" fg:x="76852" fg:w="14"/><text x="69.6555%" y="255.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="69.4055%" y="229" width="0.0126%" height="15" fill="rgb(238,133,51)" fg:x="76852" fg:w="14"/><text x="69.6555%" y="239.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (192 samples, 0.17%)</title><rect x="69.3910%" y="453" width="0.1734%" height="15" fill="rgb(218,203,53)" fg:x="76836" fg:w="192"/><text x="69.6410%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (188 samples, 0.17%)</title><rect x="69.3946%" y="437" width="0.1698%" height="15" fill="rgb(226,184,25)" fg:x="76840" fg:w="188"/><text x="69.6446%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (188 samples, 0.17%)</title><rect x="69.3946%" y="421" width="0.1698%" height="15" fill="rgb(231,121,21)" fg:x="76840" fg:w="188"/><text x="69.6446%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (180 samples, 0.16%)</title><rect x="69.4019%" y="405" width="0.1626%" height="15" fill="rgb(251,14,34)" fg:x="76848" fg:w="180"/><text x="69.6519%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (180 samples, 0.16%)</title><rect x="69.4019%" y="389" width="0.1626%" height="15" fill="rgb(249,193,11)" fg:x="76848" fg:w="180"/><text x="69.6519%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (162 samples, 0.15%)</title><rect x="69.4181%" y="373" width="0.1463%" height="15" fill="rgb(220,172,37)" fg:x="76866" fg:w="162"/><text x="69.6681%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (162 samples, 0.15%)</title><rect x="69.4181%" y="357" width="0.1463%" height="15" fill="rgb(231,229,43)" fg:x="76866" fg:w="162"/><text x="69.6681%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (162 samples, 0.15%)</title><rect x="69.4181%" y="341" width="0.1463%" height="15" fill="rgb(250,161,5)" fg:x="76866" fg:w="162"/><text x="69.6681%" y="351.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (159 samples, 0.14%)</title><rect x="69.4208%" y="325" width="0.1436%" height="15" fill="rgb(218,225,18)" fg:x="76869" fg:w="159"/><text x="69.6708%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (159 samples, 0.14%)</title><rect x="69.4208%" y="309" width="0.1436%" height="15" fill="rgb(245,45,42)" fg:x="76869" fg:w="159"/><text x="69.6708%" y="319.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (71 samples, 0.06%)</title><rect x="69.5644%" y="453" width="0.0641%" height="15" fill="rgb(211,115,1)" fg:x="77028" fg:w="71"/><text x="69.8144%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (65 samples, 0.06%)</title><rect x="69.5699%" y="437" width="0.0587%" height="15" fill="rgb(248,133,52)" fg:x="77034" fg:w="65"/><text x="69.8199%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (65 samples, 0.06%)</title><rect x="69.5699%" y="421" width="0.0587%" height="15" fill="rgb(238,100,21)" fg:x="77034" fg:w="65"/><text x="69.8199%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (65 samples, 0.06%)</title><rect x="69.5699%" y="405" width="0.0587%" height="15" fill="rgb(247,144,11)" fg:x="77034" fg:w="65"/><text x="69.8199%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (65 samples, 0.06%)</title><rect x="69.5699%" y="389" width="0.0587%" height="15" fill="rgb(206,164,16)" fg:x="77034" fg:w="65"/><text x="69.8199%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (65 samples, 0.06%)</title><rect x="69.5699%" y="373" width="0.0587%" height="15" fill="rgb(222,34,3)" fg:x="77034" fg:w="65"/><text x="69.8199%" y="383.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="69.6439%" y="357" width="0.0343%" height="15" fill="rgb(248,82,4)" fg:x="77116" fg:w="38"/><text x="69.8939%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (56 samples, 0.05%)</title><rect x="69.6286%" y="453" width="0.0506%" height="15" fill="rgb(228,81,46)" fg:x="77099" fg:w="56"/><text x="69.8786%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="69.6286%" y="437" width="0.0506%" height="15" fill="rgb(227,67,47)" fg:x="77099" fg:w="56"/><text x="69.8786%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (56 samples, 0.05%)</title><rect x="69.6286%" y="421" width="0.0506%" height="15" fill="rgb(215,93,53)" fg:x="77099" fg:w="56"/><text x="69.8786%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (50 samples, 0.05%)</title><rect x="69.6340%" y="405" width="0.0452%" height="15" fill="rgb(248,194,39)" fg:x="77105" fg:w="50"/><text x="69.8840%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (50 samples, 0.05%)</title><rect x="69.6340%" y="389" width="0.0452%" height="15" fill="rgb(215,5,19)" fg:x="77105" fg:w="50"/><text x="69.8840%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (50 samples, 0.05%)</title><rect x="69.6340%" y="373" width="0.0452%" height="15" fill="rgb(226,215,51)" fg:x="77105" fg:w="50"/><text x="69.8840%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (55 samples, 0.05%)</title><rect x="69.8778%" y="229" width="0.0497%" height="15" fill="rgb(225,56,26)" fg:x="77375" fg:w="55"/><text x="70.1278%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (55 samples, 0.05%)</title><rect x="69.8778%" y="213" width="0.0497%" height="15" fill="rgb(222,75,29)" fg:x="77375" fg:w="55"/><text x="70.1278%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (68 samples, 0.06%)</title><rect x="69.8688%" y="261" width="0.0614%" height="15" fill="rgb(236,139,6)" fg:x="77365" fg:w="68"/><text x="70.1188%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (61 samples, 0.06%)</title><rect x="69.8751%" y="245" width="0.0551%" height="15" fill="rgb(223,137,36)" fg:x="77372" fg:w="61"/><text x="70.1251%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (803 samples, 0.73%)</title><rect x="69.9302%" y="261" width="0.7252%" height="15" fill="rgb(226,99,2)" fg:x="77433" fg:w="803"/><text x="70.1802%" y="271.50"></text></g><g><title>[libc-2.31.so] (757 samples, 0.68%)</title><rect x="69.9717%" y="245" width="0.6837%" height="15" fill="rgb(206,133,23)" fg:x="77479" fg:w="757"/><text x="70.2217%" y="255.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (881 samples, 0.80%)</title><rect x="69.8607%" y="357" width="0.7956%" height="15" fill="rgb(243,173,15)" fg:x="77356" fg:w="881"/><text x="70.1107%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (881 samples, 0.80%)</title><rect x="69.8607%" y="341" width="0.7956%" height="15" fill="rgb(228,69,28)" fg:x="77356" fg:w="881"/><text x="70.1107%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (881 samples, 0.80%)</title><rect x="69.8607%" y="325" width="0.7956%" height="15" fill="rgb(212,51,22)" fg:x="77356" fg:w="881"/><text x="70.1107%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (881 samples, 0.80%)</title><rect x="69.8607%" y="309" width="0.7956%" height="15" fill="rgb(227,113,0)" fg:x="77356" fg:w="881"/><text x="70.1107%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (881 samples, 0.80%)</title><rect x="69.8607%" y="293" width="0.7956%" height="15" fill="rgb(252,84,27)" fg:x="77356" fg:w="881"/><text x="70.1107%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (881 samples, 0.80%)</title><rect x="69.8607%" y="277" width="0.7956%" height="15" fill="rgb(223,145,39)" fg:x="77356" fg:w="881"/><text x="70.1107%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (35 samples, 0.03%)</title><rect x="70.8080%" y="213" width="0.0316%" height="15" fill="rgb(239,219,30)" fg:x="78405" fg:w="35"/><text x="71.0580%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (14 samples, 0.01%)</title><rect x="70.8631%" y="149" width="0.0126%" height="15" fill="rgb(224,196,39)" fg:x="78466" fg:w="14"/><text x="71.1131%" y="159.50"></text></g><g><title>[libc-2.31.so] (77 samples, 0.07%)</title><rect x="71.1133%" y="37" width="0.0695%" height="15" fill="rgb(205,35,43)" fg:x="78743" fg:w="77"/><text x="71.3633%" y="47.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="71.1882%" y="37" width="0.0135%" height="15" fill="rgb(228,201,21)" fg:x="78826" fg:w="15"/><text x="71.4382%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (365 samples, 0.33%)</title><rect x="70.8911%" y="133" width="0.3296%" height="15" fill="rgb(237,118,16)" fg:x="78497" fg:w="365"/><text x="71.1411%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (365 samples, 0.33%)</title><rect x="70.8911%" y="117" width="0.3296%" height="15" fill="rgb(241,17,19)" fg:x="78497" fg:w="365"/><text x="71.1411%" y="127.50"></text></g><g><title>alloc::alloc::realloc (364 samples, 0.33%)</title><rect x="70.8920%" y="101" width="0.3287%" height="15" fill="rgb(214,10,25)" fg:x="78498" fg:w="364"/><text x="71.1420%" y="111.50"></text></g><g><title>__rg_realloc (364 samples, 0.33%)</title><rect x="70.8920%" y="85" width="0.3287%" height="15" fill="rgb(238,37,29)" fg:x="78498" fg:w="364"/><text x="71.1420%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (364 samples, 0.33%)</title><rect x="70.8920%" y="69" width="0.3287%" height="15" fill="rgb(253,83,25)" fg:x="78498" fg:w="364"/><text x="71.1420%" y="79.50"></text></g><g><title>sn_rust_realloc (364 samples, 0.33%)</title><rect x="70.8920%" y="53" width="0.3287%" height="15" fill="rgb(234,192,12)" fg:x="78498" fg:w="364"/><text x="71.1420%" y="63.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (21 samples, 0.02%)</title><rect x="71.2018%" y="37" width="0.0190%" height="15" fill="rgb(241,216,45)" fg:x="78841" fg:w="21"/><text x="71.4518%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (381 samples, 0.34%)</title><rect x="70.8821%" y="149" width="0.3441%" height="15" fill="rgb(242,22,33)" fg:x="78487" fg:w="381"/><text x="71.1321%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (429 samples, 0.39%)</title><rect x="70.8396%" y="213" width="0.3874%" height="15" fill="rgb(231,105,49)" fg:x="78440" fg:w="429"/><text x="71.0896%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (426 samples, 0.38%)</title><rect x="70.8423%" y="197" width="0.3847%" height="15" fill="rgb(218,204,15)" fg:x="78443" fg:w="426"/><text x="71.0923%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (415 samples, 0.37%)</title><rect x="70.8523%" y="181" width="0.3748%" height="15" fill="rgb(235,138,41)" fg:x="78454" fg:w="415"/><text x="71.1023%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (415 samples, 0.37%)</title><rect x="70.8523%" y="165" width="0.3748%" height="15" fill="rgb(246,0,9)" fg:x="78454" fg:w="415"/><text x="71.1023%" y="175.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (508 samples, 0.46%)</title><rect x="70.7954%" y="325" width="0.4588%" height="15" fill="rgb(210,74,4)" fg:x="78391" fg:w="508"/><text x="71.0454%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (508 samples, 0.46%)</title><rect x="70.7954%" y="309" width="0.4588%" height="15" fill="rgb(250,60,41)" fg:x="78391" fg:w="508"/><text x="71.0454%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (508 samples, 0.46%)</title><rect x="70.7954%" y="293" width="0.4588%" height="15" fill="rgb(220,115,12)" fg:x="78391" fg:w="508"/><text x="71.0454%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (508 samples, 0.46%)</title><rect x="70.7954%" y="277" width="0.4588%" height="15" fill="rgb(237,100,13)" fg:x="78391" fg:w="508"/><text x="71.0454%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (508 samples, 0.46%)</title><rect x="70.7954%" y="261" width="0.4588%" height="15" fill="rgb(213,55,26)" fg:x="78391" fg:w="508"/><text x="71.0454%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (508 samples, 0.46%)</title><rect x="70.7954%" y="245" width="0.4588%" height="15" fill="rgb(216,17,4)" fg:x="78391" fg:w="508"/><text x="71.0454%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (508 samples, 0.46%)</title><rect x="70.7954%" y="229" width="0.4588%" height="15" fill="rgb(220,153,47)" fg:x="78391" fg:w="508"/><text x="71.0454%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.03%)</title><rect x="71.2270%" y="213" width="0.0271%" height="15" fill="rgb(215,131,9)" fg:x="78869" fg:w="30"/><text x="71.4770%" y="223.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (1,899 samples, 1.71%)</title><rect x="69.7414%" y="437" width="1.7150%" height="15" fill="rgb(233,46,42)" fg:x="77224" fg:w="1899"/><text x="69.9914%" y="447.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,899 samples, 1.71%)</title><rect x="69.7414%" y="421" width="1.7150%" height="15" fill="rgb(226,86,7)" fg:x="77224" fg:w="1899"/><text x="69.9914%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1,864 samples, 1.68%)</title><rect x="69.7730%" y="405" width="1.6834%" height="15" fill="rgb(239,226,21)" fg:x="77259" fg:w="1864"/><text x="70.0230%" y="415.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,860 samples, 1.68%)</title><rect x="69.7767%" y="389" width="1.6798%" height="15" fill="rgb(244,137,22)" fg:x="77263" fg:w="1860"/><text x="70.0267%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (1,768 samples, 1.60%)</title><rect x="69.8597%" y="373" width="1.5967%" height="15" fill="rgb(211,139,35)" fg:x="77355" fg:w="1768"/><text x="70.1097%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (886 samples, 0.80%)</title><rect x="70.6563%" y="357" width="0.8002%" height="15" fill="rgb(214,62,50)" fg:x="78237" fg:w="886"/><text x="70.9063%" y="367.50"></text></g><g><title>rmp::encode::write_marker (764 samples, 0.69%)</title><rect x="70.7665%" y="341" width="0.6900%" height="15" fill="rgb(212,113,44)" fg:x="78359" fg:w="764"/><text x="71.0165%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (224 samples, 0.20%)</title><rect x="71.2541%" y="325" width="0.2023%" height="15" fill="rgb(226,150,43)" fg:x="78899" fg:w="224"/><text x="71.5041%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (44 samples, 0.04%)</title><rect x="71.7238%" y="389" width="0.0397%" height="15" fill="rgb(250,71,37)" fg:x="79419" fg:w="44"/><text x="71.9738%" y="399.50"></text></g><g><title>rmp::encode::write_bool (40 samples, 0.04%)</title><rect x="71.7274%" y="373" width="0.0361%" height="15" fill="rgb(219,76,19)" fg:x="79423" fg:w="40"/><text x="71.9774%" y="383.50"></text></g><g><title>rmp::encode::write_marker (32 samples, 0.03%)</title><rect x="71.7346%" y="357" width="0.0289%" height="15" fill="rgb(250,39,11)" fg:x="79431" fg:w="32"/><text x="71.9846%" y="367.50"></text></g><g><title>rmp::marker::Marker::to_u8 (19 samples, 0.02%)</title><rect x="71.7463%" y="341" width="0.0172%" height="15" fill="rgb(230,64,31)" fg:x="79444" fg:w="19"/><text x="71.9963%" y="351.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (23 samples, 0.02%)</title><rect x="71.7816%" y="309" width="0.0208%" height="15" fill="rgb(208,222,23)" fg:x="79483" fg:w="23"/><text x="72.0316%" y="319.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (23 samples, 0.02%)</title><rect x="71.7816%" y="293" width="0.0208%" height="15" fill="rgb(227,125,18)" fg:x="79483" fg:w="23"/><text x="72.0316%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (23 samples, 0.02%)</title><rect x="71.7816%" y="277" width="0.0208%" height="15" fill="rgb(234,210,9)" fg:x="79483" fg:w="23"/><text x="72.0316%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (23 samples, 0.02%)</title><rect x="71.7816%" y="261" width="0.0208%" height="15" fill="rgb(217,127,24)" fg:x="79483" fg:w="23"/><text x="72.0316%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (23 samples, 0.02%)</title><rect x="71.7816%" y="245" width="0.0208%" height="15" fill="rgb(239,141,48)" fg:x="79483" fg:w="23"/><text x="72.0316%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.02%)</title><rect x="71.7816%" y="229" width="0.0208%" height="15" fill="rgb(227,109,8)" fg:x="79483" fg:w="23"/><text x="72.0316%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (23 samples, 0.02%)</title><rect x="71.7816%" y="213" width="0.0208%" height="15" fill="rgb(235,184,23)" fg:x="79483" fg:w="23"/><text x="72.0316%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="71.7879%" y="197" width="0.0144%" height="15" fill="rgb(227,226,48)" fg:x="79490" fg:w="16"/><text x="72.0379%" y="207.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq::{{closure}} (44 samples, 0.04%)</title><rect x="71.7635%" y="357" width="0.0397%" height="15" fill="rgb(206,150,11)" fg:x="79463" fg:w="44"/><text x="72.0135%" y="367.50"></text></g><g><title>rmp::encode::write_array_len (42 samples, 0.04%)</title><rect x="71.7653%" y="341" width="0.0379%" height="15" fill="rgb(254,2,33)" fg:x="79465" fg:w="42"/><text x="72.0153%" y="351.50"></text></g><g><title>rmp::encode::write_marker (31 samples, 0.03%)</title><rect x="71.7752%" y="325" width="0.0280%" height="15" fill="rgb(243,160,20)" fg:x="79476" fg:w="31"/><text x="72.0252%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq (51 samples, 0.05%)</title><rect x="71.7635%" y="389" width="0.0461%" height="15" fill="rgb(218,208,30)" fg:x="79463" fg:w="51"/><text x="72.0135%" y="399.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (51 samples, 0.05%)</title><rect x="71.7635%" y="373" width="0.0461%" height="15" fill="rgb(224,120,49)" fg:x="79463" fg:w="51"/><text x="72.0135%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.02%)</title><rect x="71.8926%" y="229" width="0.0163%" height="15" fill="rgb(246,12,2)" fg:x="79606" fg:w="18"/><text x="72.1426%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (18 samples, 0.02%)</title><rect x="71.8926%" y="213" width="0.0163%" height="15" fill="rgb(236,117,3)" fg:x="79606" fg:w="18"/><text x="72.1426%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.01%)</title><rect x="71.9161%" y="197" width="0.0108%" height="15" fill="rgb(216,128,52)" fg:x="79632" fg:w="12"/><text x="72.1661%" y="207.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="72.1916%" y="85" width="0.0199%" height="15" fill="rgb(246,145,19)" fg:x="79937" fg:w="22"/><text x="72.4416%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (321 samples, 0.29%)</title><rect x="71.9378%" y="181" width="0.2899%" height="15" fill="rgb(222,11,46)" fg:x="79656" fg:w="321"/><text x="72.1878%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (321 samples, 0.29%)</title><rect x="71.9378%" y="165" width="0.2899%" height="15" fill="rgb(245,82,36)" fg:x="79656" fg:w="321"/><text x="72.1878%" y="175.50"></text></g><g><title>alloc::alloc::realloc (320 samples, 0.29%)</title><rect x="71.9387%" y="149" width="0.2890%" height="15" fill="rgb(250,73,51)" fg:x="79657" fg:w="320"/><text x="72.1887%" y="159.50"></text></g><g><title>__rg_realloc (320 samples, 0.29%)</title><rect x="71.9387%" y="133" width="0.2890%" height="15" fill="rgb(221,189,23)" fg:x="79657" fg:w="320"/><text x="72.1887%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (320 samples, 0.29%)</title><rect x="71.9387%" y="117" width="0.2890%" height="15" fill="rgb(210,33,7)" fg:x="79657" fg:w="320"/><text x="72.1887%" y="127.50"></text></g><g><title>sn_rust_realloc (320 samples, 0.29%)</title><rect x="71.9387%" y="101" width="0.2890%" height="15" fill="rgb(210,107,22)" fg:x="79657" fg:w="320"/><text x="72.1887%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (330 samples, 0.30%)</title><rect x="71.9306%" y="197" width="0.2980%" height="15" fill="rgb(222,116,37)" fg:x="79648" fg:w="330"/><text x="72.1806%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (394 samples, 0.36%)</title><rect x="71.8818%" y="261" width="0.3558%" height="15" fill="rgb(254,17,48)" fg:x="79594" fg:w="394"/><text x="72.1318%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (391 samples, 0.35%)</title><rect x="71.8845%" y="245" width="0.3531%" height="15" fill="rgb(224,36,32)" fg:x="79597" fg:w="391"/><text x="72.1345%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (364 samples, 0.33%)</title><rect x="71.9089%" y="229" width="0.3287%" height="15" fill="rgb(232,90,46)" fg:x="79624" fg:w="364"/><text x="72.1589%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (364 samples, 0.33%)</title><rect x="71.9089%" y="213" width="0.3287%" height="15" fill="rgb(241,66,40)" fg:x="79624" fg:w="364"/><text x="72.1589%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (399 samples, 0.36%)</title><rect x="72.2376%" y="261" width="0.3603%" height="15" fill="rgb(249,184,29)" fg:x="79988" fg:w="399"/><text x="72.4876%" y="271.50"></text></g><g><title>[libc-2.31.so] (374 samples, 0.34%)</title><rect x="72.2602%" y="245" width="0.3378%" height="15" fill="rgb(231,181,1)" fg:x="80013" fg:w="374"/><text x="72.5102%" y="255.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (821 samples, 0.74%)</title><rect x="71.8601%" y="357" width="0.7414%" height="15" fill="rgb(224,94,2)" fg:x="79570" fg:w="821"/><text x="72.1101%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (821 samples, 0.74%)</title><rect x="71.8601%" y="341" width="0.7414%" height="15" fill="rgb(229,170,15)" fg:x="79570" fg:w="821"/><text x="72.1101%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (821 samples, 0.74%)</title><rect x="71.8601%" y="325" width="0.7414%" height="15" fill="rgb(240,127,35)" fg:x="79570" fg:w="821"/><text x="72.1101%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (821 samples, 0.74%)</title><rect x="71.8601%" y="309" width="0.7414%" height="15" fill="rgb(248,196,34)" fg:x="79570" fg:w="821"/><text x="72.1101%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (821 samples, 0.74%)</title><rect x="71.8601%" y="293" width="0.7414%" height="15" fill="rgb(236,137,7)" fg:x="79570" fg:w="821"/><text x="72.1101%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (821 samples, 0.74%)</title><rect x="71.8601%" y="277" width="0.7414%" height="15" fill="rgb(235,127,16)" fg:x="79570" fg:w="821"/><text x="72.1101%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="72.6883%" y="213" width="0.0235%" height="15" fill="rgb(250,192,54)" fg:x="80487" fg:w="26"/><text x="72.9383%" y="223.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (64 samples, 0.06%)</title><rect x="72.6711%" y="325" width="0.0578%" height="15" fill="rgb(218,98,20)" fg:x="80468" fg:w="64"/><text x="72.9211%" y="335.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (64 samples, 0.06%)</title><rect x="72.6711%" y="309" width="0.0578%" height="15" fill="rgb(230,176,47)" fg:x="80468" fg:w="64"/><text x="72.9211%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (64 samples, 0.06%)</title><rect x="72.6711%" y="293" width="0.0578%" height="15" fill="rgb(244,2,33)" fg:x="80468" fg:w="64"/><text x="72.9211%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (64 samples, 0.06%)</title><rect x="72.6711%" y="277" width="0.0578%" height="15" fill="rgb(231,100,17)" fg:x="80468" fg:w="64"/><text x="72.9211%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (64 samples, 0.06%)</title><rect x="72.6711%" y="261" width="0.0578%" height="15" fill="rgb(245,23,12)" fg:x="80468" fg:w="64"/><text x="72.9211%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (64 samples, 0.06%)</title><rect x="72.6711%" y="245" width="0.0578%" height="15" fill="rgb(249,55,22)" fg:x="80468" fg:w="64"/><text x="72.9211%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (64 samples, 0.06%)</title><rect x="72.6711%" y="229" width="0.0578%" height="15" fill="rgb(207,134,9)" fg:x="80468" fg:w="64"/><text x="72.9211%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="72.7118%" y="213" width="0.0172%" height="15" fill="rgb(218,134,0)" fg:x="80513" fg:w="19"/><text x="72.9618%" y="223.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,073 samples, 0.97%)</title><rect x="71.8096%" y="389" width="0.9690%" height="15" fill="rgb(213,212,33)" fg:x="79514" fg:w="1073"/><text x="72.0596%" y="399.50"></text></g><g><title>rmp::encode::str::write_str (1,018 samples, 0.92%)</title><rect x="71.8592%" y="373" width="0.9194%" height="15" fill="rgb(252,106,18)" fg:x="79569" fg:w="1018"/><text x="72.1092%" y="383.50"></text></g><g><title>rmp::encode::str::write_str_len (196 samples, 0.18%)</title><rect x="72.6016%" y="357" width="0.1770%" height="15" fill="rgb(208,126,42)" fg:x="80391" fg:w="196"/><text x="72.8516%" y="367.50"></text></g><g><title>rmp::encode::write_marker (131 samples, 0.12%)</title><rect x="72.6603%" y="341" width="0.1183%" height="15" fill="rgb(246,175,29)" fg:x="80456" fg:w="131"/><text x="72.9103%" y="351.50"></text></g><g><title>rmp::marker::Marker::to_u8 (55 samples, 0.05%)</title><rect x="72.7289%" y="325" width="0.0497%" height="15" fill="rgb(215,13,50)" fg:x="80532" fg:w="55"/><text x="72.9789%" y="335.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (29 samples, 0.03%)</title><rect x="72.7786%" y="389" width="0.0262%" height="15" fill="rgb(216,172,15)" fg:x="80587" fg:w="29"/><text x="73.0286%" y="399.50"></text></g><g><title>rmp::encode::uint::write_uint (24 samples, 0.02%)</title><rect x="72.7831%" y="373" width="0.0217%" height="15" fill="rgb(212,103,13)" fg:x="80592" fg:w="24"/><text x="73.0331%" y="383.50"></text></g><g><title>rmp::encode::uint::write_pfix (19 samples, 0.02%)</title><rect x="72.7876%" y="357" width="0.0172%" height="15" fill="rgb(231,171,36)" fg:x="80597" fg:w="19"/><text x="73.0376%" y="367.50"></text></g><g><title>rmp::encode::write_marker (16 samples, 0.01%)</title><rect x="72.7903%" y="341" width="0.0144%" height="15" fill="rgb(250,123,20)" fg:x="80600" fg:w="16"/><text x="73.0403%" y="351.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.03%)</title><rect x="72.8048%" y="389" width="0.0271%" height="15" fill="rgb(212,53,50)" fg:x="80616" fg:w="30"/><text x="73.0548%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (59 samples, 0.05%)</title><rect x="72.8319%" y="389" width="0.0533%" height="15" fill="rgb(243,54,12)" fg:x="80646" fg:w="59"/><text x="73.0819%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.05%)</title><rect x="72.8852%" y="389" width="0.0452%" height="15" fill="rgb(234,101,34)" fg:x="80705" fg:w="50"/><text x="73.1352%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.01%)</title><rect x="72.9773%" y="373" width="0.0126%" height="15" fill="rgb(254,67,22)" fg:x="80807" fg:w="14"/><text x="73.2273%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28 samples, 0.03%)</title><rect x="74.0420%" y="229" width="0.0253%" height="15" fill="rgb(250,35,47)" fg:x="81986" fg:w="28"/><text x="74.2920%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.02%)</title><rect x="74.0493%" y="213" width="0.0181%" height="15" fill="rgb(226,126,38)" fg:x="81994" fg:w="20"/><text x="74.2993%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (16 samples, 0.01%)</title><rect x="74.0529%" y="197" width="0.0144%" height="15" fill="rgb(216,138,53)" fg:x="81998" fg:w="16"/><text x="74.3029%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (16 samples, 0.01%)</title><rect x="74.0529%" y="181" width="0.0144%" height="15" fill="rgb(246,199,43)" fg:x="81998" fg:w="16"/><text x="74.3029%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (120 samples, 0.11%)</title><rect x="74.0673%" y="229" width="0.1084%" height="15" fill="rgb(232,125,11)" fg:x="82014" fg:w="120"/><text x="74.3173%" y="239.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.09%)</title><rect x="74.0818%" y="213" width="0.0939%" height="15" fill="rgb(218,219,45)" fg:x="82030" fg:w="104"/><text x="74.3318%" y="223.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (163 samples, 0.15%)</title><rect x="74.0303%" y="325" width="0.1472%" height="15" fill="rgb(216,102,54)" fg:x="81973" fg:w="163"/><text x="74.2803%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (163 samples, 0.15%)</title><rect x="74.0303%" y="309" width="0.1472%" height="15" fill="rgb(250,228,7)" fg:x="81973" fg:w="163"/><text x="74.2803%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (163 samples, 0.15%)</title><rect x="74.0303%" y="293" width="0.1472%" height="15" fill="rgb(226,125,25)" fg:x="81973" fg:w="163"/><text x="74.2803%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (163 samples, 0.15%)</title><rect x="74.0303%" y="277" width="0.1472%" height="15" fill="rgb(224,165,27)" fg:x="81973" fg:w="163"/><text x="74.2803%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (163 samples, 0.15%)</title><rect x="74.0303%" y="261" width="0.1472%" height="15" fill="rgb(233,86,3)" fg:x="81973" fg:w="163"/><text x="74.2803%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (163 samples, 0.15%)</title><rect x="74.0303%" y="245" width="0.1472%" height="15" fill="rgb(228,116,20)" fg:x="81973" fg:w="163"/><text x="74.2803%" y="255.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (50 samples, 0.05%)</title><rect x="74.2299%" y="293" width="0.0452%" height="15" fill="rgb(209,192,17)" fg:x="82194" fg:w="50"/><text x="74.4799%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (50 samples, 0.05%)</title><rect x="74.2299%" y="277" width="0.0452%" height="15" fill="rgb(224,88,34)" fg:x="82194" fg:w="50"/><text x="74.4799%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (50 samples, 0.05%)</title><rect x="74.2299%" y="261" width="0.0452%" height="15" fill="rgb(233,38,6)" fg:x="82194" fg:w="50"/><text x="74.4799%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (50 samples, 0.05%)</title><rect x="74.2299%" y="245" width="0.0452%" height="15" fill="rgb(212,59,30)" fg:x="82194" fg:w="50"/><text x="74.4799%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (50 samples, 0.05%)</title><rect x="74.2299%" y="229" width="0.0452%" height="15" fill="rgb(213,80,3)" fg:x="82194" fg:w="50"/><text x="74.4799%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (50 samples, 0.05%)</title><rect x="74.2299%" y="213" width="0.0452%" height="15" fill="rgb(251,178,7)" fg:x="82194" fg:w="50"/><text x="74.4799%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (50 samples, 0.05%)</title><rect x="74.2299%" y="197" width="0.0452%" height="15" fill="rgb(213,154,26)" fg:x="82194" fg:w="50"/><text x="74.4799%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.04%)</title><rect x="74.2362%" y="181" width="0.0388%" height="15" fill="rgb(238,165,49)" fg:x="82201" fg:w="43"/><text x="74.4862%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (329 samples, 0.30%)</title><rect x="74.0104%" y="357" width="0.2971%" height="15" fill="rgb(248,91,46)" fg:x="81951" fg:w="329"/><text x="74.2604%" y="367.50"></text></g><g><title>rmp::encode::str::write_str (308 samples, 0.28%)</title><rect x="74.0294%" y="341" width="0.2782%" height="15" fill="rgb(244,21,52)" fg:x="81972" fg:w="308"/><text x="74.2794%" y="351.50"></text></g><g><title>rmp::encode::str::write_str_len (144 samples, 0.13%)</title><rect x="74.1775%" y="325" width="0.1300%" height="15" fill="rgb(247,122,20)" fg:x="82136" fg:w="144"/><text x="74.4275%" y="335.50"></text></g><g><title>rmp::encode::write_marker (113 samples, 0.10%)</title><rect x="74.2055%" y="309" width="0.1021%" height="15" fill="rgb(218,27,9)" fg:x="82167" fg:w="113"/><text x="74.4555%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (36 samples, 0.03%)</title><rect x="74.2750%" y="293" width="0.0325%" height="15" fill="rgb(246,7,6)" fg:x="82244" fg:w="36"/><text x="74.5250%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (39 samples, 0.04%)</title><rect x="74.3093%" y="341" width="0.0352%" height="15" fill="rgb(227,135,54)" fg:x="82282" fg:w="39"/><text x="74.5593%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (33 samples, 0.03%)</title><rect x="74.4620%" y="181" width="0.0298%" height="15" fill="rgb(247,14,11)" fg:x="82451" fg:w="33"/><text x="74.7120%" y="191.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (69 samples, 0.06%)</title><rect x="74.4620%" y="293" width="0.0623%" height="15" fill="rgb(206,149,34)" fg:x="82451" fg:w="69"/><text x="74.7120%" y="303.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (69 samples, 0.06%)</title><rect x="74.4620%" y="277" width="0.0623%" height="15" fill="rgb(227,228,4)" fg:x="82451" fg:w="69"/><text x="74.7120%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (69 samples, 0.06%)</title><rect x="74.4620%" y="261" width="0.0623%" height="15" fill="rgb(238,218,28)" fg:x="82451" fg:w="69"/><text x="74.7120%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (69 samples, 0.06%)</title><rect x="74.4620%" y="245" width="0.0623%" height="15" fill="rgb(252,86,40)" fg:x="82451" fg:w="69"/><text x="74.7120%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (69 samples, 0.06%)</title><rect x="74.4620%" y="229" width="0.0623%" height="15" fill="rgb(251,225,11)" fg:x="82451" fg:w="69"/><text x="74.7120%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (69 samples, 0.06%)</title><rect x="74.4620%" y="213" width="0.0623%" height="15" fill="rgb(206,46,49)" fg:x="82451" fg:w="69"/><text x="74.7120%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (69 samples, 0.06%)</title><rect x="74.4620%" y="197" width="0.0623%" height="15" fill="rgb(245,128,24)" fg:x="82451" fg:w="69"/><text x="74.7120%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="74.4954%" y="181" width="0.0289%" height="15" fill="rgb(219,177,34)" fg:x="82488" fg:w="32"/><text x="74.7454%" y="191.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (360 samples, 0.33%)</title><rect x="74.3075%" y="357" width="0.3251%" height="15" fill="rgb(218,60,48)" fg:x="82280" fg:w="360"/><text x="74.5575%" y="367.50"></text></g><g><title>rmp::encode::uint::write_uint (319 samples, 0.29%)</title><rect x="74.3446%" y="341" width="0.2881%" height="15" fill="rgb(221,11,5)" fg:x="82321" fg:w="319"/><text x="74.5946%" y="351.50"></text></g><g><title>rmp::encode::uint::write_pfix (269 samples, 0.24%)</title><rect x="74.3897%" y="325" width="0.2429%" height="15" fill="rgb(220,148,13)" fg:x="82371" fg:w="269"/><text x="74.6397%" y="335.50"></text></g><g><title>rmp::encode::write_marker (212 samples, 0.19%)</title><rect x="74.4412%" y="309" width="0.1915%" height="15" fill="rgb(210,16,3)" fg:x="82428" fg:w="212"/><text x="74.6912%" y="319.50"></text></g><g><title>rmp::marker::Marker::to_u8 (120 samples, 0.11%)</title><rect x="74.5243%" y="293" width="0.1084%" height="15" fill="rgb(236,80,2)" fg:x="82520" fg:w="120"/><text x="74.7743%" y="303.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,954 samples, 1.76%)</title><rect x="72.9366%" y="389" width="1.7647%" height="15" fill="rgb(239,129,19)" fg:x="80762" fg:w="1954"/><text x="73.1866%" y="399.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (1,895 samples, 1.71%)</title><rect x="72.9899%" y="373" width="1.7114%" height="15" fill="rgb(220,106,35)" fg:x="80821" fg:w="1895"/><text x="73.2399%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (76 samples, 0.07%)</title><rect x="74.6327%" y="357" width="0.0686%" height="15" fill="rgb(252,139,45)" fg:x="82640" fg:w="76"/><text x="74.8827%" y="367.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (7,474 samples, 6.75%)</title><rect x="67.9524%" y="533" width="6.7498%" height="15" fill="rgb(229,8,36)" fg:x="75243" fg:w="7474"/><text x="68.2024%" y="543.50">&lt;tremor_r..</text></g><g><title>rmp_serde::encode::to_vec (7,474 samples, 6.75%)</title><rect x="67.9524%" y="517" width="6.7498%" height="15" fill="rgb(230,126,33)" fg:x="75243" fg:w="7474"/><text x="68.2024%" y="527.50">rmp_serde..</text></g><g><title>rmp_serde::encode::write (7,474 samples, 6.75%)</title><rect x="67.9524%" y="501" width="6.7498%" height="15" fill="rgb(239,140,21)" fg:x="75243" fg:w="7474"/><text x="68.2024%" y="511.50">rmp_serde..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7,474 samples, 6.75%)</title><rect x="67.9524%" y="485" width="6.7498%" height="15" fill="rgb(254,104,9)" fg:x="75243" fg:w="7474"/><text x="68.2024%" y="495.50">serde::se..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (7,474 samples, 6.75%)</title><rect x="67.9524%" y="469" width="6.7498%" height="15" fill="rgb(239,52,14)" fg:x="75243" fg:w="7474"/><text x="68.2024%" y="479.50">tremor_va..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (5,562 samples, 5.02%)</title><rect x="69.6791%" y="453" width="5.0231%" height="15" fill="rgb(208,227,44)" fg:x="77155" fg:w="5562"/><text x="69.9291%" y="463.50">serde:..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (3,594 samples, 3.25%)</title><rect x="71.4564%" y="437" width="3.2458%" height="15" fill="rgb(246,18,19)" fg:x="79123" fg:w="3594"/><text x="71.7064%" y="447.50">&lt;rm..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3,594 samples, 3.25%)</title><rect x="71.4564%" y="421" width="3.2458%" height="15" fill="rgb(235,228,25)" fg:x="79123" fg:w="3594"/><text x="71.7064%" y="431.50">&lt;rm..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (3,509 samples, 3.17%)</title><rect x="71.5332%" y="405" width="3.1690%" height="15" fill="rgb(240,156,20)" fg:x="79208" fg:w="3509"/><text x="71.7832%" y="415.50">tre..</text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.02%)</title><rect x="74.7284%" y="517" width="0.0208%" height="15" fill="rgb(224,8,20)" fg:x="82746" fg:w="23"/><text x="74.9784%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="74.7284%" y="501" width="0.0208%" height="15" fill="rgb(214,12,52)" fg:x="82746" fg:w="23"/><text x="74.9784%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="74.7284%" y="485" width="0.0208%" height="15" fill="rgb(211,220,47)" fg:x="82746" fg:w="23"/><text x="74.9784%" y="495.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.02%)</title><rect x="74.7302%" y="469" width="0.0190%" height="15" fill="rgb(250,173,5)" fg:x="82748" fg:w="21"/><text x="74.9802%" y="479.50"></text></g><g><title>__rg_alloc (21 samples, 0.02%)</title><rect x="74.7302%" y="453" width="0.0190%" height="15" fill="rgb(250,125,52)" fg:x="82748" fg:w="21"/><text x="74.9802%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (21 samples, 0.02%)</title><rect x="74.7302%" y="437" width="0.0190%" height="15" fill="rgb(209,133,18)" fg:x="82748" fg:w="21"/><text x="74.9802%" y="447.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.02%)</title><rect x="74.7302%" y="421" width="0.0190%" height="15" fill="rgb(216,173,22)" fg:x="82748" fg:w="21"/><text x="74.9802%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (14 samples, 0.01%)</title><rect x="74.7663%" y="501" width="0.0126%" height="15" fill="rgb(205,3,22)" fg:x="82788" fg:w="14"/><text x="75.0163%" y="511.50"></text></g><g><title>core::time::Duration::as_nanos (19 samples, 0.02%)</title><rect x="74.7790%" y="501" width="0.0172%" height="15" fill="rgb(248,22,20)" fg:x="82802" fg:w="19"/><text x="75.0290%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (56 samples, 0.05%)</title><rect x="74.7961%" y="485" width="0.0506%" height="15" fill="rgb(233,6,29)" fg:x="82821" fg:w="56"/><text x="75.0461%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (23 samples, 0.02%)</title><rect x="74.8593%" y="453" width="0.0208%" height="15" fill="rgb(240,22,54)" fg:x="82891" fg:w="23"/><text x="75.1093%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (23 samples, 0.02%)</title><rect x="74.8593%" y="437" width="0.0208%" height="15" fill="rgb(231,133,32)" fg:x="82891" fg:w="23"/><text x="75.1093%" y="447.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (23 samples, 0.02%)</title><rect x="74.8593%" y="421" width="0.0208%" height="15" fill="rgb(248,193,4)" fg:x="82891" fg:w="23"/><text x="75.1093%" y="431.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (23 samples, 0.02%)</title><rect x="74.8593%" y="405" width="0.0208%" height="15" fill="rgb(211,178,46)" fg:x="82891" fg:w="23"/><text x="75.1093%" y="415.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (23 samples, 0.02%)</title><rect x="74.8593%" y="389" width="0.0208%" height="15" fill="rgb(224,5,42)" fg:x="82891" fg:w="23"/><text x="75.1093%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (13 samples, 0.01%)</title><rect x="74.8684%" y="373" width="0.0117%" height="15" fill="rgb(239,176,25)" fg:x="82901" fg:w="13"/><text x="75.1184%" y="383.50"></text></g><g><title>std::time::SystemTime::duration_since (101 samples, 0.09%)</title><rect x="74.7961%" y="501" width="0.0912%" height="15" fill="rgb(245,187,50)" fg:x="82821" fg:w="101"/><text x="75.0461%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (45 samples, 0.04%)</title><rect x="74.8467%" y="485" width="0.0406%" height="15" fill="rgb(248,24,15)" fg:x="82877" fg:w="45"/><text x="75.0967%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (45 samples, 0.04%)</title><rect x="74.8467%" y="469" width="0.0406%" height="15" fill="rgb(205,166,13)" fg:x="82877" fg:w="45"/><text x="75.0967%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,928 samples, 7.16%)</title><rect x="67.9524%" y="885" width="7.1598%" height="15" fill="rgb(208,114,23)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="895.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,928 samples, 7.16%)</title><rect x="67.9524%" y="869" width="7.1598%" height="15" fill="rgb(239,127,18)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="879.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,928 samples, 7.16%)</title><rect x="67.9524%" y="853" width="7.1598%" height="15" fill="rgb(219,154,28)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="863.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,928 samples, 7.16%)</title><rect x="67.9524%" y="837" width="7.1598%" height="15" fill="rgb(225,157,23)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="847.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,928 samples, 7.16%)</title><rect x="67.9524%" y="821" width="7.1598%" height="15" fill="rgb(219,8,6)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="831.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,928 samples, 7.16%)</title><rect x="67.9524%" y="805" width="7.1598%" height="15" fill="rgb(212,47,6)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="815.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,928 samples, 7.16%)</title><rect x="67.9524%" y="789" width="7.1598%" height="15" fill="rgb(224,190,4)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="799.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (7,928 samples, 7.16%)</title><rect x="67.9524%" y="773" width="7.1598%" height="15" fill="rgb(239,183,29)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="783.50">std::panic..</text></g><g><title>std::panicking::try (7,928 samples, 7.16%)</title><rect x="67.9524%" y="757" width="7.1598%" height="15" fill="rgb(213,57,7)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="767.50">std::panic..</text></g><g><title>std::panicking::try::do_call (7,928 samples, 7.16%)</title><rect x="67.9524%" y="741" width="7.1598%" height="15" fill="rgb(216,148,1)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="751.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,928 samples, 7.16%)</title><rect x="67.9524%" y="725" width="7.1598%" height="15" fill="rgb(236,182,29)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="735.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (7,928 samples, 7.16%)</title><rect x="67.9524%" y="709" width="7.1598%" height="15" fill="rgb(244,120,48)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="719.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,928 samples, 7.16%)</title><rect x="67.9524%" y="693" width="7.1598%" height="15" fill="rgb(206,71,34)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="703.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (7,928 samples, 7.16%)</title><rect x="67.9524%" y="677" width="7.1598%" height="15" fill="rgb(242,32,6)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="687.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,928 samples, 7.16%)</title><rect x="67.9524%" y="661" width="7.1598%" height="15" fill="rgb(241,35,3)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="671.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,928 samples, 7.16%)</title><rect x="67.9524%" y="645" width="7.1598%" height="15" fill="rgb(222,62,19)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="655.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,928 samples, 7.16%)</title><rect x="67.9524%" y="629" width="7.1598%" height="15" fill="rgb(223,110,41)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="639.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (7,928 samples, 7.16%)</title><rect x="67.9524%" y="613" width="7.1598%" height="15" fill="rgb(208,224,4)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="623.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (7,928 samples, 7.16%)</title><rect x="67.9524%" y="597" width="7.1598%" height="15" fill="rgb(241,137,19)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="607.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (7,928 samples, 7.16%)</title><rect x="67.9524%" y="581" width="7.1598%" height="15" fill="rgb(244,24,17)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="591.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (7,928 samples, 7.16%)</title><rect x="67.9524%" y="565" width="7.1598%" height="15" fill="rgb(245,178,49)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="575.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (7,928 samples, 7.16%)</title><rect x="67.9524%" y="549" width="7.1598%" height="15" fill="rgb(219,160,38)" fg:x="75243" fg:w="7928"/><text x="68.2024%" y="559.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (454 samples, 0.41%)</title><rect x="74.7022%" y="533" width="0.4100%" height="15" fill="rgb(228,137,14)" fg:x="82717" fg:w="454"/><text x="74.9522%" y="543.50"></text></g><g><title>tremor_common::time::nanotime (390 samples, 0.35%)</title><rect x="74.7600%" y="517" width="0.3522%" height="15" fill="rgb(237,134,11)" fg:x="82781" fg:w="390"/><text x="75.0100%" y="527.50"></text></g><g><title>std::time::SystemTime::now (249 samples, 0.22%)</title><rect x="74.8873%" y="501" width="0.2249%" height="15" fill="rgb(211,126,44)" fg:x="82922" fg:w="249"/><text x="75.1373%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (249 samples, 0.22%)</title><rect x="74.8873%" y="485" width="0.2249%" height="15" fill="rgb(226,171,33)" fg:x="82922" fg:w="249"/><text x="75.1373%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (249 samples, 0.22%)</title><rect x="74.8873%" y="469" width="0.2249%" height="15" fill="rgb(253,99,13)" fg:x="82922" fg:w="249"/><text x="75.1373%" y="479.50"></text></g><g><title>__clock_gettime (208 samples, 0.19%)</title><rect x="74.9244%" y="453" width="0.1878%" height="15" fill="rgb(244,48,7)" fg:x="82963" fg:w="208"/><text x="75.1744%" y="463.50"></text></g><g><title>__vdso_clock_gettime (200 samples, 0.18%)</title><rect x="74.9316%" y="437" width="0.1806%" height="15" fill="rgb(244,217,54)" fg:x="82971" fg:w="200"/><text x="75.1816%" y="447.50"></text></g><g><title>[[vdso]] (171 samples, 0.15%)</title><rect x="74.9578%" y="421" width="0.1544%" height="15" fill="rgb(224,15,18)" fg:x="83000" fg:w="171"/><text x="75.2078%" y="431.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,081 samples, 10.01%)</title><rect x="65.1058%" y="901" width="10.0073%" height="15" fill="rgb(244,99,12)" fg:x="72091" fg:w="11081"/><text x="65.3558%" y="911.50">tremor_runtime..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (82 samples, 0.07%)</title><rect x="75.3010%" y="741" width="0.0741%" height="15" fill="rgb(233,226,8)" fg:x="83380" fg:w="82"/><text x="75.5510%" y="751.50"></text></g><g><title>core::mem::replace (82 samples, 0.07%)</title><rect x="75.3010%" y="725" width="0.0741%" height="15" fill="rgb(229,211,3)" fg:x="83380" fg:w="82"/><text x="75.5510%" y="735.50"></text></g><g><title>core::ptr::read (82 samples, 0.07%)</title><rect x="75.3010%" y="709" width="0.0741%" height="15" fill="rgb(216,140,21)" fg:x="83380" fg:w="82"/><text x="75.5510%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (148 samples, 0.13%)</title><rect x="75.2684%" y="757" width="0.1337%" height="15" fill="rgb(234,122,30)" fg:x="83344" fg:w="148"/><text x="75.5184%" y="767.50"></text></g><g><title>core::mem::drop (30 samples, 0.03%)</title><rect x="75.3750%" y="741" width="0.0271%" height="15" fill="rgb(236,25,46)" fg:x="83462" fg:w="30"/><text x="75.6250%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (30 samples, 0.03%)</title><rect x="75.3750%" y="725" width="0.0271%" height="15" fill="rgb(217,52,54)" fg:x="83462" fg:w="30"/><text x="75.6250%" y="735.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="75.4021%" y="757" width="0.0144%" height="15" fill="rgb(222,29,26)" fg:x="83492" fg:w="16"/><text x="75.6521%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (16 samples, 0.01%)</title><rect x="75.4021%" y="741" width="0.0144%" height="15" fill="rgb(216,177,29)" fg:x="83492" fg:w="16"/><text x="75.6521%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (15 samples, 0.01%)</title><rect x="75.4030%" y="725" width="0.0135%" height="15" fill="rgb(247,136,51)" fg:x="83493" fg:w="15"/><text x="75.6530%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="75.4030%" y="709" width="0.0135%" height="15" fill="rgb(231,47,47)" fg:x="83493" fg:w="15"/><text x="75.6530%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (15 samples, 0.01%)</title><rect x="75.4030%" y="693" width="0.0135%" height="15" fill="rgb(211,192,36)" fg:x="83493" fg:w="15"/><text x="75.6530%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (15 samples, 0.01%)</title><rect x="75.4030%" y="677" width="0.0135%" height="15" fill="rgb(229,156,32)" fg:x="83493" fg:w="15"/><text x="75.6530%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (15 samples, 0.01%)</title><rect x="75.4030%" y="661" width="0.0135%" height="15" fill="rgb(248,213,20)" fg:x="83493" fg:w="15"/><text x="75.6530%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (130 samples, 0.12%)</title><rect x="75.4166%" y="757" width="0.1174%" height="15" fill="rgb(217,64,7)" fg:x="83508" fg:w="130"/><text x="75.6666%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (126 samples, 0.11%)</title><rect x="75.4202%" y="741" width="0.1138%" height="15" fill="rgb(232,142,8)" fg:x="83512" fg:w="126"/><text x="75.6702%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.11%)</title><rect x="75.4202%" y="725" width="0.1138%" height="15" fill="rgb(224,92,44)" fg:x="83512" fg:w="126"/><text x="75.6702%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (118 samples, 0.11%)</title><rect x="75.4274%" y="709" width="0.1066%" height="15" fill="rgb(214,169,17)" fg:x="83520" fg:w="118"/><text x="75.6774%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (118 samples, 0.11%)</title><rect x="75.4274%" y="693" width="0.1066%" height="15" fill="rgb(210,59,37)" fg:x="83520" fg:w="118"/><text x="75.6774%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (114 samples, 0.10%)</title><rect x="75.4310%" y="677" width="0.1030%" height="15" fill="rgb(214,116,48)" fg:x="83524" fg:w="114"/><text x="75.6810%" y="687.50"></text></g><g><title>core::task::wake::Waker::will_wake (18 samples, 0.02%)</title><rect x="75.5349%" y="757" width="0.0163%" height="15" fill="rgb(244,191,6)" fg:x="83639" fg:w="18"/><text x="75.7849%" y="767.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="75.5349%" y="741" width="0.0163%" height="15" fill="rgb(241,50,52)" fg:x="83639" fg:w="18"/><text x="75.7849%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="75.5394%" y="725" width="0.0117%" height="15" fill="rgb(236,75,39)" fg:x="83644" fg:w="13"/><text x="75.7894%" y="735.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="75.5394%" y="709" width="0.0117%" height="15" fill="rgb(236,99,0)" fg:x="83644" fg:w="13"/><text x="75.7894%" y="719.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="75.5565%" y="725" width="0.0117%" height="15" fill="rgb(207,202,15)" fg:x="83663" fg:w="13"/><text x="75.8065%" y="735.50"></text></g><g><title>std::sync::poison::Flag::borrow (13 samples, 0.01%)</title><rect x="75.5565%" y="709" width="0.0117%" height="15" fill="rgb(233,207,14)" fg:x="83663" fg:w="13"/><text x="75.8065%" y="719.50"></text></g><g><title>event_listener::Inner::lock (331 samples, 0.30%)</title><rect x="75.5511%" y="757" width="0.2989%" height="15" fill="rgb(226,27,51)" fg:x="83657" fg:w="331"/><text x="75.8011%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (325 samples, 0.29%)</title><rect x="75.5565%" y="741" width="0.2935%" height="15" fill="rgb(206,104,42)" fg:x="83663" fg:w="325"/><text x="75.8065%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (312 samples, 0.28%)</title><rect x="75.5683%" y="725" width="0.2818%" height="15" fill="rgb(212,225,4)" fg:x="83676" fg:w="312"/><text x="75.8183%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (301 samples, 0.27%)</title><rect x="75.5782%" y="709" width="0.2718%" height="15" fill="rgb(233,96,42)" fg:x="83687" fg:w="301"/><text x="75.8282%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (301 samples, 0.27%)</title><rect x="75.5782%" y="693" width="0.2718%" height="15" fill="rgb(229,21,32)" fg:x="83687" fg:w="301"/><text x="75.8282%" y="703.50"></text></g><g><title>__lll_lock_wait (28 samples, 0.03%)</title><rect x="75.8248%" y="677" width="0.0253%" height="15" fill="rgb(226,216,24)" fg:x="83960" fg:w="28"/><text x="76.0748%" y="687.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (739 samples, 0.67%)</title><rect x="75.2043%" y="773" width="0.6674%" height="15" fill="rgb(221,163,17)" fg:x="83273" fg:w="739"/><text x="75.4543%" y="783.50"></text></g><g><title>event_listener::List::remove (24 samples, 0.02%)</title><rect x="75.8500%" y="757" width="0.0217%" height="15" fill="rgb(216,216,42)" fg:x="83988" fg:w="24"/><text x="76.1000%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (14 samples, 0.01%)</title><rect x="75.8591%" y="741" width="0.0126%" height="15" fill="rgb(240,118,7)" fg:x="83998" fg:w="14"/><text x="76.1091%" y="751.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="75.8591%" y="725" width="0.0126%" height="15" fill="rgb(221,67,37)" fg:x="83998" fg:w="14"/><text x="76.1091%" y="735.50"></text></g><g><title>core::ptr::read (14 samples, 0.01%)</title><rect x="75.8591%" y="709" width="0.0126%" height="15" fill="rgb(241,32,44)" fg:x="83998" fg:w="14"/><text x="76.1091%" y="719.50"></text></g><g><title>concurrent_queue::full_fence (19 samples, 0.02%)</title><rect x="75.9702%" y="725" width="0.0172%" height="15" fill="rgb(235,204,43)" fg:x="84121" fg:w="19"/><text x="76.2202%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (19 samples, 0.02%)</title><rect x="75.9702%" y="709" width="0.0172%" height="15" fill="rgb(213,116,10)" fg:x="84121" fg:w="19"/><text x="76.2202%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.02%)</title><rect x="75.9702%" y="693" width="0.0172%" height="15" fill="rgb(239,15,48)" fg:x="84121" fg:w="19"/><text x="76.2202%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="75.9702%" y="677" width="0.0172%" height="15" fill="rgb(207,123,36)" fg:x="84121" fg:w="19"/><text x="76.2202%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (63 samples, 0.06%)</title><rect x="75.9882%" y="725" width="0.0569%" height="15" fill="rgb(209,103,30)" fg:x="84141" fg:w="63"/><text x="76.2382%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (63 samples, 0.06%)</title><rect x="75.9882%" y="709" width="0.0569%" height="15" fill="rgb(238,100,19)" fg:x="84141" fg:w="63"/><text x="76.2382%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (252 samples, 0.23%)</title><rect x="76.0451%" y="725" width="0.2276%" height="15" fill="rgb(244,30,14)" fg:x="84204" fg:w="252"/><text x="76.2951%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (252 samples, 0.23%)</title><rect x="76.0451%" y="709" width="0.2276%" height="15" fill="rgb(249,174,6)" fg:x="84204" fg:w="252"/><text x="76.2951%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (436 samples, 0.39%)</title><rect x="75.8799%" y="757" width="0.3938%" height="15" fill="rgb(235,213,41)" fg:x="84021" fg:w="436"/><text x="76.1299%" y="767.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (416 samples, 0.38%)</title><rect x="75.8979%" y="741" width="0.3757%" height="15" fill="rgb(213,118,6)" fg:x="84041" fg:w="416"/><text x="76.1479%" y="751.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (891 samples, 0.80%)</title><rect x="75.8717%" y="773" width="0.8047%" height="15" fill="rgb(235,44,51)" fg:x="84012" fg:w="891"/><text x="76.1217%" y="783.50"></text></g><g><title>event_listener::Event::notify (446 samples, 0.40%)</title><rect x="76.2736%" y="757" width="0.4028%" height="15" fill="rgb(217,9,53)" fg:x="84457" fg:w="446"/><text x="76.5236%" y="767.50"></text></g><g><title>event_listener::full_fence (441 samples, 0.40%)</title><rect x="76.2781%" y="741" width="0.3983%" height="15" fill="rgb(237,172,34)" fg:x="84462" fg:w="441"/><text x="76.5281%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (441 samples, 0.40%)</title><rect x="76.2781%" y="725" width="0.3983%" height="15" fill="rgb(206,206,11)" fg:x="84462" fg:w="441"/><text x="76.5281%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (441 samples, 0.40%)</title><rect x="76.2781%" y="709" width="0.3983%" height="15" fill="rgb(214,149,29)" fg:x="84462" fg:w="441"/><text x="76.5281%" y="719.50"></text></g><g><title>event_listener::Inner::lock (22 samples, 0.02%)</title><rect x="76.6990%" y="725" width="0.0199%" height="15" fill="rgb(208,123,3)" fg:x="84928" fg:w="22"/><text x="76.9490%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (22 samples, 0.02%)</title><rect x="76.6990%" y="709" width="0.0199%" height="15" fill="rgb(229,126,4)" fg:x="84928" fg:w="22"/><text x="76.9490%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.02%)</title><rect x="76.7008%" y="693" width="0.0181%" height="15" fill="rgb(222,92,36)" fg:x="84930" fg:w="20"/><text x="76.9508%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (17 samples, 0.02%)</title><rect x="76.7035%" y="677" width="0.0154%" height="15" fill="rgb(216,39,41)" fg:x="84933" fg:w="17"/><text x="76.9535%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (17 samples, 0.02%)</title><rect x="76.7035%" y="661" width="0.0154%" height="15" fill="rgb(253,127,28)" fg:x="84933" fg:w="17"/><text x="76.9535%" y="671.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="76.6899%" y="741" width="0.0325%" height="15" fill="rgb(249,152,51)" fg:x="84918" fg:w="36"/><text x="76.9399%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (54 samples, 0.05%)</title><rect x="76.6800%" y="773" width="0.0488%" height="15" fill="rgb(209,123,42)" fg:x="84907" fg:w="54"/><text x="76.9300%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (43 samples, 0.04%)</title><rect x="76.6899%" y="757" width="0.0388%" height="15" fill="rgb(241,118,22)" fg:x="84918" fg:w="43"/><text x="76.9399%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 0.03%)</title><rect x="76.7297%" y="757" width="0.0262%" height="15" fill="rgb(208,25,7)" fg:x="84962" fg:w="29"/><text x="76.9797%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (29 samples, 0.03%)</title><rect x="76.7297%" y="741" width="0.0262%" height="15" fill="rgb(243,144,39)" fg:x="84962" fg:w="29"/><text x="76.9797%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (29 samples, 0.03%)</title><rect x="76.7297%" y="725" width="0.0262%" height="15" fill="rgb(250,50,5)" fg:x="84962" fg:w="29"/><text x="76.9797%" y="735.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.02%)</title><rect x="76.7658%" y="757" width="0.0154%" height="15" fill="rgb(207,67,11)" fg:x="85002" fg:w="17"/><text x="77.0158%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.02%)</title><rect x="76.7658%" y="741" width="0.0154%" height="15" fill="rgb(245,204,40)" fg:x="85002" fg:w="17"/><text x="77.0158%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (17 samples, 0.02%)</title><rect x="76.7658%" y="725" width="0.0154%" height="15" fill="rgb(238,228,24)" fg:x="85002" fg:w="17"/><text x="77.0158%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (17 samples, 0.02%)</title><rect x="76.7658%" y="709" width="0.0154%" height="15" fill="rgb(217,116,22)" fg:x="85002" fg:w="17"/><text x="77.0158%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (17 samples, 0.02%)</title><rect x="76.7658%" y="693" width="0.0154%" height="15" fill="rgb(234,98,12)" fg:x="85002" fg:w="17"/><text x="77.0158%" y="703.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,795 samples, 1.62%)</title><rect x="75.1709%" y="789" width="1.6211%" height="15" fill="rgb(242,170,50)" fg:x="83236" fg:w="1795"/><text x="75.4209%" y="799.50"></text></g><g><title>event_listener::Event::listen (70 samples, 0.06%)</title><rect x="76.7288%" y="773" width="0.0632%" height="15" fill="rgb(235,7,5)" fg:x="84961" fg:w="70"/><text x="76.9788%" y="783.50"></text></g><g><title>event_listener::full_fence (12 samples, 0.01%)</title><rect x="76.7812%" y="757" width="0.0108%" height="15" fill="rgb(241,114,28)" fg:x="85019" fg:w="12"/><text x="77.0312%" y="767.50"></text></g><g><title>[libc-2.31.so] (76 samples, 0.07%)</title><rect x="76.7947%" y="773" width="0.0686%" height="15" fill="rgb(246,112,42)" fg:x="85034" fg:w="76"/><text x="77.0447%" y="783.50"></text></g><g><title>[libc-2.31.so] (506 samples, 0.46%)</title><rect x="76.8669%" y="741" width="0.4570%" height="15" fill="rgb(248,228,14)" fg:x="85114" fg:w="506"/><text x="77.1169%" y="751.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.05%)</title><rect x="77.3266%" y="661" width="0.0470%" height="15" fill="rgb(208,133,18)" fg:x="85623" fg:w="52"/><text x="77.5766%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,597 samples, 2.35%)</title><rect x="75.1384%" y="821" width="2.3454%" height="15" fill="rgb(207,35,49)" fg:x="83200" fg:w="2597"/><text x="75.3884%" y="831.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,586 samples, 2.34%)</title><rect x="75.1483%" y="805" width="2.3354%" height="15" fill="rgb(205,68,36)" fg:x="83211" fg:w="2586"/><text x="75.3983%" y="815.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (766 samples, 0.69%)</title><rect x="76.7920%" y="789" width="0.6918%" height="15" fill="rgb(245,62,40)" fg:x="85031" fg:w="766"/><text x="77.0420%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (687 samples, 0.62%)</title><rect x="76.8633%" y="773" width="0.6204%" height="15" fill="rgb(228,27,24)" fg:x="85110" fg:w="687"/><text x="77.1133%" y="783.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (687 samples, 0.62%)</title><rect x="76.8633%" y="757" width="0.6204%" height="15" fill="rgb(253,19,12)" fg:x="85110" fg:w="687"/><text x="77.1133%" y="767.50"></text></g><g><title>alloc::alloc::box_free (177 samples, 0.16%)</title><rect x="77.3239%" y="741" width="0.1598%" height="15" fill="rgb(232,28,20)" fg:x="85620" fg:w="177"/><text x="77.5739%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (177 samples, 0.16%)</title><rect x="77.3239%" y="725" width="0.1598%" height="15" fill="rgb(218,35,51)" fg:x="85620" fg:w="177"/><text x="77.5739%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (177 samples, 0.16%)</title><rect x="77.3239%" y="709" width="0.1598%" height="15" fill="rgb(212,90,40)" fg:x="85620" fg:w="177"/><text x="77.5739%" y="719.50"></text></g><g><title>__rg_dealloc (177 samples, 0.16%)</title><rect x="77.3239%" y="693" width="0.1598%" height="15" fill="rgb(220,172,12)" fg:x="85620" fg:w="177"/><text x="77.5739%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (177 samples, 0.16%)</title><rect x="77.3239%" y="677" width="0.1598%" height="15" fill="rgb(226,159,20)" fg:x="85620" fg:w="177"/><text x="77.5739%" y="687.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (122 samples, 0.11%)</title><rect x="77.3736%" y="661" width="0.1102%" height="15" fill="rgb(234,205,16)" fg:x="85675" fg:w="122"/><text x="77.6236%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,115 samples, 2.81%)</title><rect x="75.1194%" y="885" width="2.8132%" height="15" fill="rgb(207,9,39)" fg:x="83179" fg:w="3115"/><text x="75.3694%" y="895.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,112 samples, 2.81%)</title><rect x="75.1221%" y="869" width="2.8105%" height="15" fill="rgb(249,143,15)" fg:x="83182" fg:w="3112"/><text x="75.3721%" y="879.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,112 samples, 2.81%)</title><rect x="75.1221%" y="853" width="2.8105%" height="15" fill="rgb(253,133,29)" fg:x="83182" fg:w="3112"/><text x="75.3721%" y="863.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,112 samples, 2.81%)</title><rect x="75.1221%" y="837" width="2.8105%" height="15" fill="rgb(221,187,0)" fg:x="83182" fg:w="3112"/><text x="75.3721%" y="847.50">&lt;t..</text></g><g><title>[libc-2.31.so] (497 samples, 0.45%)</title><rect x="77.4838%" y="821" width="0.4488%" height="15" fill="rgb(205,204,26)" fg:x="85797" fg:w="497"/><text x="77.7338%" y="831.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (13 samples, 0.01%)</title><rect x="77.9525%" y="741" width="0.0117%" height="15" fill="rgb(224,68,54)" fg:x="86316" fg:w="13"/><text x="78.2025%" y="751.50"></text></g><g><title>value_trait::generator::extend_from_slice (13 samples, 0.01%)</title><rect x="77.9525%" y="725" width="0.0117%" height="15" fill="rgb(209,67,4)" fg:x="86316" fg:w="13"/><text x="78.2025%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (71 samples, 0.06%)</title><rect x="77.9335%" y="805" width="0.0641%" height="15" fill="rgb(228,229,18)" fg:x="86295" fg:w="71"/><text x="78.1835%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (71 samples, 0.06%)</title><rect x="77.9335%" y="789" width="0.0641%" height="15" fill="rgb(231,89,13)" fg:x="86295" fg:w="71"/><text x="78.1835%" y="799.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (71 samples, 0.06%)</title><rect x="77.9335%" y="773" width="0.0641%" height="15" fill="rgb(210,182,18)" fg:x="86295" fg:w="71"/><text x="78.1835%" y="783.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (71 samples, 0.06%)</title><rect x="77.9335%" y="757" width="0.0641%" height="15" fill="rgb(240,105,2)" fg:x="86295" fg:w="71"/><text x="78.1835%" y="767.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (37 samples, 0.03%)</title><rect x="77.9642%" y="741" width="0.0334%" height="15" fill="rgb(207,170,50)" fg:x="86329" fg:w="37"/><text x="78.2142%" y="751.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (29 samples, 0.03%)</title><rect x="77.9714%" y="725" width="0.0262%" height="15" fill="rgb(232,133,24)" fg:x="86337" fg:w="29"/><text x="78.2214%" y="735.50"></text></g><g><title>&lt;tremor_script::NO_CONSTS as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="78.1123%" y="709" width="0.0108%" height="15" fill="rgb(235,166,27)" fg:x="86493" fg:w="12"/><text x="78.3623%" y="719.50"></text></g><g><title>&lt;tremor_script::NO_CONSTS as core::ops::deref::Deref&gt;::deref::__stability (12 samples, 0.01%)</title><rect x="78.1123%" y="693" width="0.0108%" height="15" fill="rgb(209,19,13)" fg:x="86493" fg:w="12"/><text x="78.3623%" y="703.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (12 samples, 0.01%)</title><rect x="78.1123%" y="677" width="0.0108%" height="15" fill="rgb(226,79,39)" fg:x="86493" fg:w="12"/><text x="78.3623%" y="687.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (15 samples, 0.01%)</title><rect x="78.1123%" y="725" width="0.0135%" height="15" fill="rgb(222,163,10)" fg:x="86493" fg:w="15"/><text x="78.3623%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 0.03%)</title><rect x="78.2595%" y="677" width="0.0253%" height="15" fill="rgb(214,44,19)" fg:x="86656" fg:w="28"/><text x="78.5095%" y="687.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (170 samples, 0.15%)</title><rect x="78.1430%" y="725" width="0.1535%" height="15" fill="rgb(210,217,13)" fg:x="86527" fg:w="170"/><text x="78.3930%" y="735.50"></text></g><g><title>alloc::vec::from_elem (170 samples, 0.15%)</title><rect x="78.1430%" y="709" width="0.1535%" height="15" fill="rgb(237,61,54)" fg:x="86527" fg:w="170"/><text x="78.3930%" y="719.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (167 samples, 0.15%)</title><rect x="78.1457%" y="693" width="0.1508%" height="15" fill="rgb(226,184,24)" fg:x="86530" fg:w="167"/><text x="78.3957%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="78.2848%" y="677" width="0.0117%" height="15" fill="rgb(223,226,4)" fg:x="86684" fg:w="13"/><text x="78.5348%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="78.4682%" y="485" width="0.0144%" height="15" fill="rgb(210,26,41)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="78.4682%" y="469" width="0.0144%" height="15" fill="rgb(220,221,6)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.01%)</title><rect x="78.4682%" y="453" width="0.0144%" height="15" fill="rgb(225,89,49)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="78.4682%" y="437" width="0.0144%" height="15" fill="rgb(218,70,45)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="78.4682%" y="421" width="0.0144%" height="15" fill="rgb(238,166,21)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="431.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="78.4682%" y="405" width="0.0144%" height="15" fill="rgb(224,141,44)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="415.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="78.4682%" y="389" width="0.0144%" height="15" fill="rgb(230,12,49)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="78.4682%" y="373" width="0.0144%" height="15" fill="rgb(212,174,12)" fg:x="86887" fg:w="16"/><text x="78.7182%" y="383.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="78.4709%" y="357" width="0.0117%" height="15" fill="rgb(246,67,9)" fg:x="86890" fg:w="13"/><text x="78.7209%" y="367.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="78.4627%" y="629" width="0.0217%" height="15" fill="rgb(239,35,23)" fg:x="86881" fg:w="24"/><text x="78.7127%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="78.4663%" y="613" width="0.0181%" height="15" fill="rgb(211,167,0)" fg:x="86885" fg:w="20"/><text x="78.7163%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="78.4672%" y="597" width="0.0172%" height="15" fill="rgb(225,119,45)" fg:x="86886" fg:w="19"/><text x="78.7172%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (19 samples, 0.02%)</title><rect x="78.4672%" y="581" width="0.0172%" height="15" fill="rgb(210,162,6)" fg:x="86886" fg:w="19"/><text x="78.7172%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (19 samples, 0.02%)</title><rect x="78.4672%" y="565" width="0.0172%" height="15" fill="rgb(208,118,35)" fg:x="86886" fg:w="19"/><text x="78.7172%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.02%)</title><rect x="78.4682%" y="549" width="0.0163%" height="15" fill="rgb(239,4,53)" fg:x="86887" fg:w="18"/><text x="78.7182%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.02%)</title><rect x="78.4682%" y="533" width="0.0163%" height="15" fill="rgb(213,130,21)" fg:x="86887" fg:w="18"/><text x="78.7182%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.02%)</title><rect x="78.4682%" y="517" width="0.0163%" height="15" fill="rgb(235,148,0)" fg:x="86887" fg:w="18"/><text x="78.7182%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.02%)</title><rect x="78.4682%" y="501" width="0.0163%" height="15" fill="rgb(244,224,18)" fg:x="86887" fg:w="18"/><text x="78.7182%" y="511.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (29 samples, 0.03%)</title><rect x="78.4609%" y="661" width="0.0262%" height="15" fill="rgb(211,214,4)" fg:x="86879" fg:w="29"/><text x="78.7109%" y="671.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (29 samples, 0.03%)</title><rect x="78.4609%" y="645" width="0.0262%" height="15" fill="rgb(206,119,25)" fg:x="86879" fg:w="29"/><text x="78.7109%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (27 samples, 0.02%)</title><rect x="78.4871%" y="661" width="0.0244%" height="15" fill="rgb(243,93,47)" fg:x="86908" fg:w="27"/><text x="78.7371%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (141 samples, 0.13%)</title><rect x="78.4013%" y="693" width="0.1273%" height="15" fill="rgb(224,194,6)" fg:x="86813" fg:w="141"/><text x="78.6513%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (119 samples, 0.11%)</title><rect x="78.4212%" y="677" width="0.1075%" height="15" fill="rgb(243,229,6)" fg:x="86835" fg:w="119"/><text x="78.6712%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (19 samples, 0.02%)</title><rect x="78.5115%" y="661" width="0.0172%" height="15" fill="rgb(207,23,50)" fg:x="86935" fg:w="19"/><text x="78.7615%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (16 samples, 0.01%)</title><rect x="78.5549%" y="661" width="0.0144%" height="15" fill="rgb(253,192,32)" fg:x="86983" fg:w="16"/><text x="78.8049%" y="671.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (87 samples, 0.08%)</title><rect x="78.5892%" y="533" width="0.0786%" height="15" fill="rgb(213,21,6)" fg:x="87021" fg:w="87"/><text x="78.8392%" y="543.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (87 samples, 0.08%)</title><rect x="78.5892%" y="517" width="0.0786%" height="15" fill="rgb(243,151,13)" fg:x="87021" fg:w="87"/><text x="78.8392%" y="527.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="78.6524%" y="501" width="0.0154%" height="15" fill="rgb(233,165,41)" fg:x="87091" fg:w="17"/><text x="78.9024%" y="511.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (103 samples, 0.09%)</title><rect x="78.5783%" y="661" width="0.0930%" height="15" fill="rgb(246,176,45)" fg:x="87009" fg:w="103"/><text x="78.8283%" y="671.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (103 samples, 0.09%)</title><rect x="78.5783%" y="645" width="0.0930%" height="15" fill="rgb(217,170,52)" fg:x="87009" fg:w="103"/><text x="78.8283%" y="655.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (100 samples, 0.09%)</title><rect x="78.5810%" y="629" width="0.0903%" height="15" fill="rgb(214,203,54)" fg:x="87012" fg:w="100"/><text x="78.8310%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (99 samples, 0.09%)</title><rect x="78.5819%" y="613" width="0.0894%" height="15" fill="rgb(248,215,49)" fg:x="87013" fg:w="99"/><text x="78.8319%" y="623.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (99 samples, 0.09%)</title><rect x="78.5819%" y="597" width="0.0894%" height="15" fill="rgb(208,46,10)" fg:x="87013" fg:w="99"/><text x="78.8319%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (95 samples, 0.09%)</title><rect x="78.5856%" y="581" width="0.0858%" height="15" fill="rgb(254,5,31)" fg:x="87017" fg:w="95"/><text x="78.8356%" y="591.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (95 samples, 0.09%)</title><rect x="78.5856%" y="565" width="0.0858%" height="15" fill="rgb(222,104,33)" fg:x="87017" fg:w="95"/><text x="78.8356%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (91 samples, 0.08%)</title><rect x="78.5892%" y="549" width="0.0822%" height="15" fill="rgb(248,49,16)" fg:x="87021" fg:w="91"/><text x="78.8392%" y="559.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (178 samples, 0.16%)</title><rect x="78.5287%" y="693" width="0.1608%" height="15" fill="rgb(232,198,41)" fg:x="86954" fg:w="178"/><text x="78.7787%" y="703.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (167 samples, 0.15%)</title><rect x="78.5386%" y="677" width="0.1508%" height="15" fill="rgb(214,125,3)" fg:x="86965" fg:w="167"/><text x="78.7886%" y="687.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (20 samples, 0.02%)</title><rect x="78.6714%" y="661" width="0.0181%" height="15" fill="rgb(229,220,28)" fg:x="87112" fg:w="20"/><text x="78.9214%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (397 samples, 0.36%)</title><rect x="78.3715%" y="709" width="0.3585%" height="15" fill="rgb(222,64,37)" fg:x="86780" fg:w="397"/><text x="78.6215%" y="719.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (45 samples, 0.04%)</title><rect x="78.6894%" y="693" width="0.0406%" height="15" fill="rgb(249,184,13)" fg:x="87132" fg:w="45"/><text x="78.9394%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="78.9360%" y="693" width="0.0172%" height="15" fill="rgb(252,176,6)" fg:x="87405" fg:w="19"/><text x="79.1860%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (32 samples, 0.03%)</title><rect x="78.9585%" y="693" width="0.0289%" height="15" fill="rgb(228,153,7)" fg:x="87430" fg:w="32"/><text x="79.2085%" y="703.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (21 samples, 0.02%)</title><rect x="78.9874%" y="693" width="0.0190%" height="15" fill="rgb(242,193,5)" fg:x="87462" fg:w="21"/><text x="79.2374%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (21 samples, 0.02%)</title><rect x="78.9874%" y="677" width="0.0190%" height="15" fill="rgb(232,140,9)" fg:x="87462" fg:w="21"/><text x="79.2374%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="79.2900%" y="677" width="0.0135%" height="15" fill="rgb(213,222,16)" fg:x="87797" fg:w="15"/><text x="79.5400%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (109 samples, 0.10%)</title><rect x="79.9456%" y="485" width="0.0984%" height="15" fill="rgb(222,75,50)" fg:x="88523" fg:w="109"/><text x="80.1956%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (109 samples, 0.10%)</title><rect x="79.9456%" y="469" width="0.0984%" height="15" fill="rgb(205,180,2)" fg:x="88523" fg:w="109"/><text x="80.1956%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (109 samples, 0.10%)</title><rect x="79.9456%" y="453" width="0.0984%" height="15" fill="rgb(216,34,7)" fg:x="88523" fg:w="109"/><text x="80.1956%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (108 samples, 0.10%)</title><rect x="79.9465%" y="437" width="0.0975%" height="15" fill="rgb(253,16,32)" fg:x="88524" fg:w="108"/><text x="80.1965%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (108 samples, 0.10%)</title><rect x="79.9465%" y="421" width="0.0975%" height="15" fill="rgb(208,97,28)" fg:x="88524" fg:w="108"/><text x="80.1965%" y="431.50"></text></g><g><title>alloc::alloc::alloc (108 samples, 0.10%)</title><rect x="79.9465%" y="405" width="0.0975%" height="15" fill="rgb(225,92,11)" fg:x="88524" fg:w="108"/><text x="80.1965%" y="415.50"></text></g><g><title>__rg_alloc (108 samples, 0.10%)</title><rect x="79.9465%" y="389" width="0.0975%" height="15" fill="rgb(243,38,12)" fg:x="88524" fg:w="108"/><text x="80.1965%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (108 samples, 0.10%)</title><rect x="79.9465%" y="373" width="0.0975%" height="15" fill="rgb(208,139,16)" fg:x="88524" fg:w="108"/><text x="80.1965%" y="383.50"></text></g><g><title>sn_rust_alloc (97 samples, 0.09%)</title><rect x="79.9565%" y="357" width="0.0876%" height="15" fill="rgb(227,24,9)" fg:x="88535" fg:w="97"/><text x="80.2065%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (139 samples, 0.13%)</title><rect x="79.9366%" y="613" width="0.1255%" height="15" fill="rgb(206,62,11)" fg:x="88513" fg:w="139"/><text x="80.1866%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (130 samples, 0.12%)</title><rect x="79.9447%" y="597" width="0.1174%" height="15" fill="rgb(228,134,27)" fg:x="88522" fg:w="130"/><text x="80.1947%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (130 samples, 0.12%)</title><rect x="79.9447%" y="581" width="0.1174%" height="15" fill="rgb(205,55,33)" fg:x="88522" fg:w="130"/><text x="80.1947%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (130 samples, 0.12%)</title><rect x="79.9447%" y="565" width="0.1174%" height="15" fill="rgb(243,75,43)" fg:x="88522" fg:w="130"/><text x="80.1947%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (129 samples, 0.12%)</title><rect x="79.9456%" y="549" width="0.1165%" height="15" fill="rgb(223,27,42)" fg:x="88523" fg:w="129"/><text x="80.1956%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (129 samples, 0.12%)</title><rect x="79.9456%" y="533" width="0.1165%" height="15" fill="rgb(232,189,33)" fg:x="88523" fg:w="129"/><text x="80.1956%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (129 samples, 0.12%)</title><rect x="79.9456%" y="517" width="0.1165%" height="15" fill="rgb(210,9,39)" fg:x="88523" fg:w="129"/><text x="80.1956%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (129 samples, 0.12%)</title><rect x="79.9456%" y="501" width="0.1165%" height="15" fill="rgb(242,85,26)" fg:x="88523" fg:w="129"/><text x="80.1956%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.02%)</title><rect x="80.0441%" y="485" width="0.0181%" height="15" fill="rgb(248,44,4)" fg:x="88632" fg:w="20"/><text x="80.2941%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="80.0441%" y="469" width="0.0181%" height="15" fill="rgb(250,96,46)" fg:x="88632" fg:w="20"/><text x="80.2941%" y="479.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="80.0459%" y="453" width="0.0163%" height="15" fill="rgb(229,116,26)" fg:x="88634" fg:w="18"/><text x="80.2959%" y="463.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (188 samples, 0.17%)</title><rect x="79.8933%" y="629" width="0.1698%" height="15" fill="rgb(246,94,34)" fg:x="88465" fg:w="188"/><text x="80.1433%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (12 samples, 0.01%)</title><rect x="80.0630%" y="629" width="0.0108%" height="15" fill="rgb(251,73,21)" fg:x="88653" fg:w="12"/><text x="80.3130%" y="639.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (213 samples, 0.19%)</title><rect x="79.8878%" y="661" width="0.1924%" height="15" fill="rgb(254,121,25)" fg:x="88459" fg:w="213"/><text x="80.1378%" y="671.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (212 samples, 0.19%)</title><rect x="79.8887%" y="645" width="0.1915%" height="15" fill="rgb(215,161,49)" fg:x="88460" fg:w="212"/><text x="80.1387%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (292 samples, 0.26%)</title><rect x="80.0829%" y="661" width="0.2637%" height="15" fill="rgb(221,43,13)" fg:x="88675" fg:w="292"/><text x="80.3329%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (12 samples, 0.01%)</title><rect x="80.4821%" y="645" width="0.0108%" height="15" fill="rgb(249,5,37)" fg:x="89117" fg:w="12"/><text x="80.7321%" y="655.50"></text></g><g><title>tremor_script::ast::Path::segments (37 samples, 0.03%)</title><rect x="80.4929%" y="645" width="0.0334%" height="15" fill="rgb(226,25,44)" fg:x="89129" fg:w="37"/><text x="80.7429%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.03%)</title><rect x="80.7900%" y="629" width="0.0280%" height="15" fill="rgb(238,189,16)" fg:x="89458" fg:w="31"/><text x="81.0400%" y="639.50"></text></g><g><title>sn_rust_dealloc (264 samples, 0.24%)</title><rect x="80.9083%" y="389" width="0.2384%" height="15" fill="rgb(251,186,8)" fg:x="89589" fg:w="264"/><text x="81.1583%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (398 samples, 0.36%)</title><rect x="80.9011%" y="453" width="0.3594%" height="15" fill="rgb(254,34,31)" fg:x="89581" fg:w="398"/><text x="81.1511%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (398 samples, 0.36%)</title><rect x="80.9011%" y="437" width="0.3594%" height="15" fill="rgb(225,215,27)" fg:x="89581" fg:w="398"/><text x="81.1511%" y="447.50"></text></g><g><title>__rg_dealloc (398 samples, 0.36%)</title><rect x="80.9011%" y="421" width="0.3594%" height="15" fill="rgb(221,192,48)" fg:x="89581" fg:w="398"/><text x="81.1511%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (398 samples, 0.36%)</title><rect x="80.9011%" y="405" width="0.3594%" height="15" fill="rgb(219,137,20)" fg:x="89581" fg:w="398"/><text x="81.1511%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (126 samples, 0.11%)</title><rect x="81.1468%" y="389" width="0.1138%" height="15" fill="rgb(219,84,11)" fg:x="89853" fg:w="126"/><text x="81.3968%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (427 samples, 0.39%)</title><rect x="80.8894%" y="485" width="0.3856%" height="15" fill="rgb(224,10,23)" fg:x="89568" fg:w="427"/><text x="81.1394%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (427 samples, 0.39%)</title><rect x="80.8894%" y="469" width="0.3856%" height="15" fill="rgb(248,22,39)" fg:x="89568" fg:w="427"/><text x="81.1394%" y="479.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (13 samples, 0.01%)</title><rect x="81.2633%" y="453" width="0.0117%" height="15" fill="rgb(212,154,20)" fg:x="89982" fg:w="13"/><text x="81.5133%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (444 samples, 0.40%)</title><rect x="80.8822%" y="549" width="0.4010%" height="15" fill="rgb(236,199,50)" fg:x="89560" fg:w="444"/><text x="81.1322%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (444 samples, 0.40%)</title><rect x="80.8822%" y="533" width="0.4010%" height="15" fill="rgb(211,9,17)" fg:x="89560" fg:w="444"/><text x="81.1322%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (444 samples, 0.40%)</title><rect x="80.8822%" y="517" width="0.4010%" height="15" fill="rgb(243,216,36)" fg:x="89560" fg:w="444"/><text x="81.1322%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (444 samples, 0.40%)</title><rect x="80.8822%" y="501" width="0.4010%" height="15" fill="rgb(250,2,10)" fg:x="89560" fg:w="444"/><text x="81.1322%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (468 samples, 0.42%)</title><rect x="80.8713%" y="565" width="0.4227%" height="15" fill="rgb(226,50,48)" fg:x="89548" fg:w="468"/><text x="81.1213%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="81.2831%" y="549" width="0.0108%" height="15" fill="rgb(243,81,16)" fg:x="90004" fg:w="12"/><text x="81.5331%" y="559.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="81.2831%" y="533" width="0.0108%" height="15" fill="rgb(250,14,2)" fg:x="90004" fg:w="12"/><text x="81.5331%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="81.2831%" y="517" width="0.0108%" height="15" fill="rgb(233,135,29)" fg:x="90004" fg:w="12"/><text x="81.5331%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="81.2831%" y="501" width="0.0108%" height="15" fill="rgb(224,64,43)" fg:x="90004" fg:w="12"/><text x="81.5331%" y="511.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="81.2831%" y="485" width="0.0108%" height="15" fill="rgb(238,84,13)" fg:x="90004" fg:w="12"/><text x="81.5331%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="81.2831%" y="469" width="0.0108%" height="15" fill="rgb(253,48,26)" fg:x="90004" fg:w="12"/><text x="81.5331%" y="479.50"></text></g><g><title>sn_rust_dealloc (84 samples, 0.08%)</title><rect x="81.2940%" y="565" width="0.0759%" height="15" fill="rgb(205,223,31)" fg:x="90016" fg:w="84"/><text x="81.5440%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (619 samples, 0.56%)</title><rect x="80.8180%" y="629" width="0.5590%" height="15" fill="rgb(221,41,32)" fg:x="89489" fg:w="619"/><text x="81.0680%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (592 samples, 0.53%)</title><rect x="80.8424%" y="613" width="0.5346%" height="15" fill="rgb(213,158,31)" fg:x="89516" fg:w="592"/><text x="81.0924%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (592 samples, 0.53%)</title><rect x="80.8424%" y="597" width="0.5346%" height="15" fill="rgb(245,126,43)" fg:x="89516" fg:w="592"/><text x="81.0924%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (592 samples, 0.53%)</title><rect x="80.8424%" y="581" width="0.5346%" height="15" fill="rgb(227,7,22)" fg:x="89516" fg:w="592"/><text x="81.0924%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (115 samples, 0.10%)</title><rect x="81.4592%" y="405" width="0.1039%" height="15" fill="rgb(252,90,44)" fg:x="90199" fg:w="115"/><text x="81.7092%" y="415.50"></text></g><g><title>hashbrown::raw::inner::h2 (13 samples, 0.01%)</title><rect x="81.5631%" y="405" width="0.0117%" height="15" fill="rgb(253,91,0)" fg:x="90314" fg:w="13"/><text x="81.8131%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (30 samples, 0.03%)</title><rect x="81.5748%" y="405" width="0.0271%" height="15" fill="rgb(252,175,49)" fg:x="90327" fg:w="30"/><text x="81.8248%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (30 samples, 0.03%)</title><rect x="81.5748%" y="389" width="0.0271%" height="15" fill="rgb(246,150,1)" fg:x="90327" fg:w="30"/><text x="81.8248%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.03%)</title><rect x="81.5748%" y="373" width="0.0271%" height="15" fill="rgb(241,192,25)" fg:x="90327" fg:w="30"/><text x="81.8248%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (201 samples, 0.18%)</title><rect x="81.4439%" y="501" width="0.1815%" height="15" fill="rgb(239,187,11)" fg:x="90182" fg:w="201"/><text x="81.6939%" y="511.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (201 samples, 0.18%)</title><rect x="81.4439%" y="485" width="0.1815%" height="15" fill="rgb(218,202,51)" fg:x="90182" fg:w="201"/><text x="81.6939%" y="495.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (201 samples, 0.18%)</title><rect x="81.4439%" y="469" width="0.1815%" height="15" fill="rgb(225,176,8)" fg:x="90182" fg:w="201"/><text x="81.6939%" y="479.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (201 samples, 0.18%)</title><rect x="81.4439%" y="453" width="0.1815%" height="15" fill="rgb(219,122,41)" fg:x="90182" fg:w="201"/><text x="81.6939%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (201 samples, 0.18%)</title><rect x="81.4439%" y="437" width="0.1815%" height="15" fill="rgb(248,140,20)" fg:x="90182" fg:w="201"/><text x="81.6939%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (201 samples, 0.18%)</title><rect x="81.4439%" y="421" width="0.1815%" height="15" fill="rgb(245,41,37)" fg:x="90182" fg:w="201"/><text x="81.6939%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (16 samples, 0.01%)</title><rect x="81.6110%" y="405" width="0.0144%" height="15" fill="rgb(235,82,39)" fg:x="90367" fg:w="16"/><text x="81.8610%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="81.6110%" y="389" width="0.0144%" height="15" fill="rgb(230,108,42)" fg:x="90367" fg:w="16"/><text x="81.8610%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="81.6110%" y="373" width="0.0144%" height="15" fill="rgb(215,150,50)" fg:x="90367" fg:w="16"/><text x="81.8610%" y="383.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (275 samples, 0.25%)</title><rect x="81.3969%" y="597" width="0.2484%" height="15" fill="rgb(233,212,5)" fg:x="90130" fg:w="275"/><text x="81.6469%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (256 samples, 0.23%)</title><rect x="81.4141%" y="581" width="0.2312%" height="15" fill="rgb(245,80,22)" fg:x="90149" fg:w="256"/><text x="81.6641%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (236 samples, 0.21%)</title><rect x="81.4321%" y="565" width="0.2131%" height="15" fill="rgb(238,129,16)" fg:x="90169" fg:w="236"/><text x="81.6821%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (227 samples, 0.21%)</title><rect x="81.4403%" y="549" width="0.2050%" height="15" fill="rgb(240,19,0)" fg:x="90178" fg:w="227"/><text x="81.6903%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (227 samples, 0.21%)</title><rect x="81.4403%" y="533" width="0.2050%" height="15" fill="rgb(232,42,35)" fg:x="90178" fg:w="227"/><text x="81.6903%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (223 samples, 0.20%)</title><rect x="81.4439%" y="517" width="0.2014%" height="15" fill="rgb(223,130,24)" fg:x="90182" fg:w="223"/><text x="81.6939%" y="527.50"></text></g><g><title>core::mem::replace (22 samples, 0.02%)</title><rect x="81.6254%" y="501" width="0.0199%" height="15" fill="rgb(237,16,22)" fg:x="90383" fg:w="22"/><text x="81.8754%" y="511.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (449 samples, 0.41%)</title><rect x="82.0219%" y="581" width="0.4055%" height="15" fill="rgb(248,192,20)" fg:x="90822" fg:w="449"/><text x="82.2719%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="82.6224%" y="565" width="0.0172%" height="15" fill="rgb(233,167,2)" fg:x="91487" fg:w="19"/><text x="82.8724%" y="575.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,730 samples, 2.47%)</title><rect x="80.3466%" y="661" width="2.4655%" height="15" fill="rgb(252,71,44)" fg:x="88967" fg:w="2730"/><text x="80.5966%" y="671.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,531 samples, 2.29%)</title><rect x="80.5263%" y="645" width="2.2858%" height="15" fill="rgb(238,37,47)" fg:x="89166" fg:w="2531"/><text x="80.7763%" y="655.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,584 samples, 1.43%)</title><rect x="81.3816%" y="629" width="1.4305%" height="15" fill="rgb(214,202,54)" fg:x="90113" fg:w="1584"/><text x="81.6316%" y="639.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,577 samples, 1.42%)</title><rect x="81.3879%" y="613" width="1.4242%" height="15" fill="rgb(254,165,40)" fg:x="90120" fg:w="1577"/><text x="81.6379%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,292 samples, 1.17%)</title><rect x="81.6453%" y="597" width="1.1668%" height="15" fill="rgb(246,173,38)" fg:x="90405" fg:w="1292"/><text x="81.8953%" y="607.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (426 samples, 0.38%)</title><rect x="82.4274%" y="581" width="0.3847%" height="15" fill="rgb(215,3,27)" fg:x="91271" fg:w="426"/><text x="82.6774%" y="591.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (191 samples, 0.17%)</title><rect x="82.6396%" y="565" width="0.1725%" height="15" fill="rgb(239,169,51)" fg:x="91506" fg:w="191"/><text x="82.8896%" y="575.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (191 samples, 0.17%)</title><rect x="82.6396%" y="549" width="0.1725%" height="15" fill="rgb(212,5,25)" fg:x="91506" fg:w="191"/><text x="82.8896%" y="559.50"></text></g><g><title>tremor_value::value::Value::Object (186 samples, 0.17%)</title><rect x="82.6441%" y="533" width="0.1680%" height="15" fill="rgb(243,45,17)" fg:x="91511" fg:w="186"/><text x="82.8941%" y="543.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,863 samples, 4.39%)</title><rect x="79.0064%" y="693" width="4.3918%" height="15" fill="rgb(242,97,9)" fg:x="87483" fg:w="4863"/><text x="79.2564%" y="703.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,529 samples, 4.09%)</title><rect x="79.3080%" y="677" width="4.0902%" height="15" fill="rgb(228,71,31)" fg:x="87817" fg:w="4529"/><text x="79.5580%" y="687.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (649 samples, 0.59%)</title><rect x="82.8121%" y="661" width="0.5861%" height="15" fill="rgb(252,184,16)" fg:x="91697" fg:w="649"/><text x="83.0621%" y="671.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (65 samples, 0.06%)</title><rect x="83.3395%" y="645" width="0.0587%" height="15" fill="rgb(236,169,46)" fg:x="92281" fg:w="65"/><text x="83.5895%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.03%)</title><rect x="83.5761%" y="645" width="0.0253%" height="15" fill="rgb(207,17,47)" fg:x="92543" fg:w="28"/><text x="83.8261%" y="655.50"></text></g><g><title>tremor_script::ast::Path::segments (92 samples, 0.08%)</title><rect x="83.6068%" y="645" width="0.0831%" height="15" fill="rgb(206,201,28)" fg:x="92577" fg:w="92"/><text x="83.8568%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="83.9211%" y="405" width="0.0117%" height="15" fill="rgb(224,184,23)" fg:x="92925" fg:w="13"/><text x="84.1711%" y="415.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (13 samples, 0.01%)</title><rect x="83.9211%" y="389" width="0.0117%" height="15" fill="rgb(208,139,48)" fg:x="92925" fg:w="13"/><text x="84.1711%" y="399.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (1,016 samples, 0.92%)</title><rect x="83.9328%" y="389" width="0.9176%" height="15" fill="rgb(208,130,10)" fg:x="92938" fg:w="1016"/><text x="84.1828%" y="399.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (1,014 samples, 0.92%)</title><rect x="83.9347%" y="373" width="0.9157%" height="15" fill="rgb(211,213,45)" fg:x="92940" fg:w="1014"/><text x="84.1847%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (1,014 samples, 0.92%)</title><rect x="83.9347%" y="357" width="0.9157%" height="15" fill="rgb(235,100,30)" fg:x="92940" fg:w="1014"/><text x="84.1847%" y="367.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (569 samples, 0.51%)</title><rect x="84.3365%" y="341" width="0.5139%" height="15" fill="rgb(206,144,31)" fg:x="93385" fg:w="569"/><text x="84.5865%" y="351.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (569 samples, 0.51%)</title><rect x="84.3365%" y="325" width="0.5139%" height="15" fill="rgb(224,200,26)" fg:x="93385" fg:w="569"/><text x="84.5865%" y="335.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (569 samples, 0.51%)</title><rect x="84.3365%" y="309" width="0.5139%" height="15" fill="rgb(247,104,53)" fg:x="93385" fg:w="569"/><text x="84.5865%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (561 samples, 0.51%)</title><rect x="84.3438%" y="293" width="0.5066%" height="15" fill="rgb(220,14,17)" fg:x="93393" fg:w="561"/><text x="84.5938%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (561 samples, 0.51%)</title><rect x="84.3438%" y="277" width="0.5066%" height="15" fill="rgb(230,140,40)" fg:x="93393" fg:w="561"/><text x="84.5938%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (561 samples, 0.51%)</title><rect x="84.3438%" y="261" width="0.5066%" height="15" fill="rgb(229,2,41)" fg:x="93393" fg:w="561"/><text x="84.5938%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (561 samples, 0.51%)</title><rect x="84.3438%" y="245" width="0.5066%" height="15" fill="rgb(232,89,16)" fg:x="93393" fg:w="561"/><text x="84.5938%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (561 samples, 0.51%)</title><rect x="84.3438%" y="229" width="0.5066%" height="15" fill="rgb(247,59,52)" fg:x="93393" fg:w="561"/><text x="84.5938%" y="239.50"></text></g><g><title>[libc-2.31.so] (546 samples, 0.49%)</title><rect x="84.3573%" y="213" width="0.4931%" height="15" fill="rgb(226,110,21)" fg:x="93408" fg:w="546"/><text x="84.6073%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,029 samples, 0.93%)</title><rect x="83.9328%" y="405" width="0.9293%" height="15" fill="rgb(224,176,43)" fg:x="92938" fg:w="1029"/><text x="84.1828%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (13 samples, 0.01%)</title><rect x="84.8504%" y="389" width="0.0117%" height="15" fill="rgb(221,73,6)" fg:x="93954" fg:w="13"/><text x="85.1004%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (13 samples, 0.01%)</title><rect x="84.8504%" y="373" width="0.0117%" height="15" fill="rgb(232,78,19)" fg:x="93954" fg:w="13"/><text x="85.1004%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (153 samples, 0.14%)</title><rect x="84.8621%" y="405" width="0.1382%" height="15" fill="rgb(233,112,48)" fg:x="93967" fg:w="153"/><text x="85.1121%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (437 samples, 0.39%)</title><rect x="85.0048%" y="405" width="0.3947%" height="15" fill="rgb(243,131,47)" fg:x="94125" fg:w="437"/><text x="85.2548%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (437 samples, 0.39%)</title><rect x="85.0048%" y="389" width="0.3947%" height="15" fill="rgb(226,51,1)" fg:x="94125" fg:w="437"/><text x="85.2548%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (437 samples, 0.39%)</title><rect x="85.0048%" y="373" width="0.3947%" height="15" fill="rgb(247,58,7)" fg:x="94125" fg:w="437"/><text x="85.2548%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,677 samples, 1.51%)</title><rect x="83.8967%" y="565" width="1.5145%" height="15" fill="rgb(209,7,32)" fg:x="92898" fg:w="1677"/><text x="84.1467%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,667 samples, 1.51%)</title><rect x="83.9058%" y="549" width="1.5055%" height="15" fill="rgb(209,39,41)" fg:x="92908" fg:w="1667"/><text x="84.1558%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,667 samples, 1.51%)</title><rect x="83.9058%" y="533" width="1.5055%" height="15" fill="rgb(226,182,46)" fg:x="92908" fg:w="1667"/><text x="84.1558%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,667 samples, 1.51%)</title><rect x="83.9058%" y="517" width="1.5055%" height="15" fill="rgb(230,219,10)" fg:x="92908" fg:w="1667"/><text x="84.1558%" y="527.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,657 samples, 1.50%)</title><rect x="83.9148%" y="501" width="1.4964%" height="15" fill="rgb(227,175,30)" fg:x="92918" fg:w="1657"/><text x="84.1648%" y="511.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,657 samples, 1.50%)</title><rect x="83.9148%" y="485" width="1.4964%" height="15" fill="rgb(217,2,50)" fg:x="92918" fg:w="1657"/><text x="84.1648%" y="495.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,657 samples, 1.50%)</title><rect x="83.9148%" y="469" width="1.4964%" height="15" fill="rgb(229,160,0)" fg:x="92918" fg:w="1657"/><text x="84.1648%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,656 samples, 1.50%)</title><rect x="83.9157%" y="453" width="1.4955%" height="15" fill="rgb(207,78,37)" fg:x="92919" fg:w="1656"/><text x="84.1657%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,656 samples, 1.50%)</title><rect x="83.9157%" y="437" width="1.4955%" height="15" fill="rgb(225,57,0)" fg:x="92919" fg:w="1656"/><text x="84.1657%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,656 samples, 1.50%)</title><rect x="83.9157%" y="421" width="1.4955%" height="15" fill="rgb(232,154,2)" fg:x="92919" fg:w="1656"/><text x="84.1657%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (13 samples, 0.01%)</title><rect x="85.3995%" y="405" width="0.0117%" height="15" fill="rgb(241,212,25)" fg:x="94562" fg:w="13"/><text x="85.6495%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.01%)</title><rect x="85.3995%" y="389" width="0.0117%" height="15" fill="rgb(226,69,20)" fg:x="94562" fg:w="13"/><text x="85.6495%" y="399.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (1,902 samples, 1.72%)</title><rect x="83.6971%" y="581" width="1.7177%" height="15" fill="rgb(247,184,54)" fg:x="92677" fg:w="1902"/><text x="83.9471%" y="591.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,236 samples, 2.02%)</title><rect x="83.3982%" y="693" width="2.0193%" height="15" fill="rgb(210,145,0)" fg:x="92346" fg:w="2236"/><text x="83.6482%" y="703.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,184 samples, 1.97%)</title><rect x="83.4452%" y="677" width="1.9724%" height="15" fill="rgb(253,82,12)" fg:x="92398" fg:w="2184"/><text x="83.6952%" y="687.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,116 samples, 1.91%)</title><rect x="83.5066%" y="661" width="1.9110%" height="15" fill="rgb(245,42,11)" fg:x="92466" fg:w="2116"/><text x="83.7566%" y="671.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (1,913 samples, 1.73%)</title><rect x="83.6899%" y="645" width="1.7276%" height="15" fill="rgb(219,147,32)" fg:x="92669" fg:w="1913"/><text x="83.9399%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,913 samples, 1.73%)</title><rect x="83.6899%" y="629" width="1.7276%" height="15" fill="rgb(246,12,7)" fg:x="92669" fg:w="1913"/><text x="83.9399%" y="639.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (1,913 samples, 1.73%)</title><rect x="83.6899%" y="613" width="1.7276%" height="15" fill="rgb(243,50,9)" fg:x="92669" fg:w="1913"/><text x="83.9399%" y="623.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (1,913 samples, 1.73%)</title><rect x="83.6899%" y="597" width="1.7276%" height="15" fill="rgb(219,149,6)" fg:x="92669" fg:w="1913"/><text x="83.9399%" y="607.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (63 samples, 0.06%)</title><rect x="85.9775%" y="677" width="0.0569%" height="15" fill="rgb(241,51,42)" fg:x="95202" fg:w="63"/><text x="86.2275%" y="687.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (63 samples, 0.06%)</title><rect x="85.9775%" y="661" width="0.0569%" height="15" fill="rgb(226,128,27)" fg:x="95202" fg:w="63"/><text x="86.2275%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="86.0344%" y="677" width="0.0144%" height="15" fill="rgb(244,144,4)" fg:x="95265" fg:w="16"/><text x="86.2844%" y="687.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (69 samples, 0.06%)</title><rect x="86.0488%" y="677" width="0.0623%" height="15" fill="rgb(221,4,13)" fg:x="95281" fg:w="69"/><text x="86.2988%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (50 samples, 0.05%)</title><rect x="86.1166%" y="661" width="0.0452%" height="15" fill="rgb(208,170,28)" fg:x="95356" fg:w="50"/><text x="86.3666%" y="671.50"></text></g><g><title>tremor_script::interpreter::test_guard (58 samples, 0.05%)</title><rect x="86.1111%" y="677" width="0.0524%" height="15" fill="rgb(226,131,13)" fg:x="95350" fg:w="58"/><text x="86.3611%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,538 samples, 8.61%)</title><rect x="77.9326%" y="869" width="8.6138%" height="15" fill="rgb(215,72,41)" fg:x="86294" fg:w="9538"/><text x="78.1826%" y="879.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,537 samples, 8.61%)</title><rect x="77.9335%" y="853" width="8.6129%" height="15" fill="rgb(243,108,20)" fg:x="86295" fg:w="9537"/><text x="78.1835%" y="863.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,537 samples, 8.61%)</title><rect x="77.9335%" y="837" width="8.6129%" height="15" fill="rgb(230,189,17)" fg:x="86295" fg:w="9537"/><text x="78.1835%" y="847.50">tremor_pipel..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,537 samples, 8.61%)</title><rect x="77.9335%" y="821" width="8.6129%" height="15" fill="rgb(220,50,17)" fg:x="86295" fg:w="9537"/><text x="78.1835%" y="831.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,466 samples, 8.55%)</title><rect x="77.9976%" y="805" width="8.5488%" height="15" fill="rgb(248,152,48)" fg:x="86366" fg:w="9466"/><text x="78.2476%" y="815.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,466 samples, 8.55%)</title><rect x="77.9976%" y="789" width="8.5488%" height="15" fill="rgb(244,91,11)" fg:x="86366" fg:w="9466"/><text x="78.2476%" y="799.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,466 samples, 8.55%)</title><rect x="77.9976%" y="773" width="8.5488%" height="15" fill="rgb(220,157,5)" fg:x="86366" fg:w="9466"/><text x="78.2476%" y="783.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,466 samples, 8.55%)</title><rect x="77.9976%" y="757" width="8.5488%" height="15" fill="rgb(253,137,8)" fg:x="86366" fg:w="9466"/><text x="78.2476%" y="767.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,466 samples, 8.55%)</title><rect x="77.9976%" y="741" width="8.5488%" height="15" fill="rgb(217,137,51)" fg:x="86366" fg:w="9466"/><text x="78.2476%" y="751.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (9,135 samples, 8.25%)</title><rect x="78.2966%" y="725" width="8.2499%" height="15" fill="rgb(218,209,53)" fg:x="86697" fg:w="9135"/><text x="78.5466%" y="735.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (8,655 samples, 7.82%)</title><rect x="78.7301%" y="709" width="7.8164%" height="15" fill="rgb(249,137,25)" fg:x="87177" fg:w="8655"/><text x="78.9801%" y="719.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,250 samples, 1.13%)</title><rect x="85.4176%" y="693" width="1.1289%" height="15" fill="rgb(239,155,26)" fg:x="94582" fg:w="1250"/><text x="85.6676%" y="703.50"></text></g><g><title>tremor_script::interpreter::val_eq (424 samples, 0.38%)</title><rect x="86.1635%" y="677" width="0.3829%" height="15" fill="rgb(227,85,46)" fg:x="95408" fg:w="424"/><text x="86.4135%" y="687.50"></text></g><g><title>[libc-2.31.so] (294 samples, 0.27%)</title><rect x="86.2809%" y="661" width="0.2655%" height="15" fill="rgb(251,107,43)" fg:x="95538" fg:w="294"/><text x="86.5309%" y="671.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="86.5473%" y="837" width="0.0524%" height="15" fill="rgb(234,170,33)" fg:x="95833" fg:w="58"/><text x="86.7973%" y="847.50"></text></g><g><title>[libc-2.31.so] (186 samples, 0.17%)</title><rect x="86.7099%" y="773" width="0.1680%" height="15" fill="rgb(206,29,35)" fg:x="96013" fg:w="186"/><text x="86.9599%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (84 samples, 0.08%)</title><rect x="86.9059%" y="757" width="0.0759%" height="15" fill="rgb(227,138,25)" fg:x="96230" fg:w="84"/><text x="87.1559%" y="767.50"></text></g><g><title>core::ptr::write (84 samples, 0.08%)</title><rect x="86.9059%" y="741" width="0.0759%" height="15" fill="rgb(249,131,35)" fg:x="96230" fg:w="84"/><text x="87.1559%" y="751.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="86.9095%" y="725" width="0.0722%" height="15" fill="rgb(239,6,40)" fg:x="96234" fg:w="80"/><text x="87.1595%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (160 samples, 0.14%)</title><rect x="86.9817%" y="757" width="0.1445%" height="15" fill="rgb(246,136,47)" fg:x="96314" fg:w="160"/><text x="87.2317%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (160 samples, 0.14%)</title><rect x="86.9817%" y="741" width="0.1445%" height="15" fill="rgb(253,58,26)" fg:x="96314" fg:w="160"/><text x="87.2317%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (108 samples, 0.10%)</title><rect x="87.1262%" y="757" width="0.0975%" height="15" fill="rgb(237,141,10)" fg:x="96474" fg:w="108"/><text x="87.3762%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (104 samples, 0.09%)</title><rect x="87.1298%" y="741" width="0.0939%" height="15" fill="rgb(234,156,12)" fg:x="96478" fg:w="104"/><text x="87.3798%" y="751.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (618 samples, 0.56%)</title><rect x="86.6711%" y="789" width="0.5581%" height="15" fill="rgb(243,224,36)" fg:x="95970" fg:w="618"/><text x="86.9211%" y="799.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (389 samples, 0.35%)</title><rect x="86.8779%" y="773" width="0.3513%" height="15" fill="rgb(205,229,51)" fg:x="96199" fg:w="389"/><text x="87.1279%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (74 samples, 0.07%)</title><rect x="87.2382%" y="773" width="0.0668%" height="15" fill="rgb(223,189,4)" fg:x="96598" fg:w="74"/><text x="87.4882%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (68 samples, 0.06%)</title><rect x="87.2436%" y="757" width="0.0614%" height="15" fill="rgb(249,167,54)" fg:x="96604" fg:w="68"/><text x="87.4936%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.06%)</title><rect x="87.2436%" y="741" width="0.0614%" height="15" fill="rgb(218,34,28)" fg:x="96604" fg:w="68"/><text x="87.4936%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (65 samples, 0.06%)</title><rect x="87.2463%" y="725" width="0.0587%" height="15" fill="rgb(232,109,42)" fg:x="96607" fg:w="65"/><text x="87.4963%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (65 samples, 0.06%)</title><rect x="87.2463%" y="709" width="0.0587%" height="15" fill="rgb(248,214,46)" fg:x="96607" fg:w="65"/><text x="87.4963%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (65 samples, 0.06%)</title><rect x="87.2463%" y="693" width="0.0587%" height="15" fill="rgb(244,216,40)" fg:x="96607" fg:w="65"/><text x="87.4963%" y="703.50"></text></g><g><title>event_listener::Inner::lock (129 samples, 0.12%)</title><rect x="87.3096%" y="773" width="0.1165%" height="15" fill="rgb(231,226,31)" fg:x="96677" fg:w="129"/><text x="87.5596%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (127 samples, 0.11%)</title><rect x="87.3114%" y="757" width="0.1147%" height="15" fill="rgb(238,38,43)" fg:x="96679" fg:w="127"/><text x="87.5614%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (126 samples, 0.11%)</title><rect x="87.3123%" y="741" width="0.1138%" height="15" fill="rgb(208,88,43)" fg:x="96680" fg:w="126"/><text x="87.5623%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (125 samples, 0.11%)</title><rect x="87.3132%" y="725" width="0.1129%" height="15" fill="rgb(205,136,37)" fg:x="96681" fg:w="125"/><text x="87.5632%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (125 samples, 0.11%)</title><rect x="87.3132%" y="709" width="0.1129%" height="15" fill="rgb(237,34,14)" fg:x="96681" fg:w="125"/><text x="87.5632%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (15 samples, 0.01%)</title><rect x="87.4351%" y="725" width="0.0135%" height="15" fill="rgb(236,193,44)" fg:x="96816" fg:w="15"/><text x="87.6851%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="87.4351%" y="709" width="0.0135%" height="15" fill="rgb(231,48,10)" fg:x="96816" fg:w="15"/><text x="87.6851%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="87.4351%" y="693" width="0.0135%" height="15" fill="rgb(213,141,34)" fg:x="96816" fg:w="15"/><text x="87.6851%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (82 samples, 0.07%)</title><rect x="87.4522%" y="677" width="0.0741%" height="15" fill="rgb(249,130,34)" fg:x="96835" fg:w="82"/><text x="87.7022%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="87.4522%" y="661" width="0.0741%" height="15" fill="rgb(219,42,41)" fg:x="96835" fg:w="82"/><text x="87.7022%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (81 samples, 0.07%)</title><rect x="87.4532%" y="645" width="0.0732%" height="15" fill="rgb(224,100,54)" fg:x="96836" fg:w="81"/><text x="87.7032%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (81 samples, 0.07%)</title><rect x="87.4532%" y="629" width="0.0732%" height="15" fill="rgb(229,200,27)" fg:x="96836" fg:w="81"/><text x="87.7032%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (81 samples, 0.07%)</title><rect x="87.4532%" y="613" width="0.0732%" height="15" fill="rgb(217,118,10)" fg:x="96836" fg:w="81"/><text x="87.7032%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (27 samples, 0.02%)</title><rect x="87.5263%" y="677" width="0.0244%" height="15" fill="rgb(206,22,3)" fg:x="96917" fg:w="27"/><text x="87.7763%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.02%)</title><rect x="87.5263%" y="661" width="0.0244%" height="15" fill="rgb(232,163,46)" fg:x="96917" fg:w="27"/><text x="87.7763%" y="671.50"></text></g><g><title>async_io::reactor::Reactor::notify (12 samples, 0.01%)</title><rect x="87.5543%" y="629" width="0.0108%" height="15" fill="rgb(206,95,13)" fg:x="96948" fg:w="12"/><text x="87.8043%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (42 samples, 0.04%)</title><rect x="87.5995%" y="597" width="0.0379%" height="15" fill="rgb(253,154,18)" fg:x="96998" fg:w="42"/><text x="87.8495%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (42 samples, 0.04%)</title><rect x="87.5995%" y="581" width="0.0379%" height="15" fill="rgb(219,32,23)" fg:x="96998" fg:w="42"/><text x="87.8495%" y="591.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (75 samples, 0.07%)</title><rect x="87.6374%" y="597" width="0.0677%" height="15" fill="rgb(230,191,45)" fg:x="97040" fg:w="75"/><text x="87.8874%" y="607.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (75 samples, 0.07%)</title><rect x="87.6374%" y="581" width="0.0677%" height="15" fill="rgb(229,64,36)" fg:x="97040" fg:w="75"/><text x="87.8874%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (75 samples, 0.07%)</title><rect x="87.6374%" y="565" width="0.0677%" height="15" fill="rgb(205,129,25)" fg:x="97040" fg:w="75"/><text x="87.8874%" y="575.50"></text></g><g><title>__pthread_cond_signal (75 samples, 0.07%)</title><rect x="87.6374%" y="549" width="0.0677%" height="15" fill="rgb(254,112,7)" fg:x="97040" fg:w="75"/><text x="87.8874%" y="559.50"></text></g><g><title>parking::Unparker::unpark (198 samples, 0.18%)</title><rect x="87.5715%" y="629" width="0.1788%" height="15" fill="rgb(226,53,48)" fg:x="96967" fg:w="198"/><text x="87.8215%" y="639.50"></text></g><g><title>parking::Inner::unpark (176 samples, 0.16%)</title><rect x="87.5913%" y="613" width="0.1589%" height="15" fill="rgb(214,153,38)" fg:x="96989" fg:w="176"/><text x="87.8413%" y="623.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.05%)</title><rect x="87.7051%" y="597" width="0.0452%" height="15" fill="rgb(243,101,7)" fg:x="97115" fg:w="50"/><text x="87.9551%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.05%)</title><rect x="87.7051%" y="581" width="0.0452%" height="15" fill="rgb(240,140,22)" fg:x="97115" fg:w="50"/><text x="87.9551%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (50 samples, 0.05%)</title><rect x="87.7051%" y="565" width="0.0452%" height="15" fill="rgb(235,114,2)" fg:x="97115" fg:w="50"/><text x="87.9551%" y="575.50"></text></g><g><title>__GI___pthread_mutex_lock (50 samples, 0.05%)</title><rect x="87.7051%" y="549" width="0.0452%" height="15" fill="rgb(242,59,12)" fg:x="97115" fg:w="50"/><text x="87.9551%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (222 samples, 0.20%)</title><rect x="87.5516%" y="645" width="0.2005%" height="15" fill="rgb(252,134,9)" fg:x="96945" fg:w="222"/><text x="87.8016%" y="655.50"></text></g><g><title>core::task::wake::Waker::wake (265 samples, 0.24%)</title><rect x="87.5507%" y="677" width="0.2393%" height="15" fill="rgb(236,4,44)" fg:x="96944" fg:w="265"/><text x="87.8007%" y="687.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (265 samples, 0.24%)</title><rect x="87.5507%" y="661" width="0.2393%" height="15" fill="rgb(254,172,41)" fg:x="96944" fg:w="265"/><text x="87.8007%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (42 samples, 0.04%)</title><rect x="87.7521%" y="645" width="0.0379%" height="15" fill="rgb(244,63,20)" fg:x="97167" fg:w="42"/><text x="88.0021%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="87.7521%" y="629" width="0.0379%" height="15" fill="rgb(250,73,31)" fg:x="97167" fg:w="42"/><text x="88.0021%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (41 samples, 0.04%)</title><rect x="87.7530%" y="613" width="0.0370%" height="15" fill="rgb(241,38,36)" fg:x="97168" fg:w="41"/><text x="88.0030%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_sub (41 samples, 0.04%)</title><rect x="87.7530%" y="597" width="0.0370%" height="15" fill="rgb(245,211,2)" fg:x="97168" fg:w="41"/><text x="88.0030%" y="607.50"></text></g><g><title>async_executor::State::notify (461 samples, 0.42%)</title><rect x="87.4486%" y="693" width="0.4163%" height="15" fill="rgb(206,120,28)" fg:x="96831" fg:w="461"/><text x="87.6986%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (83 samples, 0.07%)</title><rect x="87.7900%" y="677" width="0.0750%" height="15" fill="rgb(211,59,34)" fg:x="97209" fg:w="83"/><text x="88.0400%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (83 samples, 0.07%)</title><rect x="87.7900%" y="661" width="0.0750%" height="15" fill="rgb(233,168,5)" fg:x="97209" fg:w="83"/><text x="88.0400%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (70 samples, 0.06%)</title><rect x="87.8018%" y="645" width="0.0632%" height="15" fill="rgb(234,33,13)" fg:x="97222" fg:w="70"/><text x="88.0518%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (70 samples, 0.06%)</title><rect x="87.8018%" y="629" width="0.0632%" height="15" fill="rgb(231,150,26)" fg:x="97222" fg:w="70"/><text x="88.0518%" y="639.50"></text></g><g><title>__lll_lock_wait (13 samples, 0.01%)</title><rect x="87.8532%" y="613" width="0.0117%" height="15" fill="rgb(217,191,4)" fg:x="97279" fg:w="13"/><text x="88.1032%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (55 samples, 0.05%)</title><rect x="87.8713%" y="661" width="0.0497%" height="15" fill="rgb(246,198,38)" fg:x="97299" fg:w="55"/><text x="88.1213%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (55 samples, 0.05%)</title><rect x="87.8713%" y="645" width="0.0497%" height="15" fill="rgb(245,64,37)" fg:x="97299" fg:w="55"/><text x="88.1213%" y="655.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (565 samples, 0.51%)</title><rect x="87.4486%" y="709" width="0.5103%" height="15" fill="rgb(250,30,36)" fg:x="96831" fg:w="565"/><text x="87.6986%" y="719.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (104 samples, 0.09%)</title><rect x="87.8650%" y="693" width="0.0939%" height="15" fill="rgb(217,86,53)" fg:x="97292" fg:w="104"/><text x="88.1150%" y="703.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (103 samples, 0.09%)</title><rect x="87.8659%" y="677" width="0.0930%" height="15" fill="rgb(228,157,16)" fg:x="97293" fg:w="103"/><text x="88.1159%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (42 samples, 0.04%)</title><rect x="87.9210%" y="661" width="0.0379%" height="15" fill="rgb(217,59,31)" fg:x="97354" fg:w="42"/><text x="88.1710%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_or (42 samples, 0.04%)</title><rect x="87.9210%" y="645" width="0.0379%" height="15" fill="rgb(237,138,41)" fg:x="97354" fg:w="42"/><text x="88.1710%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (88 samples, 0.08%)</title><rect x="87.9589%" y="709" width="0.0795%" height="15" fill="rgb(227,91,49)" fg:x="97396" fg:w="88"/><text x="88.2089%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (88 samples, 0.08%)</title><rect x="87.9589%" y="693" width="0.0795%" height="15" fill="rgb(247,21,44)" fg:x="97396" fg:w="88"/><text x="88.2089%" y="703.50"></text></g><g><title>event_listener::List::notify (682 samples, 0.62%)</title><rect x="87.4261%" y="773" width="0.6159%" height="15" fill="rgb(219,210,51)" fg:x="96806" fg:w="682"/><text x="87.6761%" y="783.50"></text></g><g><title>core::task::wake::Waker::wake (674 samples, 0.61%)</title><rect x="87.4333%" y="757" width="0.6087%" height="15" fill="rgb(209,140,6)" fg:x="96814" fg:w="674"/><text x="87.6833%" y="767.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (674 samples, 0.61%)</title><rect x="87.4333%" y="741" width="0.6087%" height="15" fill="rgb(221,188,24)" fg:x="96814" fg:w="674"/><text x="87.6833%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (657 samples, 0.59%)</title><rect x="87.4486%" y="725" width="0.5933%" height="15" fill="rgb(232,154,20)" fg:x="96831" fg:w="657"/><text x="87.6986%" y="735.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,256 samples, 2.04%)</title><rect x="86.6638%" y="805" width="2.0374%" height="15" fill="rgb(244,137,50)" fg:x="95962" fg:w="2256"/><text x="86.9138%" y="815.50">a..</text></g><g><title>event_listener::Event::notify (1,630 samples, 1.47%)</title><rect x="87.2292%" y="789" width="1.4721%" height="15" fill="rgb(225,185,43)" fg:x="96588" fg:w="1630"/><text x="87.4792%" y="799.50"></text></g><g><title>event_listener::full_fence (730 samples, 0.66%)</title><rect x="88.0420%" y="773" width="0.6593%" height="15" fill="rgb(213,205,38)" fg:x="97488" fg:w="730"/><text x="88.2920%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (726 samples, 0.66%)</title><rect x="88.0456%" y="757" width="0.6557%" height="15" fill="rgb(236,73,12)" fg:x="97492" fg:w="726"/><text x="88.2956%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (726 samples, 0.66%)</title><rect x="88.0456%" y="741" width="0.6557%" height="15" fill="rgb(235,219,13)" fg:x="97492" fg:w="726"/><text x="88.2956%" y="751.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,382 samples, 2.15%)</title><rect x="86.6395%" y="821" width="2.1512%" height="15" fill="rgb(218,59,36)" fg:x="95935" fg:w="2382"/><text x="86.8895%" y="831.50">&lt;..</text></g><g><title>event_listener::Event::notify (83 samples, 0.07%)</title><rect x="88.7157%" y="805" width="0.0750%" height="15" fill="rgb(205,110,39)" fg:x="98234" fg:w="83"/><text x="88.9657%" y="815.50"></text></g><g><title>event_listener::full_fence (78 samples, 0.07%)</title><rect x="88.7202%" y="789" width="0.0704%" height="15" fill="rgb(218,206,42)" fg:x="98239" fg:w="78"/><text x="88.9702%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (78 samples, 0.07%)</title><rect x="88.7202%" y="773" width="0.0704%" height="15" fill="rgb(248,125,24)" fg:x="98239" fg:w="78"/><text x="88.9702%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (78 samples, 0.07%)</title><rect x="88.7202%" y="757" width="0.0704%" height="15" fill="rgb(242,28,27)" fg:x="98239" fg:w="78"/><text x="88.9702%" y="767.50"></text></g><g><title>[libc-2.31.so] (290 samples, 0.26%)</title><rect x="88.7943%" y="821" width="0.2619%" height="15" fill="rgb(216,228,15)" fg:x="98321" fg:w="290"/><text x="89.0443%" y="831.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15,445 samples, 13.95%)</title><rect x="75.1185%" y="901" width="13.9485%" height="15" fill="rgb(235,116,46)" fg:x="83178" fg:w="15445"/><text x="75.3685%" y="911.50">tremor_runtime::pipel..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,329 samples, 11.13%)</title><rect x="77.9326%" y="885" width="11.1344%" height="15" fill="rgb(224,18,32)" fg:x="86294" fg:w="12329"/><text x="78.1826%" y="895.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,791 samples, 2.52%)</title><rect x="86.5464%" y="869" width="2.5206%" height="15" fill="rgb(252,5,12)" fg:x="95832" fg:w="2791"/><text x="86.7964%" y="879.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,791 samples, 2.52%)</title><rect x="86.5464%" y="853" width="2.5206%" height="15" fill="rgb(251,36,5)" fg:x="95832" fg:w="2791"/><text x="86.7964%" y="863.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,732 samples, 2.47%)</title><rect x="86.5997%" y="837" width="2.4673%" height="15" fill="rgb(217,53,14)" fg:x="95891" fg:w="2732"/><text x="86.8497%" y="847.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (12 samples, 0.01%)</title><rect x="89.0562%" y="821" width="0.0108%" height="15" fill="rgb(215,86,45)" fg:x="98611" fg:w="12"/><text x="89.3062%" y="831.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (26 samples, 0.02%)</title><rect x="89.0679%" y="901" width="0.0235%" height="15" fill="rgb(242,169,11)" fg:x="98624" fg:w="26"/><text x="89.3179%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="89.1943%" y="757" width="0.0144%" height="15" fill="rgb(211,213,45)" fg:x="98764" fg:w="16"/><text x="89.4443%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (67 samples, 0.06%)</title><rect x="89.3804%" y="501" width="0.0605%" height="15" fill="rgb(205,88,11)" fg:x="98970" fg:w="67"/><text x="89.6304%" y="511.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (67 samples, 0.06%)</title><rect x="89.3804%" y="485" width="0.0605%" height="15" fill="rgb(252,69,26)" fg:x="98970" fg:w="67"/><text x="89.6304%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (67 samples, 0.06%)</title><rect x="89.3804%" y="469" width="0.0605%" height="15" fill="rgb(246,123,37)" fg:x="98970" fg:w="67"/><text x="89.6304%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (55 samples, 0.05%)</title><rect x="89.3912%" y="453" width="0.0497%" height="15" fill="rgb(212,205,5)" fg:x="98982" fg:w="55"/><text x="89.6412%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (55 samples, 0.05%)</title><rect x="89.3912%" y="437" width="0.0497%" height="15" fill="rgb(253,148,0)" fg:x="98982" fg:w="55"/><text x="89.6412%" y="447.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (55 samples, 0.05%)</title><rect x="89.3912%" y="421" width="0.0497%" height="15" fill="rgb(239,22,4)" fg:x="98982" fg:w="55"/><text x="89.6412%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (54 samples, 0.05%)</title><rect x="89.3921%" y="405" width="0.0488%" height="15" fill="rgb(226,26,53)" fg:x="98983" fg:w="54"/><text x="89.6421%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (54 samples, 0.05%)</title><rect x="89.3921%" y="389" width="0.0488%" height="15" fill="rgb(225,229,45)" fg:x="98983" fg:w="54"/><text x="89.6421%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (54 samples, 0.05%)</title><rect x="89.3921%" y="373" width="0.0488%" height="15" fill="rgb(220,60,37)" fg:x="98983" fg:w="54"/><text x="89.6421%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (54 samples, 0.05%)</title><rect x="89.3921%" y="357" width="0.0488%" height="15" fill="rgb(217,180,35)" fg:x="98983" fg:w="54"/><text x="89.6421%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (54 samples, 0.05%)</title><rect x="89.3921%" y="341" width="0.0488%" height="15" fill="rgb(229,7,53)" fg:x="98983" fg:w="54"/><text x="89.6421%" y="351.50"></text></g><g><title>[libc-2.31.so] (40 samples, 0.04%)</title><rect x="89.4048%" y="325" width="0.0361%" height="15" fill="rgb(254,137,3)" fg:x="98997" fg:w="40"/><text x="89.6548%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (72 samples, 0.07%)</title><rect x="89.3804%" y="517" width="0.0650%" height="15" fill="rgb(215,140,41)" fg:x="98970" fg:w="72"/><text x="89.6304%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (121 samples, 0.11%)</title><rect x="89.3542%" y="677" width="0.1093%" height="15" fill="rgb(250,80,15)" fg:x="98941" fg:w="121"/><text x="89.6042%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (117 samples, 0.11%)</title><rect x="89.3578%" y="661" width="0.1057%" height="15" fill="rgb(252,191,6)" fg:x="98945" fg:w="117"/><text x="89.6078%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (117 samples, 0.11%)</title><rect x="89.3578%" y="645" width="0.1057%" height="15" fill="rgb(246,217,18)" fg:x="98945" fg:w="117"/><text x="89.6078%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (117 samples, 0.11%)</title><rect x="89.3578%" y="629" width="0.1057%" height="15" fill="rgb(223,93,7)" fg:x="98945" fg:w="117"/><text x="89.6078%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (110 samples, 0.10%)</title><rect x="89.3641%" y="613" width="0.0993%" height="15" fill="rgb(225,55,52)" fg:x="98952" fg:w="110"/><text x="89.6141%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (110 samples, 0.10%)</title><rect x="89.3641%" y="597" width="0.0993%" height="15" fill="rgb(240,31,24)" fg:x="98952" fg:w="110"/><text x="89.6141%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (110 samples, 0.10%)</title><rect x="89.3641%" y="581" width="0.0993%" height="15" fill="rgb(205,56,52)" fg:x="98952" fg:w="110"/><text x="89.6141%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (106 samples, 0.10%)</title><rect x="89.3677%" y="565" width="0.0957%" height="15" fill="rgb(246,146,12)" fg:x="98956" fg:w="106"/><text x="89.6177%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (106 samples, 0.10%)</title><rect x="89.3677%" y="549" width="0.0957%" height="15" fill="rgb(239,84,36)" fg:x="98956" fg:w="106"/><text x="89.6177%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (106 samples, 0.10%)</title><rect x="89.3677%" y="533" width="0.0957%" height="15" fill="rgb(207,41,40)" fg:x="98956" fg:w="106"/><text x="89.6177%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (269 samples, 0.24%)</title><rect x="89.2223%" y="693" width="0.2429%" height="15" fill="rgb(241,179,25)" fg:x="98795" fg:w="269"/><text x="89.4723%" y="703.50"></text></g><g><title>tremor_script::ast::Script::run (415 samples, 0.37%)</title><rect x="89.0977%" y="901" width="0.3748%" height="15" fill="rgb(210,0,34)" fg:x="98657" fg:w="415"/><text x="89.3477%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (406 samples, 0.37%)</title><rect x="89.1058%" y="885" width="0.3667%" height="15" fill="rgb(225,217,29)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (406 samples, 0.37%)</title><rect x="89.1058%" y="869" width="0.3667%" height="15" fill="rgb(216,191,38)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (406 samples, 0.37%)</title><rect x="89.1058%" y="853" width="0.3667%" height="15" fill="rgb(232,140,52)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (406 samples, 0.37%)</title><rect x="89.1058%" y="837" width="0.3667%" height="15" fill="rgb(223,158,51)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (406 samples, 0.37%)</title><rect x="89.1058%" y="821" width="0.3667%" height="15" fill="rgb(235,29,51)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (406 samples, 0.37%)</title><rect x="89.1058%" y="805" width="0.3667%" height="15" fill="rgb(215,181,18)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="815.50"></text></g><g><title>tremor_script::interpreter::resolve (406 samples, 0.37%)</title><rect x="89.1058%" y="789" width="0.3667%" height="15" fill="rgb(227,125,34)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve_value (406 samples, 0.37%)</title><rect x="89.1058%" y="773" width="0.3667%" height="15" fill="rgb(230,197,49)" fg:x="98666" fg:w="406"/><text x="89.3558%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (280 samples, 0.25%)</title><rect x="89.2196%" y="757" width="0.2529%" height="15" fill="rgb(239,141,16)" fg:x="98792" fg:w="280"/><text x="89.4696%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (278 samples, 0.25%)</title><rect x="89.2214%" y="741" width="0.2511%" height="15" fill="rgb(225,105,43)" fg:x="98794" fg:w="278"/><text x="89.4714%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (278 samples, 0.25%)</title><rect x="89.2214%" y="725" width="0.2511%" height="15" fill="rgb(214,131,14)" fg:x="98794" fg:w="278"/><text x="89.4714%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (278 samples, 0.25%)</title><rect x="89.2214%" y="709" width="0.2511%" height="15" fill="rgb(229,177,11)" fg:x="98794" fg:w="278"/><text x="89.4714%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (43 samples, 0.04%)</title><rect x="89.4725%" y="901" width="0.0388%" height="15" fill="rgb(231,180,14)" fg:x="99072" fg:w="43"/><text x="89.7225%" y="911.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (37 samples, 0.03%)</title><rect x="89.5475%" y="709" width="0.0334%" height="15" fill="rgb(232,88,2)" fg:x="99155" fg:w="37"/><text x="89.7975%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (64 samples, 0.06%)</title><rect x="89.5240%" y="901" width="0.0578%" height="15" fill="rgb(205,220,8)" fg:x="99129" fg:w="64"/><text x="89.7740%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (46 samples, 0.04%)</title><rect x="89.5402%" y="885" width="0.0415%" height="15" fill="rgb(225,23,53)" fg:x="99147" fg:w="46"/><text x="89.7902%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (46 samples, 0.04%)</title><rect x="89.5402%" y="869" width="0.0415%" height="15" fill="rgb(213,62,29)" fg:x="99147" fg:w="46"/><text x="89.7902%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (46 samples, 0.04%)</title><rect x="89.5402%" y="853" width="0.0415%" height="15" fill="rgb(227,75,7)" fg:x="99147" fg:w="46"/><text x="89.7902%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (46 samples, 0.04%)</title><rect x="89.5402%" y="837" width="0.0415%" height="15" fill="rgb(207,105,14)" fg:x="99147" fg:w="46"/><text x="89.7902%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (46 samples, 0.04%)</title><rect x="89.5402%" y="821" width="0.0415%" height="15" fill="rgb(245,62,29)" fg:x="99147" fg:w="46"/><text x="89.7902%" y="831.50"></text></g><g><title>tremor_script::interpreter::resolve (46 samples, 0.04%)</title><rect x="89.5402%" y="805" width="0.0415%" height="15" fill="rgb(236,202,4)" fg:x="99147" fg:w="46"/><text x="89.7902%" y="815.50"></text></g><g><title>tremor_script::interpreter::resolve_value (46 samples, 0.04%)</title><rect x="89.5402%" y="789" width="0.0415%" height="15" fill="rgb(250,67,1)" fg:x="99147" fg:w="46"/><text x="89.7902%" y="799.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (39 samples, 0.04%)</title><rect x="89.5466%" y="773" width="0.0352%" height="15" fill="rgb(253,115,44)" fg:x="99154" fg:w="39"/><text x="89.7966%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (38 samples, 0.03%)</title><rect x="89.5475%" y="757" width="0.0343%" height="15" fill="rgb(251,139,18)" fg:x="99155" fg:w="38"/><text x="89.7975%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (38 samples, 0.03%)</title><rect x="89.5475%" y="741" width="0.0343%" height="15" fill="rgb(218,22,32)" fg:x="99155" fg:w="38"/><text x="89.7975%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (38 samples, 0.03%)</title><rect x="89.5475%" y="725" width="0.0343%" height="15" fill="rgb(243,53,5)" fg:x="99155" fg:w="38"/><text x="89.7975%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (27 samples, 0.02%)</title><rect x="89.5818%" y="901" width="0.0244%" height="15" fill="rgb(227,56,16)" fg:x="99193" fg:w="27"/><text x="89.8318%" y="911.50"></text></g><g><title>tremor_script::interpreter::val_eq (72 samples, 0.07%)</title><rect x="89.6161%" y="901" width="0.0650%" height="15" fill="rgb(245,53,0)" fg:x="99231" fg:w="72"/><text x="89.8661%" y="911.50"></text></g><g><title>core::mem::swap (18 samples, 0.02%)</title><rect x="89.7245%" y="485" width="0.0163%" height="15" fill="rgb(216,170,35)" fg:x="99351" fg:w="18"/><text x="89.9745%" y="495.50"></text></g><g><title>core::mem::swap_simple (18 samples, 0.02%)</title><rect x="89.7245%" y="469" width="0.0163%" height="15" fill="rgb(211,200,8)" fg:x="99351" fg:w="18"/><text x="89.9745%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (28 samples, 0.03%)</title><rect x="89.7218%" y="549" width="0.0253%" height="15" fill="rgb(228,204,44)" fg:x="99348" fg:w="28"/><text x="89.9718%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.02%)</title><rect x="89.7236%" y="533" width="0.0235%" height="15" fill="rgb(214,121,17)" fg:x="99350" fg:w="26"/><text x="89.9736%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (26 samples, 0.02%)</title><rect x="89.7236%" y="517" width="0.0235%" height="15" fill="rgb(233,64,38)" fg:x="99350" fg:w="26"/><text x="89.9736%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (26 samples, 0.02%)</title><rect x="89.7236%" y="501" width="0.0235%" height="15" fill="rgb(253,54,19)" fg:x="99350" fg:w="26"/><text x="89.9736%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (15 samples, 0.01%)</title><rect x="89.7470%" y="549" width="0.0135%" height="15" fill="rgb(253,94,18)" fg:x="99376" fg:w="15"/><text x="89.9970%" y="559.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (81 samples, 0.07%)</title><rect x="89.6892%" y="693" width="0.0732%" height="15" fill="rgb(227,57,52)" fg:x="99312" fg:w="81"/><text x="89.9392%" y="703.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (81 samples, 0.07%)</title><rect x="89.6892%" y="677" width="0.0732%" height="15" fill="rgb(230,228,50)" fg:x="99312" fg:w="81"/><text x="89.9392%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (81 samples, 0.07%)</title><rect x="89.6892%" y="661" width="0.0732%" height="15" fill="rgb(217,205,27)" fg:x="99312" fg:w="81"/><text x="89.9392%" y="671.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (81 samples, 0.07%)</title><rect x="89.6892%" y="645" width="0.0732%" height="15" fill="rgb(252,71,50)" fg:x="99312" fg:w="81"/><text x="89.9392%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (81 samples, 0.07%)</title><rect x="89.6892%" y="629" width="0.0732%" height="15" fill="rgb(209,86,4)" fg:x="99312" fg:w="81"/><text x="89.9392%" y="639.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (81 samples, 0.07%)</title><rect x="89.6892%" y="613" width="0.0732%" height="15" fill="rgb(229,94,0)" fg:x="99312" fg:w="81"/><text x="89.9392%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (81 samples, 0.07%)</title><rect x="89.6892%" y="597" width="0.0732%" height="15" fill="rgb(252,223,21)" fg:x="99312" fg:w="81"/><text x="89.9392%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (68 samples, 0.06%)</title><rect x="89.7010%" y="581" width="0.0614%" height="15" fill="rgb(230,210,4)" fg:x="99325" fg:w="68"/><text x="89.9510%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (48 samples, 0.04%)</title><rect x="89.7190%" y="565" width="0.0433%" height="15" fill="rgb(240,149,38)" fg:x="99345" fg:w="48"/><text x="89.9690%" y="575.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (168 samples, 0.15%)</title><rect x="89.6892%" y="773" width="0.1517%" height="15" fill="rgb(254,105,20)" fg:x="99312" fg:w="168"/><text x="89.9392%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (168 samples, 0.15%)</title><rect x="89.6892%" y="757" width="0.1517%" height="15" fill="rgb(253,87,46)" fg:x="99312" fg:w="168"/><text x="89.9392%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (168 samples, 0.15%)</title><rect x="89.6892%" y="741" width="0.1517%" height="15" fill="rgb(253,116,33)" fg:x="99312" fg:w="168"/><text x="89.9392%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (168 samples, 0.15%)</title><rect x="89.6892%" y="725" width="0.1517%" height="15" fill="rgb(229,198,5)" fg:x="99312" fg:w="168"/><text x="89.9392%" y="735.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (168 samples, 0.15%)</title><rect x="89.6892%" y="709" width="0.1517%" height="15" fill="rgb(242,38,37)" fg:x="99312" fg:w="168"/><text x="89.9392%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (87 samples, 0.08%)</title><rect x="89.7624%" y="693" width="0.0786%" height="15" fill="rgb(242,69,53)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (87 samples, 0.08%)</title><rect x="89.7624%" y="677" width="0.0786%" height="15" fill="rgb(249,80,16)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="687.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (87 samples, 0.08%)</title><rect x="89.7624%" y="661" width="0.0786%" height="15" fill="rgb(206,128,11)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (87 samples, 0.08%)</title><rect x="89.7624%" y="645" width="0.0786%" height="15" fill="rgb(212,35,20)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (87 samples, 0.08%)</title><rect x="89.7624%" y="629" width="0.0786%" height="15" fill="rgb(236,79,13)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (87 samples, 0.08%)</title><rect x="89.7624%" y="613" width="0.0786%" height="15" fill="rgb(233,123,3)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (87 samples, 0.08%)</title><rect x="89.7624%" y="597" width="0.0786%" height="15" fill="rgb(214,93,52)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (87 samples, 0.08%)</title><rect x="89.7624%" y="581" width="0.0786%" height="15" fill="rgb(251,37,40)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (87 samples, 0.08%)</title><rect x="89.7624%" y="565" width="0.0786%" height="15" fill="rgb(227,80,54)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (87 samples, 0.08%)</title><rect x="89.7624%" y="549" width="0.0786%" height="15" fill="rgb(254,48,11)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (87 samples, 0.08%)</title><rect x="89.7624%" y="533" width="0.0786%" height="15" fill="rgb(235,193,26)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (87 samples, 0.08%)</title><rect x="89.7624%" y="517" width="0.0786%" height="15" fill="rgb(229,99,21)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (87 samples, 0.08%)</title><rect x="89.7624%" y="501" width="0.0786%" height="15" fill="rgb(211,140,41)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (87 samples, 0.08%)</title><rect x="89.7624%" y="485" width="0.0786%" height="15" fill="rgb(240,227,30)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (87 samples, 0.08%)</title><rect x="89.7624%" y="469" width="0.0786%" height="15" fill="rgb(215,224,45)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (87 samples, 0.08%)</title><rect x="89.7624%" y="453" width="0.0786%" height="15" fill="rgb(206,123,31)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="463.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (87 samples, 0.08%)</title><rect x="89.7624%" y="437" width="0.0786%" height="15" fill="rgb(210,138,16)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (87 samples, 0.08%)</title><rect x="89.7624%" y="421" width="0.0786%" height="15" fill="rgb(228,57,28)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="431.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.08%)</title><rect x="89.7624%" y="405" width="0.0786%" height="15" fill="rgb(242,170,10)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="415.50"></text></g><g><title>__rg_alloc (87 samples, 0.08%)</title><rect x="89.7624%" y="389" width="0.0786%" height="15" fill="rgb(228,214,39)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (87 samples, 0.08%)</title><rect x="89.7624%" y="373" width="0.0786%" height="15" fill="rgb(218,179,33)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="383.50"></text></g><g><title>sn_rust_alloc (87 samples, 0.08%)</title><rect x="89.7624%" y="357" width="0.0786%" height="15" fill="rgb(235,193,39)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (87 samples, 0.08%)</title><rect x="89.7624%" y="341" width="0.0786%" height="15" fill="rgb(219,221,36)" fg:x="99393" fg:w="87"/><text x="90.0124%" y="351.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (182 samples, 0.16%)</title><rect x="89.6892%" y="805" width="0.1644%" height="15" fill="rgb(248,218,19)" fg:x="99312" fg:w="182"/><text x="89.9392%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (182 samples, 0.16%)</title><rect x="89.6892%" y="789" width="0.1644%" height="15" fill="rgb(205,50,9)" fg:x="99312" fg:w="182"/><text x="89.9392%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (14 samples, 0.01%)</title><rect x="89.8410%" y="773" width="0.0126%" height="15" fill="rgb(238,81,28)" fg:x="99480" fg:w="14"/><text x="90.0910%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (14 samples, 0.01%)</title><rect x="89.8410%" y="757" width="0.0126%" height="15" fill="rgb(235,110,19)" fg:x="99480" fg:w="14"/><text x="90.0910%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (242 samples, 0.22%)</title><rect x="89.6892%" y="821" width="0.2186%" height="15" fill="rgb(214,7,14)" fg:x="99312" fg:w="242"/><text x="89.9392%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (60 samples, 0.05%)</title><rect x="89.8536%" y="805" width="0.0542%" height="15" fill="rgb(211,77,3)" fg:x="99494" fg:w="60"/><text x="90.1036%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (60 samples, 0.05%)</title><rect x="89.8536%" y="789" width="0.0542%" height="15" fill="rgb(229,5,9)" fg:x="99494" fg:w="60"/><text x="90.1036%" y="799.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (60 samples, 0.05%)</title><rect x="89.8536%" y="773" width="0.0542%" height="15" fill="rgb(225,90,11)" fg:x="99494" fg:w="60"/><text x="90.1036%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (60 samples, 0.05%)</title><rect x="89.8536%" y="757" width="0.0542%" height="15" fill="rgb(242,56,8)" fg:x="99494" fg:w="60"/><text x="90.1036%" y="767.50"></text></g><g><title>tremor_script::interpreter::resolve (60 samples, 0.05%)</title><rect x="89.8536%" y="741" width="0.0542%" height="15" fill="rgb(249,212,39)" fg:x="99494" fg:w="60"/><text x="90.1036%" y="751.50"></text></g><g><title>tremor_script::interpreter::resolve_value (60 samples, 0.05%)</title><rect x="89.8536%" y="725" width="0.0542%" height="15" fill="rgb(236,90,9)" fg:x="99494" fg:w="60"/><text x="90.1036%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (50 samples, 0.05%)</title><rect x="89.8626%" y="709" width="0.0452%" height="15" fill="rgb(206,88,35)" fg:x="99504" fg:w="50"/><text x="90.1126%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (50 samples, 0.05%)</title><rect x="89.8626%" y="693" width="0.0452%" height="15" fill="rgb(205,126,30)" fg:x="99504" fg:w="50"/><text x="90.1126%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (50 samples, 0.05%)</title><rect x="89.8626%" y="677" width="0.0452%" height="15" fill="rgb(230,176,12)" fg:x="99504" fg:w="50"/><text x="90.1126%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (50 samples, 0.05%)</title><rect x="89.8626%" y="661" width="0.0452%" height="15" fill="rgb(243,19,9)" fg:x="99504" fg:w="50"/><text x="90.1126%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (49 samples, 0.04%)</title><rect x="89.8635%" y="645" width="0.0443%" height="15" fill="rgb(245,171,17)" fg:x="99505" fg:w="49"/><text x="90.1135%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (17 samples, 0.02%)</title><rect x="89.8924%" y="629" width="0.0154%" height="15" fill="rgb(227,52,21)" fg:x="99537" fg:w="17"/><text x="90.1424%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="89.8933%" y="613" width="0.0144%" height="15" fill="rgb(238,69,14)" fg:x="99538" fg:w="16"/><text x="90.1433%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (16 samples, 0.01%)</title><rect x="89.8933%" y="597" width="0.0144%" height="15" fill="rgb(241,156,39)" fg:x="99538" fg:w="16"/><text x="90.1433%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (16 samples, 0.01%)</title><rect x="89.8933%" y="581" width="0.0144%" height="15" fill="rgb(212,227,28)" fg:x="99538" fg:w="16"/><text x="90.1433%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="89.8942%" y="565" width="0.0135%" height="15" fill="rgb(209,118,27)" fg:x="99539" fg:w="15"/><text x="90.1442%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (15 samples, 0.01%)</title><rect x="89.8942%" y="549" width="0.0135%" height="15" fill="rgb(226,102,5)" fg:x="99539" fg:w="15"/><text x="90.1442%" y="559.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (15 samples, 0.01%)</title><rect x="89.8942%" y="533" width="0.0135%" height="15" fill="rgb(223,34,3)" fg:x="99539" fg:w="15"/><text x="90.1442%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (14 samples, 0.01%)</title><rect x="89.8951%" y="517" width="0.0126%" height="15" fill="rgb(221,81,38)" fg:x="99540" fg:w="14"/><text x="90.1451%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (14 samples, 0.01%)</title><rect x="89.8951%" y="501" width="0.0126%" height="15" fill="rgb(236,219,28)" fg:x="99540" fg:w="14"/><text x="90.1451%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (14 samples, 0.01%)</title><rect x="89.8951%" y="485" width="0.0126%" height="15" fill="rgb(213,200,14)" fg:x="99540" fg:w="14"/><text x="90.1451%" y="495.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (24 samples, 0.02%)</title><rect x="89.9078%" y="773" width="0.0217%" height="15" fill="rgb(240,33,19)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (24 samples, 0.02%)</title><rect x="89.9078%" y="757" width="0.0217%" height="15" fill="rgb(233,113,27)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (24 samples, 0.02%)</title><rect x="89.9078%" y="741" width="0.0217%" height="15" fill="rgb(220,221,18)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (24 samples, 0.02%)</title><rect x="89.9078%" y="725" width="0.0217%" height="15" fill="rgb(238,92,8)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="735.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (24 samples, 0.02%)</title><rect x="89.9078%" y="709" width="0.0217%" height="15" fill="rgb(222,164,16)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (24 samples, 0.02%)</title><rect x="89.9078%" y="693" width="0.0217%" height="15" fill="rgb(241,119,3)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="703.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (24 samples, 0.02%)</title><rect x="89.9078%" y="677" width="0.0217%" height="15" fill="rgb(241,44,8)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (24 samples, 0.02%)</title><rect x="89.9078%" y="661" width="0.0217%" height="15" fill="rgb(230,36,40)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="671.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (24 samples, 0.02%)</title><rect x="89.9078%" y="645" width="0.0217%" height="15" fill="rgb(243,16,36)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="89.9078%" y="629" width="0.0217%" height="15" fill="rgb(231,4,26)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="639.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (24 samples, 0.02%)</title><rect x="89.9078%" y="613" width="0.0217%" height="15" fill="rgb(240,9,31)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (24 samples, 0.02%)</title><rect x="89.9078%" y="597" width="0.0217%" height="15" fill="rgb(207,173,15)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (24 samples, 0.02%)</title><rect x="89.9078%" y="581" width="0.0217%" height="15" fill="rgb(224,192,53)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (24 samples, 0.02%)</title><rect x="89.9078%" y="565" width="0.0217%" height="15" fill="rgb(223,67,28)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="89.9078%" y="549" width="0.0217%" height="15" fill="rgb(211,20,47)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.02%)</title><rect x="89.9078%" y="533" width="0.0217%" height="15" fill="rgb(240,228,2)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (24 samples, 0.02%)</title><rect x="89.9078%" y="517" width="0.0217%" height="15" fill="rgb(248,151,12)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (24 samples, 0.02%)</title><rect x="89.9078%" y="501" width="0.0217%" height="15" fill="rgb(244,8,39)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (24 samples, 0.02%)</title><rect x="89.9078%" y="485" width="0.0217%" height="15" fill="rgb(222,26,8)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.02%)</title><rect x="89.9078%" y="469" width="0.0217%" height="15" fill="rgb(213,106,44)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (24 samples, 0.02%)</title><rect x="89.9078%" y="453" width="0.0217%" height="15" fill="rgb(214,129,20)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="463.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (24 samples, 0.02%)</title><rect x="89.9078%" y="437" width="0.0217%" height="15" fill="rgb(212,32,13)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="89.9078%" y="421" width="0.0217%" height="15" fill="rgb(208,168,33)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="431.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="89.9078%" y="405" width="0.0217%" height="15" fill="rgb(231,207,8)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="415.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="89.9078%" y="389" width="0.0217%" height="15" fill="rgb(235,219,23)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="89.9078%" y="373" width="0.0217%" height="15" fill="rgb(226,216,26)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="383.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="89.9078%" y="357" width="0.0217%" height="15" fill="rgb(239,137,16)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="89.9078%" y="341" width="0.0217%" height="15" fill="rgb(207,12,36)" fg:x="99554" fg:w="24"/><text x="90.1578%" y="351.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (308 samples, 0.28%)</title><rect x="89.6811%" y="901" width="0.2782%" height="15" fill="rgb(210,214,24)" fg:x="99303" fg:w="308"/><text x="89.9311%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (299 samples, 0.27%)</title><rect x="89.6892%" y="885" width="0.2700%" height="15" fill="rgb(206,56,30)" fg:x="99312" fg:w="299"/><text x="89.9392%" y="895.50"></text></g><g><title>tremor_script::script::Script::run (299 samples, 0.27%)</title><rect x="89.6892%" y="869" width="0.2700%" height="15" fill="rgb(228,143,26)" fg:x="99312" fg:w="299"/><text x="89.9392%" y="879.50"></text></g><g><title>tremor_script::ast::Script::run (299 samples, 0.27%)</title><rect x="89.6892%" y="853" width="0.2700%" height="15" fill="rgb(216,218,46)" fg:x="99312" fg:w="299"/><text x="89.9392%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (299 samples, 0.27%)</title><rect x="89.6892%" y="837" width="0.2700%" height="15" fill="rgb(206,6,19)" fg:x="99312" fg:w="299"/><text x="89.9392%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (57 samples, 0.05%)</title><rect x="89.9078%" y="821" width="0.0515%" height="15" fill="rgb(239,177,51)" fg:x="99554" fg:w="57"/><text x="90.1578%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (57 samples, 0.05%)</title><rect x="89.9078%" y="805" width="0.0515%" height="15" fill="rgb(216,55,25)" fg:x="99554" fg:w="57"/><text x="90.1578%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (57 samples, 0.05%)</title><rect x="89.9078%" y="789" width="0.0515%" height="15" fill="rgb(231,163,29)" fg:x="99554" fg:w="57"/><text x="90.1578%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (33 samples, 0.03%)</title><rect x="89.9295%" y="773" width="0.0298%" height="15" fill="rgb(232,149,50)" fg:x="99578" fg:w="33"/><text x="90.1795%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (33 samples, 0.03%)</title><rect x="89.9295%" y="757" width="0.0298%" height="15" fill="rgb(223,142,48)" fg:x="99578" fg:w="33"/><text x="90.1795%" y="767.50"></text></g><g><title>tremor_script::interpreter::resolve (33 samples, 0.03%)</title><rect x="89.9295%" y="741" width="0.0298%" height="15" fill="rgb(245,83,23)" fg:x="99578" fg:w="33"/><text x="90.1795%" y="751.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (29 samples, 0.03%)</title><rect x="90.2564%" y="885" width="0.0262%" height="15" fill="rgb(224,63,2)" fg:x="99940" fg:w="29"/><text x="90.5064%" y="895.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (40 samples, 0.04%)</title><rect x="90.2826%" y="885" width="0.0361%" height="15" fill="rgb(218,65,53)" fg:x="99969" fg:w="40"/><text x="90.5326%" y="895.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (12 samples, 0.01%)</title><rect x="90.3323%" y="869" width="0.0108%" height="15" fill="rgb(221,84,29)" fg:x="100024" fg:w="12"/><text x="90.5823%" y="879.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (12 samples, 0.01%)</title><rect x="90.3323%" y="853" width="0.0108%" height="15" fill="rgb(234,0,32)" fg:x="100024" fg:w="12"/><text x="90.5823%" y="863.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (12 samples, 0.01%)</title><rect x="90.3323%" y="837" width="0.0108%" height="15" fill="rgb(206,20,16)" fg:x="100024" fg:w="12"/><text x="90.5823%" y="847.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (427 samples, 0.39%)</title><rect x="89.9674%" y="901" width="0.3856%" height="15" fill="rgb(244,172,18)" fg:x="99620" fg:w="427"/><text x="90.2174%" y="911.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (23 samples, 0.02%)</title><rect x="90.3323%" y="885" width="0.0208%" height="15" fill="rgb(254,133,1)" fg:x="100024" fg:w="23"/><text x="90.5823%" y="895.50"></text></g><g><title>[unknown] (93,366 samples, 84.32%)</title><rect x="6.0463%" y="917" width="84.3194%" height="15" fill="rgb(222,206,41)" fg:x="6695" fg:w="93366"/><text x="6.2963%" y="927.50">[unknown]</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (17 samples, 0.02%)</title><rect x="90.4415%" y="901" width="0.0154%" height="15" fill="rgb(212,3,42)" fg:x="100145" fg:w="17"/><text x="90.6915%" y="911.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.34.llvm.2716098514989274932 (32 samples, 0.03%)</title><rect x="90.4397%" y="917" width="0.0289%" height="15" fill="rgb(241,11,4)" fg:x="100143" fg:w="32"/><text x="90.6897%" y="927.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (38 samples, 0.03%)</title><rect x="90.4876%" y="917" width="0.0343%" height="15" fill="rgb(205,19,26)" fg:x="100196" fg:w="38"/><text x="90.7376%" y="927.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (16 samples, 0.01%)</title><rect x="90.5219%" y="917" width="0.0144%" height="15" fill="rgb(210,179,32)" fg:x="100234" fg:w="16"/><text x="90.7719%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (24 samples, 0.02%)</title><rect x="90.5625%" y="901" width="0.0217%" height="15" fill="rgb(227,116,49)" fg:x="100279" fg:w="24"/><text x="90.8125%" y="911.50"></text></g><g><title>anon.b1d8c7f42bff7d5998958fa920d1dee2.46.llvm.13525319545232520578 (60 samples, 0.05%)</title><rect x="90.5373%" y="917" width="0.0542%" height="15" fill="rgb(211,146,6)" fg:x="100251" fg:w="60"/><text x="90.7873%" y="927.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (17 samples, 0.02%)</title><rect x="90.5914%" y="917" width="0.0154%" height="15" fill="rgb(219,44,39)" fg:x="100311" fg:w="17"/><text x="90.8414%" y="927.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="90.6393%" y="885" width="0.0199%" height="15" fill="rgb(234,128,11)" fg:x="100364" fg:w="22"/><text x="90.8893%" y="895.50"></text></g><g><title>async_task::runnable::Runnable::run (20 samples, 0.02%)</title><rect x="90.6411%" y="869" width="0.0181%" height="15" fill="rgb(220,183,53)" fg:x="100366" fg:w="20"/><text x="90.8911%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (95 samples, 0.09%)</title><rect x="90.6149%" y="901" width="0.0858%" height="15" fill="rgb(213,219,32)" fg:x="100337" fg:w="95"/><text x="90.8649%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (43 samples, 0.04%)</title><rect x="90.6619%" y="885" width="0.0388%" height="15" fill="rgb(232,156,16)" fg:x="100389" fg:w="43"/><text x="90.9119%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (37 samples, 0.03%)</title><rect x="90.6673%" y="869" width="0.0334%" height="15" fill="rgb(246,135,34)" fg:x="100395" fg:w="37"/><text x="90.9173%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (33 samples, 0.03%)</title><rect x="90.6709%" y="853" width="0.0298%" height="15" fill="rgb(241,99,0)" fg:x="100399" fg:w="33"/><text x="90.9209%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.03%)</title><rect x="90.6745%" y="837" width="0.0262%" height="15" fill="rgb(222,103,45)" fg:x="100403" fg:w="29"/><text x="90.9245%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (27 samples, 0.02%)</title><rect x="90.6763%" y="821" width="0.0244%" height="15" fill="rgb(212,57,4)" fg:x="100405" fg:w="27"/><text x="90.9263%" y="831.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (27 samples, 0.02%)</title><rect x="90.7332%" y="853" width="0.0244%" height="15" fill="rgb(215,68,47)" fg:x="100468" fg:w="27"/><text x="90.9832%" y="863.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (68 samples, 0.06%)</title><rect x="90.7025%" y="901" width="0.0614%" height="15" fill="rgb(230,84,2)" fg:x="100434" fg:w="68"/><text x="90.9525%" y="911.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (60 samples, 0.05%)</title><rect x="90.7098%" y="885" width="0.0542%" height="15" fill="rgb(220,102,14)" fg:x="100442" fg:w="60"/><text x="90.9598%" y="895.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="90.7125%" y="869" width="0.0515%" height="15" fill="rgb(240,10,32)" fg:x="100445" fg:w="57"/><text x="90.9625%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (31 samples, 0.03%)</title><rect x="90.7784%" y="901" width="0.0280%" height="15" fill="rgb(215,47,27)" fg:x="100518" fg:w="31"/><text x="91.0284%" y="911.50"></text></g><g><title>parking::Inner::park (12 samples, 0.01%)</title><rect x="90.8091%" y="901" width="0.0108%" height="15" fill="rgb(233,188,43)" fg:x="100552" fg:w="12"/><text x="91.0591%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.07%)</title><rect x="90.8705%" y="885" width="0.0650%" height="15" fill="rgb(253,190,1)" fg:x="100620" fg:w="72"/><text x="91.1205%" y="895.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (68 samples, 0.06%)</title><rect x="90.8741%" y="869" width="0.0614%" height="15" fill="rgb(206,114,52)" fg:x="100624" fg:w="68"/><text x="91.1241%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (67 samples, 0.06%)</title><rect x="90.8750%" y="853" width="0.0605%" height="15" fill="rgb(233,120,37)" fg:x="100625" fg:w="67"/><text x="91.1250%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (67 samples, 0.06%)</title><rect x="90.8750%" y="837" width="0.0605%" height="15" fill="rgb(214,52,39)" fg:x="100625" fg:w="67"/><text x="91.1250%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (39 samples, 0.04%)</title><rect x="90.9003%" y="821" width="0.0352%" height="15" fill="rgb(223,80,29)" fg:x="100653" fg:w="39"/><text x="91.1503%" y="831.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (359 samples, 0.32%)</title><rect x="90.6140%" y="917" width="0.3242%" height="15" fill="rgb(230,101,40)" fg:x="100336" fg:w="359"/><text x="90.8640%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (115 samples, 0.10%)</title><rect x="90.8344%" y="901" width="0.1039%" height="15" fill="rgb(219,211,8)" fg:x="100580" fg:w="115"/><text x="91.0844%" y="911.50"></text></g><g><title>async_channel::bounded (12 samples, 0.01%)</title><rect x="90.9536%" y="677" width="0.0108%" height="15" fill="rgb(252,126,28)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="90.9536%" y="661" width="0.0108%" height="15" fill="rgb(215,56,38)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="90.9536%" y="645" width="0.0108%" height="15" fill="rgb(249,55,44)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="90.9536%" y="629" width="0.0108%" height="15" fill="rgb(220,221,32)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="90.9536%" y="613" width="0.0108%" height="15" fill="rgb(212,216,41)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="623.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="90.9536%" y="597" width="0.0108%" height="15" fill="rgb(228,213,43)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="607.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="90.9536%" y="581" width="0.0108%" height="15" fill="rgb(211,31,26)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="90.9536%" y="565" width="0.0108%" height="15" fill="rgb(229,202,19)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="575.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="90.9536%" y="549" width="0.0108%" height="15" fill="rgb(229,105,46)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="559.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (12 samples, 0.01%)</title><rect x="90.9536%" y="533" width="0.0108%" height="15" fill="rgb(235,108,1)" fg:x="100712" fg:w="12"/><text x="91.2036%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="91.2625%" y="309" width="0.0108%" height="15" fill="rgb(245,111,35)" fg:x="101054" fg:w="12"/><text x="91.5125%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (17 samples, 0.02%)</title><rect x="91.4015%" y="213" width="0.0154%" height="15" fill="rgb(219,185,31)" fg:x="101208" fg:w="17"/><text x="91.6515%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (17 samples, 0.02%)</title><rect x="91.4015%" y="197" width="0.0154%" height="15" fill="rgb(214,4,43)" fg:x="101208" fg:w="17"/><text x="91.6515%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14 samples, 0.01%)</title><rect x="91.4042%" y="181" width="0.0126%" height="15" fill="rgb(235,227,40)" fg:x="101211" fg:w="14"/><text x="91.6542%" y="191.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (14 samples, 0.01%)</title><rect x="91.4042%" y="165" width="0.0126%" height="15" fill="rgb(230,88,30)" fg:x="101211" fg:w="14"/><text x="91.6542%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (14 samples, 0.01%)</title><rect x="91.4042%" y="149" width="0.0126%" height="15" fill="rgb(216,217,1)" fg:x="101211" fg:w="14"/><text x="91.6542%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.07%)</title><rect x="91.4169%" y="213" width="0.0686%" height="15" fill="rgb(248,139,50)" fg:x="101225" fg:w="76"/><text x="91.6669%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (294 samples, 0.27%)</title><rect x="91.2733%" y="261" width="0.2655%" height="15" fill="rgb(233,1,21)" fg:x="101066" fg:w="294"/><text x="91.5233%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (241 samples, 0.22%)</title><rect x="91.3212%" y="245" width="0.2176%" height="15" fill="rgb(215,183,12)" fg:x="101119" fg:w="241"/><text x="91.5712%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (203 samples, 0.18%)</title><rect x="91.3555%" y="229" width="0.1833%" height="15" fill="rgb(229,104,42)" fg:x="101157" fg:w="203"/><text x="91.6055%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (59 samples, 0.05%)</title><rect x="91.4855%" y="213" width="0.0533%" height="15" fill="rgb(243,34,48)" fg:x="101301" fg:w="59"/><text x="91.7355%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (59 samples, 0.05%)</title><rect x="91.4855%" y="197" width="0.0533%" height="15" fill="rgb(239,11,44)" fg:x="101301" fg:w="59"/><text x="91.7355%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (14 samples, 0.01%)</title><rect x="91.5262%" y="181" width="0.0126%" height="15" fill="rgb(231,98,35)" fg:x="101346" fg:w="14"/><text x="91.7762%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14 samples, 0.01%)</title><rect x="91.5262%" y="165" width="0.0126%" height="15" fill="rgb(233,28,25)" fg:x="101346" fg:w="14"/><text x="91.7762%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (315 samples, 0.28%)</title><rect x="91.2733%" y="309" width="0.2845%" height="15" fill="rgb(234,123,11)" fg:x="101066" fg:w="315"/><text x="91.5233%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (315 samples, 0.28%)</title><rect x="91.2733%" y="293" width="0.2845%" height="15" fill="rgb(220,69,3)" fg:x="101066" fg:w="315"/><text x="91.5233%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (315 samples, 0.28%)</title><rect x="91.2733%" y="277" width="0.2845%" height="15" fill="rgb(214,64,36)" fg:x="101066" fg:w="315"/><text x="91.5233%" y="287.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (21 samples, 0.02%)</title><rect x="91.5388%" y="261" width="0.0190%" height="15" fill="rgb(211,138,32)" fg:x="101360" fg:w="21"/><text x="91.7888%" y="271.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (715 samples, 0.65%)</title><rect x="91.8323%" y="277" width="0.6457%" height="15" fill="rgb(213,118,47)" fg:x="101685" fg:w="715"/><text x="92.0823%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (489 samples, 0.44%)</title><rect x="92.0364%" y="261" width="0.4416%" height="15" fill="rgb(243,124,49)" fg:x="101911" fg:w="489"/><text x="92.2864%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (489 samples, 0.44%)</title><rect x="92.0364%" y="245" width="0.4416%" height="15" fill="rgb(221,30,28)" fg:x="101911" fg:w="489"/><text x="92.2864%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (946 samples, 0.85%)</title><rect x="91.6300%" y="293" width="0.8543%" height="15" fill="rgb(246,37,13)" fg:x="101461" fg:w="946"/><text x="91.8800%" y="303.50"></text></g><g><title>async_executor::steal (1,028 samples, 0.93%)</title><rect x="91.5578%" y="309" width="0.9284%" height="15" fill="rgb(249,66,14)" fg:x="101381" fg:w="1028"/><text x="91.8078%" y="319.50"></text></g><g><title>concurrent_queue::full_fence (1,038 samples, 0.94%)</title><rect x="92.8754%" y="277" width="0.9374%" height="15" fill="rgb(213,166,5)" fg:x="102840" fg:w="1038"/><text x="93.1254%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (977 samples, 0.88%)</title><rect x="92.9305%" y="261" width="0.8823%" height="15" fill="rgb(221,66,24)" fg:x="102901" fg:w="977"/><text x="93.1805%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (977 samples, 0.88%)</title><rect x="92.9305%" y="245" width="0.8823%" height="15" fill="rgb(210,132,17)" fg:x="102901" fg:w="977"/><text x="93.1805%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (977 samples, 0.88%)</title><rect x="92.9305%" y="229" width="0.8823%" height="15" fill="rgb(243,202,5)" fg:x="102901" fg:w="977"/><text x="93.1805%" y="239.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,456 samples, 1.31%)</title><rect x="92.5900%" y="293" width="1.3149%" height="15" fill="rgb(233,70,48)" fg:x="102524" fg:w="1456"/><text x="92.8400%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (102 samples, 0.09%)</title><rect x="93.8128%" y="277" width="0.0921%" height="15" fill="rgb(238,41,26)" fg:x="103878" fg:w="102"/><text x="94.0628%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (102 samples, 0.09%)</title><rect x="93.8128%" y="261" width="0.0921%" height="15" fill="rgb(241,19,31)" fg:x="103878" fg:w="102"/><text x="94.0628%" y="271.50"></text></g><g><title>concurrent_queue::full_fence (139 samples, 0.13%)</title><rect x="93.9266%" y="277" width="0.1255%" height="15" fill="rgb(214,76,10)" fg:x="104004" fg:w="139"/><text x="94.1766%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (136 samples, 0.12%)</title><rect x="93.9293%" y="261" width="0.1228%" height="15" fill="rgb(254,202,22)" fg:x="104007" fg:w="136"/><text x="94.1793%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (136 samples, 0.12%)</title><rect x="93.9293%" y="245" width="0.1228%" height="15" fill="rgb(214,72,24)" fg:x="104007" fg:w="136"/><text x="94.1793%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (136 samples, 0.12%)</title><rect x="93.9293%" y="229" width="0.1228%" height="15" fill="rgb(221,92,46)" fg:x="104007" fg:w="136"/><text x="94.1793%" y="239.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (15 samples, 0.01%)</title><rect x="94.0576%" y="277" width="0.0135%" height="15" fill="rgb(246,13,50)" fg:x="104149" fg:w="15"/><text x="94.3076%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.01%)</title><rect x="94.0585%" y="261" width="0.0126%" height="15" fill="rgb(240,165,38)" fg:x="104150" fg:w="14"/><text x="94.3085%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="94.0585%" y="245" width="0.0126%" height="15" fill="rgb(241,24,51)" fg:x="104150" fg:w="14"/><text x="94.3085%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (12 samples, 0.01%)</title><rect x="94.0747%" y="277" width="0.0108%" height="15" fill="rgb(227,51,44)" fg:x="104168" fg:w="12"/><text x="94.3247%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="94.0747%" y="261" width="0.0108%" height="15" fill="rgb(231,121,3)" fg:x="104168" fg:w="12"/><text x="94.3247%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (55 samples, 0.05%)</title><rect x="94.0856%" y="277" width="0.0497%" height="15" fill="rgb(245,3,41)" fg:x="104180" fg:w="55"/><text x="94.3356%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (55 samples, 0.05%)</title><rect x="94.0856%" y="261" width="0.0497%" height="15" fill="rgb(214,13,26)" fg:x="104180" fg:w="55"/><text x="94.3356%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (91 samples, 0.08%)</title><rect x="94.1352%" y="277" width="0.0822%" height="15" fill="rgb(252,75,11)" fg:x="104235" fg:w="91"/><text x="94.3852%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_or (91 samples, 0.08%)</title><rect x="94.1352%" y="261" width="0.0822%" height="15" fill="rgb(218,226,17)" fg:x="104235" fg:w="91"/><text x="94.3852%" y="271.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,025 samples, 1.83%)</title><rect x="92.4862%" y="309" width="1.8288%" height="15" fill="rgb(248,89,38)" fg:x="102409" fg:w="2025"/><text x="92.7362%" y="319.50">c..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (454 samples, 0.41%)</title><rect x="93.9049%" y="293" width="0.4100%" height="15" fill="rgb(237,73,46)" fg:x="103980" fg:w="454"/><text x="94.1549%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (108 samples, 0.10%)</title><rect x="94.2174%" y="277" width="0.0975%" height="15" fill="rgb(242,78,33)" fg:x="104326" fg:w="108"/><text x="94.4674%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (108 samples, 0.10%)</title><rect x="94.2174%" y="261" width="0.0975%" height="15" fill="rgb(235,60,3)" fg:x="104326" fg:w="108"/><text x="94.4674%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (120 samples, 0.11%)</title><rect x="94.3267%" y="245" width="0.1084%" height="15" fill="rgb(216,172,19)" fg:x="104447" fg:w="120"/><text x="94.5767%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (120 samples, 0.11%)</title><rect x="94.3267%" y="229" width="0.1084%" height="15" fill="rgb(227,6,42)" fg:x="104447" fg:w="120"/><text x="94.5767%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (267 samples, 0.24%)</title><rect x="94.3149%" y="309" width="0.2411%" height="15" fill="rgb(223,207,42)" fg:x="104434" fg:w="267"/><text x="94.5649%" y="319.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 samples, 0.24%)</title><rect x="94.3149%" y="293" width="0.2411%" height="15" fill="rgb(246,138,30)" fg:x="104434" fg:w="267"/><text x="94.5649%" y="303.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (261 samples, 0.24%)</title><rect x="94.3204%" y="277" width="0.2357%" height="15" fill="rgb(251,199,47)" fg:x="104440" fg:w="261"/><text x="94.5704%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (254 samples, 0.23%)</title><rect x="94.3267%" y="261" width="0.2294%" height="15" fill="rgb(228,218,44)" fg:x="104447" fg:w="254"/><text x="94.5767%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (134 samples, 0.12%)</title><rect x="94.4351%" y="245" width="0.1210%" height="15" fill="rgb(220,68,6)" fg:x="104567" fg:w="134"/><text x="94.6851%" y="255.50"></text></g><g><title>__GI___pthread_rwlock_unlock (134 samples, 0.12%)</title><rect x="94.4351%" y="229" width="0.1210%" height="15" fill="rgb(240,60,26)" fg:x="104567" fg:w="134"/><text x="94.6851%" y="239.50"></text></g><g><title>fastrand::usize (21 samples, 0.02%)</title><rect x="94.5561%" y="309" width="0.0190%" height="15" fill="rgb(211,200,19)" fg:x="104701" fg:w="21"/><text x="94.8061%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.02%)</title><rect x="94.5570%" y="293" width="0.0181%" height="15" fill="rgb(242,145,30)" fg:x="104702" fg:w="20"/><text x="94.8070%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.02%)</title><rect x="94.5588%" y="277" width="0.0163%" height="15" fill="rgb(225,64,13)" fg:x="104704" fg:w="18"/><text x="94.8088%" y="287.50"></text></g><g><title>fastrand::usize::{{closure}} (15 samples, 0.01%)</title><rect x="94.5615%" y="261" width="0.0135%" height="15" fill="rgb(218,103,35)" fg:x="104707" fg:w="15"/><text x="94.8115%" y="271.50"></text></g><g><title>fastrand::Rng::usize (15 samples, 0.01%)</title><rect x="94.5615%" y="245" width="0.0135%" height="15" fill="rgb(216,93,46)" fg:x="104707" fg:w="15"/><text x="94.8115%" y="255.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (13 samples, 0.01%)</title><rect x="94.5633%" y="229" width="0.0117%" height="15" fill="rgb(225,159,27)" fg:x="104709" fg:w="13"/><text x="94.8133%" y="239.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (255 samples, 0.23%)</title><rect x="94.6130%" y="261" width="0.2303%" height="15" fill="rgb(225,204,11)" fg:x="104764" fg:w="255"/><text x="94.8630%" y="271.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (4,244 samples, 3.83%)</title><rect x="91.0918%" y="325" width="3.8328%" height="15" fill="rgb(205,56,4)" fg:x="100865" fg:w="4244"/><text x="91.3418%" y="335.50">asyn..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (387 samples, 0.35%)</title><rect x="94.5750%" y="309" width="0.3495%" height="15" fill="rgb(206,6,35)" fg:x="104722" fg:w="387"/><text x="94.8250%" y="319.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (381 samples, 0.34%)</title><rect x="94.5805%" y="293" width="0.3441%" height="15" fill="rgb(247,73,52)" fg:x="104728" fg:w="381"/><text x="94.8305%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (363 samples, 0.33%)</title><rect x="94.5967%" y="277" width="0.3278%" height="15" fill="rgb(246,97,4)" fg:x="104746" fg:w="363"/><text x="94.8467%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (90 samples, 0.08%)</title><rect x="94.8433%" y="261" width="0.0813%" height="15" fill="rgb(212,37,15)" fg:x="105019" fg:w="90"/><text x="95.0933%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_add (90 samples, 0.08%)</title><rect x="94.8433%" y="245" width="0.0813%" height="15" fill="rgb(208,130,40)" fg:x="105019" fg:w="90"/><text x="95.0933%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (25 samples, 0.02%)</title><rect x="94.9318%" y="309" width="0.0226%" height="15" fill="rgb(236,55,29)" fg:x="105117" fg:w="25"/><text x="95.1818%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="94.9318%" y="293" width="0.0226%" height="15" fill="rgb(209,156,45)" fg:x="105117" fg:w="25"/><text x="95.1818%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="94.9318%" y="277" width="0.0226%" height="15" fill="rgb(249,107,4)" fg:x="105117" fg:w="25"/><text x="95.1818%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (23 samples, 0.02%)</title><rect x="94.9336%" y="261" width="0.0208%" height="15" fill="rgb(227,7,13)" fg:x="105119" fg:w="23"/><text x="95.1836%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (23 samples, 0.02%)</title><rect x="94.9336%" y="245" width="0.0208%" height="15" fill="rgb(250,129,14)" fg:x="105119" fg:w="23"/><text x="95.1836%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (33 samples, 0.03%)</title><rect x="94.9543%" y="309" width="0.0298%" height="15" fill="rgb(229,92,13)" fg:x="105142" fg:w="33"/><text x="95.2043%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.03%)</title><rect x="94.9543%" y="293" width="0.0298%" height="15" fill="rgb(245,98,39)" fg:x="105142" fg:w="33"/><text x="95.2043%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="94.9887%" y="229" width="0.0126%" height="15" fill="rgb(234,135,48)" fg:x="105180" fg:w="14"/><text x="95.2387%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="94.9887%" y="213" width="0.0126%" height="15" fill="rgb(230,98,28)" fg:x="105180" fg:w="14"/><text x="95.2387%" y="223.50"></text></g><g><title>async_io::reactor::Reactor::notify (33 samples, 0.03%)</title><rect x="94.9860%" y="261" width="0.0298%" height="15" fill="rgb(223,121,0)" fg:x="105177" fg:w="33"/><text x="95.2360%" y="271.50"></text></g><g><title>polling::Poller::notify (30 samples, 0.03%)</title><rect x="94.9887%" y="245" width="0.0271%" height="15" fill="rgb(234,173,33)" fg:x="105180" fg:w="30"/><text x="95.2387%" y="255.50"></text></g><g><title>polling::epoll::Poller::notify (16 samples, 0.01%)</title><rect x="95.0013%" y="229" width="0.0144%" height="15" fill="rgb(245,47,8)" fg:x="105194" fg:w="16"/><text x="95.2513%" y="239.50"></text></g><g><title>__libc_write (15 samples, 0.01%)</title><rect x="95.0022%" y="213" width="0.0135%" height="15" fill="rgb(205,17,20)" fg:x="105195" fg:w="15"/><text x="95.2522%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (68 samples, 0.06%)</title><rect x="95.0582%" y="229" width="0.0614%" height="15" fill="rgb(232,151,16)" fg:x="105257" fg:w="68"/><text x="95.3082%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.06%)</title><rect x="95.0582%" y="213" width="0.0614%" height="15" fill="rgb(208,30,32)" fg:x="105257" fg:w="68"/><text x="95.3082%" y="223.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (146 samples, 0.13%)</title><rect x="95.1196%" y="229" width="0.1319%" height="15" fill="rgb(254,26,3)" fg:x="105325" fg:w="146"/><text x="95.3696%" y="239.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (146 samples, 0.13%)</title><rect x="95.1196%" y="213" width="0.1319%" height="15" fill="rgb(240,177,30)" fg:x="105325" fg:w="146"/><text x="95.3696%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (146 samples, 0.13%)</title><rect x="95.1196%" y="197" width="0.1319%" height="15" fill="rgb(248,76,44)" fg:x="105325" fg:w="146"/><text x="95.3696%" y="207.50"></text></g><g><title>__pthread_cond_signal (146 samples, 0.13%)</title><rect x="95.1196%" y="181" width="0.1319%" height="15" fill="rgb(241,186,54)" fg:x="105325" fg:w="146"/><text x="95.3696%" y="191.50"></text></g><g><title>parking::Unparker::unpark (344 samples, 0.31%)</title><rect x="95.0221%" y="261" width="0.3107%" height="15" fill="rgb(249,171,29)" fg:x="105217" fg:w="344"/><text x="95.2721%" y="271.50"></text></g><g><title>parking::Inner::unpark (317 samples, 0.29%)</title><rect x="95.0465%" y="245" width="0.2863%" height="15" fill="rgb(237,151,44)" fg:x="105244" fg:w="317"/><text x="95.2965%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (90 samples, 0.08%)</title><rect x="95.2515%" y="229" width="0.0813%" height="15" fill="rgb(228,174,30)" fg:x="105471" fg:w="90"/><text x="95.5015%" y="239.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (87 samples, 0.08%)</title><rect x="95.2542%" y="213" width="0.0786%" height="15" fill="rgb(252,14,37)" fg:x="105474" fg:w="87"/><text x="95.5042%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (87 samples, 0.08%)</title><rect x="95.2542%" y="197" width="0.0786%" height="15" fill="rgb(207,111,40)" fg:x="105474" fg:w="87"/><text x="95.5042%" y="207.50"></text></g><g><title>__GI___pthread_mutex_lock (87 samples, 0.08%)</title><rect x="95.2542%" y="181" width="0.0786%" height="15" fill="rgb(248,171,54)" fg:x="105474" fg:w="87"/><text x="95.5042%" y="191.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (394 samples, 0.36%)</title><rect x="94.9851%" y="277" width="0.3558%" height="15" fill="rgb(211,127,2)" fg:x="105176" fg:w="394"/><text x="95.2351%" y="287.50"></text></g><g><title>core::task::wake::Waker::wake (436 samples, 0.39%)</title><rect x="94.9842%" y="309" width="0.3938%" height="15" fill="rgb(236,87,47)" fg:x="105175" fg:w="436"/><text x="95.2342%" y="319.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (436 samples, 0.39%)</title><rect x="94.9842%" y="293" width="0.3938%" height="15" fill="rgb(223,190,45)" fg:x="105175" fg:w="436"/><text x="95.2342%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (41 samples, 0.04%)</title><rect x="95.3409%" y="277" width="0.0370%" height="15" fill="rgb(215,5,16)" fg:x="105570" fg:w="41"/><text x="95.5909%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="95.3409%" y="261" width="0.0370%" height="15" fill="rgb(252,82,33)" fg:x="105570" fg:w="41"/><text x="95.5909%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (40 samples, 0.04%)</title><rect x="95.3418%" y="245" width="0.0361%" height="15" fill="rgb(247,213,44)" fg:x="105571" fg:w="40"/><text x="95.5918%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (40 samples, 0.04%)</title><rect x="95.3418%" y="229" width="0.0361%" height="15" fill="rgb(205,196,44)" fg:x="105571" fg:w="40"/><text x="95.5918%" y="239.50"></text></g><g><title>async_executor::State::notify (524 samples, 0.47%)</title><rect x="94.9245%" y="325" width="0.4732%" height="15" fill="rgb(237,96,54)" fg:x="105109" fg:w="524"/><text x="95.1745%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (22 samples, 0.02%)</title><rect x="95.3779%" y="309" width="0.0199%" height="15" fill="rgb(230,113,34)" fg:x="105611" fg:w="22"/><text x="95.6279%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.02%)</title><rect x="95.3797%" y="293" width="0.0181%" height="15" fill="rgb(221,224,12)" fg:x="105613" fg:w="20"/><text x="95.6297%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (20 samples, 0.02%)</title><rect x="95.3797%" y="277" width="0.0181%" height="15" fill="rgb(219,112,44)" fg:x="105613" fg:w="20"/><text x="95.6297%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (20 samples, 0.02%)</title><rect x="95.3797%" y="261" width="0.0181%" height="15" fill="rgb(210,31,13)" fg:x="105613" fg:w="20"/><text x="95.6297%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (89 samples, 0.08%)</title><rect x="95.3996%" y="293" width="0.0804%" height="15" fill="rgb(230,25,16)" fg:x="105635" fg:w="89"/><text x="95.6496%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (86 samples, 0.08%)</title><rect x="95.4023%" y="277" width="0.0777%" height="15" fill="rgb(246,108,53)" fg:x="105638" fg:w="86"/><text x="95.6523%" y="287.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (86 samples, 0.08%)</title><rect x="95.4023%" y="261" width="0.0777%" height="15" fill="rgb(241,172,50)" fg:x="105638" fg:w="86"/><text x="95.6523%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (86 samples, 0.08%)</title><rect x="95.4023%" y="245" width="0.0777%" height="15" fill="rgb(235,141,10)" fg:x="105638" fg:w="86"/><text x="95.6523%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (85 samples, 0.08%)</title><rect x="95.4032%" y="229" width="0.0768%" height="15" fill="rgb(220,174,43)" fg:x="105639" fg:w="85"/><text x="95.6532%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (85 samples, 0.08%)</title><rect x="95.4032%" y="213" width="0.0768%" height="15" fill="rgb(215,181,40)" fg:x="105639" fg:w="85"/><text x="95.6532%" y="223.50"></text></g><g><title>async_executor::Sleepers::insert (103 samples, 0.09%)</title><rect x="95.3978%" y="309" width="0.0930%" height="15" fill="rgb(230,97,2)" fg:x="105633" fg:w="103"/><text x="95.6478%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.01%)</title><rect x="95.4800%" y="293" width="0.0108%" height="15" fill="rgb(211,25,27)" fg:x="105724" fg:w="12"/><text x="95.7300%" y="303.50"></text></g><g><title>core::ptr::write (12 samples, 0.01%)</title><rect x="95.4800%" y="277" width="0.0108%" height="15" fill="rgb(230,87,26)" fg:x="105724" fg:w="12"/><text x="95.7300%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="95.5305%" y="293" width="0.0163%" height="15" fill="rgb(227,160,17)" fg:x="105780" fg:w="18"/><text x="95.7805%" y="303.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (35 samples, 0.03%)</title><rect x="95.5468%" y="293" width="0.0316%" height="15" fill="rgb(244,85,34)" fg:x="105798" fg:w="35"/><text x="95.7968%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (35 samples, 0.03%)</title><rect x="95.5468%" y="277" width="0.0316%" height="15" fill="rgb(207,70,0)" fg:x="105798" fg:w="35"/><text x="95.7968%" y="287.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="95.5495%" y="261" width="0.0289%" height="15" fill="rgb(223,129,7)" fg:x="105801" fg:w="32"/><text x="95.7995%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="95.5495%" y="245" width="0.0289%" height="15" fill="rgb(246,105,7)" fg:x="105801" fg:w="32"/><text x="95.7995%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (32 samples, 0.03%)</title><rect x="95.5495%" y="229" width="0.0289%" height="15" fill="rgb(215,154,42)" fg:x="105801" fg:w="32"/><text x="95.7995%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (32 samples, 0.03%)</title><rect x="95.5495%" y="213" width="0.0289%" height="15" fill="rgb(220,215,30)" fg:x="105801" fg:w="32"/><text x="95.7995%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.02%)</title><rect x="95.5784%" y="293" width="0.0199%" height="15" fill="rgb(228,81,51)" fg:x="105833" fg:w="22"/><text x="95.8284%" y="303.50"></text></g><g><title>core::ptr::write (21 samples, 0.02%)</title><rect x="95.5793%" y="277" width="0.0190%" height="15" fill="rgb(247,71,54)" fg:x="105834" fg:w="21"/><text x="95.8293%" y="287.50"></text></g><g><title>async_executor::Sleepers::update (119 samples, 0.11%)</title><rect x="95.4962%" y="309" width="0.1075%" height="15" fill="rgb(234,176,34)" fg:x="105742" fg:w="119"/><text x="95.7462%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (144 samples, 0.13%)</title><rect x="95.6037%" y="309" width="0.1300%" height="15" fill="rgb(241,103,54)" fg:x="105861" fg:w="144"/><text x="95.8537%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 0.13%)</title><rect x="95.6037%" y="293" width="0.1300%" height="15" fill="rgb(228,22,34)" fg:x="105861" fg:w="144"/><text x="95.8537%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (141 samples, 0.13%)</title><rect x="95.6064%" y="277" width="0.1273%" height="15" fill="rgb(241,179,48)" fg:x="105864" fg:w="141"/><text x="95.8564%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (140 samples, 0.13%)</title><rect x="95.6073%" y="261" width="0.1264%" height="15" fill="rgb(235,167,37)" fg:x="105865" fg:w="140"/><text x="95.8573%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (139 samples, 0.13%)</title><rect x="95.6082%" y="245" width="0.1255%" height="15" fill="rgb(213,109,30)" fg:x="105866" fg:w="139"/><text x="95.8582%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (178 samples, 0.16%)</title><rect x="95.7337%" y="309" width="0.1608%" height="15" fill="rgb(222,172,16)" fg:x="106005" fg:w="178"/><text x="95.9837%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (178 samples, 0.16%)</title><rect x="95.7337%" y="293" width="0.1608%" height="15" fill="rgb(233,192,5)" fg:x="106005" fg:w="178"/><text x="95.9837%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (94 samples, 0.08%)</title><rect x="95.8945%" y="309" width="0.0849%" height="15" fill="rgb(247,189,41)" fg:x="106183" fg:w="94"/><text x="96.1445%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_store (94 samples, 0.08%)</title><rect x="95.8945%" y="293" width="0.0849%" height="15" fill="rgb(218,134,47)" fg:x="106183" fg:w="94"/><text x="96.1445%" y="303.50"></text></g><g><title>async_executor::Ticker::sleep (996 samples, 0.90%)</title><rect x="95.3978%" y="325" width="0.8995%" height="15" fill="rgb(216,29,3)" fg:x="105633" fg:w="996"/><text x="95.6478%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (352 samples, 0.32%)</title><rect x="95.9794%" y="309" width="0.3179%" height="15" fill="rgb(246,140,12)" fg:x="106277" fg:w="352"/><text x="96.2294%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (344 samples, 0.31%)</title><rect x="95.9866%" y="293" width="0.3107%" height="15" fill="rgb(230,136,11)" fg:x="106285" fg:w="344"/><text x="96.2366%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (337 samples, 0.30%)</title><rect x="95.9929%" y="277" width="0.3043%" height="15" fill="rgb(247,22,47)" fg:x="106292" fg:w="337"/><text x="96.2429%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (337 samples, 0.30%)</title><rect x="95.9929%" y="261" width="0.3043%" height="15" fill="rgb(218,84,22)" fg:x="106292" fg:w="337"/><text x="96.2429%" y="271.50"></text></g><g><title>async_executor::Sleepers::remove (53 samples, 0.05%)</title><rect x="96.3018%" y="309" width="0.0479%" height="15" fill="rgb(216,87,39)" fg:x="106634" fg:w="53"/><text x="96.5518%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (25 samples, 0.02%)</title><rect x="96.3271%" y="293" width="0.0226%" height="15" fill="rgb(221,178,8)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (25 samples, 0.02%)</title><rect x="96.3271%" y="277" width="0.0226%" height="15" fill="rgb(230,42,11)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="96.3271%" y="261" width="0.0226%" height="15" fill="rgb(237,229,4)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (25 samples, 0.02%)</title><rect x="96.3271%" y="245" width="0.0226%" height="15" fill="rgb(222,31,33)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="255.50"></text></g><g><title>core::mem::drop (25 samples, 0.02%)</title><rect x="96.3271%" y="229" width="0.0226%" height="15" fill="rgb(210,17,39)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="96.3271%" y="213" width="0.0226%" height="15" fill="rgb(244,93,20)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="96.3271%" y="197" width="0.0226%" height="15" fill="rgb(210,40,47)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="96.3271%" y="181" width="0.0226%" height="15" fill="rgb(239,211,47)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="96.3271%" y="165" width="0.0226%" height="15" fill="rgb(251,223,49)" fg:x="106662" fg:w="25"/><text x="96.5771%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (25 samples, 0.02%)</title><rect x="96.3496%" y="309" width="0.0226%" height="15" fill="rgb(221,149,5)" fg:x="106687" fg:w="25"/><text x="96.5996%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="96.3496%" y="293" width="0.0226%" height="15" fill="rgb(219,224,51)" fg:x="106687" fg:w="25"/><text x="96.5996%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="96.3515%" y="277" width="0.0208%" height="15" fill="rgb(223,7,8)" fg:x="106689" fg:w="23"/><text x="96.6015%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (23 samples, 0.02%)</title><rect x="96.3515%" y="261" width="0.0208%" height="15" fill="rgb(241,217,22)" fg:x="106689" fg:w="23"/><text x="96.6015%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock (23 samples, 0.02%)</title><rect x="96.3515%" y="245" width="0.0208%" height="15" fill="rgb(248,209,0)" fg:x="106689" fg:w="23"/><text x="96.6015%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (37 samples, 0.03%)</title><rect x="96.3722%" y="309" width="0.0334%" height="15" fill="rgb(217,205,4)" fg:x="106712" fg:w="37"/><text x="96.6222%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (37 samples, 0.03%)</title><rect x="96.3722%" y="293" width="0.0334%" height="15" fill="rgb(228,124,39)" fg:x="106712" fg:w="37"/><text x="96.6222%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (37 samples, 0.03%)</title><rect x="96.4056%" y="309" width="0.0334%" height="15" fill="rgb(250,116,42)" fg:x="106749" fg:w="37"/><text x="96.6556%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (37 samples, 0.03%)</title><rect x="96.4056%" y="293" width="0.0334%" height="15" fill="rgb(223,202,9)" fg:x="106749" fg:w="37"/><text x="96.6556%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,020 samples, 5.44%)</title><rect x="91.0701%" y="389" width="5.4367%" height="15" fill="rgb(242,222,40)" fg:x="100841" fg:w="6020"/><text x="91.3201%" y="399.50">&lt;core::..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (6,020 samples, 5.44%)</title><rect x="91.0701%" y="373" width="5.4367%" height="15" fill="rgb(229,99,46)" fg:x="100841" fg:w="6020"/><text x="91.3201%" y="383.50">async_e..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (6,008 samples, 5.43%)</title><rect x="91.0809%" y="357" width="5.4259%" height="15" fill="rgb(225,56,46)" fg:x="100853" fg:w="6008"/><text x="91.3309%" y="367.50">&lt;future..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (5,999 samples, 5.42%)</title><rect x="91.0891%" y="341" width="5.4177%" height="15" fill="rgb(227,94,5)" fg:x="100862" fg:w="5999"/><text x="91.3391%" y="351.50">async_e..</text></g><g><title>async_executor::Ticker::wake (232 samples, 0.21%)</title><rect x="96.2973%" y="325" width="0.2095%" height="15" fill="rgb(205,112,38)" fg:x="106629" fg:w="232"/><text x="96.5473%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (75 samples, 0.07%)</title><rect x="96.4391%" y="309" width="0.0677%" height="15" fill="rgb(231,133,46)" fg:x="106786" fg:w="75"/><text x="96.6891%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (73 samples, 0.07%)</title><rect x="96.4409%" y="293" width="0.0659%" height="15" fill="rgb(217,16,9)" fg:x="106788" fg:w="73"/><text x="96.6909%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (69 samples, 0.06%)</title><rect x="96.4445%" y="277" width="0.0623%" height="15" fill="rgb(249,173,9)" fg:x="106792" fg:w="69"/><text x="96.6945%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (69 samples, 0.06%)</title><rect x="96.4445%" y="261" width="0.0623%" height="15" fill="rgb(205,163,53)" fg:x="106792" fg:w="69"/><text x="96.6945%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,068 samples, 5.48%)</title><rect x="91.0430%" y="421" width="5.4800%" height="15" fill="rgb(217,54,41)" fg:x="100811" fg:w="6068"/><text x="91.2930%" y="431.50">&lt;core::..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (6,066 samples, 5.48%)</title><rect x="91.0448%" y="405" width="5.4782%" height="15" fill="rgb(228,216,12)" fg:x="100813" fg:w="6066"/><text x="91.2948%" y="415.50">async_e..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.02%)</title><rect x="96.5068%" y="389" width="0.0163%" height="15" fill="rgb(244,228,15)" fg:x="106861" fg:w="18"/><text x="96.7568%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.02%)</title><rect x="96.5068%" y="373" width="0.0163%" height="15" fill="rgb(221,176,53)" fg:x="106861" fg:w="18"/><text x="96.7568%" y="383.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.04%)</title><rect x="96.7001%" y="277" width="0.0352%" height="15" fill="rgb(205,94,34)" fg:x="107075" fg:w="39"/><text x="96.9501%" y="287.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (26 samples, 0.02%)</title><rect x="96.7389%" y="261" width="0.0235%" height="15" fill="rgb(213,110,48)" fg:x="107118" fg:w="26"/><text x="96.9889%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="96.7389%" y="245" width="0.0235%" height="15" fill="rgb(236,142,28)" fg:x="107118" fg:w="26"/><text x="96.9889%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (163 samples, 0.15%)</title><rect x="96.6242%" y="373" width="0.1472%" height="15" fill="rgb(225,135,29)" fg:x="106991" fg:w="163"/><text x="96.8742%" y="383.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (157 samples, 0.14%)</title><rect x="96.6296%" y="357" width="0.1418%" height="15" fill="rgb(252,45,31)" fg:x="106997" fg:w="157"/><text x="96.8796%" y="367.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (84 samples, 0.08%)</title><rect x="96.6955%" y="341" width="0.0759%" height="15" fill="rgb(211,187,50)" fg:x="107070" fg:w="84"/><text x="96.9455%" y="351.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (84 samples, 0.08%)</title><rect x="96.6955%" y="325" width="0.0759%" height="15" fill="rgb(229,109,7)" fg:x="107070" fg:w="84"/><text x="96.9455%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (84 samples, 0.08%)</title><rect x="96.6955%" y="309" width="0.0759%" height="15" fill="rgb(251,131,51)" fg:x="107070" fg:w="84"/><text x="96.9455%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (82 samples, 0.07%)</title><rect x="96.6973%" y="293" width="0.0741%" height="15" fill="rgb(251,180,35)" fg:x="107072" fg:w="82"/><text x="96.9473%" y="303.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (36 samples, 0.03%)</title><rect x="96.7389%" y="277" width="0.0325%" height="15" fill="rgb(211,46,32)" fg:x="107118" fg:w="36"/><text x="96.9889%" y="287.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (164 samples, 0.15%)</title><rect x="96.6242%" y="389" width="0.1481%" height="15" fill="rgb(248,123,17)" fg:x="106991" fg:w="164"/><text x="96.8742%" y="399.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (22 samples, 0.02%)</title><rect x="96.7723%" y="389" width="0.0199%" height="15" fill="rgb(227,141,18)" fg:x="107155" fg:w="22"/><text x="97.0223%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.02%)</title><rect x="96.7750%" y="373" width="0.0172%" height="15" fill="rgb(216,102,9)" fg:x="107158" fg:w="19"/><text x="97.0250%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.02%)</title><rect x="96.7750%" y="357" width="0.0172%" height="15" fill="rgb(253,47,13)" fg:x="107158" fg:w="19"/><text x="97.0250%" y="367.50"></text></g><g><title>async_executor::State::notify (13 samples, 0.01%)</title><rect x="96.7922%" y="357" width="0.0117%" height="15" fill="rgb(226,93,23)" fg:x="107177" fg:w="13"/><text x="97.0422%" y="367.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (21 samples, 0.02%)</title><rect x="96.7922%" y="373" width="0.0190%" height="15" fill="rgb(247,104,17)" fg:x="107177" fg:w="21"/><text x="97.0422%" y="383.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (23 samples, 0.02%)</title><rect x="96.7922%" y="389" width="0.0208%" height="15" fill="rgb(233,203,26)" fg:x="107177" fg:w="23"/><text x="97.0422%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (146 samples, 0.13%)</title><rect x="96.8129%" y="389" width="0.1319%" height="15" fill="rgb(244,98,49)" fg:x="107200" fg:w="146"/><text x="97.0629%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (146 samples, 0.13%)</title><rect x="96.8129%" y="373" width="0.1319%" height="15" fill="rgb(235,134,22)" fg:x="107200" fg:w="146"/><text x="97.0629%" y="383.50"></text></g><g><title>async_task::runnable::Runnable::run (471 samples, 0.43%)</title><rect x="96.5239%" y="421" width="0.4254%" height="15" fill="rgb(221,70,32)" fg:x="106880" fg:w="471"/><text x="96.7739%" y="431.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (421 samples, 0.38%)</title><rect x="96.5691%" y="405" width="0.3802%" height="15" fill="rgb(238,15,50)" fg:x="106930" fg:w="421"/><text x="96.8191%" y="415.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (6,579 samples, 5.94%)</title><rect x="91.0403%" y="469" width="5.9415%" height="15" fill="rgb(215,221,48)" fg:x="100808" fg:w="6579"/><text x="91.2903%" y="479.50">&lt;futures..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,579 samples, 5.94%)</title><rect x="91.0403%" y="453" width="5.9415%" height="15" fill="rgb(236,73,3)" fg:x="100808" fg:w="6579"/><text x="91.2903%" y="463.50">&lt;core::f..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (6,579 samples, 5.94%)</title><rect x="91.0403%" y="437" width="5.9415%" height="15" fill="rgb(250,107,11)" fg:x="100808" fg:w="6579"/><text x="91.2903%" y="447.50">async_ex..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (36 samples, 0.03%)</title><rect x="96.9493%" y="421" width="0.0325%" height="15" fill="rgb(242,39,14)" fg:x="107351" fg:w="36"/><text x="97.1993%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (36 samples, 0.03%)</title><rect x="96.9493%" y="405" width="0.0325%" height="15" fill="rgb(248,164,37)" fg:x="107351" fg:w="36"/><text x="97.1993%" y="415.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (6,589 samples, 5.95%)</title><rect x="91.0322%" y="485" width="5.9506%" height="15" fill="rgb(217,60,12)" fg:x="100799" fg:w="6589"/><text x="91.2822%" y="495.50">async_ex..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.0559%" y="277" width="0.0135%" height="15" fill="rgb(240,125,29)" fg:x="107469" fg:w="15"/><text x="97.3059%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (15 samples, 0.01%)</title><rect x="97.0559%" y="261" width="0.0135%" height="15" fill="rgb(208,207,28)" fg:x="107469" fg:w="15"/><text x="97.3059%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.01%)</title><rect x="97.0559%" y="245" width="0.0135%" height="15" fill="rgb(209,159,27)" fg:x="107469" fg:w="15"/><text x="97.3059%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.01%)</title><rect x="97.0559%" y="229" width="0.0135%" height="15" fill="rgb(251,176,53)" fg:x="107469" fg:w="15"/><text x="97.3059%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.01%)</title><rect x="97.0559%" y="213" width="0.0135%" height="15" fill="rgb(211,85,7)" fg:x="107469" fg:w="15"/><text x="97.3059%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.01%)</title><rect x="97.0568%" y="197" width="0.0126%" height="15" fill="rgb(216,64,54)" fg:x="107470" fg:w="14"/><text x="97.3068%" y="207.50"></text></g><g><title>concurrent_queue::full_fence (36 samples, 0.03%)</title><rect x="97.0965%" y="245" width="0.0325%" height="15" fill="rgb(217,54,24)" fg:x="107514" fg:w="36"/><text x="97.3465%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (35 samples, 0.03%)</title><rect x="97.0974%" y="229" width="0.0316%" height="15" fill="rgb(208,206,53)" fg:x="107515" fg:w="35"/><text x="97.3474%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (35 samples, 0.03%)</title><rect x="97.0974%" y="213" width="0.0316%" height="15" fill="rgb(251,74,39)" fg:x="107515" fg:w="35"/><text x="97.3474%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="97.0974%" y="197" width="0.0316%" height="15" fill="rgb(226,47,5)" fg:x="107515" fg:w="35"/><text x="97.3474%" y="207.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (123 samples, 0.11%)</title><rect x="97.0757%" y="261" width="0.1111%" height="15" fill="rgb(234,111,33)" fg:x="107491" fg:w="123"/><text x="97.3257%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (64 samples, 0.06%)</title><rect x="97.1290%" y="245" width="0.0578%" height="15" fill="rgb(251,14,10)" fg:x="107550" fg:w="64"/><text x="97.3790%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (64 samples, 0.06%)</title><rect x="97.1290%" y="229" width="0.0578%" height="15" fill="rgb(232,43,0)" fg:x="107550" fg:w="64"/><text x="97.3790%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (20 samples, 0.02%)</title><rect x="97.1922%" y="245" width="0.0181%" height="15" fill="rgb(222,68,43)" fg:x="107620" fg:w="20"/><text x="97.4422%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (20 samples, 0.02%)</title><rect x="97.1922%" y="229" width="0.0181%" height="15" fill="rgb(217,24,23)" fg:x="107620" fg:w="20"/><text x="97.4422%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (20 samples, 0.02%)</title><rect x="97.1922%" y="213" width="0.0181%" height="15" fill="rgb(229,209,14)" fg:x="107620" fg:w="20"/><text x="97.4422%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="97.1922%" y="197" width="0.0181%" height="15" fill="rgb(250,149,48)" fg:x="107620" fg:w="20"/><text x="97.4422%" y="207.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (174 samples, 0.16%)</title><rect x="97.0694%" y="277" width="0.1571%" height="15" fill="rgb(210,120,37)" fg:x="107484" fg:w="174"/><text x="97.3194%" y="287.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (44 samples, 0.04%)</title><rect x="97.1868%" y="261" width="0.0397%" height="15" fill="rgb(210,21,8)" fg:x="107614" fg:w="44"/><text x="97.4368%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.02%)</title><rect x="97.2112%" y="245" width="0.0154%" height="15" fill="rgb(243,145,7)" fg:x="107641" fg:w="17"/><text x="97.4612%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.02%)</title><rect x="97.2112%" y="229" width="0.0154%" height="15" fill="rgb(238,178,32)" fg:x="107641" fg:w="17"/><text x="97.4612%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="97.2293%" y="213" width="0.0144%" height="15" fill="rgb(222,4,10)" fg:x="107661" fg:w="16"/><text x="97.4793%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="97.2293%" y="197" width="0.0144%" height="15" fill="rgb(239,7,37)" fg:x="107661" fg:w="16"/><text x="97.4793%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (66 samples, 0.06%)</title><rect x="97.2266%" y="277" width="0.0596%" height="15" fill="rgb(215,31,37)" fg:x="107658" fg:w="66"/><text x="97.4766%" y="287.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.06%)</title><rect x="97.2266%" y="261" width="0.0596%" height="15" fill="rgb(224,83,33)" fg:x="107658" fg:w="66"/><text x="97.4766%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (63 samples, 0.06%)</title><rect x="97.2293%" y="245" width="0.0569%" height="15" fill="rgb(239,55,3)" fg:x="107661" fg:w="63"/><text x="97.4793%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (63 samples, 0.06%)</title><rect x="97.2293%" y="229" width="0.0569%" height="15" fill="rgb(247,92,11)" fg:x="107661" fg:w="63"/><text x="97.4793%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (47 samples, 0.04%)</title><rect x="97.2437%" y="213" width="0.0424%" height="15" fill="rgb(239,200,7)" fg:x="107677" fg:w="47"/><text x="97.4937%" y="223.50"></text></g><g><title>__GI___pthread_rwlock_unlock (47 samples, 0.04%)</title><rect x="97.2437%" y="197" width="0.0424%" height="15" fill="rgb(227,115,8)" fg:x="107677" fg:w="47"/><text x="97.4937%" y="207.50"></text></g><g><title>fastrand::usize (16 samples, 0.01%)</title><rect x="97.2862%" y="277" width="0.0144%" height="15" fill="rgb(215,189,27)" fg:x="107724" fg:w="16"/><text x="97.5362%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="97.2871%" y="261" width="0.0135%" height="15" fill="rgb(251,216,39)" fg:x="107725" fg:w="15"/><text x="97.5371%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.01%)</title><rect x="97.2880%" y="245" width="0.0126%" height="15" fill="rgb(207,29,47)" fg:x="107726" fg:w="14"/><text x="97.5380%" y="255.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (32 samples, 0.03%)</title><rect x="97.3042%" y="229" width="0.0289%" height="15" fill="rgb(210,71,34)" fg:x="107744" fg:w="32"/><text x="97.5542%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (334 samples, 0.30%)</title><rect x="97.0487%" y="293" width="0.3016%" height="15" fill="rgb(253,217,51)" fg:x="107461" fg:w="334"/><text x="97.2987%" y="303.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (55 samples, 0.05%)</title><rect x="97.3006%" y="277" width="0.0497%" height="15" fill="rgb(222,117,46)" fg:x="107740" fg:w="55"/><text x="97.5506%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (53 samples, 0.05%)</title><rect x="97.3024%" y="261" width="0.0479%" height="15" fill="rgb(226,132,6)" fg:x="107742" fg:w="53"/><text x="97.5524%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (53 samples, 0.05%)</title><rect x="97.3024%" y="245" width="0.0479%" height="15" fill="rgb(254,145,51)" fg:x="107742" fg:w="53"/><text x="97.5524%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (19 samples, 0.02%)</title><rect x="97.3331%" y="229" width="0.0172%" height="15" fill="rgb(231,199,27)" fg:x="107776" fg:w="19"/><text x="97.5831%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (19 samples, 0.02%)</title><rect x="97.3331%" y="213" width="0.0172%" height="15" fill="rgb(245,158,14)" fg:x="107776" fg:w="19"/><text x="97.5831%" y="223.50"></text></g><g><title>async_executor::Sleepers::update (20 samples, 0.02%)</title><rect x="97.3530%" y="277" width="0.0181%" height="15" fill="rgb(240,113,14)" fg:x="107798" fg:w="20"/><text x="97.6030%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (34 samples, 0.03%)</title><rect x="97.3711%" y="277" width="0.0307%" height="15" fill="rgb(210,20,13)" fg:x="107818" fg:w="34"/><text x="97.6211%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="97.3711%" y="261" width="0.0307%" height="15" fill="rgb(241,144,13)" fg:x="107818" fg:w="34"/><text x="97.6211%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="97.3720%" y="245" width="0.0298%" height="15" fill="rgb(235,43,34)" fg:x="107819" fg:w="33"/><text x="97.6220%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (31 samples, 0.03%)</title><rect x="97.3738%" y="229" width="0.0280%" height="15" fill="rgb(208,36,20)" fg:x="107821" fg:w="31"/><text x="97.6238%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (31 samples, 0.03%)</title><rect x="97.3738%" y="213" width="0.0280%" height="15" fill="rgb(239,204,10)" fg:x="107821" fg:w="31"/><text x="97.6238%" y="223.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (468 samples, 0.42%)</title><rect x="97.0261%" y="405" width="0.4227%" height="15" fill="rgb(217,84,43)" fg:x="107436" fg:w="468"/><text x="97.2761%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (460 samples, 0.42%)</title><rect x="97.0333%" y="389" width="0.4154%" height="15" fill="rgb(241,170,50)" fg:x="107444" fg:w="460"/><text x="97.2833%" y="399.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (459 samples, 0.41%)</title><rect x="97.0342%" y="373" width="0.4145%" height="15" fill="rgb(226,205,29)" fg:x="107445" fg:w="459"/><text x="97.2842%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (453 samples, 0.41%)</title><rect x="97.0396%" y="357" width="0.4091%" height="15" fill="rgb(233,113,1)" fg:x="107451" fg:w="453"/><text x="97.2896%" y="367.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (453 samples, 0.41%)</title><rect x="97.0396%" y="341" width="0.4091%" height="15" fill="rgb(253,98,13)" fg:x="107451" fg:w="453"/><text x="97.2896%" y="351.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (447 samples, 0.40%)</title><rect x="97.0450%" y="325" width="0.4037%" height="15" fill="rgb(211,115,12)" fg:x="107457" fg:w="447"/><text x="97.2950%" y="335.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (444 samples, 0.40%)</title><rect x="97.0477%" y="309" width="0.4010%" height="15" fill="rgb(208,12,16)" fg:x="107460" fg:w="444"/><text x="97.2977%" y="319.50"></text></g><g><title>async_executor::Ticker::sleep (109 samples, 0.10%)</title><rect x="97.3503%" y="293" width="0.0984%" height="15" fill="rgb(237,193,54)" fg:x="107795" fg:w="109"/><text x="97.6003%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.05%)</title><rect x="97.4018%" y="277" width="0.0470%" height="15" fill="rgb(243,22,42)" fg:x="107852" fg:w="52"/><text x="97.6518%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (51 samples, 0.05%)</title><rect x="97.4027%" y="261" width="0.0461%" height="15" fill="rgb(233,151,36)" fg:x="107853" fg:w="51"/><text x="97.6527%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (51 samples, 0.05%)</title><rect x="97.4027%" y="245" width="0.0461%" height="15" fill="rgb(237,57,45)" fg:x="107853" fg:w="51"/><text x="97.6527%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.05%)</title><rect x="97.4027%" y="229" width="0.0461%" height="15" fill="rgb(221,88,17)" fg:x="107853" fg:w="51"/><text x="97.6527%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (19 samples, 0.02%)</title><rect x="97.5147%" y="341" width="0.0172%" height="15" fill="rgb(230,79,15)" fg:x="107977" fg:w="19"/><text x="97.7647%" y="351.50"></text></g><g><title>core::mem::replace (19 samples, 0.02%)</title><rect x="97.5147%" y="325" width="0.0172%" height="15" fill="rgb(213,57,13)" fg:x="107977" fg:w="19"/><text x="97.7647%" y="335.50"></text></g><g><title>core::ptr::read (18 samples, 0.02%)</title><rect x="97.5156%" y="309" width="0.0163%" height="15" fill="rgb(222,116,39)" fg:x="107978" fg:w="18"/><text x="97.7656%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (33 samples, 0.03%)</title><rect x="97.5101%" y="357" width="0.0298%" height="15" fill="rgb(245,107,2)" fg:x="107972" fg:w="33"/><text x="97.7601%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (41 samples, 0.04%)</title><rect x="97.5399%" y="357" width="0.0370%" height="15" fill="rgb(238,1,10)" fg:x="108005" fg:w="41"/><text x="97.7899%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (36 samples, 0.03%)</title><rect x="97.5445%" y="341" width="0.0325%" height="15" fill="rgb(249,4,48)" fg:x="108010" fg:w="36"/><text x="97.7945%" y="351.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="97.5445%" y="325" width="0.0325%" height="15" fill="rgb(223,151,18)" fg:x="108010" fg:w="36"/><text x="97.7945%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (35 samples, 0.03%)</title><rect x="97.5454%" y="309" width="0.0316%" height="15" fill="rgb(227,65,43)" fg:x="108011" fg:w="35"/><text x="97.7954%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (35 samples, 0.03%)</title><rect x="97.5454%" y="293" width="0.0316%" height="15" fill="rgb(218,40,45)" fg:x="108011" fg:w="35"/><text x="97.7954%" y="303.50"></text></g><g><title>__GI___pthread_mutex_unlock (34 samples, 0.03%)</title><rect x="97.5463%" y="277" width="0.0307%" height="15" fill="rgb(252,121,31)" fg:x="108012" fg:w="34"/><text x="97.7963%" y="287.50"></text></g><g><title>core::task::wake::Waker::will_wake (19 samples, 0.02%)</title><rect x="97.5779%" y="357" width="0.0172%" height="15" fill="rgb(219,158,43)" fg:x="108047" fg:w="19"/><text x="97.8279%" y="367.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="97.5779%" y="341" width="0.0172%" height="15" fill="rgb(231,162,42)" fg:x="108047" fg:w="19"/><text x="97.8279%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="97.5842%" y="325" width="0.0108%" height="15" fill="rgb(217,179,25)" fg:x="108054" fg:w="12"/><text x="97.8342%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="97.5842%" y="309" width="0.0108%" height="15" fill="rgb(206,212,31)" fg:x="108054" fg:w="12"/><text x="97.8342%" y="319.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (243 samples, 0.22%)</title><rect x="97.4867%" y="373" width="0.2195%" height="15" fill="rgb(235,144,12)" fg:x="107946" fg:w="243"/><text x="97.7367%" y="383.50"></text></g><g><title>event_listener::Inner::lock (123 samples, 0.11%)</title><rect x="97.5950%" y="357" width="0.1111%" height="15" fill="rgb(213,51,10)" fg:x="108066" fg:w="123"/><text x="97.8450%" y="367.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (121 samples, 0.11%)</title><rect x="97.5968%" y="341" width="0.1093%" height="15" fill="rgb(231,145,14)" fg:x="108068" fg:w="121"/><text x="97.8468%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (119 samples, 0.11%)</title><rect x="97.5986%" y="325" width="0.1075%" height="15" fill="rgb(235,15,28)" fg:x="108070" fg:w="119"/><text x="97.8486%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (99 samples, 0.09%)</title><rect x="97.6167%" y="309" width="0.0894%" height="15" fill="rgb(237,206,10)" fg:x="108090" fg:w="99"/><text x="97.8667%" y="319.50"></text></g><g><title>__GI___pthread_mutex_lock (99 samples, 0.09%)</title><rect x="97.6167%" y="293" width="0.0894%" height="15" fill="rgb(236,227,27)" fg:x="108090" fg:w="99"/><text x="97.8667%" y="303.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (55 samples, 0.05%)</title><rect x="97.7061%" y="373" width="0.0497%" height="15" fill="rgb(246,83,35)" fg:x="108189" fg:w="55"/><text x="97.9561%" y="383.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (55 samples, 0.05%)</title><rect x="97.7061%" y="357" width="0.0497%" height="15" fill="rgb(220,136,24)" fg:x="108189" fg:w="55"/><text x="97.9561%" y="367.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (26 samples, 0.02%)</title><rect x="97.7323%" y="341" width="0.0235%" height="15" fill="rgb(217,3,25)" fg:x="108218" fg:w="26"/><text x="97.9823%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (22 samples, 0.02%)</title><rect x="97.7359%" y="325" width="0.0199%" height="15" fill="rgb(239,24,14)" fg:x="108222" fg:w="22"/><text x="97.9859%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.02%)</title><rect x="97.7359%" y="309" width="0.0199%" height="15" fill="rgb(244,16,53)" fg:x="108222" fg:w="22"/><text x="97.9859%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="97.7359%" y="293" width="0.0199%" height="15" fill="rgb(208,175,44)" fg:x="108222" fg:w="22"/><text x="97.9859%" y="303.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (816 samples, 0.74%)</title><rect x="97.0234%" y="437" width="0.7369%" height="15" fill="rgb(252,18,48)" fg:x="107433" fg:w="816"/><text x="97.2734%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (814 samples, 0.74%)</title><rect x="97.0252%" y="421" width="0.7351%" height="15" fill="rgb(234,199,32)" fg:x="107435" fg:w="814"/><text x="97.2752%" y="431.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (345 samples, 0.31%)</title><rect x="97.4487%" y="405" width="0.3116%" height="15" fill="rgb(225,77,54)" fg:x="107904" fg:w="345"/><text x="97.6987%" y="415.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (318 samples, 0.29%)</title><rect x="97.4731%" y="389" width="0.2872%" height="15" fill="rgb(225,42,25)" fg:x="107931" fg:w="318"/><text x="97.7231%" y="399.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (7,497 samples, 6.77%)</title><rect x="90.9996%" y="517" width="6.7706%" height="15" fill="rgb(242,227,46)" fg:x="100763" fg:w="7497"/><text x="91.2496%" y="527.50">&lt;futures_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,462 samples, 6.74%)</title><rect x="91.0313%" y="501" width="6.7390%" height="15" fill="rgb(246,197,35)" fg:x="100798" fg:w="7462"/><text x="91.2813%" y="511.50">&lt;core::fu..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (872 samples, 0.79%)</title><rect x="96.9827%" y="485" width="0.7875%" height="15" fill="rgb(215,159,26)" fg:x="107388" fg:w="872"/><text x="97.2327%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (827 samples, 0.75%)</title><rect x="97.0234%" y="469" width="0.7469%" height="15" fill="rgb(212,194,50)" fg:x="107433" fg:w="827"/><text x="97.2734%" y="479.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (827 samples, 0.75%)</title><rect x="97.0234%" y="453" width="0.7469%" height="15" fill="rgb(246,132,1)" fg:x="107433" fg:w="827"/><text x="97.2734%" y="463.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (14 samples, 0.01%)</title><rect x="97.7702%" y="437" width="0.0126%" height="15" fill="rgb(217,71,7)" fg:x="108260" fg:w="14"/><text x="98.0202%" y="447.50"></text></g><g><title>once_cell::imp::initialize_or_wait (14 samples, 0.01%)</title><rect x="97.7702%" y="421" width="0.0126%" height="15" fill="rgb(252,59,32)" fg:x="108260" fg:w="14"/><text x="98.0202%" y="431.50"></text></g><g><title>once_cell::imp::wait (14 samples, 0.01%)</title><rect x="97.7702%" y="405" width="0.0126%" height="15" fill="rgb(253,204,25)" fg:x="108260" fg:w="14"/><text x="98.0202%" y="415.50"></text></g><g><title>std::thread::park (14 samples, 0.01%)</title><rect x="97.7702%" y="389" width="0.0126%" height="15" fill="rgb(232,21,16)" fg:x="108260" fg:w="14"/><text x="98.0202%" y="399.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (14 samples, 0.01%)</title><rect x="97.7702%" y="373" width="0.0126%" height="15" fill="rgb(248,90,29)" fg:x="108260" fg:w="14"/><text x="98.0202%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wait (13 samples, 0.01%)</title><rect x="97.7711%" y="357" width="0.0117%" height="15" fill="rgb(249,223,7)" fg:x="108261" fg:w="13"/><text x="98.0211%" y="367.50"></text></g><g><title>syscall (13 samples, 0.01%)</title><rect x="97.7711%" y="341" width="0.0117%" height="15" fill="rgb(231,119,42)" fg:x="108261" fg:w="13"/><text x="98.0211%" y="351.50"></text></g><g><title>async_io::reactor::Reactor::get (16 samples, 0.01%)</title><rect x="97.7702%" y="517" width="0.0144%" height="15" fill="rgb(215,41,35)" fg:x="108260" fg:w="16"/><text x="98.0202%" y="527.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="97.7702%" y="501" width="0.0144%" height="15" fill="rgb(220,44,45)" fg:x="108260" fg:w="16"/><text x="98.0202%" y="511.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (16 samples, 0.01%)</title><rect x="97.7702%" y="485" width="0.0144%" height="15" fill="rgb(253,197,36)" fg:x="108260" fg:w="16"/><text x="98.0202%" y="495.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (16 samples, 0.01%)</title><rect x="97.7702%" y="469" width="0.0144%" height="15" fill="rgb(245,225,54)" fg:x="108260" fg:w="16"/><text x="98.0202%" y="479.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (16 samples, 0.01%)</title><rect x="97.7702%" y="453" width="0.0144%" height="15" fill="rgb(239,94,37)" fg:x="108260" fg:w="16"/><text x="98.0202%" y="463.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (154 samples, 0.14%)</title><rect x="97.7847%" y="517" width="0.1391%" height="15" fill="rgb(242,217,10)" fg:x="108276" fg:w="154"/><text x="98.0347%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (154 samples, 0.14%)</title><rect x="97.7847%" y="501" width="0.1391%" height="15" fill="rgb(250,193,7)" fg:x="108276" fg:w="154"/><text x="98.0347%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (154 samples, 0.14%)</title><rect x="97.7847%" y="485" width="0.1391%" height="15" fill="rgb(230,104,19)" fg:x="108276" fg:w="154"/><text x="98.0347%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (143 samples, 0.13%)</title><rect x="97.7946%" y="469" width="0.1291%" height="15" fill="rgb(230,181,4)" fg:x="108287" fg:w="143"/><text x="98.0446%" y="479.50"></text></g><g><title>__GI___pthread_mutex_trylock (143 samples, 0.13%)</title><rect x="97.7946%" y="453" width="0.1291%" height="15" fill="rgb(216,219,49)" fg:x="108287" fg:w="143"/><text x="98.0446%" y="463.50"></text></g><g><title>sn_rust_dealloc (14 samples, 0.01%)</title><rect x="97.9463%" y="341" width="0.0126%" height="15" fill="rgb(254,144,0)" fg:x="108455" fg:w="14"/><text x="98.1963%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="97.9418%" y="485" width="0.0181%" height="15" fill="rgb(205,209,38)" fg:x="108450" fg:w="20"/><text x="98.1918%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (20 samples, 0.02%)</title><rect x="97.9418%" y="469" width="0.0181%" height="15" fill="rgb(240,21,42)" fg:x="108450" fg:w="20"/><text x="98.1918%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (20 samples, 0.02%)</title><rect x="97.9418%" y="453" width="0.0181%" height="15" fill="rgb(241,132,3)" fg:x="108450" fg:w="20"/><text x="98.1918%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (20 samples, 0.02%)</title><rect x="97.9418%" y="437" width="0.0181%" height="15" fill="rgb(225,14,2)" fg:x="108450" fg:w="20"/><text x="98.1918%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (19 samples, 0.02%)</title><rect x="97.9427%" y="421" width="0.0172%" height="15" fill="rgb(210,141,35)" fg:x="108451" fg:w="19"/><text x="98.1927%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="97.9436%" y="405" width="0.0163%" height="15" fill="rgb(251,14,44)" fg:x="108452" fg:w="18"/><text x="98.1936%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.02%)</title><rect x="97.9436%" y="389" width="0.0163%" height="15" fill="rgb(247,48,18)" fg:x="108452" fg:w="18"/><text x="98.1936%" y="399.50"></text></g><g><title>__rg_dealloc (18 samples, 0.02%)</title><rect x="97.9436%" y="373" width="0.0163%" height="15" fill="rgb(225,0,40)" fg:x="108452" fg:w="18"/><text x="98.1936%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.02%)</title><rect x="97.9436%" y="357" width="0.0163%" height="15" fill="rgb(221,31,33)" fg:x="108452" fg:w="18"/><text x="98.1936%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (13 samples, 0.01%)</title><rect x="97.9707%" y="453" width="0.0117%" height="15" fill="rgb(237,42,40)" fg:x="108482" fg:w="13"/><text x="98.2207%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (26 samples, 0.02%)</title><rect x="97.9924%" y="437" width="0.0235%" height="15" fill="rgb(233,51,29)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (26 samples, 0.02%)</title><rect x="97.9924%" y="421" width="0.0235%" height="15" fill="rgb(226,58,20)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="431.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (26 samples, 0.02%)</title><rect x="97.9924%" y="405" width="0.0235%" height="15" fill="rgb(208,98,7)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (26 samples, 0.02%)</title><rect x="97.9924%" y="389" width="0.0235%" height="15" fill="rgb(228,143,44)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (26 samples, 0.02%)</title><rect x="97.9924%" y="373" width="0.0235%" height="15" fill="rgb(246,55,38)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (26 samples, 0.02%)</title><rect x="97.9924%" y="357" width="0.0235%" height="15" fill="rgb(247,87,16)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="97.9924%" y="341" width="0.0235%" height="15" fill="rgb(234,129,42)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="97.9924%" y="325" width="0.0235%" height="15" fill="rgb(220,82,16)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="335.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="97.9924%" y="309" width="0.0235%" height="15" fill="rgb(211,88,4)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="319.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="97.9924%" y="293" width="0.0235%" height="15" fill="rgb(248,151,21)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="97.9924%" y="277" width="0.0235%" height="15" fill="rgb(238,163,6)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="287.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="97.9924%" y="261" width="0.0235%" height="15" fill="rgb(209,183,11)" fg:x="108506" fg:w="26"/><text x="98.2424%" y="271.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (51 samples, 0.05%)</title><rect x="97.9707%" y="469" width="0.0461%" height="15" fill="rgb(219,37,20)" fg:x="108482" fg:w="51"/><text x="98.2207%" y="479.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (27 samples, 0.02%)</title><rect x="97.9924%" y="453" width="0.0244%" height="15" fill="rgb(210,158,4)" fg:x="108506" fg:w="27"/><text x="98.2424%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (56 samples, 0.05%)</title><rect x="97.9671%" y="485" width="0.0506%" height="15" fill="rgb(221,167,53)" fg:x="108478" fg:w="56"/><text x="98.2171%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (14 samples, 0.01%)</title><rect x="98.0330%" y="437" width="0.0126%" height="15" fill="rgb(237,151,45)" fg:x="108551" fg:w="14"/><text x="98.2830%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (14 samples, 0.01%)</title><rect x="98.0330%" y="421" width="0.0126%" height="15" fill="rgb(231,39,3)" fg:x="108551" fg:w="14"/><text x="98.2830%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (14 samples, 0.01%)</title><rect x="98.0330%" y="405" width="0.0126%" height="15" fill="rgb(212,167,28)" fg:x="108551" fg:w="14"/><text x="98.2830%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="98.0330%" y="389" width="0.0126%" height="15" fill="rgb(232,178,8)" fg:x="108551" fg:w="14"/><text x="98.2830%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (43 samples, 0.04%)</title><rect x="98.0177%" y="485" width="0.0388%" height="15" fill="rgb(225,151,20)" fg:x="108534" fg:w="43"/><text x="98.2677%" y="495.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (34 samples, 0.03%)</title><rect x="98.0258%" y="469" width="0.0307%" height="15" fill="rgb(238,3,37)" fg:x="108543" fg:w="34"/><text x="98.2758%" y="479.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (33 samples, 0.03%)</title><rect x="98.0267%" y="453" width="0.0298%" height="15" fill="rgb(251,147,42)" fg:x="108544" fg:w="33"/><text x="98.2767%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.01%)</title><rect x="98.0457%" y="437" width="0.0108%" height="15" fill="rgb(208,173,10)" fg:x="108565" fg:w="12"/><text x="98.2957%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="98.0457%" y="421" width="0.0108%" height="15" fill="rgb(246,225,4)" fg:x="108565" fg:w="12"/><text x="98.2957%" y="431.50"></text></g><g><title>core::mem::drop (66 samples, 0.06%)</title><rect x="98.0565%" y="485" width="0.0596%" height="15" fill="rgb(248,102,6)" fg:x="108577" fg:w="66"/><text x="98.3065%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (66 samples, 0.06%)</title><rect x="98.0565%" y="469" width="0.0596%" height="15" fill="rgb(232,6,21)" fg:x="108577" fg:w="66"/><text x="98.3065%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.06%)</title><rect x="98.0565%" y="453" width="0.0596%" height="15" fill="rgb(221,179,22)" fg:x="108577" fg:w="66"/><text x="98.3065%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (63 samples, 0.06%)</title><rect x="98.0592%" y="437" width="0.0569%" height="15" fill="rgb(252,50,20)" fg:x="108580" fg:w="63"/><text x="98.3092%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (59 samples, 0.05%)</title><rect x="98.0628%" y="421" width="0.0533%" height="15" fill="rgb(222,56,38)" fg:x="108584" fg:w="59"/><text x="98.3128%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (59 samples, 0.05%)</title><rect x="98.0628%" y="405" width="0.0533%" height="15" fill="rgb(206,193,29)" fg:x="108584" fg:w="59"/><text x="98.3128%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (37 samples, 0.03%)</title><rect x="98.1270%" y="485" width="0.0334%" height="15" fill="rgb(239,192,45)" fg:x="108655" fg:w="37"/><text x="98.3770%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (37 samples, 0.03%)</title><rect x="98.1270%" y="469" width="0.0334%" height="15" fill="rgb(254,18,36)" fg:x="108655" fg:w="37"/><text x="98.3770%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (36 samples, 0.03%)</title><rect x="98.1279%" y="453" width="0.0325%" height="15" fill="rgb(221,127,11)" fg:x="108656" fg:w="36"/><text x="98.3779%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (36 samples, 0.03%)</title><rect x="98.1279%" y="437" width="0.0325%" height="15" fill="rgb(234,146,35)" fg:x="108656" fg:w="36"/><text x="98.3779%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (289 samples, 0.26%)</title><rect x="97.9337%" y="501" width="0.2610%" height="15" fill="rgb(254,201,37)" fg:x="108441" fg:w="289"/><text x="98.1837%" y="511.50"></text></g><g><title>std::time::Instant::now (38 samples, 0.03%)</title><rect x="98.1604%" y="485" width="0.0343%" height="15" fill="rgb(211,202,23)" fg:x="108692" fg:w="38"/><text x="98.4104%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (38 samples, 0.03%)</title><rect x="98.1604%" y="469" width="0.0343%" height="15" fill="rgb(237,91,2)" fg:x="108692" fg:w="38"/><text x="98.4104%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::now (38 samples, 0.03%)</title><rect x="98.1604%" y="453" width="0.0343%" height="15" fill="rgb(226,228,36)" fg:x="108692" fg:w="38"/><text x="98.4104%" y="463.50"></text></g><g><title>__clock_gettime (36 samples, 0.03%)</title><rect x="98.1622%" y="437" width="0.0325%" height="15" fill="rgb(213,63,50)" fg:x="108694" fg:w="36"/><text x="98.4122%" y="447.50"></text></g><g><title>__vdso_clock_gettime (33 samples, 0.03%)</title><rect x="98.1649%" y="421" width="0.0298%" height="15" fill="rgb(235,194,19)" fg:x="108697" fg:w="33"/><text x="98.4149%" y="431.50"></text></g><g><title>[[vdso]] (29 samples, 0.03%)</title><rect x="98.1685%" y="405" width="0.0262%" height="15" fill="rgb(207,204,18)" fg:x="108701" fg:w="29"/><text x="98.4185%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (38 samples, 0.03%)</title><rect x="98.2200%" y="485" width="0.0343%" height="15" fill="rgb(248,8,7)" fg:x="108758" fg:w="38"/><text x="98.4700%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="98.2200%" y="469" width="0.0343%" height="15" fill="rgb(223,145,47)" fg:x="108758" fg:w="38"/><text x="98.4700%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="98.2200%" y="453" width="0.0343%" height="15" fill="rgb(228,84,11)" fg:x="108758" fg:w="38"/><text x="98.4700%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (38 samples, 0.03%)</title><rect x="98.2200%" y="437" width="0.0343%" height="15" fill="rgb(218,76,45)" fg:x="108758" fg:w="38"/><text x="98.4700%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (38 samples, 0.03%)</title><rect x="98.2200%" y="421" width="0.0343%" height="15" fill="rgb(223,80,15)" fg:x="108758" fg:w="38"/><text x="98.4700%" y="431.50"></text></g><g><title>__libc_read (55 samples, 0.05%)</title><rect x="98.3076%" y="469" width="0.0497%" height="15" fill="rgb(219,218,33)" fg:x="108855" fg:w="55"/><text x="98.5576%" y="479.50"></text></g><g><title>__pthread_enable_asynccancel (32 samples, 0.03%)</title><rect x="98.3284%" y="453" width="0.0289%" height="15" fill="rgb(208,51,11)" fg:x="108878" fg:w="32"/><text x="98.5784%" y="463.50"></text></g><g><title>epoll_wait (82 samples, 0.07%)</title><rect x="98.3573%" y="469" width="0.0741%" height="15" fill="rgb(229,165,39)" fg:x="108910" fg:w="82"/><text x="98.6073%" y="479.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="98.4132%" y="453" width="0.0181%" height="15" fill="rgb(241,100,24)" fg:x="108972" fg:w="20"/><text x="98.6632%" y="463.50"></text></g><g><title>polling::epoll::Poller::modify (37 samples, 0.03%)</title><rect x="98.4313%" y="469" width="0.0334%" height="15" fill="rgb(228,14,23)" fg:x="108992" fg:w="37"/><text x="98.6813%" y="479.50"></text></g><g><title>polling::epoll::Poller::ctl (35 samples, 0.03%)</title><rect x="98.4331%" y="453" width="0.0316%" height="15" fill="rgb(247,116,52)" fg:x="108994" fg:w="35"/><text x="98.6831%" y="463.50"></text></g><g><title>epoll_ctl (27 samples, 0.02%)</title><rect x="98.4403%" y="437" width="0.0244%" height="15" fill="rgb(216,149,33)" fg:x="109002" fg:w="27"/><text x="98.6903%" y="447.50"></text></g><g><title>polling::epoll::Poller::wait (243 samples, 0.22%)</title><rect x="98.2615%" y="485" width="0.2195%" height="15" fill="rgb(238,142,29)" fg:x="108804" fg:w="243"/><text x="98.5115%" y="495.50"></text></g><g><title>syscall (17 samples, 0.02%)</title><rect x="98.4656%" y="469" width="0.0154%" height="15" fill="rgb(224,83,40)" fg:x="109030" fg:w="17"/><text x="98.7156%" y="479.50"></text></g><g><title>async_io::reactor::ReactorLock::react (632 samples, 0.57%)</title><rect x="97.9238%" y="517" width="0.5708%" height="15" fill="rgb(234,165,11)" fg:x="108430" fg:w="632"/><text x="98.1738%" y="527.50"></text></g><g><title>polling::Poller::wait (323 samples, 0.29%)</title><rect x="98.2028%" y="501" width="0.2917%" height="15" fill="rgb(215,96,23)" fg:x="108739" fg:w="323"/><text x="98.4528%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (15 samples, 0.01%)</title><rect x="98.4810%" y="485" width="0.0135%" height="15" fill="rgb(233,179,26)" fg:x="109047" fg:w="15"/><text x="98.7310%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (14 samples, 0.01%)</title><rect x="98.4819%" y="469" width="0.0126%" height="15" fill="rgb(225,129,33)" fg:x="109048" fg:w="14"/><text x="98.7319%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (12 samples, 0.01%)</title><rect x="98.4837%" y="453" width="0.0108%" height="15" fill="rgb(237,49,13)" fg:x="109050" fg:w="12"/><text x="98.7337%" y="463.50"></text></g><g><title>__GI___pthread_mutex_trylock (12 samples, 0.01%)</title><rect x="98.4837%" y="437" width="0.0108%" height="15" fill="rgb(211,3,31)" fg:x="109050" fg:w="12"/><text x="98.7337%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (14 samples, 0.01%)</title><rect x="98.4945%" y="469" width="0.0126%" height="15" fill="rgb(216,152,19)" fg:x="109062" fg:w="14"/><text x="98.7445%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_store (14 samples, 0.01%)</title><rect x="98.4945%" y="453" width="0.0126%" height="15" fill="rgb(251,121,35)" fg:x="109062" fg:w="14"/><text x="98.7445%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="98.4945%" y="517" width="0.0135%" height="15" fill="rgb(210,217,47)" fg:x="109062" fg:w="15"/><text x="98.7445%" y="527.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="98.4945%" y="501" width="0.0135%" height="15" fill="rgb(244,116,22)" fg:x="109062" fg:w="15"/><text x="98.7445%" y="511.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (15 samples, 0.01%)</title><rect x="98.4945%" y="485" width="0.0135%" height="15" fill="rgb(228,17,21)" fg:x="109062" fg:w="15"/><text x="98.7445%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (29 samples, 0.03%)</title><rect x="98.5081%" y="517" width="0.0262%" height="15" fill="rgb(240,149,34)" fg:x="109077" fg:w="29"/><text x="98.7581%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="98.5081%" y="501" width="0.0262%" height="15" fill="rgb(208,125,47)" fg:x="109077" fg:w="29"/><text x="98.7581%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="98.5081%" y="485" width="0.0262%" height="15" fill="rgb(249,186,39)" fg:x="109077" fg:w="29"/><text x="98.7581%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.03%)</title><rect x="98.5090%" y="469" width="0.0253%" height="15" fill="rgb(240,220,33)" fg:x="109078" fg:w="28"/><text x="98.7590%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (28 samples, 0.03%)</title><rect x="98.5090%" y="453" width="0.0253%" height="15" fill="rgb(243,110,23)" fg:x="109078" fg:w="28"/><text x="98.7590%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (28 samples, 0.03%)</title><rect x="98.5090%" y="437" width="0.0253%" height="15" fill="rgb(219,163,46)" fg:x="109078" fg:w="28"/><text x="98.7590%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (13 samples, 0.01%)</title><rect x="98.5370%" y="517" width="0.0117%" height="15" fill="rgb(216,126,30)" fg:x="109109" fg:w="13"/><text x="98.7870%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_store (13 samples, 0.01%)</title><rect x="98.5370%" y="501" width="0.0117%" height="15" fill="rgb(208,139,11)" fg:x="109109" fg:w="13"/><text x="98.7870%" y="511.50"></text></g><g><title>__GI___pthread_mutex_unlock (50 samples, 0.05%)</title><rect x="98.5641%" y="485" width="0.0452%" height="15" fill="rgb(213,118,36)" fg:x="109139" fg:w="50"/><text x="98.8141%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (98 samples, 0.09%)</title><rect x="98.6119%" y="485" width="0.0885%" height="15" fill="rgb(226,43,17)" fg:x="109192" fg:w="98"/><text x="98.8619%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (98 samples, 0.09%)</title><rect x="98.6119%" y="469" width="0.0885%" height="15" fill="rgb(254,217,4)" fg:x="109192" fg:w="98"/><text x="98.8619%" y="479.50"></text></g><g><title>std::sync::poison::Flag::get (59 samples, 0.05%)</title><rect x="98.7004%" y="469" width="0.0533%" height="15" fill="rgb(210,134,47)" fg:x="109290" fg:w="59"/><text x="98.9504%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (59 samples, 0.05%)</title><rect x="98.7004%" y="453" width="0.0533%" height="15" fill="rgb(237,24,49)" fg:x="109290" fg:w="59"/><text x="98.9504%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (57 samples, 0.05%)</title><rect x="98.7022%" y="437" width="0.0515%" height="15" fill="rgb(251,39,46)" fg:x="109292" fg:w="57"/><text x="98.9522%" y="447.50"></text></g><g><title>__pthread_disable_asynccancel (55 samples, 0.05%)</title><rect x="99.1186%" y="421" width="0.0497%" height="15" fill="rgb(251,220,3)" fg:x="109753" fg:w="55"/><text x="99.3686%" y="431.50"></text></g><g><title>__pthread_enable_asynccancel (27 samples, 0.02%)</title><rect x="99.1682%" y="421" width="0.0244%" height="15" fill="rgb(228,105,12)" fg:x="109808" fg:w="27"/><text x="99.4182%" y="431.50"></text></g><g><title>__pthread_mutex_cond_lock (33 samples, 0.03%)</title><rect x="99.1926%" y="421" width="0.0298%" height="15" fill="rgb(215,196,1)" fg:x="109835" fg:w="33"/><text x="99.4426%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (537 samples, 0.48%)</title><rect x="98.7537%" y="453" width="0.4850%" height="15" fill="rgb(214,33,39)" fg:x="109349" fg:w="537"/><text x="99.0037%" y="463.50"></text></g><g><title>__pthread_cond_wait (537 samples, 0.48%)</title><rect x="98.7537%" y="437" width="0.4850%" height="15" fill="rgb(220,19,52)" fg:x="109349" fg:w="537"/><text x="99.0037%" y="447.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (18 samples, 0.02%)</title><rect x="99.2224%" y="421" width="0.0163%" height="15" fill="rgb(221,78,38)" fg:x="109868" fg:w="18"/><text x="99.4724%" y="431.50"></text></g><g><title>std::sync::condvar::Condvar::wait (608 samples, 0.55%)</title><rect x="98.7004%" y="485" width="0.5491%" height="15" fill="rgb(253,30,16)" fg:x="109290" fg:w="608"/><text x="98.9504%" y="495.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (549 samples, 0.50%)</title><rect x="98.7537%" y="469" width="0.4958%" height="15" fill="rgb(242,65,0)" fg:x="109349" fg:w="549"/><text x="99.0037%" y="479.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (12 samples, 0.01%)</title><rect x="99.2387%" y="453" width="0.0108%" height="15" fill="rgb(235,201,12)" fg:x="109886" fg:w="12"/><text x="99.4887%" y="463.50"></text></g><g><title>parking::Parker::park (809 samples, 0.73%)</title><rect x="98.5559%" y="517" width="0.7306%" height="15" fill="rgb(233,161,9)" fg:x="109130" fg:w="809"/><text x="98.8059%" y="527.50"></text></g><g><title>parking::Inner::park (806 samples, 0.73%)</title><rect x="98.5586%" y="501" width="0.7279%" height="15" fill="rgb(241,207,41)" fg:x="109133" fg:w="806"/><text x="98.8086%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.04%)</title><rect x="99.2495%" y="485" width="0.0370%" height="15" fill="rgb(212,69,46)" fg:x="109898" fg:w="41"/><text x="99.4995%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.04%)</title><rect x="99.2504%" y="469" width="0.0361%" height="15" fill="rgb(239,69,45)" fg:x="109899" fg:w="40"/><text x="99.5004%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (38 samples, 0.03%)</title><rect x="99.2522%" y="453" width="0.0343%" height="15" fill="rgb(242,117,48)" fg:x="109901" fg:w="38"/><text x="99.5022%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.03%)</title><rect x="99.2522%" y="437" width="0.0343%" height="15" fill="rgb(228,41,36)" fg:x="109901" fg:w="38"/><text x="99.5022%" y="447.50"></text></g><g><title>parking::Parker::park_timeout (146 samples, 0.13%)</title><rect x="99.2865%" y="517" width="0.1319%" height="15" fill="rgb(212,3,32)" fg:x="109939" fg:w="146"/><text x="99.5365%" y="527.50"></text></g><g><title>parking::Inner::park (112 samples, 0.10%)</title><rect x="99.3173%" y="501" width="0.1011%" height="15" fill="rgb(233,41,49)" fg:x="109973" fg:w="112"/><text x="99.5673%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (106 samples, 0.10%)</title><rect x="99.3227%" y="485" width="0.0957%" height="15" fill="rgb(252,170,49)" fg:x="109979" fg:w="106"/><text x="99.5727%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (106 samples, 0.10%)</title><rect x="99.3227%" y="469" width="0.0957%" height="15" fill="rgb(229,53,26)" fg:x="109979" fg:w="106"/><text x="99.5727%" y="479.50"></text></g><g><title>std::panic::catch_unwind (9,399 samples, 8.49%)</title><rect x="90.9536%" y="805" width="8.4883%" height="15" fill="rgb(217,157,12)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="815.50">std::panic::..</text></g><g><title>std::panicking::try (9,399 samples, 8.49%)</title><rect x="90.9536%" y="789" width="8.4883%" height="15" fill="rgb(227,17,9)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="799.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (9,399 samples, 8.49%)</title><rect x="90.9536%" y="773" width="8.4883%" height="15" fill="rgb(218,84,12)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="783.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,399 samples, 8.49%)</title><rect x="90.9536%" y="757" width="8.4883%" height="15" fill="rgb(212,79,24)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="767.50">&lt;core::panic..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (9,399 samples, 8.49%)</title><rect x="90.9536%" y="741" width="8.4883%" height="15" fill="rgb(217,222,37)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="751.50">std::thread:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,399 samples, 8.49%)</title><rect x="90.9536%" y="725" width="8.4883%" height="15" fill="rgb(246,208,8)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="735.50">std::sys_com..</text></g><g><title>core::ops::function::FnOnce::call_once (9,399 samples, 8.49%)</title><rect x="90.9536%" y="709" width="8.4883%" height="15" fill="rgb(244,133,10)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="719.50">core::ops::f..</text></g><g><title>async_global_executor::threading::thread_main_loop (9,399 samples, 8.49%)</title><rect x="90.9536%" y="693" width="8.4883%" height="15" fill="rgb(209,219,41)" fg:x="100712" fg:w="9399"/><text x="91.2036%" y="703.50">async_global..</text></g><g><title>std::panic::catch_unwind (9,387 samples, 8.48%)</title><rect x="90.9644%" y="677" width="8.4775%" height="15" fill="rgb(253,175,45)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="687.50">std::panic::..</text></g><g><title>std::panicking::try (9,387 samples, 8.48%)</title><rect x="90.9644%" y="661" width="8.4775%" height="15" fill="rgb(235,100,37)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="671.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (9,387 samples, 8.48%)</title><rect x="90.9644%" y="645" width="8.4775%" height="15" fill="rgb(225,87,19)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="655.50">std::panicki..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (9,387 samples, 8.48%)</title><rect x="90.9644%" y="629" width="8.4775%" height="15" fill="rgb(217,152,17)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="639.50">async_global..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,387 samples, 8.48%)</title><rect x="90.9644%" y="613" width="8.4775%" height="15" fill="rgb(235,72,13)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="623.50">std::thread:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,387 samples, 8.48%)</title><rect x="90.9644%" y="597" width="8.4775%" height="15" fill="rgb(233,140,18)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="607.50">std::thread:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (9,387 samples, 8.48%)</title><rect x="90.9644%" y="581" width="8.4775%" height="15" fill="rgb(207,212,28)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="591.50">async_global..</text></g><g><title>async_global_executor::reactor::block_on (9,387 samples, 8.48%)</title><rect x="90.9644%" y="565" width="8.4775%" height="15" fill="rgb(220,130,25)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="575.50">async_global..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (9,387 samples, 8.48%)</title><rect x="90.9644%" y="549" width="8.4775%" height="15" fill="rgb(205,55,34)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="559.50">async_global..</text></g><g><title>async_io::driver::block_on (9,387 samples, 8.48%)</title><rect x="90.9644%" y="533" width="8.4775%" height="15" fill="rgb(237,54,35)" fg:x="100724" fg:w="9387"/><text x="91.2144%" y="543.50">async_io::dr..</text></g><g><title>std::time::Instant::now (14 samples, 0.01%)</title><rect x="99.4292%" y="517" width="0.0126%" height="15" fill="rgb(208,67,23)" fg:x="110097" fg:w="14"/><text x="99.6792%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (14 samples, 0.01%)</title><rect x="99.4292%" y="501" width="0.0126%" height="15" fill="rgb(206,207,50)" fg:x="110097" fg:w="14"/><text x="99.6792%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::now (14 samples, 0.01%)</title><rect x="99.4292%" y="485" width="0.0126%" height="15" fill="rgb(213,211,42)" fg:x="110097" fg:w="14"/><text x="99.6792%" y="495.50"></text></g><g><title>clone (9,419 samples, 8.51%)</title><rect x="90.9400%" y="917" width="8.5064%" height="15" fill="rgb(252,197,50)" fg:x="100697" fg:w="9419"/><text x="91.1900%" y="927.50">clone</text></g><g><title>start_thread (9,407 samples, 8.50%)</title><rect x="90.9509%" y="901" width="8.4955%" height="15" fill="rgb(251,211,41)" fg:x="100709" fg:w="9407"/><text x="91.2009%" y="911.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9,404 samples, 8.49%)</title><rect x="90.9536%" y="885" width="8.4928%" height="15" fill="rgb(229,211,5)" fg:x="100712" fg:w="9404"/><text x="91.2036%" y="895.50">std::sys::un..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,404 samples, 8.49%)</title><rect x="90.9536%" y="869" width="8.4928%" height="15" fill="rgb(239,36,31)" fg:x="100712" fg:w="9404"/><text x="91.2036%" y="879.50">&lt;alloc::boxe..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,404 samples, 8.49%)</title><rect x="90.9536%" y="853" width="8.4928%" height="15" fill="rgb(248,67,31)" fg:x="100712" fg:w="9404"/><text x="91.2036%" y="863.50">&lt;alloc::boxe..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9,404 samples, 8.49%)</title><rect x="90.9536%" y="837" width="8.4928%" height="15" fill="rgb(249,55,44)" fg:x="100712" fg:w="9404"/><text x="91.2036%" y="847.50">core::ops::f..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (9,404 samples, 8.49%)</title><rect x="90.9536%" y="821" width="8.4928%" height="15" fill="rgb(216,82,12)" fg:x="100712" fg:w="9404"/><text x="91.2036%" y="831.50">std::thread:..</text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (60 samples, 0.05%)</title><rect x="99.4482%" y="917" width="0.0542%" height="15" fill="rgb(242,174,1)" fg:x="110118" fg:w="60"/><text x="99.6982%" y="927.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (14 samples, 0.01%)</title><rect x="99.5069%" y="917" width="0.0126%" height="15" fill="rgb(208,120,29)" fg:x="110183" fg:w="14"/><text x="99.7569%" y="927.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::is_empty (14 samples, 0.01%)</title><rect x="99.5069%" y="901" width="0.0126%" height="15" fill="rgb(221,105,43)" fg:x="110183" fg:w="14"/><text x="99.7569%" y="911.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="99.5205%" y="917" width="0.0135%" height="15" fill="rgb(234,124,22)" fg:x="110198" fg:w="15"/><text x="99.7705%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (21 samples, 0.02%)</title><rect x="99.5349%" y="917" width="0.0190%" height="15" fill="rgb(212,23,30)" fg:x="110214" fg:w="21"/><text x="99.7849%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (12 samples, 0.01%)</title><rect x="99.5539%" y="917" width="0.0108%" height="15" fill="rgb(219,122,53)" fg:x="110235" fg:w="12"/><text x="99.8039%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (137 samples, 0.12%)</title><rect x="99.5683%" y="917" width="0.1237%" height="15" fill="rgb(248,84,24)" fg:x="110251" fg:w="137"/><text x="99.8183%" y="927.50"></text></g><g><title>async-std/runti (110,342 samples, 99.65%)</title><rect x="0.0452%" y="933" width="99.6505%" height="15" fill="rgb(245,115,18)" fg:x="50" fg:w="110342"/><text x="0.2952%" y="943.50">async-std/runti</text></g><g><title>blocking-3 (17 samples, 0.02%)</title><rect x="99.7074%" y="933" width="0.0154%" height="15" fill="rgb(227,176,51)" fg:x="110405" fg:w="17"/><text x="99.9574%" y="943.50"></text></g><g><title>clone (16 samples, 0.01%)</title><rect x="99.7083%" y="917" width="0.0144%" height="15" fill="rgb(229,63,42)" fg:x="110406" fg:w="16"/><text x="99.9583%" y="927.50"></text></g><g><title>blocking-4 (12 samples, 0.01%)</title><rect x="99.7227%" y="933" width="0.0108%" height="15" fill="rgb(247,202,24)" fg:x="110422" fg:w="12"/><text x="99.9727%" y="943.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.07%)</title><rect x="99.7426%" y="677" width="0.0659%" height="15" fill="rgb(244,173,20)" fg:x="110444" fg:w="73"/><text x="99.9926%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.07%)</title><rect x="99.7426%" y="661" width="0.0659%" height="15" fill="rgb(242,81,47)" fg:x="110444" fg:w="73"/><text x="99.9926%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (72 samples, 0.07%)</title><rect x="99.7435%" y="645" width="0.0650%" height="15" fill="rgb(231,185,54)" fg:x="110445" fg:w="72"/><text x="99.9935%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (72 samples, 0.07%)</title><rect x="99.7435%" y="629" width="0.0650%" height="15" fill="rgb(243,55,32)" fg:x="110445" fg:w="72"/><text x="99.9935%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (72 samples, 0.07%)</title><rect x="99.7435%" y="613" width="0.0650%" height="15" fill="rgb(208,167,19)" fg:x="110445" fg:w="72"/><text x="99.9935%" y="623.50"></text></g><g><title>__lll_lock_wait (70 samples, 0.06%)</title><rect x="99.7453%" y="597" width="0.0632%" height="15" fill="rgb(231,72,35)" fg:x="110447" fg:w="70"/><text x="99.9953%" y="607.50"></text></g><g><title>std::panic::catch_unwind (74 samples, 0.07%)</title><rect x="99.7426%" y="805" width="0.0668%" height="15" fill="rgb(250,173,51)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="815.50"></text></g><g><title>std::panicking::try (74 samples, 0.07%)</title><rect x="99.7426%" y="789" width="0.0668%" height="15" fill="rgb(209,5,22)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="799.50"></text></g><g><title>std::panicking::try::do_call (74 samples, 0.07%)</title><rect x="99.7426%" y="773" width="0.0668%" height="15" fill="rgb(250,174,19)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (74 samples, 0.07%)</title><rect x="99.7426%" y="757" width="0.0668%" height="15" fill="rgb(217,3,49)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="767.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (74 samples, 0.07%)</title><rect x="99.7426%" y="741" width="0.0668%" height="15" fill="rgb(218,225,5)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (74 samples, 0.07%)</title><rect x="99.7426%" y="725" width="0.0668%" height="15" fill="rgb(236,89,11)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="735.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (74 samples, 0.07%)</title><rect x="99.7426%" y="709" width="0.0668%" height="15" fill="rgb(206,33,28)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (74 samples, 0.07%)</title><rect x="99.7426%" y="693" width="0.0668%" height="15" fill="rgb(241,56,42)" fg:x="110444" fg:w="74"/><text x="99.9926%" y="703.50"></text></g><g><title>tokio-runtime-w (75 samples, 0.07%)</title><rect x="99.7426%" y="933" width="0.0677%" height="15" fill="rgb(222,44,11)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="943.50"></text></g><g><title>clone (75 samples, 0.07%)</title><rect x="99.7426%" y="917" width="0.0677%" height="15" fill="rgb(234,111,20)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="927.50"></text></g><g><title>start_thread (75 samples, 0.07%)</title><rect x="99.7426%" y="901" width="0.0677%" height="15" fill="rgb(237,77,6)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="911.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (75 samples, 0.07%)</title><rect x="99.7426%" y="885" width="0.0677%" height="15" fill="rgb(235,111,23)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (75 samples, 0.07%)</title><rect x="99.7426%" y="869" width="0.0677%" height="15" fill="rgb(251,135,29)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (75 samples, 0.07%)</title><rect x="99.7426%" y="853" width="0.0677%" height="15" fill="rgb(217,57,1)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (75 samples, 0.07%)</title><rect x="99.7426%" y="837" width="0.0677%" height="15" fill="rgb(249,119,31)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="847.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (75 samples, 0.07%)</title><rect x="99.7426%" y="821" width="0.0677%" height="15" fill="rgb(233,164,33)" fg:x="110444" fg:w="75"/><text x="99.9926%" y="831.50"></text></g><g><title>[ld-2.31.so] (14 samples, 0.01%)</title><rect x="99.8103%" y="917" width="0.0126%" height="15" fill="rgb(250,217,43)" fg:x="110519" fg:w="14"/><text x="100.0603%" y="927.50"></text></g><g><title>all (110,729 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(232,154,50)" fg:x="0" fg:w="110729"/><text x="0.2500%" y="959.50"></text></g><g><title>tremor-pdk-hash (210 samples, 0.19%)</title><rect x="99.8103%" y="933" width="0.1897%" height="15" fill="rgb(227,190,8)" fg:x="110519" fg:w="210"/><text x="100.0603%" y="943.50"></text></g><g><title>clone (195 samples, 0.18%)</title><rect x="99.8239%" y="917" width="0.1761%" height="15" fill="rgb(209,217,32)" fg:x="110534" fg:w="195"/><text x="100.0739%" y="927.50"></text></g><g><title>start_thread (30 samples, 0.03%)</title><rect x="99.9729%" y="901" width="0.0271%" height="15" fill="rgb(243,203,50)" fg:x="110699" fg:w="30"/><text x="100.2229%" y="911.50"></text></g></svg></svg>