<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1157.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="116849"><g><title>std::sys::unix::futex::futex_wait (45 samples, 0.04%)</title><rect x="0.0086%" y="757" width="0.0385%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="45"/><text x="0.2586%" y="767.50"></text></g><g><title>syscall (43 samples, 0.04%)</title><rect x="0.0103%" y="741" width="0.0368%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="43"/><text x="0.2603%" y="751.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (50 samples, 0.04%)</title><rect x="0.0051%" y="821" width="0.0428%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="50"/><text x="0.2551%" y="831.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (50 samples, 0.04%)</title><rect x="0.0051%" y="805" width="0.0428%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="50"/><text x="0.2551%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (50 samples, 0.04%)</title><rect x="0.0051%" y="789" width="0.0428%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="50"/><text x="0.2551%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (50 samples, 0.04%)</title><rect x="0.0051%" y="773" width="0.0428%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="50"/><text x="0.2551%" y="783.50"></text></g><g><title>async-io (55 samples, 0.05%)</title><rect x="0.0017%" y="1109" width="0.0471%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="55"/><text x="0.2517%" y="1119.50"></text></g><g><title>clone (54 samples, 0.05%)</title><rect x="0.0026%" y="1093" width="0.0462%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="54"/><text x="0.2526%" y="1103.50"></text></g><g><title>start_thread (54 samples, 0.05%)</title><rect x="0.0026%" y="1077" width="0.0462%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="54"/><text x="0.2526%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (54 samples, 0.05%)</title><rect x="0.0026%" y="1061" width="0.0462%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="54"/><text x="0.2526%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (54 samples, 0.05%)</title><rect x="0.0026%" y="1045" width="0.0462%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="54"/><text x="0.2526%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (54 samples, 0.05%)</title><rect x="0.0026%" y="1029" width="0.0462%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="54"/><text x="0.2526%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (54 samples, 0.05%)</title><rect x="0.0026%" y="1013" width="0.0462%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="54"/><text x="0.2526%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (54 samples, 0.05%)</title><rect x="0.0026%" y="997" width="0.0462%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="54"/><text x="0.2526%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (54 samples, 0.05%)</title><rect x="0.0026%" y="981" width="0.0462%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="54"/><text x="0.2526%" y="991.50"></text></g><g><title>std::panicking::try (54 samples, 0.05%)</title><rect x="0.0026%" y="965" width="0.0462%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="54"/><text x="0.2526%" y="975.50"></text></g><g><title>std::panicking::try::do_call (54 samples, 0.05%)</title><rect x="0.0026%" y="949" width="0.0462%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="54"/><text x="0.2526%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (54 samples, 0.05%)</title><rect x="0.0026%" y="933" width="0.0462%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="54"/><text x="0.2526%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (54 samples, 0.05%)</title><rect x="0.0026%" y="917" width="0.0462%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="54"/><text x="0.2526%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (54 samples, 0.05%)</title><rect x="0.0026%" y="901" width="0.0462%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="54"/><text x="0.2526%" y="911.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (54 samples, 0.05%)</title><rect x="0.0026%" y="885" width="0.0462%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="54"/><text x="0.2526%" y="895.50"></text></g><g><title>async_io::driver::main_loop (54 samples, 0.05%)</title><rect x="0.0026%" y="869" width="0.0462%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="54"/><text x="0.2526%" y="879.50"></text></g><g><title>parking::Parker::park_timeout (52 samples, 0.04%)</title><rect x="0.0043%" y="853" width="0.0445%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="52"/><text x="0.2543%" y="863.50"></text></g><g><title>parking::Inner::park (52 samples, 0.04%)</title><rect x="0.0043%" y="837" width="0.0445%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="52"/><text x="0.2543%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="0.0531%" y="1093" width="0.0145%" height="15" fill="rgb(241,131,45)" fg:x="62" fg:w="17"/><text x="0.3031%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="0.0830%" y="1093" width="0.0111%" height="15" fill="rgb(249,31,29)" fg:x="97" fg:w="13"/><text x="0.3330%" y="1103.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 0.01%)</title><rect x="0.1018%" y="1093" width="0.0120%" height="15" fill="rgb(225,111,53)" fg:x="119" fg:w="14"/><text x="0.3518%" y="1103.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (33 samples, 0.03%)</title><rect x="0.2747%" y="1045" width="0.0282%" height="15" fill="rgb(238,160,17)" fg:x="321" fg:w="33"/><text x="0.5247%" y="1055.50"></text></g><g><title>serde::de::MapAccess::next_key (33 samples, 0.03%)</title><rect x="0.2747%" y="1029" width="0.0282%" height="15" fill="rgb(214,148,48)" fg:x="321" fg:w="33"/><text x="0.5247%" y="1039.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (33 samples, 0.03%)</title><rect x="0.2747%" y="1013" width="0.0282%" height="15" fill="rgb(232,36,49)" fg:x="321" fg:w="33"/><text x="0.5247%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (33 samples, 0.03%)</title><rect x="0.2747%" y="997" width="0.0282%" height="15" fill="rgb(209,103,24)" fg:x="321" fg:w="33"/><text x="0.5247%" y="1007.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (33 samples, 0.03%)</title><rect x="0.2747%" y="981" width="0.0282%" height="15" fill="rgb(229,88,8)" fg:x="321" fg:w="33"/><text x="0.5247%" y="991.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (33 samples, 0.03%)</title><rect x="0.2747%" y="965" width="0.0282%" height="15" fill="rgb(213,181,19)" fg:x="321" fg:w="33"/><text x="0.5247%" y="975.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (60 samples, 0.05%)</title><rect x="0.2747%" y="1061" width="0.0513%" height="15" fill="rgb(254,191,54)" fg:x="321" fg:w="60"/><text x="0.5247%" y="1071.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (27 samples, 0.02%)</title><rect x="0.3030%" y="1045" width="0.0231%" height="15" fill="rgb(241,83,37)" fg:x="354" fg:w="27"/><text x="0.5530%" y="1055.50"></text></g><g><title>serde::de::MapAccess::next_value (27 samples, 0.02%)</title><rect x="0.3030%" y="1029" width="0.0231%" height="15" fill="rgb(233,36,39)" fg:x="354" fg:w="27"/><text x="0.5530%" y="1039.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (27 samples, 0.02%)</title><rect x="0.3030%" y="1013" width="0.0231%" height="15" fill="rgb(226,3,54)" fg:x="354" fg:w="27"/><text x="0.5530%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (27 samples, 0.02%)</title><rect x="0.3030%" y="997" width="0.0231%" height="15" fill="rgb(245,192,40)" fg:x="354" fg:w="27"/><text x="0.5530%" y="1007.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (27 samples, 0.02%)</title><rect x="0.3030%" y="981" width="0.0231%" height="15" fill="rgb(238,167,29)" fg:x="354" fg:w="27"/><text x="0.5530%" y="991.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (36 samples, 0.03%)</title><rect x="0.3261%" y="1045" width="0.0308%" height="15" fill="rgb(232,182,51)" fg:x="381" fg:w="36"/><text x="0.5761%" y="1055.50"></text></g><g><title>serde::de::SeqAccess::next_element (36 samples, 0.03%)</title><rect x="0.3261%" y="1029" width="0.0308%" height="15" fill="rgb(231,60,39)" fg:x="381" fg:w="36"/><text x="0.5761%" y="1039.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (36 samples, 0.03%)</title><rect x="0.3261%" y="1013" width="0.0308%" height="15" fill="rgb(208,69,12)" fg:x="381" fg:w="36"/><text x="0.5761%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (36 samples, 0.03%)</title><rect x="0.3261%" y="997" width="0.0308%" height="15" fill="rgb(235,93,37)" fg:x="381" fg:w="36"/><text x="0.5761%" y="1007.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (36 samples, 0.03%)</title><rect x="0.3261%" y="981" width="0.0308%" height="15" fill="rgb(213,116,39)" fg:x="381" fg:w="36"/><text x="0.5761%" y="991.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (37 samples, 0.03%)</title><rect x="0.3261%" y="1061" width="0.0317%" height="15" fill="rgb(222,207,29)" fg:x="381" fg:w="37"/><text x="0.5761%" y="1071.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (341 samples, 0.29%)</title><rect x="0.1138%" y="1077" width="0.2918%" height="15" fill="rgb(206,96,30)" fg:x="133" fg:w="341"/><text x="0.3638%" y="1087.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (56 samples, 0.05%)</title><rect x="0.3577%" y="1061" width="0.0479%" height="15" fill="rgb(218,138,4)" fg:x="418" fg:w="56"/><text x="0.6077%" y="1071.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (92 samples, 0.08%)</title><rect x="0.7137%" y="1045" width="0.0787%" height="15" fill="rgb(250,191,14)" fg:x="834" fg:w="92"/><text x="0.9637%" y="1055.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (92 samples, 0.08%)</title><rect x="0.7137%" y="1029" width="0.0787%" height="15" fill="rgb(239,60,40)" fg:x="834" fg:w="92"/><text x="0.9637%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (92 samples, 0.08%)</title><rect x="0.7137%" y="1013" width="0.0787%" height="15" fill="rgb(206,27,48)" fg:x="834" fg:w="92"/><text x="0.9637%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (92 samples, 0.08%)</title><rect x="0.7137%" y="997" width="0.0787%" height="15" fill="rgb(225,35,8)" fg:x="834" fg:w="92"/><text x="0.9637%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (92 samples, 0.08%)</title><rect x="0.7137%" y="981" width="0.0787%" height="15" fill="rgb(250,213,24)" fg:x="834" fg:w="92"/><text x="0.9637%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (92 samples, 0.08%)</title><rect x="0.7137%" y="965" width="0.0787%" height="15" fill="rgb(247,123,22)" fg:x="834" fg:w="92"/><text x="0.9637%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (89 samples, 0.08%)</title><rect x="0.7163%" y="949" width="0.0762%" height="15" fill="rgb(231,138,38)" fg:x="837" fg:w="89"/><text x="0.9663%" y="959.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (527 samples, 0.45%)</title><rect x="0.4057%" y="1077" width="0.4510%" height="15" fill="rgb(231,145,46)" fg:x="474" fg:w="527"/><text x="0.6557%" y="1087.50"></text></g><g><title>rmp::encode::str::write_str (167 samples, 0.14%)</title><rect x="0.7137%" y="1061" width="0.1429%" height="15" fill="rgb(251,118,11)" fg:x="834" fg:w="167"/><text x="0.9637%" y="1071.50"></text></g><g><title>rmp::encode::str::write_str_len (75 samples, 0.06%)</title><rect x="0.7925%" y="1045" width="0.0642%" height="15" fill="rgb(217,147,25)" fg:x="926" fg:w="75"/><text x="1.0425%" y="1055.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (35 samples, 0.03%)</title><rect x="0.8567%" y="1077" width="0.0300%" height="15" fill="rgb(247,81,37)" fg:x="1001" fg:w="35"/><text x="1.1067%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (15 samples, 0.01%)</title><rect x="0.9200%" y="1061" width="0.0128%" height="15" fill="rgb(209,12,38)" fg:x="1075" fg:w="15"/><text x="1.1700%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (69 samples, 0.06%)</title><rect x="0.8935%" y="1077" width="0.0591%" height="15" fill="rgb(227,1,9)" fg:x="1044" fg:w="69"/><text x="1.1435%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (23 samples, 0.02%)</title><rect x="0.9328%" y="1061" width="0.0197%" height="15" fill="rgb(248,47,43)" fg:x="1090" fg:w="23"/><text x="1.1828%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="0.9328%" y="1045" width="0.0197%" height="15" fill="rgb(221,10,30)" fg:x="1090" fg:w="23"/><text x="1.1828%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="0.9328%" y="1029" width="0.0197%" height="15" fill="rgb(210,229,1)" fg:x="1090" fg:w="23"/><text x="1.1828%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (55 samples, 0.05%)</title><rect x="0.9525%" y="1077" width="0.0471%" height="15" fill="rgb(222,148,37)" fg:x="1113" fg:w="55"/><text x="1.2025%" y="1087.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="1.0047%" y="1061" width="0.0145%" height="15" fill="rgb(234,67,33)" fg:x="1174" fg:w="17"/><text x="1.2547%" y="1071.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="1.0047%" y="1045" width="0.0145%" height="15" fill="rgb(247,98,35)" fg:x="1174" fg:w="17"/><text x="1.2547%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="1.0047%" y="1029" width="0.0145%" height="15" fill="rgb(247,138,52)" fg:x="1174" fg:w="17"/><text x="1.2547%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.01%)</title><rect x="1.0047%" y="1013" width="0.0145%" height="15" fill="rgb(213,79,30)" fg:x="1174" fg:w="17"/><text x="1.2547%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (30 samples, 0.03%)</title><rect x="0.9996%" y="1077" width="0.0257%" height="15" fill="rgb(246,177,23)" fg:x="1168" fg:w="30"/><text x="1.2496%" y="1087.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (14 samples, 0.01%)</title><rect x="1.0330%" y="1077" width="0.0120%" height="15" fill="rgb(230,62,27)" fg:x="1207" fg:w="14"/><text x="1.2830%" y="1087.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="1.0595%" y="1077" width="0.0445%" height="15" fill="rgb(216,154,8)" fg:x="1238" fg:w="52"/><text x="1.3095%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (13 samples, 0.01%)</title><rect x="1.0929%" y="1061" width="0.0111%" height="15" fill="rgb(244,35,45)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="1071.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="1.0929%" y="1045" width="0.0111%" height="15" fill="rgb(251,115,12)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (13 samples, 0.01%)</title><rect x="1.0929%" y="1029" width="0.0111%" height="15" fill="rgb(240,54,50)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="1.0929%" y="1013" width="0.0111%" height="15" fill="rgb(233,84,52)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="1.0929%" y="997" width="0.0111%" height="15" fill="rgb(207,117,47)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="1.0929%" y="981" width="0.0111%" height="15" fill="rgb(249,43,39)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="991.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="1.0929%" y="965" width="0.0111%" height="15" fill="rgb(209,38,44)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="1.0929%" y="949" width="0.0111%" height="15" fill="rgb(236,212,23)" fg:x="1277" fg:w="13"/><text x="1.3429%" y="959.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (91 samples, 0.08%)</title><rect x="1.1040%" y="1077" width="0.0779%" height="15" fill="rgb(242,79,21)" fg:x="1290" fg:w="91"/><text x="1.3540%" y="1087.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.03%)</title><rect x="1.1819%" y="1077" width="0.0291%" height="15" fill="rgb(211,96,35)" fg:x="1381" fg:w="34"/><text x="1.4319%" y="1087.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (40 samples, 0.03%)</title><rect x="1.2110%" y="1077" width="0.0342%" height="15" fill="rgb(253,215,40)" fg:x="1415" fg:w="40"/><text x="1.4610%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="1.4146%" y="1045" width="0.0120%" height="15" fill="rgb(211,81,21)" fg:x="1653" fg:w="14"/><text x="1.6646%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="1.4146%" y="1029" width="0.0120%" height="15" fill="rgb(208,190,38)" fg:x="1653" fg:w="14"/><text x="1.6646%" y="1039.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (48 samples, 0.04%)</title><rect x="1.3890%" y="1061" width="0.0411%" height="15" fill="rgb(235,213,38)" fg:x="1623" fg:w="48"/><text x="1.6390%" y="1071.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="1.4301%" y="1045" width="0.0103%" height="15" fill="rgb(237,122,38)" fg:x="1671" fg:w="12"/><text x="1.6801%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (25 samples, 0.02%)</title><rect x="1.4301%" y="1061" width="0.0214%" height="15" fill="rgb(244,218,35)" fg:x="1671" fg:w="25"/><text x="1.6801%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (14 samples, 0.01%)</title><rect x="1.4557%" y="1029" width="0.0120%" height="15" fill="rgb(240,68,47)" fg:x="1701" fg:w="14"/><text x="1.7057%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (14 samples, 0.01%)</title><rect x="1.4557%" y="1013" width="0.0120%" height="15" fill="rgb(210,16,53)" fg:x="1701" fg:w="14"/><text x="1.7057%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="1.4557%" y="997" width="0.0120%" height="15" fill="rgb(235,124,12)" fg:x="1701" fg:w="14"/><text x="1.7057%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (17 samples, 0.01%)</title><rect x="1.4557%" y="1061" width="0.0145%" height="15" fill="rgb(224,169,11)" fg:x="1701" fg:w="17"/><text x="1.7057%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (17 samples, 0.01%)</title><rect x="1.4557%" y="1045" width="0.0145%" height="15" fill="rgb(250,166,2)" fg:x="1701" fg:w="17"/><text x="1.7057%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (15 samples, 0.01%)</title><rect x="1.4703%" y="1061" width="0.0128%" height="15" fill="rgb(242,216,29)" fg:x="1718" fg:w="15"/><text x="1.7203%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (23 samples, 0.02%)</title><rect x="1.4831%" y="1061" width="0.0197%" height="15" fill="rgb(230,116,27)" fg:x="1733" fg:w="23"/><text x="1.7331%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (339 samples, 0.29%)</title><rect x="1.2461%" y="1077" width="0.2901%" height="15" fill="rgb(228,99,48)" fg:x="1456" fg:w="339"/><text x="1.4961%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (27 samples, 0.02%)</title><rect x="1.5131%" y="1061" width="0.0231%" height="15" fill="rgb(253,11,6)" fg:x="1768" fg:w="27"/><text x="1.7631%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="1.5362%" y="1077" width="0.0231%" height="15" fill="rgb(247,143,39)" fg:x="1795" fg:w="27"/><text x="1.7862%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="1.5670%" y="1077" width="0.0231%" height="15" fill="rgb(236,97,10)" fg:x="1831" fg:w="27"/><text x="1.8170%" y="1087.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.5901%" y="1077" width="0.0120%" height="15" fill="rgb(233,208,19)" fg:x="1858" fg:w="14"/><text x="1.8401%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (19 samples, 0.02%)</title><rect x="1.6021%" y="1077" width="0.0163%" height="15" fill="rgb(216,164,2)" fg:x="1872" fg:w="19"/><text x="1.8521%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (65 samples, 0.06%)</title><rect x="1.6183%" y="1077" width="0.0556%" height="15" fill="rgb(220,129,5)" fg:x="1891" fg:w="65"/><text x="1.8683%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (61 samples, 0.05%)</title><rect x="1.6885%" y="1077" width="0.0522%" height="15" fill="rgb(242,17,10)" fg:x="1973" fg:w="61"/><text x="1.9385%" y="1087.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (21 samples, 0.02%)</title><rect x="1.7227%" y="1061" width="0.0180%" height="15" fill="rgb(242,107,0)" fg:x="2013" fg:w="21"/><text x="1.9727%" y="1071.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="1.7253%" y="1045" width="0.0154%" height="15" fill="rgb(251,28,31)" fg:x="2016" fg:w="18"/><text x="1.9753%" y="1055.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (17 samples, 0.01%)</title><rect x="1.7407%" y="1077" width="0.0145%" height="15" fill="rgb(233,223,10)" fg:x="2034" fg:w="17"/><text x="1.9907%" y="1087.50"></text></g><g><title>value_trait::Builder::object (12 samples, 0.01%)</title><rect x="1.7450%" y="1061" width="0.0103%" height="15" fill="rgb(215,21,27)" fg:x="2039" fg:w="12"/><text x="1.9950%" y="1071.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (12 samples, 0.01%)</title><rect x="1.7450%" y="1045" width="0.0103%" height="15" fill="rgb(232,23,21)" fg:x="2039" fg:w="12"/><text x="1.9950%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (12 samples, 0.01%)</title><rect x="1.7450%" y="1029" width="0.0103%" height="15" fill="rgb(244,5,23)" fg:x="2039" fg:w="12"/><text x="1.9950%" y="1039.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="1.7707%" y="1077" width="0.0881%" height="15" fill="rgb(226,81,46)" fg:x="2069" fg:w="103"/><text x="2.0207%" y="1087.50"></text></g><g><title>[pdk-noknownkey] (40 samples, 0.03%)</title><rect x="1.8588%" y="1077" width="0.0342%" height="15" fill="rgb(247,70,30)" fg:x="2172" fg:w="40"/><text x="2.1088%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (40 samples, 0.03%)</title><rect x="1.8588%" y="1061" width="0.0342%" height="15" fill="rgb(212,68,19)" fg:x="2172" fg:w="40"/><text x="2.1088%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (40 samples, 0.03%)</title><rect x="1.8588%" y="1045" width="0.0342%" height="15" fill="rgb(240,187,13)" fg:x="2172" fg:w="40"/><text x="2.1088%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (40 samples, 0.03%)</title><rect x="1.8588%" y="1029" width="0.0342%" height="15" fill="rgb(223,113,26)" fg:x="2172" fg:w="40"/><text x="2.1088%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (40 samples, 0.03%)</title><rect x="1.8588%" y="1013" width="0.0342%" height="15" fill="rgb(206,192,2)" fg:x="2172" fg:w="40"/><text x="2.1088%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="1.8597%" y="997" width="0.0334%" height="15" fill="rgb(241,108,4)" fg:x="2173" fg:w="39"/><text x="2.1097%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (39 samples, 0.03%)</title><rect x="1.8597%" y="981" width="0.0334%" height="15" fill="rgb(247,173,49)" fg:x="2173" fg:w="39"/><text x="2.1097%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="1.8597%" y="965" width="0.0334%" height="15" fill="rgb(224,114,35)" fg:x="2173" fg:w="39"/><text x="2.1097%" y="975.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (39 samples, 0.03%)</title><rect x="1.8597%" y="949" width="0.0334%" height="15" fill="rgb(245,159,27)" fg:x="2173" fg:w="39"/><text x="2.1097%" y="959.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (39 samples, 0.03%)</title><rect x="1.8597%" y="933" width="0.0334%" height="15" fill="rgb(245,172,44)" fg:x="2173" fg:w="39"/><text x="2.1097%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (39 samples, 0.03%)</title><rect x="1.8597%" y="917" width="0.0334%" height="15" fill="rgb(236,23,11)" fg:x="2173" fg:w="39"/><text x="2.1097%" y="927.50"></text></g><g><title>__clock_gettime (18 samples, 0.02%)</title><rect x="1.8930%" y="1077" width="0.0154%" height="15" fill="rgb(205,117,38)" fg:x="2212" fg:w="18"/><text x="2.1430%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (35 samples, 0.03%)</title><rect x="1.9119%" y="1077" width="0.0300%" height="15" fill="rgb(237,72,25)" fg:x="2234" fg:w="35"/><text x="2.1619%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (26 samples, 0.02%)</title><rect x="1.9196%" y="1061" width="0.0223%" height="15" fill="rgb(244,70,9)" fg:x="2243" fg:w="26"/><text x="2.1696%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="1.9196%" y="1045" width="0.0223%" height="15" fill="rgb(217,125,39)" fg:x="2243" fg:w="26"/><text x="2.1696%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="1.9196%" y="1029" width="0.0223%" height="15" fill="rgb(235,36,10)" fg:x="2243" fg:w="26"/><text x="2.1696%" y="1039.50"></text></g><g><title>abi_stable::erased_types::iterator::next (66 samples, 0.06%)</title><rect x="1.9418%" y="1077" width="0.0565%" height="15" fill="rgb(251,123,47)" fg:x="2269" fg:w="66"/><text x="2.1918%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="2.0360%" y="1061" width="0.0419%" height="15" fill="rgb(221,13,13)" fg:x="2379" fg:w="49"/><text x="2.2860%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (49 samples, 0.04%)</title><rect x="2.0360%" y="1045" width="0.0419%" height="15" fill="rgb(238,131,9)" fg:x="2379" fg:w="49"/><text x="2.2860%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49 samples, 0.04%)</title><rect x="2.0360%" y="1029" width="0.0419%" height="15" fill="rgb(211,50,8)" fg:x="2379" fg:w="49"/><text x="2.2860%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.04%)</title><rect x="2.0360%" y="1013" width="0.0419%" height="15" fill="rgb(245,182,24)" fg:x="2379" fg:w="49"/><text x="2.2860%" y="1023.50"></text></g><g><title>__rg_dealloc (49 samples, 0.04%)</title><rect x="2.0360%" y="997" width="0.0419%" height="15" fill="rgb(242,14,37)" fg:x="2379" fg:w="49"/><text x="2.2860%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (49 samples, 0.04%)</title><rect x="2.0360%" y="981" width="0.0419%" height="15" fill="rgb(246,228,12)" fg:x="2379" fg:w="49"/><text x="2.2860%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="2.0779%" y="1061" width="0.0111%" height="15" fill="rgb(213,55,15)" fg:x="2428" fg:w="13"/><text x="2.3279%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="2.0779%" y="1045" width="0.0111%" height="15" fill="rgb(209,9,3)" fg:x="2428" fg:w="13"/><text x="2.3279%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="2.0779%" y="1029" width="0.0111%" height="15" fill="rgb(230,59,30)" fg:x="2428" fg:w="13"/><text x="2.3279%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="2.0779%" y="1013" width="0.0111%" height="15" fill="rgb(209,121,21)" fg:x="2428" fg:w="13"/><text x="2.3279%" y="1023.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="2.0779%" y="997" width="0.0111%" height="15" fill="rgb(220,109,13)" fg:x="2428" fg:w="13"/><text x="2.3279%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="2.0779%" y="981" width="0.0111%" height="15" fill="rgb(232,18,1)" fg:x="2428" fg:w="13"/><text x="2.3279%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (100 samples, 0.09%)</title><rect x="2.0052%" y="1077" width="0.0856%" height="15" fill="rgb(215,41,42)" fg:x="2343" fg:w="100"/><text x="2.2552%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (21 samples, 0.02%)</title><rect x="2.0907%" y="1077" width="0.0180%" height="15" fill="rgb(224,123,36)" fg:x="2443" fg:w="21"/><text x="2.3407%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::entry::RVacantEntry&lt;K,V,S&gt;::insert (15 samples, 0.01%)</title><rect x="2.1378%" y="1061" width="0.0128%" height="15" fill="rgb(240,125,3)" fg:x="2498" fg:w="15"/><text x="2.3878%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (62 samples, 0.05%)</title><rect x="2.1087%" y="1077" width="0.0531%" height="15" fill="rgb(205,98,50)" fg:x="2464" fg:w="62"/><text x="2.3587%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (13 samples, 0.01%)</title><rect x="2.1506%" y="1061" width="0.0111%" height="15" fill="rgb(205,185,37)" fg:x="2513" fg:w="13"/><text x="2.4006%" y="1071.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (13 samples, 0.01%)</title><rect x="2.1506%" y="1045" width="0.0111%" height="15" fill="rgb(238,207,15)" fg:x="2513" fg:w="13"/><text x="2.4006%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (13 samples, 0.01%)</title><rect x="2.1506%" y="1029" width="0.0111%" height="15" fill="rgb(213,199,42)" fg:x="2513" fg:w="13"/><text x="2.4006%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="2.1506%" y="1013" width="0.0111%" height="15" fill="rgb(235,201,11)" fg:x="2513" fg:w="13"/><text x="2.4006%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (26 samples, 0.02%)</title><rect x="2.1686%" y="1077" width="0.0223%" height="15" fill="rgb(207,46,11)" fg:x="2534" fg:w="26"/><text x="2.4186%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (57 samples, 0.05%)</title><rect x="2.1909%" y="1077" width="0.0488%" height="15" fill="rgb(241,35,35)" fg:x="2560" fg:w="57"/><text x="2.4409%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (63 samples, 0.05%)</title><rect x="2.2396%" y="1077" width="0.0539%" height="15" fill="rgb(243,32,47)" fg:x="2617" fg:w="63"/><text x="2.4896%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (15 samples, 0.01%)</title><rect x="2.2936%" y="1077" width="0.0128%" height="15" fill="rgb(247,202,23)" fg:x="2680" fg:w="15"/><text x="2.5436%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (12 samples, 0.01%)</title><rect x="2.3064%" y="1077" width="0.0103%" height="15" fill="rgb(219,102,11)" fg:x="2695" fg:w="12"/><text x="2.5564%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (66 samples, 0.06%)</title><rect x="2.3167%" y="1077" width="0.0565%" height="15" fill="rgb(243,110,44)" fg:x="2707" fg:w="66"/><text x="2.5667%" y="1087.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (113 samples, 0.10%)</title><rect x="2.4117%" y="997" width="0.0967%" height="15" fill="rgb(222,74,54)" fg:x="2818" fg:w="113"/><text x="2.6617%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (183 samples, 0.16%)</title><rect x="2.3731%" y="1077" width="0.1566%" height="15" fill="rgb(216,99,12)" fg:x="2773" fg:w="183"/><text x="2.6231%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (138 samples, 0.12%)</title><rect x="2.4117%" y="1061" width="0.1181%" height="15" fill="rgb(226,22,26)" fg:x="2818" fg:w="138"/><text x="2.6617%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (138 samples, 0.12%)</title><rect x="2.4117%" y="1045" width="0.1181%" height="15" fill="rgb(217,163,10)" fg:x="2818" fg:w="138"/><text x="2.6617%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (138 samples, 0.12%)</title><rect x="2.4117%" y="1029" width="0.1181%" height="15" fill="rgb(213,25,53)" fg:x="2818" fg:w="138"/><text x="2.6617%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_str (138 samples, 0.12%)</title><rect x="2.4117%" y="1013" width="0.1181%" height="15" fill="rgb(252,105,26)" fg:x="2818" fg:w="138"/><text x="2.6617%" y="1023.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (25 samples, 0.02%)</title><rect x="2.5084%" y="997" width="0.0214%" height="15" fill="rgb(220,39,43)" fg:x="2931" fg:w="25"/><text x="2.7584%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (18 samples, 0.02%)</title><rect x="2.5298%" y="1077" width="0.0154%" height="15" fill="rgb(229,68,48)" fg:x="2956" fg:w="18"/><text x="2.7798%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (18 samples, 0.02%)</title><rect x="2.5298%" y="1061" width="0.0154%" height="15" fill="rgb(252,8,32)" fg:x="2956" fg:w="18"/><text x="2.7798%" y="1071.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.02%)</title><rect x="2.5298%" y="1045" width="0.0154%" height="15" fill="rgb(223,20,43)" fg:x="2956" fg:w="18"/><text x="2.7798%" y="1055.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (18 samples, 0.02%)</title><rect x="2.5298%" y="1029" width="0.0154%" height="15" fill="rgb(229,81,49)" fg:x="2956" fg:w="18"/><text x="2.7798%" y="1039.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.02%)</title><rect x="2.5298%" y="1013" width="0.0154%" height="15" fill="rgb(236,28,36)" fg:x="2956" fg:w="18"/><text x="2.7798%" y="1023.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (18 samples, 0.02%)</title><rect x="2.5298%" y="997" width="0.0154%" height="15" fill="rgb(249,185,26)" fg:x="2956" fg:w="18"/><text x="2.7798%" y="1007.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.02%)</title><rect x="2.5298%" y="981" width="0.0154%" height="15" fill="rgb(249,174,33)" fg:x="2956" fg:w="18"/><text x="2.7798%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (19 samples, 0.02%)</title><rect x="2.5452%" y="1077" width="0.0163%" height="15" fill="rgb(233,201,37)" fg:x="2974" fg:w="19"/><text x="2.7952%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.06%)</title><rect x="2.6042%" y="1013" width="0.0556%" height="15" fill="rgb(221,78,26)" fg:x="3043" fg:w="65"/><text x="2.8542%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (65 samples, 0.06%)</title><rect x="2.6042%" y="997" width="0.0556%" height="15" fill="rgb(250,127,30)" fg:x="3043" fg:w="65"/><text x="2.8542%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (65 samples, 0.06%)</title><rect x="2.6042%" y="981" width="0.0556%" height="15" fill="rgb(230,49,44)" fg:x="3043" fg:w="65"/><text x="2.8542%" y="991.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (65 samples, 0.06%)</title><rect x="2.6042%" y="965" width="0.0556%" height="15" fill="rgb(229,67,23)" fg:x="3043" fg:w="65"/><text x="2.8542%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (69 samples, 0.06%)</title><rect x="2.6042%" y="1029" width="0.0591%" height="15" fill="rgb(249,83,47)" fg:x="3043" fg:w="69"/><text x="2.8542%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="2.6633%" y="1013" width="0.0274%" height="15" fill="rgb(215,43,3)" fg:x="3112" fg:w="32"/><text x="2.9133%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (32 samples, 0.03%)</title><rect x="2.6633%" y="997" width="0.0274%" height="15" fill="rgb(238,154,13)" fg:x="3112" fg:w="32"/><text x="2.9133%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (32 samples, 0.03%)</title><rect x="2.6633%" y="981" width="0.0274%" height="15" fill="rgb(219,56,2)" fg:x="3112" fg:w="32"/><text x="2.9133%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (32 samples, 0.03%)</title><rect x="2.6633%" y="965" width="0.0274%" height="15" fill="rgb(233,0,4)" fg:x="3112" fg:w="32"/><text x="2.9133%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.03%)</title><rect x="2.6633%" y="949" width="0.0274%" height="15" fill="rgb(235,30,7)" fg:x="3112" fg:w="32"/><text x="2.9133%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (38 samples, 0.03%)</title><rect x="2.6633%" y="1029" width="0.0325%" height="15" fill="rgb(250,79,13)" fg:x="3112" fg:w="38"/><text x="2.9133%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (205 samples, 0.18%)</title><rect x="2.5631%" y="1077" width="0.1754%" height="15" fill="rgb(211,146,34)" fg:x="2995" fg:w="205"/><text x="2.8131%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (157 samples, 0.13%)</title><rect x="2.6042%" y="1061" width="0.1344%" height="15" fill="rgb(228,22,38)" fg:x="3043" fg:w="157"/><text x="2.8542%" y="1071.50"></text></g><g><title>core::mem::drop (157 samples, 0.13%)</title><rect x="2.6042%" y="1045" width="0.1344%" height="15" fill="rgb(235,168,5)" fg:x="3043" fg:w="157"/><text x="2.8542%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (48 samples, 0.04%)</title><rect x="2.6975%" y="1029" width="0.0411%" height="15" fill="rgb(221,155,16)" fg:x="3152" fg:w="48"/><text x="2.9475%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="2.6975%" y="1013" width="0.0411%" height="15" fill="rgb(215,215,53)" fg:x="3152" fg:w="48"/><text x="2.9475%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.02%)</title><rect x="2.7403%" y="1077" width="0.0214%" height="15" fill="rgb(223,4,10)" fg:x="3202" fg:w="25"/><text x="2.9903%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 0.01%)</title><rect x="2.7480%" y="1061" width="0.0137%" height="15" fill="rgb(234,103,6)" fg:x="3211" fg:w="16"/><text x="2.9980%" y="1071.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (15 samples, 0.01%)</title><rect x="2.7488%" y="1045" width="0.0128%" height="15" fill="rgb(227,97,0)" fg:x="3212" fg:w="15"/><text x="2.9988%" y="1055.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (15 samples, 0.01%)</title><rect x="2.7488%" y="1029" width="0.0128%" height="15" fill="rgb(234,150,53)" fg:x="3212" fg:w="15"/><text x="2.9988%" y="1039.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.02%)</title><rect x="2.7617%" y="1077" width="0.0180%" height="15" fill="rgb(228,201,54)" fg:x="3227" fg:w="21"/><text x="3.0117%" y="1087.50"></text></g><g><title>async_executor::State::notify (13 samples, 0.01%)</title><rect x="2.7976%" y="1077" width="0.0111%" height="15" fill="rgb(222,22,37)" fg:x="3269" fg:w="13"/><text x="3.0476%" y="1087.50"></text></g><g><title>async_executor::Ticker::wake (16 samples, 0.01%)</title><rect x="2.8156%" y="1077" width="0.0137%" height="15" fill="rgb(237,53,32)" fg:x="3290" fg:w="16"/><text x="3.0656%" y="1087.50"></text></g><g><title>async_executor::steal (168 samples, 0.14%)</title><rect x="2.8293%" y="1077" width="0.1438%" height="15" fill="rgb(233,25,53)" fg:x="3306" fg:w="168"/><text x="3.0793%" y="1087.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (17 samples, 0.01%)</title><rect x="2.9799%" y="1077" width="0.0145%" height="15" fill="rgb(210,40,34)" fg:x="3482" fg:w="17"/><text x="3.2299%" y="1087.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (15 samples, 0.01%)</title><rect x="3.0030%" y="1077" width="0.0128%" height="15" fill="rgb(241,220,44)" fg:x="3509" fg:w="15"/><text x="3.2530%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (207 samples, 0.18%)</title><rect x="3.0176%" y="1077" width="0.1772%" height="15" fill="rgb(235,28,35)" fg:x="3526" fg:w="207"/><text x="3.2676%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (23 samples, 0.02%)</title><rect x="3.1947%" y="1077" width="0.0197%" height="15" fill="rgb(210,56,17)" fg:x="3733" fg:w="23"/><text x="3.4447%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (36 samples, 0.03%)</title><rect x="3.2144%" y="1077" width="0.0308%" height="15" fill="rgb(224,130,29)" fg:x="3756" fg:w="36"/><text x="3.4644%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.01%)</title><rect x="3.2503%" y="1077" width="0.0137%" height="15" fill="rgb(235,212,8)" fg:x="3798" fg:w="16"/><text x="3.5003%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (76 samples, 0.07%)</title><rect x="3.2640%" y="1077" width="0.0650%" height="15" fill="rgb(223,33,50)" fg:x="3814" fg:w="76"/><text x="3.5140%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (41 samples, 0.04%)</title><rect x="3.3291%" y="1077" width="0.0351%" height="15" fill="rgb(219,149,13)" fg:x="3890" fg:w="41"/><text x="3.5791%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="3.3744%" y="1077" width="0.0103%" height="15" fill="rgb(250,156,29)" fg:x="3943" fg:w="12"/><text x="3.6244%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (34 samples, 0.03%)</title><rect x="3.3916%" y="1077" width="0.0291%" height="15" fill="rgb(216,193,19)" fg:x="3963" fg:w="34"/><text x="3.6416%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (20 samples, 0.02%)</title><rect x="3.4035%" y="1061" width="0.0171%" height="15" fill="rgb(216,135,14)" fg:x="3977" fg:w="20"/><text x="3.6535%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="3.4207%" y="1077" width="0.0240%" height="15" fill="rgb(241,47,5)" fg:x="3997" fg:w="28"/><text x="3.6707%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="3.4515%" y="1077" width="0.0163%" height="15" fill="rgb(233,42,35)" fg:x="4033" fg:w="19"/><text x="3.7015%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (32 samples, 0.03%)</title><rect x="3.4677%" y="1077" width="0.0274%" height="15" fill="rgb(231,13,6)" fg:x="4052" fg:w="32"/><text x="3.7177%" y="1087.50"></text></g><g><title>core::str::converts::from_utf8 (19 samples, 0.02%)</title><rect x="3.5011%" y="1077" width="0.0163%" height="15" fill="rgb(207,181,40)" fg:x="4091" fg:w="19"/><text x="3.7511%" y="1087.50"></text></g><g><title>event_listener::Event::notify (43 samples, 0.04%)</title><rect x="3.5251%" y="1077" width="0.0368%" height="15" fill="rgb(254,173,49)" fg:x="4119" fg:w="43"/><text x="3.7751%" y="1087.50"></text></g><g><title>event_listener::full_fence (29 samples, 0.02%)</title><rect x="3.5370%" y="1061" width="0.0248%" height="15" fill="rgb(221,1,38)" fg:x="4133" fg:w="29"/><text x="3.7870%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (13 samples, 0.01%)</title><rect x="3.5670%" y="1077" width="0.0111%" height="15" fill="rgb(206,124,46)" fg:x="4168" fg:w="13"/><text x="3.8170%" y="1087.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (17 samples, 0.01%)</title><rect x="3.5781%" y="1077" width="0.0145%" height="15" fill="rgb(249,21,11)" fg:x="4181" fg:w="17"/><text x="3.8281%" y="1087.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (24 samples, 0.02%)</title><rect x="3.5927%" y="1077" width="0.0205%" height="15" fill="rgb(222,201,40)" fg:x="4198" fg:w="24"/><text x="3.8427%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.02%)</title><rect x="3.6132%" y="1077" width="0.0248%" height="15" fill="rgb(235,61,29)" fg:x="4222" fg:w="29"/><text x="3.8632%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (13 samples, 0.01%)</title><rect x="3.6380%" y="1077" width="0.0111%" height="15" fill="rgb(219,207,3)" fg:x="4251" fg:w="13"/><text x="3.8880%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (25 samples, 0.02%)</title><rect x="3.6577%" y="1077" width="0.0214%" height="15" fill="rgb(222,56,46)" fg:x="4274" fg:w="25"/><text x="3.9077%" y="1087.50"></text></g><g><title>parking::Unparker::unpark (18 samples, 0.02%)</title><rect x="3.6851%" y="1077" width="0.0154%" height="15" fill="rgb(239,76,54)" fg:x="4306" fg:w="18"/><text x="3.9351%" y="1087.50"></text></g><g><title>rmp::encode::uint::write_uint (61 samples, 0.05%)</title><rect x="3.7056%" y="1077" width="0.0522%" height="15" fill="rgb(231,124,27)" fg:x="4330" fg:w="61"/><text x="3.9556%" y="1087.50"></text></g><g><title>rmp::encode::write_array_len (18 samples, 0.02%)</title><rect x="3.7578%" y="1077" width="0.0154%" height="15" fill="rgb(249,195,6)" fg:x="4391" fg:w="18"/><text x="4.0078%" y="1087.50"></text></g><g><title>rmp::encode::write_marker (161 samples, 0.14%)</title><rect x="3.7775%" y="1077" width="0.1378%" height="15" fill="rgb(237,174,47)" fg:x="4414" fg:w="161"/><text x="4.0275%" y="1087.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.05%)</title><rect x="3.9153%" y="1077" width="0.0488%" height="15" fill="rgb(206,201,31)" fg:x="4575" fg:w="57"/><text x="4.1653%" y="1087.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.02%)</title><rect x="3.9641%" y="1077" width="0.0248%" height="15" fill="rgb(231,57,52)" fg:x="4632" fg:w="29"/><text x="4.2141%" y="1087.50"></text></g><g><title>sn_rust_realloc (15 samples, 0.01%)</title><rect x="3.9889%" y="1077" width="0.0128%" height="15" fill="rgb(248,177,22)" fg:x="4661" fg:w="15"/><text x="4.2389%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="4.0017%" y="1077" width="0.0137%" height="15" fill="rgb(215,211,37)" fg:x="4676" fg:w="16"/><text x="4.2517%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="4.0154%" y="1077" width="0.0120%" height="15" fill="rgb(241,128,51)" fg:x="4692" fg:w="14"/><text x="4.2654%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 0.01%)</title><rect x="4.0291%" y="1077" width="0.0103%" height="15" fill="rgb(227,165,31)" fg:x="4708" fg:w="12"/><text x="4.2791%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (22 samples, 0.02%)</title><rect x="4.0394%" y="1077" width="0.0188%" height="15" fill="rgb(228,167,24)" fg:x="4720" fg:w="22"/><text x="4.2894%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (20 samples, 0.02%)</title><rect x="4.0582%" y="1077" width="0.0171%" height="15" fill="rgb(228,143,12)" fg:x="4742" fg:w="20"/><text x="4.3082%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.02%)</title><rect x="4.0753%" y="1077" width="0.0188%" height="15" fill="rgb(249,149,8)" fg:x="4762" fg:w="22"/><text x="4.3253%" y="1087.50"></text></g><g><title>syscall (23 samples, 0.02%)</title><rect x="4.0942%" y="1077" width="0.0197%" height="15" fill="rgb(243,35,44)" fg:x="4784" fg:w="23"/><text x="4.3442%" y="1087.50"></text></g><g><title>tremor_common::time::nanotime (14 samples, 0.01%)</title><rect x="4.1139%" y="1077" width="0.0120%" height="15" fill="rgb(246,89,9)" fg:x="4807" fg:w="14"/><text x="4.3639%" y="1087.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (20 samples, 0.02%)</title><rect x="4.1258%" y="1077" width="0.0171%" height="15" fill="rgb(233,213,13)" fg:x="4821" fg:w="20"/><text x="4.3758%" y="1087.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (12 samples, 0.01%)</title><rect x="4.1430%" y="1077" width="0.0103%" height="15" fill="rgb(233,141,41)" fg:x="4841" fg:w="12"/><text x="4.3930%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (31 samples, 0.03%)</title><rect x="4.1592%" y="1077" width="0.0265%" height="15" fill="rgb(239,167,4)" fg:x="4860" fg:w="31"/><text x="4.4092%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (13 samples, 0.01%)</title><rect x="4.1746%" y="1061" width="0.0111%" height="15" fill="rgb(209,217,16)" fg:x="4878" fg:w="13"/><text x="4.4246%" y="1071.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (13 samples, 0.01%)</title><rect x="4.1746%" y="1045" width="0.0111%" height="15" fill="rgb(219,88,35)" fg:x="4878" fg:w="13"/><text x="4.4246%" y="1055.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="4.1746%" y="1029" width="0.0111%" height="15" fill="rgb(220,193,23)" fg:x="4878" fg:w="13"/><text x="4.4246%" y="1039.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="4.1746%" y="1013" width="0.0111%" height="15" fill="rgb(230,90,52)" fg:x="4878" fg:w="13"/><text x="4.4246%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (14 samples, 0.01%)</title><rect x="4.2388%" y="1013" width="0.0120%" height="15" fill="rgb(252,106,19)" fg:x="4953" fg:w="14"/><text x="4.4888%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="4.2388%" y="997" width="0.0120%" height="15" fill="rgb(206,74,20)" fg:x="4953" fg:w="14"/><text x="4.4888%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="4.2388%" y="981" width="0.0120%" height="15" fill="rgb(230,138,44)" fg:x="4953" fg:w="14"/><text x="4.4888%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (18 samples, 0.02%)</title><rect x="4.2388%" y="1029" width="0.0154%" height="15" fill="rgb(235,182,43)" fg:x="4953" fg:w="18"/><text x="4.4888%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (75 samples, 0.06%)</title><rect x="4.1926%" y="1077" width="0.0642%" height="15" fill="rgb(242,16,51)" fg:x="4899" fg:w="75"/><text x="4.4426%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (51 samples, 0.04%)</title><rect x="4.2131%" y="1061" width="0.0436%" height="15" fill="rgb(248,9,4)" fg:x="4923" fg:w="51"/><text x="4.4631%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (48 samples, 0.04%)</title><rect x="4.2157%" y="1045" width="0.0411%" height="15" fill="rgb(210,31,22)" fg:x="4926" fg:w="48"/><text x="4.4657%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (27 samples, 0.02%)</title><rect x="4.2611%" y="1077" width="0.0231%" height="15" fill="rgb(239,54,39)" fg:x="4979" fg:w="27"/><text x="4.5111%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (17 samples, 0.01%)</title><rect x="4.2902%" y="1077" width="0.0145%" height="15" fill="rgb(230,99,41)" fg:x="5013" fg:w="17"/><text x="4.5402%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (19 samples, 0.02%)</title><rect x="4.3184%" y="1077" width="0.0163%" height="15" fill="rgb(253,106,12)" fg:x="5046" fg:w="19"/><text x="4.5684%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (79 samples, 0.07%)</title><rect x="4.3347%" y="1077" width="0.0676%" height="15" fill="rgb(213,46,41)" fg:x="5065" fg:w="79"/><text x="4.5847%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (27 samples, 0.02%)</title><rect x="4.3792%" y="1061" width="0.0231%" height="15" fill="rgb(215,133,35)" fg:x="5117" fg:w="27"/><text x="4.6292%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (27 samples, 0.02%)</title><rect x="4.3792%" y="1045" width="0.0231%" height="15" fill="rgb(213,28,5)" fg:x="5117" fg:w="27"/><text x="4.6292%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="4.3792%" y="1029" width="0.0231%" height="15" fill="rgb(215,77,49)" fg:x="5117" fg:w="27"/><text x="4.6292%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="4.3792%" y="1013" width="0.0231%" height="15" fill="rgb(248,100,22)" fg:x="5117" fg:w="27"/><text x="4.6292%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (88 samples, 0.08%)</title><rect x="4.4023%" y="1077" width="0.0753%" height="15" fill="rgb(208,67,9)" fg:x="5144" fg:w="88"/><text x="4.6523%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (18 samples, 0.02%)</title><rect x="4.4776%" y="1077" width="0.0154%" height="15" fill="rgb(219,133,21)" fg:x="5232" fg:w="18"/><text x="4.7276%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (148 samples, 0.13%)</title><rect x="4.4930%" y="1077" width="0.1267%" height="15" fill="rgb(246,46,29)" fg:x="5250" fg:w="148"/><text x="4.7430%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (98 samples, 0.08%)</title><rect x="4.6196%" y="1077" width="0.0839%" height="15" fill="rgb(246,185,52)" fg:x="5398" fg:w="98"/><text x="4.8696%" y="1087.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (16 samples, 0.01%)</title><rect x="4.7035%" y="1077" width="0.0137%" height="15" fill="rgb(252,136,11)" fg:x="5496" fg:w="16"/><text x="4.9535%" y="1087.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (155 samples, 0.13%)</title><rect x="4.7172%" y="1077" width="0.1326%" height="15" fill="rgb(219,138,53)" fg:x="5512" fg:w="155"/><text x="4.9672%" y="1087.50"></text></g><g><title>tremor_script::interpreter::resolve (70 samples, 0.06%)</title><rect x="4.8498%" y="1077" width="0.0599%" height="15" fill="rgb(211,51,23)" fg:x="5667" fg:w="70"/><text x="5.0998%" y="1087.50"></text></g><g><title>tremor_script::interpreter::resolve_value (31 samples, 0.03%)</title><rect x="4.9098%" y="1077" width="0.0265%" height="15" fill="rgb(247,221,28)" fg:x="5737" fg:w="31"/><text x="5.1598%" y="1087.50"></text></g><g><title>tremor_script::interpreter::test_guard (37 samples, 0.03%)</title><rect x="4.9363%" y="1077" width="0.0317%" height="15" fill="rgb(251,222,45)" fg:x="5768" fg:w="37"/><text x="5.1863%" y="1087.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (119 samples, 0.10%)</title><rect x="4.9680%" y="1077" width="0.1018%" height="15" fill="rgb(217,162,53)" fg:x="5805" fg:w="119"/><text x="5.2180%" y="1087.50"></text></g><g><title>tremor_script::interpreter::val_eq (44 samples, 0.04%)</title><rect x="5.0698%" y="1077" width="0.0377%" height="15" fill="rgb(229,93,14)" fg:x="5924" fg:w="44"/><text x="5.3198%" y="1087.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (17 samples, 0.01%)</title><rect x="5.1074%" y="1077" width="0.0145%" height="15" fill="rgb(209,67,49)" fg:x="5968" fg:w="17"/><text x="5.3574%" y="1087.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (28 samples, 0.02%)</title><rect x="5.1220%" y="1077" width="0.0240%" height="15" fill="rgb(213,87,29)" fg:x="5985" fg:w="28"/><text x="5.3720%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (17 samples, 0.01%)</title><rect x="5.1314%" y="1061" width="0.0145%" height="15" fill="rgb(205,151,52)" fg:x="5996" fg:w="17"/><text x="5.3814%" y="1071.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (44 samples, 0.04%)</title><rect x="5.4318%" y="1061" width="0.0377%" height="15" fill="rgb(253,215,39)" fg:x="6347" fg:w="44"/><text x="5.6818%" y="1071.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (44 samples, 0.04%)</title><rect x="5.4318%" y="1045" width="0.0377%" height="15" fill="rgb(221,220,41)" fg:x="6347" fg:w="44"/><text x="5.6818%" y="1055.50"></text></g><g><title>rmp::encode::write_marker (44 samples, 0.04%)</title><rect x="5.4318%" y="1029" width="0.0377%" height="15" fill="rgb(218,133,21)" fg:x="6347" fg:w="44"/><text x="5.6818%" y="1039.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (19 samples, 0.02%)</title><rect x="5.4789%" y="1061" width="0.0163%" height="15" fill="rgb(221,193,43)" fg:x="6402" fg:w="19"/><text x="5.7289%" y="1071.50"></text></g><g><title>rmp::encode::write_marker (31 samples, 0.03%)</title><rect x="5.5028%" y="1061" width="0.0265%" height="15" fill="rgb(240,128,52)" fg:x="6430" fg:w="31"/><text x="5.7528%" y="1071.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (483 samples, 0.41%)</title><rect x="5.1460%" y="1077" width="0.4134%" height="15" fill="rgb(253,114,12)" fg:x="6013" fg:w="483"/><text x="5.3960%" y="1087.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (35 samples, 0.03%)</title><rect x="5.5294%" y="1061" width="0.0300%" height="15" fill="rgb(215,223,47)" fg:x="6461" fg:w="35"/><text x="5.7794%" y="1071.50"></text></g><g><title>rmp::encode::write_marker (35 samples, 0.03%)</title><rect x="5.5294%" y="1045" width="0.0300%" height="15" fill="rgb(248,225,23)" fg:x="6461" fg:w="35"/><text x="5.7794%" y="1055.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (13 samples, 0.01%)</title><rect x="5.5593%" y="1077" width="0.0111%" height="15" fill="rgb(250,108,0)" fg:x="6496" fg:w="13"/><text x="5.8093%" y="1087.50"></text></g><g><title>[anon] (6,400 samples, 5.48%)</title><rect x="0.1138%" y="1093" width="5.4772%" height="15" fill="rgb(228,208,7)" fg:x="133" fg:w="6400"/><text x="0.3638%" y="1103.50">[anon]</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="5.6098%" y="1077" width="0.0128%" height="15" fill="rgb(244,45,10)" fg:x="6555" fg:w="15"/><text x="5.8598%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (34 samples, 0.03%)</title><rect x="5.6252%" y="1077" width="0.0291%" height="15" fill="rgb(207,125,25)" fg:x="6573" fg:w="34"/><text x="5.8752%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (13 samples, 0.01%)</title><rect x="5.6432%" y="1061" width="0.0111%" height="15" fill="rgb(210,195,18)" fg:x="6594" fg:w="13"/><text x="5.8932%" y="1071.50"></text></g><g><title>[libc-2.31.so] (109 samples, 0.09%)</title><rect x="5.5910%" y="1093" width="0.0933%" height="15" fill="rgb(249,80,12)" fg:x="6533" fg:w="109"/><text x="5.8410%" y="1103.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (13 samples, 0.01%)</title><rect x="5.6731%" y="1077" width="0.0111%" height="15" fill="rgb(221,65,9)" fg:x="6629" fg:w="13"/><text x="5.9231%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.6843%" y="1077" width="0.0120%" height="15" fill="rgb(235,49,36)" fg:x="6642" fg:w="14"/><text x="5.9343%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (21 samples, 0.02%)</title><rect x="5.7048%" y="1077" width="0.0180%" height="15" fill="rgb(225,32,20)" fg:x="6666" fg:w="21"/><text x="5.9548%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (23 samples, 0.02%)</title><rect x="5.7228%" y="1077" width="0.0197%" height="15" fill="rgb(215,141,46)" fg:x="6687" fg:w="23"/><text x="5.9728%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (15 samples, 0.01%)</title><rect x="5.7484%" y="1077" width="0.0128%" height="15" fill="rgb(250,160,47)" fg:x="6717" fg:w="15"/><text x="5.9984%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (24 samples, 0.02%)</title><rect x="5.7741%" y="1077" width="0.0205%" height="15" fill="rgb(216,222,40)" fg:x="6747" fg:w="24"/><text x="6.0241%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (23 samples, 0.02%)</title><rect x="5.7947%" y="1077" width="0.0197%" height="15" fill="rgb(234,217,39)" fg:x="6771" fg:w="23"/><text x="6.0447%" y="1087.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (13 samples, 0.01%)</title><rect x="5.8229%" y="1077" width="0.0111%" height="15" fill="rgb(207,178,40)" fg:x="6804" fg:w="13"/><text x="6.0729%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (18 samples, 0.02%)</title><rect x="5.8349%" y="1077" width="0.0154%" height="15" fill="rgb(221,136,13)" fg:x="6818" fg:w="18"/><text x="6.0849%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (17 samples, 0.01%)</title><rect x="5.8580%" y="1077" width="0.0145%" height="15" fill="rgb(249,199,10)" fg:x="6845" fg:w="17"/><text x="6.1080%" y="1087.50"></text></g><g><title>tremor_script::ast::Script::run (36 samples, 0.03%)</title><rect x="5.8931%" y="1077" width="0.0308%" height="15" fill="rgb(249,222,13)" fg:x="6886" fg:w="36"/><text x="6.1431%" y="1087.50"></text></g><g><title>[pdk-noknownkey] (293 samples, 0.25%)</title><rect x="5.6843%" y="1093" width="0.2508%" height="15" fill="rgb(244,185,38)" fg:x="6642" fg:w="293"/><text x="5.9343%" y="1103.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (147 samples, 0.13%)</title><rect x="5.9350%" y="1077" width="0.1258%" height="15" fill="rgb(236,202,9)" fg:x="6935" fg:w="147"/><text x="6.1850%" y="1087.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (78 samples, 0.07%)</title><rect x="6.0608%" y="1077" width="0.0668%" height="15" fill="rgb(250,229,37)" fg:x="7082" fg:w="78"/><text x="6.3108%" y="1087.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (22 samples, 0.02%)</title><rect x="6.1276%" y="1077" width="0.0188%" height="15" fill="rgb(206,174,23)" fg:x="7160" fg:w="22"/><text x="6.3776%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (25 samples, 0.02%)</title><rect x="6.1532%" y="1077" width="0.0214%" height="15" fill="rgb(211,33,43)" fg:x="7190" fg:w="25"/><text x="6.4032%" y="1087.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="6.1849%" y="1077" width="0.0188%" height="15" fill="rgb(245,58,50)" fg:x="7227" fg:w="22"/><text x="6.4349%" y="1087.50"></text></g><g><title>[libc-2.31.so] (78 samples, 0.07%)</title><rect x="6.2345%" y="821" width="0.0668%" height="15" fill="rgb(244,68,36)" fg:x="7285" fg:w="78"/><text x="6.4845%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (439 samples, 0.38%)</title><rect x="6.3013%" y="709" width="0.3757%" height="15" fill="rgb(232,229,15)" fg:x="7363" fg:w="439"/><text x="6.5513%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (439 samples, 0.38%)</title><rect x="6.3013%" y="693" width="0.3757%" height="15" fill="rgb(254,30,23)" fg:x="7363" fg:w="439"/><text x="6.5513%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (15 samples, 0.01%)</title><rect x="6.6642%" y="677" width="0.0128%" height="15" fill="rgb(235,160,14)" fg:x="7787" fg:w="15"/><text x="6.9142%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (456 samples, 0.39%)</title><rect x="6.3013%" y="821" width="0.3902%" height="15" fill="rgb(212,155,44)" fg:x="7363" fg:w="456"/><text x="6.5513%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (456 samples, 0.39%)</title><rect x="6.3013%" y="805" width="0.3902%" height="15" fill="rgb(226,2,50)" fg:x="7363" fg:w="456"/><text x="6.5513%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (456 samples, 0.39%)</title><rect x="6.3013%" y="789" width="0.3902%" height="15" fill="rgb(234,177,6)" fg:x="7363" fg:w="456"/><text x="6.5513%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (456 samples, 0.39%)</title><rect x="6.3013%" y="773" width="0.3902%" height="15" fill="rgb(217,24,9)" fg:x="7363" fg:w="456"/><text x="6.5513%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (456 samples, 0.39%)</title><rect x="6.3013%" y="757" width="0.3902%" height="15" fill="rgb(220,13,46)" fg:x="7363" fg:w="456"/><text x="6.5513%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (456 samples, 0.39%)</title><rect x="6.3013%" y="741" width="0.3902%" height="15" fill="rgb(239,221,27)" fg:x="7363" fg:w="456"/><text x="6.5513%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (456 samples, 0.39%)</title><rect x="6.3013%" y="725" width="0.3902%" height="15" fill="rgb(222,198,25)" fg:x="7363" fg:w="456"/><text x="6.5513%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="6.6770%" y="709" width="0.0145%" height="15" fill="rgb(211,99,13)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="6.6770%" y="693" width="0.0145%" height="15" fill="rgb(232,111,31)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="6.6770%" y="677" width="0.0145%" height="15" fill="rgb(245,82,37)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="687.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="6.6770%" y="661" width="0.0145%" height="15" fill="rgb(227,149,46)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="671.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="6.6770%" y="645" width="0.0145%" height="15" fill="rgb(218,36,50)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="6.6770%" y="629" width="0.0145%" height="15" fill="rgb(226,80,48)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="639.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="6.6770%" y="613" width="0.0145%" height="15" fill="rgb(238,224,15)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="6.6770%" y="597" width="0.0145%" height="15" fill="rgb(241,136,10)" fg:x="7802" fg:w="17"/><text x="6.9270%" y="607.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 0.13%)</title><rect x="6.8199%" y="805" width="0.1318%" height="15" fill="rgb(208,32,45)" fg:x="7969" fg:w="154"/><text x="7.0699%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (143 samples, 0.12%)</title><rect x="6.8293%" y="789" width="0.1224%" height="15" fill="rgb(207,135,9)" fg:x="7980" fg:w="143"/><text x="7.0793%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (142 samples, 0.12%)</title><rect x="6.8302%" y="773" width="0.1215%" height="15" fill="rgb(206,86,44)" fg:x="7981" fg:w="142"/><text x="7.0802%" y="783.50"></text></g><g><title>core::ptr::read (142 samples, 0.12%)</title><rect x="6.8302%" y="757" width="0.1215%" height="15" fill="rgb(245,177,15)" fg:x="7981" fg:w="142"/><text x="7.0802%" y="767.50"></text></g><g><title>[libc-2.31.so] (142 samples, 0.12%)</title><rect x="6.8302%" y="741" width="0.1215%" height="15" fill="rgb(206,64,50)" fg:x="7981" fg:w="142"/><text x="7.0802%" y="751.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (41 samples, 0.04%)</title><rect x="6.9543%" y="805" width="0.0351%" height="15" fill="rgb(234,36,40)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (41 samples, 0.04%)</title><rect x="6.9543%" y="789" width="0.0351%" height="15" fill="rgb(213,64,8)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (41 samples, 0.04%)</title><rect x="6.9543%" y="773" width="0.0351%" height="15" fill="rgb(210,75,36)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (41 samples, 0.04%)</title><rect x="6.9543%" y="757" width="0.0351%" height="15" fill="rgb(229,88,21)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (41 samples, 0.04%)</title><rect x="6.9543%" y="741" width="0.0351%" height="15" fill="rgb(252,204,47)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41 samples, 0.04%)</title><rect x="6.9543%" y="725" width="0.0351%" height="15" fill="rgb(208,77,27)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (41 samples, 0.04%)</title><rect x="6.9543%" y="709" width="0.0351%" height="15" fill="rgb(221,76,26)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (41 samples, 0.04%)</title><rect x="6.9543%" y="693" width="0.0351%" height="15" fill="rgb(225,139,18)" fg:x="8126" fg:w="41"/><text x="7.2043%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (30 samples, 0.03%)</title><rect x="6.9637%" y="677" width="0.0257%" height="15" fill="rgb(230,137,11)" fg:x="8137" fg:w="30"/><text x="7.2137%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.03%)</title><rect x="6.9637%" y="661" width="0.0257%" height="15" fill="rgb(212,28,1)" fg:x="8137" fg:w="30"/><text x="7.2137%" y="671.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="6.9705%" y="645" width="0.0188%" height="15" fill="rgb(248,164,17)" fg:x="8145" fg:w="22"/><text x="7.2205%" y="655.50"></text></g><g><title>[libc-2.31.so] (496 samples, 0.42%)</title><rect x="6.9894%" y="805" width="0.4245%" height="15" fill="rgb(222,171,42)" fg:x="8167" fg:w="496"/><text x="7.2394%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,428 samples, 1.22%)</title><rect x="6.2251%" y="1061" width="1.2221%" height="15" fill="rgb(243,84,45)" fg:x="7274" fg:w="1428"/><text x="6.4751%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (1,428 samples, 1.22%)</title><rect x="6.2251%" y="1045" width="1.2221%" height="15" fill="rgb(252,49,23)" fg:x="7274" fg:w="1428"/><text x="6.4751%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,427 samples, 1.22%)</title><rect x="6.2260%" y="1029" width="1.2212%" height="15" fill="rgb(215,19,7)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,427 samples, 1.22%)</title><rect x="6.2260%" y="1013" width="1.2212%" height="15" fill="rgb(238,81,41)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,427 samples, 1.22%)</title><rect x="6.2260%" y="997" width="1.2212%" height="15" fill="rgb(210,199,37)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="1007.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,427 samples, 1.22%)</title><rect x="6.2260%" y="981" width="1.2212%" height="15" fill="rgb(244,192,49)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="991.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,427 samples, 1.22%)</title><rect x="6.2260%" y="965" width="1.2212%" height="15" fill="rgb(226,211,11)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="975.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,427 samples, 1.22%)</title><rect x="6.2260%" y="949" width="1.2212%" height="15" fill="rgb(236,162,54)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,427 samples, 1.22%)</title><rect x="6.2260%" y="933" width="1.2212%" height="15" fill="rgb(220,229,9)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,427 samples, 1.22%)</title><rect x="6.2260%" y="917" width="1.2212%" height="15" fill="rgb(250,87,22)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,427 samples, 1.22%)</title><rect x="6.2260%" y="901" width="1.2212%" height="15" fill="rgb(239,43,17)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="911.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,427 samples, 1.22%)</title><rect x="6.2260%" y="885" width="1.2212%" height="15" fill="rgb(231,177,25)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,427 samples, 1.22%)</title><rect x="6.2260%" y="869" width="1.2212%" height="15" fill="rgb(219,179,1)" fg:x="7275" fg:w="1427"/><text x="6.4760%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,424 samples, 1.22%)</title><rect x="6.2286%" y="853" width="1.2187%" height="15" fill="rgb(238,219,53)" fg:x="7278" fg:w="1424"/><text x="6.4786%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,424 samples, 1.22%)</title><rect x="6.2286%" y="837" width="1.2187%" height="15" fill="rgb(232,167,36)" fg:x="7278" fg:w="1424"/><text x="6.4786%" y="847.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (883 samples, 0.76%)</title><rect x="6.6915%" y="821" width="0.7557%" height="15" fill="rgb(244,19,51)" fg:x="7819" fg:w="883"/><text x="6.9415%" y="831.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (25 samples, 0.02%)</title><rect x="7.4258%" y="805" width="0.0214%" height="15" fill="rgb(224,6,22)" fg:x="8677" fg:w="25"/><text x="7.6758%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (25 samples, 0.02%)</title><rect x="7.4258%" y="789" width="0.0214%" height="15" fill="rgb(224,145,5)" fg:x="8677" fg:w="25"/><text x="7.6758%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.02%)</title><rect x="7.4258%" y="773" width="0.0214%" height="15" fill="rgb(234,130,49)" fg:x="8677" fg:w="25"/><text x="7.6758%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="7.4361%" y="757" width="0.0111%" height="15" fill="rgb(254,6,2)" fg:x="8689" fg:w="13"/><text x="7.6861%" y="767.50"></text></g><g><title>[libc-2.31.so] (56 samples, 0.05%)</title><rect x="7.4515%" y="677" width="0.0479%" height="15" fill="rgb(208,96,46)" fg:x="8707" fg:w="56"/><text x="7.7015%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="1061" width="0.0650%" height="15" fill="rgb(239,3,39)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="1045" width="0.0650%" height="15" fill="rgb(233,210,1)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="1029" width="0.0650%" height="15" fill="rgb(244,137,37)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="1039.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="1013" width="0.0650%" height="15" fill="rgb(240,136,2)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="1023.50"></text></g><g><title>async_task::runnable::Runnable::run (76 samples, 0.07%)</title><rect x="7.4472%" y="997" width="0.0650%" height="15" fill="rgb(239,18,37)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="1007.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (76 samples, 0.07%)</title><rect x="7.4472%" y="981" width="0.0650%" height="15" fill="rgb(218,185,22)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="991.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="965" width="0.0650%" height="15" fill="rgb(225,218,4)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="949" width="0.0650%" height="15" fill="rgb(230,182,32)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="959.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="933" width="0.0650%" height="15" fill="rgb(242,56,43)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="943.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="917" width="0.0650%" height="15" fill="rgb(233,99,24)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (76 samples, 0.07%)</title><rect x="7.4472%" y="901" width="0.0650%" height="15" fill="rgb(234,209,42)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (76 samples, 0.07%)</title><rect x="7.4472%" y="885" width="0.0650%" height="15" fill="rgb(227,7,12)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (76 samples, 0.07%)</title><rect x="7.4472%" y="869" width="0.0650%" height="15" fill="rgb(245,203,43)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="879.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="853" width="0.0650%" height="15" fill="rgb(238,205,33)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="863.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="837" width="0.0650%" height="15" fill="rgb(231,56,7)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="821" width="0.0650%" height="15" fill="rgb(244,186,29)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="805" width="0.0650%" height="15" fill="rgb(234,111,31)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="789" width="0.0650%" height="15" fill="rgb(241,149,10)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="773" width="0.0650%" height="15" fill="rgb(249,206,44)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="757" width="0.0650%" height="15" fill="rgb(251,153,30)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="741" width="0.0650%" height="15" fill="rgb(239,152,38)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="725" width="0.0650%" height="15" fill="rgb(249,139,47)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (76 samples, 0.07%)</title><rect x="7.4472%" y="709" width="0.0650%" height="15" fill="rgb(244,64,35)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76 samples, 0.07%)</title><rect x="7.4472%" y="693" width="0.0650%" height="15" fill="rgb(216,46,15)" fg:x="8702" fg:w="76"/><text x="7.6972%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (15 samples, 0.01%)</title><rect x="7.4994%" y="677" width="0.0128%" height="15" fill="rgb(250,74,19)" fg:x="8763" fg:w="15"/><text x="7.7494%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (23 samples, 0.02%)</title><rect x="7.6423%" y="565" width="0.0197%" height="15" fill="rgb(249,42,33)" fg:x="8930" fg:w="23"/><text x="7.8923%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.02%)</title><rect x="7.6423%" y="549" width="0.0197%" height="15" fill="rgb(242,149,17)" fg:x="8930" fg:w="23"/><text x="7.8923%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (23 samples, 0.02%)</title><rect x="7.6423%" y="533" width="0.0197%" height="15" fill="rgb(244,29,21)" fg:x="8930" fg:w="23"/><text x="7.8923%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (42 samples, 0.04%)</title><rect x="7.6945%" y="533" width="0.0359%" height="15" fill="rgb(220,130,37)" fg:x="8991" fg:w="42"/><text x="7.9445%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42 samples, 0.04%)</title><rect x="7.6945%" y="517" width="0.0359%" height="15" fill="rgb(211,67,2)" fg:x="8991" fg:w="42"/><text x="7.9445%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.03%)</title><rect x="7.6980%" y="501" width="0.0325%" height="15" fill="rgb(235,68,52)" fg:x="8995" fg:w="38"/><text x="7.9480%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.03%)</title><rect x="7.6980%" y="485" width="0.0325%" height="15" fill="rgb(246,142,3)" fg:x="8995" fg:w="38"/><text x="7.9480%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="7.6980%" y="469" width="0.0325%" height="15" fill="rgb(241,25,7)" fg:x="8995" fg:w="38"/><text x="7.9480%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="7.6980%" y="453" width="0.0325%" height="15" fill="rgb(242,119,39)" fg:x="8995" fg:w="38"/><text x="7.9480%" y="463.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="7.6980%" y="437" width="0.0325%" height="15" fill="rgb(241,98,45)" fg:x="8995" fg:w="38"/><text x="7.9480%" y="447.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="7.6980%" y="421" width="0.0325%" height="15" fill="rgb(254,28,30)" fg:x="8995" fg:w="38"/><text x="7.9480%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="7.6980%" y="405" width="0.0325%" height="15" fill="rgb(241,142,54)" fg:x="8995" fg:w="38"/><text x="7.9480%" y="415.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="7.7022%" y="389" width="0.0282%" height="15" fill="rgb(222,85,15)" fg:x="9000" fg:w="33"/><text x="7.9522%" y="399.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (79 samples, 0.07%)</title><rect x="7.6637%" y="565" width="0.0676%" height="15" fill="rgb(210,85,47)" fg:x="8955" fg:w="79"/><text x="7.9137%" y="575.50"></text></g><g><title>rmp_serde::encode::to_vec (61 samples, 0.05%)</title><rect x="7.6791%" y="549" width="0.0522%" height="15" fill="rgb(224,206,25)" fg:x="8973" fg:w="61"/><text x="7.9291%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (78 samples, 0.07%)</title><rect x="7.8238%" y="293" width="0.0668%" height="15" fill="rgb(243,201,19)" fg:x="9142" fg:w="78"/><text x="8.0738%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (78 samples, 0.07%)</title><rect x="7.8238%" y="277" width="0.0668%" height="15" fill="rgb(236,59,4)" fg:x="9142" fg:w="78"/><text x="8.0738%" y="287.50"></text></g><g><title>__rg_dealloc (78 samples, 0.07%)</title><rect x="7.8238%" y="261" width="0.0668%" height="15" fill="rgb(254,179,45)" fg:x="9142" fg:w="78"/><text x="8.0738%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (78 samples, 0.07%)</title><rect x="7.8238%" y="245" width="0.0668%" height="15" fill="rgb(226,14,10)" fg:x="9142" fg:w="78"/><text x="8.0738%" y="255.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="7.8272%" y="229" width="0.0633%" height="15" fill="rgb(244,27,41)" fg:x="9146" fg:w="74"/><text x="8.0772%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (122 samples, 0.10%)</title><rect x="7.7887%" y="453" width="0.1044%" height="15" fill="rgb(235,35,32)" fg:x="9101" fg:w="122"/><text x="8.0387%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (107 samples, 0.09%)</title><rect x="7.8015%" y="437" width="0.0916%" height="15" fill="rgb(218,68,31)" fg:x="9116" fg:w="107"/><text x="8.0515%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (105 samples, 0.09%)</title><rect x="7.8032%" y="421" width="0.0899%" height="15" fill="rgb(207,120,37)" fg:x="9118" fg:w="105"/><text x="8.0532%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (105 samples, 0.09%)</title><rect x="7.8032%" y="405" width="0.0899%" height="15" fill="rgb(227,98,0)" fg:x="9118" fg:w="105"/><text x="8.0532%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (92 samples, 0.08%)</title><rect x="7.8144%" y="389" width="0.0787%" height="15" fill="rgb(207,7,3)" fg:x="9131" fg:w="92"/><text x="8.0644%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.08%)</title><rect x="7.8144%" y="373" width="0.0787%" height="15" fill="rgb(206,98,19)" fg:x="9131" fg:w="92"/><text x="8.0644%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (81 samples, 0.07%)</title><rect x="7.8238%" y="357" width="0.0693%" height="15" fill="rgb(217,5,26)" fg:x="9142" fg:w="81"/><text x="8.0738%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="7.8238%" y="341" width="0.0693%" height="15" fill="rgb(235,190,38)" fg:x="9142" fg:w="81"/><text x="8.0738%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (81 samples, 0.07%)</title><rect x="7.8238%" y="325" width="0.0693%" height="15" fill="rgb(247,86,24)" fg:x="9142" fg:w="81"/><text x="8.0738%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="7.8238%" y="309" width="0.0693%" height="15" fill="rgb(205,101,16)" fg:x="9142" fg:w="81"/><text x="8.0738%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.03%)</title><rect x="7.8931%" y="453" width="0.0257%" height="15" fill="rgb(246,168,33)" fg:x="9223" fg:w="30"/><text x="8.1431%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.02%)</title><rect x="7.8991%" y="437" width="0.0197%" height="15" fill="rgb(231,114,1)" fg:x="9230" fg:w="23"/><text x="8.1491%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (23 samples, 0.02%)</title><rect x="7.8991%" y="421" width="0.0197%" height="15" fill="rgb(207,184,53)" fg:x="9230" fg:w="23"/><text x="8.1491%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (82 samples, 0.07%)</title><rect x="7.9213%" y="389" width="0.0702%" height="15" fill="rgb(224,95,51)" fg:x="9256" fg:w="82"/><text x="8.1713%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (82 samples, 0.07%)</title><rect x="7.9213%" y="373" width="0.0702%" height="15" fill="rgb(212,188,45)" fg:x="9256" fg:w="82"/><text x="8.1713%" y="383.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.07%)</title><rect x="7.9222%" y="357" width="0.0693%" height="15" fill="rgb(223,154,38)" fg:x="9257" fg:w="81"/><text x="8.1722%" y="367.50"></text></g><g><title>__rg_alloc (81 samples, 0.07%)</title><rect x="7.9222%" y="341" width="0.0693%" height="15" fill="rgb(251,22,52)" fg:x="9257" fg:w="81"/><text x="8.1722%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (81 samples, 0.07%)</title><rect x="7.9222%" y="325" width="0.0693%" height="15" fill="rgb(229,209,22)" fg:x="9257" fg:w="81"/><text x="8.1722%" y="335.50"></text></g><g><title>sn_rust_alloc (76 samples, 0.07%)</title><rect x="7.9265%" y="309" width="0.0650%" height="15" fill="rgb(234,138,34)" fg:x="9262" fg:w="76"/><text x="8.1765%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (573 samples, 0.49%)</title><rect x="7.5131%" y="933" width="0.4904%" height="15" fill="rgb(212,95,11)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (573 samples, 0.49%)</title><rect x="7.5131%" y="917" width="0.4904%" height="15" fill="rgb(240,179,47)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (573 samples, 0.49%)</title><rect x="7.5131%" y="901" width="0.4904%" height="15" fill="rgb(240,163,11)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="911.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (573 samples, 0.49%)</title><rect x="7.5131%" y="885" width="0.4904%" height="15" fill="rgb(236,37,12)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="895.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (573 samples, 0.49%)</title><rect x="7.5131%" y="869" width="0.4904%" height="15" fill="rgb(232,164,16)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="879.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (573 samples, 0.49%)</title><rect x="7.5131%" y="853" width="0.4904%" height="15" fill="rgb(244,205,15)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (573 samples, 0.49%)</title><rect x="7.5131%" y="837" width="0.4904%" height="15" fill="rgb(223,117,47)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="847.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (573 samples, 0.49%)</title><rect x="7.5131%" y="821" width="0.4904%" height="15" fill="rgb(244,107,35)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="831.50"></text></g><g><title>std::panic::catch_unwind (573 samples, 0.49%)</title><rect x="7.5131%" y="805" width="0.4904%" height="15" fill="rgb(205,140,8)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="815.50"></text></g><g><title>std::panicking::try (573 samples, 0.49%)</title><rect x="7.5131%" y="789" width="0.4904%" height="15" fill="rgb(228,84,46)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="799.50"></text></g><g><title>std::panicking::try::do_call (573 samples, 0.49%)</title><rect x="7.5131%" y="773" width="0.4904%" height="15" fill="rgb(254,188,9)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (573 samples, 0.49%)</title><rect x="7.5131%" y="757" width="0.4904%" height="15" fill="rgb(206,112,54)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (573 samples, 0.49%)</title><rect x="7.5131%" y="741" width="0.4904%" height="15" fill="rgb(216,84,49)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (573 samples, 0.49%)</title><rect x="7.5131%" y="725" width="0.4904%" height="15" fill="rgb(214,194,35)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="735.50"></text></g><g><title>async_ffi::FfiContext::with_context (573 samples, 0.49%)</title><rect x="7.5131%" y="709" width="0.4904%" height="15" fill="rgb(249,28,3)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (573 samples, 0.49%)</title><rect x="7.5131%" y="693" width="0.4904%" height="15" fill="rgb(222,56,52)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (573 samples, 0.49%)</title><rect x="7.5131%" y="677" width="0.4904%" height="15" fill="rgb(245,217,50)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (573 samples, 0.49%)</title><rect x="7.5131%" y="661" width="0.4904%" height="15" fill="rgb(213,201,24)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (573 samples, 0.49%)</title><rect x="7.5131%" y="645" width="0.4904%" height="15" fill="rgb(248,116,28)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (573 samples, 0.49%)</title><rect x="7.5131%" y="629" width="0.4904%" height="15" fill="rgb(219,72,43)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (573 samples, 0.49%)</title><rect x="7.5131%" y="613" width="0.4904%" height="15" fill="rgb(209,138,14)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (573 samples, 0.49%)</title><rect x="7.5131%" y="597" width="0.4904%" height="15" fill="rgb(222,18,33)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (573 samples, 0.49%)</title><rect x="7.5131%" y="581" width="0.4904%" height="15" fill="rgb(213,199,7)" fg:x="8779" fg:w="573"/><text x="7.7631%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (318 samples, 0.27%)</title><rect x="7.7313%" y="565" width="0.2721%" height="15" fill="rgb(250,110,10)" fg:x="9034" fg:w="318"/><text x="7.9813%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (318 samples, 0.27%)</title><rect x="7.7313%" y="549" width="0.2721%" height="15" fill="rgb(248,123,6)" fg:x="9034" fg:w="318"/><text x="7.9813%" y="559.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (318 samples, 0.27%)</title><rect x="7.7313%" y="533" width="0.2721%" height="15" fill="rgb(206,91,31)" fg:x="9034" fg:w="318"/><text x="7.9813%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (317 samples, 0.27%)</title><rect x="7.7322%" y="517" width="0.2713%" height="15" fill="rgb(211,154,13)" fg:x="9035" fg:w="317"/><text x="7.9822%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (317 samples, 0.27%)</title><rect x="7.7322%" y="501" width="0.2713%" height="15" fill="rgb(225,148,7)" fg:x="9035" fg:w="317"/><text x="7.9822%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (314 samples, 0.27%)</title><rect x="7.7348%" y="485" width="0.2687%" height="15" fill="rgb(220,160,43)" fg:x="9038" fg:w="314"/><text x="7.9848%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (255 samples, 0.22%)</title><rect x="7.7853%" y="469" width="0.2182%" height="15" fill="rgb(213,52,39)" fg:x="9097" fg:w="255"/><text x="8.0353%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (99 samples, 0.08%)</title><rect x="7.9188%" y="453" width="0.0847%" height="15" fill="rgb(243,137,7)" fg:x="9253" fg:w="99"/><text x="8.1688%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (99 samples, 0.08%)</title><rect x="7.9188%" y="437" width="0.0847%" height="15" fill="rgb(230,79,13)" fg:x="9253" fg:w="99"/><text x="8.1688%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (96 samples, 0.08%)</title><rect x="7.9213%" y="421" width="0.0822%" height="15" fill="rgb(247,105,23)" fg:x="9256" fg:w="96"/><text x="8.1713%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (96 samples, 0.08%)</title><rect x="7.9213%" y="405" width="0.0822%" height="15" fill="rgb(223,179,41)" fg:x="9256" fg:w="96"/><text x="8.1713%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (14 samples, 0.01%)</title><rect x="7.9915%" y="389" width="0.0120%" height="15" fill="rgb(218,9,34)" fg:x="9338" fg:w="14"/><text x="8.2415%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="7.9915%" y="373" width="0.0120%" height="15" fill="rgb(222,106,8)" fg:x="9338" fg:w="14"/><text x="8.2415%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="7.9915%" y="357" width="0.0120%" height="15" fill="rgb(211,220,0)" fg:x="9338" fg:w="14"/><text x="8.2415%" y="367.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (144 samples, 0.12%)</title><rect x="8.1011%" y="805" width="0.1232%" height="15" fill="rgb(229,52,16)" fg:x="9466" fg:w="144"/><text x="8.3511%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (215 samples, 0.18%)</title><rect x="8.0925%" y="821" width="0.1840%" height="15" fill="rgb(212,155,18)" fg:x="9456" fg:w="215"/><text x="8.3425%" y="831.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (61 samples, 0.05%)</title><rect x="8.2243%" y="805" width="0.0522%" height="15" fill="rgb(242,21,14)" fg:x="9610" fg:w="61"/><text x="8.4743%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (22 samples, 0.02%)</title><rect x="8.2825%" y="821" width="0.0188%" height="15" fill="rgb(222,19,48)" fg:x="9678" fg:w="22"/><text x="8.5325%" y="831.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="8.2876%" y="805" width="0.0137%" height="15" fill="rgb(232,45,27)" fg:x="9684" fg:w="16"/><text x="8.5376%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (357 samples, 0.31%)</title><rect x="8.0035%" y="837" width="0.3055%" height="15" fill="rgb(249,103,42)" fg:x="9352" fg:w="357"/><text x="8.2535%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (396 samples, 0.34%)</title><rect x="8.0035%" y="917" width="0.3389%" height="15" fill="rgb(246,81,33)" fg:x="9352" fg:w="396"/><text x="8.2535%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (396 samples, 0.34%)</title><rect x="8.0035%" y="901" width="0.3389%" height="15" fill="rgb(252,33,42)" fg:x="9352" fg:w="396"/><text x="8.2535%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (396 samples, 0.34%)</title><rect x="8.0035%" y="885" width="0.3389%" height="15" fill="rgb(209,212,41)" fg:x="9352" fg:w="396"/><text x="8.2535%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (396 samples, 0.34%)</title><rect x="8.0035%" y="869" width="0.3389%" height="15" fill="rgb(207,154,6)" fg:x="9352" fg:w="396"/><text x="8.2535%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (396 samples, 0.34%)</title><rect x="8.0035%" y="853" width="0.3389%" height="15" fill="rgb(223,64,47)" fg:x="9352" fg:w="396"/><text x="8.2535%" y="863.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (39 samples, 0.03%)</title><rect x="8.3090%" y="837" width="0.0334%" height="15" fill="rgb(211,161,38)" fg:x="9709" fg:w="39"/><text x="8.5590%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (398 samples, 0.34%)</title><rect x="8.0035%" y="933" width="0.3406%" height="15" fill="rgb(219,138,40)" fg:x="9352" fg:w="398"/><text x="8.2535%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (69 samples, 0.06%)</title><rect x="8.4066%" y="805" width="0.0591%" height="15" fill="rgb(241,228,46)" fg:x="9823" fg:w="69"/><text x="8.6566%" y="815.50"></text></g><g><title>core::mem::replace (69 samples, 0.06%)</title><rect x="8.4066%" y="789" width="0.0591%" height="15" fill="rgb(223,209,38)" fg:x="9823" fg:w="69"/><text x="8.6566%" y="799.50"></text></g><g><title>core::ptr::read (69 samples, 0.06%)</title><rect x="8.4066%" y="773" width="0.0591%" height="15" fill="rgb(236,164,45)" fg:x="9823" fg:w="69"/><text x="8.6566%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (109 samples, 0.09%)</title><rect x="8.3886%" y="821" width="0.0933%" height="15" fill="rgb(231,15,5)" fg:x="9802" fg:w="109"/><text x="8.6386%" y="831.50"></text></g><g><title>core::mem::drop (19 samples, 0.02%)</title><rect x="8.4656%" y="805" width="0.0163%" height="15" fill="rgb(252,35,15)" fg:x="9892" fg:w="19"/><text x="8.7156%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (19 samples, 0.02%)</title><rect x="8.4656%" y="789" width="0.0163%" height="15" fill="rgb(248,181,18)" fg:x="9892" fg:w="19"/><text x="8.7156%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (95 samples, 0.08%)</title><rect x="8.4819%" y="821" width="0.0813%" height="15" fill="rgb(233,39,42)" fg:x="9911" fg:w="95"/><text x="8.7319%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (92 samples, 0.08%)</title><rect x="8.4845%" y="805" width="0.0787%" height="15" fill="rgb(238,110,33)" fg:x="9914" fg:w="92"/><text x="8.7345%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.08%)</title><rect x="8.4845%" y="789" width="0.0787%" height="15" fill="rgb(233,195,10)" fg:x="9914" fg:w="92"/><text x="8.7345%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (86 samples, 0.07%)</title><rect x="8.4896%" y="773" width="0.0736%" height="15" fill="rgb(254,105,3)" fg:x="9920" fg:w="86"/><text x="8.7396%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (86 samples, 0.07%)</title><rect x="8.4896%" y="757" width="0.0736%" height="15" fill="rgb(221,225,9)" fg:x="9920" fg:w="86"/><text x="8.7396%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (86 samples, 0.07%)</title><rect x="8.4896%" y="741" width="0.0736%" height="15" fill="rgb(224,227,45)" fg:x="9920" fg:w="86"/><text x="8.7396%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (86 samples, 0.07%)</title><rect x="8.4896%" y="725" width="0.0736%" height="15" fill="rgb(229,198,43)" fg:x="9920" fg:w="86"/><text x="8.7396%" y="735.50"></text></g><g><title>core::task::wake::Waker::will_wake (26 samples, 0.02%)</title><rect x="8.5692%" y="821" width="0.0223%" height="15" fill="rgb(206,209,35)" fg:x="10013" fg:w="26"/><text x="8.8192%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (26 samples, 0.02%)</title><rect x="8.5692%" y="805" width="0.0223%" height="15" fill="rgb(245,195,53)" fg:x="10013" fg:w="26"/><text x="8.8192%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.02%)</title><rect x="8.5760%" y="789" width="0.0154%" height="15" fill="rgb(240,92,26)" fg:x="10021" fg:w="18"/><text x="8.8260%" y="799.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="8.5760%" y="773" width="0.0154%" height="15" fill="rgb(207,40,23)" fg:x="10021" fg:w="18"/><text x="8.8260%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (997 samples, 0.85%)</title><rect x="8.3441%" y="917" width="0.8532%" height="15" fill="rgb(223,111,35)" fg:x="9750" fg:w="997"/><text x="8.5941%" y="927.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (997 samples, 0.85%)</title><rect x="8.3441%" y="901" width="0.8532%" height="15" fill="rgb(229,147,28)" fg:x="9750" fg:w="997"/><text x="8.5941%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (997 samples, 0.85%)</title><rect x="8.3441%" y="885" width="0.8532%" height="15" fill="rgb(211,29,28)" fg:x="9750" fg:w="997"/><text x="8.5941%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (997 samples, 0.85%)</title><rect x="8.3441%" y="869" width="0.8532%" height="15" fill="rgb(228,72,33)" fg:x="9750" fg:w="997"/><text x="8.5941%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (997 samples, 0.85%)</title><rect x="8.3441%" y="853" width="0.8532%" height="15" fill="rgb(205,214,31)" fg:x="9750" fg:w="997"/><text x="8.5941%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (997 samples, 0.85%)</title><rect x="8.3441%" y="837" width="0.8532%" height="15" fill="rgb(224,111,15)" fg:x="9750" fg:w="997"/><text x="8.5941%" y="847.50"></text></g><g><title>event_listener::Inner::lock (708 samples, 0.61%)</title><rect x="8.5914%" y="821" width="0.6059%" height="15" fill="rgb(253,21,26)" fg:x="10039" fg:w="708"/><text x="8.8414%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (703 samples, 0.60%)</title><rect x="8.5957%" y="805" width="0.6016%" height="15" fill="rgb(245,139,43)" fg:x="10044" fg:w="703"/><text x="8.8457%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (694 samples, 0.59%)</title><rect x="8.6034%" y="789" width="0.5939%" height="15" fill="rgb(252,170,7)" fg:x="10053" fg:w="694"/><text x="8.8534%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (694 samples, 0.59%)</title><rect x="8.6034%" y="773" width="0.5939%" height="15" fill="rgb(231,118,14)" fg:x="10053" fg:w="694"/><text x="8.8534%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (694 samples, 0.59%)</title><rect x="8.6034%" y="757" width="0.5939%" height="15" fill="rgb(238,83,0)" fg:x="10053" fg:w="694"/><text x="8.8534%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (694 samples, 0.59%)</title><rect x="8.6034%" y="741" width="0.5939%" height="15" fill="rgb(221,39,39)" fg:x="10053" fg:w="694"/><text x="8.8534%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (346 samples, 0.30%)</title><rect x="9.3009%" y="789" width="0.2961%" height="15" fill="rgb(222,119,46)" fg:x="10868" fg:w="346"/><text x="9.5509%" y="799.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="9.6073%" y="773" width="0.0103%" height="15" fill="rgb(222,165,49)" fg:x="11226" fg:w="12"/><text x="9.8573%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (31 samples, 0.03%)</title><rect x="9.5970%" y="789" width="0.0265%" height="15" fill="rgb(219,113,52)" fg:x="11214" fg:w="31"/><text x="9.8470%" y="799.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (385 samples, 0.33%)</title><rect x="9.2949%" y="805" width="0.3295%" height="15" fill="rgb(214,7,15)" fg:x="10861" fg:w="385"/><text x="9.5449%" y="815.50"></text></g><g><title>[libc-2.31.so] (305 samples, 0.26%)</title><rect x="9.6244%" y="805" width="0.2610%" height="15" fill="rgb(235,32,4)" fg:x="11246" fg:w="305"/><text x="9.8744%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="9.9145%" y="693" width="0.0128%" height="15" fill="rgb(238,90,54)" fg:x="11585" fg:w="15"/><text x="10.1645%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (58 samples, 0.05%)</title><rect x="9.8854%" y="805" width="0.0496%" height="15" fill="rgb(213,208,19)" fg:x="11551" fg:w="58"/><text x="10.1354%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 0.05%)</title><rect x="9.8854%" y="789" width="0.0496%" height="15" fill="rgb(233,156,4)" fg:x="11551" fg:w="58"/><text x="10.1354%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 0.05%)</title><rect x="9.8854%" y="773" width="0.0496%" height="15" fill="rgb(207,194,5)" fg:x="11551" fg:w="58"/><text x="10.1354%" y="783.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.05%)</title><rect x="9.8871%" y="757" width="0.0479%" height="15" fill="rgb(206,111,30)" fg:x="11553" fg:w="56"/><text x="10.1371%" y="767.50"></text></g><g><title>__rg_alloc (56 samples, 0.05%)</title><rect x="9.8871%" y="741" width="0.0479%" height="15" fill="rgb(243,70,54)" fg:x="11553" fg:w="56"/><text x="10.1371%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (56 samples, 0.05%)</title><rect x="9.8871%" y="725" width="0.0479%" height="15" fill="rgb(242,28,8)" fg:x="11553" fg:w="56"/><text x="10.1371%" y="735.50"></text></g><g><title>sn_rust_alloc (54 samples, 0.05%)</title><rect x="9.8888%" y="709" width="0.0462%" height="15" fill="rgb(219,106,18)" fg:x="11555" fg:w="54"/><text x="10.1388%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (17 samples, 0.01%)</title><rect x="9.9427%" y="805" width="0.0145%" height="15" fill="rgb(244,222,10)" fg:x="11618" fg:w="17"/><text x="10.1927%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="9.9659%" y="725" width="0.0128%" height="15" fill="rgb(236,179,52)" fg:x="11645" fg:w="15"/><text x="10.2159%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="9.9659%" y="709" width="0.0128%" height="15" fill="rgb(213,23,39)" fg:x="11645" fg:w="15"/><text x="10.2159%" y="719.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (196 samples, 0.17%)</title><rect x="9.9573%" y="805" width="0.1677%" height="15" fill="rgb(238,48,10)" fg:x="11635" fg:w="196"/><text x="10.2073%" y="815.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (188 samples, 0.16%)</title><rect x="9.9641%" y="789" width="0.1609%" height="15" fill="rgb(251,196,23)" fg:x="11643" fg:w="188"/><text x="10.2141%" y="799.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (188 samples, 0.16%)</title><rect x="9.9641%" y="773" width="0.1609%" height="15" fill="rgb(250,152,24)" fg:x="11643" fg:w="188"/><text x="10.2141%" y="783.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (188 samples, 0.16%)</title><rect x="9.9641%" y="757" width="0.1609%" height="15" fill="rgb(209,150,17)" fg:x="11643" fg:w="188"/><text x="10.2141%" y="767.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (188 samples, 0.16%)</title><rect x="9.9641%" y="741" width="0.1609%" height="15" fill="rgb(234,202,34)" fg:x="11643" fg:w="188"/><text x="10.2141%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (171 samples, 0.15%)</title><rect x="9.9787%" y="725" width="0.1463%" height="15" fill="rgb(253,148,53)" fg:x="11660" fg:w="171"/><text x="10.2287%" y="735.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (165 samples, 0.14%)</title><rect x="9.9838%" y="709" width="0.1412%" height="15" fill="rgb(218,129,16)" fg:x="11666" fg:w="165"/><text x="10.2338%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (165 samples, 0.14%)</title><rect x="9.9838%" y="693" width="0.1412%" height="15" fill="rgb(216,85,19)" fg:x="11666" fg:w="165"/><text x="10.2338%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (165 samples, 0.14%)</title><rect x="9.9838%" y="677" width="0.1412%" height="15" fill="rgb(235,228,7)" fg:x="11666" fg:w="165"/><text x="10.2338%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (165 samples, 0.14%)</title><rect x="9.9838%" y="661" width="0.1412%" height="15" fill="rgb(245,175,0)" fg:x="11666" fg:w="165"/><text x="10.2338%" y="671.50"></text></g><g><title>[libc-2.31.so] (115 samples, 0.10%)</title><rect x="10.0266%" y="645" width="0.0984%" height="15" fill="rgb(208,168,36)" fg:x="11716" fg:w="115"/><text x="10.2766%" y="655.50"></text></g><g><title>ahash::operations::folded_multiply (23 samples, 0.02%)</title><rect x="10.1276%" y="725" width="0.0197%" height="15" fill="rgb(246,171,24)" fg:x="11834" fg:w="23"/><text x="10.3776%" y="735.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (19 samples, 0.02%)</title><rect x="10.1310%" y="709" width="0.0163%" height="15" fill="rgb(215,142,24)" fg:x="11838" fg:w="19"/><text x="10.3810%" y="719.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (29 samples, 0.02%)</title><rect x="10.1276%" y="741" width="0.0248%" height="15" fill="rgb(250,187,7)" fg:x="11834" fg:w="29"/><text x="10.3776%" y="751.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (27 samples, 0.02%)</title><rect x="10.1712%" y="677" width="0.0231%" height="15" fill="rgb(228,66,33)" fg:x="11885" fg:w="27"/><text x="10.4212%" y="687.50"></text></g><g><title>ahash::operations::folded_multiply (19 samples, 0.02%)</title><rect x="10.1781%" y="661" width="0.0163%" height="15" fill="rgb(234,215,21)" fg:x="11893" fg:w="19"/><text x="10.4281%" y="671.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (16 samples, 0.01%)</title><rect x="10.1807%" y="645" width="0.0137%" height="15" fill="rgb(222,191,20)" fg:x="11896" fg:w="16"/><text x="10.4307%" y="655.50"></text></g><g><title>ahash::operations::read_small (15 samples, 0.01%)</title><rect x="10.1944%" y="677" width="0.0128%" height="15" fill="rgb(245,79,54)" fg:x="11912" fg:w="15"/><text x="10.4444%" y="687.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (60 samples, 0.05%)</title><rect x="10.1576%" y="693" width="0.0513%" height="15" fill="rgb(240,10,37)" fg:x="11869" fg:w="60"/><text x="10.4076%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (114 samples, 0.10%)</title><rect x="10.1259%" y="757" width="0.0976%" height="15" fill="rgb(214,192,32)" fg:x="11832" fg:w="114"/><text x="10.3759%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (78 samples, 0.07%)</title><rect x="10.1567%" y="741" width="0.0668%" height="15" fill="rgb(209,36,54)" fg:x="11868" fg:w="78"/><text x="10.4067%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (77 samples, 0.07%)</title><rect x="10.1576%" y="725" width="0.0659%" height="15" fill="rgb(220,10,11)" fg:x="11869" fg:w="77"/><text x="10.4076%" y="735.50"></text></g><g><title>core::hash::Hasher::write_str (77 samples, 0.07%)</title><rect x="10.1576%" y="709" width="0.0659%" height="15" fill="rgb(221,106,17)" fg:x="11869" fg:w="77"/><text x="10.4076%" y="719.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (17 samples, 0.01%)</title><rect x="10.2089%" y="693" width="0.0145%" height="15" fill="rgb(251,142,44)" fg:x="11929" fg:w="17"/><text x="10.4589%" y="703.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (17 samples, 0.01%)</title><rect x="10.2089%" y="677" width="0.0145%" height="15" fill="rgb(238,13,15)" fg:x="11929" fg:w="17"/><text x="10.4589%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="10.2560%" y="709" width="0.0171%" height="15" fill="rgb(208,107,27)" fg:x="11984" fg:w="20"/><text x="10.5060%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="10.2620%" y="693" width="0.0111%" height="15" fill="rgb(205,136,37)" fg:x="11991" fg:w="13"/><text x="10.5120%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="10.2560%" y="725" width="0.0223%" height="15" fill="rgb(250,205,27)" fg:x="11984" fg:w="26"/><text x="10.5060%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (123 samples, 0.11%)</title><rect x="10.2782%" y="709" width="0.1053%" height="15" fill="rgb(210,80,43)" fg:x="12010" fg:w="123"/><text x="10.5282%" y="719.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (112 samples, 0.10%)</title><rect x="10.2876%" y="693" width="0.0959%" height="15" fill="rgb(247,160,36)" fg:x="12021" fg:w="112"/><text x="10.5376%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (112 samples, 0.10%)</title><rect x="10.2876%" y="677" width="0.0959%" height="15" fill="rgb(234,13,49)" fg:x="12021" fg:w="112"/><text x="10.5376%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (112 samples, 0.10%)</title><rect x="10.2876%" y="661" width="0.0959%" height="15" fill="rgb(234,122,0)" fg:x="12021" fg:w="112"/><text x="10.5376%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (112 samples, 0.10%)</title><rect x="10.2876%" y="645" width="0.0959%" height="15" fill="rgb(207,146,38)" fg:x="12021" fg:w="112"/><text x="10.5376%" y="655.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.04%)</title><rect x="10.3390%" y="629" width="0.0445%" height="15" fill="rgb(207,177,25)" fg:x="12081" fg:w="52"/><text x="10.5890%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (227 samples, 0.19%)</title><rect x="10.2782%" y="725" width="0.1943%" height="15" fill="rgb(211,178,42)" fg:x="12010" fg:w="227"/><text x="10.5282%" y="735.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (104 samples, 0.09%)</title><rect x="10.3835%" y="709" width="0.0890%" height="15" fill="rgb(230,69,54)" fg:x="12133" fg:w="104"/><text x="10.6335%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (546 samples, 0.47%)</title><rect x="10.1259%" y="789" width="0.4673%" height="15" fill="rgb(214,135,41)" fg:x="11832" fg:w="546"/><text x="10.3759%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (546 samples, 0.47%)</title><rect x="10.1259%" y="773" width="0.4673%" height="15" fill="rgb(237,67,25)" fg:x="11832" fg:w="546"/><text x="10.3759%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (432 samples, 0.37%)</title><rect x="10.2235%" y="757" width="0.3697%" height="15" fill="rgb(222,189,50)" fg:x="11946" fg:w="432"/><text x="10.4735%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (432 samples, 0.37%)</title><rect x="10.2235%" y="741" width="0.3697%" height="15" fill="rgb(245,148,34)" fg:x="11946" fg:w="432"/><text x="10.4735%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (141 samples, 0.12%)</title><rect x="10.4725%" y="725" width="0.1207%" height="15" fill="rgb(222,29,6)" fg:x="12237" fg:w="141"/><text x="10.7225%" y="735.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (141 samples, 0.12%)</title><rect x="10.4725%" y="709" width="0.1207%" height="15" fill="rgb(221,189,43)" fg:x="12237" fg:w="141"/><text x="10.7225%" y="719.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (141 samples, 0.12%)</title><rect x="10.4725%" y="693" width="0.1207%" height="15" fill="rgb(207,36,27)" fg:x="12237" fg:w="141"/><text x="10.7225%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (130 samples, 0.11%)</title><rect x="10.4819%" y="677" width="0.1113%" height="15" fill="rgb(217,90,24)" fg:x="12248" fg:w="130"/><text x="10.7319%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (130 samples, 0.11%)</title><rect x="10.4819%" y="661" width="0.1113%" height="15" fill="rgb(224,66,35)" fg:x="12248" fg:w="130"/><text x="10.7319%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (130 samples, 0.11%)</title><rect x="10.4819%" y="645" width="0.1113%" height="15" fill="rgb(221,13,50)" fg:x="12248" fg:w="130"/><text x="10.7319%" y="655.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (33 samples, 0.03%)</title><rect x="10.5932%" y="789" width="0.0282%" height="15" fill="rgb(236,68,49)" fg:x="12378" fg:w="33"/><text x="10.8432%" y="799.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (612 samples, 0.52%)</title><rect x="10.1250%" y="805" width="0.5238%" height="15" fill="rgb(229,146,28)" fg:x="11831" fg:w="612"/><text x="10.3750%" y="815.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (32 samples, 0.03%)</title><rect x="10.6214%" y="789" width="0.0274%" height="15" fill="rgb(225,31,38)" fg:x="12411" fg:w="32"/><text x="10.8714%" y="799.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="10.6488%" y="805" width="0.0188%" height="15" fill="rgb(250,208,3)" fg:x="12443" fg:w="22"/><text x="10.8988%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="10.7754%" y="597" width="0.0231%" height="15" fill="rgb(246,54,23)" fg:x="12591" fg:w="27"/><text x="11.0254%" y="607.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (176 samples, 0.15%)</title><rect x="10.6702%" y="805" width="0.1506%" height="15" fill="rgb(243,76,11)" fg:x="12468" fg:w="176"/><text x="10.9202%" y="815.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (126 samples, 0.11%)</title><rect x="10.7130%" y="789" width="0.1078%" height="15" fill="rgb(245,21,50)" fg:x="12518" fg:w="126"/><text x="10.9630%" y="799.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (126 samples, 0.11%)</title><rect x="10.7130%" y="773" width="0.1078%" height="15" fill="rgb(228,9,43)" fg:x="12518" fg:w="126"/><text x="10.9630%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (119 samples, 0.10%)</title><rect x="10.7190%" y="757" width="0.1018%" height="15" fill="rgb(208,100,47)" fg:x="12525" fg:w="119"/><text x="10.9690%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (119 samples, 0.10%)</title><rect x="10.7190%" y="741" width="0.1018%" height="15" fill="rgb(232,26,8)" fg:x="12525" fg:w="119"/><text x="10.9690%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (119 samples, 0.10%)</title><rect x="10.7190%" y="725" width="0.1018%" height="15" fill="rgb(216,166,38)" fg:x="12525" fg:w="119"/><text x="10.9690%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (119 samples, 0.10%)</title><rect x="10.7190%" y="709" width="0.1018%" height="15" fill="rgb(251,202,51)" fg:x="12525" fg:w="119"/><text x="10.9690%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (119 samples, 0.10%)</title><rect x="10.7190%" y="693" width="0.1018%" height="15" fill="rgb(254,216,34)" fg:x="12525" fg:w="119"/><text x="10.9690%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (119 samples, 0.10%)</title><rect x="10.7190%" y="677" width="0.1018%" height="15" fill="rgb(251,32,27)" fg:x="12525" fg:w="119"/><text x="10.9690%" y="687.50"></text></g><g><title>alloc::alloc::alloc (117 samples, 0.10%)</title><rect x="10.7207%" y="661" width="0.1001%" height="15" fill="rgb(208,127,28)" fg:x="12527" fg:w="117"/><text x="10.9707%" y="671.50"></text></g><g><title>__rg_alloc (117 samples, 0.10%)</title><rect x="10.7207%" y="645" width="0.1001%" height="15" fill="rgb(224,137,22)" fg:x="12527" fg:w="117"/><text x="10.9707%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (117 samples, 0.10%)</title><rect x="10.7207%" y="629" width="0.1001%" height="15" fill="rgb(254,70,32)" fg:x="12527" fg:w="117"/><text x="10.9707%" y="639.50"></text></g><g><title>sn_rust_alloc (106 samples, 0.09%)</title><rect x="10.7301%" y="613" width="0.0907%" height="15" fill="rgb(229,75,37)" fg:x="12538" fg:w="106"/><text x="10.9801%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (26 samples, 0.02%)</title><rect x="10.7986%" y="597" width="0.0223%" height="15" fill="rgb(252,64,23)" fg:x="12618" fg:w="26"/><text x="11.0486%" y="607.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (65 samples, 0.06%)</title><rect x="11.0168%" y="485" width="0.0556%" height="15" fill="rgb(232,162,48)" fg:x="12873" fg:w="65"/><text x="11.2668%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (57 samples, 0.05%)</title><rect x="11.0236%" y="469" width="0.0488%" height="15" fill="rgb(246,160,12)" fg:x="12881" fg:w="57"/><text x="11.2736%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (57 samples, 0.05%)</title><rect x="11.0236%" y="453" width="0.0488%" height="15" fill="rgb(247,166,0)" fg:x="12881" fg:w="57"/><text x="11.2736%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (57 samples, 0.05%)</title><rect x="11.0236%" y="437" width="0.0488%" height="15" fill="rgb(249,219,21)" fg:x="12881" fg:w="57"/><text x="11.2736%" y="447.50"></text></g><g><title>fxhash::write (47 samples, 0.04%)</title><rect x="11.0322%" y="421" width="0.0402%" height="15" fill="rgb(205,209,3)" fg:x="12891" fg:w="47"/><text x="11.2822%" y="431.50"></text></g><g><title>fxhash::write64 (47 samples, 0.04%)</title><rect x="11.0322%" y="405" width="0.0402%" height="15" fill="rgb(243,44,1)" fg:x="12891" fg:w="47"/><text x="11.2822%" y="415.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (27 samples, 0.02%)</title><rect x="11.0493%" y="389" width="0.0231%" height="15" fill="rgb(206,159,16)" fg:x="12911" fg:w="27"/><text x="11.2993%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (17 samples, 0.01%)</title><rect x="11.0579%" y="373" width="0.0145%" height="15" fill="rgb(244,77,30)" fg:x="12921" fg:w="17"/><text x="11.3079%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (233 samples, 0.20%)</title><rect x="10.9038%" y="613" width="0.1994%" height="15" fill="rgb(218,69,12)" fg:x="12741" fg:w="233"/><text x="11.1538%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (232 samples, 0.20%)</title><rect x="10.9047%" y="597" width="0.1985%" height="15" fill="rgb(212,87,7)" fg:x="12742" fg:w="232"/><text x="11.1547%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (231 samples, 0.20%)</title><rect x="10.9055%" y="581" width="0.1977%" height="15" fill="rgb(245,114,25)" fg:x="12743" fg:w="231"/><text x="11.1555%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (110 samples, 0.09%)</title><rect x="11.0091%" y="565" width="0.0941%" height="15" fill="rgb(210,61,42)" fg:x="12864" fg:w="110"/><text x="11.2591%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (101 samples, 0.09%)</title><rect x="11.0168%" y="549" width="0.0864%" height="15" fill="rgb(211,52,33)" fg:x="12873" fg:w="101"/><text x="11.2668%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (101 samples, 0.09%)</title><rect x="11.0168%" y="533" width="0.0864%" height="15" fill="rgb(234,58,33)" fg:x="12873" fg:w="101"/><text x="11.2668%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (101 samples, 0.09%)</title><rect x="11.0168%" y="517" width="0.0864%" height="15" fill="rgb(220,115,36)" fg:x="12873" fg:w="101"/><text x="11.2668%" y="527.50"></text></g><g><title>core::hash::Hasher::write_str (101 samples, 0.09%)</title><rect x="11.0168%" y="501" width="0.0864%" height="15" fill="rgb(243,153,54)" fg:x="12873" fg:w="101"/><text x="11.2668%" y="511.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (36 samples, 0.03%)</title><rect x="11.0724%" y="485" width="0.0308%" height="15" fill="rgb(251,47,18)" fg:x="12938" fg:w="36"/><text x="11.3224%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (36 samples, 0.03%)</title><rect x="11.0724%" y="469" width="0.0308%" height="15" fill="rgb(242,102,42)" fg:x="12938" fg:w="36"/><text x="11.3224%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (36 samples, 0.03%)</title><rect x="11.0724%" y="453" width="0.0308%" height="15" fill="rgb(234,31,38)" fg:x="12938" fg:w="36"/><text x="11.3224%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (36 samples, 0.03%)</title><rect x="11.0724%" y="437" width="0.0308%" height="15" fill="rgb(221,117,51)" fg:x="12938" fg:w="36"/><text x="11.3224%" y="447.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (36 samples, 0.03%)</title><rect x="11.0724%" y="421" width="0.0308%" height="15" fill="rgb(212,20,18)" fg:x="12938" fg:w="36"/><text x="11.3224%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (17 samples, 0.01%)</title><rect x="11.1118%" y="549" width="0.0145%" height="15" fill="rgb(245,133,36)" fg:x="12984" fg:w="17"/><text x="11.3618%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="11.1143%" y="533" width="0.0120%" height="15" fill="rgb(212,6,19)" fg:x="12987" fg:w="14"/><text x="11.3643%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (20 samples, 0.02%)</title><rect x="11.1118%" y="565" width="0.0171%" height="15" fill="rgb(218,1,36)" fg:x="12984" fg:w="20"/><text x="11.3618%" y="575.50"></text></g><g><title>hashbrown::raw::inner::h2 (12 samples, 0.01%)</title><rect x="11.1332%" y="565" width="0.0103%" height="15" fill="rgb(246,84,54)" fg:x="13009" fg:w="12"/><text x="11.3832%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (12 samples, 0.01%)</title><rect x="11.1434%" y="565" width="0.0103%" height="15" fill="rgb(242,110,6)" fg:x="13021" fg:w="12"/><text x="11.3934%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.01%)</title><rect x="11.1434%" y="549" width="0.0103%" height="15" fill="rgb(214,47,5)" fg:x="13021" fg:w="12"/><text x="11.3934%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="11.1434%" y="533" width="0.0103%" height="15" fill="rgb(218,159,25)" fg:x="13021" fg:w="12"/><text x="11.3934%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (22 samples, 0.02%)</title><rect x="11.1537%" y="565" width="0.0188%" height="15" fill="rgb(215,211,28)" fg:x="13033" fg:w="22"/><text x="11.4037%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.02%)</title><rect x="11.1537%" y="549" width="0.0188%" height="15" fill="rgb(238,59,32)" fg:x="13033" fg:w="22"/><text x="11.4037%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (92 samples, 0.08%)</title><rect x="11.1032%" y="613" width="0.0787%" height="15" fill="rgb(226,82,3)" fg:x="12974" fg:w="92"/><text x="11.3532%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (92 samples, 0.08%)</title><rect x="11.1032%" y="597" width="0.0787%" height="15" fill="rgb(240,164,32)" fg:x="12974" fg:w="92"/><text x="11.3532%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (92 samples, 0.08%)</title><rect x="11.1032%" y="581" width="0.0787%" height="15" fill="rgb(232,46,7)" fg:x="12974" fg:w="92"/><text x="11.3532%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (342 samples, 0.29%)</title><rect x="10.8927%" y="725" width="0.2927%" height="15" fill="rgb(229,129,53)" fg:x="12728" fg:w="342"/><text x="11.1427%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (338 samples, 0.29%)</title><rect x="10.8961%" y="709" width="0.2893%" height="15" fill="rgb(234,188,29)" fg:x="12732" fg:w="338"/><text x="11.1461%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (338 samples, 0.29%)</title><rect x="10.8961%" y="693" width="0.2893%" height="15" fill="rgb(246,141,4)" fg:x="12732" fg:w="338"/><text x="11.1461%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (338 samples, 0.29%)</title><rect x="10.8961%" y="677" width="0.2893%" height="15" fill="rgb(229,23,39)" fg:x="12732" fg:w="338"/><text x="11.1461%" y="687.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (335 samples, 0.29%)</title><rect x="10.8987%" y="661" width="0.2867%" height="15" fill="rgb(206,12,3)" fg:x="12735" fg:w="335"/><text x="11.1487%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (335 samples, 0.29%)</title><rect x="10.8987%" y="645" width="0.2867%" height="15" fill="rgb(252,226,20)" fg:x="12735" fg:w="335"/><text x="11.1487%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (329 samples, 0.28%)</title><rect x="10.9038%" y="629" width="0.2816%" height="15" fill="rgb(216,123,35)" fg:x="12741" fg:w="329"/><text x="11.1538%" y="639.50"></text></g><g><title>value_trait::ValueAccess::get (429 samples, 0.37%)</title><rect x="10.8208%" y="805" width="0.3671%" height="15" fill="rgb(212,68,40)" fg:x="12644" fg:w="429"/><text x="11.0708%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (429 samples, 0.37%)</title><rect x="10.8208%" y="789" width="0.3671%" height="15" fill="rgb(254,125,32)" fg:x="12644" fg:w="429"/><text x="11.0708%" y="799.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (429 samples, 0.37%)</title><rect x="10.8208%" y="773" width="0.3671%" height="15" fill="rgb(253,97,22)" fg:x="12644" fg:w="429"/><text x="11.0708%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (429 samples, 0.37%)</title><rect x="10.8208%" y="757" width="0.3671%" height="15" fill="rgb(241,101,14)" fg:x="12644" fg:w="429"/><text x="11.0708%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (429 samples, 0.37%)</title><rect x="10.8208%" y="741" width="0.3671%" height="15" fill="rgb(238,103,29)" fg:x="12644" fg:w="429"/><text x="11.0708%" y="751.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (36 samples, 0.03%)</title><rect x="11.4387%" y="469" width="0.0308%" height="15" fill="rgb(233,195,47)" fg:x="13366" fg:w="36"/><text x="11.6887%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (33 samples, 0.03%)</title><rect x="11.4413%" y="453" width="0.0282%" height="15" fill="rgb(246,218,30)" fg:x="13369" fg:w="33"/><text x="11.6913%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (33 samples, 0.03%)</title><rect x="11.4413%" y="437" width="0.0282%" height="15" fill="rgb(219,145,47)" fg:x="13369" fg:w="33"/><text x="11.6913%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (33 samples, 0.03%)</title><rect x="11.4413%" y="421" width="0.0282%" height="15" fill="rgb(243,12,26)" fg:x="13369" fg:w="33"/><text x="11.6913%" y="431.50"></text></g><g><title>fxhash::write (28 samples, 0.02%)</title><rect x="11.4455%" y="405" width="0.0240%" height="15" fill="rgb(214,87,16)" fg:x="13374" fg:w="28"/><text x="11.6955%" y="415.50"></text></g><g><title>fxhash::write64 (28 samples, 0.02%)</title><rect x="11.4455%" y="389" width="0.0240%" height="15" fill="rgb(208,99,42)" fg:x="13374" fg:w="28"/><text x="11.6955%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (193 samples, 0.17%)</title><rect x="11.3240%" y="597" width="0.1652%" height="15" fill="rgb(253,99,2)" fg:x="13232" fg:w="193"/><text x="11.5740%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (188 samples, 0.16%)</title><rect x="11.3283%" y="581" width="0.1609%" height="15" fill="rgb(220,168,23)" fg:x="13237" fg:w="188"/><text x="11.5783%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (182 samples, 0.16%)</title><rect x="11.3334%" y="565" width="0.1558%" height="15" fill="rgb(242,38,24)" fg:x="13243" fg:w="182"/><text x="11.5834%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (64 samples, 0.05%)</title><rect x="11.4344%" y="549" width="0.0548%" height="15" fill="rgb(225,182,9)" fg:x="13361" fg:w="64"/><text x="11.6844%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (59 samples, 0.05%)</title><rect x="11.4387%" y="533" width="0.0505%" height="15" fill="rgb(243,178,37)" fg:x="13366" fg:w="59"/><text x="11.6887%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (59 samples, 0.05%)</title><rect x="11.4387%" y="517" width="0.0505%" height="15" fill="rgb(232,139,19)" fg:x="13366" fg:w="59"/><text x="11.6887%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (59 samples, 0.05%)</title><rect x="11.4387%" y="501" width="0.0505%" height="15" fill="rgb(225,201,24)" fg:x="13366" fg:w="59"/><text x="11.6887%" y="511.50"></text></g><g><title>core::hash::Hasher::write_str (59 samples, 0.05%)</title><rect x="11.4387%" y="485" width="0.0505%" height="15" fill="rgb(221,47,46)" fg:x="13366" fg:w="59"/><text x="11.6887%" y="495.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (23 samples, 0.02%)</title><rect x="11.4695%" y="469" width="0.0197%" height="15" fill="rgb(249,23,13)" fg:x="13402" fg:w="23"/><text x="11.7195%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (23 samples, 0.02%)</title><rect x="11.4695%" y="453" width="0.0197%" height="15" fill="rgb(219,9,5)" fg:x="13402" fg:w="23"/><text x="11.7195%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (23 samples, 0.02%)</title><rect x="11.4695%" y="437" width="0.0197%" height="15" fill="rgb(254,171,16)" fg:x="13402" fg:w="23"/><text x="11.7195%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (23 samples, 0.02%)</title><rect x="11.4695%" y="421" width="0.0197%" height="15" fill="rgb(230,171,20)" fg:x="13402" fg:w="23"/><text x="11.7195%" y="431.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (22 samples, 0.02%)</title><rect x="11.4704%" y="405" width="0.0188%" height="15" fill="rgb(210,71,41)" fg:x="13403" fg:w="22"/><text x="11.7204%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="11.4969%" y="549" width="0.0171%" height="15" fill="rgb(206,173,20)" fg:x="13434" fg:w="20"/><text x="11.7469%" y="559.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (20 samples, 0.02%)</title><rect x="11.4969%" y="533" width="0.0171%" height="15" fill="rgb(233,88,34)" fg:x="13434" fg:w="20"/><text x="11.7469%" y="543.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (98 samples, 0.08%)</title><rect x="11.5140%" y="533" width="0.0839%" height="15" fill="rgb(223,209,46)" fg:x="13454" fg:w="98"/><text x="11.7640%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (92 samples, 0.08%)</title><rect x="11.5191%" y="517" width="0.0787%" height="15" fill="rgb(250,43,18)" fg:x="13460" fg:w="92"/><text x="11.7691%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (64 samples, 0.05%)</title><rect x="11.5431%" y="501" width="0.0548%" height="15" fill="rgb(208,13,10)" fg:x="13488" fg:w="64"/><text x="11.7931%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (64 samples, 0.05%)</title><rect x="11.5431%" y="485" width="0.0548%" height="15" fill="rgb(212,200,36)" fg:x="13488" fg:w="64"/><text x="11.7931%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (64 samples, 0.05%)</title><rect x="11.5431%" y="469" width="0.0548%" height="15" fill="rgb(225,90,30)" fg:x="13488" fg:w="64"/><text x="11.7931%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (63 samples, 0.05%)</title><rect x="11.5440%" y="453" width="0.0539%" height="15" fill="rgb(236,182,39)" fg:x="13489" fg:w="63"/><text x="11.7940%" y="463.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (63 samples, 0.05%)</title><rect x="11.5440%" y="437" width="0.0539%" height="15" fill="rgb(212,144,35)" fg:x="13489" fg:w="63"/><text x="11.7940%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (63 samples, 0.05%)</title><rect x="11.5440%" y="421" width="0.0539%" height="15" fill="rgb(228,63,44)" fg:x="13489" fg:w="63"/><text x="11.7940%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (63 samples, 0.05%)</title><rect x="11.5440%" y="405" width="0.0539%" height="15" fill="rgb(228,109,6)" fg:x="13489" fg:w="63"/><text x="11.7940%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (63 samples, 0.05%)</title><rect x="11.5440%" y="389" width="0.0539%" height="15" fill="rgb(238,117,24)" fg:x="13489" fg:w="63"/><text x="11.7940%" y="399.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="11.5482%" y="373" width="0.0496%" height="15" fill="rgb(242,26,26)" fg:x="13494" fg:w="58"/><text x="11.7982%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.01%)</title><rect x="11.6047%" y="501" width="0.0103%" height="15" fill="rgb(221,92,48)" fg:x="13560" fg:w="12"/><text x="11.8547%" y="511.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (12 samples, 0.01%)</title><rect x="11.6047%" y="485" width="0.0103%" height="15" fill="rgb(209,209,32)" fg:x="13560" fg:w="12"/><text x="11.8547%" y="495.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (12 samples, 0.01%)</title><rect x="11.6047%" y="469" width="0.0103%" height="15" fill="rgb(221,70,22)" fg:x="13560" fg:w="12"/><text x="11.8547%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (129 samples, 0.11%)</title><rect x="11.5140%" y="549" width="0.1104%" height="15" fill="rgb(248,145,5)" fg:x="13454" fg:w="129"/><text x="11.7640%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (23 samples, 0.02%)</title><rect x="11.6047%" y="533" width="0.0197%" height="15" fill="rgb(226,116,26)" fg:x="13560" fg:w="23"/><text x="11.8547%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (23 samples, 0.02%)</title><rect x="11.6047%" y="517" width="0.0197%" height="15" fill="rgb(244,5,17)" fg:x="13560" fg:w="23"/><text x="11.8547%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (17 samples, 0.01%)</title><rect x="11.6355%" y="549" width="0.0145%" height="15" fill="rgb(252,159,33)" fg:x="13596" fg:w="17"/><text x="11.8855%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (17 samples, 0.01%)</title><rect x="11.6355%" y="533" width="0.0145%" height="15" fill="rgb(206,71,0)" fg:x="13596" fg:w="17"/><text x="11.8855%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="11.6355%" y="517" width="0.0145%" height="15" fill="rgb(233,118,54)" fg:x="13596" fg:w="17"/><text x="11.8855%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (422 samples, 0.36%)</title><rect x="11.3112%" y="709" width="0.3611%" height="15" fill="rgb(234,83,48)" fg:x="13217" fg:w="422"/><text x="11.5612%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (419 samples, 0.36%)</title><rect x="11.3137%" y="693" width="0.3586%" height="15" fill="rgb(228,3,54)" fg:x="13220" fg:w="419"/><text x="11.5637%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (415 samples, 0.36%)</title><rect x="11.3172%" y="677" width="0.3552%" height="15" fill="rgb(226,155,13)" fg:x="13224" fg:w="415"/><text x="11.5672%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (415 samples, 0.36%)</title><rect x="11.3172%" y="661" width="0.3552%" height="15" fill="rgb(241,28,37)" fg:x="13224" fg:w="415"/><text x="11.5672%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (414 samples, 0.35%)</title><rect x="11.3180%" y="645" width="0.3543%" height="15" fill="rgb(233,93,10)" fg:x="13225" fg:w="414"/><text x="11.5680%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (408 samples, 0.35%)</title><rect x="11.3232%" y="629" width="0.3492%" height="15" fill="rgb(225,113,19)" fg:x="13231" fg:w="408"/><text x="11.5732%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (408 samples, 0.35%)</title><rect x="11.3232%" y="613" width="0.3492%" height="15" fill="rgb(241,2,18)" fg:x="13231" fg:w="408"/><text x="11.5732%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (214 samples, 0.18%)</title><rect x="11.4892%" y="597" width="0.1831%" height="15" fill="rgb(228,207,21)" fg:x="13425" fg:w="214"/><text x="11.7392%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (214 samples, 0.18%)</title><rect x="11.4892%" y="581" width="0.1831%" height="15" fill="rgb(213,211,35)" fg:x="13425" fg:w="214"/><text x="11.7392%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (214 samples, 0.18%)</title><rect x="11.4892%" y="565" width="0.1831%" height="15" fill="rgb(209,83,10)" fg:x="13425" fg:w="214"/><text x="11.7392%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (26 samples, 0.02%)</title><rect x="11.6501%" y="549" width="0.0223%" height="15" fill="rgb(209,164,1)" fg:x="13613" fg:w="26"/><text x="11.9001%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.02%)</title><rect x="11.6501%" y="533" width="0.0223%" height="15" fill="rgb(213,184,43)" fg:x="13613" fg:w="26"/><text x="11.9001%" y="543.50"></text></g><g><title>value_trait::ValueAccess::get_str (575 samples, 0.49%)</title><rect x="11.1879%" y="805" width="0.4921%" height="15" fill="rgb(231,61,34)" fg:x="13073" fg:w="575"/><text x="11.4379%" y="815.50"></text></g><g><title>value_trait::ValueAccess::get (565 samples, 0.48%)</title><rect x="11.1965%" y="789" width="0.4835%" height="15" fill="rgb(235,75,3)" fg:x="13083" fg:w="565"/><text x="11.4465%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (565 samples, 0.48%)</title><rect x="11.1965%" y="773" width="0.4835%" height="15" fill="rgb(220,106,47)" fg:x="13083" fg:w="565"/><text x="11.4465%" y="783.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (552 samples, 0.47%)</title><rect x="11.2076%" y="757" width="0.4724%" height="15" fill="rgb(210,196,33)" fg:x="13096" fg:w="552"/><text x="11.4576%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (552 samples, 0.47%)</title><rect x="11.2076%" y="741" width="0.4724%" height="15" fill="rgb(229,154,42)" fg:x="13096" fg:w="552"/><text x="11.4576%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (552 samples, 0.47%)</title><rect x="11.2076%" y="725" width="0.4724%" height="15" fill="rgb(228,114,26)" fg:x="13096" fg:w="552"/><text x="11.4576%" y="735.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (51 samples, 0.04%)</title><rect x="11.7177%" y="757" width="0.0436%" height="15" fill="rgb(208,144,1)" fg:x="13692" fg:w="51"/><text x="11.9677%" y="767.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (67 samples, 0.06%)</title><rect x="11.7057%" y="773" width="0.0573%" height="15" fill="rgb(239,112,37)" fg:x="13678" fg:w="67"/><text x="11.9557%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (3,000 samples, 2.57%)</title><rect x="9.1973%" y="837" width="2.5674%" height="15" fill="rgb(210,96,50)" fg:x="10747" fg:w="3000"/><text x="9.4473%" y="847.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (3,000 samples, 2.57%)</title><rect x="9.1973%" y="821" width="2.5674%" height="15" fill="rgb(222,178,2)" fg:x="10747" fg:w="3000"/><text x="9.4473%" y="831.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (99 samples, 0.08%)</title><rect x="11.6800%" y="805" width="0.0847%" height="15" fill="rgb(226,74,18)" fg:x="13648" fg:w="99"/><text x="11.9300%" y="815.50"></text></g><g><title>window::TimeWindow::add_t (99 samples, 0.08%)</title><rect x="11.6800%" y="789" width="0.0847%" height="15" fill="rgb(225,67,54)" fg:x="13648" fg:w="99"/><text x="11.9300%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (82 samples, 0.07%)</title><rect x="11.7879%" y="789" width="0.0702%" height="15" fill="rgb(251,92,32)" fg:x="13774" fg:w="82"/><text x="12.0379%" y="799.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (18 samples, 0.02%)</title><rect x="11.9761%" y="757" width="0.0154%" height="15" fill="rgb(228,149,22)" fg:x="13994" fg:w="18"/><text x="12.2261%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::interpreter::LocalStack&gt; (16 samples, 0.01%)</title><rect x="11.9984%" y="757" width="0.0137%" height="15" fill="rgb(243,54,13)" fg:x="14020" fg:w="16"/><text x="12.2484%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;tremor_value::value::Value&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="11.9984%" y="741" width="0.0137%" height="15" fill="rgb(243,180,28)" fg:x="14020" fg:w="16"/><text x="12.2484%" y="751.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,265 samples, 4.51%)</title><rect x="7.5123%" y="1061" width="4.5058%" height="15" fill="rgb(208,167,24)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="1071.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,265 samples, 4.51%)</title><rect x="7.5123%" y="1045" width="4.5058%" height="15" fill="rgb(245,73,45)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="1055.50">&lt;asyn..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,265 samples, 4.51%)</title><rect x="7.5123%" y="1029" width="4.5058%" height="15" fill="rgb(237,203,48)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="1039.50">async..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,265 samples, 4.51%)</title><rect x="7.5123%" y="1013" width="4.5058%" height="15" fill="rgb(211,197,16)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="1023.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,265 samples, 4.51%)</title><rect x="7.5123%" y="997" width="4.5058%" height="15" fill="rgb(243,99,51)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="1007.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,265 samples, 4.51%)</title><rect x="7.5123%" y="981" width="4.5058%" height="15" fill="rgb(215,123,29)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="991.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,265 samples, 4.51%)</title><rect x="7.5123%" y="965" width="4.5058%" height="15" fill="rgb(239,186,37)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="975.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,265 samples, 4.51%)</title><rect x="7.5123%" y="949" width="4.5058%" height="15" fill="rgb(252,136,39)" fg:x="8778" fg:w="5265"/><text x="7.7623%" y="959.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,293 samples, 3.67%)</title><rect x="8.3441%" y="933" width="3.6740%" height="15" fill="rgb(223,213,32)" fg:x="9750" fg:w="4293"/><text x="8.5941%" y="943.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,296 samples, 2.82%)</title><rect x="9.1973%" y="917" width="2.8207%" height="15" fill="rgb(233,115,5)" fg:x="10747" fg:w="3296"/><text x="9.4473%" y="927.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (3,296 samples, 2.82%)</title><rect x="9.1973%" y="901" width="2.8207%" height="15" fill="rgb(207,226,44)" fg:x="10747" fg:w="3296"/><text x="9.4473%" y="911.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (3,296 samples, 2.82%)</title><rect x="9.1973%" y="885" width="2.8207%" height="15" fill="rgb(208,126,0)" fg:x="10747" fg:w="3296"/><text x="9.4473%" y="895.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (3,296 samples, 2.82%)</title><rect x="9.1973%" y="869" width="2.8207%" height="15" fill="rgb(244,66,21)" fg:x="10747" fg:w="3296"/><text x="9.4473%" y="879.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (3,296 samples, 2.82%)</title><rect x="9.1973%" y="853" width="2.8207%" height="15" fill="rgb(222,97,12)" fg:x="10747" fg:w="3296"/><text x="9.4473%" y="863.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (296 samples, 0.25%)</title><rect x="11.7648%" y="837" width="0.2533%" height="15" fill="rgb(219,213,19)" fg:x="13747" fg:w="296"/><text x="12.0148%" y="847.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (296 samples, 0.25%)</title><rect x="11.7648%" y="821" width="0.2533%" height="15" fill="rgb(252,169,30)" fg:x="13747" fg:w="296"/><text x="12.0148%" y="831.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (288 samples, 0.25%)</title><rect x="11.7716%" y="805" width="0.2465%" height="15" fill="rgb(206,32,51)" fg:x="13755" fg:w="288"/><text x="12.0216%" y="815.50"></text></g><g><title>tremor_script::script::Script::run (187 samples, 0.16%)</title><rect x="11.8580%" y="789" width="0.1600%" height="15" fill="rgb(250,172,42)" fg:x="13856" fg:w="187"/><text x="12.1080%" y="799.50"></text></g><g><title>tremor_script::ast::Script::run (182 samples, 0.16%)</title><rect x="11.8623%" y="773" width="0.1558%" height="15" fill="rgb(209,34,43)" fg:x="13861" fg:w="182"/><text x="12.1123%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,797 samples, 5.82%)</title><rect x="6.2046%" y="1077" width="5.8169%" height="15" fill="rgb(223,11,35)" fg:x="7250" fg:w="6797"/><text x="6.4546%" y="1087.50">&lt;core::..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="12.0215%" y="1077" width="0.0128%" height="15" fill="rgb(251,219,26)" fg:x="14047" fg:w="15"/><text x="12.2715%" y="1087.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.02%)</title><rect x="12.0848%" y="773" width="0.0248%" height="15" fill="rgb(231,119,3)" fg:x="14121" fg:w="29"/><text x="12.3348%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (43 samples, 0.04%)</title><rect x="12.0788%" y="837" width="0.0368%" height="15" fill="rgb(216,97,11)" fg:x="14114" fg:w="43"/><text x="12.3288%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="12.0831%" y="821" width="0.0325%" height="15" fill="rgb(223,59,9)" fg:x="14119" fg:w="38"/><text x="12.3331%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (38 samples, 0.03%)</title><rect x="12.0831%" y="805" width="0.0325%" height="15" fill="rgb(233,93,31)" fg:x="14119" fg:w="38"/><text x="12.3331%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (38 samples, 0.03%)</title><rect x="12.0831%" y="789" width="0.0325%" height="15" fill="rgb(239,81,33)" fg:x="14119" fg:w="38"/><text x="12.3331%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (57 samples, 0.05%)</title><rect x="12.0746%" y="901" width="0.0488%" height="15" fill="rgb(213,120,34)" fg:x="14109" fg:w="57"/><text x="12.3246%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (52 samples, 0.04%)</title><rect x="12.0788%" y="885" width="0.0445%" height="15" fill="rgb(243,49,53)" fg:x="14114" fg:w="52"/><text x="12.3288%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="12.0788%" y="869" width="0.0445%" height="15" fill="rgb(247,216,33)" fg:x="14114" fg:w="52"/><text x="12.3288%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (52 samples, 0.04%)</title><rect x="12.0788%" y="853" width="0.0445%" height="15" fill="rgb(226,26,14)" fg:x="14114" fg:w="52"/><text x="12.3288%" y="863.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (24 samples, 0.02%)</title><rect x="12.1524%" y="757" width="0.0205%" height="15" fill="rgb(215,49,53)" fg:x="14200" fg:w="24"/><text x="12.4024%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 0.02%)</title><rect x="12.1524%" y="741" width="0.0205%" height="15" fill="rgb(245,162,40)" fg:x="14200" fg:w="24"/><text x="12.4024%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::entry::BoxedREntry&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::entry::Entry&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt;,V,S&gt;&gt;&gt;::from (24 samples, 0.02%)</title><rect x="12.1524%" y="725" width="0.0205%" height="15" fill="rgb(229,68,17)" fg:x="14200" fg:w="24"/><text x="12.4024%" y="735.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="12.2354%" y="741" width="0.0137%" height="15" fill="rgb(213,182,10)" fg:x="14297" fg:w="16"/><text x="12.4854%" y="751.50"></text></g><g><title>&lt;halfbrown::entry::Entry&lt;K,V,S&gt; as core::convert::From&lt;hashbrown::map::Entry&lt;K,V,S&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="12.2354%" y="725" width="0.0137%" height="15" fill="rgb(245,125,30)" fg:x="14297" fg:w="16"/><text x="12.4854%" y="735.50"></text></g><g><title>hashbrown::map::make_insert_hash (23 samples, 0.02%)</title><rect x="12.2534%" y="725" width="0.0197%" height="15" fill="rgb(232,202,2)" fg:x="14318" fg:w="23"/><text x="12.5034%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (22 samples, 0.02%)</title><rect x="12.2543%" y="709" width="0.0188%" height="15" fill="rgb(237,140,51)" fg:x="14319" fg:w="22"/><text x="12.5043%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (14 samples, 0.01%)</title><rect x="12.2611%" y="693" width="0.0120%" height="15" fill="rgb(236,157,25)" fg:x="14327" fg:w="14"/><text x="12.5111%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (14 samples, 0.01%)</title><rect x="12.2611%" y="677" width="0.0120%" height="15" fill="rgb(219,209,0)" fg:x="14327" fg:w="14"/><text x="12.5111%" y="687.50"></text></g><g><title>core::hash::Hasher::write_str (13 samples, 0.01%)</title><rect x="12.2620%" y="661" width="0.0111%" height="15" fill="rgb(240,116,54)" fg:x="14328" fg:w="13"/><text x="12.5120%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}}::{{closure}} (166 samples, 0.14%)</title><rect x="12.1490%" y="773" width="0.1421%" height="15" fill="rgb(216,10,36)" fg:x="14196" fg:w="166"/><text x="12.3990%" y="783.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (138 samples, 0.12%)</title><rect x="12.1730%" y="757" width="0.1181%" height="15" fill="rgb(222,72,44)" fg:x="14224" fg:w="138"/><text x="12.4230%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (49 samples, 0.04%)</title><rect x="12.2491%" y="741" width="0.0419%" height="15" fill="rgb(232,159,9)" fg:x="14313" fg:w="49"/><text x="12.4991%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (21 samples, 0.02%)</title><rect x="12.2731%" y="725" width="0.0180%" height="15" fill="rgb(210,39,32)" fg:x="14341" fg:w="21"/><text x="12.5231%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (21 samples, 0.02%)</title><rect x="12.2731%" y="709" width="0.0180%" height="15" fill="rgb(216,194,45)" fg:x="14341" fg:w="21"/><text x="12.5231%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::entry (198 samples, 0.17%)</title><rect x="12.1268%" y="869" width="0.1694%" height="15" fill="rgb(218,18,35)" fg:x="14170" fg:w="198"/><text x="12.3768%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (177 samples, 0.15%)</title><rect x="12.1447%" y="853" width="0.1515%" height="15" fill="rgb(207,83,51)" fg:x="14191" fg:w="177"/><text x="12.3947%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (173 samples, 0.15%)</title><rect x="12.1482%" y="837" width="0.1481%" height="15" fill="rgb(225,63,43)" fg:x="14195" fg:w="173"/><text x="12.3982%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (173 samples, 0.15%)</title><rect x="12.1482%" y="821" width="0.1481%" height="15" fill="rgb(207,57,36)" fg:x="14195" fg:w="173"/><text x="12.3982%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}} (173 samples, 0.15%)</title><rect x="12.1482%" y="805" width="0.1481%" height="15" fill="rgb(216,99,33)" fg:x="14195" fg:w="173"/><text x="12.3982%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (172 samples, 0.15%)</title><rect x="12.1490%" y="789" width="0.1472%" height="15" fill="rgb(225,42,16)" fg:x="14196" fg:w="172"/><text x="12.3990%" y="799.50"></text></g><g><title>core::mem::swap (25 samples, 0.02%)</title><rect x="12.3450%" y="645" width="0.0214%" height="15" fill="rgb(220,201,45)" fg:x="14425" fg:w="25"/><text x="12.5950%" y="655.50"></text></g><g><title>core::mem::swap_simple (25 samples, 0.02%)</title><rect x="12.3450%" y="629" width="0.0214%" height="15" fill="rgb(225,33,4)" fg:x="14425" fg:w="25"/><text x="12.5950%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (41 samples, 0.04%)</title><rect x="12.3424%" y="661" width="0.0351%" height="15" fill="rgb(224,33,50)" fg:x="14422" fg:w="41"/><text x="12.5924%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.01%)</title><rect x="12.3664%" y="645" width="0.0111%" height="15" fill="rgb(246,198,51)" fg:x="14450" fg:w="13"/><text x="12.6164%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (43 samples, 0.04%)</title><rect x="12.3416%" y="709" width="0.0368%" height="15" fill="rgb(205,22,4)" fg:x="14421" fg:w="43"/><text x="12.5916%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (43 samples, 0.04%)</title><rect x="12.3416%" y="693" width="0.0368%" height="15" fill="rgb(206,3,8)" fg:x="14421" fg:w="43"/><text x="12.5916%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (42 samples, 0.04%)</title><rect x="12.3424%" y="677" width="0.0359%" height="15" fill="rgb(251,23,15)" fg:x="14422" fg:w="42"/><text x="12.5924%" y="687.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (84 samples, 0.07%)</title><rect x="12.3193%" y="837" width="0.0719%" height="15" fill="rgb(252,88,28)" fg:x="14395" fg:w="84"/><text x="12.5693%" y="847.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}} (81 samples, 0.07%)</title><rect x="12.3219%" y="821" width="0.0693%" height="15" fill="rgb(212,127,14)" fg:x="14398" fg:w="81"/><text x="12.5719%" y="831.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (81 samples, 0.07%)</title><rect x="12.3219%" y="805" width="0.0693%" height="15" fill="rgb(247,145,37)" fg:x="14398" fg:w="81"/><text x="12.5719%" y="815.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (81 samples, 0.07%)</title><rect x="12.3219%" y="789" width="0.0693%" height="15" fill="rgb(209,117,53)" fg:x="14398" fg:w="81"/><text x="12.5719%" y="799.50"></text></g><g><title>halfbrown::entry::VacantEntry&lt;K,V,S&gt;::insert (81 samples, 0.07%)</title><rect x="12.3219%" y="773" width="0.0693%" height="15" fill="rgb(212,90,42)" fg:x="14398" fg:w="81"/><text x="12.5719%" y="783.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (79 samples, 0.07%)</title><rect x="12.3236%" y="757" width="0.0676%" height="15" fill="rgb(218,164,37)" fg:x="14400" fg:w="79"/><text x="12.5736%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (79 samples, 0.07%)</title><rect x="12.3236%" y="741" width="0.0676%" height="15" fill="rgb(246,65,34)" fg:x="14400" fg:w="79"/><text x="12.5736%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (65 samples, 0.06%)</title><rect x="12.3356%" y="725" width="0.0556%" height="15" fill="rgb(231,100,33)" fg:x="14414" fg:w="65"/><text x="12.5856%" y="735.50"></text></g><g><title>abi_stable::std_types::map::entry::RVacantEntry&lt;K,V,S&gt;::insert (116 samples, 0.10%)</title><rect x="12.2962%" y="853" width="0.0993%" height="15" fill="rgb(228,126,14)" fg:x="14368" fg:w="116"/><text x="12.5462%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (13 samples, 0.01%)</title><rect x="12.3955%" y="805" width="0.0111%" height="15" fill="rgb(215,173,21)" fg:x="14484" fg:w="13"/><text x="12.6455%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (13 samples, 0.01%)</title><rect x="12.3955%" y="789" width="0.0111%" height="15" fill="rgb(210,6,40)" fg:x="14484" fg:w="13"/><text x="12.6455%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (13 samples, 0.01%)</title><rect x="12.3955%" y="773" width="0.0111%" height="15" fill="rgb(212,48,18)" fg:x="14484" fg:w="13"/><text x="12.6455%" y="783.50"></text></g><g><title>core::mem::swap (61 samples, 0.05%)</title><rect x="12.4229%" y="629" width="0.0522%" height="15" fill="rgb(230,214,11)" fg:x="14516" fg:w="61"/><text x="12.6729%" y="639.50"></text></g><g><title>core::mem::swap_simple (61 samples, 0.05%)</title><rect x="12.4229%" y="613" width="0.0522%" height="15" fill="rgb(254,105,39)" fg:x="14516" fg:w="61"/><text x="12.6729%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (78 samples, 0.07%)</title><rect x="12.5110%" y="485" width="0.0668%" height="15" fill="rgb(245,158,5)" fg:x="14619" fg:w="78"/><text x="12.7610%" y="495.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (116 samples, 0.10%)</title><rect x="12.4853%" y="581" width="0.0993%" height="15" fill="rgb(249,208,11)" fg:x="14589" fg:w="116"/><text x="12.7353%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (116 samples, 0.10%)</title><rect x="12.4853%" y="565" width="0.0993%" height="15" fill="rgb(210,39,28)" fg:x="14589" fg:w="116"/><text x="12.7353%" y="575.50"></text></g><g><title>alloc::alloc::alloc (116 samples, 0.10%)</title><rect x="12.4853%" y="549" width="0.0993%" height="15" fill="rgb(211,56,53)" fg:x="14589" fg:w="116"/><text x="12.7353%" y="559.50"></text></g><g><title>__rg_alloc (116 samples, 0.10%)</title><rect x="12.4853%" y="533" width="0.0993%" height="15" fill="rgb(226,201,30)" fg:x="14589" fg:w="116"/><text x="12.7353%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (116 samples, 0.10%)</title><rect x="12.4853%" y="517" width="0.0993%" height="15" fill="rgb(239,101,34)" fg:x="14589" fg:w="116"/><text x="12.7353%" y="527.50"></text></g><g><title>sn_rust_alloc (116 samples, 0.10%)</title><rect x="12.4853%" y="501" width="0.0993%" height="15" fill="rgb(226,209,5)" fg:x="14589" fg:w="116"/><text x="12.7353%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (126 samples, 0.11%)</title><rect x="12.4811%" y="597" width="0.1078%" height="15" fill="rgb(250,105,47)" fg:x="14584" fg:w="126"/><text x="12.7311%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (131 samples, 0.11%)</title><rect x="12.4776%" y="629" width="0.1121%" height="15" fill="rgb(230,72,3)" fg:x="14580" fg:w="131"/><text x="12.7276%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (130 samples, 0.11%)</title><rect x="12.4785%" y="613" width="0.1113%" height="15" fill="rgb(232,218,39)" fg:x="14581" fg:w="130"/><text x="12.7285%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (228 samples, 0.20%)</title><rect x="12.3955%" y="821" width="0.1951%" height="15" fill="rgb(248,166,6)" fg:x="14484" fg:w="228"/><text x="12.6455%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (215 samples, 0.18%)</title><rect x="12.4066%" y="805" width="0.1840%" height="15" fill="rgb(247,89,20)" fg:x="14497" fg:w="215"/><text x="12.6566%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (215 samples, 0.18%)</title><rect x="12.4066%" y="789" width="0.1840%" height="15" fill="rgb(248,130,54)" fg:x="14497" fg:w="215"/><text x="12.6566%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (213 samples, 0.18%)</title><rect x="12.4083%" y="773" width="0.1823%" height="15" fill="rgb(234,196,4)" fg:x="14499" fg:w="213"/><text x="12.6583%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (213 samples, 0.18%)</title><rect x="12.4083%" y="757" width="0.1823%" height="15" fill="rgb(250,143,31)" fg:x="14499" fg:w="213"/><text x="12.6583%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (213 samples, 0.18%)</title><rect x="12.4083%" y="741" width="0.1823%" height="15" fill="rgb(211,110,34)" fg:x="14499" fg:w="213"/><text x="12.6583%" y="751.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (213 samples, 0.18%)</title><rect x="12.4083%" y="725" width="0.1823%" height="15" fill="rgb(215,124,48)" fg:x="14499" fg:w="213"/><text x="12.6583%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (211 samples, 0.18%)</title><rect x="12.4100%" y="709" width="0.1806%" height="15" fill="rgb(216,46,13)" fg:x="14501" fg:w="211"/><text x="12.6600%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (211 samples, 0.18%)</title><rect x="12.4100%" y="693" width="0.1806%" height="15" fill="rgb(205,184,25)" fg:x="14501" fg:w="211"/><text x="12.6600%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (211 samples, 0.18%)</title><rect x="12.4100%" y="677" width="0.1806%" height="15" fill="rgb(228,1,10)" fg:x="14501" fg:w="211"/><text x="12.6600%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (206 samples, 0.18%)</title><rect x="12.4143%" y="661" width="0.1763%" height="15" fill="rgb(213,116,27)" fg:x="14506" fg:w="206"/><text x="12.6643%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (205 samples, 0.18%)</title><rect x="12.4152%" y="645" width="0.1754%" height="15" fill="rgb(241,95,50)" fg:x="14507" fg:w="205"/><text x="12.6652%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (631 samples, 0.54%)</title><rect x="12.0549%" y="933" width="0.5400%" height="15" fill="rgb(238,48,32)" fg:x="14086" fg:w="631"/><text x="12.3049%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (631 samples, 0.54%)</title><rect x="12.0549%" y="917" width="0.5400%" height="15" fill="rgb(235,113,49)" fg:x="14086" fg:w="631"/><text x="12.3049%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (549 samples, 0.47%)</title><rect x="12.1251%" y="901" width="0.4698%" height="15" fill="rgb(205,127,43)" fg:x="14168" fg:w="549"/><text x="12.3751%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (549 samples, 0.47%)</title><rect x="12.1251%" y="885" width="0.4698%" height="15" fill="rgb(250,162,2)" fg:x="14168" fg:w="549"/><text x="12.3751%" y="895.50"></text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (349 samples, 0.30%)</title><rect x="12.2962%" y="869" width="0.2987%" height="15" fill="rgb(220,13,41)" fg:x="14368" fg:w="349"/><text x="12.5462%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (233 samples, 0.20%)</title><rect x="12.3955%" y="853" width="0.1994%" height="15" fill="rgb(249,221,25)" fg:x="14484" fg:w="233"/><text x="12.6455%" y="863.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (233 samples, 0.20%)</title><rect x="12.3955%" y="837" width="0.1994%" height="15" fill="rgb(215,208,19)" fg:x="14484" fg:w="233"/><text x="12.6455%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (685 samples, 0.59%)</title><rect x="12.0540%" y="965" width="0.5862%" height="15" fill="rgb(236,175,2)" fg:x="14085" fg:w="685"/><text x="12.3040%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (685 samples, 0.59%)</title><rect x="12.0540%" y="949" width="0.5862%" height="15" fill="rgb(241,52,2)" fg:x="14085" fg:w="685"/><text x="12.3040%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (53 samples, 0.05%)</title><rect x="12.5949%" y="933" width="0.0454%" height="15" fill="rgb(248,140,14)" fg:x="14717" fg:w="53"/><text x="12.8449%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (689 samples, 0.59%)</title><rect x="12.0540%" y="981" width="0.5896%" height="15" fill="rgb(253,22,42)" fg:x="14085" fg:w="689"/><text x="12.3040%" y="991.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (241 samples, 0.21%)</title><rect x="13.2530%" y="741" width="0.2062%" height="15" fill="rgb(234,61,47)" fg:x="15486" fg:w="241"/><text x="13.5030%" y="751.50"></text></g><g><title>&lt;halfbrown::entry::Entry&lt;K,V,S&gt; as core::convert::From&lt;hashbrown::map::Entry&lt;K,V,S&gt;&gt;&gt;::from (241 samples, 0.21%)</title><rect x="13.2530%" y="725" width="0.2062%" height="15" fill="rgb(208,226,15)" fg:x="15486" fg:w="241"/><text x="13.5030%" y="735.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (82 samples, 0.07%)</title><rect x="13.5919%" y="597" width="0.0702%" height="15" fill="rgb(217,221,4)" fg:x="15882" fg:w="82"/><text x="13.8419%" y="607.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (82 samples, 0.07%)</title><rect x="13.5919%" y="581" width="0.0702%" height="15" fill="rgb(212,174,34)" fg:x="15882" fg:w="82"/><text x="13.8419%" y="591.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (82 samples, 0.07%)</title><rect x="13.5919%" y="565" width="0.0702%" height="15" fill="rgb(253,83,4)" fg:x="15882" fg:w="82"/><text x="13.8419%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (82 samples, 0.07%)</title><rect x="13.5919%" y="549" width="0.0702%" height="15" fill="rgb(250,195,49)" fg:x="15882" fg:w="82"/><text x="13.8419%" y="559.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (82 samples, 0.07%)</title><rect x="13.5919%" y="533" width="0.0702%" height="15" fill="rgb(241,192,25)" fg:x="15882" fg:w="82"/><text x="13.8419%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="13.6621%" y="597" width="0.0137%" height="15" fill="rgb(208,124,10)" fg:x="15964" fg:w="16"/><text x="13.9121%" y="607.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (12 samples, 0.01%)</title><rect x="13.6758%" y="581" width="0.0103%" height="15" fill="rgb(222,33,0)" fg:x="15980" fg:w="12"/><text x="13.9258%" y="591.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (198 samples, 0.17%)</title><rect x="13.5568%" y="645" width="0.1694%" height="15" fill="rgb(234,209,28)" fg:x="15841" fg:w="198"/><text x="13.8068%" y="655.50"></text></g><g><title>fxhash::write (198 samples, 0.17%)</title><rect x="13.5568%" y="629" width="0.1694%" height="15" fill="rgb(224,11,23)" fg:x="15841" fg:w="198"/><text x="13.8068%" y="639.50"></text></g><g><title>fxhash::write64 (198 samples, 0.17%)</title><rect x="13.5568%" y="613" width="0.1694%" height="15" fill="rgb(232,99,1)" fg:x="15841" fg:w="198"/><text x="13.8068%" y="623.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (59 samples, 0.05%)</title><rect x="13.6758%" y="597" width="0.0505%" height="15" fill="rgb(237,95,45)" fg:x="15980" fg:w="59"/><text x="13.9258%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (40 samples, 0.03%)</title><rect x="13.6920%" y="581" width="0.0342%" height="15" fill="rgb(208,109,11)" fg:x="15999" fg:w="40"/><text x="13.9420%" y="591.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (14 samples, 0.01%)</title><rect x="13.7400%" y="613" width="0.0120%" height="15" fill="rgb(216,190,48)" fg:x="16055" fg:w="14"/><text x="13.9900%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (13 samples, 0.01%)</title><rect x="13.7519%" y="613" width="0.0111%" height="15" fill="rgb(251,171,36)" fg:x="16069" fg:w="13"/><text x="14.0019%" y="623.50"></text></g><g><title>hashbrown::map::make_insert_hash (345 samples, 0.30%)</title><rect x="13.4866%" y="725" width="0.2953%" height="15" fill="rgb(230,62,22)" fg:x="15759" fg:w="345"/><text x="13.7366%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (340 samples, 0.29%)</title><rect x="13.4909%" y="709" width="0.2910%" height="15" fill="rgb(225,114,35)" fg:x="15764" fg:w="340"/><text x="13.7409%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (282 samples, 0.24%)</title><rect x="13.5406%" y="693" width="0.2413%" height="15" fill="rgb(215,118,42)" fg:x="15822" fg:w="282"/><text x="13.7906%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (264 samples, 0.23%)</title><rect x="13.5560%" y="677" width="0.2259%" height="15" fill="rgb(243,119,21)" fg:x="15840" fg:w="264"/><text x="13.8060%" y="687.50"></text></g><g><title>core::hash::Hasher::write_str (263 samples, 0.23%)</title><rect x="13.5568%" y="661" width="0.2251%" height="15" fill="rgb(252,177,53)" fg:x="15841" fg:w="263"/><text x="13.8068%" y="671.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (65 samples, 0.06%)</title><rect x="13.7263%" y="645" width="0.0556%" height="15" fill="rgb(237,209,29)" fg:x="16039" fg:w="65"/><text x="13.9763%" y="655.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (65 samples, 0.06%)</title><rect x="13.7263%" y="629" width="0.0556%" height="15" fill="rgb(212,65,23)" fg:x="16039" fg:w="65"/><text x="13.9763%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (22 samples, 0.02%)</title><rect x="13.7631%" y="613" width="0.0188%" height="15" fill="rgb(230,222,46)" fg:x="16082" fg:w="22"/><text x="14.0131%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (44 samples, 0.04%)</title><rect x="13.7887%" y="693" width="0.0377%" height="15" fill="rgb(215,135,32)" fg:x="16112" fg:w="44"/><text x="14.0387%" y="703.50"></text></g><g><title>hashbrown::raw::inner::h2 (18 samples, 0.02%)</title><rect x="13.8264%" y="693" width="0.0154%" height="15" fill="rgb(246,101,22)" fg:x="16156" fg:w="18"/><text x="14.0764%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (35 samples, 0.03%)</title><rect x="13.8418%" y="693" width="0.0300%" height="15" fill="rgb(206,107,13)" fg:x="16174" fg:w="35"/><text x="14.0918%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (35 samples, 0.03%)</title><rect x="13.8418%" y="677" width="0.0300%" height="15" fill="rgb(250,100,44)" fg:x="16174" fg:w="35"/><text x="14.0918%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.03%)</title><rect x="13.8418%" y="661" width="0.0300%" height="15" fill="rgb(231,147,38)" fg:x="16174" fg:w="35"/><text x="14.0918%" y="671.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (43 samples, 0.04%)</title><rect x="13.8717%" y="693" width="0.0368%" height="15" fill="rgb(229,8,40)" fg:x="16209" fg:w="43"/><text x="14.1217%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (43 samples, 0.04%)</title><rect x="13.8717%" y="677" width="0.0368%" height="15" fill="rgb(221,135,30)" fg:x="16209" fg:w="43"/><text x="14.1217%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::entry (1,514 samples, 1.30%)</title><rect x="12.6437%" y="869" width="1.2957%" height="15" fill="rgb(249,193,18)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (1,514 samples, 1.30%)</title><rect x="12.6437%" y="853" width="1.2957%" height="15" fill="rgb(209,133,39)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,514 samples, 1.30%)</title><rect x="12.6437%" y="837" width="1.2957%" height="15" fill="rgb(232,100,14)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,514 samples, 1.30%)</title><rect x="12.6437%" y="821" width="1.2957%" height="15" fill="rgb(224,185,1)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}} (1,514 samples, 1.30%)</title><rect x="12.6437%" y="805" width="1.2957%" height="15" fill="rgb(223,139,8)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1,514 samples, 1.30%)</title><rect x="12.6437%" y="789" width="1.2957%" height="15" fill="rgb(232,213,38)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}}::{{closure}} (1,514 samples, 1.30%)</title><rect x="12.6437%" y="773" width="1.2957%" height="15" fill="rgb(207,94,22)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="783.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (1,514 samples, 1.30%)</title><rect x="12.6437%" y="757" width="1.2957%" height="15" fill="rgb(219,183,54)" fg:x="14774" fg:w="1514"/><text x="12.8937%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (561 samples, 0.48%)</title><rect x="13.4593%" y="741" width="0.4801%" height="15" fill="rgb(216,185,54)" fg:x="15727" fg:w="561"/><text x="13.7093%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (184 samples, 0.16%)</title><rect x="13.7819%" y="725" width="0.1575%" height="15" fill="rgb(254,217,39)" fg:x="16104" fg:w="184"/><text x="14.0319%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (184 samples, 0.16%)</title><rect x="13.7819%" y="709" width="0.1575%" height="15" fill="rgb(240,178,23)" fg:x="16104" fg:w="184"/><text x="14.0319%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (36 samples, 0.03%)</title><rect x="13.9085%" y="693" width="0.0308%" height="15" fill="rgb(218,11,47)" fg:x="16252" fg:w="36"/><text x="14.1585%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (36 samples, 0.03%)</title><rect x="13.9085%" y="677" width="0.0308%" height="15" fill="rgb(218,51,51)" fg:x="16252" fg:w="36"/><text x="14.1585%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (36 samples, 0.03%)</title><rect x="13.9085%" y="661" width="0.0308%" height="15" fill="rgb(238,126,27)" fg:x="16252" fg:w="36"/><text x="14.1585%" y="671.50"></text></g><g><title>core::mem::swap (224 samples, 0.19%)</title><rect x="13.9693%" y="645" width="0.1917%" height="15" fill="rgb(249,202,22)" fg:x="16323" fg:w="224"/><text x="14.2193%" y="655.50"></text></g><g><title>core::mem::swap_simple (224 samples, 0.19%)</title><rect x="13.9693%" y="629" width="0.1917%" height="15" fill="rgb(254,195,49)" fg:x="16323" fg:w="224"/><text x="14.2193%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (16 samples, 0.01%)</title><rect x="14.1867%" y="613" width="0.0137%" height="15" fill="rgb(208,123,14)" fg:x="16577" fg:w="16"/><text x="14.4367%" y="623.50"></text></g><g><title>core::intrinsics::write_bytes (16 samples, 0.01%)</title><rect x="14.1867%" y="597" width="0.0137%" height="15" fill="rgb(224,200,8)" fg:x="16577" fg:w="16"/><text x="14.4367%" y="607.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="14.1901%" y="581" width="0.0103%" height="15" fill="rgb(217,61,36)" fg:x="16581" fg:w="12"/><text x="14.4401%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="14.2551%" y="501" width="0.0240%" height="15" fill="rgb(206,35,45)" fg:x="16657" fg:w="28"/><text x="14.5051%" y="511.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (84 samples, 0.07%)</title><rect x="14.2132%" y="597" width="0.0719%" height="15" fill="rgb(217,65,33)" fg:x="16608" fg:w="84"/><text x="14.4632%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (84 samples, 0.07%)</title><rect x="14.2132%" y="581" width="0.0719%" height="15" fill="rgb(222,158,48)" fg:x="16608" fg:w="84"/><text x="14.4632%" y="591.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.07%)</title><rect x="14.2132%" y="565" width="0.0719%" height="15" fill="rgb(254,2,54)" fg:x="16608" fg:w="84"/><text x="14.4632%" y="575.50"></text></g><g><title>__rg_alloc (84 samples, 0.07%)</title><rect x="14.2132%" y="549" width="0.0719%" height="15" fill="rgb(250,143,38)" fg:x="16608" fg:w="84"/><text x="14.4632%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (84 samples, 0.07%)</title><rect x="14.2132%" y="533" width="0.0719%" height="15" fill="rgb(248,25,0)" fg:x="16608" fg:w="84"/><text x="14.4632%" y="543.50"></text></g><g><title>sn_rust_alloc (80 samples, 0.07%)</title><rect x="14.2166%" y="517" width="0.0685%" height="15" fill="rgb(206,152,27)" fg:x="16612" fg:w="80"/><text x="14.4666%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (101 samples, 0.09%)</title><rect x="14.2004%" y="613" width="0.0864%" height="15" fill="rgb(240,77,30)" fg:x="16593" fg:w="101"/><text x="14.4504%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (396 samples, 0.34%)</title><rect x="13.9496%" y="661" width="0.3389%" height="15" fill="rgb(231,5,3)" fg:x="16300" fg:w="396"/><text x="14.1996%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (146 samples, 0.12%)</title><rect x="14.1636%" y="645" width="0.1249%" height="15" fill="rgb(207,226,32)" fg:x="16550" fg:w="146"/><text x="14.4136%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (137 samples, 0.12%)</title><rect x="14.1713%" y="629" width="0.1172%" height="15" fill="rgb(222,207,47)" fg:x="16559" fg:w="137"/><text x="14.4213%" y="639.50"></text></g><g><title>abi_stable::std_types::map::entry::RVacantEntry&lt;K,V,S&gt;::insert (421 samples, 0.36%)</title><rect x="13.9394%" y="853" width="0.3603%" height="15" fill="rgb(229,115,45)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="863.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (421 samples, 0.36%)</title><rect x="13.9394%" y="837" width="0.3603%" height="15" fill="rgb(224,191,6)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="847.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}} (421 samples, 0.36%)</title><rect x="13.9394%" y="821" width="0.3603%" height="15" fill="rgb(230,227,24)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="831.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (421 samples, 0.36%)</title><rect x="13.9394%" y="805" width="0.3603%" height="15" fill="rgb(228,80,19)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="815.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (421 samples, 0.36%)</title><rect x="13.9394%" y="789" width="0.3603%" height="15" fill="rgb(247,229,0)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="799.50"></text></g><g><title>halfbrown::entry::VacantEntry&lt;K,V,S&gt;::insert (421 samples, 0.36%)</title><rect x="13.9394%" y="773" width="0.3603%" height="15" fill="rgb(237,194,15)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="783.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (421 samples, 0.36%)</title><rect x="13.9394%" y="757" width="0.3603%" height="15" fill="rgb(219,203,20)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (421 samples, 0.36%)</title><rect x="13.9394%" y="741" width="0.3603%" height="15" fill="rgb(234,128,8)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (421 samples, 0.36%)</title><rect x="13.9394%" y="725" width="0.3603%" height="15" fill="rgb(248,202,8)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (421 samples, 0.36%)</title><rect x="13.9394%" y="709" width="0.3603%" height="15" fill="rgb(206,104,37)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (421 samples, 0.36%)</title><rect x="13.9394%" y="693" width="0.3603%" height="15" fill="rgb(223,8,27)" fg:x="16288" fg:w="421"/><text x="14.1894%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (420 samples, 0.36%)</title><rect x="13.9402%" y="677" width="0.3594%" height="15" fill="rgb(216,217,28)" fg:x="16289" fg:w="420"/><text x="14.1902%" y="687.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (13 samples, 0.01%)</title><rect x="14.2885%" y="661" width="0.0111%" height="15" fill="rgb(249,199,1)" fg:x="16696" fg:w="13"/><text x="14.5385%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (23 samples, 0.02%)</title><rect x="14.2997%" y="805" width="0.0197%" height="15" fill="rgb(240,85,17)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (23 samples, 0.02%)</title><rect x="14.2997%" y="789" width="0.0197%" height="15" fill="rgb(206,108,45)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (23 samples, 0.02%)</title><rect x="14.2997%" y="773" width="0.0197%" height="15" fill="rgb(245,210,41)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="783.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (23 samples, 0.02%)</title><rect x="14.2997%" y="757" width="0.0197%" height="15" fill="rgb(206,13,37)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="14.2997%" y="741" width="0.0197%" height="15" fill="rgb(250,61,18)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="14.2997%" y="725" width="0.0197%" height="15" fill="rgb(235,172,48)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.02%)</title><rect x="14.2997%" y="709" width="0.0197%" height="15" fill="rgb(249,201,17)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="14.2997%" y="693" width="0.0197%" height="15" fill="rgb(219,208,6)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="14.2997%" y="677" width="0.0197%" height="15" fill="rgb(248,31,23)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="687.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="14.2997%" y="661" width="0.0197%" height="15" fill="rgb(245,15,42)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="671.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="14.2997%" y="645" width="0.0197%" height="15" fill="rgb(222,217,39)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="14.2997%" y="629" width="0.0197%" height="15" fill="rgb(210,219,27)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="639.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="14.2997%" y="613" width="0.0197%" height="15" fill="rgb(252,166,36)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="14.2997%" y="597" width="0.0197%" height="15" fill="rgb(245,132,34)" fg:x="16709" fg:w="23"/><text x="14.5497%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (71 samples, 0.06%)</title><rect x="14.3724%" y="597" width="0.0608%" height="15" fill="rgb(236,54,3)" fg:x="16794" fg:w="71"/><text x="14.6224%" y="607.50"></text></g><g><title>core::intrinsics::write_bytes (71 samples, 0.06%)</title><rect x="14.3724%" y="581" width="0.0608%" height="15" fill="rgb(241,173,43)" fg:x="16794" fg:w="71"/><text x="14.6224%" y="591.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="14.3869%" y="565" width="0.0462%" height="15" fill="rgb(215,190,9)" fg:x="16811" fg:w="54"/><text x="14.6369%" y="575.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (37 samples, 0.03%)</title><rect x="14.4477%" y="581" width="0.0317%" height="15" fill="rgb(242,101,16)" fg:x="16882" fg:w="37"/><text x="14.6977%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12 samples, 0.01%)</title><rect x="14.4691%" y="565" width="0.0103%" height="15" fill="rgb(223,190,21)" fg:x="16907" fg:w="12"/><text x="14.7191%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (12 samples, 0.01%)</title><rect x="14.4691%" y="549" width="0.0103%" height="15" fill="rgb(215,228,25)" fg:x="16907" fg:w="12"/><text x="14.7191%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (832 samples, 0.71%)</title><rect x="14.7395%" y="485" width="0.7120%" height="15" fill="rgb(225,36,22)" fg:x="17223" fg:w="832"/><text x="14.9895%" y="495.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,270 samples, 1.09%)</title><rect x="14.4794%" y="581" width="1.0869%" height="15" fill="rgb(251,106,46)" fg:x="16919" fg:w="1270"/><text x="14.7294%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,270 samples, 1.09%)</title><rect x="14.4794%" y="565" width="1.0869%" height="15" fill="rgb(208,90,1)" fg:x="16919" fg:w="1270"/><text x="14.7294%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1,270 samples, 1.09%)</title><rect x="14.4794%" y="549" width="1.0869%" height="15" fill="rgb(243,10,4)" fg:x="16919" fg:w="1270"/><text x="14.7294%" y="559.50"></text></g><g><title>__rg_alloc (1,270 samples, 1.09%)</title><rect x="14.4794%" y="533" width="1.0869%" height="15" fill="rgb(212,137,27)" fg:x="16919" fg:w="1270"/><text x="14.7294%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,270 samples, 1.09%)</title><rect x="14.4794%" y="517" width="1.0869%" height="15" fill="rgb(231,220,49)" fg:x="16919" fg:w="1270"/><text x="14.7294%" y="527.50"></text></g><g><title>sn_rust_alloc (1,270 samples, 1.09%)</title><rect x="14.4794%" y="501" width="1.0869%" height="15" fill="rgb(237,96,20)" fg:x="16919" fg:w="1270"/><text x="14.7294%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (134 samples, 0.11%)</title><rect x="15.4516%" y="485" width="0.1147%" height="15" fill="rgb(239,229,30)" fg:x="18055" fg:w="134"/><text x="15.7016%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,344 samples, 1.15%)</title><rect x="14.4332%" y="597" width="1.1502%" height="15" fill="rgb(219,65,33)" fg:x="16865" fg:w="1344"/><text x="14.6832%" y="607.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (20 samples, 0.02%)</title><rect x="15.5662%" y="581" width="0.0171%" height="15" fill="rgb(243,134,7)" fg:x="18189" fg:w="20"/><text x="15.8162%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12 samples, 0.01%)</title><rect x="15.6082%" y="581" width="0.0103%" height="15" fill="rgb(216,177,54)" fg:x="18238" fg:w="12"/><text x="15.8582%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (12 samples, 0.01%)</title><rect x="15.6082%" y="565" width="0.0103%" height="15" fill="rgb(211,160,20)" fg:x="18238" fg:w="12"/><text x="15.8582%" y="575.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (3,512 samples, 3.01%)</title><rect x="12.6437%" y="933" width="3.0056%" height="15" fill="rgb(239,85,39)" fg:x="14774" fg:w="3512"/><text x="12.8937%" y="943.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (3,512 samples, 3.01%)</title><rect x="12.6437%" y="917" width="3.0056%" height="15" fill="rgb(232,125,22)" fg:x="14774" fg:w="3512"/><text x="12.8937%" y="927.50">tre..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (3,512 samples, 3.01%)</title><rect x="12.6437%" y="901" width="3.0056%" height="15" fill="rgb(244,57,34)" fg:x="14774" fg:w="3512"/><text x="12.8937%" y="911.50">tre..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (3,512 samples, 3.01%)</title><rect x="12.6437%" y="885" width="3.0056%" height="15" fill="rgb(214,203,32)" fg:x="14774" fg:w="3512"/><text x="12.8937%" y="895.50">tre..</text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (1,998 samples, 1.71%)</title><rect x="13.9394%" y="869" width="1.7099%" height="15" fill="rgb(207,58,43)" fg:x="16288" fg:w="1998"/><text x="14.1894%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (1,577 samples, 1.35%)</title><rect x="14.2997%" y="853" width="1.3496%" height="15" fill="rgb(215,193,15)" fg:x="16709" fg:w="1577"/><text x="14.5497%" y="863.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,577 samples, 1.35%)</title><rect x="14.2997%" y="837" width="1.3496%" height="15" fill="rgb(232,15,44)" fg:x="16709" fg:w="1577"/><text x="14.5497%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,577 samples, 1.35%)</title><rect x="14.2997%" y="821" width="1.3496%" height="15" fill="rgb(212,3,48)" fg:x="16709" fg:w="1577"/><text x="14.5497%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,554 samples, 1.33%)</title><rect x="14.3193%" y="805" width="1.3299%" height="15" fill="rgb(218,128,7)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,554 samples, 1.33%)</title><rect x="14.3193%" y="789" width="1.3299%" height="15" fill="rgb(226,216,39)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,554 samples, 1.33%)</title><rect x="14.3193%" y="773" width="1.3299%" height="15" fill="rgb(243,47,51)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,554 samples, 1.33%)</title><rect x="14.3193%" y="757" width="1.3299%" height="15" fill="rgb(241,183,40)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,554 samples, 1.33%)</title><rect x="14.3193%" y="741" width="1.3299%" height="15" fill="rgb(231,217,32)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="751.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,554 samples, 1.33%)</title><rect x="14.3193%" y="725" width="1.3299%" height="15" fill="rgb(229,61,38)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,554 samples, 1.33%)</title><rect x="14.3193%" y="709" width="1.3299%" height="15" fill="rgb(225,210,5)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,554 samples, 1.33%)</title><rect x="14.3193%" y="693" width="1.3299%" height="15" fill="rgb(231,79,45)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,554 samples, 1.33%)</title><rect x="14.3193%" y="677" width="1.3299%" height="15" fill="rgb(224,100,7)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,554 samples, 1.33%)</title><rect x="14.3193%" y="661" width="1.3299%" height="15" fill="rgb(241,198,18)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,554 samples, 1.33%)</title><rect x="14.3193%" y="645" width="1.3299%" height="15" fill="rgb(252,97,53)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,554 samples, 1.33%)</title><rect x="14.3193%" y="629" width="1.3299%" height="15" fill="rgb(220,88,7)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,554 samples, 1.33%)</title><rect x="14.3193%" y="613" width="1.3299%" height="15" fill="rgb(213,176,14)" fg:x="16732" fg:w="1554"/><text x="14.5693%" y="623.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (77 samples, 0.07%)</title><rect x="15.5834%" y="597" width="0.0659%" height="15" fill="rgb(246,73,7)" fg:x="18209" fg:w="77"/><text x="15.8334%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (36 samples, 0.03%)</title><rect x="15.6184%" y="581" width="0.0308%" height="15" fill="rgb(245,64,36)" fg:x="18250" fg:w="36"/><text x="15.8684%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (36 samples, 0.03%)</title><rect x="15.6184%" y="565" width="0.0308%" height="15" fill="rgb(245,80,10)" fg:x="18250" fg:w="36"/><text x="15.8684%" y="575.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (4,264 samples, 3.65%)</title><rect x="12.0540%" y="1077" width="3.6492%" height="15" fill="rgb(232,107,50)" fg:x="14085" fg:w="4264"/><text x="12.3040%" y="1087.50">&lt;tre..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (4,264 samples, 3.65%)</title><rect x="12.0540%" y="1061" width="3.6492%" height="15" fill="rgb(253,3,0)" fg:x="14085" fg:w="4264"/><text x="12.3040%" y="1071.50">trem..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (4,264 samples, 3.65%)</title><rect x="12.0540%" y="1045" width="3.6492%" height="15" fill="rgb(212,99,53)" fg:x="14085" fg:w="4264"/><text x="12.3040%" y="1055.50">&lt;tre..</text></g><g><title>tremor_script::script::Script::run (4,264 samples, 3.65%)</title><rect x="12.0540%" y="1029" width="3.6492%" height="15" fill="rgb(249,111,54)" fg:x="14085" fg:w="4264"/><text x="12.3040%" y="1039.50">trem..</text></g><g><title>tremor_script::ast::Script::run (4,264 samples, 3.65%)</title><rect x="12.0540%" y="1013" width="3.6492%" height="15" fill="rgb(249,55,30)" fg:x="14085" fg:w="4264"/><text x="12.3040%" y="1023.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,264 samples, 3.65%)</title><rect x="12.0540%" y="997" width="3.6492%" height="15" fill="rgb(237,47,42)" fg:x="14085" fg:w="4264"/><text x="12.3040%" y="1007.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (3,575 samples, 3.06%)</title><rect x="12.6437%" y="981" width="3.0595%" height="15" fill="rgb(211,20,18)" fg:x="14774" fg:w="3575"/><text x="12.8937%" y="991.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (3,575 samples, 3.06%)</title><rect x="12.6437%" y="965" width="3.0595%" height="15" fill="rgb(231,203,46)" fg:x="14774" fg:w="3575"/><text x="12.8937%" y="975.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (3,575 samples, 3.06%)</title><rect x="12.6437%" y="949" width="3.0595%" height="15" fill="rgb(237,142,3)" fg:x="14774" fg:w="3575"/><text x="12.8937%" y="959.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (63 samples, 0.05%)</title><rect x="15.6493%" y="933" width="0.0539%" height="15" fill="rgb(241,107,1)" fg:x="18286" fg:w="63"/><text x="15.8993%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (63 samples, 0.05%)</title><rect x="15.6493%" y="917" width="0.0539%" height="15" fill="rgb(229,83,13)" fg:x="18286" fg:w="63"/><text x="15.8993%" y="927.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.14%)</title><rect x="15.7211%" y="1077" width="0.1378%" height="15" fill="rgb(241,91,40)" fg:x="18370" fg:w="161"/><text x="15.9711%" y="1087.50"></text></g><g><title>__clock_gettime (44 samples, 0.04%)</title><rect x="15.8589%" y="1077" width="0.0377%" height="15" fill="rgb(225,3,45)" fg:x="18531" fg:w="44"/><text x="16.1089%" y="1087.50"></text></g><g><title>__vdso_clock_gettime (34 samples, 0.03%)</title><rect x="15.8992%" y="1077" width="0.0291%" height="15" fill="rgb(244,223,14)" fg:x="18578" fg:w="34"/><text x="16.1492%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (37 samples, 0.03%)</title><rect x="15.9368%" y="1077" width="0.0317%" height="15" fill="rgb(224,124,37)" fg:x="18622" fg:w="37"/><text x="16.1868%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (41 samples, 0.04%)</title><rect x="15.9762%" y="1077" width="0.0351%" height="15" fill="rgb(251,171,30)" fg:x="18668" fg:w="41"/><text x="16.2262%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (14 samples, 0.01%)</title><rect x="16.0130%" y="1077" width="0.0120%" height="15" fill="rgb(236,46,54)" fg:x="18711" fg:w="14"/><text x="16.2630%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (66 samples, 0.06%)</title><rect x="16.0250%" y="1077" width="0.0565%" height="15" fill="rgb(245,213,5)" fg:x="18725" fg:w="66"/><text x="16.2750%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (42 samples, 0.04%)</title><rect x="16.0874%" y="1077" width="0.0359%" height="15" fill="rgb(230,144,27)" fg:x="18798" fg:w="42"/><text x="16.3374%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (14 samples, 0.01%)</title><rect x="16.1114%" y="1061" width="0.0120%" height="15" fill="rgb(220,86,6)" fg:x="18826" fg:w="14"/><text x="16.3614%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.01%)</title><rect x="16.1114%" y="1045" width="0.0120%" height="15" fill="rgb(240,20,13)" fg:x="18826" fg:w="14"/><text x="16.3614%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.01%)</title><rect x="16.1114%" y="1029" width="0.0120%" height="15" fill="rgb(217,89,34)" fg:x="18826" fg:w="14"/><text x="16.3614%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.01%)</title><rect x="16.1114%" y="1013" width="0.0120%" height="15" fill="rgb(229,13,5)" fg:x="18826" fg:w="14"/><text x="16.3614%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.01%)</title><rect x="16.1114%" y="997" width="0.0120%" height="15" fill="rgb(244,67,35)" fg:x="18826" fg:w="14"/><text x="16.3614%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="16.1311%" y="1029" width="0.0214%" height="15" fill="rgb(221,40,2)" fg:x="18849" fg:w="25"/><text x="16.3811%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="16.1311%" y="1013" width="0.0214%" height="15" fill="rgb(237,157,21)" fg:x="18849" fg:w="25"/><text x="16.3811%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (25 samples, 0.02%)</title><rect x="16.1311%" y="997" width="0.0214%" height="15" fill="rgb(222,94,11)" fg:x="18849" fg:w="25"/><text x="16.3811%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (25 samples, 0.02%)</title><rect x="16.1311%" y="981" width="0.0214%" height="15" fill="rgb(249,113,6)" fg:x="18849" fg:w="25"/><text x="16.3811%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="16.1311%" y="965" width="0.0214%" height="15" fill="rgb(238,137,36)" fg:x="18849" fg:w="25"/><text x="16.3811%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (34 samples, 0.03%)</title><rect x="16.1251%" y="1077" width="0.0291%" height="15" fill="rgb(210,102,26)" fg:x="18842" fg:w="34"/><text x="16.3751%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (27 samples, 0.02%)</title><rect x="16.1311%" y="1061" width="0.0231%" height="15" fill="rgb(218,30,30)" fg:x="18849" fg:w="27"/><text x="16.3811%" y="1071.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="16.1311%" y="1045" width="0.0231%" height="15" fill="rgb(214,67,26)" fg:x="18849" fg:w="27"/><text x="16.3811%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (13 samples, 0.01%)</title><rect x="16.1550%" y="1077" width="0.0111%" height="15" fill="rgb(251,9,53)" fg:x="18877" fg:w="13"/><text x="16.4050%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="16.1559%" y="1061" width="0.0103%" height="15" fill="rgb(228,204,25)" fg:x="18878" fg:w="12"/><text x="16.4059%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (12 samples, 0.01%)</title><rect x="16.1559%" y="1045" width="0.0103%" height="15" fill="rgb(207,153,8)" fg:x="18878" fg:w="12"/><text x="16.4059%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="16.1559%" y="1029" width="0.0103%" height="15" fill="rgb(242,9,16)" fg:x="18878" fg:w="12"/><text x="16.4059%" y="1039.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (34 samples, 0.03%)</title><rect x="16.1730%" y="1077" width="0.0291%" height="15" fill="rgb(217,211,10)" fg:x="18898" fg:w="34"/><text x="16.4230%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (27 samples, 0.02%)</title><rect x="16.2021%" y="1077" width="0.0231%" height="15" fill="rgb(219,228,52)" fg:x="18932" fg:w="27"/><text x="16.4521%" y="1087.50"></text></g><g><title>async_executor::steal (114 samples, 0.10%)</title><rect x="16.2252%" y="1077" width="0.0976%" height="15" fill="rgb(231,92,29)" fg:x="18959" fg:w="114"/><text x="16.4752%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (346 samples, 0.30%)</title><rect x="16.5128%" y="725" width="0.2961%" height="15" fill="rgb(232,8,23)" fg:x="19295" fg:w="346"/><text x="16.7628%" y="735.50"></text></g><g><title>[libc-2.31.so] (298 samples, 0.26%)</title><rect x="16.5538%" y="709" width="0.2550%" height="15" fill="rgb(216,211,34)" fg:x="19343" fg:w="298"/><text x="16.8038%" y="719.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.08%)</title><rect x="16.8243%" y="709" width="0.0839%" height="15" fill="rgb(236,151,0)" fg:x="19659" fg:w="98"/><text x="17.0743%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (465 samples, 0.40%)</title><rect x="17.0194%" y="693" width="0.3979%" height="15" fill="rgb(209,168,3)" fg:x="19887" fg:w="465"/><text x="17.2694%" y="703.50"></text></g><g><title>[libc-2.31.so] (133 samples, 0.11%)</title><rect x="17.4268%" y="677" width="0.1138%" height="15" fill="rgb(208,129,28)" fg:x="20363" fg:w="133"/><text x="17.6768%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (258 samples, 0.22%)</title><rect x="17.4174%" y="693" width="0.2208%" height="15" fill="rgb(229,78,22)" fg:x="20352" fg:w="258"/><text x="17.6674%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (114 samples, 0.10%)</title><rect x="17.5406%" y="677" width="0.0976%" height="15" fill="rgb(228,187,13)" fg:x="20496" fg:w="114"/><text x="17.7906%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (99 samples, 0.08%)</title><rect x="17.6381%" y="661" width="0.0847%" height="15" fill="rgb(240,119,24)" fg:x="20610" fg:w="99"/><text x="17.8881%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (93 samples, 0.08%)</title><rect x="17.6433%" y="645" width="0.0796%" height="15" fill="rgb(209,194,42)" fg:x="20616" fg:w="93"/><text x="17.8933%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (93 samples, 0.08%)</title><rect x="17.6433%" y="629" width="0.0796%" height="15" fill="rgb(247,200,46)" fg:x="20616" fg:w="93"/><text x="17.8933%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="17.7485%" y="613" width="0.0120%" height="15" fill="rgb(218,76,16)" fg:x="20739" fg:w="14"/><text x="17.9985%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="17.7485%" y="597" width="0.0120%" height="15" fill="rgb(225,21,48)" fg:x="20739" fg:w="14"/><text x="17.9985%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (14 samples, 0.01%)</title><rect x="17.7485%" y="581" width="0.0120%" height="15" fill="rgb(239,223,50)" fg:x="20739" fg:w="14"/><text x="17.9985%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,531 samples, 2.17%)</title><rect x="17.7272%" y="645" width="2.1660%" height="15" fill="rgb(244,45,21)" fg:x="20714" fg:w="2531"/><text x="17.9772%" y="655.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,521 samples, 2.16%)</title><rect x="17.7357%" y="629" width="2.1575%" height="15" fill="rgb(232,33,43)" fg:x="20724" fg:w="2521"/><text x="17.9857%" y="639.50">a..</text></g><g><title>std::panic::catch_unwind (2,492 samples, 2.13%)</title><rect x="17.7605%" y="613" width="2.1327%" height="15" fill="rgb(209,8,3)" fg:x="20753" fg:w="2492"/><text x="18.0105%" y="623.50">s..</text></g><g><title>std::panicking::try (2,492 samples, 2.13%)</title><rect x="17.7605%" y="597" width="2.1327%" height="15" fill="rgb(214,25,53)" fg:x="20753" fg:w="2492"/><text x="18.0105%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (2,492 samples, 2.13%)</title><rect x="17.7605%" y="581" width="2.1327%" height="15" fill="rgb(254,186,54)" fg:x="20753" fg:w="2492"/><text x="18.0105%" y="591.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,539 samples, 2.17%)</title><rect x="17.7229%" y="661" width="2.1729%" height="15" fill="rgb(208,174,49)" fg:x="20709" fg:w="2539"/><text x="17.9729%" y="671.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,713 samples, 2.32%)</title><rect x="17.6381%" y="693" width="2.3218%" height="15" fill="rgb(233,191,51)" fg:x="20610" fg:w="2713"/><text x="17.8881%" y="703.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,713 samples, 2.32%)</title><rect x="17.6381%" y="677" width="2.3218%" height="15" fill="rgb(222,134,10)" fg:x="20610" fg:w="2713"/><text x="17.8881%" y="687.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (75 samples, 0.06%)</title><rect x="19.8958%" y="661" width="0.0642%" height="15" fill="rgb(230,226,20)" fg:x="23248" fg:w="75"/><text x="20.1458%" y="671.50"></text></g><g><title>[libc-2.31.so] (351 samples, 0.30%)</title><rect x="19.9599%" y="693" width="0.3004%" height="15" fill="rgb(251,111,25)" fg:x="23323" fg:w="351"/><text x="20.2099%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (24 samples, 0.02%)</title><rect x="20.2603%" y="693" width="0.0205%" height="15" fill="rgb(224,40,46)" fg:x="23674" fg:w="24"/><text x="20.5103%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (16 samples, 0.01%)</title><rect x="20.2843%" y="645" width="0.0137%" height="15" fill="rgb(236,108,47)" fg:x="23702" fg:w="16"/><text x="20.5343%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (13 samples, 0.01%)</title><rect x="20.2869%" y="629" width="0.0111%" height="15" fill="rgb(234,93,0)" fg:x="23705" fg:w="13"/><text x="20.5369%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (13 samples, 0.01%)</title><rect x="20.2869%" y="613" width="0.0111%" height="15" fill="rgb(224,213,32)" fg:x="23705" fg:w="13"/><text x="20.5369%" y="623.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="20.2869%" y="597" width="0.0111%" height="15" fill="rgb(251,11,48)" fg:x="23705" fg:w="13"/><text x="20.5369%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="20.2869%" y="581" width="0.0111%" height="15" fill="rgb(236,173,5)" fg:x="23705" fg:w="13"/><text x="20.5369%" y="591.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="20.2980%" y="645" width="0.0197%" height="15" fill="rgb(230,95,12)" fg:x="23718" fg:w="23"/><text x="20.5480%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="20.2809%" y="693" width="0.0402%" height="15" fill="rgb(232,209,1)" fg:x="23698" fg:w="47"/><text x="20.5309%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="20.2809%" y="677" width="0.0402%" height="15" fill="rgb(232,6,1)" fg:x="23698" fg:w="47"/><text x="20.5309%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="20.2809%" y="661" width="0.0402%" height="15" fill="rgb(210,224,50)" fg:x="23698" fg:w="47"/><text x="20.5309%" y="671.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.05%)</title><rect x="20.5137%" y="677" width="0.0539%" height="15" fill="rgb(228,127,35)" fg:x="23970" fg:w="63"/><text x="20.7637%" y="687.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.12%)</title><rect x="20.5890%" y="597" width="0.1172%" height="15" fill="rgb(245,102,45)" fg:x="24058" fg:w="137"/><text x="20.8390%" y="607.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="20.7113%" y="581" width="0.0796%" height="15" fill="rgb(214,1,49)" fg:x="24201" fg:w="93"/><text x="20.9613%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (34 samples, 0.03%)</title><rect x="20.8842%" y="469" width="0.0291%" height="15" fill="rgb(226,163,40)" fg:x="24403" fg:w="34"/><text x="21.1342%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (417 samples, 0.36%)</title><rect x="20.5676%" y="677" width="0.3569%" height="15" fill="rgb(239,212,28)" fg:x="24033" fg:w="417"/><text x="20.8176%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (403 samples, 0.34%)</title><rect x="20.5796%" y="661" width="0.3449%" height="15" fill="rgb(220,20,13)" fg:x="24047" fg:w="403"/><text x="20.8296%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (403 samples, 0.34%)</title><rect x="20.5796%" y="645" width="0.3449%" height="15" fill="rgb(210,164,35)" fg:x="24047" fg:w="403"/><text x="20.8296%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (403 samples, 0.34%)</title><rect x="20.5796%" y="629" width="0.3449%" height="15" fill="rgb(248,109,41)" fg:x="24047" fg:w="403"/><text x="20.8296%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (403 samples, 0.34%)</title><rect x="20.5796%" y="613" width="0.3449%" height="15" fill="rgb(238,23,50)" fg:x="24047" fg:w="403"/><text x="20.8296%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (255 samples, 0.22%)</title><rect x="20.7062%" y="597" width="0.2182%" height="15" fill="rgb(211,48,49)" fg:x="24195" fg:w="255"/><text x="20.9562%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (156 samples, 0.13%)</title><rect x="20.7909%" y="581" width="0.1335%" height="15" fill="rgb(223,36,21)" fg:x="24294" fg:w="156"/><text x="21.0409%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (156 samples, 0.13%)</title><rect x="20.7909%" y="565" width="0.1335%" height="15" fill="rgb(207,123,46)" fg:x="24294" fg:w="156"/><text x="21.0409%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (156 samples, 0.13%)</title><rect x="20.7909%" y="549" width="0.1335%" height="15" fill="rgb(240,218,32)" fg:x="24294" fg:w="156"/><text x="21.0409%" y="559.50"></text></g><g><title>alloc::alloc::alloc (153 samples, 0.13%)</title><rect x="20.7935%" y="533" width="0.1309%" height="15" fill="rgb(252,5,43)" fg:x="24297" fg:w="153"/><text x="21.0435%" y="543.50"></text></g><g><title>__rg_alloc (153 samples, 0.13%)</title><rect x="20.7935%" y="517" width="0.1309%" height="15" fill="rgb(252,84,19)" fg:x="24297" fg:w="153"/><text x="21.0435%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (153 samples, 0.13%)</title><rect x="20.7935%" y="501" width="0.1309%" height="15" fill="rgb(243,152,39)" fg:x="24297" fg:w="153"/><text x="21.0435%" y="511.50"></text></g><g><title>sn_rust_alloc (150 samples, 0.13%)</title><rect x="20.7961%" y="485" width="0.1284%" height="15" fill="rgb(234,160,15)" fg:x="24300" fg:w="150"/><text x="21.0461%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="20.9133%" y="469" width="0.0111%" height="15" fill="rgb(237,34,20)" fg:x="24437" fg:w="13"/><text x="21.1633%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,699 samples, 4.02%)</title><rect x="16.9081%" y="709" width="4.0214%" height="15" fill="rgb(229,97,13)" fg:x="19757" fg:w="4699"/><text x="17.1581%" y="719.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (711 samples, 0.61%)</title><rect x="20.3211%" y="693" width="0.6085%" height="15" fill="rgb(234,71,50)" fg:x="23745" fg:w="711"/><text x="20.5711%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (14 samples, 0.01%)</title><rect x="21.0656%" y="677" width="0.0120%" height="15" fill="rgb(253,155,4)" fg:x="24615" fg:w="14"/><text x="21.3156%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (14 samples, 0.01%)</title><rect x="21.0656%" y="661" width="0.0120%" height="15" fill="rgb(222,185,37)" fg:x="24615" fg:w="14"/><text x="21.3156%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="21.0656%" y="645" width="0.0120%" height="15" fill="rgb(251,177,13)" fg:x="24615" fg:w="14"/><text x="21.3156%" y="655.50"></text></g><g><title>sn_rust_dealloc (104 samples, 0.09%)</title><rect x="21.0845%" y="613" width="0.0890%" height="15" fill="rgb(250,179,40)" fg:x="24637" fg:w="104"/><text x="21.3345%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,095 samples, 4.36%)</title><rect x="16.8149%" y="725" width="4.3603%" height="15" fill="rgb(242,44,2)" fg:x="19648" fg:w="5095"/><text x="17.0649%" y="735.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (287 samples, 0.25%)</title><rect x="20.9296%" y="709" width="0.2456%" height="15" fill="rgb(216,177,13)" fg:x="24456" fg:w="287"/><text x="21.1796%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (128 samples, 0.11%)</title><rect x="21.0656%" y="693" width="0.1095%" height="15" fill="rgb(216,106,43)" fg:x="24615" fg:w="128"/><text x="21.3156%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (114 samples, 0.10%)</title><rect x="21.0776%" y="677" width="0.0976%" height="15" fill="rgb(216,183,2)" fg:x="24629" fg:w="114"/><text x="21.3276%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (114 samples, 0.10%)</title><rect x="21.0776%" y="661" width="0.0976%" height="15" fill="rgb(249,75,3)" fg:x="24629" fg:w="114"/><text x="21.3276%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (114 samples, 0.10%)</title><rect x="21.0776%" y="645" width="0.0976%" height="15" fill="rgb(219,67,39)" fg:x="24629" fg:w="114"/><text x="21.3276%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (114 samples, 0.10%)</title><rect x="21.0776%" y="629" width="0.0976%" height="15" fill="rgb(253,228,2)" fg:x="24629" fg:w="114"/><text x="21.3276%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (50 samples, 0.04%)</title><rect x="21.1983%" y="613" width="0.0428%" height="15" fill="rgb(235,138,27)" fg:x="24770" fg:w="50"/><text x="21.4483%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="21.2043%" y="597" width="0.0368%" height="15" fill="rgb(236,97,51)" fg:x="24777" fg:w="43"/><text x="21.4543%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="21.2043%" y="581" width="0.0368%" height="15" fill="rgb(240,80,30)" fg:x="24777" fg:w="43"/><text x="21.4543%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.03%)</title><rect x="21.2137%" y="565" width="0.0274%" height="15" fill="rgb(230,178,19)" fg:x="24788" fg:w="32"/><text x="21.4637%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="21.2137%" y="549" width="0.0274%" height="15" fill="rgb(210,190,27)" fg:x="24788" fg:w="32"/><text x="21.4637%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="21.2137%" y="533" width="0.0274%" height="15" fill="rgb(222,107,31)" fg:x="24788" fg:w="32"/><text x="21.4637%" y="543.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="21.2154%" y="517" width="0.0257%" height="15" fill="rgb(216,127,34)" fg:x="24790" fg:w="30"/><text x="21.4654%" y="527.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="21.2154%" y="501" width="0.0257%" height="15" fill="rgb(234,116,52)" fg:x="24790" fg:w="30"/><text x="21.4654%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="21.2154%" y="485" width="0.0257%" height="15" fill="rgb(222,124,15)" fg:x="24790" fg:w="30"/><text x="21.4654%" y="495.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="21.2171%" y="469" width="0.0240%" height="15" fill="rgb(231,179,28)" fg:x="24792" fg:w="28"/><text x="21.4671%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (67 samples, 0.06%)</title><rect x="21.1949%" y="693" width="0.0573%" height="15" fill="rgb(226,93,45)" fg:x="24766" fg:w="67"/><text x="21.4449%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (64 samples, 0.05%)</title><rect x="21.1974%" y="677" width="0.0548%" height="15" fill="rgb(215,8,51)" fg:x="24769" fg:w="64"/><text x="21.4474%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (64 samples, 0.05%)</title><rect x="21.1974%" y="661" width="0.0548%" height="15" fill="rgb(223,106,5)" fg:x="24769" fg:w="64"/><text x="21.4474%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (63 samples, 0.05%)</title><rect x="21.1983%" y="645" width="0.0539%" height="15" fill="rgb(250,191,5)" fg:x="24770" fg:w="63"/><text x="21.4483%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (63 samples, 0.05%)</title><rect x="21.1983%" y="629" width="0.0539%" height="15" fill="rgb(242,132,44)" fg:x="24770" fg:w="63"/><text x="21.4483%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (13 samples, 0.01%)</title><rect x="21.2411%" y="613" width="0.0111%" height="15" fill="rgb(251,152,29)" fg:x="24820" fg:w="13"/><text x="21.4911%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (32 samples, 0.03%)</title><rect x="21.4653%" y="613" width="0.0274%" height="15" fill="rgb(218,179,5)" fg:x="25082" fg:w="32"/><text x="21.7153%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (32 samples, 0.03%)</title><rect x="21.4653%" y="597" width="0.0274%" height="15" fill="rgb(227,67,19)" fg:x="25082" fg:w="32"/><text x="21.7153%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="21.4704%" y="581" width="0.0223%" height="15" fill="rgb(233,119,31)" fg:x="25088" fg:w="26"/><text x="21.7204%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="21.4739%" y="565" width="0.0188%" height="15" fill="rgb(241,120,22)" fg:x="25092" fg:w="22"/><text x="21.7239%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="21.4739%" y="549" width="0.0188%" height="15" fill="rgb(224,102,30)" fg:x="25092" fg:w="22"/><text x="21.7239%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="21.4739%" y="533" width="0.0188%" height="15" fill="rgb(210,164,37)" fg:x="25092" fg:w="22"/><text x="21.7239%" y="543.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="21.4739%" y="517" width="0.0188%" height="15" fill="rgb(226,191,16)" fg:x="25092" fg:w="22"/><text x="21.7239%" y="527.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="21.4739%" y="501" width="0.0188%" height="15" fill="rgb(214,40,45)" fg:x="25092" fg:w="22"/><text x="21.7239%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="21.4739%" y="485" width="0.0188%" height="15" fill="rgb(244,29,26)" fg:x="25092" fg:w="22"/><text x="21.7239%" y="495.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="21.4781%" y="469" width="0.0145%" height="15" fill="rgb(216,16,5)" fg:x="25097" fg:w="17"/><text x="21.7281%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (47 samples, 0.04%)</title><rect x="21.4542%" y="661" width="0.0402%" height="15" fill="rgb(249,76,35)" fg:x="25069" fg:w="47"/><text x="21.7042%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (40 samples, 0.03%)</title><rect x="21.4602%" y="645" width="0.0342%" height="15" fill="rgb(207,11,44)" fg:x="25076" fg:w="40"/><text x="21.7102%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (40 samples, 0.03%)</title><rect x="21.4602%" y="629" width="0.0342%" height="15" fill="rgb(228,190,49)" fg:x="25076" fg:w="40"/><text x="21.7102%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (15 samples, 0.01%)</title><rect x="21.5158%" y="613" width="0.0128%" height="15" fill="rgb(214,173,12)" fg:x="25141" fg:w="15"/><text x="21.7658%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="21.5115%" y="645" width="0.0214%" height="15" fill="rgb(218,26,35)" fg:x="25136" fg:w="25"/><text x="21.7615%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (25 samples, 0.02%)</title><rect x="21.5115%" y="629" width="0.0214%" height="15" fill="rgb(220,200,19)" fg:x="25136" fg:w="25"/><text x="21.7615%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (12 samples, 0.01%)</title><rect x="21.5372%" y="613" width="0.0103%" height="15" fill="rgb(239,95,49)" fg:x="25166" fg:w="12"/><text x="21.7872%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (12 samples, 0.01%)</title><rect x="21.5372%" y="597" width="0.0103%" height="15" fill="rgb(235,85,53)" fg:x="25166" fg:w="12"/><text x="21.7872%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="21.5329%" y="645" width="0.0188%" height="15" fill="rgb(233,133,31)" fg:x="25161" fg:w="22"/><text x="21.7829%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (22 samples, 0.02%)</title><rect x="21.5329%" y="629" width="0.0188%" height="15" fill="rgb(218,25,20)" fg:x="25161" fg:w="22"/><text x="21.7829%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="21.5517%" y="645" width="0.0103%" height="15" fill="rgb(252,210,38)" fg:x="25183" fg:w="12"/><text x="21.8017%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="21.5517%" y="629" width="0.0103%" height="15" fill="rgb(242,134,21)" fg:x="25183" fg:w="12"/><text x="21.8017%" y="639.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="21.5731%" y="533" width="0.0154%" height="15" fill="rgb(213,28,48)" fg:x="25208" fg:w="18"/><text x="21.8231%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (484 samples, 0.41%)</title><rect x="21.1752%" y="725" width="0.4142%" height="15" fill="rgb(250,196,2)" fg:x="24743" fg:w="484"/><text x="21.4252%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (464 samples, 0.40%)</title><rect x="21.1923%" y="709" width="0.3971%" height="15" fill="rgb(227,5,17)" fg:x="24763" fg:w="464"/><text x="21.4423%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (394 samples, 0.34%)</title><rect x="21.2522%" y="693" width="0.3372%" height="15" fill="rgb(221,226,24)" fg:x="24833" fg:w="394"/><text x="21.5022%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (158 samples, 0.14%)</title><rect x="21.4542%" y="677" width="0.1352%" height="15" fill="rgb(211,5,48)" fg:x="25069" fg:w="158"/><text x="21.7042%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (111 samples, 0.09%)</title><rect x="21.4944%" y="661" width="0.0950%" height="15" fill="rgb(219,150,6)" fg:x="25116" fg:w="111"/><text x="21.7444%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (32 samples, 0.03%)</title><rect x="21.5620%" y="645" width="0.0274%" height="15" fill="rgb(251,46,16)" fg:x="25195" fg:w="32"/><text x="21.8120%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (32 samples, 0.03%)</title><rect x="21.5620%" y="629" width="0.0274%" height="15" fill="rgb(220,204,40)" fg:x="25195" fg:w="32"/><text x="21.8120%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="21.5620%" y="613" width="0.0274%" height="15" fill="rgb(211,85,2)" fg:x="25195" fg:w="32"/><text x="21.8120%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (30 samples, 0.03%)</title><rect x="21.5637%" y="597" width="0.0257%" height="15" fill="rgb(229,17,7)" fg:x="25197" fg:w="30"/><text x="21.8137%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (30 samples, 0.03%)</title><rect x="21.5637%" y="581" width="0.0257%" height="15" fill="rgb(239,72,28)" fg:x="25197" fg:w="30"/><text x="21.8137%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (30 samples, 0.03%)</title><rect x="21.5637%" y="565" width="0.0257%" height="15" fill="rgb(230,47,54)" fg:x="25197" fg:w="30"/><text x="21.8137%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (30 samples, 0.03%)</title><rect x="21.5637%" y="549" width="0.0257%" height="15" fill="rgb(214,50,8)" fg:x="25197" fg:w="30"/><text x="21.8137%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="21.5997%" y="709" width="0.0274%" height="15" fill="rgb(216,198,43)" fg:x="25239" fg:w="32"/><text x="21.8497%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (20 samples, 0.02%)</title><rect x="21.6099%" y="693" width="0.0171%" height="15" fill="rgb(234,20,35)" fg:x="25251" fg:w="20"/><text x="21.8599%" y="703.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (39 samples, 0.03%)</title><rect x="21.6861%" y="597" width="0.0334%" height="15" fill="rgb(254,45,19)" fg:x="25340" fg:w="39"/><text x="21.9361%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="21.6904%" y="581" width="0.0291%" height="15" fill="rgb(219,14,44)" fg:x="25345" fg:w="34"/><text x="21.9404%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="21.6904%" y="565" width="0.0291%" height="15" fill="rgb(217,220,26)" fg:x="25345" fg:w="34"/><text x="21.9404%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (26 samples, 0.02%)</title><rect x="21.6972%" y="549" width="0.0223%" height="15" fill="rgb(213,158,28)" fg:x="25353" fg:w="26"/><text x="21.9472%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="21.6972%" y="533" width="0.0223%" height="15" fill="rgb(252,51,52)" fg:x="25353" fg:w="26"/><text x="21.9472%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="21.6972%" y="517" width="0.0223%" height="15" fill="rgb(246,89,16)" fg:x="25353" fg:w="26"/><text x="21.9472%" y="527.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="21.6981%" y="501" width="0.0214%" height="15" fill="rgb(216,158,49)" fg:x="25354" fg:w="25"/><text x="21.9481%" y="511.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="21.6981%" y="485" width="0.0214%" height="15" fill="rgb(236,107,19)" fg:x="25354" fg:w="25"/><text x="21.9481%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="21.6981%" y="469" width="0.0214%" height="15" fill="rgb(228,185,30)" fg:x="25354" fg:w="25"/><text x="21.9481%" y="479.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.02%)</title><rect x="21.7015%" y="453" width="0.0180%" height="15" fill="rgb(246,134,8)" fg:x="25358" fg:w="21"/><text x="21.9515%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (20 samples, 0.02%)</title><rect x="22.0652%" y="533" width="0.0171%" height="15" fill="rgb(214,143,50)" fg:x="25783" fg:w="20"/><text x="22.3152%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (20 samples, 0.02%)</title><rect x="22.0652%" y="517" width="0.0171%" height="15" fill="rgb(228,75,8)" fg:x="25783" fg:w="20"/><text x="22.3152%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (60 samples, 0.05%)</title><rect x="22.0823%" y="533" width="0.0513%" height="15" fill="rgb(207,175,4)" fg:x="25803" fg:w="60"/><text x="22.3323%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (60 samples, 0.05%)</title><rect x="22.0823%" y="517" width="0.0513%" height="15" fill="rgb(205,108,24)" fg:x="25803" fg:w="60"/><text x="22.3323%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (98 samples, 0.08%)</title><rect x="22.0652%" y="549" width="0.0839%" height="15" fill="rgb(244,120,49)" fg:x="25783" fg:w="98"/><text x="22.3152%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (18 samples, 0.02%)</title><rect x="22.1337%" y="533" width="0.0154%" height="15" fill="rgb(223,47,38)" fg:x="25863" fg:w="18"/><text x="22.3837%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (553 samples, 0.47%)</title><rect x="21.6810%" y="677" width="0.4733%" height="15" fill="rgb(229,179,11)" fg:x="25334" fg:w="553"/><text x="21.9310%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (549 samples, 0.47%)</title><rect x="21.6844%" y="661" width="0.4698%" height="15" fill="rgb(231,122,1)" fg:x="25338" fg:w="549"/><text x="21.9344%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (547 samples, 0.47%)</title><rect x="21.6861%" y="645" width="0.4681%" height="15" fill="rgb(245,119,9)" fg:x="25340" fg:w="547"/><text x="21.9361%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (547 samples, 0.47%)</title><rect x="21.6861%" y="629" width="0.4681%" height="15" fill="rgb(241,163,25)" fg:x="25340" fg:w="547"/><text x="21.9361%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (547 samples, 0.47%)</title><rect x="21.6861%" y="613" width="0.4681%" height="15" fill="rgb(217,214,3)" fg:x="25340" fg:w="547"/><text x="21.9361%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (508 samples, 0.43%)</title><rect x="21.7195%" y="597" width="0.4347%" height="15" fill="rgb(240,86,28)" fg:x="25379" fg:w="508"/><text x="21.9695%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (116 samples, 0.10%)</title><rect x="22.0550%" y="581" width="0.0993%" height="15" fill="rgb(215,47,9)" fg:x="25771" fg:w="116"/><text x="22.3050%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (116 samples, 0.10%)</title><rect x="22.0550%" y="565" width="0.0993%" height="15" fill="rgb(252,25,45)" fg:x="25771" fg:w="116"/><text x="22.3050%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (33 samples, 0.03%)</title><rect x="22.2877%" y="597" width="0.0282%" height="15" fill="rgb(251,164,9)" fg:x="26043" fg:w="33"/><text x="22.5377%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="22.2877%" y="581" width="0.0282%" height="15" fill="rgb(233,194,0)" fg:x="26043" fg:w="33"/><text x="22.5377%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (29 samples, 0.02%)</title><rect x="22.2912%" y="565" width="0.0248%" height="15" fill="rgb(249,111,24)" fg:x="26047" fg:w="29"/><text x="22.5412%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.02%)</title><rect x="22.2963%" y="549" width="0.0197%" height="15" fill="rgb(250,223,3)" fg:x="26053" fg:w="23"/><text x="22.5463%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="22.2963%" y="533" width="0.0197%" height="15" fill="rgb(236,178,37)" fg:x="26053" fg:w="23"/><text x="22.5463%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="22.2963%" y="517" width="0.0197%" height="15" fill="rgb(241,158,50)" fg:x="26053" fg:w="23"/><text x="22.5463%" y="527.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="22.2963%" y="501" width="0.0197%" height="15" fill="rgb(213,121,41)" fg:x="26053" fg:w="23"/><text x="22.5463%" y="511.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="22.2963%" y="485" width="0.0197%" height="15" fill="rgb(240,92,3)" fg:x="26053" fg:w="23"/><text x="22.5463%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="22.2963%" y="469" width="0.0197%" height="15" fill="rgb(205,123,3)" fg:x="26053" fg:w="23"/><text x="22.5463%" y="479.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="22.2989%" y="453" width="0.0171%" height="15" fill="rgb(205,97,47)" fg:x="26056" fg:w="20"/><text x="22.5489%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (54 samples, 0.05%)</title><rect x="22.2749%" y="645" width="0.0462%" height="15" fill="rgb(247,152,14)" fg:x="26028" fg:w="54"/><text x="22.5249%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (49 samples, 0.04%)</title><rect x="22.2792%" y="629" width="0.0419%" height="15" fill="rgb(248,195,53)" fg:x="26033" fg:w="49"/><text x="22.5292%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (49 samples, 0.04%)</title><rect x="22.2792%" y="613" width="0.0419%" height="15" fill="rgb(226,201,16)" fg:x="26033" fg:w="49"/><text x="22.5292%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (23 samples, 0.02%)</title><rect x="22.3382%" y="597" width="0.0197%" height="15" fill="rgb(205,98,0)" fg:x="26102" fg:w="23"/><text x="22.5882%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (17 samples, 0.01%)</title><rect x="22.3434%" y="581" width="0.0145%" height="15" fill="rgb(214,191,48)" fg:x="26108" fg:w="17"/><text x="22.5934%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="22.3476%" y="565" width="0.0103%" height="15" fill="rgb(237,112,39)" fg:x="26113" fg:w="12"/><text x="22.5976%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="22.3476%" y="549" width="0.0103%" height="15" fill="rgb(247,203,27)" fg:x="26113" fg:w="12"/><text x="22.5976%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="22.3348%" y="629" width="0.0282%" height="15" fill="rgb(235,124,28)" fg:x="26098" fg:w="33"/><text x="22.5848%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (33 samples, 0.03%)</title><rect x="22.3348%" y="613" width="0.0282%" height="15" fill="rgb(208,207,46)" fg:x="26098" fg:w="33"/><text x="22.5848%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (20 samples, 0.02%)</title><rect x="22.3682%" y="597" width="0.0171%" height="15" fill="rgb(234,176,4)" fg:x="26137" fg:w="20"/><text x="22.6182%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (13 samples, 0.01%)</title><rect x="22.3742%" y="581" width="0.0111%" height="15" fill="rgb(230,133,28)" fg:x="26144" fg:w="13"/><text x="22.6242%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.03%)</title><rect x="22.3630%" y="629" width="0.0274%" height="15" fill="rgb(211,137,40)" fg:x="26131" fg:w="32"/><text x="22.6130%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (32 samples, 0.03%)</title><rect x="22.3630%" y="613" width="0.0274%" height="15" fill="rgb(254,35,13)" fg:x="26131" fg:w="32"/><text x="22.6130%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="22.3904%" y="629" width="0.0111%" height="15" fill="rgb(225,49,51)" fg:x="26163" fg:w="13"/><text x="22.6404%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (23 samples, 0.02%)</title><rect x="22.4101%" y="517" width="0.0197%" height="15" fill="rgb(251,10,15)" fg:x="26186" fg:w="23"/><text x="22.6601%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="22.4178%" y="501" width="0.0120%" height="15" fill="rgb(228,207,15)" fg:x="26195" fg:w="14"/><text x="22.6678%" y="511.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="22.4178%" y="485" width="0.0120%" height="15" fill="rgb(241,99,19)" fg:x="26195" fg:w="14"/><text x="22.6678%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="22.4178%" y="469" width="0.0120%" height="15" fill="rgb(207,104,49)" fg:x="26195" fg:w="14"/><text x="22.6678%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="22.4178%" y="453" width="0.0120%" height="15" fill="rgb(234,99,18)" fg:x="26195" fg:w="14"/><text x="22.6678%" y="463.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="22.4178%" y="437" width="0.0120%" height="15" fill="rgb(213,191,49)" fg:x="26195" fg:w="14"/><text x="22.6678%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="22.4178%" y="421" width="0.0120%" height="15" fill="rgb(210,226,19)" fg:x="26195" fg:w="14"/><text x="22.6678%" y="431.50"></text></g><g><title>sn_rust_dealloc (82 samples, 0.07%)</title><rect x="22.4298%" y="517" width="0.0702%" height="15" fill="rgb(229,97,18)" fg:x="26209" fg:w="82"/><text x="22.6798%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,065 samples, 0.91%)</title><rect x="21.5894%" y="725" width="0.9114%" height="15" fill="rgb(211,167,15)" fg:x="25227" fg:w="1065"/><text x="21.8394%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,021 samples, 0.87%)</title><rect x="21.6271%" y="709" width="0.8738%" height="15" fill="rgb(210,169,34)" fg:x="25271" fg:w="1021"/><text x="21.8771%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (963 samples, 0.82%)</title><rect x="21.6767%" y="693" width="0.8241%" height="15" fill="rgb(241,121,31)" fg:x="25329" fg:w="963"/><text x="21.9267%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (405 samples, 0.35%)</title><rect x="22.1542%" y="677" width="0.3466%" height="15" fill="rgb(232,40,11)" fg:x="25887" fg:w="405"/><text x="22.4042%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (267 samples, 0.23%)</title><rect x="22.2723%" y="661" width="0.2285%" height="15" fill="rgb(205,86,26)" fg:x="26025" fg:w="267"/><text x="22.5223%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (210 samples, 0.18%)</title><rect x="22.3211%" y="645" width="0.1797%" height="15" fill="rgb(231,126,28)" fg:x="26082" fg:w="210"/><text x="22.5711%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (116 samples, 0.10%)</title><rect x="22.4016%" y="629" width="0.0993%" height="15" fill="rgb(219,221,18)" fg:x="26176" fg:w="116"/><text x="22.6516%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (116 samples, 0.10%)</title><rect x="22.4016%" y="613" width="0.0993%" height="15" fill="rgb(211,40,0)" fg:x="26176" fg:w="116"/><text x="22.6516%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (116 samples, 0.10%)</title><rect x="22.4016%" y="597" width="0.0993%" height="15" fill="rgb(239,85,43)" fg:x="26176" fg:w="116"/><text x="22.6516%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (113 samples, 0.10%)</title><rect x="22.4041%" y="581" width="0.0967%" height="15" fill="rgb(231,55,21)" fg:x="26179" fg:w="113"/><text x="22.6541%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (111 samples, 0.09%)</title><rect x="22.4058%" y="565" width="0.0950%" height="15" fill="rgb(225,184,43)" fg:x="26181" fg:w="111"/><text x="22.6558%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (111 samples, 0.09%)</title><rect x="22.4058%" y="549" width="0.0950%" height="15" fill="rgb(251,158,41)" fg:x="26181" fg:w="111"/><text x="22.6558%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (111 samples, 0.09%)</title><rect x="22.4058%" y="533" width="0.0950%" height="15" fill="rgb(234,159,37)" fg:x="26181" fg:w="111"/><text x="22.6558%" y="543.50"></text></g><g><title>[libc-2.31.so] (860 samples, 0.74%)</title><rect x="22.5008%" y="725" width="0.7360%" height="15" fill="rgb(216,204,22)" fg:x="26292" fg:w="860"/><text x="22.7508%" y="735.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.06%)</title><rect x="23.2480%" y="565" width="0.0642%" height="15" fill="rgb(214,17,3)" fg:x="27165" fg:w="75"/><text x="23.4980%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (91 samples, 0.08%)</title><rect x="23.2411%" y="725" width="0.0779%" height="15" fill="rgb(212,111,17)" fg:x="27157" fg:w="91"/><text x="23.4911%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.08%)</title><rect x="23.2411%" y="709" width="0.0779%" height="15" fill="rgb(221,157,24)" fg:x="27157" fg:w="91"/><text x="23.4911%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (85 samples, 0.07%)</title><rect x="23.2462%" y="693" width="0.0727%" height="15" fill="rgb(252,16,13)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (85 samples, 0.07%)</title><rect x="23.2462%" y="677" width="0.0727%" height="15" fill="rgb(221,62,2)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (85 samples, 0.07%)</title><rect x="23.2462%" y="661" width="0.0727%" height="15" fill="rgb(247,87,22)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.07%)</title><rect x="23.2462%" y="645" width="0.0727%" height="15" fill="rgb(215,73,9)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (85 samples, 0.07%)</title><rect x="23.2462%" y="629" width="0.0727%" height="15" fill="rgb(207,175,33)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (85 samples, 0.07%)</title><rect x="23.2462%" y="613" width="0.0727%" height="15" fill="rgb(243,129,54)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="623.50"></text></g><g><title>__rg_dealloc (85 samples, 0.07%)</title><rect x="23.2462%" y="597" width="0.0727%" height="15" fill="rgb(227,119,45)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (85 samples, 0.07%)</title><rect x="23.2462%" y="581" width="0.0727%" height="15" fill="rgb(205,109,36)" fg:x="27163" fg:w="85"/><text x="23.4962%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="23.3190%" y="725" width="0.0188%" height="15" fill="rgb(205,6,39)" fg:x="27248" fg:w="22"/><text x="23.5690%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (22 samples, 0.02%)</title><rect x="23.3190%" y="709" width="0.0188%" height="15" fill="rgb(221,32,16)" fg:x="27248" fg:w="22"/><text x="23.5690%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="23.3609%" y="709" width="0.0205%" height="15" fill="rgb(228,144,50)" fg:x="27297" fg:w="24"/><text x="23.6109%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (41 samples, 0.04%)</title><rect x="23.3815%" y="709" width="0.0351%" height="15" fill="rgb(229,201,53)" fg:x="27321" fg:w="41"/><text x="23.6315%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (125 samples, 0.11%)</title><rect x="23.4165%" y="693" width="0.1070%" height="15" fill="rgb(249,153,27)" fg:x="27362" fg:w="125"/><text x="23.6665%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (45 samples, 0.04%)</title><rect x="23.5646%" y="661" width="0.0385%" height="15" fill="rgb(227,106,25)" fg:x="27535" fg:w="45"/><text x="23.8146%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (45 samples, 0.04%)</title><rect x="23.5646%" y="645" width="0.0385%" height="15" fill="rgb(230,65,29)" fg:x="27535" fg:w="45"/><text x="23.8146%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (44 samples, 0.04%)</title><rect x="23.5655%" y="629" width="0.0377%" height="15" fill="rgb(221,57,46)" fg:x="27536" fg:w="44"/><text x="23.8155%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (20 samples, 0.02%)</title><rect x="23.5860%" y="613" width="0.0171%" height="15" fill="rgb(229,161,17)" fg:x="27560" fg:w="20"/><text x="23.8360%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (20 samples, 0.02%)</title><rect x="23.5860%" y="597" width="0.0171%" height="15" fill="rgb(222,213,11)" fg:x="27560" fg:w="20"/><text x="23.8360%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (246 samples, 0.21%)</title><rect x="23.4165%" y="709" width="0.2105%" height="15" fill="rgb(235,35,13)" fg:x="27362" fg:w="246"/><text x="23.6665%" y="719.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (121 samples, 0.10%)</title><rect x="23.5235%" y="693" width="0.1036%" height="15" fill="rgb(233,158,34)" fg:x="27487" fg:w="121"/><text x="23.7735%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (121 samples, 0.10%)</title><rect x="23.5235%" y="677" width="0.1036%" height="15" fill="rgb(215,151,48)" fg:x="27487" fg:w="121"/><text x="23.7735%" y="687.50"></text></g><g><title>core::time::Duration::new (28 samples, 0.02%)</title><rect x="23.6031%" y="661" width="0.0240%" height="15" fill="rgb(229,84,14)" fg:x="27580" fg:w="28"/><text x="23.8531%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (998 samples, 0.85%)</title><rect x="23.3378%" y="725" width="0.8541%" height="15" fill="rgb(229,68,14)" fg:x="27270" fg:w="998"/><text x="23.5878%" y="735.50"></text></g><g><title>std::time::SystemTime::now (660 samples, 0.56%)</title><rect x="23.6271%" y="709" width="0.5648%" height="15" fill="rgb(243,106,26)" fg:x="27608" fg:w="660"/><text x="23.8771%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (660 samples, 0.56%)</title><rect x="23.6271%" y="693" width="0.5648%" height="15" fill="rgb(206,45,38)" fg:x="27608" fg:w="660"/><text x="23.8771%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (660 samples, 0.56%)</title><rect x="23.6271%" y="677" width="0.5648%" height="15" fill="rgb(226,6,15)" fg:x="27608" fg:w="660"/><text x="23.8771%" y="687.50"></text></g><g><title>__clock_gettime (537 samples, 0.46%)</title><rect x="23.7323%" y="661" width="0.4596%" height="15" fill="rgb(232,22,54)" fg:x="27731" fg:w="537"/><text x="23.9823%" y="671.50"></text></g><g><title>__vdso_clock_gettime (487 samples, 0.42%)</title><rect x="23.7751%" y="645" width="0.4168%" height="15" fill="rgb(229,222,32)" fg:x="27781" fg:w="487"/><text x="24.0251%" y="655.50"></text></g><g><title>[[vdso]] (441 samples, 0.38%)</title><rect x="23.8145%" y="629" width="0.3774%" height="15" fill="rgb(228,62,29)" fg:x="27827" fg:w="441"/><text x="24.0645%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="24.2107%" y="581" width="0.0154%" height="15" fill="rgb(251,103,34)" fg:x="28290" fg:w="18"/><text x="24.4607%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="24.2159%" y="565" width="0.0103%" height="15" fill="rgb(233,12,30)" fg:x="28296" fg:w="12"/><text x="24.4659%" y="575.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="24.2159%" y="549" width="0.0103%" height="15" fill="rgb(238,52,0)" fg:x="28296" fg:w="12"/><text x="24.4659%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="24.2159%" y="533" width="0.0103%" height="15" fill="rgb(223,98,5)" fg:x="28296" fg:w="12"/><text x="24.4659%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="24.2159%" y="517" width="0.0103%" height="15" fill="rgb(228,75,37)" fg:x="28296" fg:w="12"/><text x="24.4659%" y="527.50"></text></g><g><title>abi_stable::erased_types::iterator::next (30 samples, 0.03%)</title><rect x="24.2022%" y="613" width="0.0257%" height="15" fill="rgb(205,115,49)" fg:x="28280" fg:w="30"/><text x="24.4522%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (20 samples, 0.02%)</title><rect x="24.2107%" y="597" width="0.0171%" height="15" fill="rgb(250,154,43)" fg:x="28290" fg:w="20"/><text x="24.4607%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.04%)</title><rect x="24.1979%" y="677" width="0.0359%" height="15" fill="rgb(226,43,29)" fg:x="28275" fg:w="42"/><text x="24.4479%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.04%)</title><rect x="24.1979%" y="661" width="0.0359%" height="15" fill="rgb(249,228,39)" fg:x="28275" fg:w="42"/><text x="24.4479%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.04%)</title><rect x="24.1979%" y="645" width="0.0359%" height="15" fill="rgb(216,79,43)" fg:x="28275" fg:w="42"/><text x="24.4479%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (42 samples, 0.04%)</title><rect x="24.1979%" y="629" width="0.0359%" height="15" fill="rgb(228,95,12)" fg:x="28275" fg:w="42"/><text x="24.4479%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="24.2338%" y="677" width="0.0325%" height="15" fill="rgb(249,221,15)" fg:x="28317" fg:w="38"/><text x="24.4838%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="24.2338%" y="661" width="0.0325%" height="15" fill="rgb(233,34,13)" fg:x="28317" fg:w="38"/><text x="24.4838%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="24.2338%" y="645" width="0.0325%" height="15" fill="rgb(214,103,39)" fg:x="28317" fg:w="38"/><text x="24.4838%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (38 samples, 0.03%)</title><rect x="24.2338%" y="629" width="0.0325%" height="15" fill="rgb(251,126,39)" fg:x="28317" fg:w="38"/><text x="24.4838%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (23 samples, 0.02%)</title><rect x="24.2467%" y="613" width="0.0197%" height="15" fill="rgb(214,216,36)" fg:x="28332" fg:w="23"/><text x="24.4967%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (23 samples, 0.02%)</title><rect x="24.2467%" y="597" width="0.0197%" height="15" fill="rgb(220,221,8)" fg:x="28332" fg:w="23"/><text x="24.4967%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (13 samples, 0.01%)</title><rect x="24.2552%" y="581" width="0.0111%" height="15" fill="rgb(240,216,3)" fg:x="28342" fg:w="13"/><text x="24.5052%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (109 samples, 0.09%)</title><rect x="24.1919%" y="709" width="0.0933%" height="15" fill="rgb(232,218,17)" fg:x="28268" fg:w="109"/><text x="24.4419%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (107 samples, 0.09%)</title><rect x="24.1936%" y="693" width="0.0916%" height="15" fill="rgb(229,163,45)" fg:x="28270" fg:w="107"/><text x="24.4436%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (22 samples, 0.02%)</title><rect x="24.2664%" y="677" width="0.0188%" height="15" fill="rgb(231,110,42)" fg:x="28355" fg:w="22"/><text x="24.5164%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (19 samples, 0.02%)</title><rect x="24.2689%" y="661" width="0.0163%" height="15" fill="rgb(208,170,48)" fg:x="28358" fg:w="19"/><text x="24.5189%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (18 samples, 0.02%)</title><rect x="24.2698%" y="645" width="0.0154%" height="15" fill="rgb(239,116,25)" fg:x="28359" fg:w="18"/><text x="24.5198%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (17 samples, 0.01%)</title><rect x="24.2706%" y="629" width="0.0145%" height="15" fill="rgb(219,200,50)" fg:x="28360" fg:w="17"/><text x="24.5206%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (17 samples, 0.01%)</title><rect x="24.2706%" y="613" width="0.0145%" height="15" fill="rgb(245,200,0)" fg:x="28360" fg:w="17"/><text x="24.5206%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="24.2706%" y="597" width="0.0145%" height="15" fill="rgb(245,119,33)" fg:x="28360" fg:w="17"/><text x="24.5206%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (169 samples, 0.14%)</title><rect x="24.3032%" y="629" width="0.1446%" height="15" fill="rgb(231,125,12)" fg:x="28398" fg:w="169"/><text x="24.5532%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (169 samples, 0.14%)</title><rect x="24.3032%" y="613" width="0.1446%" height="15" fill="rgb(216,96,41)" fg:x="28398" fg:w="169"/><text x="24.5532%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (156 samples, 0.13%)</title><rect x="24.3143%" y="597" width="0.1335%" height="15" fill="rgb(248,43,45)" fg:x="28411" fg:w="156"/><text x="24.5643%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (136 samples, 0.12%)</title><rect x="24.3314%" y="581" width="0.1164%" height="15" fill="rgb(217,222,7)" fg:x="28431" fg:w="136"/><text x="24.5814%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (136 samples, 0.12%)</title><rect x="24.3314%" y="565" width="0.1164%" height="15" fill="rgb(233,28,6)" fg:x="28431" fg:w="136"/><text x="24.5814%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (136 samples, 0.12%)</title><rect x="24.3314%" y="549" width="0.1164%" height="15" fill="rgb(231,218,15)" fg:x="28431" fg:w="136"/><text x="24.5814%" y="559.50"></text></g><g><title>alloc::alloc::alloc (133 samples, 0.11%)</title><rect x="24.3340%" y="533" width="0.1138%" height="15" fill="rgb(226,171,48)" fg:x="28434" fg:w="133"/><text x="24.5840%" y="543.50"></text></g><g><title>__rg_alloc (133 samples, 0.11%)</title><rect x="24.3340%" y="517" width="0.1138%" height="15" fill="rgb(235,201,9)" fg:x="28434" fg:w="133"/><text x="24.5840%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (133 samples, 0.11%)</title><rect x="24.3340%" y="501" width="0.1138%" height="15" fill="rgb(217,80,15)" fg:x="28434" fg:w="133"/><text x="24.5840%" y="511.50"></text></g><g><title>sn_rust_alloc (132 samples, 0.11%)</title><rect x="24.3348%" y="485" width="0.1130%" height="15" fill="rgb(219,152,8)" fg:x="28435" fg:w="132"/><text x="24.5848%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="24.4538%" y="565" width="0.0111%" height="15" fill="rgb(243,107,38)" fg:x="28574" fg:w="13"/><text x="24.7038%" y="575.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="24.4649%" y="565" width="0.0317%" height="15" fill="rgb(231,17,5)" fg:x="28587" fg:w="37"/><text x="24.7149%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (57 samples, 0.05%)</title><rect x="24.4512%" y="581" width="0.0488%" height="15" fill="rgb(209,25,54)" fg:x="28571" fg:w="57"/><text x="24.7012%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (115 samples, 0.10%)</title><rect x="24.4512%" y="629" width="0.0984%" height="15" fill="rgb(219,0,2)" fg:x="28571" fg:w="115"/><text x="24.7012%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (115 samples, 0.10%)</title><rect x="24.4512%" y="613" width="0.0984%" height="15" fill="rgb(246,9,5)" fg:x="28571" fg:w="115"/><text x="24.7012%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (115 samples, 0.10%)</title><rect x="24.4512%" y="597" width="0.0984%" height="15" fill="rgb(226,159,4)" fg:x="28571" fg:w="115"/><text x="24.7012%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (58 samples, 0.05%)</title><rect x="24.5000%" y="581" width="0.0496%" height="15" fill="rgb(219,175,34)" fg:x="28628" fg:w="58"/><text x="24.7500%" y="591.50"></text></g><g><title>core::ptr::read (58 samples, 0.05%)</title><rect x="24.5000%" y="565" width="0.0496%" height="15" fill="rgb(236,10,46)" fg:x="28628" fg:w="58"/><text x="24.7500%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (330 samples, 0.28%)</title><rect x="24.2852%" y="709" width="0.2824%" height="15" fill="rgb(240,211,16)" fg:x="28377" fg:w="330"/><text x="24.5352%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (321 samples, 0.27%)</title><rect x="24.2929%" y="693" width="0.2747%" height="15" fill="rgb(205,3,43)" fg:x="28386" fg:w="321"/><text x="24.5429%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (320 samples, 0.27%)</title><rect x="24.2937%" y="677" width="0.2739%" height="15" fill="rgb(245,7,22)" fg:x="28387" fg:w="320"/><text x="24.5437%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (314 samples, 0.27%)</title><rect x="24.2989%" y="661" width="0.2687%" height="15" fill="rgb(239,132,32)" fg:x="28393" fg:w="314"/><text x="24.5489%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (314 samples, 0.27%)</title><rect x="24.2989%" y="645" width="0.2687%" height="15" fill="rgb(228,202,34)" fg:x="28393" fg:w="314"/><text x="24.5489%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (21 samples, 0.02%)</title><rect x="24.5496%" y="629" width="0.0180%" height="15" fill="rgb(254,200,22)" fg:x="28686" fg:w="21"/><text x="24.7996%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.01%)</title><rect x="24.5565%" y="613" width="0.0111%" height="15" fill="rgb(219,10,39)" fg:x="28694" fg:w="13"/><text x="24.8065%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.01%)</title><rect x="24.5565%" y="597" width="0.0111%" height="15" fill="rgb(226,210,39)" fg:x="28694" fg:w="13"/><text x="24.8065%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (31 samples, 0.03%)</title><rect x="24.5796%" y="597" width="0.0265%" height="15" fill="rgb(208,219,16)" fg:x="28721" fg:w="31"/><text x="24.8296%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="24.5933%" y="581" width="0.0128%" height="15" fill="rgb(216,158,51)" fg:x="28737" fg:w="15"/><text x="24.8433%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="24.5933%" y="565" width="0.0128%" height="15" fill="rgb(233,14,44)" fg:x="28737" fg:w="15"/><text x="24.8433%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="24.5933%" y="549" width="0.0128%" height="15" fill="rgb(237,97,39)" fg:x="28737" fg:w="15"/><text x="24.8433%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="24.5933%" y="533" width="0.0128%" height="15" fill="rgb(218,198,43)" fg:x="28737" fg:w="15"/><text x="24.8433%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (15 samples, 0.01%)</title><rect x="24.5933%" y="517" width="0.0128%" height="15" fill="rgb(231,104,20)" fg:x="28737" fg:w="15"/><text x="24.8433%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="24.5933%" y="501" width="0.0128%" height="15" fill="rgb(254,36,13)" fg:x="28737" fg:w="15"/><text x="24.8433%" y="511.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="24.6061%" y="597" width="0.0616%" height="15" fill="rgb(248,14,50)" fg:x="28752" fg:w="72"/><text x="24.8561%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (557 samples, 0.48%)</title><rect x="24.1919%" y="725" width="0.4767%" height="15" fill="rgb(217,107,29)" fg:x="28268" fg:w="557"/><text x="24.4419%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (118 samples, 0.10%)</title><rect x="24.5676%" y="709" width="0.1010%" height="15" fill="rgb(251,169,33)" fg:x="28707" fg:w="118"/><text x="24.8176%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (118 samples, 0.10%)</title><rect x="24.5676%" y="693" width="0.1010%" height="15" fill="rgb(217,108,32)" fg:x="28707" fg:w="118"/><text x="24.8176%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.10%)</title><rect x="24.5676%" y="677" width="0.1010%" height="15" fill="rgb(219,66,42)" fg:x="28707" fg:w="118"/><text x="24.8176%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (113 samples, 0.10%)</title><rect x="24.5719%" y="661" width="0.0967%" height="15" fill="rgb(206,180,7)" fg:x="28712" fg:w="113"/><text x="24.8219%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (113 samples, 0.10%)</title><rect x="24.5719%" y="645" width="0.0967%" height="15" fill="rgb(208,226,31)" fg:x="28712" fg:w="113"/><text x="24.8219%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (113 samples, 0.10%)</title><rect x="24.5719%" y="629" width="0.0967%" height="15" fill="rgb(218,26,49)" fg:x="28712" fg:w="113"/><text x="24.8219%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (113 samples, 0.10%)</title><rect x="24.5719%" y="613" width="0.0967%" height="15" fill="rgb(233,197,48)" fg:x="28712" fg:w="113"/><text x="24.8219%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (14 samples, 0.01%)</title><rect x="24.6686%" y="725" width="0.0120%" height="15" fill="rgb(252,181,51)" fg:x="28825" fg:w="14"/><text x="24.9186%" y="735.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SinkReporter::increment_in (29 samples, 0.02%)</title><rect x="24.6806%" y="725" width="0.0248%" height="15" fill="rgb(253,90,19)" fg:x="28839" fg:w="29"/><text x="24.9306%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,786 samples, 8.37%)</title><rect x="16.3330%" y="741" width="8.3749%" height="15" fill="rgb(215,171,30)" fg:x="19085" fg:w="9786"/><text x="16.5830%" y="751.50">tremor_runti..</text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="24.7097%" y="645" width="0.0128%" height="15" fill="rgb(214,222,9)" fg:x="28873" fg:w="15"/><text x="24.9597%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (43 samples, 0.04%)</title><rect x="24.7234%" y="645" width="0.0368%" height="15" fill="rgb(223,3,22)" fg:x="28889" fg:w="43"/><text x="24.9734%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (43 samples, 0.04%)</title><rect x="24.7234%" y="629" width="0.0368%" height="15" fill="rgb(225,196,46)" fg:x="28889" fg:w="43"/><text x="24.9734%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (64 samples, 0.05%)</title><rect x="24.7080%" y="693" width="0.0548%" height="15" fill="rgb(209,110,37)" fg:x="28871" fg:w="64"/><text x="24.9580%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (64 samples, 0.05%)</title><rect x="24.7080%" y="677" width="0.0548%" height="15" fill="rgb(249,89,12)" fg:x="28871" fg:w="64"/><text x="24.9580%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (64 samples, 0.05%)</title><rect x="24.7080%" y="661" width="0.0548%" height="15" fill="rgb(226,27,33)" fg:x="28871" fg:w="64"/><text x="24.9580%" y="671.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (137 samples, 0.12%)</title><rect x="24.7636%" y="533" width="0.1172%" height="15" fill="rgb(213,82,22)" fg:x="28936" fg:w="137"/><text x="25.0136%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (137 samples, 0.12%)</title><rect x="24.7636%" y="517" width="0.1172%" height="15" fill="rgb(248,140,0)" fg:x="28936" fg:w="137"/><text x="25.0136%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (129 samples, 0.11%)</title><rect x="24.7704%" y="501" width="0.1104%" height="15" fill="rgb(228,106,3)" fg:x="28944" fg:w="129"/><text x="25.0204%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (125 samples, 0.11%)</title><rect x="24.7739%" y="485" width="0.1070%" height="15" fill="rgb(209,23,37)" fg:x="28948" fg:w="125"/><text x="25.0239%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (125 samples, 0.11%)</title><rect x="24.7739%" y="469" width="0.1070%" height="15" fill="rgb(241,93,50)" fg:x="28948" fg:w="125"/><text x="25.0239%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (125 samples, 0.11%)</title><rect x="24.7739%" y="453" width="0.1070%" height="15" fill="rgb(253,46,43)" fg:x="28948" fg:w="125"/><text x="25.0239%" y="463.50"></text></g><g><title>alloc::alloc::alloc (124 samples, 0.11%)</title><rect x="24.7747%" y="437" width="0.1061%" height="15" fill="rgb(226,206,43)" fg:x="28949" fg:w="124"/><text x="25.0247%" y="447.50"></text></g><g><title>__rg_alloc (124 samples, 0.11%)</title><rect x="24.7747%" y="421" width="0.1061%" height="15" fill="rgb(217,54,7)" fg:x="28949" fg:w="124"/><text x="25.0247%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (124 samples, 0.11%)</title><rect x="24.7747%" y="405" width="0.1061%" height="15" fill="rgb(223,5,52)" fg:x="28949" fg:w="124"/><text x="25.0247%" y="415.50"></text></g><g><title>sn_rust_alloc (123 samples, 0.11%)</title><rect x="24.7756%" y="389" width="0.1053%" height="15" fill="rgb(206,52,46)" fg:x="28950" fg:w="123"/><text x="25.0256%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (110 samples, 0.09%)</title><rect x="24.7867%" y="373" width="0.0941%" height="15" fill="rgb(253,136,11)" fg:x="28963" fg:w="110"/><text x="25.0367%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (140 samples, 0.12%)</title><rect x="24.7627%" y="581" width="0.1198%" height="15" fill="rgb(208,106,33)" fg:x="28935" fg:w="140"/><text x="25.0127%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (140 samples, 0.12%)</title><rect x="24.7627%" y="565" width="0.1198%" height="15" fill="rgb(206,54,4)" fg:x="28935" fg:w="140"/><text x="25.0127%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (140 samples, 0.12%)</title><rect x="24.7627%" y="549" width="0.1198%" height="15" fill="rgb(213,3,15)" fg:x="28935" fg:w="140"/><text x="25.0127%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (150 samples, 0.13%)</title><rect x="24.7627%" y="661" width="0.1284%" height="15" fill="rgb(252,211,39)" fg:x="28935" fg:w="150"/><text x="25.0127%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (150 samples, 0.13%)</title><rect x="24.7627%" y="645" width="0.1284%" height="15" fill="rgb(223,6,36)" fg:x="28935" fg:w="150"/><text x="25.0127%" y="655.50"></text></g><g><title>value_trait::Builder::object (150 samples, 0.13%)</title><rect x="24.7627%" y="629" width="0.1284%" height="15" fill="rgb(252,169,45)" fg:x="28935" fg:w="150"/><text x="25.0127%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (150 samples, 0.13%)</title><rect x="24.7627%" y="613" width="0.1284%" height="15" fill="rgb(212,48,26)" fg:x="28935" fg:w="150"/><text x="25.0127%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (150 samples, 0.13%)</title><rect x="24.7627%" y="597" width="0.1284%" height="15" fill="rgb(251,102,48)" fg:x="28935" fg:w="150"/><text x="25.0127%" y="607.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="24.9065%" y="469" width="0.0188%" height="15" fill="rgb(243,208,16)" fg:x="29103" fg:w="22"/><text x="25.1565%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="24.8954%" y="549" width="0.0308%" height="15" fill="rgb(219,96,24)" fg:x="29090" fg:w="36"/><text x="25.1454%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (36 samples, 0.03%)</title><rect x="24.8954%" y="533" width="0.0308%" height="15" fill="rgb(219,33,29)" fg:x="29090" fg:w="36"/><text x="25.1454%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (28 samples, 0.02%)</title><rect x="24.9022%" y="517" width="0.0240%" height="15" fill="rgb(223,176,5)" fg:x="29098" fg:w="28"/><text x="25.1522%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (28 samples, 0.02%)</title><rect x="24.9022%" y="501" width="0.0240%" height="15" fill="rgb(228,140,14)" fg:x="29098" fg:w="28"/><text x="25.1522%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="24.9022%" y="485" width="0.0240%" height="15" fill="rgb(217,179,31)" fg:x="29098" fg:w="28"/><text x="25.1522%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (45 samples, 0.04%)</title><rect x="24.8911%" y="661" width="0.0385%" height="15" fill="rgb(230,9,30)" fg:x="29085" fg:w="45"/><text x="25.1411%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (45 samples, 0.04%)</title><rect x="24.8911%" y="645" width="0.0385%" height="15" fill="rgb(230,136,20)" fg:x="29085" fg:w="45"/><text x="25.1411%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (45 samples, 0.04%)</title><rect x="24.8911%" y="629" width="0.0385%" height="15" fill="rgb(215,210,22)" fg:x="29085" fg:w="45"/><text x="25.1411%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (45 samples, 0.04%)</title><rect x="24.8911%" y="613" width="0.0385%" height="15" fill="rgb(218,43,5)" fg:x="29085" fg:w="45"/><text x="25.1411%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (45 samples, 0.04%)</title><rect x="24.8911%" y="597" width="0.0385%" height="15" fill="rgb(216,11,5)" fg:x="29085" fg:w="45"/><text x="25.1411%" y="607.50"></text></g><g><title>core::mem::drop (40 samples, 0.03%)</title><rect x="24.8954%" y="581" width="0.0342%" height="15" fill="rgb(209,82,29)" fg:x="29090" fg:w="40"/><text x="25.1454%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (40 samples, 0.03%)</title><rect x="24.8954%" y="565" width="0.0342%" height="15" fill="rgb(244,115,12)" fg:x="29090" fg:w="40"/><text x="25.1454%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (16 samples, 0.01%)</title><rect x="24.9459%" y="645" width="0.0137%" height="15" fill="rgb(222,82,18)" fg:x="29149" fg:w="16"/><text x="25.1959%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (45 samples, 0.04%)</title><rect x="24.9690%" y="629" width="0.0385%" height="15" fill="rgb(249,227,8)" fg:x="29176" fg:w="45"/><text x="25.2190%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (15 samples, 0.01%)</title><rect x="25.0203%" y="597" width="0.0128%" height="15" fill="rgb(253,141,45)" fg:x="29236" fg:w="15"/><text x="25.2703%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (15 samples, 0.01%)</title><rect x="25.0203%" y="581" width="0.0128%" height="15" fill="rgb(234,184,4)" fg:x="29236" fg:w="15"/><text x="25.2703%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (15 samples, 0.01%)</title><rect x="25.0203%" y="565" width="0.0128%" height="15" fill="rgb(218,194,23)" fg:x="29236" fg:w="15"/><text x="25.2703%" y="575.50"></text></g><g><title>std::time::SystemTime::duration_since (83 samples, 0.07%)</title><rect x="24.9690%" y="645" width="0.0710%" height="15" fill="rgb(235,66,41)" fg:x="29176" fg:w="83"/><text x="25.2190%" y="655.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (38 samples, 0.03%)</title><rect x="25.0075%" y="629" width="0.0325%" height="15" fill="rgb(245,217,1)" fg:x="29221" fg:w="38"/><text x="25.2575%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (38 samples, 0.03%)</title><rect x="25.0075%" y="613" width="0.0325%" height="15" fill="rgb(229,91,1)" fg:x="29221" fg:w="38"/><text x="25.2575%" y="623.50"></text></g><g><title>tremor_common::time::nanotime (296 samples, 0.25%)</title><rect x="24.9365%" y="661" width="0.2533%" height="15" fill="rgb(207,101,30)" fg:x="29138" fg:w="296"/><text x="25.1865%" y="671.50"></text></g><g><title>std::time::SystemTime::now (175 samples, 0.15%)</title><rect x="25.0400%" y="645" width="0.1498%" height="15" fill="rgb(223,82,49)" fg:x="29259" fg:w="175"/><text x="25.2900%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (175 samples, 0.15%)</title><rect x="25.0400%" y="629" width="0.1498%" height="15" fill="rgb(218,167,17)" fg:x="29259" fg:w="175"/><text x="25.2900%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (175 samples, 0.15%)</title><rect x="25.0400%" y="613" width="0.1498%" height="15" fill="rgb(208,103,14)" fg:x="29259" fg:w="175"/><text x="25.2900%" y="623.50"></text></g><g><title>__clock_gettime (149 samples, 0.13%)</title><rect x="25.0623%" y="597" width="0.1275%" height="15" fill="rgb(238,20,8)" fg:x="29285" fg:w="149"/><text x="25.3123%" y="607.50"></text></g><g><title>__vdso_clock_gettime (145 samples, 0.12%)</title><rect x="25.0657%" y="581" width="0.1241%" height="15" fill="rgb(218,80,54)" fg:x="29289" fg:w="145"/><text x="25.3157%" y="591.50"></text></g><g><title>[[vdso]] (132 samples, 0.11%)</title><rect x="25.0768%" y="565" width="0.1130%" height="15" fill="rgb(240,144,17)" fg:x="29302" fg:w="132"/><text x="25.3268%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (582 samples, 0.50%)</title><rect x="24.7080%" y="725" width="0.4981%" height="15" fill="rgb(245,27,50)" fg:x="28871" fg:w="582"/><text x="24.9580%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (582 samples, 0.50%)</title><rect x="24.7080%" y="709" width="0.4981%" height="15" fill="rgb(251,51,7)" fg:x="28871" fg:w="582"/><text x="24.9580%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.44%)</title><rect x="24.7627%" y="693" width="0.4433%" height="15" fill="rgb(245,217,29)" fg:x="28935" fg:w="518"/><text x="25.0127%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (518 samples, 0.44%)</title><rect x="24.7627%" y="677" width="0.4433%" height="15" fill="rgb(221,176,29)" fg:x="28935" fg:w="518"/><text x="25.0127%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (19 samples, 0.02%)</title><rect x="25.1898%" y="661" width="0.0163%" height="15" fill="rgb(212,180,24)" fg:x="29434" fg:w="19"/><text x="25.4398%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (17 samples, 0.01%)</title><rect x="25.1915%" y="645" width="0.0145%" height="15" fill="rgb(254,24,2)" fg:x="29436" fg:w="17"/><text x="25.4415%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (13 samples, 0.01%)</title><rect x="25.1949%" y="629" width="0.0111%" height="15" fill="rgb(230,100,2)" fg:x="29440" fg:w="13"/><text x="25.4449%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (13 samples, 0.01%)</title><rect x="25.1949%" y="613" width="0.0111%" height="15" fill="rgb(219,142,25)" fg:x="29440" fg:w="13"/><text x="25.4449%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (13 samples, 0.01%)</title><rect x="25.1949%" y="597" width="0.0111%" height="15" fill="rgb(240,73,43)" fg:x="29440" fg:w="13"/><text x="25.4449%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (136 samples, 0.12%)</title><rect x="25.5706%" y="277" width="0.1164%" height="15" fill="rgb(214,114,15)" fg:x="29879" fg:w="136"/><text x="25.8206%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (136 samples, 0.12%)</title><rect x="25.5706%" y="261" width="0.1164%" height="15" fill="rgb(207,130,4)" fg:x="29879" fg:w="136"/><text x="25.8206%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (136 samples, 0.12%)</title><rect x="25.5706%" y="245" width="0.1164%" height="15" fill="rgb(221,25,40)" fg:x="29879" fg:w="136"/><text x="25.8206%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (131 samples, 0.11%)</title><rect x="25.5749%" y="229" width="0.1121%" height="15" fill="rgb(241,184,7)" fg:x="29884" fg:w="131"/><text x="25.8249%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (131 samples, 0.11%)</title><rect x="25.5749%" y="213" width="0.1121%" height="15" fill="rgb(235,159,4)" fg:x="29884" fg:w="131"/><text x="25.8249%" y="223.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.11%)</title><rect x="25.5757%" y="197" width="0.1113%" height="15" fill="rgb(214,87,48)" fg:x="29885" fg:w="130"/><text x="25.8257%" y="207.50"></text></g><g><title>__rg_alloc (130 samples, 0.11%)</title><rect x="25.5757%" y="181" width="0.1113%" height="15" fill="rgb(246,198,24)" fg:x="29885" fg:w="130"/><text x="25.8257%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (130 samples, 0.11%)</title><rect x="25.5757%" y="165" width="0.1113%" height="15" fill="rgb(209,66,40)" fg:x="29885" fg:w="130"/><text x="25.8257%" y="175.50"></text></g><g><title>sn_rust_alloc (121 samples, 0.10%)</title><rect x="25.5834%" y="149" width="0.1036%" height="15" fill="rgb(233,147,39)" fg:x="29894" fg:w="121"/><text x="25.8334%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (164 samples, 0.14%)</title><rect x="25.5663%" y="389" width="0.1404%" height="15" fill="rgb(231,145,52)" fg:x="29874" fg:w="164"/><text x="25.8163%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (162 samples, 0.14%)</title><rect x="25.5680%" y="373" width="0.1386%" height="15" fill="rgb(206,20,26)" fg:x="29876" fg:w="162"/><text x="25.8180%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (162 samples, 0.14%)</title><rect x="25.5680%" y="357" width="0.1386%" height="15" fill="rgb(238,220,4)" fg:x="29876" fg:w="162"/><text x="25.8180%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (159 samples, 0.14%)</title><rect x="25.5706%" y="341" width="0.1361%" height="15" fill="rgb(252,195,42)" fg:x="29879" fg:w="159"/><text x="25.8206%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (159 samples, 0.14%)</title><rect x="25.5706%" y="325" width="0.1361%" height="15" fill="rgb(209,10,6)" fg:x="29879" fg:w="159"/><text x="25.8206%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (159 samples, 0.14%)</title><rect x="25.5706%" y="309" width="0.1361%" height="15" fill="rgb(229,3,52)" fg:x="29879" fg:w="159"/><text x="25.8206%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (159 samples, 0.14%)</title><rect x="25.5706%" y="293" width="0.1361%" height="15" fill="rgb(253,49,37)" fg:x="29879" fg:w="159"/><text x="25.8206%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (23 samples, 0.02%)</title><rect x="25.6870%" y="277" width="0.0197%" height="15" fill="rgb(240,103,49)" fg:x="30015" fg:w="23"/><text x="25.9370%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="25.6870%" y="261" width="0.0197%" height="15" fill="rgb(250,182,30)" fg:x="30015" fg:w="23"/><text x="25.9370%" y="271.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="25.6896%" y="245" width="0.0171%" height="15" fill="rgb(248,8,30)" fg:x="30018" fg:w="20"/><text x="25.9396%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (52 samples, 0.04%)</title><rect x="25.7247%" y="181" width="0.0445%" height="15" fill="rgb(237,120,30)" fg:x="30059" fg:w="52"/><text x="25.9747%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (52 samples, 0.04%)</title><rect x="25.7247%" y="165" width="0.0445%" height="15" fill="rgb(221,146,34)" fg:x="30059" fg:w="52"/><text x="25.9747%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (52 samples, 0.04%)</title><rect x="25.7247%" y="149" width="0.0445%" height="15" fill="rgb(242,55,13)" fg:x="30059" fg:w="52"/><text x="25.9747%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.04%)</title><rect x="25.7247%" y="133" width="0.0445%" height="15" fill="rgb(242,112,31)" fg:x="30059" fg:w="52"/><text x="25.9747%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.04%)</title><rect x="25.7247%" y="117" width="0.0445%" height="15" fill="rgb(249,192,27)" fg:x="30059" fg:w="52"/><text x="25.9747%" y="127.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.04%)</title><rect x="25.7264%" y="101" width="0.0428%" height="15" fill="rgb(208,204,44)" fg:x="30061" fg:w="50"/><text x="25.9764%" y="111.50"></text></g><g><title>__rg_alloc (50 samples, 0.04%)</title><rect x="25.7264%" y="85" width="0.0428%" height="15" fill="rgb(208,93,54)" fg:x="30061" fg:w="50"/><text x="25.9764%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (50 samples, 0.04%)</title><rect x="25.7264%" y="69" width="0.0428%" height="15" fill="rgb(242,1,31)" fg:x="30061" fg:w="50"/><text x="25.9764%" y="79.50"></text></g><g><title>sn_rust_alloc (47 samples, 0.04%)</title><rect x="25.7289%" y="53" width="0.0402%" height="15" fill="rgb(241,83,25)" fg:x="30064" fg:w="47"/><text x="25.9789%" y="63.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="25.7563%" y="37" width="0.0128%" height="15" fill="rgb(205,169,50)" fg:x="30096" fg:w="15"/><text x="26.0063%" y="47.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (83 samples, 0.07%)</title><rect x="25.7187%" y="293" width="0.0710%" height="15" fill="rgb(239,186,37)" fg:x="30052" fg:w="83"/><text x="25.9687%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (83 samples, 0.07%)</title><rect x="25.7187%" y="277" width="0.0710%" height="15" fill="rgb(205,221,10)" fg:x="30052" fg:w="83"/><text x="25.9687%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (83 samples, 0.07%)</title><rect x="25.7187%" y="261" width="0.0710%" height="15" fill="rgb(218,196,15)" fg:x="30052" fg:w="83"/><text x="25.9687%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (76 samples, 0.07%)</title><rect x="25.7247%" y="245" width="0.0650%" height="15" fill="rgb(218,196,35)" fg:x="30059" fg:w="76"/><text x="25.9747%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (76 samples, 0.07%)</title><rect x="25.7247%" y="229" width="0.0650%" height="15" fill="rgb(233,63,24)" fg:x="30059" fg:w="76"/><text x="25.9747%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (76 samples, 0.07%)</title><rect x="25.7247%" y="213" width="0.0650%" height="15" fill="rgb(225,8,4)" fg:x="30059" fg:w="76"/><text x="25.9747%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (76 samples, 0.07%)</title><rect x="25.7247%" y="197" width="0.0650%" height="15" fill="rgb(234,105,35)" fg:x="30059" fg:w="76"/><text x="25.9747%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24 samples, 0.02%)</title><rect x="25.7692%" y="181" width="0.0205%" height="15" fill="rgb(236,21,32)" fg:x="30111" fg:w="24"/><text x="26.0192%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="25.7692%" y="165" width="0.0205%" height="15" fill="rgb(228,109,6)" fg:x="30111" fg:w="24"/><text x="26.0192%" y="175.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="25.7700%" y="149" width="0.0197%" height="15" fill="rgb(229,215,31)" fg:x="30112" fg:w="23"/><text x="26.0200%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="25.8060%" y="245" width="0.0342%" height="15" fill="rgb(221,52,54)" fg:x="30154" fg:w="40"/><text x="26.0560%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="25.8060%" y="229" width="0.0342%" height="15" fill="rgb(252,129,43)" fg:x="30154" fg:w="40"/><text x="26.0560%" y="239.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="25.8077%" y="213" width="0.0325%" height="15" fill="rgb(248,183,27)" fg:x="30156" fg:w="38"/><text x="26.0577%" y="223.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="25.8077%" y="197" width="0.0325%" height="15" fill="rgb(250,0,22)" fg:x="30156" fg:w="38"/><text x="26.0577%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="25.8077%" y="181" width="0.0325%" height="15" fill="rgb(213,166,10)" fg:x="30156" fg:w="38"/><text x="26.0577%" y="191.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="25.8094%" y="165" width="0.0308%" height="15" fill="rgb(207,163,36)" fg:x="30158" fg:w="36"/><text x="26.0594%" y="175.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="25.8291%" y="149" width="0.0111%" height="15" fill="rgb(208,122,22)" fg:x="30181" fg:w="13"/><text x="26.0791%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (48 samples, 0.04%)</title><rect x="25.8008%" y="293" width="0.0411%" height="15" fill="rgb(207,104,49)" fg:x="30148" fg:w="48"/><text x="26.0508%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42 samples, 0.04%)</title><rect x="25.8060%" y="277" width="0.0359%" height="15" fill="rgb(248,211,50)" fg:x="30154" fg:w="42"/><text x="26.0560%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (42 samples, 0.04%)</title><rect x="25.8060%" y="261" width="0.0359%" height="15" fill="rgb(217,13,45)" fg:x="30154" fg:w="42"/><text x="26.0560%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (591 samples, 0.51%)</title><rect x="25.3447%" y="405" width="0.5058%" height="15" fill="rgb(211,216,49)" fg:x="29615" fg:w="591"/><text x="25.5947%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (168 samples, 0.14%)</title><rect x="25.7067%" y="389" width="0.1438%" height="15" fill="rgb(221,58,53)" fg:x="30038" fg:w="168"/><text x="25.9567%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (154 samples, 0.13%)</title><rect x="25.7187%" y="373" width="0.1318%" height="15" fill="rgb(220,112,41)" fg:x="30052" fg:w="154"/><text x="25.9687%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (154 samples, 0.13%)</title><rect x="25.7187%" y="357" width="0.1318%" height="15" fill="rgb(236,38,28)" fg:x="30052" fg:w="154"/><text x="25.9687%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (154 samples, 0.13%)</title><rect x="25.7187%" y="341" width="0.1318%" height="15" fill="rgb(227,195,22)" fg:x="30052" fg:w="154"/><text x="25.9687%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (154 samples, 0.13%)</title><rect x="25.7187%" y="325" width="0.1318%" height="15" fill="rgb(214,55,33)" fg:x="30052" fg:w="154"/><text x="25.9687%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (154 samples, 0.13%)</title><rect x="25.7187%" y="309" width="0.1318%" height="15" fill="rgb(248,80,13)" fg:x="30052" fg:w="154"/><text x="25.9687%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (32 samples, 0.03%)</title><rect x="25.8924%" y="309" width="0.0274%" height="15" fill="rgb(238,52,6)" fg:x="30255" fg:w="32"/><text x="26.1424%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (20 samples, 0.02%)</title><rect x="25.9283%" y="277" width="0.0171%" height="15" fill="rgb(224,198,47)" fg:x="30297" fg:w="20"/><text x="26.1783%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (20 samples, 0.02%)</title><rect x="25.9283%" y="261" width="0.0171%" height="15" fill="rgb(233,171,20)" fg:x="30297" fg:w="20"/><text x="26.1783%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (17 samples, 0.01%)</title><rect x="25.9309%" y="245" width="0.0145%" height="15" fill="rgb(241,30,25)" fg:x="30300" fg:w="17"/><text x="26.1809%" y="255.50"></text></g><g><title>std::time::SystemTime::duration_since (70 samples, 0.06%)</title><rect x="25.8924%" y="325" width="0.0599%" height="15" fill="rgb(207,171,38)" fg:x="30255" fg:w="70"/><text x="26.1424%" y="335.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (38 samples, 0.03%)</title><rect x="25.9198%" y="309" width="0.0325%" height="15" fill="rgb(234,70,1)" fg:x="30287" fg:w="38"/><text x="26.1698%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (38 samples, 0.03%)</title><rect x="25.9198%" y="293" width="0.0325%" height="15" fill="rgb(232,178,18)" fg:x="30287" fg:w="38"/><text x="26.1698%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (308 samples, 0.26%)</title><rect x="25.8505%" y="405" width="0.2636%" height="15" fill="rgb(241,78,40)" fg:x="30206" fg:w="308"/><text x="26.1005%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (308 samples, 0.26%)</title><rect x="25.8505%" y="389" width="0.2636%" height="15" fill="rgb(222,35,25)" fg:x="30206" fg:w="308"/><text x="26.1005%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (289 samples, 0.25%)</title><rect x="25.8667%" y="373" width="0.2473%" height="15" fill="rgb(207,92,16)" fg:x="30225" fg:w="289"/><text x="26.1167%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (289 samples, 0.25%)</title><rect x="25.8667%" y="357" width="0.2473%" height="15" fill="rgb(216,59,51)" fg:x="30225" fg:w="289"/><text x="26.1167%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (287 samples, 0.25%)</title><rect x="25.8684%" y="341" width="0.2456%" height="15" fill="rgb(213,80,28)" fg:x="30227" fg:w="287"/><text x="26.1184%" y="351.50"></text></g><g><title>std::time::SystemTime::now (189 samples, 0.16%)</title><rect x="25.9523%" y="325" width="0.1617%" height="15" fill="rgb(220,93,7)" fg:x="30325" fg:w="189"/><text x="26.2023%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (189 samples, 0.16%)</title><rect x="25.9523%" y="309" width="0.1617%" height="15" fill="rgb(225,24,44)" fg:x="30325" fg:w="189"/><text x="26.2023%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (189 samples, 0.16%)</title><rect x="25.9523%" y="293" width="0.1617%" height="15" fill="rgb(243,74,40)" fg:x="30325" fg:w="189"/><text x="26.2023%" y="303.50"></text></g><g><title>__clock_gettime (156 samples, 0.13%)</title><rect x="25.9805%" y="277" width="0.1335%" height="15" fill="rgb(228,39,7)" fg:x="30358" fg:w="156"/><text x="26.2305%" y="287.50"></text></g><g><title>__vdso_clock_gettime (148 samples, 0.13%)</title><rect x="25.9874%" y="261" width="0.1267%" height="15" fill="rgb(227,79,8)" fg:x="30366" fg:w="148"/><text x="26.2374%" y="271.50"></text></g><g><title>[[vdso]] (135 samples, 0.12%)</title><rect x="25.9985%" y="245" width="0.1155%" height="15" fill="rgb(236,58,11)" fg:x="30379" fg:w="135"/><text x="26.2485%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.05%)</title><rect x="26.1329%" y="373" width="0.0462%" height="15" fill="rgb(249,63,35)" fg:x="30536" fg:w="54"/><text x="26.3829%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.02%)</title><rect x="26.1620%" y="357" width="0.0171%" height="15" fill="rgb(252,114,16)" fg:x="30570" fg:w="20"/><text x="26.4120%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (297 samples, 0.25%)</title><rect x="26.3169%" y="181" width="0.2542%" height="15" fill="rgb(254,151,24)" fg:x="30751" fg:w="297"/><text x="26.5669%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (463 samples, 0.40%)</title><rect x="26.1808%" y="325" width="0.3962%" height="15" fill="rgb(253,54,39)" fg:x="30592" fg:w="463"/><text x="26.4308%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (459 samples, 0.39%)</title><rect x="26.1842%" y="309" width="0.3928%" height="15" fill="rgb(243,25,45)" fg:x="30596" fg:w="459"/><text x="26.4342%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (459 samples, 0.39%)</title><rect x="26.1842%" y="293" width="0.3928%" height="15" fill="rgb(234,134,9)" fg:x="30596" fg:w="459"/><text x="26.4342%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (458 samples, 0.39%)</title><rect x="26.1851%" y="277" width="0.3920%" height="15" fill="rgb(227,166,31)" fg:x="30597" fg:w="458"/><text x="26.4351%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (458 samples, 0.39%)</title><rect x="26.1851%" y="261" width="0.3920%" height="15" fill="rgb(245,143,41)" fg:x="30597" fg:w="458"/><text x="26.4351%" y="271.50"></text></g><g><title>alloc::alloc::alloc (458 samples, 0.39%)</title><rect x="26.1851%" y="245" width="0.3920%" height="15" fill="rgb(238,181,32)" fg:x="30597" fg:w="458"/><text x="26.4351%" y="255.50"></text></g><g><title>__rg_alloc (458 samples, 0.39%)</title><rect x="26.1851%" y="229" width="0.3920%" height="15" fill="rgb(224,113,18)" fg:x="30597" fg:w="458"/><text x="26.4351%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (458 samples, 0.39%)</title><rect x="26.1851%" y="213" width="0.3920%" height="15" fill="rgb(240,229,28)" fg:x="30597" fg:w="458"/><text x="26.4351%" y="223.50"></text></g><g><title>sn_rust_alloc (454 samples, 0.39%)</title><rect x="26.1885%" y="197" width="0.3885%" height="15" fill="rgb(250,185,3)" fg:x="30601" fg:w="454"/><text x="26.4385%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (642 samples, 0.55%)</title><rect x="26.1329%" y="389" width="0.5494%" height="15" fill="rgb(212,59,25)" fg:x="30536" fg:w="642"/><text x="26.3829%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (588 samples, 0.50%)</title><rect x="26.1791%" y="373" width="0.5032%" height="15" fill="rgb(221,87,20)" fg:x="30590" fg:w="588"/><text x="26.4291%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (588 samples, 0.50%)</title><rect x="26.1791%" y="357" width="0.5032%" height="15" fill="rgb(213,74,28)" fg:x="30590" fg:w="588"/><text x="26.4291%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (588 samples, 0.50%)</title><rect x="26.1791%" y="341" width="0.5032%" height="15" fill="rgb(224,132,34)" fg:x="30590" fg:w="588"/><text x="26.4291%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (123 samples, 0.11%)</title><rect x="26.5770%" y="325" width="0.1053%" height="15" fill="rgb(222,101,24)" fg:x="31055" fg:w="123"/><text x="26.8270%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (123 samples, 0.11%)</title><rect x="26.5770%" y="309" width="0.1053%" height="15" fill="rgb(254,142,4)" fg:x="31055" fg:w="123"/><text x="26.8270%" y="319.50"></text></g><g><title>[libc-2.31.so] (123 samples, 0.11%)</title><rect x="26.5770%" y="293" width="0.1053%" height="15" fill="rgb(230,229,49)" fg:x="31055" fg:w="123"/><text x="26.8270%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,309 samples, 1.98%)</title><rect x="24.7080%" y="741" width="1.9761%" height="15" fill="rgb(238,70,47)" fg:x="28871" fg:w="2309"/><text x="24.9580%" y="751.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,727 samples, 1.48%)</title><rect x="25.2060%" y="725" width="1.4780%" height="15" fill="rgb(231,160,17)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="735.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,727 samples, 1.48%)</title><rect x="25.2060%" y="709" width="1.4780%" height="15" fill="rgb(218,68,53)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,727 samples, 1.48%)</title><rect x="25.2060%" y="693" width="1.4780%" height="15" fill="rgb(236,111,10)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,727 samples, 1.48%)</title><rect x="25.2060%" y="677" width="1.4780%" height="15" fill="rgb(224,34,41)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,727 samples, 1.48%)</title><rect x="25.2060%" y="661" width="1.4780%" height="15" fill="rgb(241,118,19)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="671.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,727 samples, 1.48%)</title><rect x="25.2060%" y="645" width="1.4780%" height="15" fill="rgb(238,129,25)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,727 samples, 1.48%)</title><rect x="25.2060%" y="629" width="1.4780%" height="15" fill="rgb(238,22,31)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="639.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,727 samples, 1.48%)</title><rect x="25.2060%" y="613" width="1.4780%" height="15" fill="rgb(222,174,48)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,727 samples, 1.48%)</title><rect x="25.2060%" y="597" width="1.4780%" height="15" fill="rgb(206,152,40)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,727 samples, 1.48%)</title><rect x="25.2060%" y="581" width="1.4780%" height="15" fill="rgb(218,99,54)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="591.50"></text></g><g><title>std::panic::catch_unwind (1,727 samples, 1.48%)</title><rect x="25.2060%" y="565" width="1.4780%" height="15" fill="rgb(220,174,26)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="575.50"></text></g><g><title>std::panicking::try (1,727 samples, 1.48%)</title><rect x="25.2060%" y="549" width="1.4780%" height="15" fill="rgb(245,116,9)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="559.50"></text></g><g><title>std::panicking::try::do_call (1,727 samples, 1.48%)</title><rect x="25.2060%" y="533" width="1.4780%" height="15" fill="rgb(209,72,35)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,727 samples, 1.48%)</title><rect x="25.2060%" y="517" width="1.4780%" height="15" fill="rgb(226,126,21)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,727 samples, 1.48%)</title><rect x="25.2060%" y="501" width="1.4780%" height="15" fill="rgb(227,192,1)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,727 samples, 1.48%)</title><rect x="25.2060%" y="485" width="1.4780%" height="15" fill="rgb(237,180,29)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="495.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,727 samples, 1.48%)</title><rect x="25.2060%" y="469" width="1.4780%" height="15" fill="rgb(230,197,35)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,727 samples, 1.48%)</title><rect x="25.2060%" y="453" width="1.4780%" height="15" fill="rgb(246,193,31)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,727 samples, 1.48%)</title><rect x="25.2060%" y="437" width="1.4780%" height="15" fill="rgb(241,36,4)" fg:x="29453" fg:w="1727"/><text x="25.4560%" y="447.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,687 samples, 1.44%)</title><rect x="25.2403%" y="421" width="1.4437%" height="15" fill="rgb(241,130,17)" fg:x="29493" fg:w="1687"/><text x="25.4903%" y="431.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (658 samples, 0.56%)</title><rect x="26.1209%" y="405" width="0.5631%" height="15" fill="rgb(206,137,32)" fg:x="30522" fg:w="658"/><text x="26.3709%" y="415.50"></text></g><g><title>[libc-2.31.so] (223 samples, 0.19%)</title><rect x="26.9416%" y="709" width="0.1908%" height="15" fill="rgb(237,228,51)" fg:x="31481" fg:w="223"/><text x="27.1916%" y="719.50"></text></g><g><title>[libc-2.31.so] (374 samples, 0.32%)</title><rect x="27.1984%" y="693" width="0.3201%" height="15" fill="rgb(243,6,42)" fg:x="31781" fg:w="374"/><text x="27.4484%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (198 samples, 0.17%)</title><rect x="27.5184%" y="693" width="0.1694%" height="15" fill="rgb(251,74,28)" fg:x="32155" fg:w="198"/><text x="27.7684%" y="703.50"></text></g><g><title>core::ptr::write (191 samples, 0.16%)</title><rect x="27.5244%" y="677" width="0.1635%" height="15" fill="rgb(218,20,49)" fg:x="32162" fg:w="191"/><text x="27.7744%" y="687.50"></text></g><g><title>[libc-2.31.so] (189 samples, 0.16%)</title><rect x="27.5261%" y="661" width="0.1617%" height="15" fill="rgb(238,28,14)" fg:x="32164" fg:w="189"/><text x="27.7761%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (306 samples, 0.26%)</title><rect x="27.6964%" y="693" width="0.2619%" height="15" fill="rgb(229,40,46)" fg:x="32363" fg:w="306"/><text x="27.9464%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (300 samples, 0.26%)</title><rect x="27.7016%" y="677" width="0.2567%" height="15" fill="rgb(244,195,20)" fg:x="32369" fg:w="300"/><text x="27.9516%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (294 samples, 0.25%)</title><rect x="27.7067%" y="661" width="0.2516%" height="15" fill="rgb(253,56,35)" fg:x="32375" fg:w="294"/><text x="27.9567%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (294 samples, 0.25%)</title><rect x="27.7067%" y="645" width="0.2516%" height="15" fill="rgb(210,149,44)" fg:x="32375" fg:w="294"/><text x="27.9567%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (294 samples, 0.25%)</title><rect x="27.7067%" y="629" width="0.2516%" height="15" fill="rgb(240,135,12)" fg:x="32375" fg:w="294"/><text x="27.9567%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (294 samples, 0.25%)</title><rect x="27.7067%" y="613" width="0.2516%" height="15" fill="rgb(251,24,50)" fg:x="32375" fg:w="294"/><text x="27.9567%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (294 samples, 0.25%)</title><rect x="27.7067%" y="597" width="0.2516%" height="15" fill="rgb(243,200,47)" fg:x="32375" fg:w="294"/><text x="27.9567%" y="607.50"></text></g><g><title>[libc-2.31.so] (274 samples, 0.23%)</title><rect x="27.7238%" y="581" width="0.2345%" height="15" fill="rgb(224,166,26)" fg:x="32395" fg:w="274"/><text x="27.9738%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="28.3494%" y="661" width="0.0103%" height="15" fill="rgb(233,0,47)" fg:x="33126" fg:w="12"/><text x="28.5994%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="28.3665%" y="661" width="0.0154%" height="15" fill="rgb(253,80,5)" fg:x="33146" fg:w="18"/><text x="28.6165%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (260 samples, 0.22%)</title><rect x="28.3819%" y="661" width="0.2225%" height="15" fill="rgb(214,133,25)" fg:x="33164" fg:w="260"/><text x="28.6319%" y="671.50"></text></g><g><title>[libc-2.31.so] (215 samples, 0.18%)</title><rect x="28.4204%" y="645" width="0.1840%" height="15" fill="rgb(209,27,14)" fg:x="33209" fg:w="215"/><text x="28.6704%" y="655.50"></text></g><g><title>[libc-2.31.so] (692 samples, 0.59%)</title><rect x="28.6044%" y="661" width="0.5922%" height="15" fill="rgb(219,102,51)" fg:x="33424" fg:w="692"/><text x="28.8544%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (351 samples, 0.30%)</title><rect x="29.2061%" y="661" width="0.3004%" height="15" fill="rgb(237,18,16)" fg:x="34127" fg:w="351"/><text x="29.4561%" y="671.50"></text></g><g><title>core::ptr::read (335 samples, 0.29%)</title><rect x="29.2198%" y="645" width="0.2867%" height="15" fill="rgb(241,85,17)" fg:x="34143" fg:w="335"/><text x="29.4698%" y="655.50"></text></g><g><title>[libc-2.31.so] (288 samples, 0.25%)</title><rect x="29.2600%" y="629" width="0.2465%" height="15" fill="rgb(236,90,42)" fg:x="34190" fg:w="288"/><text x="29.5100%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (160 samples, 0.14%)</title><rect x="29.5065%" y="661" width="0.1369%" height="15" fill="rgb(249,57,21)" fg:x="34478" fg:w="160"/><text x="29.7565%" y="671.50"></text></g><g><title>core::ptr::write (150 samples, 0.13%)</title><rect x="29.5150%" y="645" width="0.1284%" height="15" fill="rgb(243,12,36)" fg:x="34488" fg:w="150"/><text x="29.7650%" y="655.50"></text></g><g><title>[libc-2.31.so] (150 samples, 0.13%)</title><rect x="29.5150%" y="629" width="0.1284%" height="15" fill="rgb(253,128,47)" fg:x="34488" fg:w="150"/><text x="29.7650%" y="639.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (20 samples, 0.02%)</title><rect x="29.6537%" y="629" width="0.0171%" height="15" fill="rgb(207,33,20)" fg:x="34650" fg:w="20"/><text x="29.9037%" y="639.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (12 samples, 0.01%)</title><rect x="29.6605%" y="613" width="0.0103%" height="15" fill="rgb(233,215,35)" fg:x="34658" fg:w="12"/><text x="29.9105%" y="623.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (12 samples, 0.01%)</title><rect x="29.6605%" y="597" width="0.0103%" height="15" fill="rgb(249,188,52)" fg:x="34658" fg:w="12"/><text x="29.9105%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="29.6605%" y="581" width="0.0103%" height="15" fill="rgb(225,12,32)" fg:x="34658" fg:w="12"/><text x="29.9105%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (12 samples, 0.01%)</title><rect x="29.6605%" y="565" width="0.0103%" height="15" fill="rgb(247,98,14)" fg:x="34658" fg:w="12"/><text x="29.9105%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (46 samples, 0.04%)</title><rect x="29.6434%" y="661" width="0.0394%" height="15" fill="rgb(247,219,48)" fg:x="34638" fg:w="46"/><text x="29.8934%" y="671.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="29.6537%" y="645" width="0.0291%" height="15" fill="rgb(253,60,48)" fg:x="34650" fg:w="34"/><text x="29.9037%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (19 samples, 0.02%)</title><rect x="29.6905%" y="661" width="0.0163%" height="15" fill="rgb(245,15,52)" fg:x="34693" fg:w="19"/><text x="29.9405%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (19 samples, 0.02%)</title><rect x="29.6905%" y="645" width="0.0163%" height="15" fill="rgb(220,133,28)" fg:x="34693" fg:w="19"/><text x="29.9405%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (19 samples, 0.02%)</title><rect x="29.6905%" y="629" width="0.0163%" height="15" fill="rgb(217,180,4)" fg:x="34693" fg:w="19"/><text x="29.9405%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.02%)</title><rect x="29.6905%" y="613" width="0.0163%" height="15" fill="rgb(251,24,1)" fg:x="34693" fg:w="19"/><text x="29.9405%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (188 samples, 0.16%)</title><rect x="29.9498%" y="645" width="0.1609%" height="15" fill="rgb(212,185,49)" fg:x="34996" fg:w="188"/><text x="30.1998%" y="655.50"></text></g><g><title>core::ptr::read (144 samples, 0.12%)</title><rect x="29.9874%" y="629" width="0.1232%" height="15" fill="rgb(215,175,22)" fg:x="35040" fg:w="144"/><text x="30.2374%" y="639.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="30.0225%" y="613" width="0.0881%" height="15" fill="rgb(250,205,14)" fg:x="35081" fg:w="103"/><text x="30.2725%" y="623.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="30.1107%" y="645" width="0.0154%" height="15" fill="rgb(225,211,22)" fg:x="35184" fg:w="18"/><text x="30.3607%" y="655.50"></text></g><g><title>[libc-2.31.so] (313 samples, 0.27%)</title><rect x="30.1261%" y="645" width="0.2679%" height="15" fill="rgb(251,179,42)" fg:x="35202" fg:w="313"/><text x="30.3761%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (359 samples, 0.31%)</title><rect x="30.3939%" y="645" width="0.3072%" height="15" fill="rgb(208,216,51)" fg:x="35515" fg:w="359"/><text x="30.6439%" y="655.50"></text></g><g><title>core::ptr::write (352 samples, 0.30%)</title><rect x="30.3999%" y="629" width="0.3012%" height="15" fill="rgb(235,36,11)" fg:x="35522" fg:w="352"/><text x="30.6499%" y="639.50"></text></g><g><title>[libc-2.31.so] (348 samples, 0.30%)</title><rect x="30.4033%" y="613" width="0.2978%" height="15" fill="rgb(213,189,28)" fg:x="35526" fg:w="348"/><text x="30.6533%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (18 samples, 0.02%)</title><rect x="30.7012%" y="645" width="0.0154%" height="15" fill="rgb(227,203,42)" fg:x="35874" fg:w="18"/><text x="30.9512%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (18 samples, 0.02%)</title><rect x="30.7012%" y="629" width="0.0154%" height="15" fill="rgb(244,72,36)" fg:x="35874" fg:w="18"/><text x="30.9512%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;)&gt; (12 samples, 0.01%)</title><rect x="30.7166%" y="645" width="0.0103%" height="15" fill="rgb(213,53,17)" fg:x="35892" fg:w="12"/><text x="30.9666%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (12 samples, 0.01%)</title><rect x="30.7166%" y="629" width="0.0103%" height="15" fill="rgb(207,167,3)" fg:x="35892" fg:w="12"/><text x="30.9666%" y="639.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="30.7166%" y="613" width="0.0103%" height="15" fill="rgb(216,98,30)" fg:x="35892" fg:w="12"/><text x="30.9666%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (26 samples, 0.02%)</title><rect x="30.7431%" y="613" width="0.0223%" height="15" fill="rgb(236,123,15)" fg:x="35923" fg:w="26"/><text x="30.9931%" y="623.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="30.7431%" y="597" width="0.0223%" height="15" fill="rgb(248,81,50)" fg:x="35923" fg:w="26"/><text x="30.9931%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (18 samples, 0.02%)</title><rect x="30.7499%" y="581" width="0.0154%" height="15" fill="rgb(214,120,4)" fg:x="35931" fg:w="18"/><text x="30.9999%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="30.7499%" y="565" width="0.0154%" height="15" fill="rgb(208,179,34)" fg:x="35931" fg:w="18"/><text x="30.9999%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="30.7499%" y="549" width="0.0154%" height="15" fill="rgb(227,140,7)" fg:x="35931" fg:w="18"/><text x="30.9999%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.02%)</title><rect x="30.7499%" y="533" width="0.0154%" height="15" fill="rgb(214,22,6)" fg:x="35931" fg:w="18"/><text x="30.9999%" y="543.50"></text></g><g><title>__rg_dealloc (18 samples, 0.02%)</title><rect x="30.7499%" y="517" width="0.0154%" height="15" fill="rgb(207,137,27)" fg:x="35931" fg:w="18"/><text x="30.9999%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.02%)</title><rect x="30.7499%" y="501" width="0.0154%" height="15" fill="rgb(210,8,46)" fg:x="35931" fg:w="18"/><text x="30.9999%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="30.7268%" y="629" width="0.0479%" height="15" fill="rgb(240,16,54)" fg:x="35904" fg:w="56"/><text x="30.9768%" y="639.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.05%)</title><rect x="30.7748%" y="629" width="0.0539%" height="15" fill="rgb(211,209,29)" fg:x="35960" fg:w="63"/><text x="31.0248%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (125 samples, 0.11%)</title><rect x="30.7268%" y="645" width="0.1070%" height="15" fill="rgb(226,228,24)" fg:x="35904" fg:w="125"/><text x="30.9768%" y="655.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (13 samples, 0.01%)</title><rect x="30.8398%" y="645" width="0.0111%" height="15" fill="rgb(222,84,9)" fg:x="36036" fg:w="13"/><text x="31.0898%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (13 samples, 0.01%)</title><rect x="30.8398%" y="629" width="0.0111%" height="15" fill="rgb(234,203,30)" fg:x="36036" fg:w="13"/><text x="31.0898%" y="639.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="30.8398%" y="613" width="0.0111%" height="15" fill="rgb(238,109,14)" fg:x="36036" fg:w="13"/><text x="31.0898%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.05%)</title><rect x="30.8715%" y="613" width="0.0479%" height="15" fill="rgb(233,206,34)" fg:x="36073" fg:w="56"/><text x="31.1215%" y="623.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (32 samples, 0.03%)</title><rect x="30.8920%" y="597" width="0.0274%" height="15" fill="rgb(220,167,47)" fg:x="36097" fg:w="32"/><text x="31.1420%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (32 samples, 0.03%)</title><rect x="30.8920%" y="581" width="0.0274%" height="15" fill="rgb(238,105,10)" fg:x="36097" fg:w="32"/><text x="31.1420%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (127 samples, 0.11%)</title><rect x="30.9382%" y="581" width="0.1087%" height="15" fill="rgb(213,227,17)" fg:x="36151" fg:w="127"/><text x="31.1882%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (120 samples, 0.10%)</title><rect x="30.9442%" y="565" width="0.1027%" height="15" fill="rgb(217,132,38)" fg:x="36158" fg:w="120"/><text x="31.1942%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (120 samples, 0.10%)</title><rect x="30.9442%" y="549" width="0.1027%" height="15" fill="rgb(242,146,4)" fg:x="36158" fg:w="120"/><text x="31.1942%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (120 samples, 0.10%)</title><rect x="30.9442%" y="533" width="0.1027%" height="15" fill="rgb(212,61,9)" fg:x="36158" fg:w="120"/><text x="31.1942%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (120 samples, 0.10%)</title><rect x="30.9442%" y="517" width="0.1027%" height="15" fill="rgb(247,126,22)" fg:x="36158" fg:w="120"/><text x="31.1942%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (120 samples, 0.10%)</title><rect x="30.9442%" y="501" width="0.1027%" height="15" fill="rgb(220,196,2)" fg:x="36158" fg:w="120"/><text x="31.1942%" y="511.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.08%)</title><rect x="30.9622%" y="485" width="0.0847%" height="15" fill="rgb(208,46,4)" fg:x="36179" fg:w="99"/><text x="31.2122%" y="495.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (236 samples, 0.20%)</title><rect x="30.8509%" y="645" width="0.2020%" height="15" fill="rgb(252,104,46)" fg:x="36049" fg:w="236"/><text x="31.1009%" y="655.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (229 samples, 0.20%)</title><rect x="30.8569%" y="629" width="0.1960%" height="15" fill="rgb(237,152,48)" fg:x="36056" fg:w="229"/><text x="31.1069%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (156 samples, 0.13%)</title><rect x="30.9194%" y="613" width="0.1335%" height="15" fill="rgb(221,59,37)" fg:x="36129" fg:w="156"/><text x="31.1694%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (K,L)&gt;::eq (156 samples, 0.13%)</title><rect x="30.9194%" y="597" width="0.1335%" height="15" fill="rgb(209,202,51)" fg:x="36129" fg:w="156"/><text x="31.1694%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (69 samples, 0.06%)</title><rect x="31.0692%" y="613" width="0.0591%" height="15" fill="rgb(228,81,30)" fg:x="36304" fg:w="69"/><text x="31.3192%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="31.1428%" y="597" width="0.0111%" height="15" fill="rgb(227,42,39)" fg:x="36390" fg:w="13"/><text x="31.3928%" y="607.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="31.1428%" y="581" width="0.0111%" height="15" fill="rgb(221,26,2)" fg:x="36390" fg:w="13"/><text x="31.3928%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="31.1633%" y="533" width="0.0163%" height="15" fill="rgb(254,61,31)" fg:x="36414" fg:w="19"/><text x="31.4133%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="31.1633%" y="517" width="0.0163%" height="15" fill="rgb(222,173,38)" fg:x="36414" fg:w="19"/><text x="31.4133%" y="527.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (20 samples, 0.02%)</title><rect x="31.1796%" y="501" width="0.0171%" height="15" fill="rgb(218,50,12)" fg:x="36433" fg:w="20"/><text x="31.4296%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (211 samples, 0.18%)</title><rect x="31.1282%" y="613" width="0.1806%" height="15" fill="rgb(223,88,40)" fg:x="36373" fg:w="211"/><text x="31.3782%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (181 samples, 0.15%)</title><rect x="31.1539%" y="597" width="0.1549%" height="15" fill="rgb(237,54,19)" fg:x="36403" fg:w="181"/><text x="31.4039%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (181 samples, 0.15%)</title><rect x="31.1539%" y="581" width="0.1549%" height="15" fill="rgb(251,129,25)" fg:x="36403" fg:w="181"/><text x="31.4039%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (181 samples, 0.15%)</title><rect x="31.1539%" y="565" width="0.1549%" height="15" fill="rgb(238,97,19)" fg:x="36403" fg:w="181"/><text x="31.4039%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (181 samples, 0.15%)</title><rect x="31.1539%" y="549" width="0.1549%" height="15" fill="rgb(240,169,18)" fg:x="36403" fg:w="181"/><text x="31.4039%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (151 samples, 0.13%)</title><rect x="31.1796%" y="533" width="0.1292%" height="15" fill="rgb(230,187,49)" fg:x="36433" fg:w="151"/><text x="31.4296%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (151 samples, 0.13%)</title><rect x="31.1796%" y="517" width="0.1292%" height="15" fill="rgb(209,44,26)" fg:x="36433" fg:w="151"/><text x="31.4296%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (131 samples, 0.11%)</title><rect x="31.1967%" y="501" width="0.1121%" height="15" fill="rgb(244,0,6)" fg:x="36453" fg:w="131"/><text x="31.4467%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (131 samples, 0.11%)</title><rect x="31.1967%" y="485" width="0.1121%" height="15" fill="rgb(248,18,21)" fg:x="36453" fg:w="131"/><text x="31.4467%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (131 samples, 0.11%)</title><rect x="31.1967%" y="469" width="0.1121%" height="15" fill="rgb(245,180,19)" fg:x="36453" fg:w="131"/><text x="31.4467%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (131 samples, 0.11%)</title><rect x="31.1967%" y="453" width="0.1121%" height="15" fill="rgb(252,118,36)" fg:x="36453" fg:w="131"/><text x="31.4467%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (131 samples, 0.11%)</title><rect x="31.1967%" y="437" width="0.1121%" height="15" fill="rgb(210,224,19)" fg:x="36453" fg:w="131"/><text x="31.4467%" y="447.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="31.2711%" y="421" width="0.0377%" height="15" fill="rgb(218,30,24)" fg:x="36540" fg:w="44"/><text x="31.5211%" y="431.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,905 samples, 1.63%)</title><rect x="29.7067%" y="661" width="1.6303%" height="15" fill="rgb(219,75,50)" fg:x="34712" fg:w="1905"/><text x="29.9567%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (332 samples, 0.28%)</title><rect x="31.0529%" y="645" width="0.2841%" height="15" fill="rgb(234,72,50)" fg:x="36285" fg:w="332"/><text x="31.3029%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (328 samples, 0.28%)</title><rect x="31.0563%" y="629" width="0.2807%" height="15" fill="rgb(219,100,48)" fg:x="36289" fg:w="328"/><text x="31.3063%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (33 samples, 0.03%)</title><rect x="31.3088%" y="613" width="0.0282%" height="15" fill="rgb(253,5,41)" fg:x="36584" fg:w="33"/><text x="31.5588%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (19 samples, 0.02%)</title><rect x="31.3208%" y="597" width="0.0163%" height="15" fill="rgb(247,181,11)" fg:x="36598" fg:w="19"/><text x="31.5708%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (17 samples, 0.01%)</title><rect x="31.3473%" y="629" width="0.0145%" height="15" fill="rgb(222,223,25)" fg:x="36629" fg:w="17"/><text x="31.5973%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (17 samples, 0.01%)</title><rect x="31.3738%" y="613" width="0.0145%" height="15" fill="rgb(214,198,28)" fg:x="36660" fg:w="17"/><text x="31.6238%" y="623.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (17 samples, 0.01%)</title><rect x="31.3738%" y="597" width="0.0145%" height="15" fill="rgb(230,46,43)" fg:x="36660" fg:w="17"/><text x="31.6238%" y="607.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (124 samples, 0.11%)</title><rect x="31.3618%" y="629" width="0.1061%" height="15" fill="rgb(233,65,53)" fg:x="36646" fg:w="124"/><text x="31.6118%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (93 samples, 0.08%)</title><rect x="31.3884%" y="613" width="0.0796%" height="15" fill="rgb(221,121,27)" fg:x="36677" fg:w="93"/><text x="31.6384%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (93 samples, 0.08%)</title><rect x="31.3884%" y="597" width="0.0796%" height="15" fill="rgb(247,70,47)" fg:x="36677" fg:w="93"/><text x="31.6384%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (93 samples, 0.08%)</title><rect x="31.3884%" y="581" width="0.0796%" height="15" fill="rgb(228,85,35)" fg:x="36677" fg:w="93"/><text x="31.6384%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (93 samples, 0.08%)</title><rect x="31.3884%" y="565" width="0.0796%" height="15" fill="rgb(209,50,18)" fg:x="36677" fg:w="93"/><text x="31.6384%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (72 samples, 0.06%)</title><rect x="31.4063%" y="549" width="0.0616%" height="15" fill="rgb(250,19,35)" fg:x="36698" fg:w="72"/><text x="31.6563%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (72 samples, 0.06%)</title><rect x="31.4063%" y="533" width="0.0616%" height="15" fill="rgb(253,107,29)" fg:x="36698" fg:w="72"/><text x="31.6563%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (69 samples, 0.06%)</title><rect x="31.4089%" y="517" width="0.0591%" height="15" fill="rgb(252,179,29)" fg:x="36701" fg:w="69"/><text x="31.6589%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (69 samples, 0.06%)</title><rect x="31.4089%" y="501" width="0.0591%" height="15" fill="rgb(238,194,6)" fg:x="36701" fg:w="69"/><text x="31.6589%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (69 samples, 0.06%)</title><rect x="31.4089%" y="485" width="0.0591%" height="15" fill="rgb(238,164,29)" fg:x="36701" fg:w="69"/><text x="31.6589%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (69 samples, 0.06%)</title><rect x="31.4089%" y="469" width="0.0591%" height="15" fill="rgb(224,25,9)" fg:x="36701" fg:w="69"/><text x="31.6589%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (69 samples, 0.06%)</title><rect x="31.4089%" y="453" width="0.0591%" height="15" fill="rgb(244,153,23)" fg:x="36701" fg:w="69"/><text x="31.6589%" y="463.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="31.4380%" y="437" width="0.0300%" height="15" fill="rgb(212,203,14)" fg:x="36735" fg:w="35"/><text x="31.6880%" y="447.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,135 samples, 4.39%)</title><rect x="27.1325%" y="709" width="4.3946%" height="15" fill="rgb(220,164,20)" fg:x="31704" fg:w="5135"/><text x="27.3825%" y="719.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,170 samples, 3.57%)</title><rect x="27.9583%" y="693" width="3.5687%" height="15" fill="rgb(222,203,48)" fg:x="32669" fg:w="4170"/><text x="28.2083%" y="703.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,160 samples, 3.56%)</title><rect x="27.9669%" y="677" width="3.5602%" height="15" fill="rgb(215,159,22)" fg:x="32679" fg:w="4160"/><text x="28.2169%" y="687.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (222 samples, 0.19%)</title><rect x="31.3370%" y="661" width="0.1900%" height="15" fill="rgb(216,183,47)" fg:x="36617" fg:w="222"/><text x="31.5870%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (222 samples, 0.19%)</title><rect x="31.3370%" y="645" width="0.1900%" height="15" fill="rgb(229,195,25)" fg:x="36617" fg:w="222"/><text x="31.5870%" y="655.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (69 samples, 0.06%)</title><rect x="31.4680%" y="629" width="0.0591%" height="15" fill="rgb(224,132,51)" fg:x="36770" fg:w="69"/><text x="31.7180%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (31 samples, 0.03%)</title><rect x="31.5005%" y="613" width="0.0265%" height="15" fill="rgb(240,63,7)" fg:x="36808" fg:w="31"/><text x="31.7505%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (16 samples, 0.01%)</title><rect x="31.5133%" y="597" width="0.0137%" height="15" fill="rgb(249,182,41)" fg:x="36823" fg:w="16"/><text x="31.7633%" y="607.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (16 samples, 0.01%)</title><rect x="31.5133%" y="581" width="0.0137%" height="15" fill="rgb(243,47,26)" fg:x="36823" fg:w="16"/><text x="31.7633%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,393 samples, 4.62%)</title><rect x="26.9331%" y="725" width="4.6154%" height="15" fill="rgb(233,48,2)" fg:x="31471" fg:w="5393"/><text x="27.1831%" y="735.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (25 samples, 0.02%)</title><rect x="31.5270%" y="709" width="0.0214%" height="15" fill="rgb(244,165,34)" fg:x="36839" fg:w="25"/><text x="31.7770%" y="719.50"></text></g><g><title>[libc-2.31.so] (745 samples, 0.64%)</title><rect x="31.5484%" y="725" width="0.6376%" height="15" fill="rgb(207,89,7)" fg:x="36864" fg:w="745"/><text x="31.7984%" y="735.50"></text></g><g><title>sn_rust_dealloc (94 samples, 0.08%)</title><rect x="32.1928%" y="565" width="0.0804%" height="15" fill="rgb(244,117,36)" fg:x="37617" fg:w="94"/><text x="32.4428%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (103 samples, 0.09%)</title><rect x="32.1860%" y="725" width="0.0881%" height="15" fill="rgb(226,144,34)" fg:x="37609" fg:w="103"/><text x="32.4360%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (103 samples, 0.09%)</title><rect x="32.1860%" y="709" width="0.0881%" height="15" fill="rgb(213,23,19)" fg:x="37609" fg:w="103"/><text x="32.4360%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (95 samples, 0.08%)</title><rect x="32.1928%" y="693" width="0.0813%" height="15" fill="rgb(217,75,12)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (95 samples, 0.08%)</title><rect x="32.1928%" y="677" width="0.0813%" height="15" fill="rgb(224,159,17)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (95 samples, 0.08%)</title><rect x="32.1928%" y="661" width="0.0813%" height="15" fill="rgb(217,118,1)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 0.08%)</title><rect x="32.1928%" y="645" width="0.0813%" height="15" fill="rgb(232,180,48)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (95 samples, 0.08%)</title><rect x="32.1928%" y="629" width="0.0813%" height="15" fill="rgb(230,27,33)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (95 samples, 0.08%)</title><rect x="32.1928%" y="613" width="0.0813%" height="15" fill="rgb(205,31,21)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="623.50"></text></g><g><title>__rg_dealloc (95 samples, 0.08%)</title><rect x="32.1928%" y="597" width="0.0813%" height="15" fill="rgb(253,59,4)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (95 samples, 0.08%)</title><rect x="32.1928%" y="581" width="0.0813%" height="15" fill="rgb(224,201,9)" fg:x="37617" fg:w="95"/><text x="32.4428%" y="591.50"></text></g><g><title>async_global_executor::reactor::block_on (18,636 samples, 15.95%)</title><rect x="16.3330%" y="1077" width="15.9488%" height="15" fill="rgb(229,206,30)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="1087.50">async_global_executor::re..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,636 samples, 15.95%)</title><rect x="16.3330%" y="1061" width="15.9488%" height="15" fill="rgb(212,67,47)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="1071.50">async_global_executor::re..</text></g><g><title>async_io::driver::block_on (18,636 samples, 15.95%)</title><rect x="16.3330%" y="1045" width="15.9488%" height="15" fill="rgb(211,96,50)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="1055.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="1029" width="15.9488%" height="15" fill="rgb(252,114,18)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="1039.50">&lt;futures_lite::future::Or..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="1013" width="15.9488%" height="15" fill="rgb(223,58,37)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="1023.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,636 samples, 15.95%)</title><rect x="16.3330%" y="997" width="15.9488%" height="15" fill="rgb(237,70,4)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="1007.50">async_executor::Executor:..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="981" width="15.9488%" height="15" fill="rgb(244,85,46)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="991.50">&lt;futures_lite::future::Or..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="965" width="15.9488%" height="15" fill="rgb(223,39,52)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="975.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,636 samples, 15.95%)</title><rect x="16.3330%" y="949" width="15.9488%" height="15" fill="rgb(218,200,14)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="959.50">async_executor::Executor:..</text></g><g><title>async_task::runnable::Runnable::run (18,636 samples, 15.95%)</title><rect x="16.3330%" y="933" width="15.9488%" height="15" fill="rgb(208,171,16)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="943.50">async_task::runnable::Run..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,636 samples, 15.95%)</title><rect x="16.3330%" y="917" width="15.9488%" height="15" fill="rgb(234,200,18)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="927.50">async_task::raw::RawTask&lt;..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="901" width="15.9488%" height="15" fill="rgb(228,45,11)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="885" width="15.9488%" height="15" fill="rgb(237,182,11)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="895.50">&lt;core::future::from_gener..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,636 samples, 15.95%)</title><rect x="16.3330%" y="869" width="15.9488%" height="15" fill="rgb(241,175,49)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="879.50">async_executor::Executor:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="853" width="15.9488%" height="15" fill="rgb(247,38,35)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="863.50">&lt;async_std::task::builder..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,636 samples, 15.95%)</title><rect x="16.3330%" y="837" width="15.9488%" height="15" fill="rgb(228,39,49)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="847.50">async_std::task::task_loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,636 samples, 15.95%)</title><rect x="16.3330%" y="821" width="15.9488%" height="15" fill="rgb(226,101,26)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="831.50">std::thread::local::Local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,636 samples, 15.95%)</title><rect x="16.3330%" y="805" width="15.9488%" height="15" fill="rgb(206,141,19)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="815.50">std::thread::local::Local..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,636 samples, 15.95%)</title><rect x="16.3330%" y="789" width="15.9488%" height="15" fill="rgb(211,200,13)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="799.50">async_std::task::task_loc..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,636 samples, 15.95%)</title><rect x="16.3330%" y="773" width="15.9488%" height="15" fill="rgb(241,121,6)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="783.50">&lt;async_std::task::builder..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,636 samples, 15.95%)</title><rect x="16.3330%" y="757" width="15.9488%" height="15" fill="rgb(234,221,29)" fg:x="19085" fg:w="18636"/><text x="16.5830%" y="767.50">&lt;core::future::from_gener..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,541 samples, 5.60%)</title><rect x="26.6840%" y="741" width="5.5978%" height="15" fill="rgb(229,136,5)" fg:x="31180" fg:w="6541"/><text x="26.9340%" y="751.50">tremor_..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (53 samples, 0.05%)</title><rect x="32.4710%" y="565" width="0.0454%" height="15" fill="rgb(238,36,11)" fg:x="37942" fg:w="53"/><text x="32.7210%" y="575.50"></text></g><g><title>[libc-2.31.so] (50 samples, 0.04%)</title><rect x="32.4735%" y="549" width="0.0428%" height="15" fill="rgb(251,55,41)" fg:x="37945" fg:w="50"/><text x="32.7235%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="32.5163%" y="565" width="0.0111%" height="15" fill="rgb(242,34,40)" fg:x="37995" fg:w="13"/><text x="32.7663%" y="575.50"></text></g><g><title>[libc-2.31.so] (141 samples, 0.12%)</title><rect x="32.5274%" y="549" width="0.1207%" height="15" fill="rgb(215,42,17)" fg:x="38008" fg:w="141"/><text x="32.7774%" y="559.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.04%)</title><rect x="32.7423%" y="533" width="0.0419%" height="15" fill="rgb(207,44,46)" fg:x="38259" fg:w="49"/><text x="32.9923%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (134 samples, 0.11%)</title><rect x="32.7868%" y="533" width="0.1147%" height="15" fill="rgb(211,206,28)" fg:x="38311" fg:w="134"/><text x="33.0368%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (131 samples, 0.11%)</title><rect x="32.7893%" y="517" width="0.1121%" height="15" fill="rgb(237,167,16)" fg:x="38314" fg:w="131"/><text x="33.0393%" y="527.50"></text></g><g><title>value_trait::Builder::object (131 samples, 0.11%)</title><rect x="32.7893%" y="501" width="0.1121%" height="15" fill="rgb(233,66,6)" fg:x="38314" fg:w="131"/><text x="33.0393%" y="511.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (127 samples, 0.11%)</title><rect x="32.7927%" y="485" width="0.1087%" height="15" fill="rgb(246,123,29)" fg:x="38318" fg:w="127"/><text x="33.0427%" y="495.50"></text></g><g><title>tremor_value::value::Value::Object (124 samples, 0.11%)</title><rect x="32.7953%" y="469" width="0.1061%" height="15" fill="rgb(209,62,40)" fg:x="38321" fg:w="124"/><text x="33.0453%" y="479.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.05%)</title><rect x="32.9203%" y="469" width="0.0462%" height="15" fill="rgb(218,4,25)" fg:x="38467" fg:w="54"/><text x="33.1703%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (69 samples, 0.06%)</title><rect x="32.9083%" y="517" width="0.0591%" height="15" fill="rgb(253,91,49)" fg:x="38453" fg:w="69"/><text x="33.1583%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (69 samples, 0.06%)</title><rect x="32.9083%" y="501" width="0.0591%" height="15" fill="rgb(228,155,29)" fg:x="38453" fg:w="69"/><text x="33.1583%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (69 samples, 0.06%)</title><rect x="32.9083%" y="485" width="0.0591%" height="15" fill="rgb(243,57,37)" fg:x="38453" fg:w="69"/><text x="33.1583%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (89 samples, 0.08%)</title><rect x="32.9074%" y="533" width="0.0762%" height="15" fill="rgb(244,167,17)" fg:x="38452" fg:w="89"/><text x="33.1574%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (19 samples, 0.02%)</title><rect x="32.9673%" y="517" width="0.0163%" height="15" fill="rgb(207,181,38)" fg:x="38522" fg:w="19"/><text x="33.2173%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="32.9673%" y="501" width="0.0163%" height="15" fill="rgb(211,8,23)" fg:x="38522" fg:w="19"/><text x="33.2173%" y="511.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="32.9682%" y="485" width="0.0154%" height="15" fill="rgb(235,11,44)" fg:x="38523" fg:w="18"/><text x="33.2182%" y="495.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="32.9999%" y="469" width="0.0154%" height="15" fill="rgb(248,18,52)" fg:x="38560" fg:w="18"/><text x="33.2499%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (572 samples, 0.49%)</title><rect x="32.5274%" y="565" width="0.4895%" height="15" fill="rgb(208,4,7)" fg:x="38008" fg:w="572"/><text x="32.7774%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (431 samples, 0.37%)</title><rect x="32.6481%" y="549" width="0.3689%" height="15" fill="rgb(240,17,39)" fg:x="38149" fg:w="431"/><text x="32.8981%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (39 samples, 0.03%)</title><rect x="32.9836%" y="533" width="0.0334%" height="15" fill="rgb(207,170,3)" fg:x="38541" fg:w="39"/><text x="33.2336%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="32.9930%" y="517" width="0.0240%" height="15" fill="rgb(236,100,52)" fg:x="38552" fg:w="28"/><text x="33.2430%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="32.9930%" y="501" width="0.0240%" height="15" fill="rgb(246,78,51)" fg:x="38552" fg:w="28"/><text x="33.2430%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="32.9930%" y="485" width="0.0240%" height="15" fill="rgb(211,17,15)" fg:x="38552" fg:w="28"/><text x="33.2430%" y="495.50"></text></g><g><title>[libc-2.31.so] (212 samples, 0.18%)</title><rect x="33.0170%" y="565" width="0.1814%" height="15" fill="rgb(209,59,46)" fg:x="38580" fg:w="212"/><text x="33.2670%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,125 samples, 0.96%)</title><rect x="32.2895%" y="597" width="0.9628%" height="15" fill="rgb(210,92,25)" fg:x="37730" fg:w="1125"/><text x="32.5395%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,125 samples, 0.96%)</title><rect x="32.2895%" y="581" width="0.9628%" height="15" fill="rgb(238,174,52)" fg:x="37730" fg:w="1125"/><text x="32.5395%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (52 samples, 0.04%)</title><rect x="33.2078%" y="565" width="0.0445%" height="15" fill="rgb(230,73,7)" fg:x="38803" fg:w="52"/><text x="33.4578%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (85 samples, 0.07%)</title><rect x="33.2540%" y="437" width="0.0727%" height="15" fill="rgb(243,124,40)" fg:x="38857" fg:w="85"/><text x="33.5040%" y="447.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (85 samples, 0.07%)</title><rect x="33.2540%" y="421" width="0.0727%" height="15" fill="rgb(244,170,11)" fg:x="38857" fg:w="85"/><text x="33.5040%" y="431.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (85 samples, 0.07%)</title><rect x="33.2540%" y="405" width="0.0727%" height="15" fill="rgb(207,114,54)" fg:x="38857" fg:w="85"/><text x="33.5040%" y="415.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.06%)</title><rect x="33.2652%" y="389" width="0.0616%" height="15" fill="rgb(205,42,20)" fg:x="38870" fg:w="72"/><text x="33.5152%" y="399.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (164 samples, 0.14%)</title><rect x="33.2523%" y="517" width="0.1404%" height="15" fill="rgb(230,30,28)" fg:x="38855" fg:w="164"/><text x="33.5023%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (164 samples, 0.14%)</title><rect x="33.2523%" y="501" width="0.1404%" height="15" fill="rgb(205,73,54)" fg:x="38855" fg:w="164"/><text x="33.5023%" y="511.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (164 samples, 0.14%)</title><rect x="33.2523%" y="485" width="0.1404%" height="15" fill="rgb(254,227,23)" fg:x="38855" fg:w="164"/><text x="33.5023%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (164 samples, 0.14%)</title><rect x="33.2523%" y="469" width="0.1404%" height="15" fill="rgb(228,202,34)" fg:x="38855" fg:w="164"/><text x="33.5023%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (164 samples, 0.14%)</title><rect x="33.2523%" y="453" width="0.1404%" height="15" fill="rgb(222,225,37)" fg:x="38855" fg:w="164"/><text x="33.5023%" y="463.50"></text></g><g><title>std::panic::catch_unwind (77 samples, 0.07%)</title><rect x="33.3268%" y="437" width="0.0659%" height="15" fill="rgb(221,14,54)" fg:x="38942" fg:w="77"/><text x="33.5768%" y="447.50"></text></g><g><title>std::panicking::try (77 samples, 0.07%)</title><rect x="33.3268%" y="421" width="0.0659%" height="15" fill="rgb(254,102,2)" fg:x="38942" fg:w="77"/><text x="33.5768%" y="431.50"></text></g><g><title>std::panicking::try::do_call (77 samples, 0.07%)</title><rect x="33.3268%" y="405" width="0.0659%" height="15" fill="rgb(232,104,17)" fg:x="38942" fg:w="77"/><text x="33.5768%" y="415.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="33.3644%" y="389" width="0.0282%" height="15" fill="rgb(250,220,14)" fg:x="38986" fg:w="33"/><text x="33.6144%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (43 samples, 0.04%)</title><rect x="33.4243%" y="293" width="0.0368%" height="15" fill="rgb(241,158,9)" fg:x="39056" fg:w="43"/><text x="33.6743%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,370 samples, 1.17%)</title><rect x="32.2895%" y="613" width="1.1725%" height="15" fill="rgb(246,9,43)" fg:x="37730" fg:w="1370"/><text x="32.5395%" y="623.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (245 samples, 0.21%)</title><rect x="33.2523%" y="597" width="0.2097%" height="15" fill="rgb(206,73,33)" fg:x="38855" fg:w="245"/><text x="33.5023%" y="607.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (245 samples, 0.21%)</title><rect x="33.2523%" y="581" width="0.2097%" height="15" fill="rgb(222,79,8)" fg:x="38855" fg:w="245"/><text x="33.5023%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (245 samples, 0.21%)</title><rect x="33.2523%" y="565" width="0.2097%" height="15" fill="rgb(234,8,54)" fg:x="38855" fg:w="245"/><text x="33.5023%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (245 samples, 0.21%)</title><rect x="33.2523%" y="549" width="0.2097%" height="15" fill="rgb(209,134,38)" fg:x="38855" fg:w="245"/><text x="33.5023%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (245 samples, 0.21%)</title><rect x="33.2523%" y="533" width="0.2097%" height="15" fill="rgb(230,127,29)" fg:x="38855" fg:w="245"/><text x="33.5023%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (74 samples, 0.06%)</title><rect x="33.3987%" y="517" width="0.0633%" height="15" fill="rgb(242,44,41)" fg:x="39026" fg:w="74"/><text x="33.6487%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (74 samples, 0.06%)</title><rect x="33.3987%" y="501" width="0.0633%" height="15" fill="rgb(222,56,43)" fg:x="39026" fg:w="74"/><text x="33.6487%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (65 samples, 0.06%)</title><rect x="33.4064%" y="485" width="0.0556%" height="15" fill="rgb(238,39,47)" fg:x="39035" fg:w="65"/><text x="33.6564%" y="495.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (65 samples, 0.06%)</title><rect x="33.4064%" y="469" width="0.0556%" height="15" fill="rgb(226,79,43)" fg:x="39035" fg:w="65"/><text x="33.6564%" y="479.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (65 samples, 0.06%)</title><rect x="33.4064%" y="453" width="0.0556%" height="15" fill="rgb(242,105,53)" fg:x="39035" fg:w="65"/><text x="33.6564%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (65 samples, 0.06%)</title><rect x="33.4064%" y="437" width="0.0556%" height="15" fill="rgb(251,132,46)" fg:x="39035" fg:w="65"/><text x="33.6564%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (63 samples, 0.05%)</title><rect x="33.4081%" y="421" width="0.0539%" height="15" fill="rgb(231,77,14)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (63 samples, 0.05%)</title><rect x="33.4081%" y="405" width="0.0539%" height="15" fill="rgb(240,135,9)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.05%)</title><rect x="33.4081%" y="389" width="0.0539%" height="15" fill="rgb(248,109,14)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.05%)</title><rect x="33.4081%" y="373" width="0.0539%" height="15" fill="rgb(227,146,52)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="383.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.05%)</title><rect x="33.4081%" y="357" width="0.0539%" height="15" fill="rgb(232,54,3)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="367.50"></text></g><g><title>__rg_alloc (63 samples, 0.05%)</title><rect x="33.4081%" y="341" width="0.0539%" height="15" fill="rgb(229,201,43)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.05%)</title><rect x="33.4081%" y="325" width="0.0539%" height="15" fill="rgb(252,161,33)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="335.50"></text></g><g><title>sn_rust_alloc (63 samples, 0.05%)</title><rect x="33.4081%" y="309" width="0.0539%" height="15" fill="rgb(226,146,40)" fg:x="39037" fg:w="63"/><text x="33.6581%" y="319.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,380 samples, 1.18%)</title><rect x="32.2818%" y="1077" width="1.1810%" height="15" fill="rgb(219,47,25)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="1087.50"></text></g><g><title>std::panic::catch_unwind (1,380 samples, 1.18%)</title><rect x="32.2818%" y="1061" width="1.1810%" height="15" fill="rgb(250,135,13)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="1071.50"></text></g><g><title>std::panicking::try (1,380 samples, 1.18%)</title><rect x="32.2818%" y="1045" width="1.1810%" height="15" fill="rgb(219,229,18)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (1,380 samples, 1.18%)</title><rect x="32.2818%" y="1029" width="1.1810%" height="15" fill="rgb(217,152,27)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="1039.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="1013" width="1.1810%" height="15" fill="rgb(225,71,47)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,380 samples, 1.18%)</title><rect x="32.2818%" y="997" width="1.1810%" height="15" fill="rgb(220,139,14)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,380 samples, 1.18%)</title><rect x="32.2818%" y="981" width="1.1810%" height="15" fill="rgb(247,54,32)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="991.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="965" width="1.1810%" height="15" fill="rgb(252,131,39)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="975.50"></text></g><g><title>async_global_executor::reactor::block_on (1,380 samples, 1.18%)</title><rect x="32.2818%" y="949" width="1.1810%" height="15" fill="rgb(210,108,39)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="959.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="933" width="1.1810%" height="15" fill="rgb(205,23,29)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="943.50"></text></g><g><title>async_io::driver::block_on (1,380 samples, 1.18%)</title><rect x="32.2818%" y="917" width="1.1810%" height="15" fill="rgb(246,139,46)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="927.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="901" width="1.1810%" height="15" fill="rgb(250,81,26)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="885" width="1.1810%" height="15" fill="rgb(214,104,7)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="895.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="869" width="1.1810%" height="15" fill="rgb(233,189,8)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="879.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="853" width="1.1810%" height="15" fill="rgb(228,141,17)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="837" width="1.1810%" height="15" fill="rgb(247,157,1)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="847.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="821" width="1.1810%" height="15" fill="rgb(249,225,5)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="831.50"></text></g><g><title>async_task::runnable::Runnable::run (1,380 samples, 1.18%)</title><rect x="32.2818%" y="805" width="1.1810%" height="15" fill="rgb(242,55,13)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="815.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,380 samples, 1.18%)</title><rect x="32.2818%" y="789" width="1.1810%" height="15" fill="rgb(230,49,50)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="799.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="773" width="1.1810%" height="15" fill="rgb(241,111,38)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="757" width="1.1810%" height="15" fill="rgb(252,155,4)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="767.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="741" width="1.1810%" height="15" fill="rgb(212,69,32)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="751.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="725" width="1.1810%" height="15" fill="rgb(243,107,47)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="735.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,380 samples, 1.18%)</title><rect x="32.2818%" y="709" width="1.1810%" height="15" fill="rgb(247,130,12)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,380 samples, 1.18%)</title><rect x="32.2818%" y="693" width="1.1810%" height="15" fill="rgb(233,74,16)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,380 samples, 1.18%)</title><rect x="32.2818%" y="677" width="1.1810%" height="15" fill="rgb(208,58,18)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="687.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="661" width="1.1810%" height="15" fill="rgb(242,225,1)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="671.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,380 samples, 1.18%)</title><rect x="32.2818%" y="645" width="1.1810%" height="15" fill="rgb(249,39,40)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,380 samples, 1.18%)</title><rect x="32.2818%" y="629" width="1.1810%" height="15" fill="rgb(207,72,44)" fg:x="37721" fg:w="1380"/><text x="32.5318%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="33.6862%" y="469" width="0.0120%" height="15" fill="rgb(215,193,12)" fg:x="39362" fg:w="14"/><text x="33.9362%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="33.6862%" y="453" width="0.0120%" height="15" fill="rgb(248,41,39)" fg:x="39362" fg:w="14"/><text x="33.9362%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (26 samples, 0.02%)</title><rect x="33.6811%" y="485" width="0.0223%" height="15" fill="rgb(253,85,4)" fg:x="39356" fg:w="26"/><text x="33.9311%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (18 samples, 0.02%)</title><rect x="33.7136%" y="485" width="0.0154%" height="15" fill="rgb(243,70,31)" fg:x="39394" fg:w="18"/><text x="33.9636%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18 samples, 0.02%)</title><rect x="33.7136%" y="469" width="0.0154%" height="15" fill="rgb(253,195,26)" fg:x="39394" fg:w="18"/><text x="33.9636%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (23 samples, 0.02%)</title><rect x="33.7290%" y="485" width="0.0197%" height="15" fill="rgb(243,42,11)" fg:x="39412" fg:w="23"/><text x="33.9790%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (23 samples, 0.02%)</title><rect x="33.7290%" y="469" width="0.0197%" height="15" fill="rgb(239,66,17)" fg:x="39412" fg:w="23"/><text x="33.9790%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.02%)</title><rect x="33.7290%" y="453" width="0.0197%" height="15" fill="rgb(217,132,21)" fg:x="39412" fg:w="23"/><text x="33.9790%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (23 samples, 0.02%)</title><rect x="33.7290%" y="437" width="0.0197%" height="15" fill="rgb(252,202,21)" fg:x="39412" fg:w="23"/><text x="33.9790%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (12 samples, 0.01%)</title><rect x="33.7384%" y="421" width="0.0103%" height="15" fill="rgb(233,98,36)" fg:x="39423" fg:w="12"/><text x="33.9884%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (12 samples, 0.01%)</title><rect x="33.7384%" y="405" width="0.0103%" height="15" fill="rgb(216,153,54)" fg:x="39423" fg:w="12"/><text x="33.9884%" y="415.50"></text></g><g><title>sn_rust_dealloc (101 samples, 0.09%)</title><rect x="33.7795%" y="325" width="0.0864%" height="15" fill="rgb(250,99,7)" fg:x="39471" fg:w="101"/><text x="34.0295%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 0.12%)</title><rect x="33.7632%" y="389" width="0.1207%" height="15" fill="rgb(207,56,50)" fg:x="39452" fg:w="141"/><text x="34.0132%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (141 samples, 0.12%)</title><rect x="33.7632%" y="373" width="0.1207%" height="15" fill="rgb(244,61,34)" fg:x="39452" fg:w="141"/><text x="34.0132%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (132 samples, 0.11%)</title><rect x="33.7709%" y="357" width="0.1130%" height="15" fill="rgb(241,50,38)" fg:x="39461" fg:w="132"/><text x="34.0209%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (132 samples, 0.11%)</title><rect x="33.7709%" y="341" width="0.1130%" height="15" fill="rgb(212,166,30)" fg:x="39461" fg:w="132"/><text x="34.0209%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (21 samples, 0.02%)</title><rect x="33.8659%" y="325" width="0.0180%" height="15" fill="rgb(249,127,32)" fg:x="39572" fg:w="21"/><text x="34.1159%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (156 samples, 0.13%)</title><rect x="33.7564%" y="453" width="0.1335%" height="15" fill="rgb(209,103,0)" fg:x="39444" fg:w="156"/><text x="34.0064%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (153 samples, 0.13%)</title><rect x="33.7590%" y="437" width="0.1309%" height="15" fill="rgb(238,209,51)" fg:x="39447" fg:w="153"/><text x="34.0090%" y="447.50"></text></g><g><title>core::mem::drop (148 samples, 0.13%)</title><rect x="33.7632%" y="421" width="0.1267%" height="15" fill="rgb(237,56,23)" fg:x="39452" fg:w="148"/><text x="34.0132%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (148 samples, 0.13%)</title><rect x="33.7632%" y="405" width="0.1267%" height="15" fill="rgb(215,153,46)" fg:x="39452" fg:w="148"/><text x="34.0132%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (184 samples, 0.16%)</title><rect x="33.7547%" y="485" width="0.1575%" height="15" fill="rgb(224,49,31)" fg:x="39442" fg:w="184"/><text x="34.0047%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (184 samples, 0.16%)</title><rect x="33.7547%" y="469" width="0.1575%" height="15" fill="rgb(250,18,42)" fg:x="39442" fg:w="184"/><text x="34.0047%" y="479.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="33.8899%" y="453" width="0.0223%" height="15" fill="rgb(215,176,39)" fg:x="39600" fg:w="26"/><text x="34.1399%" y="463.50"></text></g><g><title>sn_rust_dealloc (87 samples, 0.07%)</title><rect x="33.9301%" y="389" width="0.0745%" height="15" fill="rgb(223,77,29)" fg:x="39647" fg:w="87"/><text x="34.1801%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (112 samples, 0.10%)</title><rect x="33.9130%" y="437" width="0.0959%" height="15" fill="rgb(234,94,52)" fg:x="39627" fg:w="112"/><text x="34.1630%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (112 samples, 0.10%)</title><rect x="33.9130%" y="421" width="0.0959%" height="15" fill="rgb(220,154,50)" fg:x="39627" fg:w="112"/><text x="34.1630%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (112 samples, 0.10%)</title><rect x="33.9130%" y="405" width="0.0959%" height="15" fill="rgb(212,11,10)" fg:x="39627" fg:w="112"/><text x="34.1630%" y="415.50"></text></g><g><title>sn_rust_dealloc (104 samples, 0.09%)</title><rect x="34.2819%" y="261" width="0.0890%" height="15" fill="rgb(205,166,19)" fg:x="40058" fg:w="104"/><text x="34.5319%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (419 samples, 0.36%)</title><rect x="34.0148%" y="341" width="0.3586%" height="15" fill="rgb(244,198,16)" fg:x="39746" fg:w="419"/><text x="34.2648%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (419 samples, 0.36%)</title><rect x="34.0148%" y="325" width="0.3586%" height="15" fill="rgb(219,69,12)" fg:x="39746" fg:w="419"/><text x="34.2648%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (407 samples, 0.35%)</title><rect x="34.0251%" y="309" width="0.3483%" height="15" fill="rgb(245,30,7)" fg:x="39758" fg:w="407"/><text x="34.2751%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (407 samples, 0.35%)</title><rect x="34.0251%" y="293" width="0.3483%" height="15" fill="rgb(218,221,48)" fg:x="39758" fg:w="407"/><text x="34.2751%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (407 samples, 0.35%)</title><rect x="34.0251%" y="277" width="0.3483%" height="15" fill="rgb(216,66,15)" fg:x="39758" fg:w="407"/><text x="34.2751%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (434 samples, 0.37%)</title><rect x="34.0097%" y="405" width="0.3714%" height="15" fill="rgb(226,122,50)" fg:x="39740" fg:w="434"/><text x="34.2597%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (433 samples, 0.37%)</title><rect x="34.0106%" y="389" width="0.3706%" height="15" fill="rgb(239,156,16)" fg:x="39741" fg:w="433"/><text x="34.2606%" y="399.50"></text></g><g><title>core::mem::drop (428 samples, 0.37%)</title><rect x="34.0148%" y="373" width="0.3663%" height="15" fill="rgb(224,27,38)" fg:x="39746" fg:w="428"/><text x="34.2648%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (428 samples, 0.37%)</title><rect x="34.0148%" y="357" width="0.3663%" height="15" fill="rgb(224,39,27)" fg:x="39746" fg:w="428"/><text x="34.2648%" y="367.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="34.3811%" y="405" width="0.0377%" height="15" fill="rgb(215,92,29)" fg:x="40174" fg:w="44"/><text x="34.6311%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (596 samples, 0.51%)</title><rect x="33.9121%" y="469" width="0.5101%" height="15" fill="rgb(207,159,16)" fg:x="39626" fg:w="596"/><text x="34.1621%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (595 samples, 0.51%)</title><rect x="33.9130%" y="453" width="0.5092%" height="15" fill="rgb(238,163,47)" fg:x="39627" fg:w="595"/><text x="34.1630%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (483 samples, 0.41%)</title><rect x="34.0088%" y="437" width="0.4134%" height="15" fill="rgb(219,91,49)" fg:x="39739" fg:w="483"/><text x="34.2588%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (483 samples, 0.41%)</title><rect x="34.0088%" y="421" width="0.4134%" height="15" fill="rgb(227,167,31)" fg:x="39739" fg:w="483"/><text x="34.2588%" y="431.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (21 samples, 0.02%)</title><rect x="34.7277%" y="293" width="0.0180%" height="15" fill="rgb(234,80,54)" fg:x="40579" fg:w="21"/><text x="34.9777%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (12 samples, 0.01%)</title><rect x="34.7354%" y="277" width="0.0103%" height="15" fill="rgb(212,114,2)" fg:x="40588" fg:w="12"/><text x="34.9854%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (12 samples, 0.01%)</title><rect x="34.7457%" y="293" width="0.0103%" height="15" fill="rgb(234,50,24)" fg:x="40600" fg:w="12"/><text x="34.9957%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.04%)</title><rect x="34.7234%" y="325" width="0.0445%" height="15" fill="rgb(221,68,8)" fg:x="40574" fg:w="52"/><text x="34.9734%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.04%)</title><rect x="34.7234%" y="309" width="0.0445%" height="15" fill="rgb(254,180,31)" fg:x="40574" fg:w="52"/><text x="34.9734%" y="319.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (14 samples, 0.01%)</title><rect x="34.7560%" y="293" width="0.0120%" height="15" fill="rgb(247,130,50)" fg:x="40612" fg:w="14"/><text x="35.0060%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (546 samples, 0.47%)</title><rect x="34.7876%" y="277" width="0.4673%" height="15" fill="rgb(211,109,4)" fg:x="40649" fg:w="546"/><text x="35.0376%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (24 samples, 0.02%)</title><rect x="35.2344%" y="261" width="0.0205%" height="15" fill="rgb(238,50,21)" fg:x="41171" fg:w="24"/><text x="35.4844%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (645 samples, 0.55%)</title><rect x="34.7868%" y="293" width="0.5520%" height="15" fill="rgb(225,57,45)" fg:x="40648" fg:w="645"/><text x="35.0368%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (98 samples, 0.08%)</title><rect x="35.2549%" y="277" width="0.0839%" height="15" fill="rgb(209,196,50)" fg:x="41195" fg:w="98"/><text x="35.5049%" y="287.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.06%)</title><rect x="35.3388%" y="293" width="0.0642%" height="15" fill="rgb(242,140,13)" fg:x="41293" fg:w="75"/><text x="35.5888%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (743 samples, 0.64%)</title><rect x="34.7679%" y="309" width="0.6359%" height="15" fill="rgb(217,111,7)" fg:x="40626" fg:w="743"/><text x="35.0179%" y="319.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (754 samples, 0.65%)</title><rect x="34.7679%" y="325" width="0.6453%" height="15" fill="rgb(253,193,51)" fg:x="40626" fg:w="754"/><text x="35.0179%" y="335.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (456 samples, 0.39%)</title><rect x="35.4175%" y="293" width="0.3902%" height="15" fill="rgb(252,70,29)" fg:x="41385" fg:w="456"/><text x="35.6675%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (456 samples, 0.39%)</title><rect x="35.4175%" y="277" width="0.3902%" height="15" fill="rgb(232,127,12)" fg:x="41385" fg:w="456"/><text x="35.6675%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (481 samples, 0.41%)</title><rect x="35.4166%" y="309" width="0.4116%" height="15" fill="rgb(211,180,21)" fg:x="41384" fg:w="481"/><text x="35.6666%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (24 samples, 0.02%)</title><rect x="35.8078%" y="293" width="0.0205%" height="15" fill="rgb(229,72,13)" fg:x="41841" fg:w="24"/><text x="36.0578%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (19 samples, 0.02%)</title><rect x="35.8120%" y="277" width="0.0163%" height="15" fill="rgb(240,211,49)" fg:x="41846" fg:w="19"/><text x="36.0620%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (19 samples, 0.02%)</title><rect x="35.8120%" y="261" width="0.0163%" height="15" fill="rgb(219,149,40)" fg:x="41846" fg:w="19"/><text x="36.0620%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,300 samples, 1.11%)</title><rect x="34.7200%" y="341" width="1.1125%" height="15" fill="rgb(210,127,46)" fg:x="40570" fg:w="1300"/><text x="34.9700%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (486 samples, 0.42%)</title><rect x="35.4166%" y="325" width="0.4159%" height="15" fill="rgb(220,106,7)" fg:x="41384" fg:w="486"/><text x="35.6666%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,320 samples, 1.13%)</title><rect x="34.7200%" y="389" width="1.1297%" height="15" fill="rgb(249,31,22)" fg:x="40570" fg:w="1320"/><text x="34.9700%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,320 samples, 1.13%)</title><rect x="34.7200%" y="373" width="1.1297%" height="15" fill="rgb(253,1,49)" fg:x="40570" fg:w="1320"/><text x="34.9700%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,320 samples, 1.13%)</title><rect x="34.7200%" y="357" width="1.1297%" height="15" fill="rgb(227,144,33)" fg:x="40570" fg:w="1320"/><text x="34.9700%" y="367.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="35.8497%" y="389" width="0.0633%" height="15" fill="rgb(249,163,44)" fg:x="41890" fg:w="74"/><text x="36.0997%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,756 samples, 1.50%)</title><rect x="34.4368%" y="437" width="1.5028%" height="15" fill="rgb(234,15,39)" fg:x="40239" fg:w="1756"/><text x="34.6868%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,756 samples, 1.50%)</title><rect x="34.4368%" y="421" width="1.5028%" height="15" fill="rgb(207,66,16)" fg:x="40239" fg:w="1756"/><text x="34.6868%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,756 samples, 1.50%)</title><rect x="34.4368%" y="405" width="1.5028%" height="15" fill="rgb(233,112,24)" fg:x="40239" fg:w="1756"/><text x="34.6868%" y="415.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (31 samples, 0.03%)</title><rect x="35.9130%" y="389" width="0.0265%" height="15" fill="rgb(230,90,22)" fg:x="41964" fg:w="31"/><text x="36.1630%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,764 samples, 1.51%)</title><rect x="34.4342%" y="453" width="1.5096%" height="15" fill="rgb(229,61,13)" fg:x="40236" fg:w="1764"/><text x="34.6842%" y="463.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (204 samples, 0.17%)</title><rect x="35.9686%" y="293" width="0.1746%" height="15" fill="rgb(225,57,24)" fg:x="42029" fg:w="204"/><text x="36.2186%" y="303.50"></text></g><g><title>core::mem::drop (467 samples, 0.40%)</title><rect x="36.1526%" y="213" width="0.3997%" height="15" fill="rgb(208,169,48)" fg:x="42244" fg:w="467"/><text x="36.4026%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (467 samples, 0.40%)</title><rect x="36.1526%" y="197" width="0.3997%" height="15" fill="rgb(244,218,51)" fg:x="42244" fg:w="467"/><text x="36.4026%" y="207.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (467 samples, 0.40%)</title><rect x="36.1526%" y="181" width="0.3997%" height="15" fill="rgb(214,148,10)" fg:x="42244" fg:w="467"/><text x="36.4026%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (453 samples, 0.39%)</title><rect x="36.1646%" y="165" width="0.3877%" height="15" fill="rgb(225,174,27)" fg:x="42258" fg:w="453"/><text x="36.4146%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (453 samples, 0.39%)</title><rect x="36.1646%" y="149" width="0.3877%" height="15" fill="rgb(230,96,26)" fg:x="42258" fg:w="453"/><text x="36.4146%" y="159.50"></text></g><g><title>sn_rust_dealloc (79 samples, 0.07%)</title><rect x="36.5617%" y="165" width="0.0676%" height="15" fill="rgb(232,10,30)" fg:x="42722" fg:w="79"/><text x="36.8117%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (628 samples, 0.54%)</title><rect x="36.1467%" y="229" width="0.5374%" height="15" fill="rgb(222,8,50)" fg:x="42237" fg:w="628"/><text x="36.3967%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (154 samples, 0.13%)</title><rect x="36.5523%" y="213" width="0.1318%" height="15" fill="rgb(213,81,27)" fg:x="42711" fg:w="154"/><text x="36.8023%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (154 samples, 0.13%)</title><rect x="36.5523%" y="197" width="0.1318%" height="15" fill="rgb(245,50,10)" fg:x="42711" fg:w="154"/><text x="36.8023%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (154 samples, 0.13%)</title><rect x="36.5523%" y="181" width="0.1318%" height="15" fill="rgb(216,100,18)" fg:x="42711" fg:w="154"/><text x="36.8023%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (64 samples, 0.05%)</title><rect x="36.6293%" y="165" width="0.0548%" height="15" fill="rgb(236,147,54)" fg:x="42801" fg:w="64"/><text x="36.8793%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (502 samples, 0.43%)</title><rect x="36.6841%" y="229" width="0.4296%" height="15" fill="rgb(205,143,26)" fg:x="42865" fg:w="502"/><text x="36.9341%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (502 samples, 0.43%)</title><rect x="36.6841%" y="213" width="0.4296%" height="15" fill="rgb(236,26,9)" fg:x="42865" fg:w="502"/><text x="36.9341%" y="223.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.04%)</title><rect x="37.1137%" y="229" width="0.0445%" height="15" fill="rgb(221,165,53)" fg:x="43367" fg:w="52"/><text x="37.3637%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,413 samples, 1.21%)</title><rect x="35.9498%" y="357" width="1.2093%" height="15" fill="rgb(214,110,17)" fg:x="42007" fg:w="1413"/><text x="36.1998%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,413 samples, 1.21%)</title><rect x="35.9498%" y="341" width="1.2093%" height="15" fill="rgb(237,197,12)" fg:x="42007" fg:w="1413"/><text x="36.1998%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,403 samples, 1.20%)</title><rect x="35.9584%" y="325" width="1.2007%" height="15" fill="rgb(205,84,17)" fg:x="42017" fg:w="1403"/><text x="36.2084%" y="335.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,403 samples, 1.20%)</title><rect x="35.9584%" y="309" width="1.2007%" height="15" fill="rgb(237,18,45)" fg:x="42017" fg:w="1403"/><text x="36.2084%" y="319.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,187 samples, 1.02%)</title><rect x="36.1432%" y="293" width="1.0158%" height="15" fill="rgb(221,87,14)" fg:x="42233" fg:w="1187"/><text x="36.3932%" y="303.50"></text></g><g><title>core::mem::drop (1,183 samples, 1.01%)</title><rect x="36.1467%" y="277" width="1.0124%" height="15" fill="rgb(238,186,15)" fg:x="42237" fg:w="1183"/><text x="36.3967%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,183 samples, 1.01%)</title><rect x="36.1467%" y="261" width="1.0124%" height="15" fill="rgb(208,115,11)" fg:x="42237" fg:w="1183"/><text x="36.3967%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,183 samples, 1.01%)</title><rect x="36.1467%" y="245" width="1.0124%" height="15" fill="rgb(254,175,0)" fg:x="42237" fg:w="1183"/><text x="36.3967%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,430 samples, 1.22%)</title><rect x="35.9438%" y="421" width="1.2238%" height="15" fill="rgb(227,24,42)" fg:x="42000" fg:w="1430"/><text x="36.1938%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,425 samples, 1.22%)</title><rect x="35.9481%" y="405" width="1.2195%" height="15" fill="rgb(223,211,37)" fg:x="42005" fg:w="1425"/><text x="36.1981%" y="415.50"></text></g><g><title>core::mem::drop (1,423 samples, 1.22%)</title><rect x="35.9498%" y="389" width="1.2178%" height="15" fill="rgb(235,49,27)" fg:x="42007" fg:w="1423"/><text x="36.1998%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,423 samples, 1.22%)</title><rect x="35.9498%" y="373" width="1.2178%" height="15" fill="rgb(254,97,51)" fg:x="42007" fg:w="1423"/><text x="36.1998%" y="383.50"></text></g><g><title>sn_rust_dealloc (56 samples, 0.05%)</title><rect x="37.1676%" y="421" width="0.0479%" height="15" fill="rgb(249,51,40)" fg:x="43430" fg:w="56"/><text x="37.4176%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,488 samples, 1.27%)</title><rect x="35.9438%" y="453" width="1.2734%" height="15" fill="rgb(210,128,45)" fg:x="42000" fg:w="1488"/><text x="36.1938%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,488 samples, 1.27%)</title><rect x="35.9438%" y="437" width="1.2734%" height="15" fill="rgb(224,137,50)" fg:x="42000" fg:w="1488"/><text x="36.1938%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (53 samples, 0.05%)</title><rect x="37.2524%" y="213" width="0.0454%" height="15" fill="rgb(242,15,9)" fg:x="43529" fg:w="53"/><text x="37.5024%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (50 samples, 0.04%)</title><rect x="37.2549%" y="197" width="0.0428%" height="15" fill="rgb(233,187,41)" fg:x="43532" fg:w="50"/><text x="37.5049%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 0.10%)</title><rect x="37.2515%" y="245" width="0.0967%" height="15" fill="rgb(227,2,29)" fg:x="43528" fg:w="113"/><text x="37.5015%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 0.10%)</title><rect x="37.2515%" y="229" width="0.0967%" height="15" fill="rgb(222,70,3)" fg:x="43528" fg:w="113"/><text x="37.5015%" y="239.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (52 samples, 0.04%)</title><rect x="37.3037%" y="213" width="0.0445%" height="15" fill="rgb(213,11,42)" fg:x="43589" fg:w="52"/><text x="37.5537%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (478 samples, 0.41%)</title><rect x="37.4081%" y="149" width="0.4091%" height="15" fill="rgb(225,150,9)" fg:x="43711" fg:w="478"/><text x="37.6581%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (472 samples, 0.40%)</title><rect x="37.4132%" y="133" width="0.4039%" height="15" fill="rgb(230,162,45)" fg:x="43717" fg:w="472"/><text x="37.6632%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (427 samples, 0.37%)</title><rect x="37.4518%" y="117" width="0.3654%" height="15" fill="rgb(222,14,52)" fg:x="43762" fg:w="427"/><text x="37.7018%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (24 samples, 0.02%)</title><rect x="37.7966%" y="101" width="0.0205%" height="15" fill="rgb(254,198,14)" fg:x="44165" fg:w="24"/><text x="38.0466%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="37.8172%" y="117" width="0.0120%" height="15" fill="rgb(220,217,30)" fg:x="44189" fg:w="14"/><text x="38.0672%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="37.8172%" y="101" width="0.0120%" height="15" fill="rgb(215,146,41)" fg:x="44189" fg:w="14"/><text x="38.0672%" y="111.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="37.8172%" y="85" width="0.0120%" height="15" fill="rgb(217,27,36)" fg:x="44189" fg:w="14"/><text x="38.0672%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="37.8172%" y="69" width="0.0120%" height="15" fill="rgb(219,218,39)" fg:x="44189" fg:w="14"/><text x="38.0672%" y="79.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (524 samples, 0.45%)</title><rect x="37.3927%" y="213" width="0.4484%" height="15" fill="rgb(219,4,42)" fg:x="43693" fg:w="524"/><text x="37.6427%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (519 samples, 0.44%)</title><rect x="37.3970%" y="197" width="0.4442%" height="15" fill="rgb(249,119,36)" fg:x="43698" fg:w="519"/><text x="37.6470%" y="207.50"></text></g><g><title>core::mem::drop (506 samples, 0.43%)</title><rect x="37.4081%" y="181" width="0.4330%" height="15" fill="rgb(209,23,33)" fg:x="43711" fg:w="506"/><text x="37.6581%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (506 samples, 0.43%)</title><rect x="37.4081%" y="165" width="0.4330%" height="15" fill="rgb(211,10,0)" fg:x="43711" fg:w="506"/><text x="37.6581%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="37.8172%" y="149" width="0.0240%" height="15" fill="rgb(208,99,37)" fg:x="44189" fg:w="28"/><text x="38.0672%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="37.8172%" y="133" width="0.0240%" height="15" fill="rgb(213,132,31)" fg:x="44189" fg:w="28"/><text x="38.0672%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (14 samples, 0.01%)</title><rect x="37.8292%" y="117" width="0.0120%" height="15" fill="rgb(243,129,40)" fg:x="44203" fg:w="14"/><text x="38.0792%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (192 samples, 0.16%)</title><rect x="37.8411%" y="197" width="0.1643%" height="15" fill="rgb(210,66,33)" fg:x="44217" fg:w="192"/><text x="38.0911%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (62 samples, 0.05%)</title><rect x="37.9524%" y="181" width="0.0531%" height="15" fill="rgb(209,189,4)" fg:x="44347" fg:w="62"/><text x="38.2024%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (398 samples, 0.34%)</title><rect x="37.8411%" y="213" width="0.3406%" height="15" fill="rgb(214,107,37)" fg:x="44217" fg:w="398"/><text x="38.0911%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (206 samples, 0.18%)</title><rect x="38.0055%" y="197" width="0.1763%" height="15" fill="rgb(245,88,54)" fg:x="44409" fg:w="206"/><text x="38.2555%" y="207.50"></text></g><g><title>sn_rust_dealloc (147 samples, 0.13%)</title><rect x="38.1818%" y="213" width="0.1258%" height="15" fill="rgb(205,146,20)" fg:x="44615" fg:w="147"/><text x="38.4318%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,200 samples, 1.03%)</title><rect x="37.3482%" y="229" width="1.0270%" height="15" fill="rgb(220,161,25)" fg:x="43641" fg:w="1200"/><text x="37.5982%" y="239.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (79 samples, 0.07%)</title><rect x="38.3076%" y="213" width="0.0676%" height="15" fill="rgb(215,152,15)" fg:x="44762" fg:w="79"/><text x="38.5576%" y="223.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,206 samples, 1.03%)</title><rect x="37.3482%" y="245" width="1.0321%" height="15" fill="rgb(233,192,44)" fg:x="43641" fg:w="1206"/><text x="37.5982%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="38.3863%" y="229" width="0.0111%" height="15" fill="rgb(240,170,46)" fg:x="44854" fg:w="13"/><text x="38.6363%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,342 samples, 1.15%)</title><rect x="37.2515%" y="261" width="1.1485%" height="15" fill="rgb(207,104,33)" fg:x="43528" fg:w="1342"/><text x="37.5015%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (16 samples, 0.01%)</title><rect x="38.3863%" y="245" width="0.0137%" height="15" fill="rgb(219,21,39)" fg:x="44854" fg:w="16"/><text x="38.6363%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,347 samples, 1.15%)</title><rect x="37.2515%" y="309" width="1.1528%" height="15" fill="rgb(214,133,29)" fg:x="43528" fg:w="1347"/><text x="37.5015%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,347 samples, 1.15%)</title><rect x="37.2515%" y="293" width="1.1528%" height="15" fill="rgb(226,93,6)" fg:x="43528" fg:w="1347"/><text x="37.5015%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,347 samples, 1.15%)</title><rect x="37.2515%" y="277" width="1.1528%" height="15" fill="rgb(252,222,34)" fg:x="43528" fg:w="1347"/><text x="37.5015%" y="287.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.08%)</title><rect x="38.4043%" y="309" width="0.0762%" height="15" fill="rgb(252,92,48)" fg:x="44875" fg:w="89"/><text x="38.6543%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,342 samples, 2.00%)</title><rect x="37.2404%" y="357" width="2.0043%" height="15" fill="rgb(245,223,24)" fg:x="43515" fg:w="2342"/><text x="37.4904%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,342 samples, 2.00%)</title><rect x="37.2404%" y="341" width="2.0043%" height="15" fill="rgb(205,176,3)" fg:x="43515" fg:w="2342"/><text x="37.4904%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,342 samples, 2.00%)</title><rect x="37.2404%" y="325" width="2.0043%" height="15" fill="rgb(235,151,15)" fg:x="43515" fg:w="2342"/><text x="37.4904%" y="335.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (893 samples, 0.76%)</title><rect x="38.4804%" y="309" width="0.7642%" height="15" fill="rgb(237,209,11)" fg:x="44964" fg:w="893"/><text x="38.7304%" y="319.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,352 samples, 2.01%)</title><rect x="37.2387%" y="373" width="2.0129%" height="15" fill="rgb(243,227,24)" fg:x="43513" fg:w="2352"/><text x="37.4887%" y="383.50">a..</text></g><g><title>sn_rust_dealloc (61 samples, 0.05%)</title><rect x="39.2515%" y="373" width="0.0522%" height="15" fill="rgb(239,193,16)" fg:x="45865" fg:w="61"/><text x="39.5015%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,452 samples, 2.10%)</title><rect x="37.2173%" y="453" width="2.0984%" height="15" fill="rgb(231,27,9)" fg:x="43488" fg:w="2452"/><text x="37.4673%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,449 samples, 2.10%)</title><rect x="37.2198%" y="437" width="2.0959%" height="15" fill="rgb(219,169,10)" fg:x="43491" fg:w="2449"/><text x="37.4698%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,441 samples, 2.09%)</title><rect x="37.2267%" y="421" width="2.0890%" height="15" fill="rgb(244,229,43)" fg:x="43499" fg:w="2441"/><text x="37.4767%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,441 samples, 2.09%)</title><rect x="37.2267%" y="405" width="2.0890%" height="15" fill="rgb(254,38,20)" fg:x="43499" fg:w="2441"/><text x="37.4767%" y="415.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,441 samples, 2.09%)</title><rect x="37.2267%" y="389" width="2.0890%" height="15" fill="rgb(250,47,30)" fg:x="43499" fg:w="2441"/><text x="37.4767%" y="399.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (14 samples, 0.01%)</title><rect x="39.3037%" y="373" width="0.0120%" height="15" fill="rgb(224,124,36)" fg:x="45926" fg:w="14"/><text x="39.5537%" y="383.50"></text></g><g><title>sn_rust_dealloc (46 samples, 0.04%)</title><rect x="39.3157%" y="453" width="0.0394%" height="15" fill="rgb(246,68,51)" fg:x="45940" fg:w="46"/><text x="39.5657%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,389 samples, 5.47%)</title><rect x="33.9121%" y="485" width="5.4677%" height="15" fill="rgb(253,43,49)" fg:x="39626" fg:w="6389"/><text x="34.1621%" y="495.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,779 samples, 4.95%)</title><rect x="34.4342%" y="469" width="4.9457%" height="15" fill="rgb(219,54,36)" fg:x="40236" fg:w="5779"/><text x="34.6842%" y="479.50">core::..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (29 samples, 0.02%)</title><rect x="39.3551%" y="453" width="0.0248%" height="15" fill="rgb(227,133,34)" fg:x="45986" fg:w="29"/><text x="39.6051%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (43 samples, 0.04%)</title><rect x="39.5125%" y="437" width="0.0368%" height="15" fill="rgb(247,227,15)" fg:x="46170" fg:w="43"/><text x="39.7625%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (40 samples, 0.03%)</title><rect x="39.5151%" y="421" width="0.0342%" height="15" fill="rgb(229,96,14)" fg:x="46173" fg:w="40"/><text x="39.7651%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (204 samples, 0.17%)</title><rect x="39.3850%" y="485" width="0.1746%" height="15" fill="rgb(220,79,17)" fg:x="46021" fg:w="204"/><text x="39.6350%" y="495.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (202 samples, 0.17%)</title><rect x="39.3867%" y="469" width="0.1729%" height="15" fill="rgb(205,131,53)" fg:x="46023" fg:w="202"/><text x="39.6367%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (202 samples, 0.17%)</title><rect x="39.3867%" y="453" width="0.1729%" height="15" fill="rgb(209,50,29)" fg:x="46023" fg:w="202"/><text x="39.6367%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::update_min_max (12 samples, 0.01%)</title><rect x="39.5493%" y="437" width="0.0103%" height="15" fill="rgb(245,86,46)" fg:x="46213" fg:w="12"/><text x="39.7993%" y="447.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="39.5596%" y="485" width="0.0308%" height="15" fill="rgb(235,66,46)" fg:x="46225" fg:w="36"/><text x="39.8096%" y="495.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (14 samples, 0.01%)</title><rect x="39.5904%" y="485" width="0.0120%" height="15" fill="rgb(232,148,31)" fg:x="46261" fg:w="14"/><text x="39.8404%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (17 samples, 0.01%)</title><rect x="39.6127%" y="469" width="0.0145%" height="15" fill="rgb(217,149,8)" fg:x="46287" fg:w="17"/><text x="39.8627%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (18 samples, 0.02%)</title><rect x="39.6272%" y="469" width="0.0154%" height="15" fill="rgb(209,183,11)" fg:x="46304" fg:w="18"/><text x="39.8772%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (62 samples, 0.05%)</title><rect x="39.6426%" y="453" width="0.0531%" height="15" fill="rgb(208,55,20)" fg:x="46322" fg:w="62"/><text x="39.8926%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (32 samples, 0.03%)</title><rect x="39.7171%" y="421" width="0.0274%" height="15" fill="rgb(218,39,14)" fg:x="46409" fg:w="32"/><text x="39.9671%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (32 samples, 0.03%)</title><rect x="39.7171%" y="405" width="0.0274%" height="15" fill="rgb(216,169,33)" fg:x="46409" fg:w="32"/><text x="39.9671%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (32 samples, 0.03%)</title><rect x="39.7171%" y="389" width="0.0274%" height="15" fill="rgb(233,80,24)" fg:x="46409" fg:w="32"/><text x="39.9671%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (19 samples, 0.02%)</title><rect x="39.7282%" y="373" width="0.0163%" height="15" fill="rgb(213,179,31)" fg:x="46422" fg:w="19"/><text x="39.9782%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (19 samples, 0.02%)</title><rect x="39.7282%" y="357" width="0.0163%" height="15" fill="rgb(209,19,5)" fg:x="46422" fg:w="19"/><text x="39.9782%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (132 samples, 0.11%)</title><rect x="39.6426%" y="469" width="0.1130%" height="15" fill="rgb(219,18,35)" fg:x="46322" fg:w="132"/><text x="39.8926%" y="479.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (70 samples, 0.06%)</title><rect x="39.6957%" y="453" width="0.0599%" height="15" fill="rgb(209,169,16)" fg:x="46384" fg:w="70"/><text x="39.9457%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (70 samples, 0.06%)</title><rect x="39.6957%" y="437" width="0.0599%" height="15" fill="rgb(245,90,51)" fg:x="46384" fg:w="70"/><text x="39.9457%" y="447.50"></text></g><g><title>core::time::Duration::new (13 samples, 0.01%)</title><rect x="39.7445%" y="421" width="0.0111%" height="15" fill="rgb(220,99,45)" fg:x="46441" fg:w="13"/><text x="39.9945%" y="431.50"></text></g><g><title>tremor_common::time::nanotime (459 samples, 0.39%)</title><rect x="39.6024%" y="485" width="0.3928%" height="15" fill="rgb(249,89,25)" fg:x="46275" fg:w="459"/><text x="39.8524%" y="495.50"></text></g><g><title>std::time::SystemTime::now (280 samples, 0.24%)</title><rect x="39.7556%" y="469" width="0.2396%" height="15" fill="rgb(239,193,0)" fg:x="46454" fg:w="280"/><text x="40.0056%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (280 samples, 0.24%)</title><rect x="39.7556%" y="453" width="0.2396%" height="15" fill="rgb(231,126,1)" fg:x="46454" fg:w="280"/><text x="40.0056%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (280 samples, 0.24%)</title><rect x="39.7556%" y="437" width="0.2396%" height="15" fill="rgb(243,166,3)" fg:x="46454" fg:w="280"/><text x="40.0056%" y="447.50"></text></g><g><title>__clock_gettime (230 samples, 0.20%)</title><rect x="39.7984%" y="421" width="0.1968%" height="15" fill="rgb(223,22,34)" fg:x="46504" fg:w="230"/><text x="40.0484%" y="431.50"></text></g><g><title>__vdso_clock_gettime (222 samples, 0.19%)</title><rect x="39.8052%" y="405" width="0.1900%" height="15" fill="rgb(251,52,51)" fg:x="46512" fg:w="222"/><text x="40.0552%" y="415.50"></text></g><g><title>[[vdso]] (190 samples, 0.16%)</title><rect x="39.8326%" y="389" width="0.1626%" height="15" fill="rgb(221,165,28)" fg:x="46544" fg:w="190"/><text x="40.0826%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (93 samples, 0.08%)</title><rect x="39.9995%" y="469" width="0.0796%" height="15" fill="rgb(218,121,47)" fg:x="46739" fg:w="93"/><text x="40.2495%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,738 samples, 6.62%)</title><rect x="33.4628%" y="741" width="6.6222%" height="15" fill="rgb(209,120,9)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="751.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,738 samples, 6.62%)</title><rect x="33.4628%" y="725" width="6.6222%" height="15" fill="rgb(236,68,12)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="735.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,738 samples, 6.62%)</title><rect x="33.4628%" y="709" width="6.6222%" height="15" fill="rgb(225,194,26)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="719.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,738 samples, 6.62%)</title><rect x="33.4628%" y="693" width="6.6222%" height="15" fill="rgb(231,84,39)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="703.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,738 samples, 6.62%)</title><rect x="33.4628%" y="677" width="6.6222%" height="15" fill="rgb(210,11,45)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="687.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,738 samples, 6.62%)</title><rect x="33.4628%" y="661" width="6.6222%" height="15" fill="rgb(224,54,52)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="671.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (7,738 samples, 6.62%)</title><rect x="33.4628%" y="645" width="6.6222%" height="15" fill="rgb(238,102,14)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="655.50">std::pani..</text></g><g><title>std::panicking::try (7,738 samples, 6.62%)</title><rect x="33.4628%" y="629" width="6.6222%" height="15" fill="rgb(243,160,52)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="639.50">std::pani..</text></g><g><title>std::panicking::try::do_call (7,738 samples, 6.62%)</title><rect x="33.4628%" y="613" width="6.6222%" height="15" fill="rgb(216,114,19)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="623.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,738 samples, 6.62%)</title><rect x="33.4628%" y="597" width="6.6222%" height="15" fill="rgb(244,166,37)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="607.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (7,738 samples, 6.62%)</title><rect x="33.4628%" y="581" width="6.6222%" height="15" fill="rgb(246,29,44)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="591.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,738 samples, 6.62%)</title><rect x="33.4628%" y="565" width="6.6222%" height="15" fill="rgb(215,56,53)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="575.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (7,738 samples, 6.62%)</title><rect x="33.4628%" y="549" width="6.6222%" height="15" fill="rgb(217,60,2)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="559.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,738 samples, 6.62%)</title><rect x="33.4628%" y="533" width="6.6222%" height="15" fill="rgb(207,26,24)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="543.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,738 samples, 6.62%)</title><rect x="33.4628%" y="517" width="6.6222%" height="15" fill="rgb(252,210,15)" fg:x="39101" fg:w="7738"/><text x="33.7128%" y="527.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,725 samples, 6.61%)</title><rect x="33.4740%" y="501" width="6.6111%" height="15" fill="rgb(253,209,26)" fg:x="39114" fg:w="7725"/><text x="33.7240%" y="511.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (105 samples, 0.09%)</title><rect x="39.9952%" y="485" width="0.0899%" height="15" fill="rgb(238,170,14)" fg:x="46734" fg:w="105"/><text x="40.2452%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (53 samples, 0.05%)</title><rect x="40.0996%" y="629" width="0.0454%" height="15" fill="rgb(216,178,15)" fg:x="46856" fg:w="53"/><text x="40.3496%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (53 samples, 0.05%)</title><rect x="40.0996%" y="613" width="0.0454%" height="15" fill="rgb(250,197,2)" fg:x="46856" fg:w="53"/><text x="40.3496%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (53 samples, 0.05%)</title><rect x="40.0996%" y="597" width="0.0454%" height="15" fill="rgb(212,70,42)" fg:x="46856" fg:w="53"/><text x="40.3496%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="40.1296%" y="581" width="0.0154%" height="15" fill="rgb(227,213,9)" fg:x="46891" fg:w="18"/><text x="40.3796%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (18 samples, 0.02%)</title><rect x="40.1296%" y="565" width="0.0154%" height="15" fill="rgb(245,99,25)" fg:x="46891" fg:w="18"/><text x="40.3796%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="40.1296%" y="549" width="0.0154%" height="15" fill="rgb(250,82,29)" fg:x="46891" fg:w="18"/><text x="40.3796%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (75 samples, 0.06%)</title><rect x="40.0859%" y="645" width="0.0642%" height="15" fill="rgb(241,226,54)" fg:x="46840" fg:w="75"/><text x="40.3359%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,818 samples, 6.69%)</title><rect x="33.4628%" y="757" width="6.6907%" height="15" fill="rgb(221,99,41)" fg:x="39101" fg:w="7818"/><text x="33.7128%" y="767.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (79 samples, 0.07%)</title><rect x="40.0859%" y="741" width="0.0676%" height="15" fill="rgb(213,90,21)" fg:x="46840" fg:w="79"/><text x="40.3359%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (79 samples, 0.07%)</title><rect x="40.0859%" y="725" width="0.0676%" height="15" fill="rgb(205,208,24)" fg:x="46840" fg:w="79"/><text x="40.3359%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (79 samples, 0.07%)</title><rect x="40.0859%" y="709" width="0.0676%" height="15" fill="rgb(246,31,12)" fg:x="46840" fg:w="79"/><text x="40.3359%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (79 samples, 0.07%)</title><rect x="40.0859%" y="693" width="0.0676%" height="15" fill="rgb(213,154,6)" fg:x="46840" fg:w="79"/><text x="40.3359%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (79 samples, 0.07%)</title><rect x="40.0859%" y="677" width="0.0676%" height="15" fill="rgb(222,163,29)" fg:x="46840" fg:w="79"/><text x="40.3359%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (79 samples, 0.07%)</title><rect x="40.0859%" y="661" width="0.0676%" height="15" fill="rgb(227,201,8)" fg:x="46840" fg:w="79"/><text x="40.3359%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,838 samples, 6.71%)</title><rect x="33.4628%" y="773" width="6.7078%" height="15" fill="rgb(233,9,32)" fg:x="39101" fg:w="7838"/><text x="33.7128%" y="783.50">tremor_ru..</text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (20 samples, 0.02%)</title><rect x="40.1535%" y="757" width="0.0171%" height="15" fill="rgb(217,54,24)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="40.1535%" y="741" width="0.0171%" height="15" fill="rgb(235,192,0)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="40.1535%" y="725" width="0.0171%" height="15" fill="rgb(235,45,9)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.02%)</title><rect x="40.1535%" y="709" width="0.0171%" height="15" fill="rgb(246,42,40)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 0.02%)</title><rect x="40.1535%" y="693" width="0.0171%" height="15" fill="rgb(248,111,24)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (20 samples, 0.02%)</title><rect x="40.1535%" y="677" width="0.0171%" height="15" fill="rgb(249,65,22)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (20 samples, 0.02%)</title><rect x="40.1535%" y="661" width="0.0171%" height="15" fill="rgb(238,111,51)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (20 samples, 0.02%)</title><rect x="40.1535%" y="645" width="0.0171%" height="15" fill="rgb(250,118,22)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (20 samples, 0.02%)</title><rect x="40.1535%" y="629" width="0.0171%" height="15" fill="rgb(234,84,26)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="40.1535%" y="613" width="0.0171%" height="15" fill="rgb(243,172,12)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="40.1535%" y="597" width="0.0171%" height="15" fill="rgb(236,150,49)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.02%)</title><rect x="40.1535%" y="581" width="0.0171%" height="15" fill="rgb(225,197,26)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.02%)</title><rect x="40.1535%" y="565" width="0.0171%" height="15" fill="rgb(214,17,42)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.02%)</title><rect x="40.1535%" y="549" width="0.0171%" height="15" fill="rgb(224,165,40)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="559.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.02%)</title><rect x="40.1535%" y="533" width="0.0171%" height="15" fill="rgb(246,100,4)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="543.50"></text></g><g><title>__rg_alloc (20 samples, 0.02%)</title><rect x="40.1535%" y="517" width="0.0171%" height="15" fill="rgb(222,103,0)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.02%)</title><rect x="40.1535%" y="501" width="0.0171%" height="15" fill="rgb(227,189,26)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="511.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="40.1535%" y="485" width="0.0171%" height="15" fill="rgb(214,202,17)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="40.1535%" y="469" width="0.0171%" height="15" fill="rgb(229,111,3)" fg:x="46919" fg:w="20"/><text x="40.4035%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.14%)</title><rect x="40.2434%" y="661" width="0.1395%" height="15" fill="rgb(229,172,15)" fg:x="47024" fg:w="163"/><text x="40.4934%" y="671.50"></text></g><g><title>core::ptr::read (157 samples, 0.13%)</title><rect x="40.2485%" y="645" width="0.1344%" height="15" fill="rgb(230,224,35)" fg:x="47030" fg:w="157"/><text x="40.4985%" y="655.50"></text></g><g><title>[libc-2.31.so] (156 samples, 0.13%)</title><rect x="40.2494%" y="629" width="0.1335%" height="15" fill="rgb(251,141,6)" fg:x="47031" fg:w="156"/><text x="40.4994%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (94 samples, 0.08%)</title><rect x="40.3855%" y="533" width="0.0804%" height="15" fill="rgb(225,208,6)" fg:x="47190" fg:w="94"/><text x="40.6355%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (94 samples, 0.08%)</title><rect x="40.3855%" y="517" width="0.0804%" height="15" fill="rgb(246,181,16)" fg:x="47190" fg:w="94"/><text x="40.6355%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (94 samples, 0.08%)</title><rect x="40.3855%" y="501" width="0.0804%" height="15" fill="rgb(227,129,36)" fg:x="47190" fg:w="94"/><text x="40.6355%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (93 samples, 0.08%)</title><rect x="40.3863%" y="485" width="0.0796%" height="15" fill="rgb(248,117,24)" fg:x="47191" fg:w="93"/><text x="40.6363%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (93 samples, 0.08%)</title><rect x="40.3863%" y="469" width="0.0796%" height="15" fill="rgb(214,185,35)" fg:x="47191" fg:w="93"/><text x="40.6363%" y="479.50"></text></g><g><title>alloc::alloc::alloc (93 samples, 0.08%)</title><rect x="40.3863%" y="453" width="0.0796%" height="15" fill="rgb(236,150,34)" fg:x="47191" fg:w="93"/><text x="40.6363%" y="463.50"></text></g><g><title>__rg_alloc (93 samples, 0.08%)</title><rect x="40.3863%" y="437" width="0.0796%" height="15" fill="rgb(243,228,27)" fg:x="47191" fg:w="93"/><text x="40.6363%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (93 samples, 0.08%)</title><rect x="40.3863%" y="421" width="0.0796%" height="15" fill="rgb(245,77,44)" fg:x="47191" fg:w="93"/><text x="40.6363%" y="431.50"></text></g><g><title>sn_rust_alloc (91 samples, 0.08%)</title><rect x="40.3880%" y="405" width="0.0779%" height="15" fill="rgb(235,214,42)" fg:x="47193" fg:w="91"/><text x="40.6380%" y="415.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (109 samples, 0.09%)</title><rect x="40.3855%" y="661" width="0.0933%" height="15" fill="rgb(221,74,3)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (109 samples, 0.09%)</title><rect x="40.3855%" y="645" width="0.0933%" height="15" fill="rgb(206,121,29)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (109 samples, 0.09%)</title><rect x="40.3855%" y="629" width="0.0933%" height="15" fill="rgb(249,131,53)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (109 samples, 0.09%)</title><rect x="40.3855%" y="613" width="0.0933%" height="15" fill="rgb(236,170,29)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (109 samples, 0.09%)</title><rect x="40.3855%" y="597" width="0.0933%" height="15" fill="rgb(247,96,15)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (109 samples, 0.09%)</title><rect x="40.3855%" y="581" width="0.0933%" height="15" fill="rgb(211,210,7)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (109 samples, 0.09%)</title><rect x="40.3855%" y="565" width="0.0933%" height="15" fill="rgb(240,88,50)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (109 samples, 0.09%)</title><rect x="40.3855%" y="549" width="0.0933%" height="15" fill="rgb(209,229,26)" fg:x="47190" fg:w="109"/><text x="40.6355%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.01%)</title><rect x="40.4659%" y="533" width="0.0128%" height="15" fill="rgb(210,68,23)" fg:x="47284" fg:w="15"/><text x="40.7159%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="40.4659%" y="517" width="0.0128%" height="15" fill="rgb(229,180,13)" fg:x="47284" fg:w="15"/><text x="40.7159%" y="527.50"></text></g><g><title>[libc-2.31.so] (250 samples, 0.21%)</title><rect x="40.4787%" y="661" width="0.2140%" height="15" fill="rgb(236,53,44)" fg:x="47299" fg:w="250"/><text x="40.7287%" y="671.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.12%)</title><rect x="40.6944%" y="645" width="0.1181%" height="15" fill="rgb(244,214,29)" fg:x="47551" fg:w="138"/><text x="40.9444%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (264 samples, 0.23%)</title><rect x="40.8399%" y="533" width="0.2259%" height="15" fill="rgb(220,75,29)" fg:x="47721" fg:w="264"/><text x="41.0899%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (442 samples, 0.38%)</title><rect x="40.6927%" y="661" width="0.3783%" height="15" fill="rgb(214,183,37)" fg:x="47549" fg:w="442"/><text x="40.9427%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (302 samples, 0.26%)</title><rect x="40.8125%" y="645" width="0.2585%" height="15" fill="rgb(239,117,29)" fg:x="47689" fg:w="302"/><text x="41.0625%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (302 samples, 0.26%)</title><rect x="40.8125%" y="629" width="0.2585%" height="15" fill="rgb(237,171,35)" fg:x="47689" fg:w="302"/><text x="41.0625%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (302 samples, 0.26%)</title><rect x="40.8125%" y="613" width="0.2585%" height="15" fill="rgb(229,178,53)" fg:x="47689" fg:w="302"/><text x="41.0625%" y="623.50"></text></g><g><title>alloc::alloc::alloc (302 samples, 0.26%)</title><rect x="40.8125%" y="597" width="0.2585%" height="15" fill="rgb(210,102,19)" fg:x="47689" fg:w="302"/><text x="41.0625%" y="607.50"></text></g><g><title>__rg_alloc (302 samples, 0.26%)</title><rect x="40.8125%" y="581" width="0.2585%" height="15" fill="rgb(235,127,22)" fg:x="47689" fg:w="302"/><text x="41.0625%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (302 samples, 0.26%)</title><rect x="40.8125%" y="565" width="0.2585%" height="15" fill="rgb(244,31,31)" fg:x="47689" fg:w="302"/><text x="41.0625%" y="575.50"></text></g><g><title>sn_rust_alloc (302 samples, 0.26%)</title><rect x="40.8125%" y="549" width="0.2585%" height="15" fill="rgb(231,43,21)" fg:x="47689" fg:w="302"/><text x="41.0625%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="41.0710%" y="645" width="0.0317%" height="15" fill="rgb(217,131,35)" fg:x="47991" fg:w="37"/><text x="41.3210%" y="655.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="41.1026%" y="645" width="0.0188%" height="15" fill="rgb(221,149,4)" fg:x="48028" fg:w="22"/><text x="41.3526%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (62 samples, 0.05%)</title><rect x="41.0710%" y="661" width="0.0531%" height="15" fill="rgb(232,170,28)" fg:x="47991" fg:w="62"/><text x="41.3210%" y="671.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (19 samples, 0.02%)</title><rect x="41.1343%" y="661" width="0.0163%" height="15" fill="rgb(238,56,10)" fg:x="48065" fg:w="19"/><text x="41.3843%" y="671.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (19 samples, 0.02%)</title><rect x="41.1343%" y="645" width="0.0163%" height="15" fill="rgb(235,196,14)" fg:x="48065" fg:w="19"/><text x="41.3843%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (19 samples, 0.02%)</title><rect x="41.1343%" y="629" width="0.0163%" height="15" fill="rgb(216,45,48)" fg:x="48065" fg:w="19"/><text x="41.3843%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19 samples, 0.02%)</title><rect x="41.1343%" y="613" width="0.0163%" height="15" fill="rgb(238,213,17)" fg:x="48065" fg:w="19"/><text x="41.3843%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (14 samples, 0.01%)</title><rect x="41.1386%" y="597" width="0.0120%" height="15" fill="rgb(212,13,2)" fg:x="48070" fg:w="14"/><text x="41.3886%" y="607.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (14 samples, 0.01%)</title><rect x="41.1386%" y="581" width="0.0120%" height="15" fill="rgb(240,114,20)" fg:x="48070" fg:w="14"/><text x="41.3886%" y="591.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (14 samples, 0.01%)</title><rect x="41.1386%" y="565" width="0.0120%" height="15" fill="rgb(228,41,40)" fg:x="48070" fg:w="14"/><text x="41.3886%" y="575.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (13 samples, 0.01%)</title><rect x="41.1394%" y="549" width="0.0111%" height="15" fill="rgb(244,132,35)" fg:x="48071" fg:w="13"/><text x="41.3894%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,178 samples, 1.01%)</title><rect x="40.1706%" y="773" width="1.0081%" height="15" fill="rgb(253,189,4)" fg:x="46939" fg:w="1178"/><text x="40.4206%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,178 samples, 1.01%)</title><rect x="40.1706%" y="757" width="1.0081%" height="15" fill="rgb(224,37,19)" fg:x="46939" fg:w="1178"/><text x="40.4206%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,178 samples, 1.01%)</title><rect x="40.1706%" y="741" width="1.0081%" height="15" fill="rgb(235,223,18)" fg:x="46939" fg:w="1178"/><text x="40.4206%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,178 samples, 1.01%)</title><rect x="40.1706%" y="725" width="1.0081%" height="15" fill="rgb(235,163,25)" fg:x="46939" fg:w="1178"/><text x="40.4206%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,178 samples, 1.01%)</title><rect x="40.1706%" y="709" width="1.0081%" height="15" fill="rgb(217,145,28)" fg:x="46939" fg:w="1178"/><text x="40.4206%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,178 samples, 1.01%)</title><rect x="40.1706%" y="693" width="1.0081%" height="15" fill="rgb(223,223,32)" fg:x="46939" fg:w="1178"/><text x="40.4206%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,178 samples, 1.01%)</title><rect x="40.1706%" y="677" width="1.0081%" height="15" fill="rgb(227,189,39)" fg:x="46939" fg:w="1178"/><text x="40.4206%" y="687.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (26 samples, 0.02%)</title><rect x="41.1565%" y="661" width="0.0223%" height="15" fill="rgb(248,10,22)" fg:x="48091" fg:w="26"/><text x="41.4065%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (26 samples, 0.02%)</title><rect x="41.1565%" y="645" width="0.0223%" height="15" fill="rgb(248,46,39)" fg:x="48091" fg:w="26"/><text x="41.4065%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.02%)</title><rect x="41.1565%" y="629" width="0.0223%" height="15" fill="rgb(248,113,48)" fg:x="48091" fg:w="26"/><text x="41.4065%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="41.1677%" y="613" width="0.0111%" height="15" fill="rgb(245,16,25)" fg:x="48104" fg:w="13"/><text x="41.4177%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (126 samples, 0.11%)</title><rect x="41.1788%" y="677" width="0.1078%" height="15" fill="rgb(249,152,16)" fg:x="48117" fg:w="126"/><text x="41.4288%" y="687.50"></text></g><g><title>[libc-2.31.so] (91 samples, 0.08%)</title><rect x="41.2087%" y="661" width="0.0779%" height="15" fill="rgb(250,16,1)" fg:x="48152" fg:w="91"/><text x="41.4587%" y="671.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.06%)</title><rect x="41.3799%" y="661" width="0.0556%" height="15" fill="rgb(249,138,3)" fg:x="48352" fg:w="65"/><text x="41.6299%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="41.4501%" y="629" width="0.0103%" height="15" fill="rgb(227,71,41)" fg:x="48434" fg:w="12"/><text x="41.7001%" y="639.50"></text></g><g><title>[libc-2.31.so] (124 samples, 0.11%)</title><rect x="41.4603%" y="629" width="0.1061%" height="15" fill="rgb(209,184,23)" fg:x="48446" fg:w="124"/><text x="41.7103%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (191 samples, 0.16%)</title><rect x="41.4441%" y="645" width="0.1635%" height="15" fill="rgb(223,215,31)" fg:x="48427" fg:w="191"/><text x="41.6941%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (48 samples, 0.04%)</title><rect x="41.5665%" y="629" width="0.0411%" height="15" fill="rgb(210,146,28)" fg:x="48570" fg:w="48"/><text x="41.8165%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.04%)</title><rect x="41.5665%" y="613" width="0.0411%" height="15" fill="rgb(209,183,41)" fg:x="48570" fg:w="48"/><text x="41.8165%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.04%)</title><rect x="41.5665%" y="597" width="0.0411%" height="15" fill="rgb(209,224,45)" fg:x="48570" fg:w="48"/><text x="41.8165%" y="607.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.04%)</title><rect x="41.5699%" y="581" width="0.0377%" height="15" fill="rgb(224,209,51)" fg:x="48574" fg:w="44"/><text x="41.8199%" y="591.50"></text></g><g><title>__rg_alloc (44 samples, 0.04%)</title><rect x="41.5699%" y="565" width="0.0377%" height="15" fill="rgb(223,17,39)" fg:x="48574" fg:w="44"/><text x="41.8199%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.04%)</title><rect x="41.5699%" y="549" width="0.0377%" height="15" fill="rgb(234,204,37)" fg:x="48574" fg:w="44"/><text x="41.8199%" y="559.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.04%)</title><rect x="41.5716%" y="533" width="0.0359%" height="15" fill="rgb(236,120,5)" fg:x="48576" fg:w="42"/><text x="41.8216%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (246 samples, 0.21%)</title><rect x="41.4381%" y="661" width="0.2105%" height="15" fill="rgb(248,97,27)" fg:x="48420" fg:w="246"/><text x="41.6881%" y="671.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="41.6075%" y="645" width="0.0411%" height="15" fill="rgb(240,66,17)" fg:x="48618" fg:w="48"/><text x="41.8575%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (435 samples, 0.37%)</title><rect x="41.2866%" y="677" width="0.3723%" height="15" fill="rgb(210,79,3)" fg:x="48243" fg:w="435"/><text x="41.5366%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (564 samples, 0.48%)</title><rect x="41.1788%" y="757" width="0.4827%" height="15" fill="rgb(214,176,27)" fg:x="48117" fg:w="564"/><text x="41.4288%" y="767.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (564 samples, 0.48%)</title><rect x="41.1788%" y="741" width="0.4827%" height="15" fill="rgb(235,185,3)" fg:x="48117" fg:w="564"/><text x="41.4288%" y="751.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (564 samples, 0.48%)</title><rect x="41.1788%" y="725" width="0.4827%" height="15" fill="rgb(227,24,12)" fg:x="48117" fg:w="564"/><text x="41.4288%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (564 samples, 0.48%)</title><rect x="41.1788%" y="709" width="0.4827%" height="15" fill="rgb(252,169,48)" fg:x="48117" fg:w="564"/><text x="41.4288%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (564 samples, 0.48%)</title><rect x="41.1788%" y="693" width="0.4827%" height="15" fill="rgb(212,65,1)" fg:x="48117" fg:w="564"/><text x="41.4288%" y="703.50"></text></g><g><title>async_io::driver::block_on (9,582 samples, 8.20%)</title><rect x="33.4628%" y="1077" width="8.2003%" height="15" fill="rgb(242,39,24)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="1087.50">async_io::d..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="1061" width="8.2003%" height="15" fill="rgb(249,32,23)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="1071.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="1045" width="8.2003%" height="15" fill="rgb(251,195,23)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="1055.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}} (9,582 samples, 8.20%)</title><rect x="33.4628%" y="1029" width="8.2003%" height="15" fill="rgb(236,174,8)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="1039.50">async_execu..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="1013" width="8.2003%" height="15" fill="rgb(220,197,8)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="1023.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="997" width="8.2003%" height="15" fill="rgb(240,108,37)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="1007.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (9,582 samples, 8.20%)</title><rect x="33.4628%" y="981" width="8.2003%" height="15" fill="rgb(232,176,24)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="991.50">async_execu..</text></g><g><title>async_task::runnable::Runnable::run (9,582 samples, 8.20%)</title><rect x="33.4628%" y="965" width="8.2003%" height="15" fill="rgb(243,35,29)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="975.50">async_task:..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,582 samples, 8.20%)</title><rect x="33.4628%" y="949" width="8.2003%" height="15" fill="rgb(210,37,18)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="959.50">async_task:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="933" width="8.2003%" height="15" fill="rgb(224,184,40)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="943.50">&lt;core::pin:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="917" width="8.2003%" height="15" fill="rgb(236,39,29)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="927.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,582 samples, 8.20%)</title><rect x="33.4628%" y="901" width="8.2003%" height="15" fill="rgb(232,48,39)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="911.50">async_execu..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="885" width="8.2003%" height="15" fill="rgb(236,34,42)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="895.50">&lt;async_std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,582 samples, 8.20%)</title><rect x="33.4628%" y="869" width="8.2003%" height="15" fill="rgb(243,106,37)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="879.50">async_std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,582 samples, 8.20%)</title><rect x="33.4628%" y="853" width="8.2003%" height="15" fill="rgb(218,96,6)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="863.50">std::thread..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,582 samples, 8.20%)</title><rect x="33.4628%" y="837" width="8.2003%" height="15" fill="rgb(235,130,12)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="847.50">std::thread..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,582 samples, 8.20%)</title><rect x="33.4628%" y="821" width="8.2003%" height="15" fill="rgb(231,95,0)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="831.50">async_std::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,582 samples, 8.20%)</title><rect x="33.4628%" y="805" width="8.2003%" height="15" fill="rgb(228,12,23)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="815.50">&lt;async_std:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,582 samples, 8.20%)</title><rect x="33.4628%" y="789" width="8.2003%" height="15" fill="rgb(216,12,1)" fg:x="39101" fg:w="9582"/><text x="33.7128%" y="799.50">&lt;core::futu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (566 samples, 0.48%)</title><rect x="41.1788%" y="773" width="0.4844%" height="15" fill="rgb(219,59,3)" fg:x="48117" fg:w="566"/><text x="41.4288%" y="783.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (18 samples, 0.02%)</title><rect x="41.6632%" y="1077" width="0.0154%" height="15" fill="rgb(215,208,46)" fg:x="48683" fg:w="18"/><text x="41.9132%" y="1087.50"></text></g><g><title>[libc-2.31.so] (298 samples, 0.26%)</title><rect x="41.7624%" y="821" width="0.2550%" height="15" fill="rgb(254,224,29)" fg:x="48799" fg:w="298"/><text x="42.0124%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (325 samples, 0.28%)</title><rect x="41.7419%" y="837" width="0.2781%" height="15" fill="rgb(232,14,29)" fg:x="48775" fg:w="325"/><text x="41.9919%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (524 samples, 0.45%)</title><rect x="41.6914%" y="853" width="0.4484%" height="15" fill="rgb(208,45,52)" fg:x="48716" fg:w="524"/><text x="41.9414%" y="863.50"></text></g><g><title>[libc-2.31.so] (140 samples, 0.12%)</title><rect x="42.0200%" y="837" width="0.1198%" height="15" fill="rgb(234,191,28)" fg:x="49100" fg:w="140"/><text x="42.2700%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (536 samples, 0.46%)</title><rect x="41.6863%" y="901" width="0.4587%" height="15" fill="rgb(244,67,43)" fg:x="48710" fg:w="536"/><text x="41.9363%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (536 samples, 0.46%)</title><rect x="41.6863%" y="885" width="0.4587%" height="15" fill="rgb(236,189,24)" fg:x="48710" fg:w="536"/><text x="41.9363%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (536 samples, 0.46%)</title><rect x="41.6863%" y="869" width="0.4587%" height="15" fill="rgb(239,214,33)" fg:x="48710" fg:w="536"/><text x="41.9363%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (122 samples, 0.10%)</title><rect x="42.1955%" y="693" width="0.1044%" height="15" fill="rgb(226,176,41)" fg:x="49305" fg:w="122"/><text x="42.4455%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (122 samples, 0.10%)</title><rect x="42.1955%" y="677" width="0.1044%" height="15" fill="rgb(248,47,8)" fg:x="49305" fg:w="122"/><text x="42.4455%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (266 samples, 0.23%)</title><rect x="42.2999%" y="693" width="0.2276%" height="15" fill="rgb(218,81,44)" fg:x="49427" fg:w="266"/><text x="42.5499%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (265 samples, 0.23%)</title><rect x="42.3007%" y="677" width="0.2268%" height="15" fill="rgb(213,98,6)" fg:x="49428" fg:w="265"/><text x="42.5507%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (431 samples, 0.37%)</title><rect x="42.1604%" y="725" width="0.3689%" height="15" fill="rgb(222,85,22)" fg:x="49264" fg:w="431"/><text x="42.4104%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (418 samples, 0.36%)</title><rect x="42.1715%" y="709" width="0.3577%" height="15" fill="rgb(239,46,39)" fg:x="49277" fg:w="418"/><text x="42.4215%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (33 samples, 0.03%)</title><rect x="42.5352%" y="709" width="0.0282%" height="15" fill="rgb(237,12,29)" fg:x="49702" fg:w="33"/><text x="42.7852%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.02%)</title><rect x="42.5387%" y="693" width="0.0248%" height="15" fill="rgb(214,77,8)" fg:x="49706" fg:w="29"/><text x="42.7887%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="42.5387%" y="677" width="0.0248%" height="15" fill="rgb(217,168,37)" fg:x="49706" fg:w="29"/><text x="42.7887%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="42.5395%" y="661" width="0.0240%" height="15" fill="rgb(221,217,23)" fg:x="49707" fg:w="28"/><text x="42.7895%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (28 samples, 0.02%)</title><rect x="42.5395%" y="645" width="0.0240%" height="15" fill="rgb(243,229,36)" fg:x="49707" fg:w="28"/><text x="42.7895%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (28 samples, 0.02%)</title><rect x="42.5395%" y="629" width="0.0240%" height="15" fill="rgb(251,163,40)" fg:x="49707" fg:w="28"/><text x="42.7895%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (28 samples, 0.02%)</title><rect x="42.5395%" y="613" width="0.0240%" height="15" fill="rgb(237,222,12)" fg:x="49707" fg:w="28"/><text x="42.7895%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.01%)</title><rect x="42.5635%" y="709" width="0.0103%" height="15" fill="rgb(248,132,6)" fg:x="49735" fg:w="12"/><text x="42.8135%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="42.5635%" y="693" width="0.0103%" height="15" fill="rgb(227,167,50)" fg:x="49735" fg:w="12"/><text x="42.8135%" y="703.50"></text></g><g><title>event_listener::Inner::lock (30 samples, 0.03%)</title><rect x="42.5755%" y="709" width="0.0257%" height="15" fill="rgb(242,84,37)" fg:x="49749" fg:w="30"/><text x="42.8255%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="42.5780%" y="693" width="0.0231%" height="15" fill="rgb(212,4,50)" fg:x="49752" fg:w="27"/><text x="42.8280%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.02%)</title><rect x="42.5823%" y="677" width="0.0188%" height="15" fill="rgb(230,228,32)" fg:x="49757" fg:w="22"/><text x="42.8323%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (22 samples, 0.02%)</title><rect x="42.5823%" y="661" width="0.0188%" height="15" fill="rgb(248,217,23)" fg:x="49757" fg:w="22"/><text x="42.8323%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (21 samples, 0.02%)</title><rect x="42.5832%" y="645" width="0.0180%" height="15" fill="rgb(238,197,32)" fg:x="49758" fg:w="21"/><text x="42.8332%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.02%)</title><rect x="42.5832%" y="629" width="0.0180%" height="15" fill="rgb(236,106,1)" fg:x="49758" fg:w="21"/><text x="42.8332%" y="639.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (16 samples, 0.01%)</title><rect x="42.6105%" y="661" width="0.0137%" height="15" fill="rgb(219,228,13)" fg:x="49790" fg:w="16"/><text x="42.8605%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="42.6105%" y="645" width="0.0137%" height="15" fill="rgb(238,30,35)" fg:x="49790" fg:w="16"/><text x="42.8605%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="42.6105%" y="629" width="0.0137%" height="15" fill="rgb(236,70,23)" fg:x="49790" fg:w="16"/><text x="42.8605%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (24 samples, 0.02%)</title><rect x="42.6345%" y="613" width="0.0205%" height="15" fill="rgb(249,104,48)" fg:x="49818" fg:w="24"/><text x="42.8845%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="42.6345%" y="597" width="0.0205%" height="15" fill="rgb(254,117,50)" fg:x="49818" fg:w="24"/><text x="42.8845%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.02%)</title><rect x="42.6345%" y="581" width="0.0205%" height="15" fill="rgb(223,152,4)" fg:x="49818" fg:w="24"/><text x="42.8845%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (24 samples, 0.02%)</title><rect x="42.6345%" y="565" width="0.0205%" height="15" fill="rgb(245,6,2)" fg:x="49818" fg:w="24"/><text x="42.8845%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="42.6345%" y="549" width="0.0205%" height="15" fill="rgb(249,150,24)" fg:x="49818" fg:w="24"/><text x="42.8845%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="42.6345%" y="533" width="0.0205%" height="15" fill="rgb(228,185,42)" fg:x="49818" fg:w="24"/><text x="42.8845%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (12 samples, 0.01%)</title><rect x="42.6551%" y="613" width="0.0103%" height="15" fill="rgb(226,39,33)" fg:x="49842" fg:w="12"/><text x="42.9051%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="42.6551%" y="597" width="0.0103%" height="15" fill="rgb(221,166,19)" fg:x="49842" fg:w="12"/><text x="42.9051%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (18 samples, 0.02%)</title><rect x="42.6876%" y="533" width="0.0154%" height="15" fill="rgb(209,109,2)" fg:x="49880" fg:w="18"/><text x="42.9376%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.02%)</title><rect x="42.6876%" y="517" width="0.0154%" height="15" fill="rgb(252,216,26)" fg:x="49880" fg:w="18"/><text x="42.9376%" y="527.50"></text></g><g><title>parking::Unparker::unpark (46 samples, 0.04%)</title><rect x="42.6773%" y="565" width="0.0394%" height="15" fill="rgb(227,173,36)" fg:x="49868" fg:w="46"/><text x="42.9273%" y="575.50"></text></g><g><title>parking::Inner::unpark (42 samples, 0.04%)</title><rect x="42.6807%" y="549" width="0.0359%" height="15" fill="rgb(209,90,7)" fg:x="49872" fg:w="42"/><text x="42.9307%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (63 samples, 0.05%)</title><rect x="42.6653%" y="581" width="0.0539%" height="15" fill="rgb(250,194,11)" fg:x="49854" fg:w="63"/><text x="42.9153%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (89 samples, 0.08%)</title><rect x="42.6653%" y="613" width="0.0762%" height="15" fill="rgb(220,72,50)" fg:x="49854" fg:w="89"/><text x="42.9153%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (89 samples, 0.08%)</title><rect x="42.6653%" y="597" width="0.0762%" height="15" fill="rgb(222,106,48)" fg:x="49854" fg:w="89"/><text x="42.9153%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (26 samples, 0.02%)</title><rect x="42.7192%" y="581" width="0.0223%" height="15" fill="rgb(216,220,45)" fg:x="49917" fg:w="26"/><text x="42.9692%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="42.7192%" y="565" width="0.0223%" height="15" fill="rgb(234,112,18)" fg:x="49917" fg:w="26"/><text x="42.9692%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="42.7201%" y="549" width="0.0214%" height="15" fill="rgb(206,179,9)" fg:x="49918" fg:w="25"/><text x="42.9701%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="42.7201%" y="533" width="0.0214%" height="15" fill="rgb(215,115,40)" fg:x="49918" fg:w="25"/><text x="42.9701%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (26 samples, 0.02%)</title><rect x="42.7466%" y="565" width="0.0223%" height="15" fill="rgb(222,69,34)" fg:x="49949" fg:w="26"/><text x="42.9966%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="42.7466%" y="549" width="0.0223%" height="15" fill="rgb(209,161,10)" fg:x="49949" fg:w="26"/><text x="42.9966%" y="559.50"></text></g><g><title>async_executor::State::notify (179 samples, 0.15%)</title><rect x="42.6251%" y="629" width="0.1532%" height="15" fill="rgb(217,6,38)" fg:x="49807" fg:w="179"/><text x="42.8751%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.04%)</title><rect x="42.7415%" y="613" width="0.0368%" height="15" fill="rgb(229,229,48)" fg:x="49943" fg:w="43"/><text x="42.9915%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (39 samples, 0.03%)</title><rect x="42.7449%" y="597" width="0.0334%" height="15" fill="rgb(225,21,28)" fg:x="49947" fg:w="39"/><text x="42.9949%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (39 samples, 0.03%)</title><rect x="42.7449%" y="581" width="0.0334%" height="15" fill="rgb(206,33,13)" fg:x="49947" fg:w="39"/><text x="42.9949%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (40 samples, 0.03%)</title><rect x="42.7800%" y="597" width="0.0342%" height="15" fill="rgb(242,178,17)" fg:x="49988" fg:w="40"/><text x="43.0300%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (40 samples, 0.03%)</title><rect x="42.7800%" y="581" width="0.0342%" height="15" fill="rgb(220,162,5)" fg:x="49988" fg:w="40"/><text x="43.0300%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (233 samples, 0.20%)</title><rect x="42.6251%" y="645" width="0.1994%" height="15" fill="rgb(210,33,43)" fg:x="49807" fg:w="233"/><text x="42.8751%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (54 samples, 0.05%)</title><rect x="42.7783%" y="629" width="0.0462%" height="15" fill="rgb(216,116,54)" fg:x="49986" fg:w="54"/><text x="43.0283%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (54 samples, 0.05%)</title><rect x="42.7783%" y="613" width="0.0462%" height="15" fill="rgb(249,92,24)" fg:x="49986" fg:w="54"/><text x="43.0283%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (28 samples, 0.02%)</title><rect x="42.8245%" y="645" width="0.0240%" height="15" fill="rgb(231,189,14)" fg:x="50040" fg:w="28"/><text x="43.0745%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (28 samples, 0.02%)</title><rect x="42.8245%" y="629" width="0.0240%" height="15" fill="rgb(230,8,41)" fg:x="50040" fg:w="28"/><text x="43.0745%" y="639.50"></text></g><g><title>event_listener::List::notify (295 samples, 0.25%)</title><rect x="42.6011%" y="709" width="0.2525%" height="15" fill="rgb(249,7,27)" fg:x="49779" fg:w="295"/><text x="42.8511%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (286 samples, 0.24%)</title><rect x="42.6088%" y="693" width="0.2448%" height="15" fill="rgb(232,86,5)" fg:x="49788" fg:w="286"/><text x="42.8588%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (286 samples, 0.24%)</title><rect x="42.6088%" y="677" width="0.2448%" height="15" fill="rgb(224,175,18)" fg:x="49788" fg:w="286"/><text x="42.8588%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (268 samples, 0.23%)</title><rect x="42.6242%" y="661" width="0.2294%" height="15" fill="rgb(220,129,12)" fg:x="49806" fg:w="268"/><text x="42.8742%" y="671.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,156 samples, 0.99%)</title><rect x="42.1535%" y="741" width="0.9893%" height="15" fill="rgb(210,19,36)" fg:x="49256" fg:w="1156"/><text x="42.4035%" y="751.50"></text></g><g><title>event_listener::Event::notify (717 samples, 0.61%)</title><rect x="42.5292%" y="725" width="0.6136%" height="15" fill="rgb(219,96,14)" fg:x="49695" fg:w="717"/><text x="42.7792%" y="735.50"></text></g><g><title>event_listener::full_fence (338 samples, 0.29%)</title><rect x="42.8536%" y="709" width="0.2893%" height="15" fill="rgb(249,106,1)" fg:x="50074" fg:w="338"/><text x="43.1036%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (338 samples, 0.29%)</title><rect x="42.8536%" y="693" width="0.2893%" height="15" fill="rgb(249,155,20)" fg:x="50074" fg:w="338"/><text x="43.1036%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (338 samples, 0.29%)</title><rect x="42.8536%" y="677" width="0.2893%" height="15" fill="rgb(244,168,9)" fg:x="50074" fg:w="338"/><text x="43.1036%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,238 samples, 1.06%)</title><rect x="42.1450%" y="821" width="1.0595%" height="15" fill="rgb(216,23,50)" fg:x="49246" fg:w="1238"/><text x="42.3950%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,238 samples, 1.06%)</title><rect x="42.1450%" y="805" width="1.0595%" height="15" fill="rgb(224,219,20)" fg:x="49246" fg:w="1238"/><text x="42.3950%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,238 samples, 1.06%)</title><rect x="42.1450%" y="789" width="1.0595%" height="15" fill="rgb(222,156,15)" fg:x="49246" fg:w="1238"/><text x="42.3950%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,238 samples, 1.06%)</title><rect x="42.1450%" y="773" width="1.0595%" height="15" fill="rgb(231,97,17)" fg:x="49246" fg:w="1238"/><text x="42.3950%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,238 samples, 1.06%)</title><rect x="42.1450%" y="757" width="1.0595%" height="15" fill="rgb(218,70,48)" fg:x="49246" fg:w="1238"/><text x="42.3950%" y="767.50"></text></g><g><title>event_listener::Event::notify (66 samples, 0.06%)</title><rect x="43.1480%" y="741" width="0.0565%" height="15" fill="rgb(212,196,52)" fg:x="50418" fg:w="66"/><text x="43.3980%" y="751.50"></text></g><g><title>event_listener::full_fence (66 samples, 0.06%)</title><rect x="43.1480%" y="725" width="0.0565%" height="15" fill="rgb(243,203,18)" fg:x="50418" fg:w="66"/><text x="43.3980%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (66 samples, 0.06%)</title><rect x="43.1480%" y="709" width="0.0565%" height="15" fill="rgb(252,125,41)" fg:x="50418" fg:w="66"/><text x="43.3980%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.06%)</title><rect x="43.1480%" y="693" width="0.0565%" height="15" fill="rgb(223,180,33)" fg:x="50418" fg:w="66"/><text x="43.3980%" y="703.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="43.4766%" y="805" width="0.0188%" height="15" fill="rgb(254,159,46)" fg:x="50802" fg:w="22"/><text x="43.7266%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (56 samples, 0.05%)</title><rect x="43.6906%" y="677" width="0.0479%" height="15" fill="rgb(254,38,10)" fg:x="51052" fg:w="56"/><text x="43.9406%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (56 samples, 0.05%)</title><rect x="43.6906%" y="661" width="0.0479%" height="15" fill="rgb(208,217,32)" fg:x="51052" fg:w="56"/><text x="43.9406%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (56 samples, 0.05%)</title><rect x="43.6906%" y="645" width="0.0479%" height="15" fill="rgb(221,120,13)" fg:x="51052" fg:w="56"/><text x="43.9406%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="43.6906%" y="629" width="0.0479%" height="15" fill="rgb(246,54,52)" fg:x="51052" fg:w="56"/><text x="43.9406%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="43.6906%" y="613" width="0.0479%" height="15" fill="rgb(242,34,25)" fg:x="51052" fg:w="56"/><text x="43.9406%" y="623.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.04%)</title><rect x="43.6974%" y="597" width="0.0411%" height="15" fill="rgb(247,209,9)" fg:x="51060" fg:w="48"/><text x="43.9474%" y="607.50"></text></g><g><title>__rg_alloc (48 samples, 0.04%)</title><rect x="43.6974%" y="581" width="0.0411%" height="15" fill="rgb(228,71,26)" fg:x="51060" fg:w="48"/><text x="43.9474%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (48 samples, 0.04%)</title><rect x="43.6974%" y="565" width="0.0411%" height="15" fill="rgb(222,145,49)" fg:x="51060" fg:w="48"/><text x="43.9474%" y="575.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.03%)</title><rect x="43.7043%" y="549" width="0.0342%" height="15" fill="rgb(218,121,17)" fg:x="51068" fg:w="40"/><text x="43.9543%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (96 samples, 0.08%)</title><rect x="43.6812%" y="789" width="0.0822%" height="15" fill="rgb(244,50,7)" fg:x="51041" fg:w="96"/><text x="43.9312%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (90 samples, 0.08%)</title><rect x="43.6863%" y="773" width="0.0770%" height="15" fill="rgb(246,229,37)" fg:x="51047" fg:w="90"/><text x="43.9363%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (88 samples, 0.08%)</title><rect x="43.6880%" y="757" width="0.0753%" height="15" fill="rgb(225,18,5)" fg:x="51049" fg:w="88"/><text x="43.9380%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (85 samples, 0.07%)</title><rect x="43.6906%" y="741" width="0.0727%" height="15" fill="rgb(213,204,8)" fg:x="51052" fg:w="85"/><text x="43.9406%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (85 samples, 0.07%)</title><rect x="43.6906%" y="725" width="0.0727%" height="15" fill="rgb(238,103,6)" fg:x="51052" fg:w="85"/><text x="43.9406%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (85 samples, 0.07%)</title><rect x="43.6906%" y="709" width="0.0727%" height="15" fill="rgb(222,25,35)" fg:x="51052" fg:w="85"/><text x="43.9406%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (85 samples, 0.07%)</title><rect x="43.6906%" y="693" width="0.0727%" height="15" fill="rgb(213,203,35)" fg:x="51052" fg:w="85"/><text x="43.9406%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.02%)</title><rect x="43.7385%" y="677" width="0.0248%" height="15" fill="rgb(221,79,53)" fg:x="51108" fg:w="29"/><text x="43.9885%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="43.7385%" y="661" width="0.0248%" height="15" fill="rgb(243,200,35)" fg:x="51108" fg:w="29"/><text x="43.9885%" y="671.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="43.7462%" y="645" width="0.0171%" height="15" fill="rgb(248,60,25)" fg:x="51117" fg:w="20"/><text x="43.9962%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.04%)</title><rect x="43.7719%" y="581" width="0.0368%" height="15" fill="rgb(227,53,46)" fg:x="51147" fg:w="43"/><text x="44.0219%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.04%)</title><rect x="43.7719%" y="565" width="0.0368%" height="15" fill="rgb(216,120,32)" fg:x="51147" fg:w="43"/><text x="44.0219%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.04%)</title><rect x="43.7719%" y="549" width="0.0368%" height="15" fill="rgb(220,134,1)" fg:x="51147" fg:w="43"/><text x="44.0219%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="43.7744%" y="533" width="0.0342%" height="15" fill="rgb(237,168,5)" fg:x="51150" fg:w="40"/><text x="44.0244%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="43.7744%" y="517" width="0.0342%" height="15" fill="rgb(231,100,33)" fg:x="51150" fg:w="40"/><text x="44.0244%" y="527.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="43.7744%" y="501" width="0.0342%" height="15" fill="rgb(236,177,47)" fg:x="51150" fg:w="40"/><text x="44.0244%" y="511.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="43.7744%" y="485" width="0.0342%" height="15" fill="rgb(235,7,49)" fg:x="51150" fg:w="40"/><text x="44.0244%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="43.7744%" y="469" width="0.0342%" height="15" fill="rgb(232,119,22)" fg:x="51150" fg:w="40"/><text x="44.0244%" y="479.50"></text></g><g><title>sn_rust_alloc (39 samples, 0.03%)</title><rect x="43.7753%" y="453" width="0.0334%" height="15" fill="rgb(254,73,53)" fg:x="51151" fg:w="39"/><text x="44.0253%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="43.7856%" y="437" width="0.0231%" height="15" fill="rgb(251,35,20)" fg:x="51163" fg:w="27"/><text x="44.0356%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="43.7710%" y="693" width="0.0488%" height="15" fill="rgb(241,119,20)" fg:x="51146" fg:w="57"/><text x="44.0210%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (57 samples, 0.05%)</title><rect x="43.7710%" y="677" width="0.0488%" height="15" fill="rgb(207,102,14)" fg:x="51146" fg:w="57"/><text x="44.0210%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (57 samples, 0.05%)</title><rect x="43.7710%" y="661" width="0.0488%" height="15" fill="rgb(248,201,50)" fg:x="51146" fg:w="57"/><text x="44.0210%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (56 samples, 0.05%)</title><rect x="43.7719%" y="645" width="0.0479%" height="15" fill="rgb(222,185,44)" fg:x="51147" fg:w="56"/><text x="44.0219%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (56 samples, 0.05%)</title><rect x="43.7719%" y="629" width="0.0479%" height="15" fill="rgb(218,107,18)" fg:x="51147" fg:w="56"/><text x="44.0219%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (56 samples, 0.05%)</title><rect x="43.7719%" y="613" width="0.0479%" height="15" fill="rgb(237,177,39)" fg:x="51147" fg:w="56"/><text x="44.0219%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (56 samples, 0.05%)</title><rect x="43.7719%" y="597" width="0.0479%" height="15" fill="rgb(246,69,6)" fg:x="51147" fg:w="56"/><text x="44.0219%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="43.8087%" y="581" width="0.0111%" height="15" fill="rgb(234,208,37)" fg:x="51190" fg:w="13"/><text x="44.0587%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="43.8087%" y="565" width="0.0111%" height="15" fill="rgb(225,4,6)" fg:x="51190" fg:w="13"/><text x="44.0587%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="43.8284%" y="645" width="0.0231%" height="15" fill="rgb(233,45,0)" fg:x="51213" fg:w="27"/><text x="44.0784%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="43.8284%" y="629" width="0.0231%" height="15" fill="rgb(226,136,5)" fg:x="51213" fg:w="27"/><text x="44.0784%" y="639.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="43.8284%" y="613" width="0.0231%" height="15" fill="rgb(211,91,47)" fg:x="51213" fg:w="27"/><text x="44.0784%" y="623.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="43.8284%" y="597" width="0.0231%" height="15" fill="rgb(242,88,51)" fg:x="51213" fg:w="27"/><text x="44.0784%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="43.8284%" y="581" width="0.0231%" height="15" fill="rgb(230,91,28)" fg:x="51213" fg:w="27"/><text x="44.0784%" y="591.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="43.8284%" y="565" width="0.0231%" height="15" fill="rgb(254,186,29)" fg:x="51213" fg:w="27"/><text x="44.0784%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 0.03%)</title><rect x="43.8258%" y="693" width="0.0291%" height="15" fill="rgb(238,6,4)" fg:x="51210" fg:w="34"/><text x="44.0758%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.03%)</title><rect x="43.8284%" y="677" width="0.0265%" height="15" fill="rgb(221,151,16)" fg:x="51213" fg:w="31"/><text x="44.0784%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.03%)</title><rect x="43.8284%" y="661" width="0.0265%" height="15" fill="rgb(251,143,52)" fg:x="51213" fg:w="31"/><text x="44.0784%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (418 samples, 0.36%)</title><rect x="43.5032%" y="805" width="0.3577%" height="15" fill="rgb(206,90,15)" fg:x="50833" fg:w="418"/><text x="43.7532%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (114 samples, 0.10%)</title><rect x="43.7633%" y="789" width="0.0976%" height="15" fill="rgb(218,35,8)" fg:x="51137" fg:w="114"/><text x="44.0133%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (106 samples, 0.09%)</title><rect x="43.7702%" y="773" width="0.0907%" height="15" fill="rgb(239,215,6)" fg:x="51145" fg:w="106"/><text x="44.0202%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (106 samples, 0.09%)</title><rect x="43.7702%" y="757" width="0.0907%" height="15" fill="rgb(245,116,39)" fg:x="51145" fg:w="106"/><text x="44.0202%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (106 samples, 0.09%)</title><rect x="43.7702%" y="741" width="0.0907%" height="15" fill="rgb(242,65,28)" fg:x="51145" fg:w="106"/><text x="44.0202%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (106 samples, 0.09%)</title><rect x="43.7702%" y="725" width="0.0907%" height="15" fill="rgb(252,132,53)" fg:x="51145" fg:w="106"/><text x="44.0202%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (106 samples, 0.09%)</title><rect x="43.7702%" y="709" width="0.0907%" height="15" fill="rgb(224,159,50)" fg:x="51145" fg:w="106"/><text x="44.0202%" y="719.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="43.8609%" y="805" width="0.0402%" height="15" fill="rgb(224,93,4)" fg:x="51251" fg:w="47"/><text x="44.1109%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (154 samples, 0.13%)</title><rect x="43.9037%" y="805" width="0.1318%" height="15" fill="rgb(208,81,34)" fg:x="51301" fg:w="154"/><text x="44.1537%" y="815.50"></text></g><g><title>core::ptr::write (142 samples, 0.12%)</title><rect x="43.9139%" y="789" width="0.1215%" height="15" fill="rgb(233,92,54)" fg:x="51313" fg:w="142"/><text x="44.1639%" y="799.50"></text></g><g><title>[libc-2.31.so] (142 samples, 0.12%)</title><rect x="43.9139%" y="773" width="0.1215%" height="15" fill="rgb(237,21,14)" fg:x="51313" fg:w="142"/><text x="44.1639%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (331 samples, 0.28%)</title><rect x="44.0629%" y="645" width="0.2833%" height="15" fill="rgb(249,128,51)" fg:x="51487" fg:w="331"/><text x="44.3129%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (364 samples, 0.31%)</title><rect x="44.0406%" y="741" width="0.3115%" height="15" fill="rgb(223,129,24)" fg:x="51461" fg:w="364"/><text x="44.2906%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (364 samples, 0.31%)</title><rect x="44.0406%" y="725" width="0.3115%" height="15" fill="rgb(231,168,25)" fg:x="51461" fg:w="364"/><text x="44.2906%" y="735.50"></text></g><g><title>alloc::alloc::alloc (360 samples, 0.31%)</title><rect x="44.0440%" y="709" width="0.3081%" height="15" fill="rgb(224,39,20)" fg:x="51465" fg:w="360"/><text x="44.2940%" y="719.50"></text></g><g><title>__rg_alloc (360 samples, 0.31%)</title><rect x="44.0440%" y="693" width="0.3081%" height="15" fill="rgb(225,152,53)" fg:x="51465" fg:w="360"/><text x="44.2940%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (360 samples, 0.31%)</title><rect x="44.0440%" y="677" width="0.3081%" height="15" fill="rgb(252,17,24)" fg:x="51465" fg:w="360"/><text x="44.2940%" y="687.50"></text></g><g><title>sn_rust_alloc (360 samples, 0.31%)</title><rect x="44.0440%" y="661" width="0.3081%" height="15" fill="rgb(250,114,30)" fg:x="51465" fg:w="360"/><text x="44.2940%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (372 samples, 0.32%)</title><rect x="44.0355%" y="805" width="0.3184%" height="15" fill="rgb(229,5,4)" fg:x="51455" fg:w="372"/><text x="44.2855%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (372 samples, 0.32%)</title><rect x="44.0355%" y="789" width="0.3184%" height="15" fill="rgb(225,176,49)" fg:x="51455" fg:w="372"/><text x="44.2855%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (368 samples, 0.31%)</title><rect x="44.0389%" y="773" width="0.3149%" height="15" fill="rgb(224,221,49)" fg:x="51459" fg:w="368"/><text x="44.2889%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (368 samples, 0.31%)</title><rect x="44.0389%" y="757" width="0.3149%" height="15" fill="rgb(253,169,27)" fg:x="51459" fg:w="368"/><text x="44.2889%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (32 samples, 0.03%)</title><rect x="44.3538%" y="805" width="0.0274%" height="15" fill="rgb(211,206,16)" fg:x="51827" fg:w="32"/><text x="44.6038%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="44.3538%" y="789" width="0.0274%" height="15" fill="rgb(244,87,35)" fg:x="51827" fg:w="32"/><text x="44.6038%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (28 samples, 0.02%)</title><rect x="44.3572%" y="773" width="0.0240%" height="15" fill="rgb(246,28,10)" fg:x="51831" fg:w="28"/><text x="44.6072%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="44.3572%" y="757" width="0.0240%" height="15" fill="rgb(229,12,44)" fg:x="51831" fg:w="28"/><text x="44.6072%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="44.3607%" y="741" width="0.0205%" height="15" fill="rgb(210,145,37)" fg:x="51835" fg:w="24"/><text x="44.6107%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="44.3607%" y="725" width="0.0205%" height="15" fill="rgb(227,112,52)" fg:x="51835" fg:w="24"/><text x="44.6107%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="44.3607%" y="709" width="0.0205%" height="15" fill="rgb(238,155,34)" fg:x="51835" fg:w="24"/><text x="44.6107%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="44.3607%" y="693" width="0.0205%" height="15" fill="rgb(239,226,36)" fg:x="51835" fg:w="24"/><text x="44.6107%" y="703.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="44.3607%" y="677" width="0.0205%" height="15" fill="rgb(230,16,23)" fg:x="51835" fg:w="24"/><text x="44.6107%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="44.3607%" y="661" width="0.0205%" height="15" fill="rgb(236,171,36)" fg:x="51835" fg:w="24"/><text x="44.6107%" y="671.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="44.3632%" y="645" width="0.0180%" height="15" fill="rgb(221,22,14)" fg:x="51838" fg:w="21"/><text x="44.6132%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,615 samples, 2.24%)</title><rect x="42.1450%" y="901" width="2.2379%" height="15" fill="rgb(242,43,11)" fg:x="49246" fg:w="2615"/><text x="42.3950%" y="911.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,615 samples, 2.24%)</title><rect x="42.1450%" y="885" width="2.2379%" height="15" fill="rgb(232,69,23)" fg:x="49246" fg:w="2615"/><text x="42.3950%" y="895.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,615 samples, 2.24%)</title><rect x="42.1450%" y="869" width="2.2379%" height="15" fill="rgb(216,180,54)" fg:x="49246" fg:w="2615"/><text x="42.3950%" y="879.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,615 samples, 2.24%)</title><rect x="42.1450%" y="853" width="2.2379%" height="15" fill="rgb(216,5,24)" fg:x="49246" fg:w="2615"/><text x="42.3950%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,615 samples, 2.24%)</title><rect x="42.1450%" y="837" width="2.2379%" height="15" fill="rgb(225,89,9)" fg:x="49246" fg:w="2615"/><text x="42.3950%" y="847.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,377 samples, 1.18%)</title><rect x="43.2045%" y="821" width="1.1784%" height="15" fill="rgb(243,75,33)" fg:x="50484" fg:w="1377"/><text x="43.4545%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="44.4317%" y="837" width="0.0231%" height="15" fill="rgb(247,141,45)" fg:x="51918" fg:w="27"/><text x="44.6817%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="44.4360%" y="821" width="0.0188%" height="15" fill="rgb(232,177,36)" fg:x="51923" fg:w="22"/><text x="44.6860%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (304 samples, 0.26%)</title><rect x="44.3958%" y="853" width="0.2602%" height="15" fill="rgb(219,125,36)" fg:x="51876" fg:w="304"/><text x="44.6458%" y="863.50"></text></g><g><title>[libc-2.31.so] (235 samples, 0.20%)</title><rect x="44.4548%" y="837" width="0.2011%" height="15" fill="rgb(227,94,9)" fg:x="51945" fg:w="235"/><text x="44.7048%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (456 samples, 0.39%)</title><rect x="44.3829%" y="885" width="0.3902%" height="15" fill="rgb(240,34,52)" fg:x="51861" fg:w="456"/><text x="44.6329%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (456 samples, 0.39%)</title><rect x="44.3829%" y="869" width="0.3902%" height="15" fill="rgb(216,45,12)" fg:x="51861" fg:w="456"/><text x="44.6329%" y="879.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.12%)</title><rect x="44.6559%" y="853" width="0.1172%" height="15" fill="rgb(246,21,19)" fg:x="52180" fg:w="137"/><text x="44.9059%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (151 samples, 0.13%)</title><rect x="44.7732%" y="853" width="0.1292%" height="15" fill="rgb(213,98,42)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (151 samples, 0.13%)</title><rect x="44.7732%" y="837" width="0.1292%" height="15" fill="rgb(250,136,47)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (151 samples, 0.13%)</title><rect x="44.7732%" y="821" width="0.1292%" height="15" fill="rgb(251,124,27)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (151 samples, 0.13%)</title><rect x="44.7732%" y="805" width="0.1292%" height="15" fill="rgb(229,180,14)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (151 samples, 0.13%)</title><rect x="44.7732%" y="789" width="0.1292%" height="15" fill="rgb(245,216,25)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (151 samples, 0.13%)</title><rect x="44.7732%" y="773" width="0.1292%" height="15" fill="rgb(251,43,5)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (151 samples, 0.13%)</title><rect x="44.7732%" y="757" width="0.1292%" height="15" fill="rgb(250,128,24)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (151 samples, 0.13%)</title><rect x="44.7732%" y="741" width="0.1292%" height="15" fill="rgb(217,117,27)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (151 samples, 0.13%)</title><rect x="44.7732%" y="725" width="0.1292%" height="15" fill="rgb(245,147,4)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (151 samples, 0.13%)</title><rect x="44.7732%" y="709" width="0.1292%" height="15" fill="rgb(242,201,35)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (151 samples, 0.13%)</title><rect x="44.7732%" y="693" width="0.1292%" height="15" fill="rgb(218,181,1)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (151 samples, 0.13%)</title><rect x="44.7732%" y="677" width="0.1292%" height="15" fill="rgb(222,6,29)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (151 samples, 0.13%)</title><rect x="44.7732%" y="661" width="0.1292%" height="15" fill="rgb(208,186,3)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="671.50"></text></g><g><title>alloc::alloc::alloc (151 samples, 0.13%)</title><rect x="44.7732%" y="645" width="0.1292%" height="15" fill="rgb(216,36,26)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="655.50"></text></g><g><title>__rg_alloc (151 samples, 0.13%)</title><rect x="44.7732%" y="629" width="0.1292%" height="15" fill="rgb(248,201,23)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (151 samples, 0.13%)</title><rect x="44.7732%" y="613" width="0.1292%" height="15" fill="rgb(251,170,31)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="623.50"></text></g><g><title>sn_rust_alloc (151 samples, 0.13%)</title><rect x="44.7732%" y="597" width="0.1292%" height="15" fill="rgb(207,110,25)" fg:x="52317" fg:w="151"/><text x="45.0232%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (12 samples, 0.01%)</title><rect x="44.9024%" y="853" width="0.0103%" height="15" fill="rgb(250,54,15)" fg:x="52468" fg:w="12"/><text x="45.1524%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="44.9024%" y="837" width="0.0103%" height="15" fill="rgb(227,68,33)" fg:x="52468" fg:w="12"/><text x="45.1524%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (82 samples, 0.07%)</title><rect x="44.9246%" y="821" width="0.0702%" height="15" fill="rgb(238,34,41)" fg:x="52494" fg:w="82"/><text x="45.1746%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.07%)</title><rect x="44.9272%" y="805" width="0.0676%" height="15" fill="rgb(220,11,15)" fg:x="52497" fg:w="79"/><text x="45.1772%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (79 samples, 0.07%)</title><rect x="44.9272%" y="789" width="0.0676%" height="15" fill="rgb(246,111,35)" fg:x="52497" fg:w="79"/><text x="45.1772%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.07%)</title><rect x="44.9272%" y="773" width="0.0676%" height="15" fill="rgb(209,88,53)" fg:x="52497" fg:w="79"/><text x="45.1772%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (79 samples, 0.07%)</title><rect x="44.9272%" y="757" width="0.0676%" height="15" fill="rgb(231,185,47)" fg:x="52497" fg:w="79"/><text x="45.1772%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (79 samples, 0.07%)</title><rect x="44.9272%" y="741" width="0.0676%" height="15" fill="rgb(233,154,1)" fg:x="52497" fg:w="79"/><text x="45.1772%" y="751.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="44.9460%" y="725" width="0.0488%" height="15" fill="rgb(225,15,46)" fg:x="52519" fg:w="57"/><text x="45.1960%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (722 samples, 0.62%)</title><rect x="44.3829%" y="901" width="0.6179%" height="15" fill="rgb(211,135,41)" fg:x="51861" fg:w="722"/><text x="44.6329%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (266 samples, 0.23%)</title><rect x="44.7732%" y="885" width="0.2276%" height="15" fill="rgb(208,54,0)" fg:x="52317" fg:w="266"/><text x="45.0232%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (266 samples, 0.23%)</title><rect x="44.7732%" y="869" width="0.2276%" height="15" fill="rgb(244,136,14)" fg:x="52317" fg:w="266"/><text x="45.0232%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (98 samples, 0.08%)</title><rect x="44.9169%" y="853" width="0.0839%" height="15" fill="rgb(241,56,14)" fg:x="52485" fg:w="98"/><text x="45.1669%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (91 samples, 0.08%)</title><rect x="44.9229%" y="837" width="0.0779%" height="15" fill="rgb(205,80,24)" fg:x="52492" fg:w="91"/><text x="45.1729%" y="847.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,883 samples, 3.32%)</title><rect x="41.6786%" y="1077" width="3.3231%" height="15" fill="rgb(220,57,4)" fg:x="48701" fg:w="3883"/><text x="41.9286%" y="1087.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,874 samples, 3.32%)</title><rect x="41.6863%" y="1061" width="3.3154%" height="15" fill="rgb(226,193,50)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="1071.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,874 samples, 3.32%)</title><rect x="41.6863%" y="1045" width="3.3154%" height="15" fill="rgb(231,168,22)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="1055.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,874 samples, 3.32%)</title><rect x="41.6863%" y="1029" width="3.3154%" height="15" fill="rgb(254,215,14)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="1039.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,874 samples, 3.32%)</title><rect x="41.6863%" y="1013" width="3.3154%" height="15" fill="rgb(211,115,16)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="1023.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,874 samples, 3.32%)</title><rect x="41.6863%" y="997" width="3.3154%" height="15" fill="rgb(236,210,16)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="1007.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,874 samples, 3.32%)</title><rect x="41.6863%" y="981" width="3.3154%" height="15" fill="rgb(221,94,12)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="991.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,874 samples, 3.32%)</title><rect x="41.6863%" y="965" width="3.3154%" height="15" fill="rgb(235,218,49)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="975.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,874 samples, 3.32%)</title><rect x="41.6863%" y="949" width="3.3154%" height="15" fill="rgb(217,114,14)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="959.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,874 samples, 3.32%)</title><rect x="41.6863%" y="933" width="3.3154%" height="15" fill="rgb(216,145,22)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="943.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,874 samples, 3.32%)</title><rect x="41.6863%" y="917" width="3.3154%" height="15" fill="rgb(217,112,39)" fg:x="48710" fg:w="3874"/><text x="41.9363%" y="927.50">&lt;co..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (14 samples, 0.01%)</title><rect x="45.0017%" y="1077" width="0.0120%" height="15" fill="rgb(225,85,32)" fg:x="52584" fg:w="14"/><text x="45.2517%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (60 samples, 0.05%)</title><rect x="45.0504%" y="373" width="0.0513%" height="15" fill="rgb(245,209,47)" fg:x="52641" fg:w="60"/><text x="45.3004%" y="383.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="45.1018%" y="357" width="0.0796%" height="15" fill="rgb(218,220,15)" fg:x="52701" fg:w="93"/><text x="45.3518%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (185 samples, 0.16%)</title><rect x="45.1018%" y="373" width="0.1583%" height="15" fill="rgb(222,202,31)" fg:x="52701" fg:w="185"/><text x="45.3518%" y="383.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (92 samples, 0.08%)</title><rect x="45.1814%" y="357" width="0.0787%" height="15" fill="rgb(243,203,4)" fg:x="52794" fg:w="92"/><text x="45.4314%" y="367.50"></text></g><g><title>[libc-2.31.so] (87 samples, 0.07%)</title><rect x="45.1857%" y="341" width="0.0745%" height="15" fill="rgb(237,92,17)" fg:x="52799" fg:w="87"/><text x="45.4357%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (69 samples, 0.06%)</title><rect x="45.2610%" y="341" width="0.0591%" height="15" fill="rgb(231,119,7)" fg:x="52887" fg:w="69"/><text x="45.5110%" y="351.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (69 samples, 0.06%)</title><rect x="45.2610%" y="325" width="0.0591%" height="15" fill="rgb(237,82,41)" fg:x="52887" fg:w="69"/><text x="45.5110%" y="335.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (69 samples, 0.06%)</title><rect x="45.2610%" y="309" width="0.0591%" height="15" fill="rgb(226,81,48)" fg:x="52887" fg:w="69"/><text x="45.5110%" y="319.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="45.2635%" y="293" width="0.0565%" height="15" fill="rgb(234,70,51)" fg:x="52890" fg:w="66"/><text x="45.5135%" y="303.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (147 samples, 0.13%)</title><rect x="45.2601%" y="373" width="0.1258%" height="15" fill="rgb(251,86,4)" fg:x="52886" fg:w="147"/><text x="45.5101%" y="383.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (147 samples, 0.13%)</title><rect x="45.2601%" y="357" width="0.1258%" height="15" fill="rgb(244,144,28)" fg:x="52886" fg:w="147"/><text x="45.5101%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (73 samples, 0.06%)</title><rect x="45.3235%" y="341" width="0.0625%" height="15" fill="rgb(232,161,39)" fg:x="52960" fg:w="73"/><text x="45.5735%" y="351.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.06%)</title><rect x="45.3235%" y="325" width="0.0625%" height="15" fill="rgb(247,34,51)" fg:x="52960" fg:w="73"/><text x="45.5735%" y="335.50"></text></g><g><title>[libc-2.31.so] (128 samples, 0.11%)</title><rect x="45.3859%" y="373" width="0.1095%" height="15" fill="rgb(225,132,2)" fg:x="53033" fg:w="128"/><text x="45.6359%" y="383.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (58 samples, 0.05%)</title><rect x="45.4955%" y="373" width="0.0496%" height="15" fill="rgb(209,159,44)" fg:x="53161" fg:w="58"/><text x="45.7455%" y="383.50"></text></g><g><title>[libc-2.31.so] (53 samples, 0.05%)</title><rect x="45.4997%" y="357" width="0.0454%" height="15" fill="rgb(251,214,1)" fg:x="53166" fg:w="53"/><text x="45.7497%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (77 samples, 0.07%)</title><rect x="45.5451%" y="373" width="0.0659%" height="15" fill="rgb(247,84,47)" fg:x="53219" fg:w="77"/><text x="45.7951%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (77 samples, 0.07%)</title><rect x="45.5451%" y="357" width="0.0659%" height="15" fill="rgb(240,111,43)" fg:x="53219" fg:w="77"/><text x="45.7951%" y="367.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.07%)</title><rect x="45.5451%" y="341" width="0.0659%" height="15" fill="rgb(215,214,35)" fg:x="53219" fg:w="77"/><text x="45.7951%" y="351.50"></text></g><g><title>sn_rust_dealloc (73 samples, 0.06%)</title><rect x="45.5485%" y="325" width="0.0625%" height="15" fill="rgb(248,207,23)" fg:x="53223" fg:w="73"/><text x="45.7985%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (669 samples, 0.57%)</title><rect x="45.0410%" y="1077" width="0.5725%" height="15" fill="rgb(214,186,4)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="1087.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="1061" width="0.5725%" height="15" fill="rgb(220,133,22)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (669 samples, 0.57%)</title><rect x="45.0410%" y="1045" width="0.5725%" height="15" fill="rgb(239,134,19)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="1055.50"></text></g><g><title>std::panicking::try (669 samples, 0.57%)</title><rect x="45.0410%" y="1029" width="0.5725%" height="15" fill="rgb(250,140,9)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (669 samples, 0.57%)</title><rect x="45.0410%" y="1013" width="0.5725%" height="15" fill="rgb(225,59,14)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="1023.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (669 samples, 0.57%)</title><rect x="45.0410%" y="997" width="0.5725%" height="15" fill="rgb(214,152,51)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="981" width="0.5725%" height="15" fill="rgb(251,227,43)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="991.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (669 samples, 0.57%)</title><rect x="45.0410%" y="965" width="0.5725%" height="15" fill="rgb(241,96,17)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (669 samples, 0.57%)</title><rect x="45.0410%" y="949" width="0.5725%" height="15" fill="rgb(234,198,43)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (669 samples, 0.57%)</title><rect x="45.0410%" y="933" width="0.5725%" height="15" fill="rgb(220,108,29)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="943.50"></text></g><g><title>std::panic::catch_unwind (669 samples, 0.57%)</title><rect x="45.0410%" y="917" width="0.5725%" height="15" fill="rgb(226,163,33)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="927.50"></text></g><g><title>std::panicking::try (669 samples, 0.57%)</title><rect x="45.0410%" y="901" width="0.5725%" height="15" fill="rgb(205,194,45)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="911.50"></text></g><g><title>std::panicking::try::do_call (669 samples, 0.57%)</title><rect x="45.0410%" y="885" width="0.5725%" height="15" fill="rgb(206,143,44)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="895.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="869" width="0.5725%" height="15" fill="rgb(236,136,36)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (669 samples, 0.57%)</title><rect x="45.0410%" y="853" width="0.5725%" height="15" fill="rgb(249,172,42)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (669 samples, 0.57%)</title><rect x="45.0410%" y="837" width="0.5725%" height="15" fill="rgb(216,139,23)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="847.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="821" width="0.5725%" height="15" fill="rgb(207,166,20)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="831.50"></text></g><g><title>async_global_executor::reactor::block_on (669 samples, 0.57%)</title><rect x="45.0410%" y="805" width="0.5725%" height="15" fill="rgb(210,209,22)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="815.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="789" width="0.5725%" height="15" fill="rgb(232,118,20)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="799.50"></text></g><g><title>async_io::driver::block_on (669 samples, 0.57%)</title><rect x="45.0410%" y="773" width="0.5725%" height="15" fill="rgb(238,113,42)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="783.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="757" width="0.5725%" height="15" fill="rgb(231,42,5)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="741" width="0.5725%" height="15" fill="rgb(243,166,24)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="751.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="725" width="0.5725%" height="15" fill="rgb(237,226,12)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="735.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="709" width="0.5725%" height="15" fill="rgb(229,133,24)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="693" width="0.5725%" height="15" fill="rgb(238,33,43)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="677" width="0.5725%" height="15" fill="rgb(227,59,38)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="687.50"></text></g><g><title>async_task::runnable::Runnable::run (669 samples, 0.57%)</title><rect x="45.0410%" y="661" width="0.5725%" height="15" fill="rgb(230,97,0)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (669 samples, 0.57%)</title><rect x="45.0410%" y="645" width="0.5725%" height="15" fill="rgb(250,173,50)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="655.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="629" width="0.5725%" height="15" fill="rgb(240,15,50)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="613" width="0.5725%" height="15" fill="rgb(221,93,22)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="623.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="597" width="0.5725%" height="15" fill="rgb(245,180,53)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="607.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="581" width="0.5725%" height="15" fill="rgb(231,88,51)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="591.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (669 samples, 0.57%)</title><rect x="45.0410%" y="565" width="0.5725%" height="15" fill="rgb(240,58,21)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (669 samples, 0.57%)</title><rect x="45.0410%" y="549" width="0.5725%" height="15" fill="rgb(237,21,10)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (669 samples, 0.57%)</title><rect x="45.0410%" y="533" width="0.5725%" height="15" fill="rgb(218,43,11)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="517" width="0.5725%" height="15" fill="rgb(218,221,29)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="501" width="0.5725%" height="15" fill="rgb(214,118,42)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="485" width="0.5725%" height="15" fill="rgb(251,200,26)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (669 samples, 0.57%)</title><rect x="45.0410%" y="469" width="0.5725%" height="15" fill="rgb(237,101,39)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="479.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="453" width="0.5725%" height="15" fill="rgb(251,117,11)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="463.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (669 samples, 0.57%)</title><rect x="45.0410%" y="437" width="0.5725%" height="15" fill="rgb(216,223,23)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="421" width="0.5725%" height="15" fill="rgb(251,54,12)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (669 samples, 0.57%)</title><rect x="45.0410%" y="405" width="0.5725%" height="15" fill="rgb(254,176,54)" fg:x="52630" fg:w="669"/><text x="45.2910%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (666 samples, 0.57%)</title><rect x="45.0436%" y="389" width="0.5700%" height="15" fill="rgb(210,32,8)" fg:x="52633" fg:w="666"/><text x="45.2936%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (65 samples, 0.06%)</title><rect x="45.6136%" y="1077" width="0.0556%" height="15" fill="rgb(235,52,38)" fg:x="53299" fg:w="65"/><text x="45.8636%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="45.6786%" y="1077" width="0.0111%" height="15" fill="rgb(231,4,44)" fg:x="53375" fg:w="13"/><text x="45.9286%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="45.6786%" y="1061" width="0.0111%" height="15" fill="rgb(249,2,32)" fg:x="53375" fg:w="13"/><text x="45.9286%" y="1071.50"></text></g><g><title>core::str::converts::from_utf8 (112 samples, 0.10%)</title><rect x="45.7026%" y="1077" width="0.0959%" height="15" fill="rgb(224,65,26)" fg:x="53403" fg:w="112"/><text x="45.9526%" y="1087.50"></text></g><g><title>event_listener::Event::notify (32 samples, 0.03%)</title><rect x="45.7984%" y="1077" width="0.0274%" height="15" fill="rgb(250,73,40)" fg:x="53515" fg:w="32"/><text x="46.0484%" y="1087.50"></text></g><g><title>event_listener::full_fence (15 samples, 0.01%)</title><rect x="45.8130%" y="1061" width="0.0128%" height="15" fill="rgb(253,177,16)" fg:x="53532" fg:w="15"/><text x="46.0630%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (40 samples, 0.03%)</title><rect x="45.8275%" y="1077" width="0.0342%" height="15" fill="rgb(217,32,34)" fg:x="53549" fg:w="40"/><text x="46.0775%" y="1087.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (47 samples, 0.04%)</title><rect x="45.8660%" y="1077" width="0.0402%" height="15" fill="rgb(212,7,10)" fg:x="53594" fg:w="47"/><text x="46.1160%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (121 samples, 0.10%)</title><rect x="45.9063%" y="1077" width="0.1036%" height="15" fill="rgb(245,89,8)" fg:x="53641" fg:w="121"/><text x="46.1563%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (52 samples, 0.04%)</title><rect x="46.0098%" y="1077" width="0.0445%" height="15" fill="rgb(237,16,53)" fg:x="53762" fg:w="52"/><text x="46.2598%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (37 samples, 0.03%)</title><rect x="46.0226%" y="1061" width="0.0317%" height="15" fill="rgb(250,204,30)" fg:x="53777" fg:w="37"/><text x="46.2726%" y="1071.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (16 samples, 0.01%)</title><rect x="46.0954%" y="1061" width="0.0137%" height="15" fill="rgb(208,77,27)" fg:x="53862" fg:w="16"/><text x="46.3454%" y="1071.50"></text></g><g><title>core::intrinsics::write_bytes (16 samples, 0.01%)</title><rect x="46.0954%" y="1045" width="0.0137%" height="15" fill="rgb(250,204,28)" fg:x="53862" fg:w="16"/><text x="46.3454%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (80 samples, 0.07%)</title><rect x="46.0543%" y="1077" width="0.0685%" height="15" fill="rgb(244,63,21)" fg:x="53814" fg:w="80"/><text x="46.3043%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (16 samples, 0.01%)</title><rect x="46.1091%" y="1061" width="0.0137%" height="15" fill="rgb(236,85,44)" fg:x="53878" fg:w="16"/><text x="46.3591%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (16 samples, 0.01%)</title><rect x="46.1091%" y="1045" width="0.0137%" height="15" fill="rgb(215,98,4)" fg:x="53878" fg:w="16"/><text x="46.3591%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="46.1091%" y="1029" width="0.0137%" height="15" fill="rgb(235,38,11)" fg:x="53878" fg:w="16"/><text x="46.3591%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="46.1091%" y="1013" width="0.0137%" height="15" fill="rgb(254,186,25)" fg:x="53878" fg:w="16"/><text x="46.3591%" y="1023.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="46.1091%" y="997" width="0.0137%" height="15" fill="rgb(225,55,31)" fg:x="53878" fg:w="16"/><text x="46.3591%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="46.1091%" y="981" width="0.0137%" height="15" fill="rgb(211,15,21)" fg:x="53878" fg:w="16"/><text x="46.3591%" y="991.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (22 samples, 0.02%)</title><rect x="46.1228%" y="1077" width="0.0188%" height="15" fill="rgb(215,187,41)" fg:x="53894" fg:w="22"/><text x="46.3728%" y="1087.50"></text></g><g><title>parking::Inner::park (21 samples, 0.02%)</title><rect x="46.1416%" y="1077" width="0.0180%" height="15" fill="rgb(248,69,32)" fg:x="53916" fg:w="21"/><text x="46.3916%" y="1087.50"></text></g><g><title>polling::epoll::Poller::wait (19 samples, 0.02%)</title><rect x="46.1630%" y="1077" width="0.0163%" height="15" fill="rgb(252,102,52)" fg:x="53941" fg:w="19"/><text x="46.4130%" y="1087.50"></text></g><g><title>rmp::encode::uint::write_uint (34 samples, 0.03%)</title><rect x="46.1793%" y="1077" width="0.0291%" height="15" fill="rgb(253,140,32)" fg:x="53960" fg:w="34"/><text x="46.4293%" y="1087.50"></text></g><g><title>sn_rust_alloc (96 samples, 0.08%)</title><rect x="46.2178%" y="1077" width="0.0822%" height="15" fill="rgb(216,56,42)" fg:x="54005" fg:w="96"/><text x="46.4678%" y="1087.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (35 samples, 0.03%)</title><rect x="46.2700%" y="1061" width="0.0300%" height="15" fill="rgb(216,184,14)" fg:x="54066" fg:w="35"/><text x="46.5200%" y="1071.50"></text></g><g><title>sn_rust_realloc (22 samples, 0.02%)</title><rect x="46.3025%" y="1077" width="0.0188%" height="15" fill="rgb(237,187,27)" fg:x="54104" fg:w="22"/><text x="46.5525%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (41 samples, 0.04%)</title><rect x="46.3393%" y="1077" width="0.0351%" height="15" fill="rgb(219,65,3)" fg:x="54147" fg:w="41"/><text x="46.5893%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (56 samples, 0.05%)</title><rect x="46.4043%" y="645" width="0.0479%" height="15" fill="rgb(245,83,25)" fg:x="54223" fg:w="56"/><text x="46.6543%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (84 samples, 0.07%)</title><rect x="46.3812%" y="805" width="0.0719%" height="15" fill="rgb(214,205,45)" fg:x="54196" fg:w="84"/><text x="46.6312%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (84 samples, 0.07%)</title><rect x="46.3812%" y="789" width="0.0719%" height="15" fill="rgb(241,20,18)" fg:x="54196" fg:w="84"/><text x="46.6312%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (77 samples, 0.07%)</title><rect x="46.3872%" y="773" width="0.0659%" height="15" fill="rgb(232,163,23)" fg:x="54203" fg:w="77"/><text x="46.6372%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (74 samples, 0.06%)</title><rect x="46.3898%" y="757" width="0.0633%" height="15" fill="rgb(214,5,46)" fg:x="54206" fg:w="74"/><text x="46.6398%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74 samples, 0.06%)</title><rect x="46.3898%" y="741" width="0.0633%" height="15" fill="rgb(229,78,17)" fg:x="54206" fg:w="74"/><text x="46.6398%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (74 samples, 0.06%)</title><rect x="46.3898%" y="725" width="0.0633%" height="15" fill="rgb(248,89,10)" fg:x="54206" fg:w="74"/><text x="46.6398%" y="735.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.06%)</title><rect x="46.3924%" y="709" width="0.0608%" height="15" fill="rgb(248,54,15)" fg:x="54209" fg:w="71"/><text x="46.6424%" y="719.50"></text></g><g><title>__rg_alloc (71 samples, 0.06%)</title><rect x="46.3924%" y="693" width="0.0608%" height="15" fill="rgb(223,116,6)" fg:x="54209" fg:w="71"/><text x="46.6424%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (71 samples, 0.06%)</title><rect x="46.3924%" y="677" width="0.0608%" height="15" fill="rgb(205,125,38)" fg:x="54209" fg:w="71"/><text x="46.6424%" y="687.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.06%)</title><rect x="46.3924%" y="661" width="0.0608%" height="15" fill="rgb(251,78,38)" fg:x="54209" fg:w="71"/><text x="46.6424%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (91 samples, 0.08%)</title><rect x="46.3769%" y="869" width="0.0779%" height="15" fill="rgb(253,78,28)" fg:x="54191" fg:w="91"/><text x="46.6269%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (91 samples, 0.08%)</title><rect x="46.3769%" y="853" width="0.0779%" height="15" fill="rgb(209,120,3)" fg:x="54191" fg:w="91"/><text x="46.6269%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (91 samples, 0.08%)</title><rect x="46.3769%" y="837" width="0.0779%" height="15" fill="rgb(238,229,9)" fg:x="54191" fg:w="91"/><text x="46.6269%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (91 samples, 0.08%)</title><rect x="46.3769%" y="821" width="0.0779%" height="15" fill="rgb(253,159,18)" fg:x="54191" fg:w="91"/><text x="46.6269%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (226 samples, 0.19%)</title><rect x="46.7116%" y="581" width="0.1934%" height="15" fill="rgb(244,42,34)" fg:x="54582" fg:w="226"/><text x="46.9616%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (473 samples, 0.40%)</title><rect x="46.5010%" y="741" width="0.4048%" height="15" fill="rgb(224,8,7)" fg:x="54336" fg:w="473"/><text x="46.7510%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (473 samples, 0.40%)</title><rect x="46.5010%" y="725" width="0.4048%" height="15" fill="rgb(210,201,45)" fg:x="54336" fg:w="473"/><text x="46.7510%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (259 samples, 0.22%)</title><rect x="46.6842%" y="709" width="0.2217%" height="15" fill="rgb(252,185,21)" fg:x="54550" fg:w="259"/><text x="46.9342%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (248 samples, 0.21%)</title><rect x="46.6936%" y="693" width="0.2122%" height="15" fill="rgb(223,131,1)" fg:x="54561" fg:w="248"/><text x="46.9436%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (248 samples, 0.21%)</title><rect x="46.6936%" y="677" width="0.2122%" height="15" fill="rgb(245,141,16)" fg:x="54561" fg:w="248"/><text x="46.9436%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (248 samples, 0.21%)</title><rect x="46.6936%" y="661" width="0.2122%" height="15" fill="rgb(229,55,45)" fg:x="54561" fg:w="248"/><text x="46.9436%" y="671.50"></text></g><g><title>alloc::alloc::alloc (248 samples, 0.21%)</title><rect x="46.6936%" y="645" width="0.2122%" height="15" fill="rgb(208,92,15)" fg:x="54561" fg:w="248"/><text x="46.9436%" y="655.50"></text></g><g><title>__rg_alloc (248 samples, 0.21%)</title><rect x="46.6936%" y="629" width="0.2122%" height="15" fill="rgb(234,185,47)" fg:x="54561" fg:w="248"/><text x="46.9436%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (248 samples, 0.21%)</title><rect x="46.6936%" y="613" width="0.2122%" height="15" fill="rgb(253,104,50)" fg:x="54561" fg:w="248"/><text x="46.9436%" y="623.50"></text></g><g><title>sn_rust_alloc (247 samples, 0.21%)</title><rect x="46.6945%" y="597" width="0.2114%" height="15" fill="rgb(205,70,7)" fg:x="54562" fg:w="247"/><text x="46.9445%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (486 samples, 0.42%)</title><rect x="46.4933%" y="789" width="0.4159%" height="15" fill="rgb(240,178,43)" fg:x="54327" fg:w="486"/><text x="46.7433%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (486 samples, 0.42%)</title><rect x="46.4933%" y="773" width="0.4159%" height="15" fill="rgb(214,112,2)" fg:x="54327" fg:w="486"/><text x="46.7433%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (486 samples, 0.42%)</title><rect x="46.4933%" y="757" width="0.4159%" height="15" fill="rgb(206,46,17)" fg:x="54327" fg:w="486"/><text x="46.7433%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (509 samples, 0.44%)</title><rect x="46.4933%" y="805" width="0.4356%" height="15" fill="rgb(225,220,16)" fg:x="54327" fg:w="509"/><text x="46.7433%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="46.9093%" y="789" width="0.0197%" height="15" fill="rgb(238,65,40)" fg:x="54813" fg:w="23"/><text x="47.1593%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (19 samples, 0.02%)</title><rect x="46.9127%" y="773" width="0.0163%" height="15" fill="rgb(230,151,21)" fg:x="54817" fg:w="19"/><text x="47.1627%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (13 samples, 0.01%)</title><rect x="46.9178%" y="757" width="0.0111%" height="15" fill="rgb(218,58,49)" fg:x="54823" fg:w="13"/><text x="47.1678%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (12 samples, 0.01%)</title><rect x="46.9187%" y="741" width="0.0103%" height="15" fill="rgb(219,179,14)" fg:x="54824" fg:w="12"/><text x="47.1687%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (12 samples, 0.01%)</title><rect x="46.9187%" y="725" width="0.0103%" height="15" fill="rgb(223,72,1)" fg:x="54824" fg:w="12"/><text x="47.1687%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="46.9187%" y="709" width="0.0103%" height="15" fill="rgb(238,126,10)" fg:x="54824" fg:w="12"/><text x="47.1687%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (830 samples, 0.71%)</title><rect x="46.3769%" y="885" width="0.7103%" height="15" fill="rgb(224,206,38)" fg:x="54191" fg:w="830"/><text x="46.6269%" y="895.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (739 samples, 0.63%)</title><rect x="46.4548%" y="869" width="0.6324%" height="15" fill="rgb(212,201,54)" fg:x="54282" fg:w="739"/><text x="46.7048%" y="879.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (739 samples, 0.63%)</title><rect x="46.4548%" y="853" width="0.6324%" height="15" fill="rgb(218,154,48)" fg:x="54282" fg:w="739"/><text x="46.7048%" y="863.50"></text></g><g><title>value_trait::Builder::object (694 samples, 0.59%)</title><rect x="46.4933%" y="837" width="0.5939%" height="15" fill="rgb(232,93,24)" fg:x="54327" fg:w="694"/><text x="46.7433%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (694 samples, 0.59%)</title><rect x="46.4933%" y="821" width="0.5939%" height="15" fill="rgb(245,30,21)" fg:x="54327" fg:w="694"/><text x="46.7433%" y="831.50"></text></g><g><title>tremor_value::value::Value::Object (185 samples, 0.16%)</title><rect x="46.9289%" y="805" width="0.1583%" height="15" fill="rgb(242,148,29)" fg:x="54836" fg:w="185"/><text x="47.1789%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="47.0873%" y="869" width="0.0111%" height="15" fill="rgb(244,153,54)" fg:x="55021" fg:w="13"/><text x="47.3373%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="47.0984%" y="869" width="0.0128%" height="15" fill="rgb(252,87,22)" fg:x="55034" fg:w="15"/><text x="47.3484%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="47.0984%" y="853" width="0.0128%" height="15" fill="rgb(210,51,29)" fg:x="55034" fg:w="15"/><text x="47.3484%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="47.0984%" y="837" width="0.0128%" height="15" fill="rgb(242,136,47)" fg:x="55034" fg:w="15"/><text x="47.3484%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="47.0984%" y="821" width="0.0128%" height="15" fill="rgb(238,68,4)" fg:x="55034" fg:w="15"/><text x="47.3484%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="47.1318%" y="789" width="0.0111%" height="15" fill="rgb(242,161,30)" fg:x="55073" fg:w="13"/><text x="47.3818%" y="799.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="47.1429%" y="789" width="0.0308%" height="15" fill="rgb(218,58,44)" fg:x="55086" fg:w="36"/><text x="47.3929%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (934 samples, 0.80%)</title><rect x="46.3769%" y="901" width="0.7993%" height="15" fill="rgb(252,125,32)" fg:x="54191" fg:w="934"/><text x="46.6269%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (104 samples, 0.09%)</title><rect x="47.0873%" y="885" width="0.0890%" height="15" fill="rgb(219,178,0)" fg:x="55021" fg:w="104"/><text x="47.3373%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (76 samples, 0.07%)</title><rect x="47.1112%" y="869" width="0.0650%" height="15" fill="rgb(213,152,7)" fg:x="55049" fg:w="76"/><text x="47.3612%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (76 samples, 0.07%)</title><rect x="47.1112%" y="853" width="0.0650%" height="15" fill="rgb(249,109,34)" fg:x="55049" fg:w="76"/><text x="47.3612%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (63 samples, 0.05%)</title><rect x="47.1224%" y="837" width="0.0539%" height="15" fill="rgb(232,96,21)" fg:x="55062" fg:w="63"/><text x="47.3724%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (63 samples, 0.05%)</title><rect x="47.1224%" y="821" width="0.0539%" height="15" fill="rgb(228,27,39)" fg:x="55062" fg:w="63"/><text x="47.3724%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (63 samples, 0.05%)</title><rect x="47.1224%" y="805" width="0.0539%" height="15" fill="rgb(211,182,52)" fg:x="55062" fg:w="63"/><text x="47.3724%" y="815.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (16 samples, 0.01%)</title><rect x="47.1763%" y="901" width="0.0137%" height="15" fill="rgb(234,178,38)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="47.1763%" y="885" width="0.0137%" height="15" fill="rgb(221,111,3)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="47.1763%" y="869" width="0.0137%" height="15" fill="rgb(228,175,21)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="47.1763%" y="853" width="0.0137%" height="15" fill="rgb(228,174,43)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="863.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="47.1763%" y="837" width="0.0137%" height="15" fill="rgb(211,191,0)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="847.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="47.1763%" y="821" width="0.0137%" height="15" fill="rgb(253,117,3)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="47.1763%" y="805" width="0.0137%" height="15" fill="rgb(241,127,19)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="815.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="47.1763%" y="789" width="0.0137%" height="15" fill="rgb(218,103,12)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="47.1763%" y="773" width="0.0137%" height="15" fill="rgb(236,214,43)" fg:x="55125" fg:w="16"/><text x="47.4263%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (49 samples, 0.04%)</title><rect x="47.3123%" y="885" width="0.0419%" height="15" fill="rgb(244,144,19)" fg:x="55284" fg:w="49"/><text x="47.5623%" y="895.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (49 samples, 0.04%)</title><rect x="47.3543%" y="885" width="0.0419%" height="15" fill="rgb(246,188,10)" fg:x="55333" fg:w="49"/><text x="47.6043%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (48 samples, 0.04%)</title><rect x="47.3551%" y="869" width="0.0411%" height="15" fill="rgb(212,193,33)" fg:x="55334" fg:w="48"/><text x="47.6051%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="47.3603%" y="853" width="0.0359%" height="15" fill="rgb(241,51,29)" fg:x="55340" fg:w="42"/><text x="47.6103%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="47.3603%" y="837" width="0.0359%" height="15" fill="rgb(211,58,19)" fg:x="55340" fg:w="42"/><text x="47.6103%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="47.3603%" y="821" width="0.0359%" height="15" fill="rgb(229,111,26)" fg:x="55340" fg:w="42"/><text x="47.6103%" y="831.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.04%)</title><rect x="47.3611%" y="805" width="0.0351%" height="15" fill="rgb(213,115,40)" fg:x="55341" fg:w="41"/><text x="47.6111%" y="815.50"></text></g><g><title>__rg_alloc (41 samples, 0.04%)</title><rect x="47.3611%" y="789" width="0.0351%" height="15" fill="rgb(209,56,44)" fg:x="55341" fg:w="41"/><text x="47.6111%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (41 samples, 0.04%)</title><rect x="47.3611%" y="773" width="0.0351%" height="15" fill="rgb(230,108,32)" fg:x="55341" fg:w="41"/><text x="47.6111%" y="783.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="47.3680%" y="757" width="0.0282%" height="15" fill="rgb(216,165,31)" fg:x="55349" fg:w="33"/><text x="47.6180%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="47.3808%" y="741" width="0.0154%" height="15" fill="rgb(218,122,21)" fg:x="55364" fg:w="18"/><text x="47.6308%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="47.3962%" y="885" width="0.0205%" height="15" fill="rgb(223,224,47)" fg:x="55382" fg:w="24"/><text x="47.6462%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="47.3962%" y="869" width="0.0205%" height="15" fill="rgb(238,102,44)" fg:x="55382" fg:w="24"/><text x="47.6462%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="47.3962%" y="853" width="0.0205%" height="15" fill="rgb(236,46,40)" fg:x="55382" fg:w="24"/><text x="47.6462%" y="863.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="47.4005%" y="837" width="0.0163%" height="15" fill="rgb(247,202,50)" fg:x="55387" fg:w="19"/><text x="47.6505%" y="847.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="47.4005%" y="821" width="0.0163%" height="15" fill="rgb(209,99,20)" fg:x="55387" fg:w="19"/><text x="47.6505%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="47.4005%" y="805" width="0.0163%" height="15" fill="rgb(252,27,34)" fg:x="55387" fg:w="19"/><text x="47.6505%" y="815.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="47.4048%" y="789" width="0.0120%" height="15" fill="rgb(215,206,23)" fg:x="55392" fg:w="14"/><text x="47.6548%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (71 samples, 0.06%)</title><rect x="47.5229%" y="853" width="0.0608%" height="15" fill="rgb(212,135,36)" fg:x="55530" fg:w="71"/><text x="47.7729%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (46 samples, 0.04%)</title><rect x="47.5836%" y="853" width="0.0394%" height="15" fill="rgb(240,189,1)" fg:x="55601" fg:w="46"/><text x="47.8336%" y="863.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (1,648 samples, 1.41%)</title><rect x="47.9071%" y="661" width="1.4104%" height="15" fill="rgb(242,56,20)" fg:x="55979" fg:w="1648"/><text x="48.1571%" y="671.50"></text></g><g><title>rmp_serde::decode::read_bin_data (93 samples, 0.08%)</title><rect x="49.2379%" y="645" width="0.0796%" height="15" fill="rgb(247,132,33)" fg:x="57534" fg:w="93"/><text x="49.4879%" y="655.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (93 samples, 0.08%)</title><rect x="49.2379%" y="629" width="0.0796%" height="15" fill="rgb(208,149,11)" fg:x="57534" fg:w="93"/><text x="49.4879%" y="639.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (71 samples, 0.06%)</title><rect x="49.3175%" y="597" width="0.0608%" height="15" fill="rgb(211,33,11)" fg:x="57627" fg:w="71"/><text x="49.5675%" y="607.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (71 samples, 0.06%)</title><rect x="49.3175%" y="581" width="0.0608%" height="15" fill="rgb(221,29,38)" fg:x="57627" fg:w="71"/><text x="49.5675%" y="591.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (71 samples, 0.06%)</title><rect x="49.3175%" y="565" width="0.0608%" height="15" fill="rgb(206,182,49)" fg:x="57627" fg:w="71"/><text x="49.5675%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (71 samples, 0.06%)</title><rect x="49.3175%" y="549" width="0.0608%" height="15" fill="rgb(216,140,1)" fg:x="57627" fg:w="71"/><text x="49.5675%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,011 samples, 1.72%)</title><rect x="47.7805%" y="725" width="1.7210%" height="15" fill="rgb(232,57,40)" fg:x="55831" fg:w="2011"/><text x="48.0305%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (2,011 samples, 1.72%)</title><rect x="47.7805%" y="709" width="1.7210%" height="15" fill="rgb(224,186,18)" fg:x="55831" fg:w="2011"/><text x="48.0305%" y="719.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (2,011 samples, 1.72%)</title><rect x="47.7805%" y="693" width="1.7210%" height="15" fill="rgb(215,121,11)" fg:x="55831" fg:w="2011"/><text x="48.0305%" y="703.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (2,011 samples, 1.72%)</title><rect x="47.7805%" y="677" width="1.7210%" height="15" fill="rgb(245,147,10)" fg:x="55831" fg:w="2011"/><text x="48.0305%" y="687.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (215 samples, 0.18%)</title><rect x="49.3175%" y="661" width="0.1840%" height="15" fill="rgb(238,153,13)" fg:x="57627" fg:w="215"/><text x="49.5675%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (215 samples, 0.18%)</title><rect x="49.3175%" y="645" width="0.1840%" height="15" fill="rgb(233,108,0)" fg:x="57627" fg:w="215"/><text x="49.5675%" y="655.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (215 samples, 0.18%)</title><rect x="49.3175%" y="629" width="0.1840%" height="15" fill="rgb(212,157,17)" fg:x="57627" fg:w="215"/><text x="49.5675%" y="639.50"></text></g><g><title>rmp::decode::read_marker (215 samples, 0.18%)</title><rect x="49.3175%" y="613" width="0.1840%" height="15" fill="rgb(225,213,38)" fg:x="57627" fg:w="215"/><text x="49.5675%" y="623.50"></text></g><g><title>rmp::marker::Marker::from_u8 (144 samples, 0.12%)</title><rect x="49.3783%" y="597" width="0.1232%" height="15" fill="rgb(248,16,11)" fg:x="57698" fg:w="144"/><text x="49.6283%" y="607.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (2,083 samples, 1.78%)</title><rect x="47.7779%" y="773" width="1.7826%" height="15" fill="rgb(241,33,4)" fg:x="55828" fg:w="2083"/><text x="48.0279%" y="783.50">&lt;..</text></g><g><title>serde::de::MapAccess::next_key (2,083 samples, 1.78%)</title><rect x="47.7779%" y="757" width="1.7826%" height="15" fill="rgb(222,26,43)" fg:x="55828" fg:w="2083"/><text x="48.0279%" y="767.50">s..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (2,083 samples, 1.78%)</title><rect x="47.7779%" y="741" width="1.7826%" height="15" fill="rgb(243,29,36)" fg:x="55828" fg:w="2083"/><text x="48.0279%" y="751.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (69 samples, 0.06%)</title><rect x="49.5015%" y="725" width="0.0591%" height="15" fill="rgb(241,9,27)" fg:x="57842" fg:w="69"/><text x="49.7515%" y="735.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (34 samples, 0.03%)</title><rect x="49.5605%" y="773" width="0.0291%" height="15" fill="rgb(205,117,26)" fg:x="57911" fg:w="34"/><text x="49.8105%" y="783.50"></text></g><g><title>serde::de::MapAccess::next_value (34 samples, 0.03%)</title><rect x="49.5605%" y="757" width="0.0291%" height="15" fill="rgb(209,80,39)" fg:x="57911" fg:w="34"/><text x="49.8105%" y="767.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (34 samples, 0.03%)</title><rect x="49.5605%" y="741" width="0.0291%" height="15" fill="rgb(239,155,6)" fg:x="57911" fg:w="34"/><text x="49.8105%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (34 samples, 0.03%)</title><rect x="49.5605%" y="725" width="0.0291%" height="15" fill="rgb(212,104,12)" fg:x="57911" fg:w="34"/><text x="49.8105%" y="735.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (34 samples, 0.03%)</title><rect x="49.5605%" y="709" width="0.0291%" height="15" fill="rgb(234,204,3)" fg:x="57911" fg:w="34"/><text x="49.8105%" y="719.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (34 samples, 0.03%)</title><rect x="49.5605%" y="693" width="0.0291%" height="15" fill="rgb(251,218,7)" fg:x="57911" fg:w="34"/><text x="49.8105%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (494 samples, 0.42%)</title><rect x="49.5922%" y="773" width="0.4228%" height="15" fill="rgb(221,81,32)" fg:x="57948" fg:w="494"/><text x="49.8422%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (1,097 samples, 0.94%)</title><rect x="50.0150%" y="773" width="0.9388%" height="15" fill="rgb(214,152,26)" fg:x="58442" fg:w="1097"/><text x="50.2650%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (36 samples, 0.03%)</title><rect x="50.9230%" y="757" width="0.0308%" height="15" fill="rgb(223,22,3)" fg:x="59503" fg:w="36"/><text x="51.1730%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (19 samples, 0.02%)</title><rect x="50.9538%" y="773" width="0.0163%" height="15" fill="rgb(207,174,7)" fg:x="59539" fg:w="19"/><text x="51.2038%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (19 samples, 0.02%)</title><rect x="50.9538%" y="757" width="0.0163%" height="15" fill="rgb(224,19,52)" fg:x="59539" fg:w="19"/><text x="51.2038%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="50.9598%" y="741" width="0.0103%" height="15" fill="rgb(228,24,14)" fg:x="59546" fg:w="12"/><text x="51.2098%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (12 samples, 0.01%)</title><rect x="50.9598%" y="725" width="0.0103%" height="15" fill="rgb(230,153,43)" fg:x="59546" fg:w="12"/><text x="51.2098%" y="735.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (3,888 samples, 3.33%)</title><rect x="47.6470%" y="789" width="3.3274%" height="15" fill="rgb(231,106,12)" fg:x="55675" fg:w="3888"/><text x="47.8970%" y="799.50">&lt;tr..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (4,134 samples, 3.54%)</title><rect x="47.5160%" y="869" width="3.5379%" height="15" fill="rgb(215,92,2)" fg:x="55522" fg:w="4134"/><text x="47.7660%" y="879.50">&lt;tr..</text></g><g><title>rmp_serde::decode::from_slice (4,009 samples, 3.43%)</title><rect x="47.6230%" y="853" width="3.4309%" height="15" fill="rgb(249,143,25)" fg:x="55647" fg:w="4009"/><text x="47.8730%" y="863.50">rmp..</text></g><g><title>rmp_serde::decode::from_read_ref (4,009 samples, 3.43%)</title><rect x="47.6230%" y="837" width="3.4309%" height="15" fill="rgb(252,7,35)" fg:x="55647" fg:w="4009"/><text x="47.8730%" y="847.50">rmp..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (4,008 samples, 3.43%)</title><rect x="47.6239%" y="821" width="3.4301%" height="15" fill="rgb(216,69,40)" fg:x="55648" fg:w="4008"/><text x="47.8739%" y="831.50">tre..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (4,008 samples, 3.43%)</title><rect x="47.6239%" y="805" width="3.4301%" height="15" fill="rgb(240,36,33)" fg:x="55648" fg:w="4008"/><text x="47.8739%" y="815.50">&lt;&amp;m..</text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (93 samples, 0.08%)</title><rect x="50.9743%" y="789" width="0.0796%" height="15" fill="rgb(231,128,14)" fg:x="59563" fg:w="93"/><text x="51.2243%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (83 samples, 0.07%)</title><rect x="50.9829%" y="773" width="0.0710%" height="15" fill="rgb(245,143,14)" fg:x="59573" fg:w="83"/><text x="51.2329%" y="783.50"></text></g><g><title>core::mem::replace (83 samples, 0.07%)</title><rect x="50.9829%" y="757" width="0.0710%" height="15" fill="rgb(222,130,28)" fg:x="59573" fg:w="83"/><text x="51.2329%" y="767.50"></text></g><g><title>core::ptr::read (83 samples, 0.07%)</title><rect x="50.9829%" y="741" width="0.0710%" height="15" fill="rgb(212,10,48)" fg:x="59573" fg:w="83"/><text x="51.2329%" y="751.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (36 samples, 0.03%)</title><rect x="51.0847%" y="757" width="0.0308%" height="15" fill="rgb(254,118,45)" fg:x="59692" fg:w="36"/><text x="51.3347%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (36 samples, 0.03%)</title><rect x="51.0847%" y="741" width="0.0308%" height="15" fill="rgb(228,6,45)" fg:x="59692" fg:w="36"/><text x="51.3347%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (36 samples, 0.03%)</title><rect x="51.0847%" y="725" width="0.0308%" height="15" fill="rgb(241,18,35)" fg:x="59692" fg:w="36"/><text x="51.3347%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.03%)</title><rect x="51.0873%" y="709" width="0.0282%" height="15" fill="rgb(227,214,53)" fg:x="59695" fg:w="33"/><text x="51.3373%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="51.0873%" y="693" width="0.0282%" height="15" fill="rgb(224,107,51)" fg:x="59695" fg:w="33"/><text x="51.3373%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="51.0873%" y="677" width="0.0282%" height="15" fill="rgb(248,60,28)" fg:x="59695" fg:w="33"/><text x="51.3373%" y="687.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="51.0873%" y="661" width="0.0282%" height="15" fill="rgb(249,101,23)" fg:x="59695" fg:w="33"/><text x="51.3373%" y="671.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="51.0873%" y="645" width="0.0282%" height="15" fill="rgb(228,51,19)" fg:x="59695" fg:w="33"/><text x="51.3373%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="51.0873%" y="629" width="0.0282%" height="15" fill="rgb(213,20,6)" fg:x="59695" fg:w="33"/><text x="51.3373%" y="639.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="51.0873%" y="613" width="0.0282%" height="15" fill="rgb(212,124,10)" fg:x="59695" fg:w="33"/><text x="51.3373%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (48 samples, 0.04%)</title><rect x="51.0822%" y="837" width="0.0411%" height="15" fill="rgb(248,3,40)" fg:x="59689" fg:w="48"/><text x="51.3322%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (47 samples, 0.04%)</title><rect x="51.0830%" y="821" width="0.0402%" height="15" fill="rgb(223,178,23)" fg:x="59690" fg:w="47"/><text x="51.3330%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (47 samples, 0.04%)</title><rect x="51.0830%" y="805" width="0.0402%" height="15" fill="rgb(240,132,45)" fg:x="59690" fg:w="47"/><text x="51.3330%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (45 samples, 0.04%)</title><rect x="51.0847%" y="789" width="0.0385%" height="15" fill="rgb(245,164,36)" fg:x="59692" fg:w="45"/><text x="51.3347%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (45 samples, 0.04%)</title><rect x="51.0847%" y="773" width="0.0385%" height="15" fill="rgb(231,188,53)" fg:x="59692" fg:w="45"/><text x="51.3347%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (125 samples, 0.11%)</title><rect x="51.2217%" y="597" width="0.1070%" height="15" fill="rgb(237,198,39)" fg:x="59852" fg:w="125"/><text x="51.4717%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (168 samples, 0.14%)</title><rect x="51.1883%" y="757" width="0.1438%" height="15" fill="rgb(223,120,35)" fg:x="59813" fg:w="168"/><text x="51.4383%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (168 samples, 0.14%)</title><rect x="51.1883%" y="741" width="0.1438%" height="15" fill="rgb(253,107,49)" fg:x="59813" fg:w="168"/><text x="51.4383%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (162 samples, 0.14%)</title><rect x="51.1934%" y="725" width="0.1386%" height="15" fill="rgb(216,44,31)" fg:x="59819" fg:w="162"/><text x="51.4434%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (153 samples, 0.13%)</title><rect x="51.2011%" y="709" width="0.1309%" height="15" fill="rgb(253,87,21)" fg:x="59828" fg:w="153"/><text x="51.4511%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (153 samples, 0.13%)</title><rect x="51.2011%" y="693" width="0.1309%" height="15" fill="rgb(226,18,2)" fg:x="59828" fg:w="153"/><text x="51.4511%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (153 samples, 0.13%)</title><rect x="51.2011%" y="677" width="0.1309%" height="15" fill="rgb(216,8,46)" fg:x="59828" fg:w="153"/><text x="51.4511%" y="687.50"></text></g><g><title>alloc::alloc::alloc (153 samples, 0.13%)</title><rect x="51.2011%" y="661" width="0.1309%" height="15" fill="rgb(226,140,39)" fg:x="59828" fg:w="153"/><text x="51.4511%" y="671.50"></text></g><g><title>__rg_alloc (153 samples, 0.13%)</title><rect x="51.2011%" y="645" width="0.1309%" height="15" fill="rgb(221,194,54)" fg:x="59828" fg:w="153"/><text x="51.4511%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (153 samples, 0.13%)</title><rect x="51.2011%" y="629" width="0.1309%" height="15" fill="rgb(213,92,11)" fg:x="59828" fg:w="153"/><text x="51.4511%" y="639.50"></text></g><g><title>sn_rust_alloc (149 samples, 0.13%)</title><rect x="51.2045%" y="613" width="0.1275%" height="15" fill="rgb(229,162,46)" fg:x="59832" fg:w="149"/><text x="51.4545%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (177 samples, 0.15%)</title><rect x="51.1857%" y="805" width="0.1515%" height="15" fill="rgb(214,111,36)" fg:x="59810" fg:w="177"/><text x="51.4357%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (177 samples, 0.15%)</title><rect x="51.1857%" y="789" width="0.1515%" height="15" fill="rgb(207,6,21)" fg:x="59810" fg:w="177"/><text x="51.4357%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (177 samples, 0.15%)</title><rect x="51.1857%" y="773" width="0.1515%" height="15" fill="rgb(213,127,38)" fg:x="59810" fg:w="177"/><text x="51.4357%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="51.3440%" y="789" width="0.0111%" height="15" fill="rgb(238,118,32)" fg:x="59995" fg:w="13"/><text x="51.5940%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (13 samples, 0.01%)</title><rect x="51.3440%" y="773" width="0.0111%" height="15" fill="rgb(240,139,39)" fg:x="59995" fg:w="13"/><text x="51.5940%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="51.3552%" y="789" width="0.0188%" height="15" fill="rgb(235,10,37)" fg:x="60008" fg:w="22"/><text x="51.6052%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (22 samples, 0.02%)</title><rect x="51.3552%" y="773" width="0.0188%" height="15" fill="rgb(249,171,38)" fg:x="60008" fg:w="22"/><text x="51.6052%" y="783.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (12 samples, 0.01%)</title><rect x="51.3637%" y="757" width="0.0103%" height="15" fill="rgb(242,144,32)" fg:x="60018" fg:w="12"/><text x="51.6137%" y="767.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (12 samples, 0.01%)</title><rect x="51.3637%" y="741" width="0.0103%" height="15" fill="rgb(217,117,21)" fg:x="60018" fg:w="12"/><text x="51.6137%" y="751.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (416 samples, 0.36%)</title><rect x="51.0539%" y="869" width="0.3560%" height="15" fill="rgb(249,87,1)" fg:x="59656" fg:w="416"/><text x="51.3039%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (383 samples, 0.33%)</title><rect x="51.0822%" y="853" width="0.3278%" height="15" fill="rgb(248,196,48)" fg:x="59689" fg:w="383"/><text x="51.3322%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (335 samples, 0.29%)</title><rect x="51.1232%" y="837" width="0.2867%" height="15" fill="rgb(251,206,33)" fg:x="59737" fg:w="335"/><text x="51.3732%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (262 samples, 0.22%)</title><rect x="51.1857%" y="821" width="0.2242%" height="15" fill="rgb(232,141,28)" fg:x="59810" fg:w="262"/><text x="51.4357%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (85 samples, 0.07%)</title><rect x="51.3372%" y="805" width="0.0727%" height="15" fill="rgb(209,167,14)" fg:x="59987" fg:w="85"/><text x="51.5872%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (37 samples, 0.03%)</title><rect x="51.3783%" y="789" width="0.0317%" height="15" fill="rgb(225,11,50)" fg:x="60035" fg:w="37"/><text x="51.6283%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="51.3783%" y="773" width="0.0317%" height="15" fill="rgb(209,50,20)" fg:x="60035" fg:w="37"/><text x="51.6283%" y="783.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="51.3783%" y="757" width="0.0317%" height="15" fill="rgb(212,17,46)" fg:x="60035" fg:w="37"/><text x="51.6283%" y="767.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (35 samples, 0.03%)</title><rect x="51.3800%" y="741" width="0.0300%" height="15" fill="rgb(216,101,39)" fg:x="60037" fg:w="35"/><text x="51.6300%" y="751.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (35 samples, 0.03%)</title><rect x="51.3800%" y="725" width="0.0300%" height="15" fill="rgb(212,228,48)" fg:x="60037" fg:w="35"/><text x="51.6300%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="51.3800%" y="709" width="0.0300%" height="15" fill="rgb(250,6,50)" fg:x="60037" fg:w="35"/><text x="51.6300%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (35 samples, 0.03%)</title><rect x="51.3800%" y="693" width="0.0300%" height="15" fill="rgb(250,160,48)" fg:x="60037" fg:w="35"/><text x="51.6300%" y="703.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.03%)</title><rect x="51.3843%" y="677" width="0.0257%" height="15" fill="rgb(244,216,33)" fg:x="60042" fg:w="30"/><text x="51.6343%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,008 samples, 5.14%)</title><rect x="46.3744%" y="1077" width="5.1417%" height="15" fill="rgb(207,157,5)" fg:x="54188" fg:w="6008"/><text x="46.6244%" y="1087.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,006 samples, 5.14%)</title><rect x="46.3761%" y="1061" width="5.1400%" height="15" fill="rgb(228,199,8)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="1071.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,006 samples, 5.14%)</title><rect x="46.3761%" y="1045" width="5.1400%" height="15" fill="rgb(227,80,20)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="1055.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,006 samples, 5.14%)</title><rect x="46.3761%" y="1029" width="5.1400%" height="15" fill="rgb(222,9,33)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="1039.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,006 samples, 5.14%)</title><rect x="46.3761%" y="1013" width="5.1400%" height="15" fill="rgb(239,44,28)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="1023.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,006 samples, 5.14%)</title><rect x="46.3761%" y="997" width="5.1400%" height="15" fill="rgb(249,187,43)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="1007.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,006 samples, 5.14%)</title><rect x="46.3761%" y="981" width="5.1400%" height="15" fill="rgb(216,141,28)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="991.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,006 samples, 5.14%)</title><rect x="46.3761%" y="965" width="5.1400%" height="15" fill="rgb(230,154,53)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="975.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,006 samples, 5.14%)</title><rect x="46.3761%" y="949" width="5.1400%" height="15" fill="rgb(227,82,4)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="959.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,006 samples, 5.14%)</title><rect x="46.3761%" y="933" width="5.1400%" height="15" fill="rgb(220,107,16)" fg:x="54190" fg:w="6006"/><text x="46.6261%" y="943.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::build_events (6,005 samples, 5.14%)</title><rect x="46.3769%" y="917" width="5.1391%" height="15" fill="rgb(207,187,2)" fg:x="54191" fg:w="6005"/><text x="46.6269%" y="927.50">tremor..</text></g><g><title>tremor_script::srs::EventPayload::try_new (5,055 samples, 4.33%)</title><rect x="47.1900%" y="901" width="4.3261%" height="15" fill="rgb(210,162,52)" fg:x="55141" fg:w="5055"/><text x="47.4400%" y="911.50">tremo..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (4,789 samples, 4.10%)</title><rect x="47.4176%" y="885" width="4.0985%" height="15" fill="rgb(217,216,49)" fg:x="55407" fg:w="4789"/><text x="47.6676%" y="895.50">trem..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (124 samples, 0.11%)</title><rect x="51.4099%" y="869" width="0.1061%" height="15" fill="rgb(218,146,49)" fg:x="60072" fg:w="124"/><text x="51.6599%" y="879.50"></text></g><g><title>tremor_common::time::nanotime (27 samples, 0.02%)</title><rect x="51.5161%" y="1077" width="0.0231%" height="15" fill="rgb(216,55,40)" fg:x="60196" fg:w="27"/><text x="51.7661%" y="1087.50"></text></g><g><title>std::time::SystemTime::now (14 samples, 0.01%)</title><rect x="51.5272%" y="1061" width="0.0120%" height="15" fill="rgb(208,196,21)" fg:x="60209" fg:w="14"/><text x="51.7772%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (14 samples, 0.01%)</title><rect x="51.5272%" y="1045" width="0.0120%" height="15" fill="rgb(242,117,42)" fg:x="60209" fg:w="14"/><text x="51.7772%" y="1055.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (14 samples, 0.01%)</title><rect x="51.5272%" y="1029" width="0.0120%" height="15" fill="rgb(210,11,23)" fg:x="60209" fg:w="14"/><text x="51.7772%" y="1039.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="51.5845%" y="965" width="0.0214%" height="15" fill="rgb(217,110,2)" fg:x="60276" fg:w="25"/><text x="51.8345%" y="975.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (19 samples, 0.02%)</title><rect x="51.5897%" y="949" width="0.0163%" height="15" fill="rgb(229,77,54)" fg:x="60282" fg:w="19"/><text x="51.8397%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (19 samples, 0.02%)</title><rect x="51.5897%" y="933" width="0.0163%" height="15" fill="rgb(218,53,16)" fg:x="60282" fg:w="19"/><text x="51.8397%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (19 samples, 0.02%)</title><rect x="51.5897%" y="917" width="0.0163%" height="15" fill="rgb(215,38,13)" fg:x="60282" fg:w="19"/><text x="51.8397%" y="927.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="51.6136%" y="965" width="0.0231%" height="15" fill="rgb(235,42,18)" fg:x="60310" fg:w="27"/><text x="51.8636%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (27 samples, 0.02%)</title><rect x="51.6136%" y="949" width="0.0231%" height="15" fill="rgb(219,66,54)" fg:x="60310" fg:w="27"/><text x="51.8636%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (25 samples, 0.02%)</title><rect x="51.6153%" y="933" width="0.0214%" height="15" fill="rgb(222,205,4)" fg:x="60312" fg:w="25"/><text x="51.8653%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="51.6153%" y="917" width="0.0214%" height="15" fill="rgb(227,213,46)" fg:x="60312" fg:w="25"/><text x="51.8653%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="51.6170%" y="901" width="0.0197%" height="15" fill="rgb(250,145,42)" fg:x="60314" fg:w="23"/><text x="51.8670%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (23 samples, 0.02%)</title><rect x="51.6170%" y="885" width="0.0197%" height="15" fill="rgb(219,15,2)" fg:x="60314" fg:w="23"/><text x="51.8670%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (23 samples, 0.02%)</title><rect x="51.6170%" y="869" width="0.0197%" height="15" fill="rgb(231,181,52)" fg:x="60314" fg:w="23"/><text x="51.8670%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="51.6170%" y="853" width="0.0197%" height="15" fill="rgb(235,1,42)" fg:x="60314" fg:w="23"/><text x="51.8670%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (27 samples, 0.02%)</title><rect x="51.6367%" y="965" width="0.0231%" height="15" fill="rgb(249,88,27)" fg:x="60337" fg:w="27"/><text x="51.8867%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (25 samples, 0.02%)</title><rect x="51.6384%" y="949" width="0.0214%" height="15" fill="rgb(235,145,16)" fg:x="60339" fg:w="25"/><text x="51.8884%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="51.6384%" y="933" width="0.0214%" height="15" fill="rgb(237,114,19)" fg:x="60339" fg:w="25"/><text x="51.8884%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.02%)</title><rect x="51.6393%" y="917" width="0.0205%" height="15" fill="rgb(238,51,50)" fg:x="60340" fg:w="24"/><text x="51.8893%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (24 samples, 0.02%)</title><rect x="51.6393%" y="901" width="0.0205%" height="15" fill="rgb(205,194,25)" fg:x="60340" fg:w="24"/><text x="51.8893%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="51.6393%" y="885" width="0.0205%" height="15" fill="rgb(215,203,17)" fg:x="60340" fg:w="24"/><text x="51.8893%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="51.6393%" y="869" width="0.0205%" height="15" fill="rgb(233,112,49)" fg:x="60340" fg:w="24"/><text x="51.8893%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (92 samples, 0.08%)</title><rect x="51.6710%" y="901" width="0.0787%" height="15" fill="rgb(241,130,26)" fg:x="60377" fg:w="92"/><text x="51.9210%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (92 samples, 0.08%)</title><rect x="51.6710%" y="885" width="0.0787%" height="15" fill="rgb(252,223,19)" fg:x="60377" fg:w="92"/><text x="51.9210%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (14 samples, 0.01%)</title><rect x="51.7514%" y="885" width="0.0120%" height="15" fill="rgb(211,95,25)" fg:x="60471" fg:w="14"/><text x="52.0014%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="51.7514%" y="869" width="0.0120%" height="15" fill="rgb(251,182,27)" fg:x="60471" fg:w="14"/><text x="52.0014%" y="879.50"></text></g><g><title>core::hint::spin_loop (408 samples, 0.35%)</title><rect x="51.7711%" y="869" width="0.3492%" height="15" fill="rgb(238,24,4)" fg:x="60494" fg:w="408"/><text x="52.0211%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (408 samples, 0.35%)</title><rect x="51.7711%" y="853" width="0.3492%" height="15" fill="rgb(224,220,25)" fg:x="60494" fg:w="408"/><text x="52.0211%" y="863.50"></text></g><g><title>event_listener::Inner::lock (542 samples, 0.46%)</title><rect x="51.6650%" y="965" width="0.4638%" height="15" fill="rgb(239,133,26)" fg:x="60370" fg:w="542"/><text x="51.9150%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (541 samples, 0.46%)</title><rect x="51.6658%" y="949" width="0.4630%" height="15" fill="rgb(211,94,48)" fg:x="60371" fg:w="541"/><text x="51.9158%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (538 samples, 0.46%)</title><rect x="51.6684%" y="933" width="0.4604%" height="15" fill="rgb(239,87,6)" fg:x="60374" fg:w="538"/><text x="51.9184%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (538 samples, 0.46%)</title><rect x="51.6684%" y="917" width="0.4604%" height="15" fill="rgb(227,62,0)" fg:x="60374" fg:w="538"/><text x="51.9184%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (443 samples, 0.38%)</title><rect x="51.7497%" y="901" width="0.3791%" height="15" fill="rgb(211,226,4)" fg:x="60469" fg:w="443"/><text x="51.9997%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (426 samples, 0.36%)</title><rect x="51.7642%" y="885" width="0.3646%" height="15" fill="rgb(253,38,52)" fg:x="60486" fg:w="426"/><text x="52.0142%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (707 samples, 0.61%)</title><rect x="51.5691%" y="981" width="0.6051%" height="15" fill="rgb(229,126,40)" fg:x="60258" fg:w="707"/><text x="51.8191%" y="991.50"></text></g><g><title>event_listener::List::remove (53 samples, 0.05%)</title><rect x="52.1288%" y="965" width="0.0454%" height="15" fill="rgb(229,165,44)" fg:x="60912" fg:w="53"/><text x="52.3788%" y="975.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (34 samples, 0.03%)</title><rect x="52.1451%" y="949" width="0.0291%" height="15" fill="rgb(247,95,47)" fg:x="60931" fg:w="34"/><text x="52.3951%" y="959.50"></text></g><g><title>core::mem::replace (34 samples, 0.03%)</title><rect x="52.1451%" y="933" width="0.0291%" height="15" fill="rgb(216,140,30)" fg:x="60931" fg:w="34"/><text x="52.3951%" y="943.50"></text></g><g><title>core::ptr::read (34 samples, 0.03%)</title><rect x="52.1451%" y="917" width="0.0291%" height="15" fill="rgb(246,214,8)" fg:x="60931" fg:w="34"/><text x="52.3951%" y="927.50"></text></g><g><title>[libc-2.31.so] (275 samples, 0.24%)</title><rect x="52.1742%" y="981" width="0.2353%" height="15" fill="rgb(227,224,15)" fg:x="60965" fg:w="275"/><text x="52.4242%" y="991.50"></text></g><g><title>[libc-2.31.so] (522 samples, 0.45%)</title><rect x="52.4301%" y="965" width="0.4467%" height="15" fill="rgb(233,175,4)" fg:x="61264" fg:w="522"/><text x="52.6801%" y="975.50"></text></g><g><title>[libc-2.31.so] (143 samples, 0.12%)</title><rect x="53.0009%" y="933" width="0.1224%" height="15" fill="rgb(221,66,45)" fg:x="61931" fg:w="143"/><text x="53.2509%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (113 samples, 0.10%)</title><rect x="53.1233%" y="933" width="0.0967%" height="15" fill="rgb(221,178,18)" fg:x="62074" fg:w="113"/><text x="53.3733%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (112 samples, 0.10%)</title><rect x="53.1241%" y="917" width="0.0959%" height="15" fill="rgb(213,81,29)" fg:x="62075" fg:w="112"/><text x="53.3741%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (112 samples, 0.10%)</title><rect x="53.1241%" y="901" width="0.0959%" height="15" fill="rgb(220,89,49)" fg:x="62075" fg:w="112"/><text x="53.3741%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (112 samples, 0.10%)</title><rect x="53.1241%" y="885" width="0.0959%" height="15" fill="rgb(227,60,33)" fg:x="62075" fg:w="112"/><text x="53.3741%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (600 samples, 0.51%)</title><rect x="53.2200%" y="933" width="0.5135%" height="15" fill="rgb(205,113,12)" fg:x="62187" fg:w="600"/><text x="53.4700%" y="943.50"></text></g><g><title>core::ptr::read (600 samples, 0.51%)</title><rect x="53.2200%" y="917" width="0.5135%" height="15" fill="rgb(211,32,1)" fg:x="62187" fg:w="600"/><text x="53.4700%" y="927.50"></text></g><g><title>[libc-2.31.so] (599 samples, 0.51%)</title><rect x="53.2208%" y="901" width="0.5126%" height="15" fill="rgb(246,2,12)" fg:x="62188" fg:w="599"/><text x="53.4708%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (250 samples, 0.21%)</title><rect x="53.7335%" y="933" width="0.2140%" height="15" fill="rgb(243,37,27)" fg:x="62787" fg:w="250"/><text x="53.9835%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (250 samples, 0.21%)</title><rect x="53.7335%" y="917" width="0.2140%" height="15" fill="rgb(248,211,31)" fg:x="62787" fg:w="250"/><text x="53.9835%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,633 samples, 1.40%)</title><rect x="52.8768%" y="965" width="1.3975%" height="15" fill="rgb(242,146,47)" fg:x="61786" fg:w="1633"/><text x="53.1268%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,591 samples, 1.36%)</title><rect x="52.9127%" y="949" width="1.3616%" height="15" fill="rgb(206,70,20)" fg:x="61828" fg:w="1591"/><text x="53.1627%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (382 samples, 0.33%)</title><rect x="53.9474%" y="933" width="0.3269%" height="15" fill="rgb(215,10,51)" fg:x="63037" fg:w="382"/><text x="54.1974%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (380 samples, 0.33%)</title><rect x="53.9491%" y="917" width="0.3252%" height="15" fill="rgb(243,178,53)" fg:x="63039" fg:w="380"/><text x="54.1991%" y="927.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,324 samples, 1.99%)</title><rect x="52.4095%" y="981" width="1.9889%" height="15" fill="rgb(233,221,20)" fg:x="61240" fg:w="2324"/><text x="52.6595%" y="991.50">a..</text></g><g><title>event_listener::Event::notify (145 samples, 0.12%)</title><rect x="54.2743%" y="965" width="0.1241%" height="15" fill="rgb(218,95,35)" fg:x="63419" fg:w="145"/><text x="54.5243%" y="975.50"></text></g><g><title>event_listener::full_fence (141 samples, 0.12%)</title><rect x="54.2777%" y="949" width="0.1207%" height="15" fill="rgb(229,13,5)" fg:x="63423" fg:w="141"/><text x="54.5277%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (137 samples, 0.12%)</title><rect x="54.2812%" y="933" width="0.1172%" height="15" fill="rgb(252,164,30)" fg:x="63427" fg:w="137"/><text x="54.5312%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (137 samples, 0.12%)</title><rect x="54.2812%" y="917" width="0.1172%" height="15" fill="rgb(232,68,36)" fg:x="63427" fg:w="137"/><text x="54.5312%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (62 samples, 0.05%)</title><rect x="54.4061%" y="981" width="0.0531%" height="15" fill="rgb(219,59,54)" fg:x="63573" fg:w="62"/><text x="54.6561%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (50 samples, 0.04%)</title><rect x="54.4164%" y="965" width="0.0428%" height="15" fill="rgb(250,92,33)" fg:x="63585" fg:w="50"/><text x="54.6664%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (41 samples, 0.04%)</title><rect x="54.4241%" y="949" width="0.0351%" height="15" fill="rgb(229,162,54)" fg:x="63594" fg:w="41"/><text x="54.6741%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="54.4241%" y="933" width="0.0351%" height="15" fill="rgb(244,114,52)" fg:x="63594" fg:w="41"/><text x="54.6741%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (41 samples, 0.04%)</title><rect x="54.4241%" y="917" width="0.0351%" height="15" fill="rgb(212,211,43)" fg:x="63594" fg:w="41"/><text x="54.6741%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (41 samples, 0.04%)</title><rect x="54.4241%" y="901" width="0.0351%" height="15" fill="rgb(226,147,8)" fg:x="63594" fg:w="41"/><text x="54.6741%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="54.4677%" y="965" width="0.0308%" height="15" fill="rgb(226,23,13)" fg:x="63645" fg:w="36"/><text x="54.7177%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (36 samples, 0.03%)</title><rect x="54.4677%" y="949" width="0.0308%" height="15" fill="rgb(240,63,4)" fg:x="63645" fg:w="36"/><text x="54.7177%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_add (36 samples, 0.03%)</title><rect x="54.4677%" y="933" width="0.0308%" height="15" fill="rgb(221,1,32)" fg:x="63645" fg:w="36"/><text x="54.7177%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (40 samples, 0.03%)</title><rect x="54.4985%" y="965" width="0.0342%" height="15" fill="rgb(242,117,10)" fg:x="63681" fg:w="40"/><text x="54.7485%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (40 samples, 0.03%)</title><rect x="54.4985%" y="949" width="0.0342%" height="15" fill="rgb(249,172,44)" fg:x="63681" fg:w="40"/><text x="54.7485%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="54.4985%" y="933" width="0.0342%" height="15" fill="rgb(244,46,45)" fg:x="63681" fg:w="40"/><text x="54.7485%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (40 samples, 0.03%)</title><rect x="54.4985%" y="917" width="0.0342%" height="15" fill="rgb(206,43,17)" fg:x="63681" fg:w="40"/><text x="54.7485%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (40 samples, 0.03%)</title><rect x="54.4985%" y="901" width="0.0342%" height="15" fill="rgb(239,218,39)" fg:x="63681" fg:w="40"/><text x="54.7485%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (40 samples, 0.03%)</title><rect x="54.4985%" y="885" width="0.0342%" height="15" fill="rgb(208,169,54)" fg:x="63681" fg:w="40"/><text x="54.7485%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (40 samples, 0.03%)</title><rect x="54.4985%" y="869" width="0.0342%" height="15" fill="rgb(247,25,42)" fg:x="63681" fg:w="40"/><text x="54.7485%" y="879.50"></text></g><g><title>event_listener::Inner::lock (21 samples, 0.02%)</title><rect x="54.5336%" y="965" width="0.0180%" height="15" fill="rgb(226,23,31)" fg:x="63722" fg:w="21"/><text x="54.7836%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.02%)</title><rect x="54.5336%" y="949" width="0.0180%" height="15" fill="rgb(247,16,28)" fg:x="63722" fg:w="21"/><text x="54.7836%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="54.5353%" y="933" width="0.0163%" height="15" fill="rgb(231,147,38)" fg:x="63724" fg:w="19"/><text x="54.7853%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (19 samples, 0.02%)</title><rect x="54.5353%" y="917" width="0.0163%" height="15" fill="rgb(253,81,48)" fg:x="63724" fg:w="19"/><text x="54.7853%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.02%)</title><rect x="54.5353%" y="901" width="0.0163%" height="15" fill="rgb(249,222,43)" fg:x="63724" fg:w="19"/><text x="54.7853%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="54.5353%" y="885" width="0.0163%" height="15" fill="rgb(221,3,27)" fg:x="63724" fg:w="19"/><text x="54.7853%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,531 samples, 3.02%)</title><rect x="51.5494%" y="1061" width="3.0218%" height="15" fill="rgb(228,180,5)" fg:x="60235" fg:w="3531"/><text x="51.7994%" y="1071.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,531 samples, 3.02%)</title><rect x="51.5494%" y="1045" width="3.0218%" height="15" fill="rgb(227,131,42)" fg:x="60235" fg:w="3531"/><text x="51.7994%" y="1055.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,531 samples, 3.02%)</title><rect x="51.5494%" y="1029" width="3.0218%" height="15" fill="rgb(212,3,39)" fg:x="60235" fg:w="3531"/><text x="51.7994%" y="1039.50">&lt;as..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,531 samples, 3.02%)</title><rect x="51.5494%" y="1013" width="3.0218%" height="15" fill="rgb(226,45,5)" fg:x="60235" fg:w="3531"/><text x="51.7994%" y="1023.50">&lt;as..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,531 samples, 3.02%)</title><rect x="51.5494%" y="997" width="3.0218%" height="15" fill="rgb(215,167,45)" fg:x="60235" fg:w="3531"/><text x="51.7994%" y="1007.50">&lt;as..</text></g><g><title>event_listener::Event::listen (131 samples, 0.11%)</title><rect x="54.4592%" y="981" width="0.1121%" height="15" fill="rgb(250,218,53)" fg:x="63635" fg:w="131"/><text x="54.7092%" y="991.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.02%)</title><rect x="54.5559%" y="965" width="0.0154%" height="15" fill="rgb(207,140,0)" fg:x="63748" fg:w="18"/><text x="54.8059%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (17 samples, 0.01%)</title><rect x="54.5567%" y="949" width="0.0145%" height="15" fill="rgb(238,133,51)" fg:x="63749" fg:w="17"/><text x="54.8067%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="54.5567%" y="933" width="0.0145%" height="15" fill="rgb(218,203,53)" fg:x="63749" fg:w="17"/><text x="54.8067%" y="943.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (12 samples, 0.01%)</title><rect x="54.5995%" y="549" width="0.0103%" height="15" fill="rgb(226,184,25)" fg:x="63799" fg:w="12"/><text x="54.8495%" y="559.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (12 samples, 0.01%)</title><rect x="54.5995%" y="533" width="0.0103%" height="15" fill="rgb(231,121,21)" fg:x="63799" fg:w="12"/><text x="54.8495%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (12 samples, 0.01%)</title><rect x="54.5995%" y="517" width="0.0103%" height="15" fill="rgb(251,14,34)" fg:x="63799" fg:w="12"/><text x="54.8495%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (12 samples, 0.01%)</title><rect x="54.5995%" y="501" width="0.0103%" height="15" fill="rgb(249,193,11)" fg:x="63799" fg:w="12"/><text x="54.8495%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12 samples, 0.01%)</title><rect x="54.5995%" y="485" width="0.0103%" height="15" fill="rgb(220,172,37)" fg:x="63799" fg:w="12"/><text x="54.8495%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.01%)</title><rect x="54.5995%" y="469" width="0.0103%" height="15" fill="rgb(231,229,43)" fg:x="63799" fg:w="12"/><text x="54.8495%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12 samples, 0.01%)</title><rect x="54.5995%" y="453" width="0.0103%" height="15" fill="rgb(250,161,5)" fg:x="63799" fg:w="12"/><text x="54.8495%" y="463.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map::{{closure}} (27 samples, 0.02%)</title><rect x="54.5875%" y="597" width="0.0231%" height="15" fill="rgb(218,225,18)" fg:x="63785" fg:w="27"/><text x="54.8375%" y="607.50"></text></g><g><title>rmp::encode::write_map_len (26 samples, 0.02%)</title><rect x="54.5884%" y="581" width="0.0223%" height="15" fill="rgb(245,45,42)" fg:x="63786" fg:w="26"/><text x="54.8384%" y="591.50"></text></g><g><title>rmp::encode::write_marker (17 samples, 0.01%)</title><rect x="54.5961%" y="565" width="0.0145%" height="15" fill="rgb(211,115,1)" fg:x="63795" fg:w="17"/><text x="54.8461%" y="575.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_map (30 samples, 0.03%)</title><rect x="54.5875%" y="629" width="0.0257%" height="15" fill="rgb(248,133,52)" fg:x="63785" fg:w="30"/><text x="54.8375%" y="639.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (30 samples, 0.03%)</title><rect x="54.5875%" y="613" width="0.0257%" height="15" fill="rgb(238,100,21)" fg:x="63785" fg:w="30"/><text x="54.8375%" y="623.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (112 samples, 0.10%)</title><rect x="54.6132%" y="629" width="0.0959%" height="15" fill="rgb(247,144,11)" fg:x="63815" fg:w="112"/><text x="54.8632%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (66 samples, 0.06%)</title><rect x="54.7091%" y="629" width="0.0565%" height="15" fill="rgb(206,164,16)" fg:x="63927" fg:w="66"/><text x="54.9591%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (13 samples, 0.01%)</title><rect x="54.7656%" y="629" width="0.0111%" height="15" fill="rgb(222,34,3)" fg:x="63993" fg:w="13"/><text x="55.0156%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (67 samples, 0.06%)</title><rect x="54.7810%" y="613" width="0.0573%" height="15" fill="rgb(248,82,4)" fg:x="64011" fg:w="67"/><text x="55.0310%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (67 samples, 0.06%)</title><rect x="54.7810%" y="597" width="0.0573%" height="15" fill="rgb(228,81,46)" fg:x="64011" fg:w="67"/><text x="55.0310%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (67 samples, 0.06%)</title><rect x="54.7810%" y="581" width="0.0573%" height="15" fill="rgb(227,67,47)" fg:x="64011" fg:w="67"/><text x="55.0310%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (51 samples, 0.04%)</title><rect x="54.9727%" y="485" width="0.0436%" height="15" fill="rgb(215,93,53)" fg:x="64235" fg:w="51"/><text x="55.2227%" y="495.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (51 samples, 0.04%)</title><rect x="54.9727%" y="469" width="0.0436%" height="15" fill="rgb(248,194,39)" fg:x="64235" fg:w="51"/><text x="55.2227%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (51 samples, 0.04%)</title><rect x="54.9727%" y="453" width="0.0436%" height="15" fill="rgb(215,5,19)" fg:x="64235" fg:w="51"/><text x="55.2227%" y="463.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (74 samples, 0.06%)</title><rect x="54.9727%" y="501" width="0.0633%" height="15" fill="rgb(226,215,51)" fg:x="64235" fg:w="74"/><text x="55.2227%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (23 samples, 0.02%)</title><rect x="55.0163%" y="485" width="0.0197%" height="15" fill="rgb(225,56,26)" fg:x="64286" fg:w="23"/><text x="55.2663%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (185 samples, 0.16%)</title><rect x="54.9119%" y="533" width="0.1583%" height="15" fill="rgb(222,75,29)" fg:x="64164" fg:w="185"/><text x="55.1619%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.12%)</title><rect x="54.9530%" y="517" width="0.1172%" height="15" fill="rgb(236,139,6)" fg:x="64212" fg:w="137"/><text x="55.2030%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (38 samples, 0.03%)</title><rect x="55.0377%" y="501" width="0.0325%" height="15" fill="rgb(223,137,36)" fg:x="64311" fg:w="38"/><text x="55.2877%" y="511.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (306 samples, 0.26%)</title><rect x="54.8571%" y="565" width="0.2619%" height="15" fill="rgb(226,99,2)" fg:x="64100" fg:w="306"/><text x="55.1071%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (253 samples, 0.22%)</title><rect x="54.9025%" y="549" width="0.2165%" height="15" fill="rgb(206,133,23)" fg:x="64153" fg:w="253"/><text x="55.1525%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (57 samples, 0.05%)</title><rect x="55.0702%" y="533" width="0.0488%" height="15" fill="rgb(243,173,15)" fg:x="64349" fg:w="57"/><text x="55.3202%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (57 samples, 0.05%)</title><rect x="55.0702%" y="517" width="0.0488%" height="15" fill="rgb(228,69,28)" fg:x="64349" fg:w="57"/><text x="55.3202%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (57 samples, 0.05%)</title><rect x="55.0702%" y="501" width="0.0488%" height="15" fill="rgb(212,51,22)" fg:x="64349" fg:w="57"/><text x="55.3202%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (57 samples, 0.05%)</title><rect x="55.0702%" y="485" width="0.0488%" height="15" fill="rgb(227,113,0)" fg:x="64349" fg:w="57"/><text x="55.3202%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,130 samples, 0.97%)</title><rect x="54.8571%" y="581" width="0.9671%" height="15" fill="rgb(252,84,27)" fg:x="64100" fg:w="1130"/><text x="55.1071%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (824 samples, 0.71%)</title><rect x="55.1190%" y="565" width="0.7052%" height="15" fill="rgb(223,145,39)" fg:x="64406" fg:w="824"/><text x="55.3690%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (824 samples, 0.71%)</title><rect x="55.1190%" y="549" width="0.7052%" height="15" fill="rgb(239,219,30)" fg:x="64406" fg:w="824"/><text x="55.3690%" y="559.50"></text></g><g><title>core::ops::function::FnMut::call_mut (824 samples, 0.71%)</title><rect x="55.1190%" y="533" width="0.7052%" height="15" fill="rgb(224,196,39)" fg:x="64406" fg:w="824"/><text x="55.3690%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (824 samples, 0.71%)</title><rect x="55.1190%" y="517" width="0.7052%" height="15" fill="rgb(205,35,43)" fg:x="64406" fg:w="824"/><text x="55.3690%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (824 samples, 0.71%)</title><rect x="55.1190%" y="501" width="0.7052%" height="15" fill="rgb(228,201,21)" fg:x="64406" fg:w="824"/><text x="55.3690%" y="511.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,191 samples, 1.02%)</title><rect x="54.8434%" y="613" width="1.0193%" height="15" fill="rgb(237,118,16)" fg:x="64084" fg:w="1191"/><text x="55.0934%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,181 samples, 1.01%)</title><rect x="54.8520%" y="597" width="1.0107%" height="15" fill="rgb(241,17,19)" fg:x="64094" fg:w="1181"/><text x="55.1020%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (45 samples, 0.04%)</title><rect x="55.8242%" y="581" width="0.0385%" height="15" fill="rgb(214,10,25)" fg:x="65230" fg:w="45"/><text x="56.0742%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (45 samples, 0.04%)</title><rect x="55.8242%" y="565" width="0.0385%" height="15" fill="rgb(238,37,29)" fg:x="65230" fg:w="45"/><text x="56.0742%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (45 samples, 0.04%)</title><rect x="55.8242%" y="549" width="0.0385%" height="15" fill="rgb(253,83,25)" fg:x="65230" fg:w="45"/><text x="56.0742%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (17 samples, 0.01%)</title><rect x="55.8961%" y="581" width="0.0145%" height="15" fill="rgb(234,192,12)" fg:x="65314" fg:w="17"/><text x="56.1461%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (17 samples, 0.01%)</title><rect x="55.8961%" y="565" width="0.0145%" height="15" fill="rgb(241,216,45)" fg:x="65314" fg:w="17"/><text x="56.1461%" y="575.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,365 samples, 1.17%)</title><rect x="54.7810%" y="629" width="1.1682%" height="15" fill="rgb(242,22,33)" fg:x="64011" fg:w="1365"/><text x="55.0310%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (101 samples, 0.09%)</title><rect x="55.8627%" y="613" width="0.0864%" height="15" fill="rgb(231,105,49)" fg:x="65275" fg:w="101"/><text x="56.1127%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (101 samples, 0.09%)</title><rect x="55.8627%" y="597" width="0.0864%" height="15" fill="rgb(218,204,15)" fg:x="65275" fg:w="101"/><text x="56.1127%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (45 samples, 0.04%)</title><rect x="55.9106%" y="581" width="0.0385%" height="15" fill="rgb(235,138,41)" fg:x="65331" fg:w="45"/><text x="56.1606%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (43 samples, 0.04%)</title><rect x="55.9517%" y="549" width="0.0368%" height="15" fill="rgb(246,0,9)" fg:x="65379" fg:w="43"/><text x="56.2017%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (35 samples, 0.03%)</title><rect x="55.9585%" y="533" width="0.0300%" height="15" fill="rgb(210,74,4)" fg:x="65387" fg:w="35"/><text x="56.2085%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (35 samples, 0.03%)</title><rect x="55.9585%" y="517" width="0.0300%" height="15" fill="rgb(250,60,41)" fg:x="65387" fg:w="35"/><text x="56.2085%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.03%)</title><rect x="55.9603%" y="501" width="0.0282%" height="15" fill="rgb(220,115,12)" fg:x="65389" fg:w="33"/><text x="56.2103%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="55.9603%" y="485" width="0.0282%" height="15" fill="rgb(237,100,13)" fg:x="65389" fg:w="33"/><text x="56.2103%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="55.9603%" y="469" width="0.0282%" height="15" fill="rgb(213,55,26)" fg:x="65389" fg:w="33"/><text x="56.2103%" y="479.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="55.9603%" y="453" width="0.0282%" height="15" fill="rgb(216,17,4)" fg:x="65389" fg:w="33"/><text x="56.2103%" y="463.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="55.9603%" y="437" width="0.0282%" height="15" fill="rgb(220,153,47)" fg:x="65389" fg:w="33"/><text x="56.2103%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="55.9603%" y="421" width="0.0282%" height="15" fill="rgb(215,131,9)" fg:x="65389" fg:w="33"/><text x="56.2103%" y="431.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="55.9628%" y="405" width="0.0257%" height="15" fill="rgb(233,46,42)" fg:x="65392" fg:w="30"/><text x="56.2128%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (135 samples, 0.12%)</title><rect x="55.9971%" y="485" width="0.1155%" height="15" fill="rgb(226,86,7)" fg:x="65432" fg:w="135"/><text x="56.2471%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (135 samples, 0.12%)</title><rect x="55.9971%" y="469" width="0.1155%" height="15" fill="rgb(239,226,21)" fg:x="65432" fg:w="135"/><text x="56.2471%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (148 samples, 0.13%)</title><rect x="55.9945%" y="501" width="0.1267%" height="15" fill="rgb(244,137,22)" fg:x="65429" fg:w="148"/><text x="56.2445%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (202 samples, 0.17%)</title><rect x="55.9491%" y="629" width="0.1729%" height="15" fill="rgb(211,139,35)" fg:x="65376" fg:w="202"/><text x="56.1991%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (201 samples, 0.17%)</title><rect x="55.9500%" y="613" width="0.1720%" height="15" fill="rgb(214,62,50)" fg:x="65377" fg:w="201"/><text x="56.2000%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (201 samples, 0.17%)</title><rect x="55.9500%" y="597" width="0.1720%" height="15" fill="rgb(212,113,44)" fg:x="65377" fg:w="201"/><text x="56.2000%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (199 samples, 0.17%)</title><rect x="55.9517%" y="581" width="0.1703%" height="15" fill="rgb(226,150,43)" fg:x="65379" fg:w="199"/><text x="56.2017%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (199 samples, 0.17%)</title><rect x="55.9517%" y="565" width="0.1703%" height="15" fill="rgb(250,71,37)" fg:x="65379" fg:w="199"/><text x="56.2017%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (156 samples, 0.13%)</title><rect x="55.9885%" y="549" width="0.1335%" height="15" fill="rgb(219,76,19)" fg:x="65422" fg:w="156"/><text x="56.2385%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (153 samples, 0.13%)</title><rect x="55.9911%" y="533" width="0.1309%" height="15" fill="rgb(250,39,11)" fg:x="65425" fg:w="153"/><text x="56.2411%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (153 samples, 0.13%)</title><rect x="55.9911%" y="517" width="0.1309%" height="15" fill="rgb(230,64,31)" fg:x="65425" fg:w="153"/><text x="56.2411%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (100 samples, 0.09%)</title><rect x="56.1220%" y="629" width="0.0856%" height="15" fill="rgb(208,222,23)" fg:x="65578" fg:w="100"/><text x="56.3720%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (91 samples, 0.08%)</title><rect x="56.1297%" y="613" width="0.0779%" height="15" fill="rgb(227,125,18)" fg:x="65587" fg:w="91"/><text x="56.3797%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (91 samples, 0.08%)</title><rect x="56.1297%" y="597" width="0.0779%" height="15" fill="rgb(234,210,9)" fg:x="65587" fg:w="91"/><text x="56.3797%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (91 samples, 0.08%)</title><rect x="56.1297%" y="581" width="0.0779%" height="15" fill="rgb(217,127,24)" fg:x="65587" fg:w="91"/><text x="56.3797%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (91 samples, 0.08%)</title><rect x="56.1297%" y="565" width="0.0779%" height="15" fill="rgb(239,141,48)" fg:x="65587" fg:w="91"/><text x="56.3797%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (91 samples, 0.08%)</title><rect x="56.1297%" y="549" width="0.0779%" height="15" fill="rgb(227,109,8)" fg:x="65587" fg:w="91"/><text x="56.3797%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (70 samples, 0.06%)</title><rect x="56.2076%" y="629" width="0.0599%" height="15" fill="rgb(235,184,23)" fg:x="65678" fg:w="70"/><text x="56.4576%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.06%)</title><rect x="56.2076%" y="613" width="0.0599%" height="15" fill="rgb(227,226,48)" fg:x="65678" fg:w="70"/><text x="56.4576%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (70 samples, 0.06%)</title><rect x="56.2076%" y="597" width="0.0599%" height="15" fill="rgb(206,150,11)" fg:x="65678" fg:w="70"/><text x="56.4576%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (69 samples, 0.06%)</title><rect x="56.2084%" y="581" width="0.0591%" height="15" fill="rgb(254,2,33)" fg:x="65679" fg:w="69"/><text x="56.4584%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (69 samples, 0.06%)</title><rect x="56.2084%" y="565" width="0.0591%" height="15" fill="rgb(243,160,20)" fg:x="65679" fg:w="69"/><text x="56.4584%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (69 samples, 0.06%)</title><rect x="56.2084%" y="549" width="0.0591%" height="15" fill="rgb(218,208,30)" fg:x="65679" fg:w="69"/><text x="56.4584%" y="559.50"></text></g><g><title>sn_rust_dealloc (57 samples, 0.05%)</title><rect x="56.2187%" y="533" width="0.0488%" height="15" fill="rgb(224,120,49)" fg:x="65691" fg:w="57"/><text x="56.4687%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (54 samples, 0.05%)</title><rect x="56.4446%" y="405" width="0.0462%" height="15" fill="rgb(246,12,2)" fg:x="65955" fg:w="54"/><text x="56.6946%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (52 samples, 0.04%)</title><rect x="56.4464%" y="389" width="0.0445%" height="15" fill="rgb(236,117,3)" fg:x="65957" fg:w="52"/><text x="56.6964%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (63 samples, 0.05%)</title><rect x="56.4378%" y="437" width="0.0539%" height="15" fill="rgb(216,128,52)" fg:x="65947" fg:w="63"/><text x="56.6878%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (58 samples, 0.05%)</title><rect x="56.4421%" y="421" width="0.0496%" height="15" fill="rgb(246,145,19)" fg:x="65952" fg:w="58"/><text x="56.6921%" y="431.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (950 samples, 0.81%)</title><rect x="56.4241%" y="533" width="0.8130%" height="15" fill="rgb(222,11,46)" fg:x="65931" fg:w="950"/><text x="56.6741%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (950 samples, 0.81%)</title><rect x="56.4241%" y="517" width="0.8130%" height="15" fill="rgb(245,82,36)" fg:x="65931" fg:w="950"/><text x="56.6741%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (950 samples, 0.81%)</title><rect x="56.4241%" y="501" width="0.8130%" height="15" fill="rgb(250,73,51)" fg:x="65931" fg:w="950"/><text x="56.6741%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (950 samples, 0.81%)</title><rect x="56.4241%" y="485" width="0.8130%" height="15" fill="rgb(221,189,23)" fg:x="65931" fg:w="950"/><text x="56.6741%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (950 samples, 0.81%)</title><rect x="56.4241%" y="469" width="0.8130%" height="15" fill="rgb(210,33,7)" fg:x="65931" fg:w="950"/><text x="56.6741%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (950 samples, 0.81%)</title><rect x="56.4241%" y="453" width="0.8130%" height="15" fill="rgb(210,107,22)" fg:x="65931" fg:w="950"/><text x="56.6741%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (871 samples, 0.75%)</title><rect x="56.4917%" y="437" width="0.7454%" height="15" fill="rgb(222,116,37)" fg:x="66010" fg:w="871"/><text x="56.7417%" y="447.50"></text></g><g><title>[libc-2.31.so] (826 samples, 0.71%)</title><rect x="56.5302%" y="421" width="0.7069%" height="15" fill="rgb(254,17,48)" fg:x="66055" fg:w="826"/><text x="56.7802%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (38 samples, 0.03%)</title><rect x="57.3766%" y="389" width="0.0325%" height="15" fill="rgb(224,36,32)" fg:x="67044" fg:w="38"/><text x="57.6266%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.02%)</title><rect x="57.4203%" y="325" width="0.0180%" height="15" fill="rgb(232,90,46)" fg:x="67095" fg:w="21"/><text x="57.6703%" y="335.50"></text></g><g><title>[libc-2.31.so] (108 samples, 0.09%)</title><rect x="57.6633%" y="213" width="0.0924%" height="15" fill="rgb(241,66,40)" fg:x="67379" fg:w="108"/><text x="57.9133%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (58 samples, 0.05%)</title><rect x="57.7660%" y="213" width="0.0496%" height="15" fill="rgb(249,184,29)" fg:x="67499" fg:w="58"/><text x="58.0160%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (465 samples, 0.40%)</title><rect x="57.4434%" y="325" width="0.3979%" height="15" fill="rgb(231,181,1)" fg:x="67122" fg:w="465"/><text x="57.6934%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (453 samples, 0.39%)</title><rect x="57.4536%" y="309" width="0.3877%" height="15" fill="rgb(224,94,2)" fg:x="67134" fg:w="453"/><text x="57.7036%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (453 samples, 0.39%)</title><rect x="57.4536%" y="293" width="0.3877%" height="15" fill="rgb(229,170,15)" fg:x="67134" fg:w="453"/><text x="57.7036%" y="303.50"></text></g><g><title>alloc::alloc::realloc (453 samples, 0.39%)</title><rect x="57.4536%" y="277" width="0.3877%" height="15" fill="rgb(240,127,35)" fg:x="67134" fg:w="453"/><text x="57.7036%" y="287.50"></text></g><g><title>__rg_realloc (453 samples, 0.39%)</title><rect x="57.4536%" y="261" width="0.3877%" height="15" fill="rgb(248,196,34)" fg:x="67134" fg:w="453"/><text x="57.7036%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (453 samples, 0.39%)</title><rect x="57.4536%" y="245" width="0.3877%" height="15" fill="rgb(236,137,7)" fg:x="67134" fg:w="453"/><text x="57.7036%" y="255.50"></text></g><g><title>sn_rust_realloc (449 samples, 0.38%)</title><rect x="57.4571%" y="229" width="0.3843%" height="15" fill="rgb(235,127,16)" fg:x="67138" fg:w="449"/><text x="57.7071%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (30 samples, 0.03%)</title><rect x="57.8156%" y="213" width="0.0257%" height="15" fill="rgb(250,192,54)" fg:x="67557" fg:w="30"/><text x="58.0656%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (509 samples, 0.44%)</title><rect x="57.4091%" y="389" width="0.4356%" height="15" fill="rgb(218,98,20)" fg:x="67082" fg:w="509"/><text x="57.6591%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (509 samples, 0.44%)</title><rect x="57.4091%" y="373" width="0.4356%" height="15" fill="rgb(230,176,47)" fg:x="67082" fg:w="509"/><text x="57.6591%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (506 samples, 0.43%)</title><rect x="57.4117%" y="357" width="0.4330%" height="15" fill="rgb(244,2,33)" fg:x="67085" fg:w="506"/><text x="57.6617%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (506 samples, 0.43%)</title><rect x="57.4117%" y="341" width="0.4330%" height="15" fill="rgb(231,100,17)" fg:x="67085" fg:w="506"/><text x="57.6617%" y="351.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (567 samples, 0.49%)</title><rect x="57.3698%" y="501" width="0.4852%" height="15" fill="rgb(245,23,12)" fg:x="67036" fg:w="567"/><text x="57.6198%" y="511.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (567 samples, 0.49%)</title><rect x="57.3698%" y="485" width="0.4852%" height="15" fill="rgb(249,55,22)" fg:x="67036" fg:w="567"/><text x="57.6198%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (567 samples, 0.49%)</title><rect x="57.3698%" y="469" width="0.4852%" height="15" fill="rgb(207,134,9)" fg:x="67036" fg:w="567"/><text x="57.6198%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (567 samples, 0.49%)</title><rect x="57.3698%" y="453" width="0.4852%" height="15" fill="rgb(218,134,0)" fg:x="67036" fg:w="567"/><text x="57.6198%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (567 samples, 0.49%)</title><rect x="57.3698%" y="437" width="0.4852%" height="15" fill="rgb(213,212,33)" fg:x="67036" fg:w="567"/><text x="57.6198%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (567 samples, 0.49%)</title><rect x="57.3698%" y="421" width="0.4852%" height="15" fill="rgb(252,106,18)" fg:x="67036" fg:w="567"/><text x="57.6198%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (567 samples, 0.49%)</title><rect x="57.3698%" y="405" width="0.4852%" height="15" fill="rgb(208,126,42)" fg:x="67036" fg:w="567"/><text x="57.6198%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="57.8447%" y="389" width="0.0103%" height="15" fill="rgb(246,175,29)" fg:x="67591" fg:w="12"/><text x="58.0947%" y="399.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_key (1,996 samples, 1.71%)</title><rect x="56.3137%" y="613" width="1.7082%" height="15" fill="rgb(215,13,50)" fg:x="65802" fg:w="1996"/><text x="56.5637%" y="623.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1,996 samples, 1.71%)</title><rect x="56.3137%" y="597" width="1.7082%" height="15" fill="rgb(216,172,15)" fg:x="65802" fg:w="1996"/><text x="56.5637%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1,956 samples, 1.67%)</title><rect x="56.3479%" y="581" width="1.6740%" height="15" fill="rgb(212,103,13)" fg:x="65842" fg:w="1956"/><text x="56.5979%" y="591.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,955 samples, 1.67%)</title><rect x="56.3488%" y="565" width="1.6731%" height="15" fill="rgb(231,171,36)" fg:x="65843" fg:w="1955"/><text x="56.5988%" y="575.50"></text></g><g><title>rmp::encode::str::write_str (1,870 samples, 1.60%)</title><rect x="56.4215%" y="549" width="1.6004%" height="15" fill="rgb(250,123,20)" fg:x="65928" fg:w="1870"/><text x="56.6715%" y="559.50"></text></g><g><title>rmp::encode::str::write_str_len (917 samples, 0.78%)</title><rect x="57.2371%" y="533" width="0.7848%" height="15" fill="rgb(212,53,50)" fg:x="66881" fg:w="917"/><text x="57.4871%" y="543.50"></text></g><g><title>rmp::encode::write_marker (797 samples, 0.68%)</title><rect x="57.3398%" y="517" width="0.6821%" height="15" fill="rgb(243,54,12)" fg:x="67001" fg:w="797"/><text x="57.5898%" y="527.50"></text></g><g><title>rmp::marker::Marker::to_u8 (195 samples, 0.17%)</title><rect x="57.8550%" y="501" width="0.1669%" height="15" fill="rgb(234,101,34)" fg:x="67603" fg:w="195"/><text x="58.1050%" y="511.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_bool (41 samples, 0.04%)</title><rect x="58.3035%" y="565" width="0.0351%" height="15" fill="rgb(254,67,22)" fg:x="68127" fg:w="41"/><text x="58.5535%" y="575.50"></text></g><g><title>rmp::encode::write_bool (36 samples, 0.03%)</title><rect x="58.3077%" y="549" width="0.0308%" height="15" fill="rgb(250,35,47)" fg:x="68132" fg:w="36"/><text x="58.5577%" y="559.50"></text></g><g><title>rmp::encode::write_marker (27 samples, 0.02%)</title><rect x="58.3154%" y="533" width="0.0231%" height="15" fill="rgb(226,126,38)" fg:x="68141" fg:w="27"/><text x="58.5654%" y="543.50"></text></g><g><title>rmp::marker::Marker::to_u8 (15 samples, 0.01%)</title><rect x="58.3257%" y="517" width="0.0128%" height="15" fill="rgb(216,138,53)" fg:x="68153" fg:w="15"/><text x="58.5757%" y="527.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (20 samples, 0.02%)</title><rect x="58.3514%" y="485" width="0.0171%" height="15" fill="rgb(246,199,43)" fg:x="68183" fg:w="20"/><text x="58.6014%" y="495.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (20 samples, 0.02%)</title><rect x="58.3514%" y="469" width="0.0171%" height="15" fill="rgb(232,125,11)" fg:x="68183" fg:w="20"/><text x="58.6014%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (20 samples, 0.02%)</title><rect x="58.3514%" y="453" width="0.0171%" height="15" fill="rgb(218,219,45)" fg:x="68183" fg:w="20"/><text x="58.6014%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (20 samples, 0.02%)</title><rect x="58.3514%" y="437" width="0.0171%" height="15" fill="rgb(216,102,54)" fg:x="68183" fg:w="20"/><text x="58.6014%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (20 samples, 0.02%)</title><rect x="58.3514%" y="421" width="0.0171%" height="15" fill="rgb(250,228,7)" fg:x="68183" fg:w="20"/><text x="58.6014%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (20 samples, 0.02%)</title><rect x="58.3514%" y="405" width="0.0171%" height="15" fill="rgb(226,125,25)" fg:x="68183" fg:w="20"/><text x="58.6014%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (20 samples, 0.02%)</title><rect x="58.3514%" y="389" width="0.0171%" height="15" fill="rgb(224,165,27)" fg:x="68183" fg:w="20"/><text x="58.6014%" y="399.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq::{{closure}} (37 samples, 0.03%)</title><rect x="58.3385%" y="533" width="0.0317%" height="15" fill="rgb(233,86,3)" fg:x="68168" fg:w="37"/><text x="58.5885%" y="543.50"></text></g><g><title>rmp::encode::write_array_len (37 samples, 0.03%)</title><rect x="58.3385%" y="517" width="0.0317%" height="15" fill="rgb(228,116,20)" fg:x="68168" fg:w="37"/><text x="58.5885%" y="527.50"></text></g><g><title>rmp::encode::write_marker (24 samples, 0.02%)</title><rect x="58.3497%" y="501" width="0.0205%" height="15" fill="rgb(209,192,17)" fg:x="68181" fg:w="24"/><text x="58.5997%" y="511.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_seq (45 samples, 0.04%)</title><rect x="58.3385%" y="565" width="0.0385%" height="15" fill="rgb(224,88,34)" fg:x="68168" fg:w="45"/><text x="58.5885%" y="575.50"></text></g><g><title>rmp_serde::encode::Serializer&lt;W,C&gt;::maybe_unknown_len_compound (45 samples, 0.04%)</title><rect x="58.3385%" y="549" width="0.0385%" height="15" fill="rgb(233,38,6)" fg:x="68168" fg:w="45"/><text x="58.5885%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (29 samples, 0.02%)</title><rect x="58.4489%" y="405" width="0.0248%" height="15" fill="rgb(212,59,30)" fg:x="68297" fg:w="29"/><text x="58.6989%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (26 samples, 0.02%)</title><rect x="58.4515%" y="389" width="0.0223%" height="15" fill="rgb(213,80,3)" fg:x="68300" fg:w="26"/><text x="58.7015%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (22 samples, 0.02%)</title><rect x="58.4772%" y="373" width="0.0188%" height="15" fill="rgb(251,178,7)" fg:x="68330" fg:w="22"/><text x="58.7272%" y="383.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="58.6851%" y="261" width="0.0240%" height="15" fill="rgb(213,154,26)" fg:x="68573" fg:w="28"/><text x="58.9351%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="58.7151%" y="261" width="0.0171%" height="15" fill="rgb(238,165,49)" fg:x="68608" fg:w="20"/><text x="58.9651%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (266 samples, 0.23%)</title><rect x="58.5088%" y="357" width="0.2276%" height="15" fill="rgb(248,91,46)" fg:x="68367" fg:w="266"/><text x="58.7588%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (266 samples, 0.23%)</title><rect x="58.5088%" y="341" width="0.2276%" height="15" fill="rgb(244,21,52)" fg:x="68367" fg:w="266"/><text x="58.7588%" y="351.50"></text></g><g><title>alloc::alloc::realloc (266 samples, 0.23%)</title><rect x="58.5088%" y="325" width="0.2276%" height="15" fill="rgb(247,122,20)" fg:x="68367" fg:w="266"/><text x="58.7588%" y="335.50"></text></g><g><title>__rg_realloc (266 samples, 0.23%)</title><rect x="58.5088%" y="309" width="0.2276%" height="15" fill="rgb(218,27,9)" fg:x="68367" fg:w="266"/><text x="58.7588%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (266 samples, 0.23%)</title><rect x="58.5088%" y="293" width="0.2276%" height="15" fill="rgb(246,7,6)" fg:x="68367" fg:w="266"/><text x="58.7588%" y="303.50"></text></g><g><title>sn_rust_realloc (266 samples, 0.23%)</title><rect x="58.5088%" y="277" width="0.2276%" height="15" fill="rgb(227,135,54)" fg:x="68367" fg:w="266"/><text x="58.7588%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (284 samples, 0.24%)</title><rect x="58.4977%" y="373" width="0.2430%" height="15" fill="rgb(247,14,11)" fg:x="68354" fg:w="284"/><text x="58.7477%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (366 samples, 0.31%)</title><rect x="58.4361%" y="437" width="0.3132%" height="15" fill="rgb(206,149,34)" fg:x="68282" fg:w="366"/><text x="58.6861%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (361 samples, 0.31%)</title><rect x="58.4404%" y="421" width="0.3089%" height="15" fill="rgb(227,228,4)" fg:x="68287" fg:w="361"/><text x="58.6904%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (322 samples, 0.28%)</title><rect x="58.4738%" y="405" width="0.2756%" height="15" fill="rgb(238,218,28)" fg:x="68326" fg:w="322"/><text x="58.7238%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (322 samples, 0.28%)</title><rect x="58.4738%" y="389" width="0.2756%" height="15" fill="rgb(252,86,40)" fg:x="68326" fg:w="322"/><text x="58.7238%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (483 samples, 0.41%)</title><rect x="58.7493%" y="437" width="0.4134%" height="15" fill="rgb(251,225,11)" fg:x="68648" fg:w="483"/><text x="58.9993%" y="447.50"></text></g><g><title>[libc-2.31.so] (455 samples, 0.39%)</title><rect x="58.7733%" y="421" width="0.3894%" height="15" fill="rgb(206,46,49)" fg:x="68676" fg:w="455"/><text x="59.0233%" y="431.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (864 samples, 0.74%)</title><rect x="58.4241%" y="533" width="0.7394%" height="15" fill="rgb(245,128,24)" fg:x="68268" fg:w="864"/><text x="58.6741%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (864 samples, 0.74%)</title><rect x="58.4241%" y="517" width="0.7394%" height="15" fill="rgb(219,177,34)" fg:x="68268" fg:w="864"/><text x="58.6741%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (864 samples, 0.74%)</title><rect x="58.4241%" y="501" width="0.7394%" height="15" fill="rgb(218,60,48)" fg:x="68268" fg:w="864"/><text x="58.6741%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (864 samples, 0.74%)</title><rect x="58.4241%" y="485" width="0.7394%" height="15" fill="rgb(221,11,5)" fg:x="68268" fg:w="864"/><text x="58.6741%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (864 samples, 0.74%)</title><rect x="58.4241%" y="469" width="0.7394%" height="15" fill="rgb(220,148,13)" fg:x="68268" fg:w="864"/><text x="58.6741%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (864 samples, 0.74%)</title><rect x="58.4241%" y="453" width="0.7394%" height="15" fill="rgb(210,16,3)" fg:x="68268" fg:w="864"/><text x="58.6741%" y="463.50"></text></g><g><title>rmp::encode::RmpWrite::write_data_u16 (12 samples, 0.01%)</title><rect x="59.2140%" y="517" width="0.0103%" height="15" fill="rgb(236,80,2)" fg:x="69191" fg:w="12"/><text x="59.4640%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.03%)</title><rect x="59.2714%" y="389" width="0.0282%" height="15" fill="rgb(239,129,19)" fg:x="69258" fg:w="33"/><text x="59.5214%" y="399.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (81 samples, 0.07%)</title><rect x="59.2491%" y="501" width="0.0693%" height="15" fill="rgb(220,106,35)" fg:x="69232" fg:w="81"/><text x="59.4991%" y="511.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (81 samples, 0.07%)</title><rect x="59.2491%" y="485" width="0.0693%" height="15" fill="rgb(252,139,45)" fg:x="69232" fg:w="81"/><text x="59.4991%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (81 samples, 0.07%)</title><rect x="59.2491%" y="469" width="0.0693%" height="15" fill="rgb(229,8,36)" fg:x="69232" fg:w="81"/><text x="59.4991%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (81 samples, 0.07%)</title><rect x="59.2491%" y="453" width="0.0693%" height="15" fill="rgb(230,126,33)" fg:x="69232" fg:w="81"/><text x="59.4991%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (81 samples, 0.07%)</title><rect x="59.2491%" y="437" width="0.0693%" height="15" fill="rgb(239,140,21)" fg:x="69232" fg:w="81"/><text x="59.4991%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (81 samples, 0.07%)</title><rect x="59.2491%" y="421" width="0.0693%" height="15" fill="rgb(254,104,9)" fg:x="69232" fg:w="81"/><text x="59.4991%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (81 samples, 0.07%)</title><rect x="59.2491%" y="405" width="0.0693%" height="15" fill="rgb(239,52,14)" fg:x="69232" fg:w="81"/><text x="59.4991%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="59.2996%" y="389" width="0.0188%" height="15" fill="rgb(208,227,44)" fg:x="69291" fg:w="22"/><text x="59.5496%" y="399.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (1,159 samples, 0.99%)</title><rect x="58.3771%" y="565" width="0.9919%" height="15" fill="rgb(246,18,19)" fg:x="68213" fg:w="1159"/><text x="58.6271%" y="575.50"></text></g><g><title>rmp::encode::str::write_str (1,107 samples, 0.95%)</title><rect x="58.4216%" y="549" width="0.9474%" height="15" fill="rgb(235,228,25)" fg:x="68265" fg:w="1107"/><text x="58.6716%" y="559.50"></text></g><g><title>rmp::encode::str::write_str_len (240 samples, 0.21%)</title><rect x="59.1635%" y="533" width="0.2054%" height="15" fill="rgb(240,156,20)" fg:x="69132" fg:w="240"/><text x="59.4135%" y="543.50"></text></g><g><title>rmp::encode::write_marker (163 samples, 0.14%)</title><rect x="59.2294%" y="517" width="0.1395%" height="15" fill="rgb(224,8,20)" fg:x="69209" fg:w="163"/><text x="59.4794%" y="527.50"></text></g><g><title>rmp::marker::Marker::to_u8 (59 samples, 0.05%)</title><rect x="59.3184%" y="501" width="0.0505%" height="15" fill="rgb(214,12,52)" fg:x="69313" fg:w="59"/><text x="59.5684%" y="511.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (56 samples, 0.05%)</title><rect x="59.3689%" y="565" width="0.0479%" height="15" fill="rgb(211,220,47)" fg:x="69372" fg:w="56"/><text x="59.6189%" y="575.50"></text></g><g><title>rmp::encode::uint::write_uint (52 samples, 0.04%)</title><rect x="59.3724%" y="549" width="0.0445%" height="15" fill="rgb(250,173,5)" fg:x="69376" fg:w="52"/><text x="59.6224%" y="559.50"></text></g><g><title>rmp::encode::uint::write_pfix (40 samples, 0.03%)</title><rect x="59.3826%" y="533" width="0.0342%" height="15" fill="rgb(250,125,52)" fg:x="69388" fg:w="40"/><text x="59.6326%" y="543.50"></text></g><g><title>rmp::encode::write_marker (28 samples, 0.02%)</title><rect x="59.3929%" y="517" width="0.0240%" height="15" fill="rgb(209,133,18)" fg:x="69400" fg:w="28"/><text x="59.6429%" y="527.50"></text></g><g><title>rmp::marker::Marker::to_u8 (15 samples, 0.01%)</title><rect x="59.4040%" y="501" width="0.0128%" height="15" fill="rgb(216,173,22)" fg:x="69413" fg:w="15"/><text x="59.6540%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 0.04%)</title><rect x="59.4169%" y="565" width="0.0411%" height="15" fill="rgb(205,3,22)" fg:x="69428" fg:w="48"/><text x="59.6669%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (85 samples, 0.07%)</title><rect x="59.4579%" y="565" width="0.0727%" height="15" fill="rgb(248,22,20)" fg:x="69476" fg:w="85"/><text x="59.7079%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.04%)</title><rect x="59.5307%" y="565" width="0.0428%" height="15" fill="rgb(233,6,29)" fg:x="69561" fg:w="50"/><text x="59.7807%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.03%)</title><rect x="60.6954%" y="405" width="0.0282%" height="15" fill="rgb(240,22,54)" fg:x="70922" fg:w="33"/><text x="60.9454%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="60.7031%" y="389" width="0.0205%" height="15" fill="rgb(231,133,32)" fg:x="70931" fg:w="24"/><text x="60.9531%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (15 samples, 0.01%)</title><rect x="60.7108%" y="373" width="0.0128%" height="15" fill="rgb(248,193,4)" fg:x="70940" fg:w="15"/><text x="60.9608%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (13 samples, 0.01%)</title><rect x="60.7125%" y="357" width="0.0111%" height="15" fill="rgb(211,178,46)" fg:x="70942" fg:w="13"/><text x="60.9625%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (113 samples, 0.10%)</title><rect x="60.7237%" y="405" width="0.0967%" height="15" fill="rgb(224,5,42)" fg:x="70955" fg:w="113"/><text x="60.9737%" y="415.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="60.7322%" y="389" width="0.0881%" height="15" fill="rgb(239,176,25)" fg:x="70965" fg:w="103"/><text x="60.9822%" y="399.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (165 samples, 0.14%)</title><rect x="60.6826%" y="501" width="0.1412%" height="15" fill="rgb(245,187,50)" fg:x="70907" fg:w="165"/><text x="60.9326%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (165 samples, 0.14%)</title><rect x="60.6826%" y="485" width="0.1412%" height="15" fill="rgb(248,24,15)" fg:x="70907" fg:w="165"/><text x="60.9326%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (165 samples, 0.14%)</title><rect x="60.6826%" y="469" width="0.1412%" height="15" fill="rgb(205,166,13)" fg:x="70907" fg:w="165"/><text x="60.9326%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (165 samples, 0.14%)</title><rect x="60.6826%" y="453" width="0.1412%" height="15" fill="rgb(208,114,23)" fg:x="70907" fg:w="165"/><text x="60.9326%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (165 samples, 0.14%)</title><rect x="60.6826%" y="437" width="0.1412%" height="15" fill="rgb(239,127,18)" fg:x="70907" fg:w="165"/><text x="60.9326%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (165 samples, 0.14%)</title><rect x="60.6826%" y="421" width="0.1412%" height="15" fill="rgb(219,154,28)" fg:x="70907" fg:w="165"/><text x="60.9326%" y="431.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (40 samples, 0.03%)</title><rect x="60.8786%" y="469" width="0.0342%" height="15" fill="rgb(225,157,23)" fg:x="71136" fg:w="40"/><text x="61.1286%" y="479.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (40 samples, 0.03%)</title><rect x="60.8786%" y="453" width="0.0342%" height="15" fill="rgb(219,8,6)" fg:x="71136" fg:w="40"/><text x="61.1286%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (40 samples, 0.03%)</title><rect x="60.8786%" y="437" width="0.0342%" height="15" fill="rgb(212,47,6)" fg:x="71136" fg:w="40"/><text x="61.1286%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (40 samples, 0.03%)</title><rect x="60.8786%" y="421" width="0.0342%" height="15" fill="rgb(224,190,4)" fg:x="71136" fg:w="40"/><text x="61.1286%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (40 samples, 0.03%)</title><rect x="60.8786%" y="405" width="0.0342%" height="15" fill="rgb(239,183,29)" fg:x="71136" fg:w="40"/><text x="61.1286%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (40 samples, 0.03%)</title><rect x="60.8786%" y="389" width="0.0342%" height="15" fill="rgb(213,57,7)" fg:x="71136" fg:w="40"/><text x="61.1286%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (40 samples, 0.03%)</title><rect x="60.8786%" y="373" width="0.0342%" height="15" fill="rgb(216,148,1)" fg:x="71136" fg:w="40"/><text x="61.1286%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.03%)</title><rect x="60.8846%" y="357" width="0.0282%" height="15" fill="rgb(236,182,29)" fg:x="71143" fg:w="33"/><text x="61.1346%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_str (325 samples, 0.28%)</title><rect x="60.6663%" y="533" width="0.2781%" height="15" fill="rgb(244,120,48)" fg:x="70888" fg:w="325"/><text x="60.9163%" y="543.50"></text></g><g><title>rmp::encode::str::write_str (306 samples, 0.26%)</title><rect x="60.6826%" y="517" width="0.2619%" height="15" fill="rgb(206,71,34)" fg:x="70907" fg:w="306"/><text x="60.9326%" y="527.50"></text></g><g><title>rmp::encode::str::write_str_len (141 samples, 0.12%)</title><rect x="60.8238%" y="501" width="0.1207%" height="15" fill="rgb(242,32,6)" fg:x="71072" fg:w="141"/><text x="61.0738%" y="511.50"></text></g><g><title>rmp::encode::write_marker (104 samples, 0.09%)</title><rect x="60.8555%" y="485" width="0.0890%" height="15" fill="rgb(241,35,3)" fg:x="71109" fg:w="104"/><text x="61.1055%" y="495.50"></text></g><g><title>rmp::marker::Marker::to_u8 (37 samples, 0.03%)</title><rect x="60.9128%" y="469" width="0.0317%" height="15" fill="rgb(222,62,19)" fg:x="71176" fg:w="37"/><text x="61.1628%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.03%)</title><rect x="60.9462%" y="517" width="0.0308%" height="15" fill="rgb(223,110,41)" fg:x="71215" fg:w="36"/><text x="61.1962%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (38 samples, 0.03%)</title><rect x="61.1054%" y="357" width="0.0325%" height="15" fill="rgb(208,224,4)" fg:x="71401" fg:w="38"/><text x="61.3554%" y="367.50"></text></g><g><title>rmp::encode::RmpWrite::write_u8 (69 samples, 0.06%)</title><rect x="61.1054%" y="469" width="0.0591%" height="15" fill="rgb(241,137,19)" fg:x="71401" fg:w="69"/><text x="61.3554%" y="479.50"></text></g><g><title>&lt;T as rmp::encode::RmpWrite&gt;::write_bytes (69 samples, 0.06%)</title><rect x="61.1054%" y="453" width="0.0591%" height="15" fill="rgb(244,24,17)" fg:x="71401" fg:w="69"/><text x="61.3554%" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (69 samples, 0.06%)</title><rect x="61.1054%" y="437" width="0.0591%" height="15" fill="rgb(245,178,49)" fg:x="71401" fg:w="69"/><text x="61.3554%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (69 samples, 0.06%)</title><rect x="61.1054%" y="421" width="0.0591%" height="15" fill="rgb(219,160,38)" fg:x="71401" fg:w="69"/><text x="61.3554%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (69 samples, 0.06%)</title><rect x="61.1054%" y="405" width="0.0591%" height="15" fill="rgb(228,137,14)" fg:x="71401" fg:w="69"/><text x="61.3554%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (69 samples, 0.06%)</title><rect x="61.1054%" y="389" width="0.0591%" height="15" fill="rgb(237,134,11)" fg:x="71401" fg:w="69"/><text x="61.3554%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (69 samples, 0.06%)</title><rect x="61.1054%" y="373" width="0.0591%" height="15" fill="rgb(211,126,44)" fg:x="71401" fg:w="69"/><text x="61.3554%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="61.1439%" y="357" width="0.0205%" height="15" fill="rgb(226,171,33)" fg:x="71446" fg:w="24"/><text x="61.3939%" y="367.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (386 samples, 0.33%)</title><rect x="60.9445%" y="533" width="0.3303%" height="15" fill="rgb(253,99,13)" fg:x="71213" fg:w="386"/><text x="61.1945%" y="543.50"></text></g><g><title>rmp::encode::uint::write_uint (348 samples, 0.30%)</title><rect x="60.9770%" y="517" width="0.2978%" height="15" fill="rgb(244,48,7)" fg:x="71251" fg:w="348"/><text x="61.2270%" y="527.50"></text></g><g><title>rmp::encode::uint::write_pfix (283 samples, 0.24%)</title><rect x="61.0326%" y="501" width="0.2422%" height="15" fill="rgb(244,217,54)" fg:x="71316" fg:w="283"/><text x="61.2826%" y="511.50"></text></g><g><title>rmp::encode::write_marker (225 samples, 0.19%)</title><rect x="61.0823%" y="485" width="0.1926%" height="15" fill="rgb(224,15,18)" fg:x="71374" fg:w="225"/><text x="61.3323%" y="495.50"></text></g><g><title>rmp::marker::Marker::to_u8 (129 samples, 0.11%)</title><rect x="61.1644%" y="469" width="0.1104%" height="15" fill="rgb(244,99,12)" fg:x="71470" fg:w="129"/><text x="61.4144%" y="479.50"></text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2,056 samples, 1.76%)</title><rect x="59.5760%" y="565" width="1.7595%" height="15" fill="rgb(233,226,8)" fg:x="69614" fg:w="2056"/><text x="59.8260%" y="575.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (1,997 samples, 1.71%)</title><rect x="59.6265%" y="549" width="1.7090%" height="15" fill="rgb(229,211,3)" fg:x="69673" fg:w="1997"/><text x="59.8765%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (71 samples, 0.06%)</title><rect x="61.2748%" y="533" width="0.0608%" height="15" fill="rgb(216,140,21)" fg:x="71599" fg:w="71"/><text x="61.5248%" y="543.50"></text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::encode (7,905 samples, 6.77%)</title><rect x="54.5713%" y="709" width="6.7651%" height="15" fill="rgb(234,122,30)" fg:x="63766" fg:w="7905"/><text x="54.8213%" y="719.50">&lt;tremor_r..</text></g><g><title>rmp_serde::encode::to_vec (7,905 samples, 6.77%)</title><rect x="54.5713%" y="693" width="6.7651%" height="15" fill="rgb(236,25,46)" fg:x="63766" fg:w="7905"/><text x="54.8213%" y="703.50">rmp_serde..</text></g><g><title>rmp_serde::encode::write (7,905 samples, 6.77%)</title><rect x="54.5713%" y="677" width="6.7651%" height="15" fill="rgb(217,52,54)" fg:x="63766" fg:w="7905"/><text x="54.8213%" y="687.50">rmp_serde..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7,905 samples, 6.77%)</title><rect x="54.5713%" y="661" width="6.7651%" height="15" fill="rgb(222,29,26)" fg:x="63766" fg:w="7905"/><text x="54.8213%" y="671.50">serde::se..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (7,905 samples, 6.77%)</title><rect x="54.5713%" y="645" width="6.7651%" height="15" fill="rgb(216,177,29)" fg:x="63766" fg:w="7905"/><text x="54.8213%" y="655.50">tremor_va..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (5,923 samples, 5.07%)</title><rect x="56.2675%" y="629" width="5.0689%" height="15" fill="rgb(247,136,51)" fg:x="65748" fg:w="5923"/><text x="56.5175%" y="639.50">serde:..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeMap&gt;::serialize_value (3,873 samples, 3.31%)</title><rect x="58.0219%" y="613" width="3.3145%" height="15" fill="rgb(231,47,47)" fg:x="67798" fg:w="3873"/><text x="58.2719%" y="623.50">&lt;rm..</text></g><g><title>&lt;rmp_serde::encode::MaybeUnknownLengthCompound&lt;W,C&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3,873 samples, 3.31%)</title><rect x="58.0219%" y="597" width="3.3145%" height="15" fill="rgb(211,192,36)" fg:x="67798" fg:w="3873"/><text x="58.2719%" y="607.50">&lt;rm..</text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (3,791 samples, 3.24%)</title><rect x="58.0921%" y="581" width="3.2444%" height="15" fill="rgb(229,156,32)" fg:x="67880" fg:w="3791"/><text x="58.3421%" y="591.50">tre..</text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="61.3595%" y="693" width="0.0145%" height="15" fill="rgb(248,213,20)" fg:x="71698" fg:w="17"/><text x="61.6095%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="61.3595%" y="677" width="0.0145%" height="15" fill="rgb(217,64,7)" fg:x="71698" fg:w="17"/><text x="61.6095%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="61.3595%" y="661" width="0.0145%" height="15" fill="rgb(232,142,8)" fg:x="71698" fg:w="17"/><text x="61.6095%" y="671.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="61.3604%" y="645" width="0.0137%" height="15" fill="rgb(224,92,44)" fg:x="71699" fg:w="16"/><text x="61.6104%" y="655.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="61.3604%" y="629" width="0.0137%" height="15" fill="rgb(214,169,17)" fg:x="71699" fg:w="16"/><text x="61.6104%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="61.3604%" y="613" width="0.0137%" height="15" fill="rgb(210,59,37)" fg:x="71699" fg:w="16"/><text x="61.6104%" y="623.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="61.3604%" y="597" width="0.0137%" height="15" fill="rgb(214,116,48)" fg:x="71699" fg:w="16"/><text x="61.6104%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (23 samples, 0.02%)</title><rect x="61.3886%" y="677" width="0.0197%" height="15" fill="rgb(244,191,6)" fg:x="71732" fg:w="23"/><text x="61.6386%" y="687.50"></text></g><g><title>core::time::Duration::as_nanos (12 samples, 0.01%)</title><rect x="61.4083%" y="677" width="0.0103%" height="15" fill="rgb(241,50,52)" fg:x="71755" fg:w="12"/><text x="61.6583%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (54 samples, 0.05%)</title><rect x="61.4186%" y="661" width="0.0462%" height="15" fill="rgb(236,75,39)" fg:x="71767" fg:w="54"/><text x="61.6686%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (26 samples, 0.02%)</title><rect x="61.4802%" y="629" width="0.0223%" height="15" fill="rgb(236,99,0)" fg:x="71839" fg:w="26"/><text x="61.7302%" y="639.50"></text></g><g><title>core::cmp::PartialOrd::ge (26 samples, 0.02%)</title><rect x="61.4802%" y="613" width="0.0223%" height="15" fill="rgb(207,202,15)" fg:x="71839" fg:w="26"/><text x="61.7302%" y="623.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="61.4811%" y="597" width="0.0214%" height="15" fill="rgb(233,207,14)" fg:x="71840" fg:w="25"/><text x="61.7311%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (108 samples, 0.09%)</title><rect x="61.4186%" y="677" width="0.0924%" height="15" fill="rgb(226,27,51)" fg:x="71767" fg:w="108"/><text x="61.6686%" y="687.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (54 samples, 0.05%)</title><rect x="61.4648%" y="661" width="0.0462%" height="15" fill="rgb(206,104,42)" fg:x="71821" fg:w="54"/><text x="61.7148%" y="671.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (54 samples, 0.05%)</title><rect x="61.4648%" y="645" width="0.0462%" height="15" fill="rgb(212,225,4)" fg:x="71821" fg:w="54"/><text x="61.7148%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,869 samples, 10.16%)</title><rect x="51.5486%" y="1077" width="10.1576%" height="15" fill="rgb(233,96,42)" fg:x="60234" fg:w="11869"/><text x="51.7986%" y="1087.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,337 samples, 7.13%)</title><rect x="54.5713%" y="1061" width="7.1348%" height="15" fill="rgb(229,21,32)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="1071.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,337 samples, 7.13%)</title><rect x="54.5713%" y="1045" width="7.1348%" height="15" fill="rgb(226,216,24)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="1055.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,337 samples, 7.13%)</title><rect x="54.5713%" y="1029" width="7.1348%" height="15" fill="rgb(221,163,17)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="1039.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,337 samples, 7.13%)</title><rect x="54.5713%" y="1013" width="7.1348%" height="15" fill="rgb(216,216,42)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="1023.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,337 samples, 7.13%)</title><rect x="54.5713%" y="997" width="7.1348%" height="15" fill="rgb(240,118,7)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="1007.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,337 samples, 7.13%)</title><rect x="54.5713%" y="981" width="7.1348%" height="15" fill="rgb(221,67,37)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="991.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,337 samples, 7.13%)</title><rect x="54.5713%" y="965" width="7.1348%" height="15" fill="rgb(241,32,44)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="975.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,337 samples, 7.13%)</title><rect x="54.5713%" y="949" width="7.1348%" height="15" fill="rgb(235,204,43)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="959.50">std::panic..</text></g><g><title>std::panicking::try (8,337 samples, 7.13%)</title><rect x="54.5713%" y="933" width="7.1348%" height="15" fill="rgb(213,116,10)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="943.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,337 samples, 7.13%)</title><rect x="54.5713%" y="917" width="7.1348%" height="15" fill="rgb(239,15,48)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="927.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,337 samples, 7.13%)</title><rect x="54.5713%" y="901" width="7.1348%" height="15" fill="rgb(207,123,36)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="911.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,337 samples, 7.13%)</title><rect x="54.5713%" y="885" width="7.1348%" height="15" fill="rgb(209,103,30)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="895.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,337 samples, 7.13%)</title><rect x="54.5713%" y="869" width="7.1348%" height="15" fill="rgb(238,100,19)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="879.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,337 samples, 7.13%)</title><rect x="54.5713%" y="853" width="7.1348%" height="15" fill="rgb(244,30,14)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="863.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,337 samples, 7.13%)</title><rect x="54.5713%" y="837" width="7.1348%" height="15" fill="rgb(249,174,6)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="847.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,337 samples, 7.13%)</title><rect x="54.5713%" y="821" width="7.1348%" height="15" fill="rgb(235,213,41)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="831.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,337 samples, 7.13%)</title><rect x="54.5713%" y="805" width="7.1348%" height="15" fill="rgb(213,118,6)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="815.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (8,337 samples, 7.13%)</title><rect x="54.5713%" y="789" width="7.1348%" height="15" fill="rgb(235,44,51)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="799.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (8,337 samples, 7.13%)</title><rect x="54.5713%" y="773" width="7.1348%" height="15" fill="rgb(217,9,53)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="783.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (8,337 samples, 7.13%)</title><rect x="54.5713%" y="757" width="7.1348%" height="15" fill="rgb(237,172,34)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="767.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (8,337 samples, 7.13%)</title><rect x="54.5713%" y="741" width="7.1348%" height="15" fill="rgb(206,206,11)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="751.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (8,337 samples, 7.13%)</title><rect x="54.5713%" y="725" width="7.1348%" height="15" fill="rgb(214,149,29)" fg:x="63766" fg:w="8337"/><text x="54.8213%" y="735.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (432 samples, 0.37%)</title><rect x="61.3364%" y="709" width="0.3697%" height="15" fill="rgb(208,123,3)" fg:x="71671" fg:w="432"/><text x="61.5864%" y="719.50"></text></g><g><title>tremor_common::time::nanotime (381 samples, 0.33%)</title><rect x="61.3801%" y="693" width="0.3261%" height="15" fill="rgb(229,126,4)" fg:x="71722" fg:w="381"/><text x="61.6301%" y="703.50"></text></g><g><title>std::time::SystemTime::now (228 samples, 0.20%)</title><rect x="61.5110%" y="677" width="0.1951%" height="15" fill="rgb(222,92,36)" fg:x="71875" fg:w="228"/><text x="61.7610%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (228 samples, 0.20%)</title><rect x="61.5110%" y="661" width="0.1951%" height="15" fill="rgb(216,39,41)" fg:x="71875" fg:w="228"/><text x="61.7610%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (228 samples, 0.20%)</title><rect x="61.5110%" y="645" width="0.1951%" height="15" fill="rgb(253,127,28)" fg:x="71875" fg:w="228"/><text x="61.7610%" y="655.50"></text></g><g><title>__clock_gettime (192 samples, 0.16%)</title><rect x="61.5418%" y="629" width="0.1643%" height="15" fill="rgb(249,152,51)" fg:x="71911" fg:w="192"/><text x="61.7918%" y="639.50"></text></g><g><title>__vdso_clock_gettime (182 samples, 0.16%)</title><rect x="61.5504%" y="613" width="0.1558%" height="15" fill="rgb(209,123,42)" fg:x="71921" fg:w="182"/><text x="61.8004%" y="623.50"></text></g><g><title>[[vdso]] (161 samples, 0.14%)</title><rect x="61.5683%" y="597" width="0.1378%" height="15" fill="rgb(241,118,22)" fg:x="71942" fg:w="161"/><text x="61.8183%" y="607.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (637 samples, 0.55%)</title><rect x="61.7121%" y="885" width="0.5451%" height="15" fill="rgb(208,25,7)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="895.50"></text></g><g><title>serde::de::MapAccess::next_key (637 samples, 0.55%)</title><rect x="61.7121%" y="869" width="0.5451%" height="15" fill="rgb(243,144,39)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="879.50"></text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_key_seed (637 samples, 0.55%)</title><rect x="61.7121%" y="853" width="0.5451%" height="15" fill="rgb(250,50,5)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (637 samples, 0.55%)</title><rect x="61.7121%" y="837" width="0.5451%" height="15" fill="rgb(207,67,11)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="847.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (637 samples, 0.55%)</title><rect x="61.7121%" y="821" width="0.5451%" height="15" fill="rgb(245,204,40)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="831.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_str (637 samples, 0.55%)</title><rect x="61.7121%" y="805" width="0.5451%" height="15" fill="rgb(238,228,24)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="815.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (637 samples, 0.55%)</title><rect x="61.7121%" y="789" width="0.5451%" height="15" fill="rgb(217,116,22)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="799.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (637 samples, 0.55%)</title><rect x="61.7121%" y="773" width="0.5451%" height="15" fill="rgb(234,98,12)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="783.50"></text></g><g><title>core::str::converts::from_utf8 (637 samples, 0.55%)</title><rect x="61.7121%" y="757" width="0.5451%" height="15" fill="rgb(242,170,50)" fg:x="72110" fg:w="637"/><text x="61.9621%" y="767.50"></text></g><g><title>core::str::validations::run_utf8_validation (600 samples, 0.51%)</title><rect x="61.7438%" y="741" width="0.5135%" height="15" fill="rgb(235,7,5)" fg:x="72147" fg:w="600"/><text x="61.9938%" y="751.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_u8 (31 samples, 0.03%)</title><rect x="63.9312%" y="677" width="0.0265%" height="15" fill="rgb(241,114,28)" fg:x="74703" fg:w="31"/><text x="64.1812%" y="687.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (31 samples, 0.03%)</title><rect x="63.9312%" y="661" width="0.0265%" height="15" fill="rgb(246,112,42)" fg:x="74703" fg:w="31"/><text x="64.1812%" y="671.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (16 samples, 0.01%)</title><rect x="63.9860%" y="661" width="0.0137%" height="15" fill="rgb(248,228,14)" fg:x="74767" fg:w="16"/><text x="64.2360%" y="671.50"></text></g><g><title>core::str::converts::from_utf8 (151 samples, 0.13%)</title><rect x="63.9997%" y="661" width="0.1292%" height="15" fill="rgb(208,133,18)" fg:x="74783" fg:w="151"/><text x="64.2497%" y="671.50"></text></g><g><title>core::str::validations::run_utf8_validation (138 samples, 0.12%)</title><rect x="64.0108%" y="645" width="0.1181%" height="15" fill="rgb(207,35,49)" fg:x="74796" fg:w="138"/><text x="64.2608%" y="655.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (232 samples, 0.20%)</title><rect x="63.9578%" y="677" width="0.1985%" height="15" fill="rgb(205,68,36)" fg:x="74734" fg:w="232"/><text x="64.2078%" y="687.50"></text></g><g><title>rmp_serde::decode::read_bin_data (32 samples, 0.03%)</title><rect x="64.1289%" y="661" width="0.0274%" height="15" fill="rgb(245,62,40)" fg:x="74934" fg:w="32"/><text x="64.3789%" y="671.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (32 samples, 0.03%)</title><rect x="64.1289%" y="645" width="0.0274%" height="15" fill="rgb(228,27,24)" fg:x="74934" fg:w="32"/><text x="64.3789%" y="655.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (56 samples, 0.05%)</title><rect x="64.1563%" y="613" width="0.0479%" height="15" fill="rgb(253,19,12)" fg:x="74966" fg:w="56"/><text x="64.4063%" y="623.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (56 samples, 0.05%)</title><rect x="64.1563%" y="597" width="0.0479%" height="15" fill="rgb(232,28,20)" fg:x="74966" fg:w="56"/><text x="64.4063%" y="607.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (56 samples, 0.05%)</title><rect x="64.1563%" y="581" width="0.0479%" height="15" fill="rgb(218,35,51)" fg:x="74966" fg:w="56"/><text x="64.4063%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (56 samples, 0.05%)</title><rect x="64.1563%" y="565" width="0.0479%" height="15" fill="rgb(212,90,40)" fg:x="74966" fg:w="56"/><text x="64.4063%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (98 samples, 0.08%)</title><rect x="64.1563%" y="661" width="0.0839%" height="15" fill="rgb(220,172,12)" fg:x="74966" fg:w="98"/><text x="64.4063%" y="671.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (98 samples, 0.08%)</title><rect x="64.1563%" y="645" width="0.0839%" height="15" fill="rgb(226,159,20)" fg:x="74966" fg:w="98"/><text x="64.4063%" y="655.50"></text></g><g><title>rmp::decode::read_marker (98 samples, 0.08%)</title><rect x="64.1563%" y="629" width="0.0839%" height="15" fill="rgb(234,205,16)" fg:x="74966" fg:w="98"/><text x="64.4063%" y="639.50"></text></g><g><title>rmp::marker::Marker::from_u8 (42 samples, 0.04%)</title><rect x="64.2042%" y="613" width="0.0359%" height="15" fill="rgb(207,9,39)" fg:x="75022" fg:w="42"/><text x="64.4542%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (614 samples, 0.53%)</title><rect x="63.7241%" y="725" width="0.5255%" height="15" fill="rgb(249,143,15)" fg:x="74461" fg:w="614"/><text x="63.9741%" y="735.50"></text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (614 samples, 0.53%)</title><rect x="63.7241%" y="709" width="0.5255%" height="15" fill="rgb(253,133,29)" fg:x="74461" fg:w="614"/><text x="63.9741%" y="719.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (584 samples, 0.50%)</title><rect x="63.7498%" y="693" width="0.4998%" height="15" fill="rgb(221,187,0)" fg:x="74491" fg:w="584"/><text x="63.9998%" y="703.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (109 samples, 0.09%)</title><rect x="64.1563%" y="677" width="0.0933%" height="15" fill="rgb(205,204,26)" fg:x="74966" fg:w="109"/><text x="64.4063%" y="687.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,921 samples, 1.64%)</title><rect x="63.1422%" y="773" width="1.6440%" height="15" fill="rgb(224,68,54)" fg:x="73781" fg:w="1921"/><text x="63.3922%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,921 samples, 1.64%)</title><rect x="63.1422%" y="757" width="1.6440%" height="15" fill="rgb(209,67,4)" fg:x="73781" fg:w="1921"/><text x="63.3922%" y="767.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,921 samples, 1.64%)</title><rect x="63.1422%" y="741" width="1.6440%" height="15" fill="rgb(228,229,18)" fg:x="73781" fg:w="1921"/><text x="63.3922%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (627 samples, 0.54%)</title><rect x="64.2496%" y="725" width="0.5366%" height="15" fill="rgb(231,89,13)" fg:x="75075" fg:w="627"/><text x="64.4996%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (822 samples, 0.70%)</title><rect x="64.7862%" y="773" width="0.7035%" height="15" fill="rgb(210,182,18)" fg:x="75702" fg:w="822"/><text x="65.0362%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (30 samples, 0.03%)</title><rect x="65.4896%" y="757" width="0.0257%" height="15" fill="rgb(240,105,2)" fg:x="76524" fg:w="30"/><text x="65.7396%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::push (725 samples, 0.62%)</title><rect x="65.4896%" y="773" width="0.6205%" height="15" fill="rgb(207,170,50)" fg:x="76524" fg:w="725"/><text x="65.7396%" y="783.50"></text></g><g><title>core::ptr::write (695 samples, 0.59%)</title><rect x="65.5153%" y="757" width="0.5948%" height="15" fill="rgb(232,133,24)" fg:x="76554" fg:w="695"/><text x="65.7653%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (334 samples, 0.29%)</title><rect x="66.1709%" y="597" width="0.2858%" height="15" fill="rgb(235,166,27)" fg:x="77320" fg:w="334"/><text x="66.4209%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (400 samples, 0.34%)</title><rect x="66.1178%" y="693" width="0.3423%" height="15" fill="rgb(209,19,13)" fg:x="77258" fg:w="400"/><text x="66.3678%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (400 samples, 0.34%)</title><rect x="66.1178%" y="677" width="0.3423%" height="15" fill="rgb(226,79,39)" fg:x="77258" fg:w="400"/><text x="66.3678%" y="687.50"></text></g><g><title>alloc::alloc::alloc (397 samples, 0.34%)</title><rect x="66.1204%" y="661" width="0.3398%" height="15" fill="rgb(222,163,10)" fg:x="77261" fg:w="397"/><text x="66.3704%" y="671.50"></text></g><g><title>__rg_alloc (397 samples, 0.34%)</title><rect x="66.1204%" y="645" width="0.3398%" height="15" fill="rgb(214,44,19)" fg:x="77261" fg:w="397"/><text x="66.3704%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (397 samples, 0.34%)</title><rect x="66.1204%" y="629" width="0.3398%" height="15" fill="rgb(210,217,13)" fg:x="77261" fg:w="397"/><text x="66.3704%" y="639.50"></text></g><g><title>sn_rust_alloc (395 samples, 0.34%)</title><rect x="66.1221%" y="613" width="0.3380%" height="15" fill="rgb(237,61,54)" fg:x="77263" fg:w="395"/><text x="66.3721%" y="623.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_seq (4,636 samples, 3.97%)</title><rect x="62.5003%" y="789" width="3.9675%" height="15" fill="rgb(226,184,24)" fg:x="73031" fg:w="4636"/><text x="62.7503%" y="799.50">&lt;tre..</text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (418 samples, 0.36%)</title><rect x="66.1101%" y="773" width="0.3577%" height="15" fill="rgb(223,226,4)" fg:x="77249" fg:w="418"/><text x="66.3601%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (409 samples, 0.35%)</title><rect x="66.1178%" y="757" width="0.3500%" height="15" fill="rgb(210,26,41)" fg:x="77258" fg:w="409"/><text x="66.3678%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (409 samples, 0.35%)</title><rect x="66.1178%" y="741" width="0.3500%" height="15" fill="rgb(220,221,6)" fg:x="77258" fg:w="409"/><text x="66.3678%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (409 samples, 0.35%)</title><rect x="66.1178%" y="725" width="0.3500%" height="15" fill="rgb(225,89,49)" fg:x="77258" fg:w="409"/><text x="66.3678%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (409 samples, 0.35%)</title><rect x="66.1178%" y="709" width="0.3500%" height="15" fill="rgb(218,70,45)" fg:x="77258" fg:w="409"/><text x="66.3678%" y="719.50"></text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_borrowed_str (24 samples, 0.02%)</title><rect x="66.5474%" y="773" width="0.0205%" height="15" fill="rgb(238,166,21)" fg:x="77760" fg:w="24"/><text x="66.7974%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (16 samples, 0.01%)</title><rect x="67.0737%" y="741" width="0.0137%" height="15" fill="rgb(224,141,44)" fg:x="78375" fg:w="16"/><text x="67.3237%" y="751.50"></text></g><g><title>core::str::converts::from_utf8 (622 samples, 0.53%)</title><rect x="66.5680%" y="773" width="0.5323%" height="15" fill="rgb(230,12,49)" fg:x="77784" fg:w="622"/><text x="66.8180%" y="783.50"></text></g><g><title>core::str::validations::run_utf8_validation (554 samples, 0.47%)</title><rect x="66.6262%" y="757" width="0.4741%" height="15" fill="rgb(212,174,12)" fg:x="77852" fg:w="554"/><text x="66.8762%" y="767.50"></text></g><g><title>core::str::validations::contains_nonascii (15 samples, 0.01%)</title><rect x="67.0874%" y="741" width="0.0128%" height="15" fill="rgb(246,67,9)" fg:x="78391" fg:w="15"/><text x="67.3374%" y="751.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (794 samples, 0.68%)</title><rect x="66.4695%" y="789" width="0.6795%" height="15" fill="rgb(239,35,23)" fg:x="77669" fg:w="794"/><text x="66.7195%" y="799.50"></text></g><g><title>rmp_serde::decode::read_bin_data (57 samples, 0.05%)</title><rect x="67.1003%" y="773" width="0.0488%" height="15" fill="rgb(211,167,0)" fg:x="78406" fg:w="57"/><text x="67.3503%" y="783.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (54 samples, 0.05%)</title><rect x="67.1028%" y="757" width="0.0462%" height="15" fill="rgb(225,119,45)" fg:x="78409" fg:w="54"/><text x="67.3528%" y="767.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (67 samples, 0.06%)</title><rect x="67.1499%" y="725" width="0.0573%" height="15" fill="rgb(210,162,6)" fg:x="78464" fg:w="67"/><text x="67.3999%" y="735.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (67 samples, 0.06%)</title><rect x="67.1499%" y="709" width="0.0573%" height="15" fill="rgb(208,118,35)" fg:x="78464" fg:w="67"/><text x="67.3999%" y="719.50"></text></g><g><title>&lt;rmp_serde::decode::ReadRefReader&lt;T&gt; as std::io::Read&gt;::read_exact (67 samples, 0.06%)</title><rect x="67.1499%" y="693" width="0.0573%" height="15" fill="rgb(239,4,53)" fg:x="78464" fg:w="67"/><text x="67.3999%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (67 samples, 0.06%)</title><rect x="67.1499%" y="677" width="0.0573%" height="15" fill="rgb(213,130,21)" fg:x="78464" fg:w="67"/><text x="67.3999%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (174 samples, 0.15%)</title><rect x="67.1491%" y="773" width="0.1489%" height="15" fill="rgb(235,148,0)" fg:x="78463" fg:w="174"/><text x="67.3991%" y="783.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (173 samples, 0.15%)</title><rect x="67.1499%" y="757" width="0.1481%" height="15" fill="rgb(244,224,18)" fg:x="78464" fg:w="173"/><text x="67.3999%" y="767.50"></text></g><g><title>rmp::decode::read_marker (173 samples, 0.15%)</title><rect x="67.1499%" y="741" width="0.1481%" height="15" fill="rgb(211,214,4)" fg:x="78464" fg:w="173"/><text x="67.3999%" y="751.50"></text></g><g><title>rmp::marker::Marker::from_u8 (106 samples, 0.09%)</title><rect x="67.2073%" y="725" width="0.0907%" height="15" fill="rgb(206,119,25)" fg:x="78531" fg:w="106"/><text x="67.4573%" y="735.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (212 samples, 0.18%)</title><rect x="67.1491%" y="789" width="0.1814%" height="15" fill="rgb(243,93,47)" fg:x="78463" fg:w="212"/><text x="67.3991%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (38 samples, 0.03%)</title><rect x="67.2980%" y="773" width="0.0325%" height="15" fill="rgb(224,194,6)" fg:x="78637" fg:w="38"/><text x="67.5480%" y="783.50"></text></g><g><title>core::mem::replace (38 samples, 0.03%)</title><rect x="67.2980%" y="757" width="0.0325%" height="15" fill="rgb(243,229,6)" fg:x="78637" fg:w="38"/><text x="67.5480%" y="767.50"></text></g><g><title>core::ptr::write (34 samples, 0.03%)</title><rect x="67.3014%" y="741" width="0.0291%" height="15" fill="rgb(207,23,50)" fg:x="78641" fg:w="34"/><text x="67.5514%" y="751.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (5,946 samples, 5.09%)</title><rect x="62.2573%" y="885" width="5.0886%" height="15" fill="rgb(253,192,32)" fg:x="72747" fg:w="5946"/><text x="62.5073%" y="895.50">&lt;&amp;mut ..</text></g><g><title>serde::de::MapAccess::next_value (5,946 samples, 5.09%)</title><rect x="62.2573%" y="869" width="5.0886%" height="15" fill="rgb(213,21,6)" fg:x="72747" fg:w="5946"/><text x="62.5073%" y="879.50">serde:..</text></g><g><title>&lt;rmp_serde::decode::MapAccess&lt;R,C&gt; as serde::de::MapAccess&gt;::next_value_seed (5,946 samples, 5.09%)</title><rect x="62.2573%" y="853" width="5.0886%" height="15" fill="rgb(243,151,13)" fg:x="72747" fg:w="5946"/><text x="62.5073%" y="863.50">&lt;rmp_s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5,946 samples, 5.09%)</title><rect x="62.2573%" y="837" width="5.0886%" height="15" fill="rgb(233,165,41)" fg:x="72747" fg:w="5946"/><text x="62.5073%" y="847.50">&lt;core:..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (5,946 samples, 5.09%)</title><rect x="62.2573%" y="821" width="5.0886%" height="15" fill="rgb(246,176,45)" fg:x="72747" fg:w="5946"/><text x="62.5073%" y="831.50">tremor..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (5,946 samples, 5.09%)</title><rect x="62.2573%" y="805" width="5.0886%" height="15" fill="rgb(217,170,52)" fg:x="72747" fg:w="5946"/><text x="62.5073%" y="815.50">&lt;&amp;mut ..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (41 samples, 0.04%)</title><rect x="68.3181%" y="805" width="0.0351%" height="15" fill="rgb(214,203,54)" fg:x="79829" fg:w="41"/><text x="68.5681%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (40 samples, 0.03%)</title><rect x="68.3189%" y="789" width="0.0342%" height="15" fill="rgb(248,215,49)" fg:x="79830" fg:w="40"/><text x="68.5689%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (40 samples, 0.03%)</title><rect x="68.3189%" y="773" width="0.0342%" height="15" fill="rgb(208,46,10)" fg:x="79830" fg:w="40"/><text x="68.5689%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.03%)</title><rect x="68.9223%" y="725" width="0.0282%" height="15" fill="rgb(254,5,31)" fg:x="80535" fg:w="33"/><text x="69.1723%" y="735.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (28 samples, 0.02%)</title><rect x="69.0395%" y="645" width="0.0240%" height="15" fill="rgb(222,104,33)" fg:x="80672" fg:w="28"/><text x="69.2895%" y="655.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (28 samples, 0.02%)</title><rect x="69.0395%" y="629" width="0.0240%" height="15" fill="rgb(248,49,16)" fg:x="80672" fg:w="28"/><text x="69.2895%" y="639.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (28 samples, 0.02%)</title><rect x="69.0395%" y="613" width="0.0240%" height="15" fill="rgb(232,198,41)" fg:x="80672" fg:w="28"/><text x="69.2895%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (28 samples, 0.02%)</title><rect x="69.0395%" y="597" width="0.0240%" height="15" fill="rgb(214,125,3)" fg:x="80672" fg:w="28"/><text x="69.2895%" y="607.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (28 samples, 0.02%)</title><rect x="69.0395%" y="581" width="0.0240%" height="15" fill="rgb(229,220,28)" fg:x="80672" fg:w="28"/><text x="69.2895%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="69.0635%" y="645" width="0.0334%" height="15" fill="rgb(222,64,37)" fg:x="80700" fg:w="39"/><text x="69.3135%" y="655.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (13 samples, 0.01%)</title><rect x="69.0857%" y="629" width="0.0111%" height="15" fill="rgb(249,184,13)" fg:x="80726" fg:w="13"/><text x="69.3357%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.01%)</title><rect x="69.0857%" y="613" width="0.0111%" height="15" fill="rgb(252,176,6)" fg:x="80726" fg:w="13"/><text x="69.3357%" y="623.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (27 samples, 0.02%)</title><rect x="69.0969%" y="629" width="0.0231%" height="15" fill="rgb(228,153,7)" fg:x="80739" fg:w="27"/><text x="69.3469%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.02%)</title><rect x="69.1200%" y="629" width="0.0163%" height="15" fill="rgb(242,193,5)" fg:x="80766" fg:w="19"/><text x="69.3700%" y="639.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (349 samples, 0.30%)</title><rect x="68.9779%" y="693" width="0.2987%" height="15" fill="rgb(232,140,9)" fg:x="80600" fg:w="349"/><text x="69.2279%" y="703.50"></text></g><g><title>fxhash::write (349 samples, 0.30%)</title><rect x="68.9779%" y="677" width="0.2987%" height="15" fill="rgb(213,222,16)" fg:x="80600" fg:w="349"/><text x="69.2279%" y="687.50"></text></g><g><title>fxhash::write64 (349 samples, 0.30%)</title><rect x="68.9779%" y="661" width="0.2987%" height="15" fill="rgb(222,75,50)" fg:x="80600" fg:w="349"/><text x="69.2279%" y="671.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (210 samples, 0.18%)</title><rect x="69.0969%" y="645" width="0.1797%" height="15" fill="rgb(205,180,2)" fg:x="80739" fg:w="210"/><text x="69.3469%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (164 samples, 0.14%)</title><rect x="69.1362%" y="629" width="0.1404%" height="15" fill="rgb(216,34,7)" fg:x="80785" fg:w="164"/><text x="69.3862%" y="639.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (26 samples, 0.02%)</title><rect x="69.3314%" y="661" width="0.0223%" height="15" fill="rgb(253,16,32)" fg:x="81013" fg:w="26"/><text x="69.5814%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (16 samples, 0.01%)</title><rect x="69.3536%" y="661" width="0.0137%" height="15" fill="rgb(208,97,28)" fg:x="81039" fg:w="16"/><text x="69.6036%" y="671.50"></text></g><g><title>hashbrown::map::make_insert_hash (694 samples, 0.59%)</title><rect x="68.8658%" y="773" width="0.5939%" height="15" fill="rgb(225,92,11)" fg:x="80469" fg:w="694"/><text x="69.1158%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (628 samples, 0.54%)</title><rect x="68.9223%" y="757" width="0.5374%" height="15" fill="rgb(243,38,12)" fg:x="80535" fg:w="628"/><text x="69.1723%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (628 samples, 0.54%)</title><rect x="68.9223%" y="741" width="0.5374%" height="15" fill="rgb(208,139,16)" fg:x="80535" fg:w="628"/><text x="69.1723%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (595 samples, 0.51%)</title><rect x="68.9505%" y="725" width="0.5092%" height="15" fill="rgb(227,24,9)" fg:x="80568" fg:w="595"/><text x="69.2005%" y="735.50"></text></g><g><title>core::hash::Hasher::write_str (563 samples, 0.48%)</title><rect x="68.9779%" y="709" width="0.4818%" height="15" fill="rgb(206,62,11)" fg:x="80600" fg:w="563"/><text x="69.2279%" y="719.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (214 samples, 0.18%)</title><rect x="69.2766%" y="693" width="0.1831%" height="15" fill="rgb(228,134,27)" fg:x="80949" fg:w="214"/><text x="69.5266%" y="703.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (214 samples, 0.18%)</title><rect x="69.2766%" y="677" width="0.1831%" height="15" fill="rgb(205,55,33)" fg:x="80949" fg:w="214"/><text x="69.5266%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (108 samples, 0.09%)</title><rect x="69.3673%" y="661" width="0.0924%" height="15" fill="rgb(243,75,43)" fg:x="81055" fg:w="108"/><text x="69.6173%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="69.4683%" y="725" width="0.0111%" height="15" fill="rgb(223,27,42)" fg:x="81173" fg:w="13"/><text x="69.7183%" y="735.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (13 samples, 0.01%)</title><rect x="69.4683%" y="709" width="0.0111%" height="15" fill="rgb(232,189,33)" fg:x="81173" fg:w="13"/><text x="69.7183%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (28 samples, 0.02%)</title><rect x="69.4794%" y="725" width="0.0240%" height="15" fill="rgb(210,9,39)" fg:x="81186" fg:w="28"/><text x="69.7294%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (14 samples, 0.01%)</title><rect x="69.4914%" y="709" width="0.0120%" height="15" fill="rgb(242,85,26)" fg:x="81200" fg:w="14"/><text x="69.7414%" y="719.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (14 samples, 0.01%)</title><rect x="69.4914%" y="693" width="0.0120%" height="15" fill="rgb(248,44,4)" fg:x="81200" fg:w="14"/><text x="69.7414%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (14 samples, 0.01%)</title><rect x="69.4914%" y="677" width="0.0120%" height="15" fill="rgb(250,96,46)" fg:x="81200" fg:w="14"/><text x="69.7414%" y="687.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (14 samples, 0.01%)</title><rect x="69.4914%" y="661" width="0.0120%" height="15" fill="rgb(229,116,26)" fg:x="81200" fg:w="14"/><text x="69.7414%" y="671.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (14 samples, 0.01%)</title><rect x="69.4914%" y="645" width="0.0120%" height="15" fill="rgb(246,94,34)" fg:x="81200" fg:w="14"/><text x="69.7414%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (166 samples, 0.14%)</title><rect x="69.5034%" y="725" width="0.1421%" height="15" fill="rgb(251,73,21)" fg:x="81214" fg:w="166"/><text x="69.7534%" y="735.50"></text></g><g><title>hashbrown::raw::inner::h2 (30 samples, 0.03%)</title><rect x="69.6454%" y="725" width="0.0257%" height="15" fill="rgb(254,121,25)" fg:x="81380" fg:w="30"/><text x="69.8954%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (64 samples, 0.05%)</title><rect x="69.6711%" y="725" width="0.0548%" height="15" fill="rgb(215,161,49)" fg:x="81410" fg:w="64"/><text x="69.9211%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (64 samples, 0.05%)</title><rect x="69.6711%" y="709" width="0.0548%" height="15" fill="rgb(221,43,13)" fg:x="81410" fg:w="64"/><text x="69.9211%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.05%)</title><rect x="69.6711%" y="693" width="0.0548%" height="15" fill="rgb(249,5,37)" fg:x="81410" fg:w="64"/><text x="69.9211%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (143 samples, 0.12%)</title><rect x="69.7259%" y="725" width="0.1224%" height="15" fill="rgb(226,25,44)" fg:x="81474" fg:w="143"/><text x="69.9759%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (143 samples, 0.12%)</title><rect x="69.7259%" y="709" width="0.1224%" height="15" fill="rgb(238,189,16)" fg:x="81474" fg:w="143"/><text x="69.9759%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (548 samples, 0.47%)</title><rect x="69.4597%" y="773" width="0.4690%" height="15" fill="rgb(251,186,8)" fg:x="81163" fg:w="548"/><text x="69.7097%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (548 samples, 0.47%)</title><rect x="69.4597%" y="757" width="0.4690%" height="15" fill="rgb(254,34,31)" fg:x="81163" fg:w="548"/><text x="69.7097%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (548 samples, 0.47%)</title><rect x="69.4597%" y="741" width="0.4690%" height="15" fill="rgb(225,215,27)" fg:x="81163" fg:w="548"/><text x="69.7097%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (94 samples, 0.08%)</title><rect x="69.8483%" y="725" width="0.0804%" height="15" fill="rgb(221,192,48)" fg:x="81617" fg:w="94"/><text x="70.0983%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (94 samples, 0.08%)</title><rect x="69.8483%" y="709" width="0.0804%" height="15" fill="rgb(219,137,20)" fg:x="81617" fg:w="94"/><text x="70.0983%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (94 samples, 0.08%)</title><rect x="69.8483%" y="693" width="0.0804%" height="15" fill="rgb(219,84,11)" fg:x="81617" fg:w="94"/><text x="70.0983%" y="703.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (316 samples, 0.27%)</title><rect x="69.9749%" y="757" width="0.2704%" height="15" fill="rgb(224,10,23)" fg:x="81765" fg:w="316"/><text x="70.2249%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (316 samples, 0.27%)</title><rect x="69.9749%" y="741" width="0.2704%" height="15" fill="rgb(248,22,39)" fg:x="81765" fg:w="316"/><text x="70.2249%" y="751.50"></text></g><g><title>core::ptr::write (316 samples, 0.27%)</title><rect x="69.9749%" y="725" width="0.2704%" height="15" fill="rgb(212,154,20)" fg:x="81765" fg:w="316"/><text x="70.2249%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (222 samples, 0.19%)</title><rect x="70.2548%" y="757" width="0.1900%" height="15" fill="rgb(236,199,50)" fg:x="82092" fg:w="222"/><text x="70.5048%" y="767.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (26 samples, 0.02%)</title><rect x="70.4225%" y="741" width="0.0223%" height="15" fill="rgb(211,9,17)" fg:x="82288" fg:w="26"/><text x="70.6725%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert (3,752 samples, 3.21%)</title><rect x="67.3459%" y="885" width="3.2110%" height="15" fill="rgb(243,216,36)" fg:x="78693" fg:w="3752"/><text x="67.5959%" y="895.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (3,752 samples, 3.21%)</title><rect x="67.3459%" y="869" width="3.2110%" height="15" fill="rgb(250,2,10)" fg:x="78693" fg:w="3752"/><text x="67.5959%" y="879.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (3,357 samples, 2.87%)</title><rect x="67.6839%" y="853" width="2.8729%" height="15" fill="rgb(226,50,48)" fg:x="79088" fg:w="3357"/><text x="67.9339%" y="863.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (3,356 samples, 2.87%)</title><rect x="67.6848%" y="837" width="2.8721%" height="15" fill="rgb(243,81,16)" fg:x="79089" fg:w="3356"/><text x="67.9348%" y="847.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (3,138 samples, 2.69%)</title><rect x="67.8714%" y="821" width="2.6855%" height="15" fill="rgb(250,14,2)" fg:x="79307" fg:w="3138"/><text x="68.1214%" y="831.50">ab..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,575 samples, 2.20%)</title><rect x="68.3532%" y="805" width="2.2037%" height="15" fill="rgb(233,135,29)" fg:x="79870" fg:w="2575"/><text x="68.6032%" y="815.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,147 samples, 1.84%)</title><rect x="68.7195%" y="789" width="1.8374%" height="15" fill="rgb(224,64,43)" fg:x="80298" fg:w="2147"/><text x="68.9695%" y="799.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (734 samples, 0.63%)</title><rect x="69.9287%" y="773" width="0.6282%" height="15" fill="rgb(238,84,13)" fg:x="81711" fg:w="734"/><text x="70.1787%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (131 samples, 0.11%)</title><rect x="70.4448%" y="757" width="0.1121%" height="15" fill="rgb(253,48,26)" fg:x="82314" fg:w="131"/><text x="70.6948%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (48 samples, 0.04%)</title><rect x="70.5158%" y="741" width="0.0411%" height="15" fill="rgb(205,223,31)" fg:x="82397" fg:w="48"/><text x="70.7658%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (48 samples, 0.04%)</title><rect x="70.5158%" y="725" width="0.0411%" height="15" fill="rgb(221,41,32)" fg:x="82397" fg:w="48"/><text x="70.7658%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (116 samples, 0.10%)</title><rect x="70.5800%" y="661" width="0.0993%" height="15" fill="rgb(213,158,31)" fg:x="82472" fg:w="116"/><text x="70.8300%" y="671.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (138 samples, 0.12%)</title><rect x="70.5637%" y="821" width="0.1181%" height="15" fill="rgb(245,126,43)" fg:x="82453" fg:w="138"/><text x="70.8137%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (138 samples, 0.12%)</title><rect x="70.5637%" y="805" width="0.1181%" height="15" fill="rgb(227,7,22)" fg:x="82453" fg:w="138"/><text x="70.8137%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (133 samples, 0.11%)</title><rect x="70.5680%" y="789" width="0.1138%" height="15" fill="rgb(252,90,44)" fg:x="82458" fg:w="133"/><text x="70.8180%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (130 samples, 0.11%)</title><rect x="70.5706%" y="773" width="0.1113%" height="15" fill="rgb(253,91,0)" fg:x="82461" fg:w="130"/><text x="70.8206%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (130 samples, 0.11%)</title><rect x="70.5706%" y="757" width="0.1113%" height="15" fill="rgb(252,175,49)" fg:x="82461" fg:w="130"/><text x="70.8206%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (130 samples, 0.11%)</title><rect x="70.5706%" y="741" width="0.1113%" height="15" fill="rgb(246,150,1)" fg:x="82461" fg:w="130"/><text x="70.8206%" y="751.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.11%)</title><rect x="70.5706%" y="725" width="0.1113%" height="15" fill="rgb(241,192,25)" fg:x="82461" fg:w="130"/><text x="70.8206%" y="735.50"></text></g><g><title>__rg_alloc (130 samples, 0.11%)</title><rect x="70.5706%" y="709" width="0.1113%" height="15" fill="rgb(239,187,11)" fg:x="82461" fg:w="130"/><text x="70.8206%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (130 samples, 0.11%)</title><rect x="70.5706%" y="693" width="0.1113%" height="15" fill="rgb(218,202,51)" fg:x="82461" fg:w="130"/><text x="70.8206%" y="703.50"></text></g><g><title>sn_rust_alloc (129 samples, 0.11%)</title><rect x="70.5714%" y="677" width="0.1104%" height="15" fill="rgb(225,176,8)" fg:x="82462" fg:w="129"/><text x="70.8214%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (150 samples, 0.13%)</title><rect x="70.5569%" y="869" width="0.1284%" height="15" fill="rgb(219,122,41)" fg:x="82445" fg:w="150"/><text x="70.8069%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (146 samples, 0.12%)</title><rect x="70.5603%" y="853" width="0.1249%" height="15" fill="rgb(248,140,20)" fg:x="82449" fg:w="146"/><text x="70.8103%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (146 samples, 0.12%)</title><rect x="70.5603%" y="837" width="0.1249%" height="15" fill="rgb(245,41,37)" fg:x="82449" fg:w="146"/><text x="70.8103%" y="847.50"></text></g><g><title>core::mem::swap (260 samples, 0.22%)</title><rect x="70.6998%" y="693" width="0.2225%" height="15" fill="rgb(235,82,39)" fg:x="82612" fg:w="260"/><text x="70.9498%" y="703.50"></text></g><g><title>core::mem::swap_simple (260 samples, 0.22%)</title><rect x="70.6998%" y="677" width="0.2225%" height="15" fill="rgb(230,108,42)" fg:x="82612" fg:w="260"/><text x="70.9498%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (33 samples, 0.03%)</title><rect x="70.9377%" y="661" width="0.0282%" height="15" fill="rgb(215,150,50)" fg:x="82890" fg:w="33"/><text x="71.1877%" y="671.50"></text></g><g><title>core::intrinsics::write_bytes (33 samples, 0.03%)</title><rect x="70.9377%" y="645" width="0.0282%" height="15" fill="rgb(233,212,5)" fg:x="82890" fg:w="33"/><text x="71.1877%" y="655.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="70.9394%" y="629" width="0.0265%" height="15" fill="rgb(245,80,22)" fg:x="82892" fg:w="31"/><text x="71.1894%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,219 samples, 1.04%)</title><rect x="71.0892%" y="549" width="1.0432%" height="15" fill="rgb(238,129,16)" fg:x="83067" fg:w="1219"/><text x="71.3392%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (25 samples, 0.02%)</title><rect x="72.1324%" y="549" width="0.0214%" height="15" fill="rgb(240,19,0)" fg:x="84286" fg:w="25"/><text x="72.3824%" y="559.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,395 samples, 1.19%)</title><rect x="70.9736%" y="645" width="1.1938%" height="15" fill="rgb(232,42,35)" fg:x="82932" fg:w="1395"/><text x="71.2236%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,395 samples, 1.19%)</title><rect x="70.9736%" y="629" width="1.1938%" height="15" fill="rgb(223,130,24)" fg:x="82932" fg:w="1395"/><text x="71.2236%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1,395 samples, 1.19%)</title><rect x="70.9736%" y="613" width="1.1938%" height="15" fill="rgb(237,16,22)" fg:x="82932" fg:w="1395"/><text x="71.2236%" y="623.50"></text></g><g><title>__rg_alloc (1,395 samples, 1.19%)</title><rect x="70.9736%" y="597" width="1.1938%" height="15" fill="rgb(248,192,20)" fg:x="82932" fg:w="1395"/><text x="71.2236%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,395 samples, 1.19%)</title><rect x="70.9736%" y="581" width="1.1938%" height="15" fill="rgb(233,167,2)" fg:x="82932" fg:w="1395"/><text x="71.2236%" y="591.50"></text></g><g><title>sn_rust_alloc (1,395 samples, 1.19%)</title><rect x="70.9736%" y="565" width="1.1938%" height="15" fill="rgb(252,71,44)" fg:x="82932" fg:w="1395"/><text x="71.2236%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="72.1538%" y="549" width="0.0137%" height="15" fill="rgb(238,37,47)" fg:x="84311" fg:w="16"/><text x="72.4038%" y="559.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (16 samples, 0.01%)</title><rect x="72.1538%" y="533" width="0.0137%" height="15" fill="rgb(214,202,54)" fg:x="84311" fg:w="16"/><text x="72.4038%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,405 samples, 1.20%)</title><rect x="70.9659%" y="661" width="1.2024%" height="15" fill="rgb(254,165,40)" fg:x="82923" fg:w="1405"/><text x="71.2159%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,461 samples, 1.25%)</title><rect x="70.9283%" y="693" width="1.2503%" height="15" fill="rgb(246,173,38)" fg:x="82879" fg:w="1461"/><text x="71.1783%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,451 samples, 1.24%)</title><rect x="70.9369%" y="677" width="1.2418%" height="15" fill="rgb(215,3,27)" fg:x="82889" fg:w="1451"/><text x="71.1869%" y="687.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (12 samples, 0.01%)</title><rect x="72.1684%" y="661" width="0.0103%" height="15" fill="rgb(239,169,51)" fg:x="84328" fg:w="12"/><text x="72.4184%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,742 samples, 1.49%)</title><rect x="70.6895%" y="709" width="1.4908%" height="15" fill="rgb(212,5,25)" fg:x="82600" fg:w="1742"/><text x="70.9395%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (12,242 samples, 10.48%)</title><rect x="61.7087%" y="1077" width="10.4768%" height="15" fill="rgb(243,45,17)" fg:x="72106" fg:w="12242"/><text x="61.9587%" y="1087.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,238 samples, 10.47%)</title><rect x="61.7121%" y="1061" width="10.4733%" height="15" fill="rgb(242,97,9)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="1071.50">&lt;core::future::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (12,238 samples, 10.47%)</title><rect x="61.7121%" y="1045" width="10.4733%" height="15" fill="rgb(228,71,31)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="1055.50">tremor_runtime:..</text></g><g><title>tremor_runtime::connectors::source::build_events (12,238 samples, 10.47%)</title><rect x="61.7121%" y="1029" width="10.4733%" height="15" fill="rgb(252,184,16)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="1039.50">tremor_runtime:..</text></g><g><title>tremor_script::srs::EventPayload::try_new (12,238 samples, 10.47%)</title><rect x="61.7121%" y="1013" width="10.4733%" height="15" fill="rgb(236,169,46)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="1023.50">tremor_script::..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (12,238 samples, 10.47%)</title><rect x="61.7121%" y="997" width="10.4733%" height="15" fill="rgb(207,17,47)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="1007.50">tremor_runtime:..</text></g><g><title>&lt;tremor_runtime::codec::msgpack::MsgPack as tremor_runtime::codec::Codec&gt;::decode (12,238 samples, 10.47%)</title><rect x="61.7121%" y="981" width="10.4733%" height="15" fill="rgb(206,201,28)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="991.50">&lt;tremor_runtime..</text></g><g><title>rmp_serde::decode::from_slice (12,238 samples, 10.47%)</title><rect x="61.7121%" y="965" width="10.4733%" height="15" fill="rgb(224,184,23)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="975.50">rmp_serde::deco..</text></g><g><title>rmp_serde::decode::from_read_ref (12,238 samples, 10.47%)</title><rect x="61.7121%" y="949" width="10.4733%" height="15" fill="rgb(208,139,48)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="959.50">rmp_serde::deco..</text></g><g><title>tremor_value::serde::value::de::&lt;impl serde::de::Deserialize for tremor_value::value::Value&gt;::deserialize (12,238 samples, 10.47%)</title><rect x="61.7121%" y="933" width="10.4733%" height="15" fill="rgb(208,130,10)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="943.50">tremor_value::s..</text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (12,238 samples, 10.47%)</title><rect x="61.7121%" y="917" width="10.4733%" height="15" fill="rgb(211,213,45)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="927.50">&lt;&amp;mut rmp_serde..</text></g><g><title>&lt;tremor_value::serde::value::de::ValueVisitor as serde::de::Visitor&gt;::visit_map (12,238 samples, 10.47%)</title><rect x="61.7121%" y="901" width="10.4733%" height="15" fill="rgb(235,100,30)" fg:x="72110" fg:w="12238"/><text x="61.9621%" y="911.50">&lt;tremor_value::..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,903 samples, 1.63%)</title><rect x="70.5569%" y="885" width="1.6286%" height="15" fill="rgb(206,144,31)" fg:x="82445" fg:w="1903"/><text x="70.8069%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,753 samples, 1.50%)</title><rect x="70.6852%" y="869" width="1.5002%" height="15" fill="rgb(224,200,26)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,753 samples, 1.50%)</title><rect x="70.6852%" y="853" width="1.5002%" height="15" fill="rgb(247,104,53)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,753 samples, 1.50%)</title><rect x="70.6852%" y="837" width="1.5002%" height="15" fill="rgb(220,14,17)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,753 samples, 1.50%)</title><rect x="70.6852%" y="821" width="1.5002%" height="15" fill="rgb(230,140,40)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,753 samples, 1.50%)</title><rect x="70.6852%" y="805" width="1.5002%" height="15" fill="rgb(229,2,41)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,753 samples, 1.50%)</title><rect x="70.6852%" y="789" width="1.5002%" height="15" fill="rgb(232,89,16)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,753 samples, 1.50%)</title><rect x="70.6852%" y="773" width="1.5002%" height="15" fill="rgb(247,59,52)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,753 samples, 1.50%)</title><rect x="70.6852%" y="757" width="1.5002%" height="15" fill="rgb(226,110,21)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,753 samples, 1.50%)</title><rect x="70.6852%" y="741" width="1.5002%" height="15" fill="rgb(224,176,43)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,753 samples, 1.50%)</title><rect x="70.6852%" y="725" width="1.5002%" height="15" fill="rgb(221,73,6)" fg:x="82595" fg:w="1753"/><text x="70.9352%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (22 samples, 0.02%)</title><rect x="72.2762%" y="901" width="0.0188%" height="15" fill="rgb(232,78,19)" fg:x="84454" fg:w="22"/><text x="72.5262%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (22 samples, 0.02%)</title><rect x="72.2762%" y="885" width="0.0188%" height="15" fill="rgb(233,112,48)" fg:x="84454" fg:w="22"/><text x="72.5262%" y="895.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="72.2762%" y="933" width="0.0197%" height="15" fill="rgb(243,131,47)" fg:x="84454" fg:w="23"/><text x="72.5262%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (23 samples, 0.02%)</title><rect x="72.2762%" y="917" width="0.0197%" height="15" fill="rgb(226,51,1)" fg:x="84454" fg:w="23"/><text x="72.5262%" y="927.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (73 samples, 0.06%)</title><rect x="72.3224%" y="917" width="0.0625%" height="15" fill="rgb(247,58,7)" fg:x="84508" fg:w="73"/><text x="72.5724%" y="927.50"></text></g><g><title>core::mem::replace (73 samples, 0.06%)</title><rect x="72.3224%" y="901" width="0.0625%" height="15" fill="rgb(209,7,32)" fg:x="84508" fg:w="73"/><text x="72.5724%" y="911.50"></text></g><g><title>core::ptr::read (73 samples, 0.06%)</title><rect x="72.3224%" y="885" width="0.0625%" height="15" fill="rgb(209,39,41)" fg:x="84508" fg:w="73"/><text x="72.5724%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (133 samples, 0.11%)</title><rect x="72.3001%" y="933" width="0.1138%" height="15" fill="rgb(226,182,46)" fg:x="84482" fg:w="133"/><text x="72.5501%" y="943.50"></text></g><g><title>core::mem::drop (34 samples, 0.03%)</title><rect x="72.3849%" y="917" width="0.0291%" height="15" fill="rgb(230,219,10)" fg:x="84581" fg:w="34"/><text x="72.6349%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (34 samples, 0.03%)</title><rect x="72.3849%" y="901" width="0.0291%" height="15" fill="rgb(227,175,30)" fg:x="84581" fg:w="34"/><text x="72.6349%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (141 samples, 0.12%)</title><rect x="72.4225%" y="933" width="0.1207%" height="15" fill="rgb(217,2,50)" fg:x="84625" fg:w="141"/><text x="72.6725%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (131 samples, 0.11%)</title><rect x="72.4311%" y="917" width="0.1121%" height="15" fill="rgb(229,160,0)" fg:x="84635" fg:w="131"/><text x="72.6811%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.11%)</title><rect x="72.4311%" y="901" width="0.1121%" height="15" fill="rgb(207,78,37)" fg:x="84635" fg:w="131"/><text x="72.6811%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (126 samples, 0.11%)</title><rect x="72.4354%" y="885" width="0.1078%" height="15" fill="rgb(225,57,0)" fg:x="84640" fg:w="126"/><text x="72.6854%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (126 samples, 0.11%)</title><rect x="72.4354%" y="869" width="0.1078%" height="15" fill="rgb(232,154,2)" fg:x="84640" fg:w="126"/><text x="72.6854%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (126 samples, 0.11%)</title><rect x="72.4354%" y="853" width="0.1078%" height="15" fill="rgb(241,212,25)" fg:x="84640" fg:w="126"/><text x="72.6854%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (126 samples, 0.11%)</title><rect x="72.4354%" y="837" width="0.1078%" height="15" fill="rgb(226,69,20)" fg:x="84640" fg:w="126"/><text x="72.6854%" y="847.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="72.5629%" y="901" width="0.0103%" height="15" fill="rgb(247,184,54)" fg:x="84789" fg:w="12"/><text x="72.8129%" y="911.50"></text></g><g><title>std::sync::poison::Flag::borrow (12 samples, 0.01%)</title><rect x="72.5629%" y="885" width="0.0103%" height="15" fill="rgb(210,145,0)" fg:x="84789" fg:w="12"/><text x="72.8129%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (180 samples, 0.15%)</title><rect x="72.5757%" y="869" width="0.1540%" height="15" fill="rgb(253,82,12)" fg:x="84804" fg:w="180"/><text x="72.8257%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (180 samples, 0.15%)</title><rect x="72.5757%" y="853" width="0.1540%" height="15" fill="rgb(245,42,11)" fg:x="84804" fg:w="180"/><text x="72.8257%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (30 samples, 0.03%)</title><rect x="72.7358%" y="853" width="0.0257%" height="15" fill="rgb(219,147,32)" fg:x="84991" fg:w="30"/><text x="72.9858%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="72.7358%" y="837" width="0.0257%" height="15" fill="rgb(246,12,7)" fg:x="84991" fg:w="30"/><text x="72.9858%" y="847.50"></text></g><g><title>core::hint::spin_loop (597 samples, 0.51%)</title><rect x="72.7683%" y="837" width="0.5109%" height="15" fill="rgb(243,50,9)" fg:x="85029" fg:w="597"/><text x="73.0183%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (597 samples, 0.51%)</title><rect x="72.7683%" y="821" width="0.5109%" height="15" fill="rgb(219,149,6)" fg:x="85029" fg:w="597"/><text x="73.0183%" y="831.50"></text></g><g><title>event_listener::Inner::lock (869 samples, 0.74%)</title><rect x="72.5560%" y="933" width="0.7437%" height="15" fill="rgb(241,51,42)" fg:x="84781" fg:w="869"/><text x="72.8060%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (861 samples, 0.74%)</title><rect x="72.5629%" y="917" width="0.7368%" height="15" fill="rgb(226,128,27)" fg:x="84789" fg:w="861"/><text x="72.8129%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (849 samples, 0.73%)</title><rect x="72.5731%" y="901" width="0.7266%" height="15" fill="rgb(244,144,4)" fg:x="84801" fg:w="849"/><text x="72.8231%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (849 samples, 0.73%)</title><rect x="72.5731%" y="885" width="0.7266%" height="15" fill="rgb(221,4,13)" fg:x="84801" fg:w="849"/><text x="72.8231%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (666 samples, 0.57%)</title><rect x="72.7298%" y="869" width="0.5700%" height="15" fill="rgb(208,170,28)" fg:x="84984" fg:w="666"/><text x="72.9798%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (629 samples, 0.54%)</title><rect x="72.7614%" y="853" width="0.5383%" height="15" fill="rgb(226,131,13)" fg:x="85021" fg:w="629"/><text x="73.0114%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (24 samples, 0.02%)</title><rect x="73.2792%" y="837" width="0.0205%" height="15" fill="rgb(215,72,41)" fg:x="85626" fg:w="24"/><text x="73.5292%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.02%)</title><rect x="73.2792%" y="821" width="0.0205%" height="15" fill="rgb(243,108,20)" fg:x="85626" fg:w="24"/><text x="73.5292%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,240 samples, 1.06%)</title><rect x="72.2548%" y="949" width="1.0612%" height="15" fill="rgb(230,189,17)" fg:x="84429" fg:w="1240"/><text x="72.5048%" y="959.50"></text></g><g><title>event_listener::List::remove (19 samples, 0.02%)</title><rect x="73.2997%" y="933" width="0.0163%" height="15" fill="rgb(220,50,17)" fg:x="85650" fg:w="19"/><text x="73.5497%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (12 samples, 0.01%)</title><rect x="73.3057%" y="917" width="0.0103%" height="15" fill="rgb(248,152,48)" fg:x="85657" fg:w="12"/><text x="73.5557%" y="927.50"></text></g><g><title>core::mem::replace (12 samples, 0.01%)</title><rect x="73.3057%" y="901" width="0.0103%" height="15" fill="rgb(244,91,11)" fg:x="85657" fg:w="12"/><text x="73.5557%" y="911.50"></text></g><g><title>core::ptr::read (12 samples, 0.01%)</title><rect x="73.3057%" y="885" width="0.0103%" height="15" fill="rgb(220,157,5)" fg:x="85657" fg:w="12"/><text x="73.5557%" y="895.50"></text></g><g><title>concurrent_queue::full_fence (42 samples, 0.04%)</title><rect x="73.3879%" y="901" width="0.0359%" height="15" fill="rgb(253,137,8)" fg:x="85753" fg:w="42"/><text x="73.6379%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (40 samples, 0.03%)</title><rect x="73.3896%" y="885" width="0.0342%" height="15" fill="rgb(217,137,51)" fg:x="85755" fg:w="40"/><text x="73.6396%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (40 samples, 0.03%)</title><rect x="73.3896%" y="869" width="0.0342%" height="15" fill="rgb(218,209,53)" fg:x="85755" fg:w="40"/><text x="73.6396%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.03%)</title><rect x="73.3896%" y="853" width="0.0342%" height="15" fill="rgb(249,137,25)" fg:x="85755" fg:w="40"/><text x="73.6396%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (72 samples, 0.06%)</title><rect x="73.4247%" y="901" width="0.0616%" height="15" fill="rgb(239,155,26)" fg:x="85796" fg:w="72"/><text x="73.6747%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (72 samples, 0.06%)</title><rect x="73.4247%" y="885" width="0.0616%" height="15" fill="rgb(227,85,46)" fg:x="85796" fg:w="72"/><text x="73.6747%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (273 samples, 0.23%)</title><rect x="73.4863%" y="901" width="0.2336%" height="15" fill="rgb(251,107,43)" fg:x="85868" fg:w="273"/><text x="73.7363%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (272 samples, 0.23%)</title><rect x="73.4872%" y="885" width="0.2328%" height="15" fill="rgb(234,170,33)" fg:x="85869" fg:w="272"/><text x="73.7372%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (455 samples, 0.39%)</title><rect x="73.3322%" y="933" width="0.3894%" height="15" fill="rgb(206,29,35)" fg:x="85688" fg:w="455"/><text x="73.5822%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (442 samples, 0.38%)</title><rect x="73.3434%" y="917" width="0.3783%" height="15" fill="rgb(227,138,25)" fg:x="85701" fg:w="442"/><text x="73.5934%" y="927.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (948 samples, 0.81%)</title><rect x="73.3160%" y="949" width="0.8113%" height="15" fill="rgb(249,131,35)" fg:x="85669" fg:w="948"/><text x="73.5660%" y="959.50"></text></g><g><title>event_listener::Event::notify (474 samples, 0.41%)</title><rect x="73.7216%" y="933" width="0.4057%" height="15" fill="rgb(239,6,40)" fg:x="86143" fg:w="474"/><text x="73.9716%" y="943.50"></text></g><g><title>event_listener::full_fence (469 samples, 0.40%)</title><rect x="73.7259%" y="917" width="0.4014%" height="15" fill="rgb(246,136,47)" fg:x="86148" fg:w="469"/><text x="73.9759%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (469 samples, 0.40%)</title><rect x="73.7259%" y="901" width="0.4014%" height="15" fill="rgb(253,58,26)" fg:x="86148" fg:w="469"/><text x="73.9759%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (469 samples, 0.40%)</title><rect x="73.7259%" y="885" width="0.4014%" height="15" fill="rgb(237,141,10)" fg:x="86148" fg:w="469"/><text x="73.9759%" y="895.50"></text></g><g><title>event_listener::Inner::lock (12 samples, 0.01%)</title><rect x="74.1341%" y="901" width="0.0103%" height="15" fill="rgb(234,156,12)" fg:x="86625" fg:w="12"/><text x="74.3841%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.01%)</title><rect x="74.1341%" y="885" width="0.0103%" height="15" fill="rgb(243,224,36)" fg:x="86625" fg:w="12"/><text x="74.3841%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="74.1341%" y="917" width="0.0120%" height="15" fill="rgb(205,229,51)" fg:x="86625" fg:w="14"/><text x="74.3841%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (37 samples, 0.03%)</title><rect x="74.1307%" y="949" width="0.0317%" height="15" fill="rgb(223,189,4)" fg:x="86621" fg:w="37"/><text x="74.3807%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (34 samples, 0.03%)</title><rect x="74.1333%" y="933" width="0.0291%" height="15" fill="rgb(249,167,54)" fg:x="86624" fg:w="34"/><text x="74.3833%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (19 samples, 0.02%)</title><rect x="74.1461%" y="917" width="0.0163%" height="15" fill="rgb(218,34,28)" fg:x="86639" fg:w="19"/><text x="74.3961%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="74.1461%" y="901" width="0.0163%" height="15" fill="rgb(232,109,42)" fg:x="86639" fg:w="19"/><text x="74.3961%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.02%)</title><rect x="74.1461%" y="885" width="0.0163%" height="15" fill="rgb(248,214,46)" fg:x="86639" fg:w="19"/><text x="74.3961%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.02%)</title><rect x="74.1461%" y="869" width="0.0163%" height="15" fill="rgb(244,216,40)" fg:x="86639" fg:w="19"/><text x="74.3961%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="74.1667%" y="933" width="0.0368%" height="15" fill="rgb(231,226,31)" fg:x="86663" fg:w="43"/><text x="74.4167%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (43 samples, 0.04%)</title><rect x="74.1667%" y="917" width="0.0368%" height="15" fill="rgb(238,38,43)" fg:x="86663" fg:w="43"/><text x="74.4167%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (43 samples, 0.04%)</title><rect x="74.1667%" y="901" width="0.0368%" height="15" fill="rgb(208,88,43)" fg:x="86663" fg:w="43"/><text x="74.4167%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (23 samples, 0.02%)</title><rect x="74.2035%" y="933" width="0.0197%" height="15" fill="rgb(205,136,37)" fg:x="86706" fg:w="23"/><text x="74.4535%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.02%)</title><rect x="74.2052%" y="917" width="0.0180%" height="15" fill="rgb(237,34,14)" fg:x="86708" fg:w="21"/><text x="74.4552%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="74.2052%" y="901" width="0.0180%" height="15" fill="rgb(236,193,44)" fg:x="86708" fg:w="21"/><text x="74.4552%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="74.2060%" y="885" width="0.0171%" height="15" fill="rgb(231,48,10)" fg:x="86709" fg:w="20"/><text x="74.4560%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (20 samples, 0.02%)</title><rect x="74.2060%" y="869" width="0.0171%" height="15" fill="rgb(213,141,34)" fg:x="86709" fg:w="20"/><text x="74.4560%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (20 samples, 0.02%)</title><rect x="74.2060%" y="853" width="0.0171%" height="15" fill="rgb(249,130,34)" fg:x="86709" fg:w="20"/><text x="74.4560%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.02%)</title><rect x="74.2060%" y="837" width="0.0171%" height="15" fill="rgb(219,42,41)" fg:x="86709" fg:w="20"/><text x="74.4560%" y="847.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.01%)</title><rect x="74.2231%" y="933" width="0.0145%" height="15" fill="rgb(224,100,54)" fg:x="86729" fg:w="17"/><text x="74.4731%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="74.2231%" y="917" width="0.0145%" height="15" fill="rgb(229,200,27)" fg:x="86729" fg:w="17"/><text x="74.4731%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="74.2240%" y="901" width="0.0137%" height="15" fill="rgb(217,118,10)" fg:x="86730" fg:w="16"/><text x="74.4740%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (16 samples, 0.01%)</title><rect x="74.2240%" y="885" width="0.0137%" height="15" fill="rgb(206,22,3)" fg:x="86730" fg:w="16"/><text x="74.4740%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.01%)</title><rect x="74.2240%" y="869" width="0.0137%" height="15" fill="rgb(232,163,46)" fg:x="86730" fg:w="16"/><text x="74.4740%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="74.2240%" y="853" width="0.0137%" height="15" fill="rgb(206,95,13)" fg:x="86730" fg:w="16"/><text x="74.4740%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,368 samples, 2.03%)</title><rect x="72.2265%" y="965" width="2.0265%" height="15" fill="rgb(253,154,18)" fg:x="84396" fg:w="2368"/><text x="72.4765%" y="975.50">&lt;..</text></g><g><title>event_listener::Event::listen (106 samples, 0.09%)</title><rect x="74.1624%" y="949" width="0.0907%" height="15" fill="rgb(219,32,23)" fg:x="86658" fg:w="106"/><text x="74.4124%" y="959.50"></text></g><g><title>event_listener::full_fence (14 samples, 0.01%)</title><rect x="74.2411%" y="933" width="0.0120%" height="15" fill="rgb(230,191,45)" fg:x="86750" fg:w="14"/><text x="74.4911%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (12 samples, 0.01%)</title><rect x="74.2428%" y="917" width="0.0103%" height="15" fill="rgb(229,64,36)" fg:x="86752" fg:w="12"/><text x="74.4928%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="74.2428%" y="901" width="0.0103%" height="15" fill="rgb(205,129,25)" fg:x="86752" fg:w="12"/><text x="74.4928%" y="911.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.06%)</title><rect x="74.2591%" y="949" width="0.0625%" height="15" fill="rgb(254,112,7)" fg:x="86771" fg:w="73"/><text x="74.5091%" y="959.50"></text></g><g><title>[libc-2.31.so] (555 samples, 0.47%)</title><rect x="74.3233%" y="917" width="0.4750%" height="15" fill="rgb(226,53,48)" fg:x="86846" fg:w="555"/><text x="74.5733%" y="927.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="74.8000%" y="837" width="0.0282%" height="15" fill="rgb(214,153,38)" fg:x="87403" fg:w="33"/><text x="75.0500%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,152 samples, 2.70%)</title><rect x="72.2137%" y="997" width="2.6975%" height="15" fill="rgb(243,101,7)" fg:x="84381" fg:w="3152"/><text x="72.4637%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,146 samples, 2.69%)</title><rect x="72.2188%" y="981" width="2.6924%" height="15" fill="rgb(240,140,22)" fg:x="84387" fg:w="3146"/><text x="72.4688%" y="991.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (769 samples, 0.66%)</title><rect x="74.2531%" y="965" width="0.6581%" height="15" fill="rgb(235,114,2)" fg:x="86764" fg:w="769"/><text x="74.5031%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (689 samples, 0.59%)</title><rect x="74.3216%" y="949" width="0.5896%" height="15" fill="rgb(242,59,12)" fg:x="86844" fg:w="689"/><text x="74.5716%" y="959.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (689 samples, 0.59%)</title><rect x="74.3216%" y="933" width="0.5896%" height="15" fill="rgb(252,134,9)" fg:x="86844" fg:w="689"/><text x="74.5716%" y="943.50"></text></g><g><title>alloc::alloc::box_free (132 samples, 0.11%)</title><rect x="74.7982%" y="917" width="0.1130%" height="15" fill="rgb(236,4,44)" fg:x="87401" fg:w="132"/><text x="75.0482%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (132 samples, 0.11%)</title><rect x="74.7982%" y="901" width="0.1130%" height="15" fill="rgb(254,172,41)" fg:x="87401" fg:w="132"/><text x="75.0482%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (132 samples, 0.11%)</title><rect x="74.7982%" y="885" width="0.1130%" height="15" fill="rgb(244,63,20)" fg:x="87401" fg:w="132"/><text x="75.0482%" y="895.50"></text></g><g><title>__rg_dealloc (132 samples, 0.11%)</title><rect x="74.7982%" y="869" width="0.1130%" height="15" fill="rgb(250,73,31)" fg:x="87401" fg:w="132"/><text x="75.0482%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (132 samples, 0.11%)</title><rect x="74.7982%" y="853" width="0.1130%" height="15" fill="rgb(241,38,36)" fg:x="87401" fg:w="132"/><text x="75.0482%" y="863.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (97 samples, 0.08%)</title><rect x="74.8282%" y="837" width="0.0830%" height="15" fill="rgb(245,211,2)" fg:x="87436" fg:w="97"/><text x="75.0782%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,662 samples, 3.13%)</title><rect x="72.1983%" y="1061" width="3.1340%" height="15" fill="rgb(206,120,28)" fg:x="84363" fg:w="3662"/><text x="72.4483%" y="1071.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,657 samples, 3.13%)</title><rect x="72.2026%" y="1045" width="3.1297%" height="15" fill="rgb(211,59,34)" fg:x="84368" fg:w="3657"/><text x="72.4526%" y="1055.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,657 samples, 3.13%)</title><rect x="72.2026%" y="1029" width="3.1297%" height="15" fill="rgb(233,168,5)" fg:x="84368" fg:w="3657"/><text x="72.4526%" y="1039.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,657 samples, 3.13%)</title><rect x="72.2026%" y="1013" width="3.1297%" height="15" fill="rgb(234,33,13)" fg:x="84368" fg:w="3657"/><text x="72.4526%" y="1023.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (492 samples, 0.42%)</title><rect x="74.9112%" y="997" width="0.4211%" height="15" fill="rgb(231,150,26)" fg:x="87533" fg:w="492"/><text x="75.1612%" y="1007.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (15 samples, 0.01%)</title><rect x="75.3511%" y="917" width="0.0128%" height="15" fill="rgb(217,191,4)" fg:x="88047" fg:w="15"/><text x="75.6011%" y="927.50"></text></g><g><title>value_trait::generator::extend_from_slice (15 samples, 0.01%)</title><rect x="75.3511%" y="901" width="0.0128%" height="15" fill="rgb(246,198,38)" fg:x="88047" fg:w="15"/><text x="75.6011%" y="911.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write_char (13 samples, 0.01%)</title><rect x="75.3639%" y="901" width="0.0111%" height="15" fill="rgb(245,64,37)" fg:x="88062" fg:w="13"/><text x="75.6139%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.01%)</title><rect x="75.3639%" y="885" width="0.0111%" height="15" fill="rgb(250,30,36)" fg:x="88062" fg:w="13"/><text x="75.6139%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (87 samples, 0.07%)</title><rect x="75.3323%" y="981" width="0.0745%" height="15" fill="rgb(217,86,53)" fg:x="88025" fg:w="87"/><text x="75.5823%" y="991.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (87 samples, 0.07%)</title><rect x="75.3323%" y="965" width="0.0745%" height="15" fill="rgb(228,157,16)" fg:x="88025" fg:w="87"/><text x="75.5823%" y="975.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (87 samples, 0.07%)</title><rect x="75.3323%" y="949" width="0.0745%" height="15" fill="rgb(217,59,31)" fg:x="88025" fg:w="87"/><text x="75.5823%" y="959.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (87 samples, 0.07%)</title><rect x="75.3323%" y="933" width="0.0745%" height="15" fill="rgb(237,138,41)" fg:x="88025" fg:w="87"/><text x="75.5823%" y="943.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (50 samples, 0.04%)</title><rect x="75.3639%" y="917" width="0.0428%" height="15" fill="rgb(227,91,49)" fg:x="88062" fg:w="50"/><text x="75.6139%" y="927.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (37 samples, 0.03%)</title><rect x="75.3751%" y="901" width="0.0317%" height="15" fill="rgb(247,21,44)" fg:x="88075" fg:w="37"/><text x="75.6251%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 0.03%)</title><rect x="75.5325%" y="853" width="0.0282%" height="15" fill="rgb(219,210,51)" fg:x="88259" fg:w="33"/><text x="75.7825%" y="863.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (177 samples, 0.15%)</title><rect x="75.4153%" y="901" width="0.1515%" height="15" fill="rgb(209,140,6)" fg:x="88122" fg:w="177"/><text x="75.6653%" y="911.50"></text></g><g><title>alloc::vec::from_elem (177 samples, 0.15%)</title><rect x="75.4153%" y="885" width="0.1515%" height="15" fill="rgb(221,188,24)" fg:x="88122" fg:w="177"/><text x="75.6653%" y="895.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (177 samples, 0.15%)</title><rect x="75.4153%" y="869" width="0.1515%" height="15" fill="rgb(232,154,20)" fg:x="88122" fg:w="177"/><text x="75.6653%" y="879.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (17 samples, 0.01%)</title><rect x="75.7756%" y="821" width="0.0145%" height="15" fill="rgb(244,137,50)" fg:x="88543" fg:w="17"/><text x="76.0256%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="75.7764%" y="805" width="0.0137%" height="15" fill="rgb(225,185,43)" fg:x="88544" fg:w="16"/><text x="76.0264%" y="815.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (18 samples, 0.02%)</title><rect x="75.7756%" y="837" width="0.0154%" height="15" fill="rgb(213,205,38)" fg:x="88543" fg:w="18"/><text x="76.0256%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (21 samples, 0.02%)</title><rect x="75.7927%" y="837" width="0.0180%" height="15" fill="rgb(236,73,12)" fg:x="88563" fg:w="21"/><text x="76.0427%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (22 samples, 0.02%)</title><rect x="75.8107%" y="837" width="0.0188%" height="15" fill="rgb(235,219,13)" fg:x="88584" fg:w="22"/><text x="76.0607%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (168 samples, 0.14%)</title><rect x="75.6866%" y="869" width="0.1438%" height="15" fill="rgb(218,59,36)" fg:x="88439" fg:w="168"/><text x="75.9366%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (136 samples, 0.12%)</title><rect x="75.7140%" y="853" width="0.1164%" height="15" fill="rgb(205,110,39)" fg:x="88471" fg:w="136"/><text x="75.9640%" y="863.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (83 samples, 0.07%)</title><rect x="75.8723%" y="709" width="0.0710%" height="15" fill="rgb(218,206,42)" fg:x="88656" fg:w="83"/><text x="76.1223%" y="719.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (83 samples, 0.07%)</title><rect x="75.8723%" y="693" width="0.0710%" height="15" fill="rgb(248,125,24)" fg:x="88656" fg:w="83"/><text x="76.1223%" y="703.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="75.9262%" y="677" width="0.0171%" height="15" fill="rgb(242,28,27)" fg:x="88719" fg:w="20"/><text x="76.1762%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (93 samples, 0.08%)</title><rect x="75.8671%" y="789" width="0.0796%" height="15" fill="rgb(216,228,15)" fg:x="88650" fg:w="93"/><text x="76.1171%" y="799.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (93 samples, 0.08%)</title><rect x="75.8671%" y="773" width="0.0796%" height="15" fill="rgb(235,116,46)" fg:x="88650" fg:w="93"/><text x="76.1171%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (89 samples, 0.08%)</title><rect x="75.8706%" y="757" width="0.0762%" height="15" fill="rgb(224,18,32)" fg:x="88654" fg:w="89"/><text x="76.1206%" y="767.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (89 samples, 0.08%)</title><rect x="75.8706%" y="741" width="0.0762%" height="15" fill="rgb(252,5,12)" fg:x="88654" fg:w="89"/><text x="76.1206%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (89 samples, 0.08%)</title><rect x="75.8706%" y="725" width="0.0762%" height="15" fill="rgb(251,36,5)" fg:x="88654" fg:w="89"/><text x="76.1206%" y="735.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (95 samples, 0.08%)</title><rect x="75.8663%" y="837" width="0.0813%" height="15" fill="rgb(217,53,14)" fg:x="88649" fg:w="95"/><text x="76.1163%" y="847.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (95 samples, 0.08%)</title><rect x="75.8663%" y="821" width="0.0813%" height="15" fill="rgb(215,86,45)" fg:x="88649" fg:w="95"/><text x="76.1163%" y="831.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (95 samples, 0.08%)</title><rect x="75.8663%" y="805" width="0.0813%" height="15" fill="rgb(242,169,11)" fg:x="88649" fg:w="95"/><text x="76.1163%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (157 samples, 0.13%)</title><rect x="75.8303%" y="869" width="0.1344%" height="15" fill="rgb(211,213,45)" fg:x="88607" fg:w="157"/><text x="76.0803%" y="879.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (143 samples, 0.12%)</title><rect x="75.8423%" y="853" width="0.1224%" height="15" fill="rgb(205,88,11)" fg:x="88621" fg:w="143"/><text x="76.0923%" y="863.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (20 samples, 0.02%)</title><rect x="75.9476%" y="837" width="0.0171%" height="15" fill="rgb(252,69,26)" fg:x="88744" fg:w="20"/><text x="76.1976%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (393 samples, 0.34%)</title><rect x="75.6609%" y="885" width="0.3363%" height="15" fill="rgb(246,123,37)" fg:x="88409" fg:w="393"/><text x="75.9109%" y="895.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (38 samples, 0.03%)</title><rect x="75.9647%" y="869" width="0.0325%" height="15" fill="rgb(212,205,5)" fg:x="88764" fg:w="38"/><text x="76.2147%" y="879.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.01%)</title><rect x="76.1983%" y="869" width="0.0128%" height="15" fill="rgb(253,148,0)" fg:x="89037" fg:w="15"/><text x="76.4483%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="76.2197%" y="869" width="0.0240%" height="15" fill="rgb(239,22,4)" fg:x="89062" fg:w="28"/><text x="76.4697%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="76.2480%" y="869" width="0.0171%" height="15" fill="rgb(226,26,53)" fg:x="89095" fg:w="20"/><text x="76.4980%" y="879.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (33 samples, 0.03%)</title><rect x="76.2651%" y="869" width="0.0282%" height="15" fill="rgb(225,229,45)" fg:x="89115" fg:w="33"/><text x="76.5151%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (33 samples, 0.03%)</title><rect x="76.2651%" y="853" width="0.0282%" height="15" fill="rgb(220,60,37)" fg:x="89115" fg:w="33"/><text x="76.5151%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="76.5449%" y="853" width="0.0163%" height="15" fill="rgb(217,180,35)" fg:x="89442" fg:w="19"/><text x="76.7949%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (129 samples, 0.11%)</title><rect x="77.2073%" y="661" width="0.1104%" height="15" fill="rgb(229,7,53)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (129 samples, 0.11%)</title><rect x="77.2073%" y="645" width="0.1104%" height="15" fill="rgb(254,137,3)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 0.11%)</title><rect x="77.2073%" y="629" width="0.1104%" height="15" fill="rgb(215,140,41)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (129 samples, 0.11%)</title><rect x="77.2073%" y="613" width="0.1104%" height="15" fill="rgb(250,80,15)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (129 samples, 0.11%)</title><rect x="77.2073%" y="597" width="0.1104%" height="15" fill="rgb(252,191,6)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="607.50"></text></g><g><title>alloc::alloc::alloc (129 samples, 0.11%)</title><rect x="77.2073%" y="581" width="0.1104%" height="15" fill="rgb(246,217,18)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="591.50"></text></g><g><title>__rg_alloc (129 samples, 0.11%)</title><rect x="77.2073%" y="565" width="0.1104%" height="15" fill="rgb(223,93,7)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (129 samples, 0.11%)</title><rect x="77.2073%" y="549" width="0.1104%" height="15" fill="rgb(225,55,52)" fg:x="90216" fg:w="129"/><text x="77.4573%" y="559.50"></text></g><g><title>sn_rust_alloc (123 samples, 0.11%)</title><rect x="77.2125%" y="533" width="0.1053%" height="15" fill="rgb(240,31,24)" fg:x="90222" fg:w="123"/><text x="77.4625%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (174 samples, 0.15%)</title><rect x="77.1902%" y="789" width="0.1489%" height="15" fill="rgb(205,56,52)" fg:x="90196" fg:w="174"/><text x="77.4402%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (159 samples, 0.14%)</title><rect x="77.2031%" y="773" width="0.1361%" height="15" fill="rgb(246,146,12)" fg:x="90211" fg:w="159"/><text x="77.4531%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (159 samples, 0.14%)</title><rect x="77.2031%" y="757" width="0.1361%" height="15" fill="rgb(239,84,36)" fg:x="90211" fg:w="159"/><text x="77.4531%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (159 samples, 0.14%)</title><rect x="77.2031%" y="741" width="0.1361%" height="15" fill="rgb(207,41,40)" fg:x="90211" fg:w="159"/><text x="77.4531%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (154 samples, 0.13%)</title><rect x="77.2073%" y="725" width="0.1318%" height="15" fill="rgb(241,179,25)" fg:x="90216" fg:w="154"/><text x="77.4573%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (154 samples, 0.13%)</title><rect x="77.2073%" y="709" width="0.1318%" height="15" fill="rgb(210,0,34)" fg:x="90216" fg:w="154"/><text x="77.4573%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (154 samples, 0.13%)</title><rect x="77.2073%" y="693" width="0.1318%" height="15" fill="rgb(225,217,29)" fg:x="90216" fg:w="154"/><text x="77.4573%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (154 samples, 0.13%)</title><rect x="77.2073%" y="677" width="0.1318%" height="15" fill="rgb(216,191,38)" fg:x="90216" fg:w="154"/><text x="77.4573%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (25 samples, 0.02%)</title><rect x="77.3177%" y="661" width="0.0214%" height="15" fill="rgb(232,140,52)" fg:x="90345" fg:w="25"/><text x="77.5677%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="77.3177%" y="645" width="0.0214%" height="15" fill="rgb(223,158,51)" fg:x="90345" fg:w="25"/><text x="77.5677%" y="655.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="77.3220%" y="629" width="0.0171%" height="15" fill="rgb(235,29,51)" fg:x="90350" fg:w="20"/><text x="77.5720%" y="639.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (241 samples, 0.21%)</title><rect x="77.1337%" y="821" width="0.2062%" height="15" fill="rgb(215,181,18)" fg:x="90130" fg:w="241"/><text x="77.3837%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (231 samples, 0.20%)</title><rect x="77.1423%" y="805" width="0.1977%" height="15" fill="rgb(227,125,34)" fg:x="90140" fg:w="231"/><text x="77.3923%" y="815.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (265 samples, 0.23%)</title><rect x="77.1260%" y="837" width="0.2268%" height="15" fill="rgb(230,197,49)" fg:x="90121" fg:w="265"/><text x="77.3760%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (12 samples, 0.01%)</title><rect x="77.3554%" y="837" width="0.0103%" height="15" fill="rgb(239,141,16)" fg:x="90389" fg:w="12"/><text x="77.6054%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (262 samples, 0.22%)</title><rect x="77.3657%" y="837" width="0.2242%" height="15" fill="rgb(225,105,43)" fg:x="90401" fg:w="262"/><text x="77.6157%" y="847.50"></text></g><g><title>tremor_script::ast::Path::segments (40 samples, 0.03%)</title><rect x="77.7234%" y="821" width="0.0342%" height="15" fill="rgb(214,131,14)" fg:x="90819" fg:w="40"/><text x="77.9734%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="77.9913%" y="805" width="0.0231%" height="15" fill="rgb(229,177,11)" fg:x="91132" fg:w="27"/><text x="78.2413%" y="815.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (34 samples, 0.03%)</title><rect x="78.0931%" y="629" width="0.0291%" height="15" fill="rgb(231,180,14)" fg:x="91251" fg:w="34"/><text x="78.3431%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (34 samples, 0.03%)</title><rect x="78.0931%" y="613" width="0.0291%" height="15" fill="rgb(232,88,2)" fg:x="91251" fg:w="34"/><text x="78.3431%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="78.0880%" y="677" width="0.0436%" height="15" fill="rgb(205,220,8)" fg:x="91245" fg:w="51"/><text x="78.3380%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (51 samples, 0.04%)</title><rect x="78.0880%" y="661" width="0.0436%" height="15" fill="rgb(225,23,53)" fg:x="91245" fg:w="51"/><text x="78.3380%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="78.0880%" y="645" width="0.0436%" height="15" fill="rgb(213,62,29)" fg:x="91245" fg:w="51"/><text x="78.3380%" y="655.50"></text></g><g><title>sn_rust_dealloc (300 samples, 0.26%)</title><rect x="78.1316%" y="677" width="0.2567%" height="15" fill="rgb(227,75,7)" fg:x="91296" fg:w="300"/><text x="78.3816%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (464 samples, 0.40%)</title><rect x="78.0828%" y="725" width="0.3971%" height="15" fill="rgb(207,105,14)" fg:x="91239" fg:w="464"/><text x="78.3328%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (464 samples, 0.40%)</title><rect x="78.0828%" y="709" width="0.3971%" height="15" fill="rgb(245,62,29)" fg:x="91239" fg:w="464"/><text x="78.3328%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (464 samples, 0.40%)</title><rect x="78.0828%" y="693" width="0.3971%" height="15" fill="rgb(236,202,4)" fg:x="91239" fg:w="464"/><text x="78.3328%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (107 samples, 0.09%)</title><rect x="78.3883%" y="677" width="0.0916%" height="15" fill="rgb(250,67,1)" fg:x="91596" fg:w="107"/><text x="78.6383%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (516 samples, 0.44%)</title><rect x="78.0657%" y="741" width="0.4416%" height="15" fill="rgb(253,115,44)" fg:x="91219" fg:w="516"/><text x="78.3157%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (32 samples, 0.03%)</title><rect x="78.4799%" y="725" width="0.0274%" height="15" fill="rgb(251,139,18)" fg:x="91703" fg:w="32"/><text x="78.7299%" y="735.50"></text></g><g><title>alloc::alloc::box_free (32 samples, 0.03%)</title><rect x="78.4799%" y="709" width="0.0274%" height="15" fill="rgb(218,22,32)" fg:x="91703" fg:w="32"/><text x="78.7299%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.03%)</title><rect x="78.4799%" y="693" width="0.0274%" height="15" fill="rgb(243,53,5)" fg:x="91703" fg:w="32"/><text x="78.7299%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.03%)</title><rect x="78.4799%" y="677" width="0.0274%" height="15" fill="rgb(227,56,16)" fg:x="91703" fg:w="32"/><text x="78.7299%" y="687.50"></text></g><g><title>__rg_dealloc (32 samples, 0.03%)</title><rect x="78.4799%" y="661" width="0.0274%" height="15" fill="rgb(245,53,0)" fg:x="91703" fg:w="32"/><text x="78.7299%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (32 samples, 0.03%)</title><rect x="78.4799%" y="645" width="0.0274%" height="15" fill="rgb(216,170,35)" fg:x="91703" fg:w="32"/><text x="78.7299%" y="655.50"></text></g><g><title>sn_rust_dealloc (124 samples, 0.11%)</title><rect x="78.5073%" y="741" width="0.1061%" height="15" fill="rgb(211,200,8)" fg:x="91735" fg:w="124"/><text x="78.7573%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (707 samples, 0.61%)</title><rect x="78.0144%" y="805" width="0.6051%" height="15" fill="rgb(228,204,44)" fg:x="91159" fg:w="707"/><text x="78.2644%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (673 samples, 0.58%)</title><rect x="78.0435%" y="789" width="0.5760%" height="15" fill="rgb(214,121,17)" fg:x="91193" fg:w="673"/><text x="78.2935%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (673 samples, 0.58%)</title><rect x="78.0435%" y="773" width="0.5760%" height="15" fill="rgb(233,64,38)" fg:x="91193" fg:w="673"/><text x="78.2935%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (673 samples, 0.58%)</title><rect x="78.0435%" y="757" width="0.5760%" height="15" fill="rgb(253,54,19)" fg:x="91193" fg:w="673"/><text x="78.2935%" y="767.50"></text></g><g><title>tremor_script::ast::Path::segments (18 samples, 0.02%)</title><rect x="78.6194%" y="805" width="0.0154%" height="15" fill="rgb(253,94,18)" fg:x="91866" fg:w="18"/><text x="78.8694%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="78.6699%" y="773" width="0.0103%" height="15" fill="rgb(227,57,52)" fg:x="91925" fg:w="12"/><text x="78.9199%" y="783.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (162 samples, 0.14%)</title><rect x="79.0028%" y="661" width="0.1386%" height="15" fill="rgb(230,228,50)" fg:x="92314" fg:w="162"/><text x="79.2528%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (162 samples, 0.14%)</title><rect x="79.0028%" y="645" width="0.1386%" height="15" fill="rgb(217,205,27)" fg:x="92314" fg:w="162"/><text x="79.2528%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::entry::BoxedREntry&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::entry::Entry&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt;,V,S&gt;&gt;&gt;::from (162 samples, 0.14%)</title><rect x="79.0028%" y="629" width="0.1386%" height="15" fill="rgb(252,71,50)" fg:x="92314" fg:w="162"/><text x="79.2528%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}}::{{closure}} (213 samples, 0.18%)</title><rect x="78.9660%" y="677" width="0.1823%" height="15" fill="rgb(209,86,4)" fg:x="92271" fg:w="213"/><text x="79.2160%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::entry (636 samples, 0.54%)</title><rect x="78.6802%" y="773" width="0.5443%" height="15" fill="rgb(229,94,0)" fg:x="91937" fg:w="636"/><text x="78.9302%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (343 samples, 0.29%)</title><rect x="78.9309%" y="757" width="0.2935%" height="15" fill="rgb(252,223,21)" fg:x="92230" fg:w="343"/><text x="79.1809%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (310 samples, 0.27%)</title><rect x="78.9592%" y="741" width="0.2653%" height="15" fill="rgb(230,210,4)" fg:x="92263" fg:w="310"/><text x="79.2092%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (310 samples, 0.27%)</title><rect x="78.9592%" y="725" width="0.2653%" height="15" fill="rgb(240,149,38)" fg:x="92263" fg:w="310"/><text x="79.2092%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}} (310 samples, 0.27%)</title><rect x="78.9592%" y="709" width="0.2653%" height="15" fill="rgb(254,105,20)" fg:x="92263" fg:w="310"/><text x="79.2092%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (302 samples, 0.26%)</title><rect x="78.9660%" y="693" width="0.2585%" height="15" fill="rgb(253,87,46)" fg:x="92271" fg:w="302"/><text x="79.2160%" y="703.50"></text></g><g><title>core::mem::replace (89 samples, 0.08%)</title><rect x="79.1483%" y="677" width="0.0762%" height="15" fill="rgb(253,116,33)" fg:x="92484" fg:w="89"/><text x="79.3983%" y="687.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (99 samples, 0.08%)</title><rect x="79.6943%" y="613" width="0.0847%" height="15" fill="rgb(229,198,5)" fg:x="93122" fg:w="99"/><text x="79.9443%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (99 samples, 0.08%)</title><rect x="79.6943%" y="597" width="0.0847%" height="15" fill="rgb(242,38,37)" fg:x="93122" fg:w="99"/><text x="79.9443%" y="607.50"></text></g><g><title>core::ptr::write (99 samples, 0.08%)</title><rect x="79.6943%" y="581" width="0.0847%" height="15" fill="rgb(242,69,53)" fg:x="93122" fg:w="99"/><text x="79.9443%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (12 samples, 0.01%)</title><rect x="79.8218%" y="597" width="0.0103%" height="15" fill="rgb(249,80,16)" fg:x="93271" fg:w="12"/><text x="80.0718%" y="607.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (14 samples, 0.01%)</title><rect x="79.8321%" y="597" width="0.0120%" height="15" fill="rgb(206,128,11)" fg:x="93283" fg:w="14"/><text x="80.0821%" y="607.50"></text></g><g><title>hashbrown::raw::inner::is_full (24 samples, 0.02%)</title><rect x="79.8441%" y="597" width="0.0205%" height="15" fill="rgb(212,35,20)" fg:x="93297" fg:w="24"/><text x="80.0941%" y="607.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (17 samples, 0.01%)</title><rect x="79.8646%" y="597" width="0.0145%" height="15" fill="rgb(236,79,13)" fg:x="93321" fg:w="17"/><text x="80.1146%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (17 samples, 0.01%)</title><rect x="79.8646%" y="581" width="0.0145%" height="15" fill="rgb(233,123,3)" fg:x="93321" fg:w="17"/><text x="80.1146%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="79.8646%" y="565" width="0.0145%" height="15" fill="rgb(214,93,52)" fg:x="93321" fg:w="17"/><text x="80.1146%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (114 samples, 0.10%)</title><rect x="79.7944%" y="613" width="0.0976%" height="15" fill="rgb(251,37,40)" fg:x="93239" fg:w="114"/><text x="80.0444%" y="623.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (15 samples, 0.01%)</title><rect x="79.8792%" y="597" width="0.0128%" height="15" fill="rgb(227,80,54)" fg:x="93338" fg:w="15"/><text x="80.1292%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="79.8792%" y="581" width="0.0128%" height="15" fill="rgb(254,48,11)" fg:x="93338" fg:w="15"/><text x="80.1292%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (12 samples, 0.01%)</title><rect x="79.9031%" y="581" width="0.0103%" height="15" fill="rgb(235,193,26)" fg:x="93366" fg:w="12"/><text x="80.1531%" y="591.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (486 samples, 0.42%)</title><rect x="79.5018%" y="741" width="0.4159%" height="15" fill="rgb(229,99,21)" fg:x="92897" fg:w="486"/><text x="79.7518%" y="751.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}} (462 samples, 0.40%)</title><rect x="79.5223%" y="725" width="0.3954%" height="15" fill="rgb(211,140,41)" fg:x="92921" fg:w="462"/><text x="79.7723%" y="735.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (462 samples, 0.40%)</title><rect x="79.5223%" y="709" width="0.3954%" height="15" fill="rgb(240,227,30)" fg:x="92921" fg:w="462"/><text x="79.7723%" y="719.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (462 samples, 0.40%)</title><rect x="79.5223%" y="693" width="0.3954%" height="15" fill="rgb(215,224,45)" fg:x="92921" fg:w="462"/><text x="79.7723%" y="703.50"></text></g><g><title>halfbrown::entry::VacantEntry&lt;K,V,S&gt;::insert (459 samples, 0.39%)</title><rect x="79.5249%" y="677" width="0.3928%" height="15" fill="rgb(206,123,31)" fg:x="92924" fg:w="459"/><text x="79.7749%" y="687.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (449 samples, 0.38%)</title><rect x="79.5334%" y="661" width="0.3843%" height="15" fill="rgb(210,138,16)" fg:x="92934" fg:w="449"/><text x="79.7834%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (448 samples, 0.38%)</title><rect x="79.5343%" y="645" width="0.3834%" height="15" fill="rgb(228,57,28)" fg:x="92935" fg:w="448"/><text x="79.7843%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (278 samples, 0.24%)</title><rect x="79.6798%" y="629" width="0.2379%" height="15" fill="rgb(242,170,10)" fg:x="93105" fg:w="278"/><text x="79.9298%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (30 samples, 0.03%)</title><rect x="79.8920%" y="613" width="0.0257%" height="15" fill="rgb(228,214,39)" fg:x="93353" fg:w="30"/><text x="80.1420%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (17 samples, 0.01%)</title><rect x="79.9031%" y="597" width="0.0145%" height="15" fill="rgb(218,179,33)" fg:x="93366" fg:w="17"/><text x="80.1531%" y="607.50"></text></g><g><title>abi_stable::std_types::map::entry::RVacantEntry&lt;K,V,S&gt;::insert (813 samples, 0.70%)</title><rect x="79.2450%" y="757" width="0.6958%" height="15" fill="rgb(235,193,39)" fg:x="92597" fg:w="813"/><text x="79.4950%" y="767.50"></text></g><g><title>abi_stable::std_types::map::entry::_::&lt;impl abi_stable::std_types::map::entry::VacantVTable_Ref&lt;K,V,S&gt;&gt;::insert_elem (27 samples, 0.02%)</title><rect x="79.9177%" y="741" width="0.0231%" height="15" fill="rgb(219,221,36)" fg:x="93383" fg:w="27"/><text x="80.1677%" y="751.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (98 samples, 0.08%)</title><rect x="79.9613%" y="661" width="0.0839%" height="15" fill="rgb(248,218,19)" fg:x="93434" fg:w="98"/><text x="80.2113%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (98 samples, 0.08%)</title><rect x="79.9613%" y="645" width="0.0839%" height="15" fill="rgb(205,50,9)" fg:x="93434" fg:w="98"/><text x="80.2113%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (75 samples, 0.06%)</title><rect x="79.9810%" y="629" width="0.0642%" height="15" fill="rgb(238,81,28)" fg:x="93457" fg:w="75"/><text x="80.2310%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (56 samples, 0.05%)</title><rect x="79.9973%" y="613" width="0.0479%" height="15" fill="rgb(235,110,19)" fg:x="93476" fg:w="56"/><text x="80.2473%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="79.9973%" y="597" width="0.0479%" height="15" fill="rgb(214,7,14)" fg:x="93476" fg:w="56"/><text x="80.2473%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="79.9973%" y="581" width="0.0479%" height="15" fill="rgb(211,77,3)" fg:x="93476" fg:w="56"/><text x="80.2473%" y="591.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.05%)</title><rect x="79.9973%" y="565" width="0.0479%" height="15" fill="rgb(229,5,9)" fg:x="93476" fg:w="56"/><text x="80.2473%" y="575.50"></text></g><g><title>__rg_alloc (56 samples, 0.05%)</title><rect x="79.9973%" y="549" width="0.0479%" height="15" fill="rgb(225,90,11)" fg:x="93476" fg:w="56"/><text x="80.2473%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (56 samples, 0.05%)</title><rect x="79.9973%" y="533" width="0.0479%" height="15" fill="rgb(242,56,8)" fg:x="93476" fg:w="56"/><text x="80.2473%" y="543.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="80.0067%" y="517" width="0.0385%" height="15" fill="rgb(249,212,39)" fg:x="93487" fg:w="45"/><text x="80.2567%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (136 samples, 0.12%)</title><rect x="79.9408%" y="709" width="0.1164%" height="15" fill="rgb(236,90,9)" fg:x="93410" fg:w="136"/><text x="80.1908%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (136 samples, 0.12%)</title><rect x="79.9408%" y="693" width="0.1164%" height="15" fill="rgb(206,88,35)" fg:x="93410" fg:w="136"/><text x="80.1908%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (136 samples, 0.12%)</title><rect x="79.9408%" y="677" width="0.1164%" height="15" fill="rgb(205,126,30)" fg:x="93410" fg:w="136"/><text x="80.1908%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="80.0452%" y="661" width="0.0120%" height="15" fill="rgb(230,176,12)" fg:x="93532" fg:w="14"/><text x="80.2952%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="80.0452%" y="645" width="0.0120%" height="15" fill="rgb(243,19,9)" fg:x="93532" fg:w="14"/><text x="80.2952%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (14 samples, 0.01%)</title><rect x="80.0452%" y="629" width="0.0120%" height="15" fill="rgb(245,171,17)" fg:x="93532" fg:w="14"/><text x="80.2952%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (14 samples, 0.01%)</title><rect x="80.0452%" y="613" width="0.0120%" height="15" fill="rgb(227,52,21)" fg:x="93532" fg:w="14"/><text x="80.2952%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="80.0452%" y="597" width="0.0120%" height="15" fill="rgb(238,69,14)" fg:x="93532" fg:w="14"/><text x="80.2952%" y="607.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (22 samples, 0.02%)</title><rect x="80.1873%" y="533" width="0.0188%" height="15" fill="rgb(241,156,39)" fg:x="93698" fg:w="22"/><text x="80.4373%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (22 samples, 0.02%)</title><rect x="80.1873%" y="517" width="0.0188%" height="15" fill="rgb(212,227,28)" fg:x="93698" fg:w="22"/><text x="80.4373%" y="527.50"></text></g><g><title>core::mem::swap (756 samples, 0.65%)</title><rect x="80.2061%" y="533" width="0.6470%" height="15" fill="rgb(209,118,27)" fg:x="93720" fg:w="756"/><text x="80.4561%" y="543.50"></text></g><g><title>core::mem::swap_simple (756 samples, 0.65%)</title><rect x="80.2061%" y="517" width="0.6470%" height="15" fill="rgb(226,102,5)" fg:x="93720" fg:w="756"/><text x="80.4561%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;,hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (41 samples, 0.04%)</title><rect x="80.8531%" y="533" width="0.0351%" height="15" fill="rgb(223,34,3)" fg:x="94476" fg:w="41"/><text x="81.1031%" y="543.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="80.8531%" y="517" width="0.0351%" height="15" fill="rgb(221,81,38)" fg:x="94476" fg:w="41"/><text x="81.1031%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (41 samples, 0.04%)</title><rect x="80.8531%" y="501" width="0.0351%" height="15" fill="rgb(236,219,28)" fg:x="94476" fg:w="41"/><text x="81.1031%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (26 samples, 0.02%)</title><rect x="80.8659%" y="485" width="0.0223%" height="15" fill="rgb(213,200,14)" fg:x="94491" fg:w="26"/><text x="81.1159%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (25 samples, 0.02%)</title><rect x="80.8882%" y="533" width="0.0214%" height="15" fill="rgb(240,33,19)" fg:x="94517" fg:w="25"/><text x="81.1382%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (914 samples, 0.78%)</title><rect x="80.1359%" y="549" width="0.7822%" height="15" fill="rgb(233,113,27)" fg:x="93638" fg:w="914"/><text x="80.3859%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,166 samples, 1.00%)</title><rect x="79.9408%" y="725" width="0.9979%" height="15" fill="rgb(220,221,18)" fg:x="93410" fg:w="1166"/><text x="80.1908%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,030 samples, 0.88%)</title><rect x="80.0572%" y="709" width="0.8815%" height="15" fill="rgb(238,92,8)" fg:x="93546" fg:w="1030"/><text x="80.3072%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,021 samples, 0.87%)</title><rect x="80.0649%" y="693" width="0.8738%" height="15" fill="rgb(222,164,16)" fg:x="93555" fg:w="1021"/><text x="80.3149%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,013 samples, 0.87%)</title><rect x="80.0717%" y="677" width="0.8669%" height="15" fill="rgb(241,119,3)" fg:x="93563" fg:w="1013"/><text x="80.3217%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,012 samples, 0.87%)</title><rect x="80.0726%" y="661" width="0.8661%" height="15" fill="rgb(241,44,8)" fg:x="93564" fg:w="1012"/><text x="80.3226%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,012 samples, 0.87%)</title><rect x="80.0726%" y="645" width="0.8661%" height="15" fill="rgb(230,36,40)" fg:x="93564" fg:w="1012"/><text x="80.3226%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,012 samples, 0.87%)</title><rect x="80.0726%" y="629" width="0.8661%" height="15" fill="rgb(243,16,36)" fg:x="93564" fg:w="1012"/><text x="80.3226%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,005 samples, 0.86%)</title><rect x="80.0786%" y="613" width="0.8601%" height="15" fill="rgb(231,4,26)" fg:x="93571" fg:w="1005"/><text x="80.3286%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,005 samples, 0.86%)</title><rect x="80.0786%" y="597" width="0.8601%" height="15" fill="rgb(240,9,31)" fg:x="93571" fg:w="1005"/><text x="80.3286%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (991 samples, 0.85%)</title><rect x="80.0905%" y="581" width="0.8481%" height="15" fill="rgb(207,173,15)" fg:x="93585" fg:w="991"/><text x="80.3405%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (978 samples, 0.84%)</title><rect x="80.1017%" y="565" width="0.8370%" height="15" fill="rgb(224,192,53)" fg:x="93598" fg:w="978"/><text x="80.3517%" y="575.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (24 samples, 0.02%)</title><rect x="80.9181%" y="549" width="0.0205%" height="15" fill="rgb(223,67,28)" fg:x="94552" fg:w="24"/><text x="81.1681%" y="559.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (3,937 samples, 3.37%)</title><rect x="77.5899%" y="837" width="3.3693%" height="15" fill="rgb(211,20,47)" fg:x="90663" fg:w="3937"/><text x="77.8399%" y="847.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (3,741 samples, 3.20%)</title><rect x="77.7576%" y="821" width="3.2016%" height="15" fill="rgb(240,228,2)" fg:x="90859" fg:w="3741"/><text x="78.0076%" y="831.50">tre..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (2,716 samples, 2.32%)</title><rect x="78.6348%" y="805" width="2.3244%" height="15" fill="rgb(248,151,12)" fg:x="91884" fg:w="2716"/><text x="78.8848%" y="815.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (2,705 samples, 2.31%)</title><rect x="78.6442%" y="789" width="2.3150%" height="15" fill="rgb(244,8,39)" fg:x="91895" fg:w="2705"/><text x="78.8942%" y="799.50">t..</text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (2,027 samples, 1.73%)</title><rect x="79.2245%" y="773" width="1.7347%" height="15" fill="rgb(222,26,8)" fg:x="92573" fg:w="2027"/><text x="79.4745%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (1,190 samples, 1.02%)</title><rect x="79.9408%" y="757" width="1.0184%" height="15" fill="rgb(213,106,44)" fg:x="93410" fg:w="1190"/><text x="80.1908%" y="767.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,190 samples, 1.02%)</title><rect x="79.9408%" y="741" width="1.0184%" height="15" fill="rgb(214,129,20)" fg:x="93410" fg:w="1190"/><text x="80.1908%" y="751.50"></text></g><g><title>tremor_value::value::Value::Object (24 samples, 0.02%)</title><rect x="80.9386%" y="725" width="0.0205%" height="15" fill="rgb(212,32,13)" fg:x="94576" fg:w="24"/><text x="81.1886%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (6,179 samples, 5.29%)</title><rect x="76.2933%" y="869" width="5.2880%" height="15" fill="rgb(208,168,33)" fg:x="89148" fg:w="6179"/><text x="76.5433%" y="879.50">tremor..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,856 samples, 5.01%)</title><rect x="76.5698%" y="853" width="5.0116%" height="15" fill="rgb(231,207,8)" fg:x="89471" fg:w="5856"/><text x="76.8198%" y="863.50">tremor..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (727 samples, 0.62%)</title><rect x="80.9592%" y="837" width="0.6222%" height="15" fill="rgb(235,219,23)" fg:x="94600" fg:w="727"/><text x="81.2092%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (66 samples, 0.06%)</title><rect x="81.5249%" y="821" width="0.0565%" height="15" fill="rgb(226,216,26)" fg:x="95261" fg:w="66"/><text x="81.7749%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="81.7876%" y="821" width="0.0154%" height="15" fill="rgb(239,137,16)" fg:x="95568" fg:w="18"/><text x="82.0376%" y="831.50"></text></g><g><title>tremor_script::ast::Path::segments (14 samples, 0.01%)</title><rect x="81.8116%" y="821" width="0.0120%" height="15" fill="rgb(207,12,36)" fg:x="95596" fg:w="14"/><text x="82.0616%" y="831.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (28 samples, 0.02%)</title><rect x="82.2806%" y="389" width="0.0240%" height="15" fill="rgb(210,214,24)" fg:x="96144" fg:w="28"/><text x="82.5306%" y="399.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (125 samples, 0.11%)</title><rect x="82.2360%" y="501" width="0.1070%" height="15" fill="rgb(206,56,30)" fg:x="96092" fg:w="125"/><text x="82.4860%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (121 samples, 0.10%)</title><rect x="82.2395%" y="485" width="0.1036%" height="15" fill="rgb(228,143,26)" fg:x="96096" fg:w="121"/><text x="82.4895%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (115 samples, 0.10%)</title><rect x="82.2446%" y="469" width="0.0984%" height="15" fill="rgb(216,218,46)" fg:x="96102" fg:w="115"/><text x="82.4946%" y="479.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (115 samples, 0.10%)</title><rect x="82.2446%" y="453" width="0.0984%" height="15" fill="rgb(206,6,19)" fg:x="96102" fg:w="115"/><text x="82.4946%" y="463.50"></text></g><g><title>fxhash::write (103 samples, 0.09%)</title><rect x="82.2549%" y="437" width="0.0881%" height="15" fill="rgb(239,177,51)" fg:x="96114" fg:w="103"/><text x="82.5049%" y="447.50"></text></g><g><title>fxhash::write64 (103 samples, 0.09%)</title><rect x="82.2549%" y="421" width="0.0881%" height="15" fill="rgb(216,55,25)" fg:x="96114" fg:w="103"/><text x="82.5049%" y="431.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (73 samples, 0.06%)</title><rect x="82.2806%" y="405" width="0.0625%" height="15" fill="rgb(231,163,29)" fg:x="96144" fg:w="73"/><text x="82.5306%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (36 samples, 0.03%)</title><rect x="82.3122%" y="389" width="0.0308%" height="15" fill="rgb(232,149,50)" fg:x="96181" fg:w="36"/><text x="82.5622%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (245 samples, 0.21%)</title><rect x="82.1556%" y="629" width="0.2097%" height="15" fill="rgb(223,142,48)" fg:x="95998" fg:w="245"/><text x="82.4056%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (241 samples, 0.21%)</title><rect x="82.1590%" y="613" width="0.2062%" height="15" fill="rgb(245,83,23)" fg:x="96002" fg:w="241"/><text x="82.4090%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (236 samples, 0.20%)</title><rect x="82.1633%" y="597" width="0.2020%" height="15" fill="rgb(224,63,2)" fg:x="96007" fg:w="236"/><text x="82.4133%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (164 samples, 0.14%)</title><rect x="82.2249%" y="581" width="0.1404%" height="15" fill="rgb(218,65,53)" fg:x="96079" fg:w="164"/><text x="82.4749%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (151 samples, 0.13%)</title><rect x="82.2360%" y="565" width="0.1292%" height="15" fill="rgb(221,84,29)" fg:x="96092" fg:w="151"/><text x="82.4860%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (151 samples, 0.13%)</title><rect x="82.2360%" y="549" width="0.1292%" height="15" fill="rgb(234,0,32)" fg:x="96092" fg:w="151"/><text x="82.4860%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (151 samples, 0.13%)</title><rect x="82.2360%" y="533" width="0.1292%" height="15" fill="rgb(206,20,16)" fg:x="96092" fg:w="151"/><text x="82.4860%" y="543.50"></text></g><g><title>core::hash::Hasher::write_str (151 samples, 0.13%)</title><rect x="82.2360%" y="517" width="0.1292%" height="15" fill="rgb(244,172,18)" fg:x="96092" fg:w="151"/><text x="82.4860%" y="527.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (26 samples, 0.02%)</title><rect x="82.3430%" y="501" width="0.0223%" height="15" fill="rgb(254,133,1)" fg:x="96217" fg:w="26"/><text x="82.5930%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (26 samples, 0.02%)</title><rect x="82.3430%" y="485" width="0.0223%" height="15" fill="rgb(222,206,41)" fg:x="96217" fg:w="26"/><text x="82.5930%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (26 samples, 0.02%)</title><rect x="82.3430%" y="469" width="0.0223%" height="15" fill="rgb(212,3,42)" fg:x="96217" fg:w="26"/><text x="82.5930%" y="479.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (26 samples, 0.02%)</title><rect x="82.3430%" y="453" width="0.0223%" height="15" fill="rgb(241,11,4)" fg:x="96217" fg:w="26"/><text x="82.5930%" y="463.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (23 samples, 0.02%)</title><rect x="82.3456%" y="437" width="0.0197%" height="15" fill="rgb(205,19,26)" fg:x="96220" fg:w="23"/><text x="82.5956%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="82.3764%" y="581" width="0.0171%" height="15" fill="rgb(210,179,32)" fg:x="96256" fg:w="20"/><text x="82.6264%" y="591.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (20 samples, 0.02%)</title><rect x="82.3764%" y="565" width="0.0171%" height="15" fill="rgb(227,116,49)" fg:x="96256" fg:w="20"/><text x="82.6264%" y="575.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1,132 samples, 0.97%)</title><rect x="82.3935%" y="565" width="0.9688%" height="15" fill="rgb(211,146,6)" fg:x="96276" fg:w="1132"/><text x="82.6435%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (1,125 samples, 0.96%)</title><rect x="82.3995%" y="549" width="0.9628%" height="15" fill="rgb(219,44,39)" fg:x="96283" fg:w="1125"/><text x="82.6495%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (606 samples, 0.52%)</title><rect x="82.8437%" y="533" width="0.5186%" height="15" fill="rgb(234,128,11)" fg:x="96802" fg:w="606"/><text x="83.0937%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (606 samples, 0.52%)</title><rect x="82.8437%" y="517" width="0.5186%" height="15" fill="rgb(220,183,53)" fg:x="96802" fg:w="606"/><text x="83.0937%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (606 samples, 0.52%)</title><rect x="82.8437%" y="501" width="0.5186%" height="15" fill="rgb(213,219,32)" fg:x="96802" fg:w="606"/><text x="83.0937%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (601 samples, 0.51%)</title><rect x="82.8479%" y="485" width="0.5143%" height="15" fill="rgb(232,156,16)" fg:x="96807" fg:w="601"/><text x="83.0979%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (601 samples, 0.51%)</title><rect x="82.8479%" y="469" width="0.5143%" height="15" fill="rgb(246,135,34)" fg:x="96807" fg:w="601"/><text x="83.0979%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (601 samples, 0.51%)</title><rect x="82.8479%" y="453" width="0.5143%" height="15" fill="rgb(241,99,0)" fg:x="96807" fg:w="601"/><text x="83.0979%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (601 samples, 0.51%)</title><rect x="82.8479%" y="437" width="0.5143%" height="15" fill="rgb(222,103,45)" fg:x="96807" fg:w="601"/><text x="83.0979%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (601 samples, 0.51%)</title><rect x="82.8479%" y="421" width="0.5143%" height="15" fill="rgb(212,57,4)" fg:x="96807" fg:w="601"/><text x="83.0979%" y="431.50"></text></g><g><title>[libc-2.31.so] (582 samples, 0.50%)</title><rect x="82.8642%" y="405" width="0.4981%" height="15" fill="rgb(215,68,47)" fg:x="96826" fg:w="582"/><text x="83.1142%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,157 samples, 0.99%)</title><rect x="82.3935%" y="581" width="0.9902%" height="15" fill="rgb(230,84,2)" fg:x="96276" fg:w="1157"/><text x="82.6435%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (22 samples, 0.02%)</title><rect x="83.3649%" y="565" width="0.0188%" height="15" fill="rgb(220,102,14)" fg:x="97411" fg:w="22"/><text x="83.6149%" y="575.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (22 samples, 0.02%)</title><rect x="83.3649%" y="549" width="0.0188%" height="15" fill="rgb(240,10,32)" fg:x="97411" fg:w="22"/><text x="83.6149%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (13 samples, 0.01%)</title><rect x="83.3726%" y="533" width="0.0111%" height="15" fill="rgb(215,47,27)" fg:x="97420" fg:w="13"/><text x="83.6226%" y="543.50"></text></g><g><title>hashbrown::raw::inner::h2 (20 samples, 0.02%)</title><rect x="83.3845%" y="581" width="0.0171%" height="15" fill="rgb(233,188,43)" fg:x="97434" fg:w="20"/><text x="83.6345%" y="591.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (448 samples, 0.38%)</title><rect x="83.4017%" y="581" width="0.3834%" height="15" fill="rgb(253,190,1)" fg:x="97454" fg:w="448"/><text x="83.6517%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (448 samples, 0.38%)</title><rect x="83.4017%" y="565" width="0.3834%" height="15" fill="rgb(206,114,52)" fg:x="97454" fg:w="448"/><text x="83.6517%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (448 samples, 0.38%)</title><rect x="83.4017%" y="549" width="0.3834%" height="15" fill="rgb(233,120,37)" fg:x="97454" fg:w="448"/><text x="83.6517%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,677 samples, 1.44%)</title><rect x="82.3653%" y="629" width="1.4352%" height="15" fill="rgb(214,52,39)" fg:x="96243" fg:w="1677"/><text x="82.6153%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,677 samples, 1.44%)</title><rect x="82.3653%" y="613" width="1.4352%" height="15" fill="rgb(223,80,29)" fg:x="96243" fg:w="1677"/><text x="82.6153%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,677 samples, 1.44%)</title><rect x="82.3653%" y="597" width="1.4352%" height="15" fill="rgb(230,101,40)" fg:x="96243" fg:w="1677"/><text x="82.6153%" y="607.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (18 samples, 0.02%)</title><rect x="83.7851%" y="581" width="0.0154%" height="15" fill="rgb(219,211,8)" fg:x="97902" fg:w="18"/><text x="84.0351%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="83.7851%" y="565" width="0.0154%" height="15" fill="rgb(252,126,28)" fg:x="97902" fg:w="18"/><text x="84.0351%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (2,057 samples, 1.76%)</title><rect x="82.0580%" y="741" width="1.7604%" height="15" fill="rgb(215,56,38)" fg:x="95884" fg:w="2057"/><text x="82.3080%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (2,052 samples, 1.76%)</title><rect x="82.0623%" y="725" width="1.7561%" height="15" fill="rgb(249,55,44)" fg:x="95889" fg:w="2052"/><text x="82.3123%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (2,052 samples, 1.76%)</title><rect x="82.0623%" y="709" width="1.7561%" height="15" fill="rgb(220,221,32)" fg:x="95889" fg:w="2052"/><text x="82.3123%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (2,052 samples, 1.76%)</title><rect x="82.0623%" y="693" width="1.7561%" height="15" fill="rgb(212,216,41)" fg:x="95889" fg:w="2052"/><text x="82.3123%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (2,044 samples, 1.75%)</title><rect x="82.0692%" y="677" width="1.7493%" height="15" fill="rgb(228,213,43)" fg:x="95897" fg:w="2044"/><text x="82.3192%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,945 samples, 1.66%)</title><rect x="82.1539%" y="661" width="1.6645%" height="15" fill="rgb(211,31,26)" fg:x="95996" fg:w="1945"/><text x="82.4039%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,945 samples, 1.66%)</title><rect x="82.1539%" y="645" width="1.6645%" height="15" fill="rgb(229,202,19)" fg:x="95996" fg:w="1945"/><text x="82.4039%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::is_empty (21 samples, 0.02%)</title><rect x="83.8005%" y="629" width="0.0180%" height="15" fill="rgb(229,105,46)" fg:x="97920" fg:w="21"/><text x="84.0505%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (2,339 samples, 2.00%)</title><rect x="81.8244%" y="757" width="2.0017%" height="15" fill="rgb(235,108,1)" fg:x="95611" fg:w="2339"/><text x="82.0744%" y="767.50">a..</text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,628 samples, 2.25%)</title><rect x="81.5814%" y="869" width="2.2491%" height="15" fill="rgb(245,111,35)" fg:x="95327" fg:w="2628"/><text x="81.8314%" y="879.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,556 samples, 2.19%)</title><rect x="81.6430%" y="853" width="2.1874%" height="15" fill="rgb(219,185,31)" fg:x="95399" fg:w="2556"/><text x="81.8930%" y="863.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,516 samples, 2.15%)</title><rect x="81.6772%" y="837" width="2.1532%" height="15" fill="rgb(214,4,43)" fg:x="95439" fg:w="2516"/><text x="81.9272%" y="847.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (2,345 samples, 2.01%)</title><rect x="81.8236%" y="821" width="2.0069%" height="15" fill="rgb(235,227,40)" fg:x="95610" fg:w="2345"/><text x="82.0736%" y="831.50">t..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,344 samples, 2.01%)</title><rect x="81.8244%" y="805" width="2.0060%" height="15" fill="rgb(230,88,30)" fg:x="95611" fg:w="2344"/><text x="82.0744%" y="815.50">c..</text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (2,344 samples, 2.01%)</title><rect x="81.8244%" y="789" width="2.0060%" height="15" fill="rgb(216,217,1)" fg:x="95611" fg:w="2344"/><text x="82.0744%" y="799.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (2,344 samples, 2.01%)</title><rect x="81.8244%" y="773" width="2.0060%" height="15" fill="rgb(248,139,50)" fg:x="95611" fg:w="2344"/><text x="82.0744%" y="783.50">t..</text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (65 samples, 0.06%)</title><rect x="84.3884%" y="853" width="0.0556%" height="15" fill="rgb(233,1,21)" fg:x="98607" fg:w="65"/><text x="84.6384%" y="863.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 0.06%)</title><rect x="84.3884%" y="837" width="0.0556%" height="15" fill="rgb(215,183,12)" fg:x="98607" fg:w="65"/><text x="84.6384%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (88 samples, 0.08%)</title><rect x="84.4500%" y="853" width="0.0753%" height="15" fill="rgb(229,104,42)" fg:x="98679" fg:w="88"/><text x="84.7000%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (64 samples, 0.05%)</title><rect x="84.5288%" y="837" width="0.0548%" height="15" fill="rgb(243,34,48)" fg:x="98771" fg:w="64"/><text x="84.7788%" y="847.50"></text></g><g><title>tremor_script::interpreter::test_guard (77 samples, 0.07%)</title><rect x="84.5253%" y="853" width="0.0659%" height="15" fill="rgb(239,11,44)" fg:x="98767" fg:w="77"/><text x="84.7753%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (11,298 samples, 9.67%)</title><rect x="75.3323%" y="1045" width="9.6689%" height="15" fill="rgb(231,98,35)" fg:x="88025" fg:w="11298"/><text x="75.5823%" y="1055.50">tremor_pipelin..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (11,298 samples, 9.67%)</title><rect x="75.3323%" y="1029" width="9.6689%" height="15" fill="rgb(233,28,25)" fg:x="88025" fg:w="11298"/><text x="75.5823%" y="1039.50">tremor_pipelin..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (11,298 samples, 9.67%)</title><rect x="75.3323%" y="1013" width="9.6689%" height="15" fill="rgb(234,123,11)" fg:x="88025" fg:w="11298"/><text x="75.5823%" y="1023.50">tremor_pipelin..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (11,298 samples, 9.67%)</title><rect x="75.3323%" y="997" width="9.6689%" height="15" fill="rgb(220,69,3)" fg:x="88025" fg:w="11298"/><text x="75.5823%" y="1007.50">&lt;tremor_pipeli..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (11,211 samples, 9.59%)</title><rect x="75.4067%" y="981" width="9.5944%" height="15" fill="rgb(214,64,36)" fg:x="88112" fg:w="11211"/><text x="75.6567%" y="991.50">&lt;tremor_pipeli..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (11,211 samples, 9.59%)</title><rect x="75.4067%" y="965" width="9.5944%" height="15" fill="rgb(211,138,32)" fg:x="88112" fg:w="11211"/><text x="75.6567%" y="975.50">tremor_script:..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (11,211 samples, 9.59%)</title><rect x="75.4067%" y="949" width="9.5944%" height="15" fill="rgb(213,118,47)" fg:x="88112" fg:w="11211"/><text x="75.6567%" y="959.50">&lt;tremor_pipeli..</text></g><g><title>tremor_script::script::Script::run (11,211 samples, 9.59%)</title><rect x="75.4067%" y="933" width="9.5944%" height="15" fill="rgb(243,124,49)" fg:x="88112" fg:w="11211"/><text x="75.6567%" y="943.50">tremor_script:..</text></g><g><title>tremor_script::ast::Script::run (11,211 samples, 9.59%)</title><rect x="75.4067%" y="917" width="9.5944%" height="15" fill="rgb(221,30,28)" fg:x="88112" fg:w="11211"/><text x="75.6567%" y="927.50">tremor_script:..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (11,024 samples, 9.43%)</title><rect x="75.5668%" y="901" width="9.4344%" height="15" fill="rgb(246,37,13)" fg:x="88299" fg:w="11024"/><text x="75.8168%" y="911.50">tremor_script..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (10,521 samples, 9.00%)</title><rect x="75.9972%" y="885" width="9.0039%" height="15" fill="rgb(249,66,14)" fg:x="88802" fg:w="10521"/><text x="76.2472%" y="895.50">tremor_script..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,368 samples, 1.17%)</title><rect x="83.8304%" y="869" width="1.1707%" height="15" fill="rgb(213,166,5)" fg:x="97955" fg:w="1368"/><text x="84.0804%" y="879.50"></text></g><g><title>tremor_script::interpreter::val_eq (479 samples, 0.41%)</title><rect x="84.5912%" y="853" width="0.4099%" height="15" fill="rgb(221,66,24)" fg:x="98844" fg:w="479"/><text x="84.8412%" y="863.50"></text></g><g><title>[libc-2.31.so] (333 samples, 0.28%)</title><rect x="84.7162%" y="837" width="0.2850%" height="15" fill="rgb(210,132,17)" fg:x="98990" fg:w="333"/><text x="84.9662%" y="847.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="85.0020%" y="1013" width="0.0402%" height="15" fill="rgb(243,202,5)" fg:x="99324" fg:w="47"/><text x="85.2520%" y="1023.50"></text></g><g><title>[libc-2.31.so] (206 samples, 0.18%)</title><rect x="85.1894%" y="949" width="0.1763%" height="15" fill="rgb(233,70,48)" fg:x="99543" fg:w="206"/><text x="85.4394%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (75 samples, 0.06%)</title><rect x="85.4017%" y="933" width="0.0642%" height="15" fill="rgb(238,41,26)" fg:x="99791" fg:w="75"/><text x="85.6517%" y="943.50"></text></g><g><title>core::ptr::write (75 samples, 0.06%)</title><rect x="85.4017%" y="917" width="0.0642%" height="15" fill="rgb(241,19,31)" fg:x="99791" fg:w="75"/><text x="85.6517%" y="927.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.06%)</title><rect x="85.4042%" y="901" width="0.0616%" height="15" fill="rgb(214,76,10)" fg:x="99794" fg:w="72"/><text x="85.6542%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (217 samples, 0.19%)</title><rect x="85.4659%" y="933" width="0.1857%" height="15" fill="rgb(254,202,22)" fg:x="99866" fg:w="217"/><text x="85.7159%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (217 samples, 0.19%)</title><rect x="85.4659%" y="917" width="0.1857%" height="15" fill="rgb(214,72,24)" fg:x="99866" fg:w="217"/><text x="85.7159%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (118 samples, 0.10%)</title><rect x="85.6516%" y="933" width="0.1010%" height="15" fill="rgb(221,92,46)" fg:x="100083" fg:w="118"/><text x="85.9016%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (117 samples, 0.10%)</title><rect x="85.6524%" y="917" width="0.1001%" height="15" fill="rgb(246,13,50)" fg:x="100084" fg:w="117"/><text x="85.9024%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (729 samples, 0.62%)</title><rect x="85.1304%" y="965" width="0.6239%" height="15" fill="rgb(240,165,38)" fg:x="99474" fg:w="729"/><text x="85.3804%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (454 samples, 0.39%)</title><rect x="85.3657%" y="949" width="0.3885%" height="15" fill="rgb(241,24,51)" fg:x="99749" fg:w="454"/><text x="85.6157%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (29 samples, 0.02%)</title><rect x="85.7585%" y="949" width="0.0248%" height="15" fill="rgb(227,51,44)" fg:x="100208" fg:w="29"/><text x="86.0085%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (23 samples, 0.02%)</title><rect x="85.7637%" y="933" width="0.0197%" height="15" fill="rgb(231,121,3)" fg:x="100214" fg:w="23"/><text x="86.0137%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="85.7637%" y="917" width="0.0197%" height="15" fill="rgb(245,3,41)" fg:x="100214" fg:w="23"/><text x="86.0137%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="85.7654%" y="901" width="0.0180%" height="15" fill="rgb(214,13,26)" fg:x="100216" fg:w="21"/><text x="86.0154%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (21 samples, 0.02%)</title><rect x="85.7654%" y="885" width="0.0180%" height="15" fill="rgb(252,75,11)" fg:x="100216" fg:w="21"/><text x="86.0154%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.02%)</title><rect x="85.7654%" y="869" width="0.0180%" height="15" fill="rgb(218,226,17)" fg:x="100216" fg:w="21"/><text x="86.0154%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.02%)</title><rect x="85.7654%" y="853" width="0.0180%" height="15" fill="rgb(248,89,38)" fg:x="100216" fg:w="21"/><text x="86.0154%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.02%)</title><rect x="85.7834%" y="949" width="0.0180%" height="15" fill="rgb(237,73,46)" fg:x="100237" fg:w="21"/><text x="86.0334%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="85.7834%" y="933" width="0.0180%" height="15" fill="rgb(242,78,33)" fg:x="100237" fg:w="21"/><text x="86.0334%" y="943.50"></text></g><g><title>event_listener::Inner::lock (30 samples, 0.03%)</title><rect x="85.8013%" y="949" width="0.0257%" height="15" fill="rgb(235,60,3)" fg:x="100258" fg:w="30"/><text x="86.0513%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.02%)</title><rect x="85.8030%" y="933" width="0.0240%" height="15" fill="rgb(216,172,19)" fg:x="100260" fg:w="28"/><text x="86.0530%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (26 samples, 0.02%)</title><rect x="85.8048%" y="917" width="0.0223%" height="15" fill="rgb(227,6,42)" fg:x="100262" fg:w="26"/><text x="86.0548%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (26 samples, 0.02%)</title><rect x="85.8048%" y="901" width="0.0223%" height="15" fill="rgb(223,207,42)" fg:x="100262" fg:w="26"/><text x="86.0548%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (26 samples, 0.02%)</title><rect x="85.8048%" y="885" width="0.0223%" height="15" fill="rgb(246,138,30)" fg:x="100262" fg:w="26"/><text x="86.0548%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="85.8048%" y="869" width="0.0223%" height="15" fill="rgb(251,199,47)" fg:x="100262" fg:w="26"/><text x="86.0548%" y="879.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (19 samples, 0.02%)</title><rect x="85.8339%" y="901" width="0.0163%" height="15" fill="rgb(228,218,44)" fg:x="100296" fg:w="19"/><text x="86.0839%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.02%)</title><rect x="85.8339%" y="885" width="0.0163%" height="15" fill="rgb(220,68,6)" fg:x="100296" fg:w="19"/><text x="86.0839%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.02%)</title><rect x="85.8339%" y="869" width="0.0163%" height="15" fill="rgb(240,60,26)" fg:x="100296" fg:w="19"/><text x="86.0839%" y="879.50"></text></g><g><title>async_executor::Sleepers::notify (15 samples, 0.01%)</title><rect x="85.8552%" y="853" width="0.0128%" height="15" fill="rgb(211,200,19)" fg:x="100321" fg:w="15"/><text x="86.1052%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (52 samples, 0.04%)</title><rect x="85.8681%" y="789" width="0.0445%" height="15" fill="rgb(242,145,30)" fg:x="100336" fg:w="52"/><text x="86.1181%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.04%)</title><rect x="85.8681%" y="773" width="0.0445%" height="15" fill="rgb(225,64,13)" fg:x="100336" fg:w="52"/><text x="86.1181%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (56 samples, 0.05%)</title><rect x="85.8681%" y="853" width="0.0479%" height="15" fill="rgb(218,103,35)" fg:x="100336" fg:w="56"/><text x="86.1181%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="85.8681%" y="837" width="0.0479%" height="15" fill="rgb(216,93,46)" fg:x="100336" fg:w="56"/><text x="86.1181%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (56 samples, 0.05%)</title><rect x="85.8681%" y="821" width="0.0479%" height="15" fill="rgb(225,159,27)" fg:x="100336" fg:w="56"/><text x="86.1181%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (56 samples, 0.05%)</title><rect x="85.8681%" y="805" width="0.0479%" height="15" fill="rgb(225,204,11)" fg:x="100336" fg:w="56"/><text x="86.1181%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (27 samples, 0.02%)</title><rect x="85.9160%" y="853" width="0.0231%" height="15" fill="rgb(205,56,4)" fg:x="100392" fg:w="27"/><text x="86.1660%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.02%)</title><rect x="85.9160%" y="837" width="0.0231%" height="15" fill="rgb(206,6,35)" fg:x="100392" fg:w="27"/><text x="86.1660%" y="847.50"></text></g><g><title>async_io::reactor::Reactor::notify (16 samples, 0.01%)</title><rect x="85.9425%" y="805" width="0.0137%" height="15" fill="rgb(247,73,52)" fg:x="100423" fg:w="16"/><text x="86.1925%" y="815.50"></text></g><g><title>polling::Poller::notify (16 samples, 0.01%)</title><rect x="85.9425%" y="789" width="0.0137%" height="15" fill="rgb(246,97,4)" fg:x="100423" fg:w="16"/><text x="86.1925%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (62 samples, 0.05%)</title><rect x="85.9793%" y="773" width="0.0531%" height="15" fill="rgb(212,37,15)" fg:x="100466" fg:w="62"/><text x="86.2293%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (62 samples, 0.05%)</title><rect x="85.9793%" y="757" width="0.0531%" height="15" fill="rgb(208,130,40)" fg:x="100466" fg:w="62"/><text x="86.2293%" y="767.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (16 samples, 0.01%)</title><rect x="86.0324%" y="773" width="0.0137%" height="15" fill="rgb(236,55,29)" fg:x="100528" fg:w="16"/><text x="86.2824%" y="783.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (16 samples, 0.01%)</title><rect x="86.0324%" y="757" width="0.0137%" height="15" fill="rgb(209,156,45)" fg:x="100528" fg:w="16"/><text x="86.2824%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (16 samples, 0.01%)</title><rect x="86.0324%" y="741" width="0.0137%" height="15" fill="rgb(249,107,4)" fg:x="100528" fg:w="16"/><text x="86.2824%" y="751.50"></text></g><g><title>parking::Unparker::unpark (104 samples, 0.09%)</title><rect x="85.9622%" y="805" width="0.0890%" height="15" fill="rgb(227,7,13)" fg:x="100446" fg:w="104"/><text x="86.2122%" y="815.50"></text></g><g><title>parking::Inner::unpark (92 samples, 0.08%)</title><rect x="85.9725%" y="789" width="0.0787%" height="15" fill="rgb(250,129,14)" fg:x="100458" fg:w="92"/><text x="86.2225%" y="799.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (133 samples, 0.11%)</title><rect x="85.9391%" y="821" width="0.1138%" height="15" fill="rgb(229,92,13)" fg:x="100419" fg:w="133"/><text x="86.1891%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (189 samples, 0.16%)</title><rect x="85.9391%" y="853" width="0.1617%" height="15" fill="rgb(245,98,39)" fg:x="100419" fg:w="189"/><text x="86.1891%" y="863.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (189 samples, 0.16%)</title><rect x="85.9391%" y="837" width="0.1617%" height="15" fill="rgb(234,135,48)" fg:x="100419" fg:w="189"/><text x="86.1891%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (56 samples, 0.05%)</title><rect x="86.0529%" y="821" width="0.0479%" height="15" fill="rgb(230,98,28)" fg:x="100552" fg:w="56"/><text x="86.3029%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="86.0529%" y="805" width="0.0479%" height="15" fill="rgb(223,121,0)" fg:x="100552" fg:w="56"/><text x="86.3029%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (53 samples, 0.05%)</title><rect x="86.0555%" y="789" width="0.0454%" height="15" fill="rgb(234,173,33)" fg:x="100555" fg:w="53"/><text x="86.3055%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (53 samples, 0.05%)</title><rect x="86.0555%" y="773" width="0.0454%" height="15" fill="rgb(245,47,8)" fg:x="100555" fg:w="53"/><text x="86.3055%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (42 samples, 0.04%)</title><rect x="86.1094%" y="805" width="0.0359%" height="15" fill="rgb(205,17,20)" fg:x="100618" fg:w="42"/><text x="86.3594%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="86.1094%" y="789" width="0.0359%" height="15" fill="rgb(232,151,16)" fg:x="100618" fg:w="42"/><text x="86.3594%" y="799.50"></text></g><g><title>async_executor::State::notify (370 samples, 0.32%)</title><rect x="85.8535%" y="869" width="0.3166%" height="15" fill="rgb(208,30,32)" fg:x="100319" fg:w="370"/><text x="86.1035%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (81 samples, 0.07%)</title><rect x="86.1009%" y="853" width="0.0693%" height="15" fill="rgb(254,26,3)" fg:x="100608" fg:w="81"/><text x="86.3509%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (73 samples, 0.06%)</title><rect x="86.1077%" y="837" width="0.0625%" height="15" fill="rgb(240,177,30)" fg:x="100616" fg:w="73"/><text x="86.3577%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (73 samples, 0.06%)</title><rect x="86.1077%" y="821" width="0.0625%" height="15" fill="rgb(248,76,44)" fg:x="100616" fg:w="73"/><text x="86.3577%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (29 samples, 0.02%)</title><rect x="86.1454%" y="805" width="0.0248%" height="15" fill="rgb(241,186,54)" fg:x="100660" fg:w="29"/><text x="86.3954%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (15 samples, 0.01%)</title><rect x="86.1573%" y="789" width="0.0128%" height="15" fill="rgb(249,171,29)" fg:x="100674" fg:w="15"/><text x="86.4073%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (79 samples, 0.07%)</title><rect x="86.1796%" y="837" width="0.0676%" height="15" fill="rgb(237,151,44)" fg:x="100700" fg:w="79"/><text x="86.4296%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (79 samples, 0.07%)</title><rect x="86.1796%" y="821" width="0.0676%" height="15" fill="rgb(228,174,30)" fg:x="100700" fg:w="79"/><text x="86.4296%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (20 samples, 0.02%)</title><rect x="86.2481%" y="837" width="0.0171%" height="15" fill="rgb(252,14,37)" fg:x="100780" fg:w="20"/><text x="86.4981%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_or (20 samples, 0.02%)</title><rect x="86.2481%" y="821" width="0.0171%" height="15" fill="rgb(207,111,40)" fg:x="100780" fg:w="20"/><text x="86.4981%" y="831.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (483 samples, 0.41%)</title><rect x="85.8535%" y="885" width="0.4134%" height="15" fill="rgb(248,171,54)" fg:x="100319" fg:w="483"/><text x="86.1035%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (113 samples, 0.10%)</title><rect x="86.1702%" y="869" width="0.0967%" height="15" fill="rgb(211,127,2)" fg:x="100689" fg:w="113"/><text x="86.4202%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (109 samples, 0.09%)</title><rect x="86.1736%" y="853" width="0.0933%" height="15" fill="rgb(236,87,47)" fg:x="100693" fg:w="109"/><text x="86.4236%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (88 samples, 0.08%)</title><rect x="86.2669%" y="885" width="0.0753%" height="15" fill="rgb(223,190,45)" fg:x="100802" fg:w="88"/><text x="86.5169%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (88 samples, 0.08%)</title><rect x="86.2669%" y="869" width="0.0753%" height="15" fill="rgb(215,5,16)" fg:x="100802" fg:w="88"/><text x="86.5169%" y="879.50"></text></g><g><title>event_listener::List::notify (625 samples, 0.53%)</title><rect x="85.8270%" y="949" width="0.5349%" height="15" fill="rgb(252,82,33)" fg:x="100288" fg:w="625"/><text x="86.0770%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake (620 samples, 0.53%)</title><rect x="85.8313%" y="933" width="0.5306%" height="15" fill="rgb(247,213,44)" fg:x="100293" fg:w="620"/><text x="86.0813%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (618 samples, 0.53%)</title><rect x="85.8330%" y="917" width="0.5289%" height="15" fill="rgb(205,196,44)" fg:x="100295" fg:w="618"/><text x="86.0830%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (598 samples, 0.51%)</title><rect x="85.8501%" y="901" width="0.5118%" height="15" fill="rgb(237,96,54)" fg:x="100315" fg:w="598"/><text x="86.1001%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 0.02%)</title><rect x="86.3422%" y="885" width="0.0197%" height="15" fill="rgb(230,113,34)" fg:x="100890" fg:w="23"/><text x="86.5922%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="86.3422%" y="869" width="0.0197%" height="15" fill="rgb(221,224,12)" fg:x="100890" fg:w="23"/><text x="86.5922%" y="879.50"></text></g><g><title>event_listener::full_fence (730 samples, 0.62%)</title><rect x="86.3619%" y="949" width="0.6247%" height="15" fill="rgb(219,112,44)" fg:x="100913" fg:w="730"/><text x="86.6119%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (727 samples, 0.62%)</title><rect x="86.3645%" y="933" width="0.6222%" height="15" fill="rgb(210,31,13)" fg:x="100916" fg:w="727"/><text x="86.6145%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (727 samples, 0.62%)</title><rect x="86.3645%" y="917" width="0.6222%" height="15" fill="rgb(230,25,16)" fg:x="100916" fg:w="727"/><text x="86.6145%" y="927.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,175 samples, 1.86%)</title><rect x="85.1261%" y="981" width="1.8614%" height="15" fill="rgb(246,108,53)" fg:x="99469" fg:w="2175"/><text x="85.3761%" y="991.50">a..</text></g><g><title>event_listener::Event::notify (1,441 samples, 1.23%)</title><rect x="85.7543%" y="965" width="1.2332%" height="15" fill="rgb(241,172,50)" fg:x="100203" fg:w="1441"/><text x="86.0043%" y="975.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,318 samples, 1.98%)</title><rect x="85.0996%" y="997" width="1.9838%" height="15" fill="rgb(235,141,10)" fg:x="99438" fg:w="2318"/><text x="85.3496%" y="1007.50">&lt;..</text></g><g><title>event_listener::Event::notify (101 samples, 0.09%)</title><rect x="86.9969%" y="981" width="0.0864%" height="15" fill="rgb(220,174,43)" fg:x="101655" fg:w="101"/><text x="87.2469%" y="991.50"></text></g><g><title>event_listener::full_fence (96 samples, 0.08%)</title><rect x="87.0012%" y="965" width="0.0822%" height="15" fill="rgb(215,181,40)" fg:x="101660" fg:w="96"/><text x="87.2512%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (92 samples, 0.08%)</title><rect x="87.0046%" y="949" width="0.0787%" height="15" fill="rgb(230,97,2)" fg:x="101664" fg:w="92"/><text x="87.2546%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (92 samples, 0.08%)</title><rect x="87.0046%" y="933" width="0.0787%" height="15" fill="rgb(211,25,27)" fg:x="101664" fg:w="92"/><text x="87.2546%" y="943.50"></text></g><g><title>[libc-2.31.so] (314 samples, 0.27%)</title><rect x="87.0910%" y="997" width="0.2687%" height="15" fill="rgb(230,87,26)" fg:x="101765" fg:w="314"/><text x="87.3410%" y="1007.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (17,724 samples, 15.17%)</title><rect x="72.1975%" y="1077" width="15.1683%" height="15" fill="rgb(227,160,17)" fg:x="84362" fg:w="17724"/><text x="72.4475%" y="1087.50">tremor_runtime::pipelin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,061 samples, 12.03%)</title><rect x="75.3323%" y="1061" width="12.0335%" height="15" fill="rgb(244,85,34)" fg:x="88025" fg:w="14061"/><text x="75.5823%" y="1071.50">&lt;core::future::fro..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,763 samples, 2.36%)</title><rect x="85.0012%" y="1045" width="2.3646%" height="15" fill="rgb(207,70,0)" fg:x="99323" fg:w="2763"/><text x="85.2512%" y="1055.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,763 samples, 2.36%)</title><rect x="85.0012%" y="1029" width="2.3646%" height="15" fill="rgb(223,129,7)" fg:x="99323" fg:w="2763"/><text x="85.2512%" y="1039.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,715 samples, 2.32%)</title><rect x="85.0422%" y="1013" width="2.3235%" height="15" fill="rgb(246,105,7)" fg:x="99371" fg:w="2715"/><text x="85.2922%" y="1023.50">t..</text></g><g><title>tremor_runtime::postprocessor::postprocess (31 samples, 0.03%)</title><rect x="87.3666%" y="1077" width="0.0265%" height="15" fill="rgb(215,154,42)" fg:x="102087" fg:w="31"/><text x="87.6166%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="87.4547%" y="933" width="0.0163%" height="15" fill="rgb(220,215,30)" fg:x="102190" fg:w="19"/><text x="87.7047%" y="943.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (215 samples, 0.18%)</title><rect x="87.4847%" y="869" width="0.1840%" height="15" fill="rgb(228,81,51)" fg:x="102225" fg:w="215"/><text x="87.7347%" y="879.50"></text></g><g><title>tremor_script::ast::Script::run (319 samples, 0.27%)</title><rect x="87.4000%" y="1077" width="0.2730%" height="15" fill="rgb(247,71,54)" fg:x="102126" fg:w="319"/><text x="87.6500%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (316 samples, 0.27%)</title><rect x="87.4025%" y="1061" width="0.2704%" height="15" fill="rgb(234,176,34)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (316 samples, 0.27%)</title><rect x="87.4025%" y="1045" width="0.2704%" height="15" fill="rgb(241,103,54)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (316 samples, 0.27%)</title><rect x="87.4025%" y="1029" width="0.2704%" height="15" fill="rgb(228,22,34)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (316 samples, 0.27%)</title><rect x="87.4025%" y="1013" width="0.2704%" height="15" fill="rgb(241,179,48)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (316 samples, 0.27%)</title><rect x="87.4025%" y="997" width="0.2704%" height="15" fill="rgb(235,167,37)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="1007.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (316 samples, 0.27%)</title><rect x="87.4025%" y="981" width="0.2704%" height="15" fill="rgb(213,109,30)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve (316 samples, 0.27%)</title><rect x="87.4025%" y="965" width="0.2704%" height="15" fill="rgb(222,172,16)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve_value (316 samples, 0.27%)</title><rect x="87.4025%" y="949" width="0.2704%" height="15" fill="rgb(233,192,5)" fg:x="102129" fg:w="316"/><text x="87.6525%" y="959.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (220 samples, 0.19%)</title><rect x="87.4847%" y="933" width="0.1883%" height="15" fill="rgb(247,189,41)" fg:x="102225" fg:w="220"/><text x="87.7347%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (220 samples, 0.19%)</title><rect x="87.4847%" y="917" width="0.1883%" height="15" fill="rgb(218,134,47)" fg:x="102225" fg:w="220"/><text x="87.7347%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (220 samples, 0.19%)</title><rect x="87.4847%" y="901" width="0.1883%" height="15" fill="rgb(216,29,3)" fg:x="102225" fg:w="220"/><text x="87.7347%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (220 samples, 0.19%)</title><rect x="87.4847%" y="885" width="0.1883%" height="15" fill="rgb(246,140,12)" fg:x="102225" fg:w="220"/><text x="87.7347%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (42 samples, 0.04%)</title><rect x="87.6730%" y="1077" width="0.0359%" height="15" fill="rgb(230,136,11)" fg:x="102445" fg:w="42"/><text x="87.9230%" y="1087.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.02%)</title><rect x="87.7551%" y="757" width="0.0223%" height="15" fill="rgb(247,22,47)" fg:x="102541" fg:w="26"/><text x="88.0051%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (26 samples, 0.02%)</title><rect x="87.7551%" y="741" width="0.0223%" height="15" fill="rgb(218,84,22)" fg:x="102541" fg:w="26"/><text x="88.0051%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (26 samples, 0.02%)</title><rect x="87.7551%" y="725" width="0.0223%" height="15" fill="rgb(216,87,39)" fg:x="102541" fg:w="26"/><text x="88.0051%" y="735.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (13 samples, 0.01%)</title><rect x="87.7663%" y="709" width="0.0111%" height="15" fill="rgb(221,178,8)" fg:x="102554" fg:w="13"/><text x="88.0163%" y="719.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (13 samples, 0.01%)</title><rect x="87.7663%" y="693" width="0.0111%" height="15" fill="rgb(230,42,11)" fg:x="102554" fg:w="13"/><text x="88.0163%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13 samples, 0.01%)</title><rect x="87.7663%" y="677" width="0.0111%" height="15" fill="rgb(237,229,4)" fg:x="102554" fg:w="13"/><text x="88.0163%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (13 samples, 0.01%)</title><rect x="87.7663%" y="661" width="0.0111%" height="15" fill="rgb(222,31,33)" fg:x="102554" fg:w="13"/><text x="88.0163%" y="671.50"></text></g><g><title>core::hash::Hasher::write_str (13 samples, 0.01%)</title><rect x="87.7663%" y="645" width="0.0111%" height="15" fill="rgb(210,17,39)" fg:x="102554" fg:w="13"/><text x="88.0163%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.01%)</title><rect x="87.7800%" y="709" width="0.0120%" height="15" fill="rgb(244,93,20)" fg:x="102570" fg:w="14"/><text x="88.0300%" y="719.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (14 samples, 0.01%)</title><rect x="87.7800%" y="693" width="0.0120%" height="15" fill="rgb(210,40,47)" fg:x="102570" fg:w="14"/><text x="88.0300%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="87.7800%" y="677" width="0.0120%" height="15" fill="rgb(239,211,47)" fg:x="102570" fg:w="14"/><text x="88.0300%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (50 samples, 0.04%)</title><rect x="87.7534%" y="869" width="0.0428%" height="15" fill="rgb(251,223,49)" fg:x="102539" fg:w="50"/><text x="88.0034%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (50 samples, 0.04%)</title><rect x="87.7534%" y="853" width="0.0428%" height="15" fill="rgb(221,149,5)" fg:x="102539" fg:w="50"/><text x="88.0034%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (50 samples, 0.04%)</title><rect x="87.7534%" y="837" width="0.0428%" height="15" fill="rgb(219,224,51)" fg:x="102539" fg:w="50"/><text x="88.0034%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (50 samples, 0.04%)</title><rect x="87.7534%" y="821" width="0.0428%" height="15" fill="rgb(223,7,8)" fg:x="102539" fg:w="50"/><text x="88.0034%" y="831.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (48 samples, 0.04%)</title><rect x="87.7551%" y="805" width="0.0411%" height="15" fill="rgb(241,217,22)" fg:x="102541" fg:w="48"/><text x="88.0051%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (48 samples, 0.04%)</title><rect x="87.7551%" y="789" width="0.0411%" height="15" fill="rgb(248,209,0)" fg:x="102541" fg:w="48"/><text x="88.0051%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (48 samples, 0.04%)</title><rect x="87.7551%" y="773" width="0.0411%" height="15" fill="rgb(217,205,4)" fg:x="102541" fg:w="48"/><text x="88.0051%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (22 samples, 0.02%)</title><rect x="87.7774%" y="757" width="0.0188%" height="15" fill="rgb(228,124,39)" fg:x="102567" fg:w="22"/><text x="88.0274%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (22 samples, 0.02%)</title><rect x="87.7774%" y="741" width="0.0188%" height="15" fill="rgb(250,116,42)" fg:x="102567" fg:w="22"/><text x="88.0274%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (22 samples, 0.02%)</title><rect x="87.7774%" y="725" width="0.0188%" height="15" fill="rgb(223,202,9)" fg:x="102567" fg:w="22"/><text x="88.0274%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (75 samples, 0.06%)</title><rect x="87.7329%" y="885" width="0.0642%" height="15" fill="rgb(242,222,40)" fg:x="102515" fg:w="75"/><text x="87.9829%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (82 samples, 0.07%)</title><rect x="87.7278%" y="1061" width="0.0702%" height="15" fill="rgb(229,99,46)" fg:x="102509" fg:w="82"/><text x="87.9778%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (82 samples, 0.07%)</title><rect x="87.7278%" y="1045" width="0.0702%" height="15" fill="rgb(225,56,46)" fg:x="102509" fg:w="82"/><text x="87.9778%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (82 samples, 0.07%)</title><rect x="87.7278%" y="1029" width="0.0702%" height="15" fill="rgb(227,94,5)" fg:x="102509" fg:w="82"/><text x="87.9778%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (82 samples, 0.07%)</title><rect x="87.7278%" y="1013" width="0.0702%" height="15" fill="rgb(205,112,38)" fg:x="102509" fg:w="82"/><text x="87.9778%" y="1023.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (82 samples, 0.07%)</title><rect x="87.7278%" y="997" width="0.0702%" height="15" fill="rgb(231,133,46)" fg:x="102509" fg:w="82"/><text x="87.9778%" y="1007.50"></text></g><g><title>tremor_script::interpreter::resolve (82 samples, 0.07%)</title><rect x="87.7278%" y="981" width="0.0702%" height="15" fill="rgb(217,16,9)" fg:x="102509" fg:w="82"/><text x="87.9778%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve_value (82 samples, 0.07%)</title><rect x="87.7278%" y="965" width="0.0702%" height="15" fill="rgb(249,173,9)" fg:x="102509" fg:w="82"/><text x="87.9778%" y="975.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (76 samples, 0.07%)</title><rect x="87.7329%" y="949" width="0.0650%" height="15" fill="rgb(205,163,53)" fg:x="102515" fg:w="76"/><text x="87.9829%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (76 samples, 0.07%)</title><rect x="87.7329%" y="933" width="0.0650%" height="15" fill="rgb(217,54,41)" fg:x="102515" fg:w="76"/><text x="87.9829%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (76 samples, 0.07%)</title><rect x="87.7329%" y="917" width="0.0650%" height="15" fill="rgb(228,216,12)" fg:x="102515" fg:w="76"/><text x="87.9829%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (76 samples, 0.07%)</title><rect x="87.7329%" y="901" width="0.0650%" height="15" fill="rgb(244,228,15)" fg:x="102515" fg:w="76"/><text x="87.9829%" y="911.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.01%)</title><rect x="87.9648%" y="517" width="0.0120%" height="15" fill="rgb(221,176,53)" fg:x="102786" fg:w="14"/><text x="88.2148%" y="527.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (84 samples, 0.07%)</title><rect x="87.9263%" y="629" width="0.0719%" height="15" fill="rgb(205,94,34)" fg:x="102741" fg:w="84"/><text x="88.1763%" y="639.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (76 samples, 0.07%)</title><rect x="87.9331%" y="613" width="0.0650%" height="15" fill="rgb(213,110,48)" fg:x="102749" fg:w="76"/><text x="88.1831%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (76 samples, 0.07%)</title><rect x="87.9331%" y="597" width="0.0650%" height="15" fill="rgb(236,142,28)" fg:x="102749" fg:w="76"/><text x="88.1831%" y="607.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (76 samples, 0.07%)</title><rect x="87.9331%" y="581" width="0.0650%" height="15" fill="rgb(225,135,29)" fg:x="102749" fg:w="76"/><text x="88.1831%" y="591.50"></text></g><g><title>fxhash::write (70 samples, 0.06%)</title><rect x="87.9383%" y="565" width="0.0599%" height="15" fill="rgb(252,45,31)" fg:x="102755" fg:w="70"/><text x="88.1883%" y="575.50"></text></g><g><title>fxhash::write64 (70 samples, 0.06%)</title><rect x="87.9383%" y="549" width="0.0599%" height="15" fill="rgb(211,187,50)" fg:x="102755" fg:w="70"/><text x="88.1883%" y="559.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (42 samples, 0.04%)</title><rect x="87.9622%" y="533" width="0.0359%" height="15" fill="rgb(229,109,7)" fg:x="102783" fg:w="42"/><text x="88.2122%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (25 samples, 0.02%)</title><rect x="87.9768%" y="517" width="0.0214%" height="15" fill="rgb(251,131,51)" fg:x="102800" fg:w="25"/><text x="88.2268%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (260 samples, 0.22%)</title><rect x="87.8014%" y="757" width="0.2225%" height="15" fill="rgb(251,180,35)" fg:x="102595" fg:w="260"/><text x="88.0514%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (257 samples, 0.22%)</title><rect x="87.8039%" y="741" width="0.2199%" height="15" fill="rgb(211,46,32)" fg:x="102598" fg:w="257"/><text x="88.0539%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (253 samples, 0.22%)</title><rect x="87.8073%" y="725" width="0.2165%" height="15" fill="rgb(248,123,17)" fg:x="102602" fg:w="253"/><text x="88.0573%" y="735.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (125 samples, 0.11%)</title><rect x="87.9169%" y="709" width="0.1070%" height="15" fill="rgb(227,141,18)" fg:x="102730" fg:w="125"/><text x="88.1669%" y="719.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (114 samples, 0.10%)</title><rect x="87.9263%" y="693" width="0.0976%" height="15" fill="rgb(216,102,9)" fg:x="102741" fg:w="114"/><text x="88.1763%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (114 samples, 0.10%)</title><rect x="87.9263%" y="677" width="0.0976%" height="15" fill="rgb(253,47,13)" fg:x="102741" fg:w="114"/><text x="88.1763%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (114 samples, 0.10%)</title><rect x="87.9263%" y="661" width="0.0976%" height="15" fill="rgb(226,93,23)" fg:x="102741" fg:w="114"/><text x="88.1763%" y="671.50"></text></g><g><title>core::hash::Hasher::write_str (114 samples, 0.10%)</title><rect x="87.9263%" y="645" width="0.0976%" height="15" fill="rgb(247,104,17)" fg:x="102741" fg:w="114"/><text x="88.1763%" y="655.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (30 samples, 0.03%)</title><rect x="87.9982%" y="629" width="0.0257%" height="15" fill="rgb(233,203,26)" fg:x="102825" fg:w="30"/><text x="88.2482%" y="639.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (30 samples, 0.03%)</title><rect x="87.9982%" y="613" width="0.0257%" height="15" fill="rgb(244,98,49)" fg:x="102825" fg:w="30"/><text x="88.2482%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (30 samples, 0.03%)</title><rect x="87.9982%" y="597" width="0.0257%" height="15" fill="rgb(235,134,22)" fg:x="102825" fg:w="30"/><text x="88.2482%" y="607.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (30 samples, 0.03%)</title><rect x="87.9982%" y="581" width="0.0257%" height="15" fill="rgb(221,70,32)" fg:x="102825" fg:w="30"/><text x="88.2482%" y="591.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (30 samples, 0.03%)</title><rect x="87.9982%" y="565" width="0.0257%" height="15" fill="rgb(238,15,50)" fg:x="102825" fg:w="30"/><text x="88.2482%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (17 samples, 0.01%)</title><rect x="88.0093%" y="549" width="0.0145%" height="15" fill="rgb(215,221,48)" fg:x="102838" fg:w="17"/><text x="88.2593%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="88.0273%" y="709" width="0.0137%" height="15" fill="rgb(236,73,3)" fg:x="102859" fg:w="16"/><text x="88.2773%" y="719.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (16 samples, 0.01%)</title><rect x="88.0273%" y="693" width="0.0137%" height="15" fill="rgb(250,107,11)" fg:x="102859" fg:w="16"/><text x="88.2773%" y="703.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (116 samples, 0.10%)</title><rect x="88.0410%" y="693" width="0.0993%" height="15" fill="rgb(242,39,14)" fg:x="102875" fg:w="116"/><text x="88.2910%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (112 samples, 0.10%)</title><rect x="88.0444%" y="677" width="0.0959%" height="15" fill="rgb(248,164,37)" fg:x="102879" fg:w="112"/><text x="88.2944%" y="687.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (80 samples, 0.07%)</title><rect x="88.0718%" y="661" width="0.0685%" height="15" fill="rgb(217,60,12)" fg:x="102911" fg:w="80"/><text x="88.3218%" y="671.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (80 samples, 0.07%)</title><rect x="88.0718%" y="645" width="0.0685%" height="15" fill="rgb(240,125,29)" fg:x="102911" fg:w="80"/><text x="88.3218%" y="655.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (80 samples, 0.07%)</title><rect x="88.0718%" y="629" width="0.0685%" height="15" fill="rgb(208,207,28)" fg:x="102911" fg:w="80"/><text x="88.3218%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (77 samples, 0.07%)</title><rect x="88.0744%" y="613" width="0.0659%" height="15" fill="rgb(209,159,27)" fg:x="102914" fg:w="77"/><text x="88.3244%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (77 samples, 0.07%)</title><rect x="88.0744%" y="597" width="0.0659%" height="15" fill="rgb(251,176,53)" fg:x="102914" fg:w="77"/><text x="88.3244%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (77 samples, 0.07%)</title><rect x="88.0744%" y="581" width="0.0659%" height="15" fill="rgb(211,85,7)" fg:x="102914" fg:w="77"/><text x="88.3244%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (77 samples, 0.07%)</title><rect x="88.0744%" y="565" width="0.0659%" height="15" fill="rgb(216,64,54)" fg:x="102914" fg:w="77"/><text x="88.3244%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (77 samples, 0.07%)</title><rect x="88.0744%" y="549" width="0.0659%" height="15" fill="rgb(217,54,24)" fg:x="102914" fg:w="77"/><text x="88.3244%" y="559.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.05%)</title><rect x="88.0863%" y="533" width="0.0539%" height="15" fill="rgb(208,206,53)" fg:x="102928" fg:w="63"/><text x="88.3363%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (129 samples, 0.11%)</title><rect x="88.0410%" y="709" width="0.1104%" height="15" fill="rgb(251,74,39)" fg:x="102875" fg:w="129"/><text x="88.2910%" y="719.50"></text></g><g><title>hashbrown::raw::inner::h2 (13 samples, 0.01%)</title><rect x="88.1565%" y="709" width="0.0111%" height="15" fill="rgb(226,47,5)" fg:x="103010" fg:w="13"/><text x="88.4065%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (34 samples, 0.03%)</title><rect x="88.1676%" y="709" width="0.0291%" height="15" fill="rgb(234,111,33)" fg:x="103023" fg:w="34"/><text x="88.4176%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (34 samples, 0.03%)</title><rect x="88.1676%" y="693" width="0.0291%" height="15" fill="rgb(251,14,10)" fg:x="103023" fg:w="34"/><text x="88.4176%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="88.1676%" y="677" width="0.0291%" height="15" fill="rgb(232,43,0)" fg:x="103023" fg:w="34"/><text x="88.4176%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (211 samples, 0.18%)</title><rect x="88.0239%" y="757" width="0.1806%" height="15" fill="rgb(222,68,43)" fg:x="102855" fg:w="211"/><text x="88.2739%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (211 samples, 0.18%)</title><rect x="88.0239%" y="741" width="0.1806%" height="15" fill="rgb(217,24,23)" fg:x="102855" fg:w="211"/><text x="88.2739%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (211 samples, 0.18%)</title><rect x="88.0239%" y="725" width="0.1806%" height="15" fill="rgb(229,209,14)" fg:x="102855" fg:w="211"/><text x="88.2739%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (581 samples, 0.50%)</title><rect x="87.7158%" y="1077" width="0.4972%" height="15" fill="rgb(250,149,48)" fg:x="102495" fg:w="581"/><text x="87.9658%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (485 samples, 0.42%)</title><rect x="87.7979%" y="1061" width="0.4151%" height="15" fill="rgb(210,120,37)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (485 samples, 0.42%)</title><rect x="87.7979%" y="1045" width="0.4151%" height="15" fill="rgb(210,21,8)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (485 samples, 0.42%)</title><rect x="87.7979%" y="1029" width="0.4151%" height="15" fill="rgb(243,145,7)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (485 samples, 0.42%)</title><rect x="87.7979%" y="1013" width="0.4151%" height="15" fill="rgb(238,178,32)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="1023.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (485 samples, 0.42%)</title><rect x="87.7979%" y="997" width="0.4151%" height="15" fill="rgb(222,4,10)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="1007.50"></text></g><g><title>tremor_script::interpreter::resolve (485 samples, 0.42%)</title><rect x="87.7979%" y="981" width="0.4151%" height="15" fill="rgb(239,7,37)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve_value (485 samples, 0.42%)</title><rect x="87.7979%" y="965" width="0.4151%" height="15" fill="rgb(215,31,37)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="975.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (485 samples, 0.42%)</title><rect x="87.7979%" y="949" width="0.4151%" height="15" fill="rgb(224,83,33)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (485 samples, 0.42%)</title><rect x="87.7979%" y="933" width="0.4151%" height="15" fill="rgb(239,55,3)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (485 samples, 0.42%)</title><rect x="87.7979%" y="917" width="0.4151%" height="15" fill="rgb(247,92,11)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (485 samples, 0.42%)</title><rect x="87.7979%" y="901" width="0.4151%" height="15" fill="rgb(239,200,7)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="911.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (485 samples, 0.42%)</title><rect x="87.7979%" y="885" width="0.4151%" height="15" fill="rgb(227,115,8)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (485 samples, 0.42%)</title><rect x="87.7979%" y="869" width="0.4151%" height="15" fill="rgb(215,189,27)" fg:x="102591" fg:w="485"/><text x="88.0479%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (484 samples, 0.41%)</title><rect x="87.7988%" y="853" width="0.4142%" height="15" fill="rgb(251,216,39)" fg:x="102592" fg:w="484"/><text x="88.0488%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (484 samples, 0.41%)</title><rect x="87.7988%" y="837" width="0.4142%" height="15" fill="rgb(207,29,47)" fg:x="102592" fg:w="484"/><text x="88.0488%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (484 samples, 0.41%)</title><rect x="87.7988%" y="821" width="0.4142%" height="15" fill="rgb(210,71,34)" fg:x="102592" fg:w="484"/><text x="88.0488%" y="831.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (482 samples, 0.41%)</title><rect x="87.8005%" y="805" width="0.4125%" height="15" fill="rgb(253,217,51)" fg:x="102594" fg:w="482"/><text x="88.0505%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (481 samples, 0.41%)</title><rect x="87.8014%" y="789" width="0.4116%" height="15" fill="rgb(222,117,46)" fg:x="102595" fg:w="481"/><text x="88.0514%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (481 samples, 0.41%)</title><rect x="87.8014%" y="773" width="0.4116%" height="15" fill="rgb(226,132,6)" fg:x="102595" fg:w="481"/><text x="88.0514%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (13 samples, 0.01%)</title><rect x="88.2130%" y="1077" width="0.0111%" height="15" fill="rgb(254,145,51)" fg:x="103076" fg:w="13"/><text x="88.4630%" y="1087.50"></text></g><g><title>tremor_script::interpreter::val_eq (51 samples, 0.04%)</title><rect x="88.2361%" y="1077" width="0.0436%" height="15" fill="rgb(231,199,27)" fg:x="103103" fg:w="51"/><text x="88.4861%" y="1087.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.02%)</title><rect x="88.3251%" y="693" width="0.0223%" height="15" fill="rgb(245,158,14)" fg:x="103207" fg:w="26"/><text x="88.5751%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (26 samples, 0.02%)</title><rect x="88.3251%" y="677" width="0.0223%" height="15" fill="rgb(240,113,14)" fg:x="103207" fg:w="26"/><text x="88.5751%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (26 samples, 0.02%)</title><rect x="88.3251%" y="661" width="0.0223%" height="15" fill="rgb(210,20,13)" fg:x="103207" fg:w="26"/><text x="88.5751%" y="671.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (13 samples, 0.01%)</title><rect x="88.3362%" y="645" width="0.0111%" height="15" fill="rgb(241,144,13)" fg:x="103220" fg:w="13"/><text x="88.5862%" y="655.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (12 samples, 0.01%)</title><rect x="88.3371%" y="629" width="0.0103%" height="15" fill="rgb(235,43,34)" fg:x="103221" fg:w="12"/><text x="88.5871%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12 samples, 0.01%)</title><rect x="88.3371%" y="613" width="0.0103%" height="15" fill="rgb(208,36,20)" fg:x="103221" fg:w="12"/><text x="88.5871%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (12 samples, 0.01%)</title><rect x="88.3371%" y="597" width="0.0103%" height="15" fill="rgb(239,204,10)" fg:x="103221" fg:w="12"/><text x="88.5871%" y="607.50"></text></g><g><title>core::hash::Hasher::write_str (12 samples, 0.01%)</title><rect x="88.3371%" y="581" width="0.0103%" height="15" fill="rgb(217,84,43)" fg:x="103221" fg:w="12"/><text x="88.5871%" y="591.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (40 samples, 0.03%)</title><rect x="88.3474%" y="629" width="0.0342%" height="15" fill="rgb(241,170,50)" fg:x="103233" fg:w="40"/><text x="88.5974%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (39 samples, 0.03%)</title><rect x="88.3482%" y="613" width="0.0334%" height="15" fill="rgb(226,205,29)" fg:x="103234" fg:w="39"/><text x="88.5982%" y="623.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (17 samples, 0.01%)</title><rect x="88.3670%" y="597" width="0.0145%" height="15" fill="rgb(233,113,1)" fg:x="103256" fg:w="17"/><text x="88.6170%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (17 samples, 0.01%)</title><rect x="88.3670%" y="581" width="0.0145%" height="15" fill="rgb(253,98,13)" fg:x="103256" fg:w="17"/><text x="88.6170%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (17 samples, 0.01%)</title><rect x="88.3670%" y="565" width="0.0145%" height="15" fill="rgb(211,115,12)" fg:x="103256" fg:w="17"/><text x="88.6170%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="88.3679%" y="549" width="0.0137%" height="15" fill="rgb(208,12,16)" fg:x="103257" fg:w="16"/><text x="88.6179%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (16 samples, 0.01%)</title><rect x="88.3679%" y="533" width="0.0137%" height="15" fill="rgb(237,193,54)" fg:x="103257" fg:w="16"/><text x="88.6179%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="88.3679%" y="517" width="0.0137%" height="15" fill="rgb(243,22,42)" fg:x="103257" fg:w="16"/><text x="88.6179%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (16 samples, 0.01%)</title><rect x="88.3679%" y="501" width="0.0137%" height="15" fill="rgb(233,151,36)" fg:x="103257" fg:w="16"/><text x="88.6179%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (16 samples, 0.01%)</title><rect x="88.3679%" y="485" width="0.0137%" height="15" fill="rgb(237,57,45)" fg:x="103257" fg:w="16"/><text x="88.6179%" y="495.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="88.3679%" y="469" width="0.0137%" height="15" fill="rgb(221,88,17)" fg:x="103257" fg:w="16"/><text x="88.6179%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (42 samples, 0.04%)</title><rect x="88.3474%" y="645" width="0.0359%" height="15" fill="rgb(230,79,15)" fg:x="103233" fg:w="42"/><text x="88.5974%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (45 samples, 0.04%)</title><rect x="88.3474%" y="693" width="0.0385%" height="15" fill="rgb(213,57,13)" fg:x="103233" fg:w="45"/><text x="88.5974%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (45 samples, 0.04%)</title><rect x="88.3474%" y="677" width="0.0385%" height="15" fill="rgb(222,116,39)" fg:x="103233" fg:w="45"/><text x="88.5974%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (45 samples, 0.04%)</title><rect x="88.3474%" y="661" width="0.0385%" height="15" fill="rgb(245,107,2)" fg:x="103233" fg:w="45"/><text x="88.5974%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (72 samples, 0.06%)</title><rect x="88.3251%" y="805" width="0.0616%" height="15" fill="rgb(238,1,10)" fg:x="103207" fg:w="72"/><text x="88.5751%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (72 samples, 0.06%)</title><rect x="88.3251%" y="789" width="0.0616%" height="15" fill="rgb(249,4,48)" fg:x="103207" fg:w="72"/><text x="88.5751%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (72 samples, 0.06%)</title><rect x="88.3251%" y="773" width="0.0616%" height="15" fill="rgb(223,151,18)" fg:x="103207" fg:w="72"/><text x="88.5751%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (72 samples, 0.06%)</title><rect x="88.3251%" y="757" width="0.0616%" height="15" fill="rgb(227,65,43)" fg:x="103207" fg:w="72"/><text x="88.5751%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (72 samples, 0.06%)</title><rect x="88.3251%" y="741" width="0.0616%" height="15" fill="rgb(218,40,45)" fg:x="103207" fg:w="72"/><text x="88.5751%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (72 samples, 0.06%)</title><rect x="88.3251%" y="725" width="0.0616%" height="15" fill="rgb(252,121,31)" fg:x="103207" fg:w="72"/><text x="88.5751%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (72 samples, 0.06%)</title><rect x="88.3251%" y="709" width="0.0616%" height="15" fill="rgb(219,158,43)" fg:x="103207" fg:w="72"/><text x="88.5751%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (101 samples, 0.09%)</title><rect x="88.3029%" y="821" width="0.0864%" height="15" fill="rgb(231,162,42)" fg:x="103181" fg:w="101"/><text x="88.5529%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (123 samples, 0.11%)</title><rect x="88.2849%" y="997" width="0.1053%" height="15" fill="rgb(217,179,25)" fg:x="103160" fg:w="123"/><text x="88.5349%" y="1007.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (113 samples, 0.10%)</title><rect x="88.2934%" y="981" width="0.0967%" height="15" fill="rgb(206,212,31)" fg:x="103170" fg:w="113"/><text x="88.5434%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (113 samples, 0.10%)</title><rect x="88.2934%" y="965" width="0.0967%" height="15" fill="rgb(235,144,12)" fg:x="103170" fg:w="113"/><text x="88.5434%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (113 samples, 0.10%)</title><rect x="88.2934%" y="949" width="0.0967%" height="15" fill="rgb(213,51,10)" fg:x="103170" fg:w="113"/><text x="88.5434%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (113 samples, 0.10%)</title><rect x="88.2934%" y="933" width="0.0967%" height="15" fill="rgb(231,145,14)" fg:x="103170" fg:w="113"/><text x="88.5434%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve (113 samples, 0.10%)</title><rect x="88.2934%" y="917" width="0.0967%" height="15" fill="rgb(235,15,28)" fg:x="103170" fg:w="113"/><text x="88.5434%" y="927.50"></text></g><g><title>tremor_script::interpreter::resolve_value (113 samples, 0.10%)</title><rect x="88.2934%" y="901" width="0.0967%" height="15" fill="rgb(237,206,10)" fg:x="103170" fg:w="113"/><text x="88.5434%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (102 samples, 0.09%)</title><rect x="88.3029%" y="885" width="0.0873%" height="15" fill="rgb(236,227,27)" fg:x="103181" fg:w="102"/><text x="88.5529%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (102 samples, 0.09%)</title><rect x="88.3029%" y="869" width="0.0873%" height="15" fill="rgb(246,83,35)" fg:x="103181" fg:w="102"/><text x="88.5529%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (102 samples, 0.09%)</title><rect x="88.3029%" y="853" width="0.0873%" height="15" fill="rgb(220,136,24)" fg:x="103181" fg:w="102"/><text x="88.5529%" y="863.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (102 samples, 0.09%)</title><rect x="88.3029%" y="837" width="0.0873%" height="15" fill="rgb(217,3,25)" fg:x="103181" fg:w="102"/><text x="88.5529%" y="847.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (155 samples, 0.13%)</title><rect x="88.2797%" y="1077" width="0.1326%" height="15" fill="rgb(239,24,14)" fg:x="103154" fg:w="155"/><text x="88.5297%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (149 samples, 0.13%)</title><rect x="88.2849%" y="1061" width="0.1275%" height="15" fill="rgb(244,16,53)" fg:x="103160" fg:w="149"/><text x="88.5349%" y="1071.50"></text></g><g><title>tremor_script::script::Script::run (149 samples, 0.13%)</title><rect x="88.2849%" y="1045" width="0.1275%" height="15" fill="rgb(208,175,44)" fg:x="103160" fg:w="149"/><text x="88.5349%" y="1055.50"></text></g><g><title>tremor_script::ast::Script::run (149 samples, 0.13%)</title><rect x="88.2849%" y="1029" width="0.1275%" height="15" fill="rgb(252,18,48)" fg:x="103160" fg:w="149"/><text x="88.5349%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (149 samples, 0.13%)</title><rect x="88.2849%" y="1013" width="0.1275%" height="15" fill="rgb(234,199,32)" fg:x="103160" fg:w="149"/><text x="88.5349%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (26 samples, 0.02%)</title><rect x="88.3901%" y="997" width="0.0223%" height="15" fill="rgb(225,77,54)" fg:x="103283" fg:w="26"/><text x="88.6401%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (26 samples, 0.02%)</title><rect x="88.3901%" y="981" width="0.0223%" height="15" fill="rgb(225,42,25)" fg:x="103283" fg:w="26"/><text x="88.6401%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (26 samples, 0.02%)</title><rect x="88.3901%" y="965" width="0.0223%" height="15" fill="rgb(242,227,46)" fg:x="103283" fg:w="26"/><text x="88.6401%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (26 samples, 0.02%)</title><rect x="88.3901%" y="949" width="0.0223%" height="15" fill="rgb(246,197,35)" fg:x="103283" fg:w="26"/><text x="88.6401%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (26 samples, 0.02%)</title><rect x="88.3901%" y="933" width="0.0223%" height="15" fill="rgb(215,159,26)" fg:x="103283" fg:w="26"/><text x="88.6401%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve (26 samples, 0.02%)</title><rect x="88.3901%" y="917" width="0.0223%" height="15" fill="rgb(212,194,50)" fg:x="103283" fg:w="26"/><text x="88.6401%" y="927.50"></text></g><g><title>&lt;&amp;mut rmp_serde::encode::Serializer&lt;W,C&gt; as serde::ser::Serializer&gt;::serialize_u64 (33 samples, 0.03%)</title><rect x="88.5373%" y="1061" width="0.0282%" height="15" fill="rgb(246,132,1)" fg:x="103455" fg:w="33"/><text x="88.7873%" y="1071.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (34 samples, 0.03%)</title><rect x="88.5656%" y="1061" width="0.0291%" height="15" fill="rgb(217,71,7)" fg:x="103488" fg:w="34"/><text x="88.8156%" y="1071.50"></text></g><g><title>tremor_value::serde::value::se::&lt;impl serde::ser::Serialize for tremor_value::value::Value&gt;::serialize (223 samples, 0.19%)</title><rect x="88.4269%" y="1077" width="0.1908%" height="15" fill="rgb(252,59,32)" fg:x="103326" fg:w="223"/><text x="88.6769%" y="1087.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (12 samples, 0.01%)</title><rect x="88.6075%" y="1061" width="0.0103%" height="15" fill="rgb(253,204,25)" fg:x="103537" fg:w="12"/><text x="88.8575%" y="1071.50"></text></g><g><title>[unknown] (96,644 samples, 82.71%)</title><rect x="5.9350%" y="1093" width="82.7085%" height="15" fill="rgb(232,21,16)" fg:x="6935" fg:w="96644"/><text x="6.1850%" y="1103.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (18 samples, 0.02%)</title><rect x="88.6281%" y="1077" width="0.0154%" height="15" fill="rgb(248,90,29)" fg:x="103561" fg:w="18"/><text x="88.8781%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="88.6460%" y="1077" width="0.0111%" height="15" fill="rgb(249,223,7)" fg:x="103582" fg:w="13"/><text x="88.8960%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (31 samples, 0.03%)</title><rect x="88.6597%" y="1077" width="0.0265%" height="15" fill="rgb(231,119,42)" fg:x="103598" fg:w="31"/><text x="88.9097%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="88.6640%" y="1061" width="0.0223%" height="15" fill="rgb(215,41,35)" fg:x="103603" fg:w="26"/><text x="88.9140%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="88.6666%" y="1045" width="0.0197%" height="15" fill="rgb(220,44,45)" fg:x="103606" fg:w="23"/><text x="88.9166%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (31 samples, 0.03%)</title><rect x="88.6931%" y="1077" width="0.0265%" height="15" fill="rgb(253,197,36)" fg:x="103637" fg:w="31"/><text x="88.9431%" y="1087.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (15 samples, 0.01%)</title><rect x="88.7924%" y="997" width="0.0128%" height="15" fill="rgb(245,225,54)" fg:x="103753" fg:w="15"/><text x="89.0424%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (14 samples, 0.01%)</title><rect x="88.8052%" y="997" width="0.0120%" height="15" fill="rgb(239,94,37)" fg:x="103768" fg:w="14"/><text x="89.0552%" y="1007.50"></text></g><g><title>core::ptr::read (14 samples, 0.01%)</title><rect x="88.8052%" y="981" width="0.0120%" height="15" fill="rgb(242,217,10)" fg:x="103768" fg:w="14"/><text x="89.0552%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (86 samples, 0.07%)</title><rect x="88.7718%" y="1061" width="0.0736%" height="15" fill="rgb(250,193,7)" fg:x="103729" fg:w="86"/><text x="89.0218%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (83 samples, 0.07%)</title><rect x="88.7744%" y="1045" width="0.0710%" height="15" fill="rgb(230,104,19)" fg:x="103732" fg:w="83"/><text x="89.0244%" y="1055.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (76 samples, 0.07%)</title><rect x="88.7804%" y="1029" width="0.0650%" height="15" fill="rgb(230,181,4)" fg:x="103739" fg:w="76"/><text x="89.0304%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (76 samples, 0.07%)</title><rect x="88.7804%" y="1013" width="0.0650%" height="15" fill="rgb(216,219,49)" fg:x="103739" fg:w="76"/><text x="89.0304%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (29 samples, 0.02%)</title><rect x="88.8206%" y="997" width="0.0248%" height="15" fill="rgb(254,144,0)" fg:x="103786" fg:w="29"/><text x="89.0706%" y="1007.50"></text></g><g><title>__dso_handle (243 samples, 0.21%)</title><rect x="88.6435%" y="1093" width="0.2080%" height="15" fill="rgb(205,209,38)" fg:x="103579" fg:w="243"/><text x="88.8935%" y="1103.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (140 samples, 0.12%)</title><rect x="88.7316%" y="1077" width="0.1198%" height="15" fill="rgb(240,21,42)" fg:x="103682" fg:w="140"/><text x="88.9816%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (29 samples, 0.02%)</title><rect x="88.8745%" y="1093" width="0.0248%" height="15" fill="rgb(241,132,3)" fg:x="103849" fg:w="29"/><text x="89.1245%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="88.8865%" y="1077" width="0.0128%" height="15" fill="rgb(225,14,2)" fg:x="103863" fg:w="15"/><text x="89.1365%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (15 samples, 0.01%)</title><rect x="88.8865%" y="1061" width="0.0128%" height="15" fill="rgb(210,141,35)" fg:x="103863" fg:w="15"/><text x="89.1365%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}} (15 samples, 0.01%)</title><rect x="88.8865%" y="1045" width="0.0128%" height="15" fill="rgb(251,14,44)" fg:x="103863" fg:w="15"/><text x="89.1365%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (15 samples, 0.01%)</title><rect x="88.8865%" y="1029" width="0.0128%" height="15" fill="rgb(247,48,18)" fg:x="103863" fg:w="15"/><text x="89.1365%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="88.8865%" y="1013" width="0.0128%" height="15" fill="rgb(225,0,40)" fg:x="103863" fg:w="15"/><text x="89.1365%" y="1023.50"></text></g><g><title>anon.07842ee8e079d9ed68873cd915a87b2c.9.llvm.16273340636564346165 (22 samples, 0.02%)</title><rect x="88.9165%" y="1093" width="0.0188%" height="15" fill="rgb(221,31,33)" fg:x="103898" fg:w="22"/><text x="89.1665%" y="1103.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="88.9361%" y="1077" width="0.0128%" height="15" fill="rgb(237,42,40)" fg:x="103921" fg:w="15"/><text x="89.1861%" y="1087.50"></text></g><g><title>anon.1b22ee5e60d132429f498663214934ee.18.llvm.3002034432276738969 (19 samples, 0.02%)</title><rect x="88.9353%" y="1093" width="0.0163%" height="15" fill="rgb(233,51,29)" fg:x="103920" fg:w="19"/><text x="89.1853%" y="1103.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (15 samples, 0.01%)</title><rect x="88.9516%" y="1077" width="0.0128%" height="15" fill="rgb(226,58,20)" fg:x="103939" fg:w="15"/><text x="89.2016%" y="1087.50"></text></g><g><title>anon.4e27793df7385fd523f730927e4d887f.28.llvm.14818730262370577677 (34 samples, 0.03%)</title><rect x="88.9516%" y="1093" width="0.0291%" height="15" fill="rgb(208,98,7)" fg:x="103939" fg:w="34"/><text x="89.2016%" y="1103.50"></text></g><g><title>anon.8ce0b22ff3e27106f8f01c1937a05035.89.llvm.15173938470475896155 (20 samples, 0.02%)</title><rect x="89.0115%" y="1093" width="0.0171%" height="15" fill="rgb(228,143,44)" fg:x="104009" fg:w="20"/><text x="89.2615%" y="1103.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (15 samples, 0.01%)</title><rect x="89.0337%" y="1077" width="0.0128%" height="15" fill="rgb(246,55,38)" fg:x="104035" fg:w="15"/><text x="89.2837%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.01%)</title><rect x="89.0465%" y="1077" width="0.0111%" height="15" fill="rgb(247,87,16)" fg:x="104050" fg:w="13"/><text x="89.2965%" y="1087.50"></text></g><g><title>anon.9d5bffa143ece3cd04934c706b3d26f1.2408.llvm.10554089737244749949 (38 samples, 0.03%)</title><rect x="89.0286%" y="1093" width="0.0325%" height="15" fill="rgb(234,129,42)" fg:x="104029" fg:w="38"/><text x="89.2786%" y="1103.50"></text></g><g><title>anon.9d5bffa143ece3cd04934c706b3d26f1.2787.llvm.10554089737244749949 (13 samples, 0.01%)</title><rect x="89.0611%" y="1093" width="0.0111%" height="15" fill="rgb(220,82,16)" fg:x="104067" fg:w="13"/><text x="89.3111%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (13 samples, 0.01%)</title><rect x="89.0611%" y="1077" width="0.0111%" height="15" fill="rgb(211,88,4)" fg:x="104067" fg:w="13"/><text x="89.3111%" y="1087.50"></text></g><g><title>anon.ff31cb8ca33487f561eade7f4db5437a.18.llvm.3263491571492513569 (71 samples, 0.06%)</title><rect x="89.0774%" y="1093" width="0.0608%" height="15" fill="rgb(248,151,21)" fg:x="104086" fg:w="71"/><text x="89.3274%" y="1103.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="89.0774%" y="1077" width="0.0608%" height="15" fill="rgb(238,163,6)" fg:x="104086" fg:w="71"/><text x="89.3274%" y="1087.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (33 samples, 0.03%)</title><rect x="89.1758%" y="1061" width="0.0282%" height="15" fill="rgb(209,183,11)" fg:x="104201" fg:w="33"/><text x="89.4258%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (31 samples, 0.03%)</title><rect x="89.1775%" y="1045" width="0.0265%" height="15" fill="rgb(219,37,20)" fg:x="104203" fg:w="31"/><text x="89.4275%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (64 samples, 0.05%)</title><rect x="89.1535%" y="1077" width="0.0548%" height="15" fill="rgb(210,158,4)" fg:x="104175" fg:w="64"/><text x="89.4035%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="89.2083%" y="1077" width="0.0223%" height="15" fill="rgb(221,167,53)" fg:x="104239" fg:w="26"/><text x="89.4583%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="89.2083%" y="1061" width="0.0223%" height="15" fill="rgb(237,151,45)" fg:x="104239" fg:w="26"/><text x="89.4583%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="89.2117%" y="1045" width="0.0188%" height="15" fill="rgb(231,39,3)" fg:x="104243" fg:w="22"/><text x="89.4617%" y="1055.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (131 samples, 0.11%)</title><rect x="89.1510%" y="1093" width="0.1121%" height="15" fill="rgb(212,167,28)" fg:x="104172" fg:w="131"/><text x="89.4010%" y="1103.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (28 samples, 0.02%)</title><rect x="89.5883%" y="485" width="0.0240%" height="15" fill="rgb(232,178,8)" fg:x="104683" fg:w="28"/><text x="89.8383%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (33 samples, 0.03%)</title><rect x="89.7851%" y="389" width="0.0282%" height="15" fill="rgb(225,151,20)" fg:x="104913" fg:w="33"/><text x="90.0351%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (32 samples, 0.03%)</title><rect x="89.7860%" y="373" width="0.0274%" height="15" fill="rgb(238,3,37)" fg:x="104914" fg:w="32"/><text x="90.0360%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (28 samples, 0.02%)</title><rect x="89.7894%" y="357" width="0.0240%" height="15" fill="rgb(251,147,42)" fg:x="104918" fg:w="28"/><text x="90.0394%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (28 samples, 0.02%)</title><rect x="89.7894%" y="341" width="0.0240%" height="15" fill="rgb(208,173,10)" fg:x="104918" fg:w="28"/><text x="90.0394%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (28 samples, 0.02%)</title><rect x="89.7894%" y="325" width="0.0240%" height="15" fill="rgb(246,225,4)" fg:x="104918" fg:w="28"/><text x="90.0394%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.08%)</title><rect x="89.8133%" y="389" width="0.0796%" height="15" fill="rgb(248,102,6)" fg:x="104946" fg:w="93"/><text x="90.0633%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (384 samples, 0.33%)</title><rect x="89.6174%" y="437" width="0.3286%" height="15" fill="rgb(232,6,21)" fg:x="104717" fg:w="384"/><text x="89.8674%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (308 samples, 0.26%)</title><rect x="89.6824%" y="421" width="0.2636%" height="15" fill="rgb(221,179,22)" fg:x="104793" fg:w="308"/><text x="89.9324%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (254 samples, 0.22%)</title><rect x="89.7286%" y="405" width="0.2174%" height="15" fill="rgb(252,50,20)" fg:x="104847" fg:w="254"/><text x="89.9786%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (62 samples, 0.05%)</title><rect x="89.8929%" y="389" width="0.0531%" height="15" fill="rgb(222,56,38)" fg:x="105039" fg:w="62"/><text x="90.1429%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (62 samples, 0.05%)</title><rect x="89.8929%" y="373" width="0.0531%" height="15" fill="rgb(206,193,29)" fg:x="105039" fg:w="62"/><text x="90.1429%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (23 samples, 0.02%)</title><rect x="89.9263%" y="357" width="0.0197%" height="15" fill="rgb(239,192,45)" fg:x="105078" fg:w="23"/><text x="90.1763%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (23 samples, 0.02%)</title><rect x="89.9263%" y="341" width="0.0197%" height="15" fill="rgb(254,18,36)" fg:x="105078" fg:w="23"/><text x="90.1763%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (16 samples, 0.01%)</title><rect x="89.9323%" y="325" width="0.0137%" height="15" fill="rgb(221,127,11)" fg:x="105085" fg:w="16"/><text x="90.1823%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (16 samples, 0.01%)</title><rect x="89.9323%" y="309" width="0.0137%" height="15" fill="rgb(234,146,35)" fg:x="105085" fg:w="16"/><text x="90.1823%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (418 samples, 0.36%)</title><rect x="89.6122%" y="485" width="0.3577%" height="15" fill="rgb(254,201,37)" fg:x="104711" fg:w="418"/><text x="89.8622%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (418 samples, 0.36%)</title><rect x="89.6122%" y="469" width="0.3577%" height="15" fill="rgb(211,202,23)" fg:x="104711" fg:w="418"/><text x="89.8622%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (418 samples, 0.36%)</title><rect x="89.6122%" y="453" width="0.3577%" height="15" fill="rgb(237,91,2)" fg:x="104711" fg:w="418"/><text x="89.8622%" y="463.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (28 samples, 0.02%)</title><rect x="89.9460%" y="437" width="0.0240%" height="15" fill="rgb(226,228,36)" fg:x="105101" fg:w="28"/><text x="90.1960%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,018 samples, 0.87%)</title><rect x="90.2695%" y="453" width="0.8712%" height="15" fill="rgb(213,63,50)" fg:x="105479" fg:w="1018"/><text x="90.5195%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (713 samples, 0.61%)</title><rect x="90.5305%" y="437" width="0.6102%" height="15" fill="rgb(235,194,19)" fg:x="105784" fg:w="713"/><text x="90.7805%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (713 samples, 0.61%)</title><rect x="90.5305%" y="421" width="0.6102%" height="15" fill="rgb(207,204,18)" fg:x="105784" fg:w="713"/><text x="90.7805%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,297 samples, 1.11%)</title><rect x="90.0418%" y="469" width="1.1100%" height="15" fill="rgb(248,8,7)" fg:x="105213" fg:w="1297"/><text x="90.2918%" y="479.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (13 samples, 0.01%)</title><rect x="91.1407%" y="453" width="0.0111%" height="15" fill="rgb(223,145,47)" fg:x="106497" fg:w="13"/><text x="91.3907%" y="463.50"></text></g><g><title>async_executor::steal (1,382 samples, 1.18%)</title><rect x="89.9700%" y="485" width="1.1827%" height="15" fill="rgb(228,84,11)" fg:x="105129" fg:w="1382"/><text x="90.2200%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (1,354 samples, 1.16%)</title><rect x="91.7894%" y="453" width="1.1588%" height="15" fill="rgb(218,76,45)" fg:x="107255" fg:w="1354"/><text x="92.0394%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,321 samples, 1.13%)</title><rect x="91.8176%" y="437" width="1.1305%" height="15" fill="rgb(223,80,15)" fg:x="107288" fg:w="1321"/><text x="92.0676%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,321 samples, 1.13%)</title><rect x="91.8176%" y="421" width="1.1305%" height="15" fill="rgb(219,218,33)" fg:x="107288" fg:w="1321"/><text x="92.0676%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,321 samples, 1.13%)</title><rect x="91.8176%" y="405" width="1.1305%" height="15" fill="rgb(208,51,11)" fg:x="107288" fg:w="1321"/><text x="92.0676%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,984 samples, 1.70%)</title><rect x="91.3624%" y="469" width="1.6979%" height="15" fill="rgb(229,165,39)" fg:x="106756" fg:w="1984"/><text x="91.6124%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (131 samples, 0.11%)</title><rect x="92.9482%" y="453" width="0.1121%" height="15" fill="rgb(241,100,24)" fg:x="108609" fg:w="131"/><text x="93.1982%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (80 samples, 0.07%)</title><rect x="92.9918%" y="437" width="0.0685%" height="15" fill="rgb(228,14,23)" fg:x="108660" fg:w="80"/><text x="93.2418%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (180 samples, 0.15%)</title><rect x="93.0988%" y="453" width="0.1540%" height="15" fill="rgb(247,116,52)" fg:x="108785" fg:w="180"/><text x="93.3488%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (180 samples, 0.15%)</title><rect x="93.0988%" y="437" width="0.1540%" height="15" fill="rgb(216,149,33)" fg:x="108785" fg:w="180"/><text x="93.3488%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (180 samples, 0.15%)</title><rect x="93.0988%" y="421" width="0.1540%" height="15" fill="rgb(238,142,29)" fg:x="108785" fg:w="180"/><text x="93.3488%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (180 samples, 0.15%)</title><rect x="93.0988%" y="405" width="0.1540%" height="15" fill="rgb(224,83,40)" fg:x="108785" fg:w="180"/><text x="93.3488%" y="415.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (36 samples, 0.03%)</title><rect x="93.2554%" y="453" width="0.0308%" height="15" fill="rgb(234,165,11)" fg:x="108968" fg:w="36"/><text x="93.5054%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.03%)</title><rect x="93.2563%" y="437" width="0.0300%" height="15" fill="rgb(215,96,23)" fg:x="108969" fg:w="35"/><text x="93.5063%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.03%)</title><rect x="93.2563%" y="421" width="0.0300%" height="15" fill="rgb(233,179,26)" fg:x="108969" fg:w="35"/><text x="93.5063%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (13 samples, 0.01%)</title><rect x="93.2896%" y="453" width="0.0111%" height="15" fill="rgb(225,129,33)" fg:x="109008" fg:w="13"/><text x="93.5396%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="93.2896%" y="437" width="0.0111%" height="15" fill="rgb(237,49,13)" fg:x="109008" fg:w="13"/><text x="93.5396%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (92 samples, 0.08%)</title><rect x="93.3008%" y="453" width="0.0787%" height="15" fill="rgb(211,3,31)" fg:x="109021" fg:w="92"/><text x="93.5508%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (92 samples, 0.08%)</title><rect x="93.3008%" y="437" width="0.0787%" height="15" fill="rgb(216,152,19)" fg:x="109021" fg:w="92"/><text x="93.5508%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (114 samples, 0.10%)</title><rect x="93.3795%" y="453" width="0.0976%" height="15" fill="rgb(251,121,35)" fg:x="109113" fg:w="114"/><text x="93.6295%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_or (114 samples, 0.10%)</title><rect x="93.3795%" y="437" width="0.0976%" height="15" fill="rgb(210,217,47)" fg:x="109113" fg:w="114"/><text x="93.6295%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,875 samples, 2.46%)</title><rect x="91.1527%" y="485" width="2.4604%" height="15" fill="rgb(244,116,22)" fg:x="106511" fg:w="2875"/><text x="91.4027%" y="495.50">co..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (646 samples, 0.55%)</title><rect x="93.0603%" y="469" width="0.5529%" height="15" fill="rgb(228,17,21)" fg:x="108740" fg:w="646"/><text x="93.3103%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (159 samples, 0.14%)</title><rect x="93.4771%" y="453" width="0.1361%" height="15" fill="rgb(240,149,34)" fg:x="109227" fg:w="159"/><text x="93.7271%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (159 samples, 0.14%)</title><rect x="93.4771%" y="437" width="0.1361%" height="15" fill="rgb(208,125,47)" fg:x="109227" fg:w="159"/><text x="93.7271%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (127 samples, 0.11%)</title><rect x="93.6131%" y="485" width="0.1087%" height="15" fill="rgb(249,186,39)" fg:x="109386" fg:w="127"/><text x="93.8631%" y="495.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.11%)</title><rect x="93.6131%" y="469" width="0.1087%" height="15" fill="rgb(240,220,33)" fg:x="109386" fg:w="127"/><text x="93.8631%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (127 samples, 0.11%)</title><rect x="93.6131%" y="453" width="0.1087%" height="15" fill="rgb(243,110,23)" fg:x="109386" fg:w="127"/><text x="93.8631%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (127 samples, 0.11%)</title><rect x="93.6131%" y="437" width="0.1087%" height="15" fill="rgb(219,163,46)" fg:x="109386" fg:w="127"/><text x="93.8631%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (120 samples, 0.10%)</title><rect x="93.6191%" y="421" width="0.1027%" height="15" fill="rgb(216,126,30)" fg:x="109393" fg:w="120"/><text x="93.8691%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (120 samples, 0.10%)</title><rect x="93.6191%" y="405" width="0.1027%" height="15" fill="rgb(208,139,11)" fg:x="109393" fg:w="120"/><text x="93.8691%" y="415.50"></text></g><g><title>fastrand::usize (33 samples, 0.03%)</title><rect x="93.7218%" y="485" width="0.0282%" height="15" fill="rgb(213,118,36)" fg:x="109513" fg:w="33"/><text x="93.9718%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.03%)</title><rect x="93.7235%" y="469" width="0.0265%" height="15" fill="rgb(226,43,17)" fg:x="109515" fg:w="31"/><text x="93.9735%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (31 samples, 0.03%)</title><rect x="93.7235%" y="453" width="0.0265%" height="15" fill="rgb(254,217,4)" fg:x="109515" fg:w="31"/><text x="93.9735%" y="463.50"></text></g><g><title>fastrand::usize::{{closure}} (21 samples, 0.02%)</title><rect x="93.7321%" y="437" width="0.0180%" height="15" fill="rgb(210,134,47)" fg:x="109525" fg:w="21"/><text x="93.9821%" y="447.50"></text></g><g><title>fastrand::Rng::usize (21 samples, 0.02%)</title><rect x="93.7321%" y="421" width="0.0180%" height="15" fill="rgb(237,24,49)" fg:x="109525" fg:w="21"/><text x="93.9821%" y="431.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (18 samples, 0.02%)</title><rect x="93.7346%" y="405" width="0.0154%" height="15" fill="rgb(251,39,46)" fg:x="109528" fg:w="18"/><text x="93.9846%" y="415.50"></text></g><g><title>std::sync::poison::Flag::get (22 samples, 0.02%)</title><rect x="93.7501%" y="437" width="0.0188%" height="15" fill="rgb(251,220,3)" fg:x="109546" fg:w="22"/><text x="94.0001%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (22 samples, 0.02%)</title><rect x="93.7501%" y="421" width="0.0188%" height="15" fill="rgb(228,105,12)" fg:x="109546" fg:w="22"/><text x="94.0001%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="93.7501%" y="405" width="0.0188%" height="15" fill="rgb(215,196,1)" fg:x="109546" fg:w="22"/><text x="94.0001%" y="415.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="93.7501%" y="469" width="0.0223%" height="15" fill="rgb(214,33,39)" fg:x="109546" fg:w="26"/><text x="94.0001%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (26 samples, 0.02%)</title><rect x="93.7501%" y="453" width="0.0223%" height="15" fill="rgb(220,19,52)" fg:x="109546" fg:w="26"/><text x="94.0001%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (240 samples, 0.21%)</title><rect x="93.7749%" y="437" width="0.2054%" height="15" fill="rgb(221,78,38)" fg:x="109575" fg:w="240"/><text x="94.0249%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (240 samples, 0.21%)</title><rect x="93.7749%" y="421" width="0.2054%" height="15" fill="rgb(253,30,16)" fg:x="109575" fg:w="240"/><text x="94.0249%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (47 samples, 0.04%)</title><rect x="93.9803%" y="437" width="0.0402%" height="15" fill="rgb(242,65,0)" fg:x="109815" fg:w="47"/><text x="94.2303%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (47 samples, 0.04%)</title><rect x="93.9803%" y="421" width="0.0402%" height="15" fill="rgb(235,201,12)" fg:x="109815" fg:w="47"/><text x="94.2303%" y="431.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (5,343 samples, 4.57%)</title><rect x="89.4531%" y="501" width="4.5726%" height="15" fill="rgb(233,161,9)" fg:x="104525" fg:w="5343"/><text x="89.7031%" y="511.50">async..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (322 samples, 0.28%)</title><rect x="93.7501%" y="485" width="0.2756%" height="15" fill="rgb(241,207,41)" fg:x="109546" fg:w="322"/><text x="94.0001%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (296 samples, 0.25%)</title><rect x="93.7723%" y="469" width="0.2533%" height="15" fill="rgb(212,69,46)" fg:x="109572" fg:w="296"/><text x="94.0223%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (296 samples, 0.25%)</title><rect x="93.7723%" y="453" width="0.2533%" height="15" fill="rgb(239,69,45)" fg:x="109572" fg:w="296"/><text x="94.0223%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="94.0325%" y="421" width="0.0205%" height="15" fill="rgb(242,117,48)" fg:x="109876" fg:w="24"/><text x="94.2825%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="94.0325%" y="405" width="0.0205%" height="15" fill="rgb(228,41,36)" fg:x="109876" fg:w="24"/><text x="94.2825%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (27 samples, 0.02%)</title><rect x="94.0308%" y="485" width="0.0231%" height="15" fill="rgb(212,3,32)" fg:x="109874" fg:w="27"/><text x="94.2808%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="94.0308%" y="469" width="0.0231%" height="15" fill="rgb(233,41,49)" fg:x="109874" fg:w="27"/><text x="94.2808%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="94.0325%" y="453" width="0.0214%" height="15" fill="rgb(252,170,49)" fg:x="109876" fg:w="25"/><text x="94.2825%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (25 samples, 0.02%)</title><rect x="94.0325%" y="437" width="0.0214%" height="15" fill="rgb(229,53,26)" fg:x="109876" fg:w="25"/><text x="94.2825%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (46 samples, 0.04%)</title><rect x="94.0539%" y="485" width="0.0394%" height="15" fill="rgb(217,157,12)" fg:x="109901" fg:w="46"/><text x="94.3039%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="94.0539%" y="469" width="0.0394%" height="15" fill="rgb(227,17,9)" fg:x="109901" fg:w="46"/><text x="94.3039%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (13 samples, 0.01%)</title><rect x="94.1052%" y="405" width="0.0111%" height="15" fill="rgb(218,84,12)" fg:x="109961" fg:w="13"/><text x="94.3552%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="94.1052%" y="389" width="0.0111%" height="15" fill="rgb(212,79,24)" fg:x="109961" fg:w="13"/><text x="94.3552%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::notify (46 samples, 0.04%)</title><rect x="94.0992%" y="437" width="0.0394%" height="15" fill="rgb(217,222,37)" fg:x="109954" fg:w="46"/><text x="94.3492%" y="447.50"></text></g><g><title>polling::Poller::notify (39 samples, 0.03%)</title><rect x="94.1052%" y="421" width="0.0334%" height="15" fill="rgb(246,208,8)" fg:x="109961" fg:w="39"/><text x="94.3552%" y="431.50"></text></g><g><title>polling::epoll::Poller::notify (26 samples, 0.02%)</title><rect x="94.1163%" y="405" width="0.0223%" height="15" fill="rgb(244,133,10)" fg:x="109974" fg:w="26"/><text x="94.3663%" y="415.50"></text></g><g><title>__libc_write (26 samples, 0.02%)</title><rect x="94.1163%" y="389" width="0.0223%" height="15" fill="rgb(209,219,41)" fg:x="109974" fg:w="26"/><text x="94.3663%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (82 samples, 0.07%)</title><rect x="94.1814%" y="405" width="0.0702%" height="15" fill="rgb(253,175,45)" fg:x="110050" fg:w="82"/><text x="94.4314%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (82 samples, 0.07%)</title><rect x="94.1814%" y="389" width="0.0702%" height="15" fill="rgb(235,100,37)" fg:x="110050" fg:w="82"/><text x="94.4314%" y="399.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (31 samples, 0.03%)</title><rect x="94.2516%" y="405" width="0.0265%" height="15" fill="rgb(225,87,19)" fg:x="110132" fg:w="31"/><text x="94.5016%" y="415.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (31 samples, 0.03%)</title><rect x="94.2516%" y="389" width="0.0265%" height="15" fill="rgb(217,152,17)" fg:x="110132" fg:w="31"/><text x="94.5016%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (31 samples, 0.03%)</title><rect x="94.2516%" y="373" width="0.0265%" height="15" fill="rgb(235,72,13)" fg:x="110132" fg:w="31"/><text x="94.5016%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wake (27 samples, 0.02%)</title><rect x="94.2550%" y="357" width="0.0231%" height="15" fill="rgb(233,140,18)" fg:x="110136" fg:w="27"/><text x="94.5050%" y="367.50"></text></g><g><title>syscall (27 samples, 0.02%)</title><rect x="94.2550%" y="341" width="0.0231%" height="15" fill="rgb(207,212,28)" fg:x="110136" fg:w="27"/><text x="94.5050%" y="351.50"></text></g><g><title>parking::Unparker::unpark (167 samples, 0.14%)</title><rect x="94.1463%" y="437" width="0.1429%" height="15" fill="rgb(220,130,25)" fg:x="110009" fg:w="167"/><text x="94.3963%" y="447.50"></text></g><g><title>parking::Inner::unpark (140 samples, 0.12%)</title><rect x="94.1694%" y="421" width="0.1198%" height="15" fill="rgb(205,55,34)" fg:x="110036" fg:w="140"/><text x="94.4194%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.01%)</title><rect x="94.2781%" y="405" width="0.0111%" height="15" fill="rgb(237,54,35)" fg:x="110163" fg:w="13"/><text x="94.5281%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.01%)</title><rect x="94.2781%" y="389" width="0.0111%" height="15" fill="rgb(208,67,23)" fg:x="110163" fg:w="13"/><text x="94.5281%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (13 samples, 0.01%)</title><rect x="94.2781%" y="373" width="0.0111%" height="15" fill="rgb(206,207,50)" fg:x="110163" fg:w="13"/><text x="94.5281%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.01%)</title><rect x="94.2781%" y="357" width="0.0111%" height="15" fill="rgb(213,211,42)" fg:x="110163" fg:w="13"/><text x="94.5281%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="94.2781%" y="341" width="0.0111%" height="15" fill="rgb(252,197,50)" fg:x="110163" fg:w="13"/><text x="94.5281%" y="351.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (19 samples, 0.02%)</title><rect x="94.2892%" y="405" width="0.0163%" height="15" fill="rgb(251,211,41)" fg:x="110176" fg:w="19"/><text x="94.5392%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (19 samples, 0.02%)</title><rect x="94.2892%" y="389" width="0.0163%" height="15" fill="rgb(229,211,5)" fg:x="110176" fg:w="19"/><text x="94.5392%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (19 samples, 0.02%)</title><rect x="94.2892%" y="373" width="0.0163%" height="15" fill="rgb(239,36,31)" fg:x="110176" fg:w="19"/><text x="94.5392%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (19 samples, 0.02%)</title><rect x="94.2892%" y="357" width="0.0163%" height="15" fill="rgb(248,67,31)" fg:x="110176" fg:w="19"/><text x="94.5392%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (249 samples, 0.21%)</title><rect x="94.0932%" y="453" width="0.2131%" height="15" fill="rgb(249,55,44)" fg:x="109947" fg:w="249"/><text x="94.3432%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.02%)</title><rect x="94.2892%" y="437" width="0.0171%" height="15" fill="rgb(216,82,12)" fg:x="110176" fg:w="20"/><text x="94.5392%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.02%)</title><rect x="94.2892%" y="421" width="0.0171%" height="15" fill="rgb(242,174,1)" fg:x="110176" fg:w="20"/><text x="94.5392%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (309 samples, 0.26%)</title><rect x="94.0932%" y="485" width="0.2644%" height="15" fill="rgb(208,120,29)" fg:x="109947" fg:w="309"/><text x="94.3432%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (309 samples, 0.26%)</title><rect x="94.0932%" y="469" width="0.2644%" height="15" fill="rgb(221,105,43)" fg:x="109947" fg:w="309"/><text x="94.3432%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (60 samples, 0.05%)</title><rect x="94.3063%" y="453" width="0.0513%" height="15" fill="rgb(234,124,22)" fg:x="110196" fg:w="60"/><text x="94.5563%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="94.3063%" y="437" width="0.0513%" height="15" fill="rgb(212,23,30)" fg:x="110196" fg:w="60"/><text x="94.5563%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (56 samples, 0.05%)</title><rect x="94.3098%" y="421" width="0.0479%" height="15" fill="rgb(219,122,53)" fg:x="110200" fg:w="56"/><text x="94.5598%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (56 samples, 0.05%)</title><rect x="94.3098%" y="405" width="0.0479%" height="15" fill="rgb(248,84,24)" fg:x="110200" fg:w="56"/><text x="94.5598%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.02%)</title><rect x="94.3594%" y="437" width="0.0171%" height="15" fill="rgb(245,115,18)" fg:x="110258" fg:w="20"/><text x="94.6094%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="94.3594%" y="421" width="0.0171%" height="15" fill="rgb(227,176,51)" fg:x="110258" fg:w="20"/><text x="94.6094%" y="431.50"></text></g><g><title>async_executor::State::notify (411 samples, 0.35%)</title><rect x="94.0256%" y="501" width="0.3517%" height="15" fill="rgb(229,63,42)" fg:x="109868" fg:w="411"/><text x="94.2756%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="94.3577%" y="485" width="0.0197%" height="15" fill="rgb(247,202,24)" fg:x="110256" fg:w="23"/><text x="94.6077%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (21 samples, 0.02%)</title><rect x="94.3594%" y="469" width="0.0180%" height="15" fill="rgb(244,173,20)" fg:x="110258" fg:w="21"/><text x="94.6094%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (21 samples, 0.02%)</title><rect x="94.3594%" y="453" width="0.0180%" height="15" fill="rgb(242,81,47)" fg:x="110258" fg:w="21"/><text x="94.6094%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="94.3970%" y="469" width="0.0685%" height="15" fill="rgb(231,185,54)" fg:x="110302" fg:w="80"/><text x="94.6470%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (79 samples, 0.07%)</title><rect x="94.3979%" y="453" width="0.0676%" height="15" fill="rgb(243,55,32)" fg:x="110303" fg:w="79"/><text x="94.6479%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="94.3988%" y="437" width="0.0668%" height="15" fill="rgb(208,167,19)" fg:x="110304" fg:w="78"/><text x="94.6488%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="94.3988%" y="421" width="0.0668%" height="15" fill="rgb(231,72,35)" fg:x="110304" fg:w="78"/><text x="94.6488%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (78 samples, 0.07%)</title><rect x="94.3988%" y="405" width="0.0668%" height="15" fill="rgb(250,173,51)" fg:x="110304" fg:w="78"/><text x="94.6488%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (78 samples, 0.07%)</title><rect x="94.3988%" y="389" width="0.0668%" height="15" fill="rgb(209,5,22)" fg:x="110304" fg:w="78"/><text x="94.6488%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (24 samples, 0.02%)</title><rect x="94.4655%" y="469" width="0.0205%" height="15" fill="rgb(250,174,19)" fg:x="110382" fg:w="24"/><text x="94.7155%" y="479.50"></text></g><g><title>async_executor::Sleepers::insert (131 samples, 0.11%)</title><rect x="94.3945%" y="485" width="0.1121%" height="15" fill="rgb(217,3,49)" fg:x="110299" fg:w="131"/><text x="94.6445%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24 samples, 0.02%)</title><rect x="94.4860%" y="469" width="0.0205%" height="15" fill="rgb(218,225,5)" fg:x="110406" fg:w="24"/><text x="94.7360%" y="479.50"></text></g><g><title>core::ptr::write (17 samples, 0.01%)</title><rect x="94.4920%" y="453" width="0.0145%" height="15" fill="rgb(236,89,11)" fg:x="110413" fg:w="17"/><text x="94.7420%" y="463.50"></text></g><g><title>async_executor::Sleepers::is_notified (14 samples, 0.01%)</title><rect x="94.5066%" y="485" width="0.0120%" height="15" fill="rgb(206,33,28)" fg:x="110430" fg:w="14"/><text x="94.7566%" y="495.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="94.5725%" y="469" width="0.0214%" height="15" fill="rgb(241,56,42)" fg:x="110507" fg:w="25"/><text x="94.8225%" y="479.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (115 samples, 0.10%)</title><rect x="94.5939%" y="469" width="0.0984%" height="15" fill="rgb(222,44,11)" fg:x="110532" fg:w="115"/><text x="94.8439%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (114 samples, 0.10%)</title><rect x="94.5947%" y="453" width="0.0976%" height="15" fill="rgb(234,111,20)" fg:x="110533" fg:w="114"/><text x="94.8447%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (112 samples, 0.10%)</title><rect x="94.5964%" y="437" width="0.0959%" height="15" fill="rgb(237,77,6)" fg:x="110535" fg:w="112"/><text x="94.8464%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (112 samples, 0.10%)</title><rect x="94.5964%" y="421" width="0.0959%" height="15" fill="rgb(235,111,23)" fg:x="110535" fg:w="112"/><text x="94.8464%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (111 samples, 0.09%)</title><rect x="94.5973%" y="405" width="0.0950%" height="15" fill="rgb(251,135,29)" fg:x="110536" fg:w="111"/><text x="94.8473%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (111 samples, 0.09%)</title><rect x="94.5973%" y="389" width="0.0950%" height="15" fill="rgb(217,57,1)" fg:x="110536" fg:w="111"/><text x="94.8473%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 0.02%)</title><rect x="94.6923%" y="469" width="0.0231%" height="15" fill="rgb(249,119,31)" fg:x="110647" fg:w="27"/><text x="94.9423%" y="479.50"></text></g><g><title>core::ptr::write (22 samples, 0.02%)</title><rect x="94.6966%" y="453" width="0.0188%" height="15" fill="rgb(233,164,33)" fg:x="110652" fg:w="22"/><text x="94.9466%" y="463.50"></text></g><g><title>async_executor::Sleepers::update (241 samples, 0.21%)</title><rect x="94.5186%" y="485" width="0.2062%" height="15" fill="rgb(250,217,43)" fg:x="110444" fg:w="241"/><text x="94.7686%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (119 samples, 0.10%)</title><rect x="94.7325%" y="421" width="0.1018%" height="15" fill="rgb(232,154,50)" fg:x="110694" fg:w="119"/><text x="94.9825%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (119 samples, 0.10%)</title><rect x="94.7325%" y="405" width="0.1018%" height="15" fill="rgb(227,190,8)" fg:x="110694" fg:w="119"/><text x="94.9825%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (129 samples, 0.11%)</title><rect x="94.7248%" y="485" width="0.1104%" height="15" fill="rgb(209,217,32)" fg:x="110685" fg:w="129"/><text x="94.9748%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (129 samples, 0.11%)</title><rect x="94.7248%" y="469" width="0.1104%" height="15" fill="rgb(243,203,50)" fg:x="110685" fg:w="129"/><text x="94.9748%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (124 samples, 0.11%)</title><rect x="94.7291%" y="453" width="0.1061%" height="15" fill="rgb(232,152,27)" fg:x="110690" fg:w="124"/><text x="94.9791%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (124 samples, 0.11%)</title><rect x="94.7291%" y="437" width="0.1061%" height="15" fill="rgb(240,34,29)" fg:x="110690" fg:w="124"/><text x="94.9791%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (175 samples, 0.15%)</title><rect x="94.8352%" y="485" width="0.1498%" height="15" fill="rgb(215,185,52)" fg:x="110814" fg:w="175"/><text x="95.0852%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (175 samples, 0.15%)</title><rect x="94.8352%" y="469" width="0.1498%" height="15" fill="rgb(240,89,49)" fg:x="110814" fg:w="175"/><text x="95.0852%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (164 samples, 0.14%)</title><rect x="94.9850%" y="485" width="0.1404%" height="15" fill="rgb(225,12,52)" fg:x="110989" fg:w="164"/><text x="95.2350%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_store (164 samples, 0.14%)</title><rect x="94.9850%" y="469" width="0.1404%" height="15" fill="rgb(239,128,45)" fg:x="110989" fg:w="164"/><text x="95.2350%" y="479.50"></text></g><g><title>std::sync::poison::Flag::get (16 samples, 0.01%)</title><rect x="95.1262%" y="437" width="0.0137%" height="15" fill="rgb(211,78,47)" fg:x="111154" fg:w="16"/><text x="95.3762%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (16 samples, 0.01%)</title><rect x="95.1262%" y="421" width="0.0137%" height="15" fill="rgb(232,31,21)" fg:x="111154" fg:w="16"/><text x="95.3762%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="95.1262%" y="405" width="0.0137%" height="15" fill="rgb(222,168,14)" fg:x="111154" fg:w="16"/><text x="95.3762%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="95.1253%" y="469" width="0.0188%" height="15" fill="rgb(209,128,24)" fg:x="111153" fg:w="22"/><text x="95.3753%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (22 samples, 0.02%)</title><rect x="95.1253%" y="453" width="0.0188%" height="15" fill="rgb(249,35,13)" fg:x="111153" fg:w="22"/><text x="95.3753%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (157 samples, 0.13%)</title><rect x="95.1484%" y="437" width="0.1344%" height="15" fill="rgb(218,7,2)" fg:x="111180" fg:w="157"/><text x="95.3984%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (157 samples, 0.13%)</title><rect x="95.1484%" y="421" width="0.1344%" height="15" fill="rgb(238,107,27)" fg:x="111180" fg:w="157"/><text x="95.3984%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.01%)</title><rect x="95.2845%" y="421" width="0.0145%" height="15" fill="rgb(217,88,38)" fg:x="111339" fg:w="17"/><text x="95.5345%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="95.2845%" y="405" width="0.0145%" height="15" fill="rgb(230,207,0)" fg:x="111339" fg:w="17"/><text x="95.5345%" y="415.50"></text></g><g><title>core::hint::spin_loop (16 samples, 0.01%)</title><rect x="95.3042%" y="405" width="0.0137%" height="15" fill="rgb(249,64,54)" fg:x="111362" fg:w="16"/><text x="95.5542%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (16 samples, 0.01%)</title><rect x="95.3042%" y="389" width="0.0137%" height="15" fill="rgb(231,7,11)" fg:x="111362" fg:w="16"/><text x="95.5542%" y="399.50"></text></g><g><title>async_executor::Ticker::sleep (1,112 samples, 0.95%)</title><rect x="94.3774%" y="501" width="0.9517%" height="15" fill="rgb(205,149,21)" fg:x="110279" fg:w="1112"/><text x="94.6274%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (238 samples, 0.20%)</title><rect x="95.1253%" y="485" width="0.2037%" height="15" fill="rgb(215,126,34)" fg:x="111153" fg:w="238"/><text x="95.3753%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (216 samples, 0.18%)</title><rect x="95.1442%" y="469" width="0.1849%" height="15" fill="rgb(241,132,45)" fg:x="111175" fg:w="216"/><text x="95.3942%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (216 samples, 0.18%)</title><rect x="95.1442%" y="453" width="0.1849%" height="15" fill="rgb(252,69,32)" fg:x="111175" fg:w="216"/><text x="95.3942%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (54 samples, 0.05%)</title><rect x="95.2828%" y="437" width="0.0462%" height="15" fill="rgb(232,204,19)" fg:x="111337" fg:w="54"/><text x="95.5328%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (29 samples, 0.02%)</title><rect x="95.3042%" y="421" width="0.0248%" height="15" fill="rgb(249,15,47)" fg:x="111362" fg:w="29"/><text x="95.5542%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (13 samples, 0.01%)</title><rect x="95.3179%" y="405" width="0.0111%" height="15" fill="rgb(209,227,23)" fg:x="111378" fg:w="13"/><text x="95.5679%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="95.3179%" y="389" width="0.0111%" height="15" fill="rgb(248,92,24)" fg:x="111378" fg:w="13"/><text x="95.5679%" y="399.50"></text></g><g><title>async_executor::Sleepers::remove (82 samples, 0.07%)</title><rect x="95.3341%" y="485" width="0.0702%" height="15" fill="rgb(247,59,2)" fg:x="111397" fg:w="82"/><text x="95.5841%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (40 samples, 0.03%)</title><rect x="95.3701%" y="469" width="0.0342%" height="15" fill="rgb(221,30,5)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (40 samples, 0.03%)</title><rect x="95.3701%" y="453" width="0.0342%" height="15" fill="rgb(208,108,53)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="95.3701%" y="437" width="0.0342%" height="15" fill="rgb(211,183,26)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (40 samples, 0.03%)</title><rect x="95.3701%" y="421" width="0.0342%" height="15" fill="rgb(232,132,4)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="431.50"></text></g><g><title>core::mem::drop (40 samples, 0.03%)</title><rect x="95.3701%" y="405" width="0.0342%" height="15" fill="rgb(253,128,37)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (40 samples, 0.03%)</title><rect x="95.3701%" y="389" width="0.0342%" height="15" fill="rgb(221,58,24)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="95.3701%" y="373" width="0.0342%" height="15" fill="rgb(230,54,45)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (40 samples, 0.03%)</title><rect x="95.3701%" y="357" width="0.0342%" height="15" fill="rgb(254,21,18)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (40 samples, 0.03%)</title><rect x="95.3701%" y="341" width="0.0342%" height="15" fill="rgb(221,108,0)" fg:x="111439" fg:w="40"/><text x="95.6201%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (15 samples, 0.01%)</title><rect x="95.4060%" y="421" width="0.0128%" height="15" fill="rgb(206,95,1)" fg:x="111481" fg:w="15"/><text x="95.6560%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (15 samples, 0.01%)</title><rect x="95.4060%" y="405" width="0.0128%" height="15" fill="rgb(237,52,5)" fg:x="111481" fg:w="15"/><text x="95.6560%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (18 samples, 0.02%)</title><rect x="95.4043%" y="485" width="0.0154%" height="15" fill="rgb(218,150,34)" fg:x="111479" fg:w="18"/><text x="95.6543%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="95.4043%" y="469" width="0.0154%" height="15" fill="rgb(235,194,28)" fg:x="111479" fg:w="18"/><text x="95.6543%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (16 samples, 0.01%)</title><rect x="95.4060%" y="453" width="0.0137%" height="15" fill="rgb(245,92,18)" fg:x="111481" fg:w="16"/><text x="95.6560%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (16 samples, 0.01%)</title><rect x="95.4060%" y="437" width="0.0137%" height="15" fill="rgb(253,203,53)" fg:x="111481" fg:w="16"/><text x="95.6560%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (52 samples, 0.04%)</title><rect x="95.4197%" y="485" width="0.0445%" height="15" fill="rgb(249,185,47)" fg:x="111497" fg:w="52"/><text x="95.6697%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.04%)</title><rect x="95.4197%" y="469" width="0.0445%" height="15" fill="rgb(252,194,52)" fg:x="111497" fg:w="52"/><text x="95.6697%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (66 samples, 0.06%)</title><rect x="95.4642%" y="485" width="0.0565%" height="15" fill="rgb(210,53,36)" fg:x="111549" fg:w="66"/><text x="95.7142%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (66 samples, 0.06%)</title><rect x="95.4642%" y="469" width="0.0565%" height="15" fill="rgb(237,37,25)" fg:x="111549" fg:w="66"/><text x="95.7142%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (35 samples, 0.03%)</title><rect x="95.5284%" y="437" width="0.0300%" height="15" fill="rgb(242,116,27)" fg:x="111624" fg:w="35"/><text x="95.7784%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="95.5284%" y="421" width="0.0300%" height="15" fill="rgb(213,185,26)" fg:x="111624" fg:w="35"/><text x="95.7784%" y="431.50"></text></g><g><title>async_executor::Ticker::wake (289 samples, 0.25%)</title><rect x="95.3290%" y="501" width="0.2473%" height="15" fill="rgb(225,204,8)" fg:x="111391" fg:w="289"/><text x="95.5790%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (65 samples, 0.06%)</title><rect x="95.5207%" y="485" width="0.0556%" height="15" fill="rgb(254,111,37)" fg:x="111615" fg:w="65"/><text x="95.7707%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (56 samples, 0.05%)</title><rect x="95.5284%" y="469" width="0.0479%" height="15" fill="rgb(242,35,9)" fg:x="111624" fg:w="56"/><text x="95.7784%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (56 samples, 0.05%)</title><rect x="95.5284%" y="453" width="0.0479%" height="15" fill="rgb(232,138,49)" fg:x="111624" fg:w="56"/><text x="95.7784%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (21 samples, 0.02%)</title><rect x="95.5584%" y="437" width="0.0180%" height="15" fill="rgb(247,56,4)" fg:x="111659" fg:w="21"/><text x="95.8084%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (13 samples, 0.01%)</title><rect x="95.5652%" y="421" width="0.0111%" height="15" fill="rgb(226,179,17)" fg:x="111667" fg:w="13"/><text x="95.8152%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,197 samples, 6.16%)</title><rect x="89.4188%" y="565" width="6.1592%" height="15" fill="rgb(216,163,45)" fg:x="104485" fg:w="7197"/><text x="89.6688%" y="575.50">&lt;core::f..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (7,197 samples, 6.16%)</title><rect x="89.4188%" y="549" width="6.1592%" height="15" fill="rgb(211,157,3)" fg:x="104485" fg:w="7197"/><text x="89.6688%" y="559.50">async_ex..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (7,179 samples, 6.14%)</title><rect x="89.4342%" y="533" width="6.1438%" height="15" fill="rgb(234,44,20)" fg:x="104503" fg:w="7179"/><text x="89.6842%" y="543.50">&lt;futures..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (7,169 samples, 6.14%)</title><rect x="89.4428%" y="517" width="6.1353%" height="15" fill="rgb(254,138,23)" fg:x="104513" fg:w="7169"/><text x="89.6928%" y="527.50">async_ex..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,287 samples, 6.24%)</title><rect x="89.3820%" y="597" width="6.2363%" height="15" fill="rgb(206,119,39)" fg:x="104442" fg:w="7287"/><text x="89.6320%" y="607.50">&lt;core::f..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (7,282 samples, 6.23%)</title><rect x="89.3863%" y="581" width="6.2320%" height="15" fill="rgb(231,105,52)" fg:x="104447" fg:w="7282"/><text x="89.6363%" y="591.50">async_ex..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (47 samples, 0.04%)</title><rect x="95.5781%" y="565" width="0.0402%" height="15" fill="rgb(250,20,5)" fg:x="111682" fg:w="47"/><text x="95.8281%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (47 samples, 0.04%)</title><rect x="95.5781%" y="549" width="0.0402%" height="15" fill="rgb(215,198,30)" fg:x="111682" fg:w="47"/><text x="95.8281%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (90 samples, 0.08%)</title><rect x="95.9683%" y="389" width="0.0770%" height="15" fill="rgb(246,142,8)" fg:x="112138" fg:w="90"/><text x="96.2183%" y="399.50"></text></g><g><title>[libc-2.31.so] (86 samples, 0.07%)</title><rect x="95.9717%" y="373" width="0.0736%" height="15" fill="rgb(243,26,38)" fg:x="112142" fg:w="86"/><text x="96.2217%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (125 samples, 0.11%)</title><rect x="96.0453%" y="389" width="0.1070%" height="15" fill="rgb(205,133,28)" fg:x="112228" fg:w="125"/><text x="96.2953%" y="399.50"></text></g><g><title>[libc-2.31.so] (121 samples, 0.10%)</title><rect x="96.0487%" y="373" width="0.1036%" height="15" fill="rgb(212,34,0)" fg:x="112232" fg:w="121"/><text x="96.2987%" y="383.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.13%)</title><rect x="96.1865%" y="373" width="0.1301%" height="15" fill="rgb(251,226,22)" fg:x="112393" fg:w="152"/><text x="96.4365%" y="383.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="96.3183%" y="261" width="0.0145%" height="15" fill="rgb(252,119,9)" fg:x="112547" fg:w="17"/><text x="96.5683%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="96.3175%" y="373" width="0.0171%" height="15" fill="rgb(213,150,50)" fg:x="112546" fg:w="20"/><text x="96.5675%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="96.3175%" y="357" width="0.0171%" height="15" fill="rgb(212,24,39)" fg:x="112546" fg:w="20"/><text x="96.5675%" y="367.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.02%)</title><rect x="96.3175%" y="341" width="0.0171%" height="15" fill="rgb(213,46,39)" fg:x="112546" fg:w="20"/><text x="96.5675%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="96.3175%" y="325" width="0.0171%" height="15" fill="rgb(239,106,12)" fg:x="112546" fg:w="20"/><text x="96.5675%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="96.3175%" y="309" width="0.0171%" height="15" fill="rgb(249,229,21)" fg:x="112546" fg:w="20"/><text x="96.5675%" y="319.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="96.3175%" y="293" width="0.0171%" height="15" fill="rgb(212,158,3)" fg:x="112546" fg:w="20"/><text x="96.5675%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="96.3175%" y="277" width="0.0171%" height="15" fill="rgb(253,26,48)" fg:x="112546" fg:w="20"/><text x="96.5675%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (38 samples, 0.03%)</title><rect x="96.3799%" y="309" width="0.0325%" height="15" fill="rgb(238,178,20)" fg:x="112619" fg:w="38"/><text x="96.6299%" y="319.50"></text></g><g><title>core::mem::replace (38 samples, 0.03%)</title><rect x="96.3799%" y="293" width="0.0325%" height="15" fill="rgb(208,86,15)" fg:x="112619" fg:w="38"/><text x="96.6299%" y="303.50"></text></g><g><title>core::ptr::read (38 samples, 0.03%)</title><rect x="96.3799%" y="277" width="0.0325%" height="15" fill="rgb(239,42,53)" fg:x="112619" fg:w="38"/><text x="96.6299%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (63 samples, 0.05%)</title><rect x="96.3671%" y="325" width="0.0539%" height="15" fill="rgb(245,226,8)" fg:x="112604" fg:w="63"/><text x="96.6171%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (65 samples, 0.06%)</title><rect x="96.4210%" y="325" width="0.0556%" height="15" fill="rgb(216,176,32)" fg:x="112667" fg:w="65"/><text x="96.6710%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (62 samples, 0.05%)</title><rect x="96.4236%" y="309" width="0.0531%" height="15" fill="rgb(231,186,21)" fg:x="112670" fg:w="62"/><text x="96.6736%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="96.4236%" y="293" width="0.0531%" height="15" fill="rgb(205,95,49)" fg:x="112670" fg:w="62"/><text x="96.6736%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (54 samples, 0.05%)</title><rect x="96.4304%" y="277" width="0.0462%" height="15" fill="rgb(217,145,8)" fg:x="112678" fg:w="54"/><text x="96.6804%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (54 samples, 0.05%)</title><rect x="96.4304%" y="261" width="0.0462%" height="15" fill="rgb(239,144,48)" fg:x="112678" fg:w="54"/><text x="96.6804%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (54 samples, 0.05%)</title><rect x="96.4304%" y="245" width="0.0462%" height="15" fill="rgb(214,189,23)" fg:x="112678" fg:w="54"/><text x="96.6804%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_swap (54 samples, 0.05%)</title><rect x="96.4304%" y="229" width="0.0462%" height="15" fill="rgb(229,157,17)" fg:x="112678" fg:w="54"/><text x="96.6804%" y="239.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (224 samples, 0.19%)</title><rect x="96.3466%" y="341" width="0.1917%" height="15" fill="rgb(230,5,48)" fg:x="112580" fg:w="224"/><text x="96.5966%" y="351.50"></text></g><g><title>event_listener::Inner::lock (64 samples, 0.05%)</title><rect x="96.4835%" y="325" width="0.0548%" height="15" fill="rgb(224,156,48)" fg:x="112740" fg:w="64"/><text x="96.7335%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.05%)</title><rect x="96.4878%" y="309" width="0.0505%" height="15" fill="rgb(223,14,29)" fg:x="112745" fg:w="59"/><text x="96.7378%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (55 samples, 0.05%)</title><rect x="96.4912%" y="293" width="0.0471%" height="15" fill="rgb(229,96,36)" fg:x="112749" fg:w="55"/><text x="96.7412%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (55 samples, 0.05%)</title><rect x="96.4912%" y="277" width="0.0471%" height="15" fill="rgb(231,102,53)" fg:x="112749" fg:w="55"/><text x="96.7412%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (55 samples, 0.05%)</title><rect x="96.4912%" y="261" width="0.0471%" height="15" fill="rgb(210,77,38)" fg:x="112749" fg:w="55"/><text x="96.7412%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (55 samples, 0.05%)</title><rect x="96.4912%" y="245" width="0.0471%" height="15" fill="rgb(235,131,6)" fg:x="112749" fg:w="55"/><text x="96.7412%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (80 samples, 0.07%)</title><rect x="96.5554%" y="293" width="0.0685%" height="15" fill="rgb(252,55,38)" fg:x="112824" fg:w="80"/><text x="96.8054%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (79 samples, 0.07%)</title><rect x="96.5562%" y="277" width="0.0676%" height="15" fill="rgb(246,38,14)" fg:x="112825" fg:w="79"/><text x="96.8062%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (79 samples, 0.07%)</title><rect x="96.5562%" y="261" width="0.0676%" height="15" fill="rgb(242,27,5)" fg:x="112825" fg:w="79"/><text x="96.8062%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (79 samples, 0.07%)</title><rect x="96.5562%" y="245" width="0.0676%" height="15" fill="rgb(228,65,35)" fg:x="112825" fg:w="79"/><text x="96.8062%" y="255.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (571 samples, 0.49%)</title><rect x="96.1523%" y="389" width="0.4887%" height="15" fill="rgb(245,93,11)" fg:x="112353" fg:w="571"/><text x="96.4023%" y="399.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (358 samples, 0.31%)</title><rect x="96.3346%" y="373" width="0.3064%" height="15" fill="rgb(213,1,31)" fg:x="112566" fg:w="358"/><text x="96.5846%" y="383.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (358 samples, 0.31%)</title><rect x="96.3346%" y="357" width="0.3064%" height="15" fill="rgb(237,205,14)" fg:x="112566" fg:w="358"/><text x="96.5846%" y="367.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (120 samples, 0.10%)</title><rect x="96.5383%" y="341" width="0.1027%" height="15" fill="rgb(232,118,45)" fg:x="112804" fg:w="120"/><text x="96.7883%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (115 samples, 0.10%)</title><rect x="96.5425%" y="325" width="0.0984%" height="15" fill="rgb(218,5,6)" fg:x="112809" fg:w="115"/><text x="96.7925%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (110 samples, 0.09%)</title><rect x="96.5468%" y="309" width="0.0941%" height="15" fill="rgb(251,87,51)" fg:x="112814" fg:w="110"/><text x="96.7968%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="96.6273%" y="293" width="0.0137%" height="15" fill="rgb(207,225,20)" fg:x="112908" fg:w="16"/><text x="96.8773%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="96.6273%" y="277" width="0.0137%" height="15" fill="rgb(222,78,54)" fg:x="112908" fg:w="16"/><text x="96.8773%" y="287.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="96.6410%" y="389" width="0.0300%" height="15" fill="rgb(232,85,16)" fg:x="112924" fg:w="35"/><text x="96.8910%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.02%)</title><rect x="96.7787%" y="261" width="0.0180%" height="15" fill="rgb(244,25,33)" fg:x="113085" fg:w="21"/><text x="97.0287%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (148 samples, 0.13%)</title><rect x="96.6709%" y="389" width="0.1267%" height="15" fill="rgb(233,24,36)" fg:x="112959" fg:w="148"/><text x="96.9209%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (54 samples, 0.05%)</title><rect x="96.7514%" y="373" width="0.0462%" height="15" fill="rgb(253,49,54)" fg:x="113053" fg:w="54"/><text x="97.0014%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54 samples, 0.05%)</title><rect x="96.7514%" y="357" width="0.0462%" height="15" fill="rgb(245,12,22)" fg:x="113053" fg:w="54"/><text x="97.0014%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54 samples, 0.05%)</title><rect x="96.7514%" y="341" width="0.0462%" height="15" fill="rgb(253,141,28)" fg:x="113053" fg:w="54"/><text x="97.0014%" y="351.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.05%)</title><rect x="96.7522%" y="325" width="0.0454%" height="15" fill="rgb(225,207,27)" fg:x="113054" fg:w="53"/><text x="97.0022%" y="335.50"></text></g><g><title>__rg_alloc (53 samples, 0.05%)</title><rect x="96.7522%" y="309" width="0.0454%" height="15" fill="rgb(220,84,2)" fg:x="113054" fg:w="53"/><text x="97.0022%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 0.05%)</title><rect x="96.7522%" y="293" width="0.0454%" height="15" fill="rgb(224,37,37)" fg:x="113054" fg:w="53"/><text x="97.0022%" y="303.50"></text></g><g><title>sn_rust_alloc (48 samples, 0.04%)</title><rect x="96.7565%" y="277" width="0.0411%" height="15" fill="rgb(220,143,18)" fg:x="113059" fg:w="48"/><text x="97.0065%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,170 samples, 1.00%)</title><rect x="95.8083%" y="405" width="1.0013%" height="15" fill="rgb(210,88,33)" fg:x="111951" fg:w="1170"/><text x="96.0583%" y="415.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,206 samples, 1.03%)</title><rect x="95.7783%" y="437" width="1.0321%" height="15" fill="rgb(219,87,51)" fg:x="111916" fg:w="1206"/><text x="96.0283%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,206 samples, 1.03%)</title><rect x="95.7783%" y="421" width="1.0321%" height="15" fill="rgb(211,7,35)" fg:x="111916" fg:w="1206"/><text x="96.0283%" y="431.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,284 samples, 1.10%)</title><rect x="95.7193%" y="565" width="1.0989%" height="15" fill="rgb(232,77,2)" fg:x="111847" fg:w="1284"/><text x="95.9693%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,284 samples, 1.10%)</title><rect x="95.7193%" y="549" width="1.0989%" height="15" fill="rgb(249,94,25)" fg:x="111847" fg:w="1284"/><text x="95.9693%" y="559.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,283 samples, 1.10%)</title><rect x="95.7201%" y="533" width="1.0980%" height="15" fill="rgb(215,112,2)" fg:x="111848" fg:w="1283"/><text x="95.9701%" y="543.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,226 samples, 1.05%)</title><rect x="95.7689%" y="517" width="1.0492%" height="15" fill="rgb(226,115,48)" fg:x="111905" fg:w="1226"/><text x="96.0189%" y="527.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,226 samples, 1.05%)</title><rect x="95.7689%" y="501" width="1.0492%" height="15" fill="rgb(249,196,10)" fg:x="111905" fg:w="1226"/><text x="96.0189%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,226 samples, 1.05%)</title><rect x="95.7689%" y="485" width="1.0492%" height="15" fill="rgb(237,109,14)" fg:x="111905" fg:w="1226"/><text x="96.0189%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,226 samples, 1.05%)</title><rect x="95.7689%" y="469" width="1.0492%" height="15" fill="rgb(217,103,53)" fg:x="111905" fg:w="1226"/><text x="96.0189%" y="479.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,217 samples, 1.04%)</title><rect x="95.7766%" y="453" width="1.0415%" height="15" fill="rgb(244,137,9)" fg:x="111914" fg:w="1217"/><text x="96.0266%" y="463.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (19 samples, 0.02%)</title><rect x="96.8181%" y="565" width="0.0163%" height="15" fill="rgb(227,201,3)" fg:x="113131" fg:w="19"/><text x="97.0681%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (18 samples, 0.02%)</title><rect x="96.8190%" y="549" width="0.0154%" height="15" fill="rgb(243,94,6)" fg:x="113132" fg:w="18"/><text x="97.0690%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (18 samples, 0.02%)</title><rect x="96.8190%" y="533" width="0.0154%" height="15" fill="rgb(235,118,5)" fg:x="113132" fg:w="18"/><text x="97.0690%" y="543.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (12 samples, 0.01%)</title><rect x="96.8344%" y="565" width="0.0103%" height="15" fill="rgb(247,10,30)" fg:x="113150" fg:w="12"/><text x="97.0844%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (165 samples, 0.14%)</title><rect x="96.8446%" y="565" width="0.1412%" height="15" fill="rgb(205,26,28)" fg:x="113162" fg:w="165"/><text x="97.0946%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (165 samples, 0.14%)</title><rect x="96.8446%" y="549" width="0.1412%" height="15" fill="rgb(206,99,35)" fg:x="113162" fg:w="165"/><text x="97.0946%" y="559.50"></text></g><g><title>async_task::runnable::Runnable::run (1,600 samples, 1.37%)</title><rect x="95.6191%" y="597" width="1.3693%" height="15" fill="rgb(238,130,40)" fg:x="111730" fg:w="1600"/><text x="95.8691%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,554 samples, 1.33%)</title><rect x="95.6585%" y="581" width="1.3299%" height="15" fill="rgb(224,126,31)" fg:x="111776" fg:w="1554"/><text x="95.9085%" y="591.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (8,963 samples, 7.67%)</title><rect x="89.3427%" y="661" width="7.6706%" height="15" fill="rgb(254,105,17)" fg:x="104396" fg:w="8963"/><text x="89.5927%" y="671.50">async_execu..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (8,933 samples, 7.64%)</title><rect x="89.3683%" y="645" width="7.6449%" height="15" fill="rgb(216,87,36)" fg:x="104426" fg:w="8933"/><text x="89.6183%" y="655.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,933 samples, 7.64%)</title><rect x="89.3683%" y="629" width="7.6449%" height="15" fill="rgb(240,21,12)" fg:x="104426" fg:w="8933"/><text x="89.6183%" y="639.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (8,932 samples, 7.64%)</title><rect x="89.3692%" y="613" width="7.6441%" height="15" fill="rgb(245,192,34)" fg:x="104427" fg:w="8932"/><text x="89.6192%" y="623.50">async_exec..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (29 samples, 0.02%)</title><rect x="96.9884%" y="597" width="0.0248%" height="15" fill="rgb(226,100,49)" fg:x="113330" fg:w="29"/><text x="97.2384%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (29 samples, 0.02%)</title><rect x="96.9884%" y="581" width="0.0248%" height="15" fill="rgb(245,188,27)" fg:x="113330" fg:w="29"/><text x="97.2384%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 0.03%)</title><rect x="97.0766%" y="405" width="0.0257%" height="15" fill="rgb(212,170,8)" fg:x="113433" fg:w="30"/><text x="97.3266%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28 samples, 0.02%)</title><rect x="97.0783%" y="389" width="0.0240%" height="15" fill="rgb(217,113,29)" fg:x="113435" fg:w="28"/><text x="97.3283%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (27 samples, 0.02%)</title><rect x="97.0791%" y="373" width="0.0231%" height="15" fill="rgb(237,30,3)" fg:x="113436" fg:w="27"/><text x="97.3291%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.02%)</title><rect x="97.0834%" y="357" width="0.0188%" height="15" fill="rgb(227,19,28)" fg:x="113441" fg:w="22"/><text x="97.3334%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (22 samples, 0.02%)</title><rect x="97.0834%" y="341" width="0.0188%" height="15" fill="rgb(239,172,45)" fg:x="113441" fg:w="22"/><text x="97.3334%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (20 samples, 0.02%)</title><rect x="97.0851%" y="325" width="0.0171%" height="15" fill="rgb(254,55,39)" fg:x="113443" fg:w="20"/><text x="97.3351%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.02%)</title><rect x="97.0851%" y="309" width="0.0171%" height="15" fill="rgb(249,208,12)" fg:x="113443" fg:w="20"/><text x="97.3351%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.03%)</title><rect x="97.0757%" y="453" width="0.0274%" height="15" fill="rgb(240,52,13)" fg:x="113432" fg:w="32"/><text x="97.3257%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (32 samples, 0.03%)</title><rect x="97.0757%" y="437" width="0.0274%" height="15" fill="rgb(252,149,13)" fg:x="113432" fg:w="32"/><text x="97.3257%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 0.03%)</title><rect x="97.0757%" y="421" width="0.0274%" height="15" fill="rgb(232,81,48)" fg:x="113432" fg:w="32"/><text x="97.3257%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (36 samples, 0.03%)</title><rect x="97.1305%" y="421" width="0.0308%" height="15" fill="rgb(222,144,2)" fg:x="113496" fg:w="36"/><text x="97.3805%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (33 samples, 0.03%)</title><rect x="97.1331%" y="405" width="0.0282%" height="15" fill="rgb(216,81,32)" fg:x="113499" fg:w="33"/><text x="97.3831%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (33 samples, 0.03%)</title><rect x="97.1331%" y="389" width="0.0282%" height="15" fill="rgb(244,78,51)" fg:x="113499" fg:w="33"/><text x="97.3831%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.03%)</title><rect x="97.1331%" y="373" width="0.0282%" height="15" fill="rgb(217,66,21)" fg:x="113499" fg:w="33"/><text x="97.3831%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (90 samples, 0.08%)</title><rect x="97.1159%" y="437" width="0.0770%" height="15" fill="rgb(247,101,42)" fg:x="113479" fg:w="90"/><text x="97.3659%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (37 samples, 0.03%)</title><rect x="97.1613%" y="421" width="0.0317%" height="15" fill="rgb(227,81,39)" fg:x="113532" fg:w="37"/><text x="97.4113%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.03%)</title><rect x="97.1613%" y="405" width="0.0317%" height="15" fill="rgb(220,223,44)" fg:x="113532" fg:w="37"/><text x="97.4113%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (41 samples, 0.04%)</title><rect x="97.2041%" y="421" width="0.0351%" height="15" fill="rgb(205,218,2)" fg:x="113582" fg:w="41"/><text x="97.4541%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (41 samples, 0.04%)</title><rect x="97.2041%" y="405" width="0.0351%" height="15" fill="rgb(212,207,28)" fg:x="113582" fg:w="41"/><text x="97.4541%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (41 samples, 0.04%)</title><rect x="97.2041%" y="389" width="0.0351%" height="15" fill="rgb(224,12,41)" fg:x="113582" fg:w="41"/><text x="97.4541%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.04%)</title><rect x="97.2041%" y="373" width="0.0351%" height="15" fill="rgb(216,118,12)" fg:x="113582" fg:w="41"/><text x="97.4541%" y="383.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (180 samples, 0.15%)</title><rect x="97.1031%" y="453" width="0.1540%" height="15" fill="rgb(252,97,46)" fg:x="113464" fg:w="180"/><text x="97.3531%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (75 samples, 0.06%)</title><rect x="97.1930%" y="437" width="0.0642%" height="15" fill="rgb(244,206,19)" fg:x="113569" fg:w="75"/><text x="97.4430%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.02%)</title><rect x="97.2417%" y="421" width="0.0154%" height="15" fill="rgb(231,84,31)" fg:x="113626" fg:w="18"/><text x="97.4917%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.02%)</title><rect x="97.2417%" y="405" width="0.0154%" height="15" fill="rgb(244,133,0)" fg:x="113626" fg:w="18"/><text x="97.4917%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="97.2571%" y="453" width="0.0317%" height="15" fill="rgb(223,15,50)" fg:x="113644" fg:w="37"/><text x="97.5071%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="97.2571%" y="437" width="0.0317%" height="15" fill="rgb(250,118,49)" fg:x="113644" fg:w="37"/><text x="97.5071%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (34 samples, 0.03%)</title><rect x="97.2597%" y="421" width="0.0291%" height="15" fill="rgb(248,25,38)" fg:x="113647" fg:w="34"/><text x="97.5097%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (34 samples, 0.03%)</title><rect x="97.2597%" y="405" width="0.0291%" height="15" fill="rgb(215,70,14)" fg:x="113647" fg:w="34"/><text x="97.5097%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (34 samples, 0.03%)</title><rect x="97.2597%" y="389" width="0.0291%" height="15" fill="rgb(215,28,15)" fg:x="113647" fg:w="34"/><text x="97.5097%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.03%)</title><rect x="97.2597%" y="373" width="0.0291%" height="15" fill="rgb(243,6,28)" fg:x="113647" fg:w="34"/><text x="97.5097%" y="383.50"></text></g><g><title>fastrand::usize (26 samples, 0.02%)</title><rect x="97.2888%" y="453" width="0.0223%" height="15" fill="rgb(222,130,1)" fg:x="113681" fg:w="26"/><text x="97.5388%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.02%)</title><rect x="97.2957%" y="437" width="0.0154%" height="15" fill="rgb(236,166,44)" fg:x="113689" fg:w="18"/><text x="97.5457%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.02%)</title><rect x="97.2957%" y="421" width="0.0154%" height="15" fill="rgb(221,108,14)" fg:x="113689" fg:w="18"/><text x="97.5457%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (39 samples, 0.03%)</title><rect x="97.3145%" y="405" width="0.0334%" height="15" fill="rgb(252,3,45)" fg:x="113711" fg:w="39"/><text x="97.5645%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (39 samples, 0.03%)</title><rect x="97.3145%" y="389" width="0.0334%" height="15" fill="rgb(237,68,30)" fg:x="113711" fg:w="39"/><text x="97.5645%" y="399.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (326 samples, 0.28%)</title><rect x="97.0731%" y="469" width="0.2790%" height="15" fill="rgb(211,79,22)" fg:x="113429" fg:w="326"/><text x="97.3231%" y="479.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (48 samples, 0.04%)</title><rect x="97.3111%" y="453" width="0.0411%" height="15" fill="rgb(252,185,21)" fg:x="113707" fg:w="48"/><text x="97.5611%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (46 samples, 0.04%)</title><rect x="97.3128%" y="437" width="0.0394%" height="15" fill="rgb(225,189,26)" fg:x="113709" fg:w="46"/><text x="97.5628%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (46 samples, 0.04%)</title><rect x="97.3128%" y="421" width="0.0394%" height="15" fill="rgb(241,30,40)" fg:x="113709" fg:w="46"/><text x="97.5628%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (30 samples, 0.03%)</title><rect x="97.3590%" y="453" width="0.0257%" height="15" fill="rgb(235,215,44)" fg:x="113763" fg:w="30"/><text x="97.6090%" y="463.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="97.3710%" y="437" width="0.0137%" height="15" fill="rgb(205,8,29)" fg:x="113777" fg:w="16"/><text x="97.6210%" y="447.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="97.3710%" y="421" width="0.0137%" height="15" fill="rgb(241,137,42)" fg:x="113777" fg:w="16"/><text x="97.6210%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (53 samples, 0.05%)</title><rect x="97.3847%" y="453" width="0.0454%" height="15" fill="rgb(237,155,2)" fg:x="113793" fg:w="53"/><text x="97.6347%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.05%)</title><rect x="97.3847%" y="437" width="0.0454%" height="15" fill="rgb(245,29,42)" fg:x="113793" fg:w="53"/><text x="97.6347%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (49 samples, 0.04%)</title><rect x="97.3881%" y="421" width="0.0419%" height="15" fill="rgb(234,101,35)" fg:x="113797" fg:w="49"/><text x="97.6381%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (49 samples, 0.04%)</title><rect x="97.3881%" y="405" width="0.0419%" height="15" fill="rgb(228,64,37)" fg:x="113797" fg:w="49"/><text x="97.6381%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (49 samples, 0.04%)</title><rect x="97.3881%" y="389" width="0.0419%" height="15" fill="rgb(217,214,36)" fg:x="113797" fg:w="49"/><text x="97.6381%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (49 samples, 0.04%)</title><rect x="97.3881%" y="373" width="0.0419%" height="15" fill="rgb(243,70,3)" fg:x="113797" fg:w="49"/><text x="97.6381%" y="383.50"></text></g><g><title>async_executor::Ticker::sleep (142 samples, 0.12%)</title><rect x="97.3521%" y="469" width="0.1215%" height="15" fill="rgb(253,158,52)" fg:x="113755" fg:w="142"/><text x="97.6021%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (51 samples, 0.04%)</title><rect x="97.4300%" y="453" width="0.0436%" height="15" fill="rgb(234,111,54)" fg:x="113846" fg:w="51"/><text x="97.6800%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (46 samples, 0.04%)</title><rect x="97.4343%" y="437" width="0.0394%" height="15" fill="rgb(217,70,32)" fg:x="113851" fg:w="46"/><text x="97.6843%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (46 samples, 0.04%)</title><rect x="97.4343%" y="421" width="0.0394%" height="15" fill="rgb(234,18,33)" fg:x="113851" fg:w="46"/><text x="97.6843%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (46 samples, 0.04%)</title><rect x="97.4343%" y="405" width="0.0394%" height="15" fill="rgb(234,12,49)" fg:x="113851" fg:w="46"/><text x="97.6843%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="97.4343%" y="389" width="0.0394%" height="15" fill="rgb(236,10,21)" fg:x="113851" fg:w="46"/><text x="97.6843%" y="399.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (501 samples, 0.43%)</title><rect x="97.0466%" y="581" width="0.4288%" height="15" fill="rgb(248,182,45)" fg:x="113398" fg:w="501"/><text x="97.2966%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (485 samples, 0.42%)</title><rect x="97.0603%" y="565" width="0.4151%" height="15" fill="rgb(217,95,36)" fg:x="113414" fg:w="485"/><text x="97.3103%" y="575.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (485 samples, 0.42%)</title><rect x="97.0603%" y="549" width="0.4151%" height="15" fill="rgb(212,110,31)" fg:x="113414" fg:w="485"/><text x="97.3103%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (478 samples, 0.41%)</title><rect x="97.0663%" y="533" width="0.4091%" height="15" fill="rgb(206,32,53)" fg:x="113421" fg:w="478"/><text x="97.3163%" y="543.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (478 samples, 0.41%)</title><rect x="97.0663%" y="517" width="0.4091%" height="15" fill="rgb(246,141,37)" fg:x="113421" fg:w="478"/><text x="97.3163%" y="527.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (473 samples, 0.40%)</title><rect x="97.0706%" y="501" width="0.4048%" height="15" fill="rgb(219,16,7)" fg:x="113426" fg:w="473"/><text x="97.3206%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (471 samples, 0.40%)</title><rect x="97.0723%" y="485" width="0.4031%" height="15" fill="rgb(230,205,45)" fg:x="113428" fg:w="471"/><text x="97.3223%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (29 samples, 0.02%)</title><rect x="97.5396%" y="517" width="0.0248%" height="15" fill="rgb(231,43,49)" fg:x="113974" fg:w="29"/><text x="97.7896%" y="527.50"></text></g><g><title>core::mem::replace (29 samples, 0.02%)</title><rect x="97.5396%" y="501" width="0.0248%" height="15" fill="rgb(212,106,34)" fg:x="113974" fg:w="29"/><text x="97.7896%" y="511.50"></text></g><g><title>core::ptr::read (28 samples, 0.02%)</title><rect x="97.5404%" y="485" width="0.0240%" height="15" fill="rgb(206,83,17)" fg:x="113975" fg:w="28"/><text x="97.7904%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (45 samples, 0.04%)</title><rect x="97.5319%" y="533" width="0.0385%" height="15" fill="rgb(244,154,49)" fg:x="113965" fg:w="45"/><text x="97.7819%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (48 samples, 0.04%)</title><rect x="97.5704%" y="533" width="0.0411%" height="15" fill="rgb(244,149,49)" fg:x="114010" fg:w="48"/><text x="97.8204%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (41 samples, 0.04%)</title><rect x="97.5764%" y="517" width="0.0351%" height="15" fill="rgb(227,134,18)" fg:x="114017" fg:w="41"/><text x="97.8264%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="97.5764%" y="501" width="0.0351%" height="15" fill="rgb(237,116,36)" fg:x="114017" fg:w="41"/><text x="97.8264%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.03%)</title><rect x="97.5798%" y="485" width="0.0317%" height="15" fill="rgb(205,129,40)" fg:x="114021" fg:w="37"/><text x="97.8298%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (37 samples, 0.03%)</title><rect x="97.5798%" y="469" width="0.0317%" height="15" fill="rgb(236,178,4)" fg:x="114021" fg:w="37"/><text x="97.8298%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (37 samples, 0.03%)</title><rect x="97.5798%" y="453" width="0.0317%" height="15" fill="rgb(251,76,53)" fg:x="114021" fg:w="37"/><text x="97.8298%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (37 samples, 0.03%)</title><rect x="97.5798%" y="437" width="0.0317%" height="15" fill="rgb(242,92,40)" fg:x="114021" fg:w="37"/><text x="97.8298%" y="447.50"></text></g><g><title>core::task::wake::Waker::will_wake (22 samples, 0.02%)</title><rect x="97.6140%" y="533" width="0.0188%" height="15" fill="rgb(209,45,30)" fg:x="114061" fg:w="22"/><text x="97.8640%" y="543.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (22 samples, 0.02%)</title><rect x="97.6140%" y="517" width="0.0188%" height="15" fill="rgb(218,157,36)" fg:x="114061" fg:w="22"/><text x="97.8640%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="97.6157%" y="501" width="0.0171%" height="15" fill="rgb(222,186,16)" fg:x="114063" fg:w="20"/><text x="97.8657%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="97.6157%" y="485" width="0.0171%" height="15" fill="rgb(254,72,35)" fg:x="114063" fg:w="20"/><text x="97.8657%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (211 samples, 0.18%)</title><rect x="97.5079%" y="549" width="0.1806%" height="15" fill="rgb(224,25,35)" fg:x="113937" fg:w="211"/><text x="97.7579%" y="559.50"></text></g><g><title>event_listener::Inner::lock (65 samples, 0.06%)</title><rect x="97.6328%" y="533" width="0.0556%" height="15" fill="rgb(206,135,52)" fg:x="114083" fg:w="65"/><text x="97.8828%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.05%)</title><rect x="97.6363%" y="517" width="0.0522%" height="15" fill="rgb(229,174,47)" fg:x="114087" fg:w="61"/><text x="97.8863%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (58 samples, 0.05%)</title><rect x="97.6388%" y="501" width="0.0496%" height="15" fill="rgb(242,184,21)" fg:x="114090" fg:w="58"/><text x="97.8888%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (58 samples, 0.05%)</title><rect x="97.6388%" y="485" width="0.0496%" height="15" fill="rgb(213,22,45)" fg:x="114090" fg:w="58"/><text x="97.8888%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (58 samples, 0.05%)</title><rect x="97.6388%" y="469" width="0.0496%" height="15" fill="rgb(237,81,54)" fg:x="114090" fg:w="58"/><text x="97.8888%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.05%)</title><rect x="97.6388%" y="453" width="0.0496%" height="15" fill="rgb(248,177,18)" fg:x="114090" fg:w="58"/><text x="97.8888%" y="463.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (82 samples, 0.07%)</title><rect x="97.6885%" y="549" width="0.0702%" height="15" fill="rgb(254,31,16)" fg:x="114148" fg:w="82"/><text x="97.9385%" y="559.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (82 samples, 0.07%)</title><rect x="97.6885%" y="533" width="0.0702%" height="15" fill="rgb(235,20,31)" fg:x="114148" fg:w="82"/><text x="97.9385%" y="543.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (49 samples, 0.04%)</title><rect x="97.7167%" y="517" width="0.0419%" height="15" fill="rgb(240,56,43)" fg:x="114181" fg:w="49"/><text x="97.9667%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (45 samples, 0.04%)</title><rect x="97.7201%" y="501" width="0.0385%" height="15" fill="rgb(237,197,51)" fg:x="114185" fg:w="45"/><text x="97.9701%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (45 samples, 0.04%)</title><rect x="97.7201%" y="485" width="0.0385%" height="15" fill="rgb(241,162,44)" fg:x="114185" fg:w="45"/><text x="97.9701%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (45 samples, 0.04%)</title><rect x="97.7201%" y="469" width="0.0385%" height="15" fill="rgb(224,23,20)" fg:x="114185" fg:w="45"/><text x="97.9701%" y="479.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (843 samples, 0.72%)</title><rect x="97.0415%" y="613" width="0.7214%" height="15" fill="rgb(250,109,34)" fg:x="113392" fg:w="843"/><text x="97.2915%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (838 samples, 0.72%)</title><rect x="97.0458%" y="597" width="0.7172%" height="15" fill="rgb(214,175,50)" fg:x="113397" fg:w="838"/><text x="97.2958%" y="607.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (336 samples, 0.29%)</title><rect x="97.4754%" y="581" width="0.2876%" height="15" fill="rgb(213,182,5)" fg:x="113899" fg:w="336"/><text x="97.7254%" y="591.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (315 samples, 0.27%)</title><rect x="97.4933%" y="565" width="0.2696%" height="15" fill="rgb(209,199,19)" fg:x="113920" fg:w="315"/><text x="97.7433%" y="575.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,875 samples, 8.45%)</title><rect x="89.3127%" y="693" width="8.4511%" height="15" fill="rgb(236,224,42)" fg:x="104361" fg:w="9875"/><text x="89.5627%" y="703.50">&lt;futures_lit..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,841 samples, 8.42%)</title><rect x="89.3418%" y="677" width="8.4220%" height="15" fill="rgb(246,226,29)" fg:x="104395" fg:w="9841"/><text x="89.5918%" y="687.50">&lt;core::futur..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (877 samples, 0.75%)</title><rect x="97.0132%" y="661" width="0.7505%" height="15" fill="rgb(227,223,11)" fg:x="113359" fg:w="877"/><text x="97.2632%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (847 samples, 0.72%)</title><rect x="97.0389%" y="645" width="0.7249%" height="15" fill="rgb(219,7,51)" fg:x="113389" fg:w="847"/><text x="97.2889%" y="655.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (847 samples, 0.72%)</title><rect x="97.0389%" y="629" width="0.7249%" height="15" fill="rgb(245,167,10)" fg:x="113389" fg:w="847"/><text x="97.2889%" y="639.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (24 samples, 0.02%)</title><rect x="97.7646%" y="613" width="0.0205%" height="15" fill="rgb(237,224,16)" fg:x="114237" fg:w="24"/><text x="98.0146%" y="623.50"></text></g><g><title>once_cell::imp::initialize_or_wait (24 samples, 0.02%)</title><rect x="97.7646%" y="597" width="0.0205%" height="15" fill="rgb(226,132,13)" fg:x="114237" fg:w="24"/><text x="98.0146%" y="607.50"></text></g><g><title>once_cell::imp::wait (24 samples, 0.02%)</title><rect x="97.7646%" y="581" width="0.0205%" height="15" fill="rgb(214,140,3)" fg:x="114237" fg:w="24"/><text x="98.0146%" y="591.50"></text></g><g><title>std::thread::park (24 samples, 0.02%)</title><rect x="97.7646%" y="565" width="0.0205%" height="15" fill="rgb(221,177,4)" fg:x="114237" fg:w="24"/><text x="98.0146%" y="575.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (24 samples, 0.02%)</title><rect x="97.7646%" y="549" width="0.0205%" height="15" fill="rgb(238,139,3)" fg:x="114237" fg:w="24"/><text x="98.0146%" y="559.50"></text></g><g><title>std::sys::unix::futex::futex_wait (24 samples, 0.02%)</title><rect x="97.7646%" y="533" width="0.0205%" height="15" fill="rgb(216,17,39)" fg:x="114237" fg:w="24"/><text x="98.0146%" y="543.50"></text></g><g><title>syscall (22 samples, 0.02%)</title><rect x="97.7663%" y="517" width="0.0188%" height="15" fill="rgb(238,120,9)" fg:x="114239" fg:w="22"/><text x="98.0163%" y="527.50"></text></g><g><title>async_io::reactor::Reactor::get (25 samples, 0.02%)</title><rect x="97.7646%" y="693" width="0.0214%" height="15" fill="rgb(244,92,53)" fg:x="114237" fg:w="25"/><text x="98.0146%" y="703.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.02%)</title><rect x="97.7646%" y="677" width="0.0214%" height="15" fill="rgb(224,148,33)" fg:x="114237" fg:w="25"/><text x="98.0146%" y="687.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (25 samples, 0.02%)</title><rect x="97.7646%" y="661" width="0.0214%" height="15" fill="rgb(243,6,36)" fg:x="114237" fg:w="25"/><text x="98.0146%" y="671.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (25 samples, 0.02%)</title><rect x="97.7646%" y="645" width="0.0214%" height="15" fill="rgb(230,102,11)" fg:x="114237" fg:w="25"/><text x="98.0146%" y="655.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (25 samples, 0.02%)</title><rect x="97.7646%" y="629" width="0.0214%" height="15" fill="rgb(234,148,36)" fg:x="114237" fg:w="25"/><text x="98.0146%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (55 samples, 0.05%)</title><rect x="97.7860%" y="693" width="0.0471%" height="15" fill="rgb(251,153,25)" fg:x="114262" fg:w="55"/><text x="98.0360%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (55 samples, 0.05%)</title><rect x="97.7860%" y="677" width="0.0471%" height="15" fill="rgb(215,129,8)" fg:x="114262" fg:w="55"/><text x="98.0360%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (52 samples, 0.04%)</title><rect x="97.7886%" y="661" width="0.0445%" height="15" fill="rgb(224,128,35)" fg:x="114265" fg:w="52"/><text x="98.0386%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (52 samples, 0.04%)</title><rect x="97.7886%" y="645" width="0.0445%" height="15" fill="rgb(237,56,52)" fg:x="114265" fg:w="52"/><text x="98.0386%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (52 samples, 0.04%)</title><rect x="97.7886%" y="629" width="0.0445%" height="15" fill="rgb(234,213,19)" fg:x="114265" fg:w="52"/><text x="98.0386%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.04%)</title><rect x="97.7886%" y="613" width="0.0445%" height="15" fill="rgb(252,82,23)" fg:x="114265" fg:w="52"/><text x="98.0386%" y="623.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="97.8785%" y="517" width="0.0368%" height="15" fill="rgb(254,201,21)" fg:x="114370" fg:w="43"/><text x="98.1285%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (54 samples, 0.05%)</title><rect x="97.8742%" y="613" width="0.0462%" height="15" fill="rgb(250,186,11)" fg:x="114365" fg:w="54"/><text x="98.1242%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (53 samples, 0.05%)</title><rect x="97.8750%" y="597" width="0.0454%" height="15" fill="rgb(211,174,5)" fg:x="114366" fg:w="53"/><text x="98.1250%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 0.05%)</title><rect x="97.8750%" y="581" width="0.0454%" height="15" fill="rgb(214,121,10)" fg:x="114366" fg:w="53"/><text x="98.1250%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (50 samples, 0.04%)</title><rect x="97.8776%" y="565" width="0.0428%" height="15" fill="rgb(241,66,2)" fg:x="114369" fg:w="50"/><text x="98.1276%" y="575.50"></text></g><g><title>__rg_dealloc (50 samples, 0.04%)</title><rect x="97.8776%" y="549" width="0.0428%" height="15" fill="rgb(220,167,19)" fg:x="114369" fg:w="50"/><text x="98.1276%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (50 samples, 0.04%)</title><rect x="97.8776%" y="533" width="0.0428%" height="15" fill="rgb(231,54,50)" fg:x="114369" fg:w="50"/><text x="98.1276%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.05%)</title><rect x="97.8725%" y="661" width="0.0513%" height="15" fill="rgb(239,217,53)" fg:x="114363" fg:w="60"/><text x="98.1225%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (58 samples, 0.05%)</title><rect x="97.8742%" y="645" width="0.0496%" height="15" fill="rgb(248,8,0)" fg:x="114365" fg:w="58"/><text x="98.1242%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (58 samples, 0.05%)</title><rect x="97.8742%" y="629" width="0.0496%" height="15" fill="rgb(229,118,37)" fg:x="114365" fg:w="58"/><text x="98.1242%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="97.9238%" y="661" width="0.0120%" height="15" fill="rgb(253,223,43)" fg:x="114423" fg:w="14"/><text x="98.1738%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="97.9238%" y="645" width="0.0120%" height="15" fill="rgb(211,77,36)" fg:x="114423" fg:w="14"/><text x="98.1738%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (13 samples, 0.01%)</title><rect x="97.9247%" y="629" width="0.0111%" height="15" fill="rgb(219,3,53)" fg:x="114424" fg:w="13"/><text x="98.1747%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (22 samples, 0.02%)</title><rect x="97.9461%" y="629" width="0.0188%" height="15" fill="rgb(244,45,42)" fg:x="114449" fg:w="22"/><text x="98.1961%" y="639.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (19 samples, 0.02%)</title><rect x="97.9486%" y="613" width="0.0163%" height="15" fill="rgb(225,95,27)" fg:x="114452" fg:w="19"/><text x="98.1986%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="97.9486%" y="597" width="0.0163%" height="15" fill="rgb(207,74,8)" fg:x="114452" fg:w="19"/><text x="98.1986%" y="607.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="97.9486%" y="581" width="0.0163%" height="15" fill="rgb(243,63,36)" fg:x="114452" fg:w="19"/><text x="98.1986%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (15 samples, 0.01%)</title><rect x="97.9649%" y="629" width="0.0128%" height="15" fill="rgb(211,180,12)" fg:x="114471" fg:w="15"/><text x="98.2149%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (15 samples, 0.01%)</title><rect x="97.9649%" y="613" width="0.0128%" height="15" fill="rgb(254,166,49)" fg:x="114471" fg:w="15"/><text x="98.2149%" y="623.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (110 samples, 0.09%)</title><rect x="97.9409%" y="645" width="0.0941%" height="15" fill="rgb(205,19,0)" fg:x="114443" fg:w="110"/><text x="98.1909%" y="655.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (67 samples, 0.06%)</title><rect x="97.9777%" y="629" width="0.0573%" height="15" fill="rgb(224,172,32)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (67 samples, 0.06%)</title><rect x="97.9777%" y="613" width="0.0573%" height="15" fill="rgb(254,136,30)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (67 samples, 0.06%)</title><rect x="97.9777%" y="597" width="0.0573%" height="15" fill="rgb(246,19,35)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="607.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (67 samples, 0.06%)</title><rect x="97.9777%" y="581" width="0.0573%" height="15" fill="rgb(219,24,36)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (67 samples, 0.06%)</title><rect x="97.9777%" y="565" width="0.0573%" height="15" fill="rgb(251,55,1)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (67 samples, 0.06%)</title><rect x="97.9777%" y="549" width="0.0573%" height="15" fill="rgb(218,117,39)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (67 samples, 0.06%)</title><rect x="97.9777%" y="533" width="0.0573%" height="15" fill="rgb(248,169,11)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.06%)</title><rect x="97.9777%" y="517" width="0.0573%" height="15" fill="rgb(244,40,44)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.06%)</title><rect x="97.9777%" y="501" width="0.0573%" height="15" fill="rgb(234,62,37)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="511.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.06%)</title><rect x="97.9777%" y="485" width="0.0573%" height="15" fill="rgb(207,117,42)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="495.50"></text></g><g><title>__rg_alloc (67 samples, 0.06%)</title><rect x="97.9777%" y="469" width="0.0573%" height="15" fill="rgb(213,43,2)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (67 samples, 0.06%)</title><rect x="97.9777%" y="453" width="0.0573%" height="15" fill="rgb(244,202,51)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="463.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.06%)</title><rect x="97.9777%" y="437" width="0.0573%" height="15" fill="rgb(253,174,46)" fg:x="114486" fg:w="67"/><text x="98.2277%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="98.0188%" y="421" width="0.0163%" height="15" fill="rgb(251,23,1)" fg:x="114534" fg:w="19"/><text x="98.2688%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (114 samples, 0.10%)</title><rect x="97.9384%" y="661" width="0.0976%" height="15" fill="rgb(253,26,1)" fg:x="114440" fg:w="114"/><text x="98.1884%" y="671.50"></text></g><g><title>concurrent_queue::full_fence (12 samples, 0.01%)</title><rect x="98.0496%" y="613" width="0.0103%" height="15" fill="rgb(216,89,31)" fg:x="114570" fg:w="12"/><text x="98.2996%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (12 samples, 0.01%)</title><rect x="98.0496%" y="597" width="0.0103%" height="15" fill="rgb(209,109,5)" fg:x="114570" fg:w="12"/><text x="98.2996%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (12 samples, 0.01%)</title><rect x="98.0496%" y="581" width="0.0103%" height="15" fill="rgb(229,63,13)" fg:x="114570" fg:w="12"/><text x="98.2996%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="98.0496%" y="565" width="0.0103%" height="15" fill="rgb(238,137,54)" fg:x="114570" fg:w="12"/><text x="98.2996%" y="575.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (39 samples, 0.03%)</title><rect x="98.0359%" y="661" width="0.0334%" height="15" fill="rgb(228,1,9)" fg:x="114554" fg:w="39"/><text x="98.2859%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (30 samples, 0.03%)</title><rect x="98.0436%" y="645" width="0.0257%" height="15" fill="rgb(249,120,48)" fg:x="114563" fg:w="30"/><text x="98.2936%" y="655.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (27 samples, 0.02%)</title><rect x="98.0462%" y="629" width="0.0231%" height="15" fill="rgb(209,72,36)" fg:x="114566" fg:w="27"/><text x="98.2962%" y="639.50"></text></g><g><title>core::mem::drop (43 samples, 0.04%)</title><rect x="98.0693%" y="661" width="0.0368%" height="15" fill="rgb(247,98,49)" fg:x="114593" fg:w="43"/><text x="98.3193%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (43 samples, 0.04%)</title><rect x="98.0693%" y="645" width="0.0368%" height="15" fill="rgb(233,75,36)" fg:x="114593" fg:w="43"/><text x="98.3193%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="98.0693%" y="629" width="0.0368%" height="15" fill="rgb(225,14,24)" fg:x="114593" fg:w="43"/><text x="98.3193%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (43 samples, 0.04%)</title><rect x="98.0693%" y="613" width="0.0368%" height="15" fill="rgb(237,193,20)" fg:x="114593" fg:w="43"/><text x="98.3193%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (43 samples, 0.04%)</title><rect x="98.0693%" y="597" width="0.0368%" height="15" fill="rgb(239,122,19)" fg:x="114593" fg:w="43"/><text x="98.3193%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (43 samples, 0.04%)</title><rect x="98.0693%" y="581" width="0.0368%" height="15" fill="rgb(231,220,10)" fg:x="114593" fg:w="43"/><text x="98.3193%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (43 samples, 0.04%)</title><rect x="98.0693%" y="565" width="0.0368%" height="15" fill="rgb(220,66,15)" fg:x="114593" fg:w="43"/><text x="98.3193%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.02%)</title><rect x="98.1078%" y="661" width="0.0154%" height="15" fill="rgb(215,171,52)" fg:x="114638" fg:w="18"/><text x="98.3578%" y="671.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (15 samples, 0.01%)</title><rect x="98.1104%" y="645" width="0.0128%" height="15" fill="rgb(241,169,50)" fg:x="114641" fg:w="15"/><text x="98.3604%" y="655.50"></text></g><g><title>std::time::Instant::duration_since (15 samples, 0.01%)</title><rect x="98.1104%" y="629" width="0.0128%" height="15" fill="rgb(236,189,0)" fg:x="114641" fg:w="15"/><text x="98.3604%" y="639.50"></text></g><g><title>std::time::Instant::checked_duration_since (15 samples, 0.01%)</title><rect x="98.1104%" y="613" width="0.0128%" height="15" fill="rgb(217,147,20)" fg:x="114641" fg:w="15"/><text x="98.3604%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (15 samples, 0.01%)</title><rect x="98.1104%" y="597" width="0.0128%" height="15" fill="rgb(206,188,39)" fg:x="114641" fg:w="15"/><text x="98.3604%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (42 samples, 0.04%)</title><rect x="98.1266%" y="661" width="0.0359%" height="15" fill="rgb(227,118,25)" fg:x="114660" fg:w="42"/><text x="98.3766%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (41 samples, 0.04%)</title><rect x="98.1275%" y="645" width="0.0351%" height="15" fill="rgb(248,171,40)" fg:x="114661" fg:w="41"/><text x="98.3775%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (41 samples, 0.04%)</title><rect x="98.1275%" y="629" width="0.0351%" height="15" fill="rgb(251,90,54)" fg:x="114661" fg:w="41"/><text x="98.3775%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (41 samples, 0.04%)</title><rect x="98.1275%" y="613" width="0.0351%" height="15" fill="rgb(234,11,46)" fg:x="114661" fg:w="41"/><text x="98.3775%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.04%)</title><rect x="98.1275%" y="597" width="0.0351%" height="15" fill="rgb(229,134,13)" fg:x="114661" fg:w="41"/><text x="98.3775%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (395 samples, 0.34%)</title><rect x="97.8545%" y="677" width="0.3380%" height="15" fill="rgb(223,129,3)" fg:x="114342" fg:w="395"/><text x="98.1045%" y="687.50"></text></g><g><title>std::time::Instant::now (35 samples, 0.03%)</title><rect x="98.1626%" y="661" width="0.0300%" height="15" fill="rgb(221,124,13)" fg:x="114702" fg:w="35"/><text x="98.4126%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (35 samples, 0.03%)</title><rect x="98.1626%" y="645" width="0.0300%" height="15" fill="rgb(234,3,18)" fg:x="114702" fg:w="35"/><text x="98.4126%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (35 samples, 0.03%)</title><rect x="98.1626%" y="629" width="0.0300%" height="15" fill="rgb(249,199,20)" fg:x="114702" fg:w="35"/><text x="98.4126%" y="639.50"></text></g><g><title>__clock_gettime (34 samples, 0.03%)</title><rect x="98.1634%" y="613" width="0.0291%" height="15" fill="rgb(224,134,6)" fg:x="114703" fg:w="34"/><text x="98.4134%" y="623.50"></text></g><g><title>__vdso_clock_gettime (25 samples, 0.02%)</title><rect x="98.1711%" y="597" width="0.0214%" height="15" fill="rgb(254,83,26)" fg:x="114712" fg:w="25"/><text x="98.4211%" y="607.50"></text></g><g><title>[[vdso]] (23 samples, 0.02%)</title><rect x="98.1729%" y="581" width="0.0197%" height="15" fill="rgb(217,88,9)" fg:x="114714" fg:w="23"/><text x="98.4229%" y="591.50"></text></g><g><title>__libc_read (80 samples, 0.07%)</title><rect x="98.3329%" y="645" width="0.0685%" height="15" fill="rgb(225,73,2)" fg:x="114901" fg:w="80"/><text x="98.5829%" y="655.50"></text></g><g><title>__pthread_enable_asynccancel (45 samples, 0.04%)</title><rect x="98.3628%" y="629" width="0.0385%" height="15" fill="rgb(226,44,39)" fg:x="114936" fg:w="45"/><text x="98.6128%" y="639.50"></text></g><g><title>epoll_wait (143 samples, 0.12%)</title><rect x="98.4014%" y="645" width="0.1224%" height="15" fill="rgb(228,53,17)" fg:x="114981" fg:w="143"/><text x="98.6514%" y="655.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="98.4972%" y="629" width="0.0265%" height="15" fill="rgb(212,27,27)" fg:x="115093" fg:w="31"/><text x="98.7472%" y="639.50"></text></g><g><title>polling::epoll::Poller::modify (44 samples, 0.04%)</title><rect x="98.5237%" y="645" width="0.0377%" height="15" fill="rgb(241,50,6)" fg:x="115124" fg:w="44"/><text x="98.7737%" y="655.50"></text></g><g><title>polling::epoll::Poller::ctl (38 samples, 0.03%)</title><rect x="98.5289%" y="629" width="0.0325%" height="15" fill="rgb(225,28,51)" fg:x="115130" fg:w="38"/><text x="98.7789%" y="639.50"></text></g><g><title>epoll_ctl (34 samples, 0.03%)</title><rect x="98.5323%" y="613" width="0.0291%" height="15" fill="rgb(215,33,16)" fg:x="115134" fg:w="34"/><text x="98.7823%" y="623.50"></text></g><g><title>polling::epoll::Poller::wait (366 samples, 0.31%)</title><rect x="98.2661%" y="661" width="0.3132%" height="15" fill="rgb(243,40,39)" fg:x="114823" fg:w="366"/><text x="98.5161%" y="671.50"></text></g><g><title>syscall (21 samples, 0.02%)</title><rect x="98.5614%" y="645" width="0.0180%" height="15" fill="rgb(225,11,42)" fg:x="115168" fg:w="21"/><text x="98.8114%" y="655.50"></text></g><g><title>async_io::reactor::ReactorLock::react (880 samples, 0.75%)</title><rect x="97.8331%" y="693" width="0.7531%" height="15" fill="rgb(241,220,38)" fg:x="114317" fg:w="880"/><text x="98.0831%" y="703.50"></text></g><g><title>polling::Poller::wait (448 samples, 0.38%)</title><rect x="98.2028%" y="677" width="0.3834%" height="15" fill="rgb(244,52,35)" fg:x="114749" fg:w="448"/><text x="98.4528%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (13 samples, 0.01%)</title><rect x="98.5965%" y="693" width="0.0111%" height="15" fill="rgb(246,42,46)" fg:x="115209" fg:w="13"/><text x="98.8465%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_store (13 samples, 0.01%)</title><rect x="98.5965%" y="677" width="0.0111%" height="15" fill="rgb(205,184,13)" fg:x="115209" fg:w="13"/><text x="98.8465%" y="687.50"></text></g><g><title>log::max_level (13 samples, 0.01%)</title><rect x="98.6076%" y="693" width="0.0111%" height="15" fill="rgb(209,48,36)" fg:x="115222" fg:w="13"/><text x="98.8576%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="98.6076%" y="677" width="0.0111%" height="15" fill="rgb(244,34,51)" fg:x="115222" fg:w="13"/><text x="98.8576%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="98.6076%" y="661" width="0.0111%" height="15" fill="rgb(221,107,33)" fg:x="115222" fg:w="13"/><text x="98.8576%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (27 samples, 0.02%)</title><rect x="98.6299%" y="661" width="0.0231%" height="15" fill="rgb(224,203,12)" fg:x="115248" fg:w="27"/><text x="98.8799%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="98.6299%" y="645" width="0.0231%" height="15" fill="rgb(230,215,18)" fg:x="115248" fg:w="27"/><text x="98.8799%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="98.6316%" y="629" width="0.0214%" height="15" fill="rgb(206,185,35)" fg:x="115250" fg:w="25"/><text x="98.8816%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (25 samples, 0.02%)</title><rect x="98.6316%" y="613" width="0.0214%" height="15" fill="rgb(228,140,34)" fg:x="115250" fg:w="25"/><text x="98.8816%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="98.6324%" y="597" width="0.0205%" height="15" fill="rgb(208,93,13)" fg:x="115251" fg:w="24"/><text x="98.8824%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="98.6324%" y="581" width="0.0205%" height="15" fill="rgb(221,193,39)" fg:x="115251" fg:w="24"/><text x="98.8824%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (77 samples, 0.07%)</title><rect x="98.6530%" y="661" width="0.0659%" height="15" fill="rgb(241,132,34)" fg:x="115275" fg:w="77"/><text x="98.9030%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (77 samples, 0.07%)</title><rect x="98.6530%" y="645" width="0.0659%" height="15" fill="rgb(221,141,10)" fg:x="115275" fg:w="77"/><text x="98.9030%" y="655.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (76 samples, 0.07%)</title><rect x="98.7317%" y="581" width="0.0650%" height="15" fill="rgb(226,90,31)" fg:x="115367" fg:w="76"/><text x="98.9817%" y="591.50"></text></g><g><title>std::sys::unix::futex::futex_wait (313 samples, 0.27%)</title><rect x="98.7249%" y="597" width="0.2679%" height="15" fill="rgb(243,75,5)" fg:x="115359" fg:w="313"/><text x="98.9749%" y="607.50"></text></g><g><title>syscall (223 samples, 0.19%)</title><rect x="98.8019%" y="581" width="0.1908%" height="15" fill="rgb(227,156,21)" fg:x="115449" fg:w="223"/><text x="99.0519%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (252 samples, 0.22%)</title><rect x="98.9927%" y="597" width="0.2157%" height="15" fill="rgb(250,195,8)" fg:x="115672" fg:w="252"/><text x="99.2427%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (252 samples, 0.22%)</title><rect x="98.9927%" y="581" width="0.2157%" height="15" fill="rgb(220,134,5)" fg:x="115672" fg:w="252"/><text x="99.2427%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (252 samples, 0.22%)</title><rect x="98.9927%" y="565" width="0.2157%" height="15" fill="rgb(246,106,34)" fg:x="115672" fg:w="252"/><text x="99.2427%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (595 samples, 0.51%)</title><rect x="98.7189%" y="661" width="0.5092%" height="15" fill="rgb(205,1,4)" fg:x="115352" fg:w="595"/><text x="98.9689%" y="671.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (592 samples, 0.51%)</title><rect x="98.7214%" y="645" width="0.5066%" height="15" fill="rgb(224,151,29)" fg:x="115355" fg:w="592"/><text x="98.9714%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (592 samples, 0.51%)</title><rect x="98.7214%" y="629" width="0.5066%" height="15" fill="rgb(251,196,0)" fg:x="115355" fg:w="592"/><text x="98.9714%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (592 samples, 0.51%)</title><rect x="98.7214%" y="613" width="0.5066%" height="15" fill="rgb(212,127,0)" fg:x="115355" fg:w="592"/><text x="98.9714%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (23 samples, 0.02%)</title><rect x="99.2084%" y="597" width="0.0197%" height="15" fill="rgb(236,71,53)" fg:x="115924" fg:w="23"/><text x="99.4584%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (23 samples, 0.02%)</title><rect x="99.2084%" y="581" width="0.0197%" height="15" fill="rgb(227,99,0)" fg:x="115924" fg:w="23"/><text x="99.4584%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="99.2084%" y="565" width="0.0197%" height="15" fill="rgb(239,89,21)" fg:x="115924" fg:w="23"/><text x="99.4584%" y="575.50"></text></g><g><title>parking::Parker::park (731 samples, 0.63%)</title><rect x="98.6187%" y="693" width="0.6256%" height="15" fill="rgb(243,122,19)" fg:x="115235" fg:w="731"/><text x="98.8687%" y="703.50"></text></g><g><title>parking::Inner::park (729 samples, 0.62%)</title><rect x="98.6204%" y="677" width="0.6239%" height="15" fill="rgb(229,192,45)" fg:x="115237" fg:w="729"/><text x="98.8704%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.02%)</title><rect x="99.2281%" y="661" width="0.0163%" height="15" fill="rgb(235,165,35)" fg:x="115947" fg:w="19"/><text x="99.4781%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.02%)</title><rect x="99.2289%" y="645" width="0.0154%" height="15" fill="rgb(253,202,0)" fg:x="115948" fg:w="18"/><text x="99.4789%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (18 samples, 0.02%)</title><rect x="99.2289%" y="629" width="0.0154%" height="15" fill="rgb(235,51,20)" fg:x="115948" fg:w="18"/><text x="99.4789%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (18 samples, 0.02%)</title><rect x="99.2289%" y="613" width="0.0154%" height="15" fill="rgb(218,95,46)" fg:x="115948" fg:w="18"/><text x="99.4789%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="99.2289%" y="597" width="0.0154%" height="15" fill="rgb(212,81,10)" fg:x="115948" fg:w="18"/><text x="99.4789%" y="607.50"></text></g><g><title>parking::Parker::park_timeout (218 samples, 0.19%)</title><rect x="99.2443%" y="693" width="0.1866%" height="15" fill="rgb(240,59,0)" fg:x="115966" fg:w="218"/><text x="99.4943%" y="703.50"></text></g><g><title>parking::Inner::park (182 samples, 0.16%)</title><rect x="99.2751%" y="677" width="0.1558%" height="15" fill="rgb(212,191,42)" fg:x="116002" fg:w="182"/><text x="99.5251%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (167 samples, 0.14%)</title><rect x="99.2880%" y="661" width="0.1429%" height="15" fill="rgb(233,140,3)" fg:x="116017" fg:w="167"/><text x="99.5380%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (167 samples, 0.14%)</title><rect x="99.2880%" y="645" width="0.1429%" height="15" fill="rgb(215,69,23)" fg:x="116017" fg:w="167"/><text x="99.5380%" y="655.50"></text></g><g><title>std::panic::catch_unwind (11,902 samples, 10.19%)</title><rect x="89.2691%" y="981" width="10.1858%" height="15" fill="rgb(240,202,20)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="991.50">std::panic::cat..</text></g><g><title>std::panicking::try (11,902 samples, 10.19%)</title><rect x="89.2691%" y="965" width="10.1858%" height="15" fill="rgb(209,146,50)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="975.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (11,902 samples, 10.19%)</title><rect x="89.2691%" y="949" width="10.1858%" height="15" fill="rgb(253,102,54)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="959.50">std::panicking:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,902 samples, 10.19%)</title><rect x="89.2691%" y="933" width="10.1858%" height="15" fill="rgb(250,173,47)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="943.50">&lt;core::panic::u..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (11,902 samples, 10.19%)</title><rect x="89.2691%" y="917" width="10.1858%" height="15" fill="rgb(232,142,7)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="927.50">std::thread::Bu..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11,902 samples, 10.19%)</title><rect x="89.2691%" y="901" width="10.1858%" height="15" fill="rgb(230,157,47)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="911.50">std::sys_common..</text></g><g><title>core::ops::function::FnOnce::call_once (11,902 samples, 10.19%)</title><rect x="89.2691%" y="885" width="10.1858%" height="15" fill="rgb(214,177,35)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="895.50">core::ops::func..</text></g><g><title>async_global_executor::threading::thread_main_loop (11,902 samples, 10.19%)</title><rect x="89.2691%" y="869" width="10.1858%" height="15" fill="rgb(234,119,46)" fg:x="104310" fg:w="11902"/><text x="89.5191%" y="879.50">async_global_ex..</text></g><g><title>std::panic::catch_unwind (11,899 samples, 10.18%)</title><rect x="89.2716%" y="853" width="10.1832%" height="15" fill="rgb(241,180,50)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="863.50">std::panic::cat..</text></g><g><title>std::panicking::try (11,899 samples, 10.18%)</title><rect x="89.2716%" y="837" width="10.1832%" height="15" fill="rgb(221,54,25)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="847.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (11,899 samples, 10.18%)</title><rect x="89.2716%" y="821" width="10.1832%" height="15" fill="rgb(209,157,44)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="831.50">std::panicking:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (11,899 samples, 10.18%)</title><rect x="89.2716%" y="805" width="10.1832%" height="15" fill="rgb(246,115,41)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="815.50">async_global_ex..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,899 samples, 10.18%)</title><rect x="89.2716%" y="789" width="10.1832%" height="15" fill="rgb(229,86,1)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="799.50">std::thread::lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,899 samples, 10.18%)</title><rect x="89.2716%" y="773" width="10.1832%" height="15" fill="rgb(240,108,53)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="783.50">std::thread::lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (11,899 samples, 10.18%)</title><rect x="89.2716%" y="757" width="10.1832%" height="15" fill="rgb(227,134,2)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="767.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on (11,899 samples, 10.18%)</title><rect x="89.2716%" y="741" width="10.1832%" height="15" fill="rgb(213,129,25)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="751.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (11,899 samples, 10.18%)</title><rect x="89.2716%" y="725" width="10.1832%" height="15" fill="rgb(226,35,21)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="735.50">async_global_ex..</text></g><g><title>async_io::driver::block_on (11,899 samples, 10.18%)</title><rect x="89.2716%" y="709" width="10.1832%" height="15" fill="rgb(208,129,26)" fg:x="104313" fg:w="11899"/><text x="89.5216%" y="719.50">async_io::drive..</text></g><g><title>std::time::Instant::now (23 samples, 0.02%)</title><rect x="99.4352%" y="693" width="0.0197%" height="15" fill="rgb(224,83,6)" fg:x="116189" fg:w="23"/><text x="99.6852%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (23 samples, 0.02%)</title><rect x="99.4352%" y="677" width="0.0197%" height="15" fill="rgb(227,52,39)" fg:x="116189" fg:w="23"/><text x="99.6852%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (23 samples, 0.02%)</title><rect x="99.4352%" y="661" width="0.0197%" height="15" fill="rgb(241,30,17)" fg:x="116189" fg:w="23"/><text x="99.6852%" y="671.50"></text></g><g><title>__clock_gettime (20 samples, 0.02%)</title><rect x="99.4377%" y="645" width="0.0171%" height="15" fill="rgb(246,186,42)" fg:x="116192" fg:w="20"/><text x="99.6877%" y="655.50"></text></g><g><title>__vdso_clock_gettime (17 samples, 0.01%)</title><rect x="99.4403%" y="629" width="0.0145%" height="15" fill="rgb(221,169,15)" fg:x="116195" fg:w="17"/><text x="99.6903%" y="639.50"></text></g><g><title>[[vdso]] (15 samples, 0.01%)</title><rect x="99.4420%" y="613" width="0.0128%" height="15" fill="rgb(235,108,21)" fg:x="116197" fg:w="15"/><text x="99.6920%" y="623.50"></text></g><g><title>clone (11,917 samples, 10.20%)</title><rect x="89.2648%" y="1093" width="10.1986%" height="15" fill="rgb(219,148,30)" fg:x="104305" fg:w="11917"/><text x="89.5148%" y="1103.50">clone</text></g><g><title>start_thread (11,913 samples, 10.20%)</title><rect x="89.2682%" y="1077" width="10.1952%" height="15" fill="rgb(220,109,5)" fg:x="104309" fg:w="11913"/><text x="89.5182%" y="1087.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (11,912 samples, 10.19%)</title><rect x="89.2691%" y="1061" width="10.1944%" height="15" fill="rgb(213,203,48)" fg:x="104310" fg:w="11912"/><text x="89.5191%" y="1071.50">std::sys::unix:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,912 samples, 10.19%)</title><rect x="89.2691%" y="1045" width="10.1944%" height="15" fill="rgb(244,71,33)" fg:x="104310" fg:w="11912"/><text x="89.5191%" y="1055.50">&lt;alloc::boxed::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,912 samples, 10.19%)</title><rect x="89.2691%" y="1029" width="10.1944%" height="15" fill="rgb(209,23,2)" fg:x="104310" fg:w="11912"/><text x="89.5191%" y="1039.50">&lt;alloc::boxed::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (11,912 samples, 10.19%)</title><rect x="89.2691%" y="1013" width="10.1944%" height="15" fill="rgb(219,97,7)" fg:x="104310" fg:w="11912"/><text x="89.5191%" y="1023.50">core::ops::func..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (11,912 samples, 10.19%)</title><rect x="89.2691%" y="997" width="10.1944%" height="15" fill="rgb(216,161,23)" fg:x="104310" fg:w="11912"/><text x="89.5191%" y="1007.50">std::thread::Bu..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (15 samples, 0.01%)</title><rect x="99.4968%" y="1093" width="0.0128%" height="15" fill="rgb(207,45,42)" fg:x="116261" fg:w="15"/><text x="99.7468%" y="1103.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="99.5165%" y="1093" width="0.0111%" height="15" fill="rgb(241,61,4)" fg:x="116284" fg:w="13"/><text x="99.7665%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (19 samples, 0.02%)</title><rect x="99.5293%" y="1093" width="0.0163%" height="15" fill="rgb(236,170,1)" fg:x="116299" fg:w="19"/><text x="99.7793%" y="1103.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="99.5456%" y="1093" width="0.0137%" height="15" fill="rgb(239,72,5)" fg:x="116318" fg:w="16"/><text x="99.7956%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (13 samples, 0.01%)</title><rect x="99.5644%" y="1093" width="0.0111%" height="15" fill="rgb(214,13,50)" fg:x="116340" fg:w="13"/><text x="99.8144%" y="1103.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (114 samples, 0.10%)</title><rect x="99.5764%" y="1093" width="0.0976%" height="15" fill="rgb(224,88,9)" fg:x="116354" fg:w="114"/><text x="99.8264%" y="1103.50"></text></g><g><title>async-std/runti (116,410 samples, 99.62%)</title><rect x="0.0531%" y="1109" width="99.6243%" height="15" fill="rgb(238,192,34)" fg:x="62" fg:w="116410"/><text x="0.3031%" y="1119.50">async-std/runti</text></g><g><title>blocking-2 (14 samples, 0.01%)</title><rect x="99.6859%" y="1109" width="0.0120%" height="15" fill="rgb(217,203,50)" fg:x="116482" fg:w="14"/><text x="99.9359%" y="1119.50"></text></g><g><title>clone (12 samples, 0.01%)</title><rect x="99.6876%" y="1093" width="0.0103%" height="15" fill="rgb(241,123,32)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="1103.50"></text></g><g><title>start_thread (12 samples, 0.01%)</title><rect x="99.6876%" y="1077" width="0.0103%" height="15" fill="rgb(248,151,39)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12 samples, 0.01%)</title><rect x="99.6876%" y="1061" width="0.0103%" height="15" fill="rgb(208,89,6)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.6876%" y="1045" width="0.0103%" height="15" fill="rgb(254,43,26)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.6876%" y="1029" width="0.0103%" height="15" fill="rgb(216,158,13)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12 samples, 0.01%)</title><rect x="99.6876%" y="1013" width="0.0103%" height="15" fill="rgb(212,47,37)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12 samples, 0.01%)</title><rect x="99.6876%" y="997" width="0.0103%" height="15" fill="rgb(254,16,10)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.01%)</title><rect x="99.6876%" y="981" width="0.0103%" height="15" fill="rgb(223,228,16)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="991.50"></text></g><g><title>std::panicking::try (12 samples, 0.01%)</title><rect x="99.6876%" y="965" width="0.0103%" height="15" fill="rgb(249,108,50)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="975.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.01%)</title><rect x="99.6876%" y="949" width="0.0103%" height="15" fill="rgb(208,220,5)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.6876%" y="933" width="0.0103%" height="15" fill="rgb(217,89,48)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12 samples, 0.01%)</title><rect x="99.6876%" y="917" width="0.0103%" height="15" fill="rgb(212,113,41)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 0.01%)</title><rect x="99.6876%" y="901" width="0.0103%" height="15" fill="rgb(231,127,5)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="911.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (12 samples, 0.01%)</title><rect x="99.6876%" y="885" width="0.0103%" height="15" fill="rgb(217,141,17)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="895.50"></text></g><g><title>blocking::Executor::main_loop (12 samples, 0.01%)</title><rect x="99.6876%" y="869" width="0.0103%" height="15" fill="rgb(245,125,54)" fg:x="116484" fg:w="12"/><text x="99.9376%" y="879.50"></text></g><g><title>blocking-3 (12 samples, 0.01%)</title><rect x="99.6979%" y="1109" width="0.0103%" height="15" fill="rgb(248,125,3)" fg:x="116496" fg:w="12"/><text x="99.9479%" y="1119.50"></text></g><g><title>[ld-2.31.so] (15 samples, 0.01%)</title><rect x="99.7124%" y="1093" width="0.0128%" height="15" fill="rgb(236,119,51)" fg:x="116513" fg:w="15"/><text x="99.9624%" y="1103.50"></text></g><g><title>pdk-noknownkey (241 samples, 0.21%)</title><rect x="99.7090%" y="1109" width="0.2062%" height="15" fill="rgb(239,99,8)" fg:x="116509" fg:w="241"/><text x="99.9590%" y="1119.50"></text></g><g><title>clone (217 samples, 0.19%)</title><rect x="99.7296%" y="1093" width="0.1857%" height="15" fill="rgb(224,228,4)" fg:x="116533" fg:w="217"/><text x="99.9796%" y="1103.50"></text></g><g><title>start_thread (15 samples, 0.01%)</title><rect x="99.9024%" y="1077" width="0.0128%" height="15" fill="rgb(220,131,45)" fg:x="116735" fg:w="15"/><text x="100.1524%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (70 samples, 0.06%)</title><rect x="99.9178%" y="773" width="0.0599%" height="15" fill="rgb(215,62,5)" fg:x="116753" fg:w="70"/><text x="100.1678%" y="783.50"></text></g><g><title>syscall (69 samples, 0.06%)</title><rect x="99.9187%" y="757" width="0.0591%" height="15" fill="rgb(253,12,24)" fg:x="116754" fg:w="69"/><text x="100.1687%" y="767.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.06%)</title><rect x="99.9178%" y="853" width="0.0625%" height="15" fill="rgb(248,120,50)" fg:x="116753" fg:w="73"/><text x="100.1678%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.06%)</title><rect x="99.9178%" y="837" width="0.0625%" height="15" fill="rgb(245,194,10)" fg:x="116753" fg:w="73"/><text x="100.1678%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (73 samples, 0.06%)</title><rect x="99.9178%" y="821" width="0.0625%" height="15" fill="rgb(241,149,38)" fg:x="116753" fg:w="73"/><text x="100.1678%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (73 samples, 0.06%)</title><rect x="99.9178%" y="805" width="0.0625%" height="15" fill="rgb(219,215,7)" fg:x="116753" fg:w="73"/><text x="100.1678%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (73 samples, 0.06%)</title><rect x="99.9178%" y="789" width="0.0625%" height="15" fill="rgb(208,120,31)" fg:x="116753" fg:w="73"/><text x="100.1678%" y="799.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (80 samples, 0.07%)</title><rect x="99.9178%" y="869" width="0.0685%" height="15" fill="rgb(244,30,8)" fg:x="116753" fg:w="80"/><text x="100.1678%" y="879.50"></text></g><g><title>std::panic::catch_unwind (81 samples, 0.07%)</title><rect x="99.9178%" y="981" width="0.0693%" height="15" fill="rgb(238,35,44)" fg:x="116753" fg:w="81"/><text x="100.1678%" y="991.50"></text></g><g><title>std::panicking::try (81 samples, 0.07%)</title><rect x="99.9178%" y="965" width="0.0693%" height="15" fill="rgb(243,218,37)" fg:x="116753" fg:w="81"/><text x="100.1678%" y="975.50"></text></g><g><title>std::panicking::try::do_call (81 samples, 0.07%)</title><rect x="99.9178%" y="949" width="0.0693%" height="15" fill="rgb(218,169,10)" fg:x="116753" fg:w="81"/><text x="100.1678%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (81 samples, 0.07%)</title><rect x="99.9178%" y="933" width="0.0693%" height="15" fill="rgb(221,144,10)" fg:x="116753" fg:w="81"/><text x="100.1678%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (81 samples, 0.07%)</title><rect x="99.9178%" y="917" width="0.0693%" height="15" fill="rgb(226,41,38)" fg:x="116753" fg:w="81"/><text x="100.1678%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (81 samples, 0.07%)</title><rect x="99.9178%" y="901" width="0.0693%" height="15" fill="rgb(228,3,1)" fg:x="116753" fg:w="81"/><text x="100.1678%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (81 samples, 0.07%)</title><rect x="99.9178%" y="885" width="0.0693%" height="15" fill="rgb(209,129,12)" fg:x="116753" fg:w="81"/><text x="100.1678%" y="895.50"></text></g><g><title>std::sys::unix::thread::guard::current (12 samples, 0.01%)</title><rect x="99.9872%" y="981" width="0.0103%" height="15" fill="rgb(213,136,33)" fg:x="116834" fg:w="12"/><text x="100.2372%" y="991.50"></text></g><g><title>all (116,849 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(209,181,29)" fg:x="0" fg:w="116849"/><text x="0.2500%" y="1135.50"></text></g><g><title>tokio-runtime-w (99 samples, 0.08%)</title><rect x="99.9153%" y="1109" width="0.0847%" height="15" fill="rgb(234,173,18)" fg:x="116750" fg:w="99"/><text x="100.1653%" y="1119.50"></text></g><g><title>clone (96 samples, 0.08%)</title><rect x="99.9178%" y="1093" width="0.0822%" height="15" fill="rgb(227,73,47)" fg:x="116753" fg:w="96"/><text x="100.1678%" y="1103.50"></text></g><g><title>start_thread (96 samples, 0.08%)</title><rect x="99.9178%" y="1077" width="0.0822%" height="15" fill="rgb(234,9,34)" fg:x="116753" fg:w="96"/><text x="100.1678%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (96 samples, 0.08%)</title><rect x="99.9178%" y="1061" width="0.0822%" height="15" fill="rgb(235,172,15)" fg:x="116753" fg:w="96"/><text x="100.1678%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (96 samples, 0.08%)</title><rect x="99.9178%" y="1045" width="0.0822%" height="15" fill="rgb(245,61,2)" fg:x="116753" fg:w="96"/><text x="100.1678%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (96 samples, 0.08%)</title><rect x="99.9178%" y="1029" width="0.0822%" height="15" fill="rgb(238,39,47)" fg:x="116753" fg:w="96"/><text x="100.1678%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (96 samples, 0.08%)</title><rect x="99.9178%" y="1013" width="0.0822%" height="15" fill="rgb(234,37,24)" fg:x="116753" fg:w="96"/><text x="100.1678%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (96 samples, 0.08%)</title><rect x="99.9178%" y="997" width="0.0822%" height="15" fill="rgb(248,223,24)" fg:x="116753" fg:w="96"/><text x="100.1678%" y="1007.50"></text></g></svg></svg>