<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="115293"><g><title>async-io (72 samples, 0.06%)</title><rect x="0.0017%" y="1077" width="0.0624%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="72"/><text x="0.2517%" y="1087.50"></text></g><g><title>clone (70 samples, 0.06%)</title><rect x="0.0035%" y="1061" width="0.0607%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="70"/><text x="0.2535%" y="1071.50"></text></g><g><title>start_thread (70 samples, 0.06%)</title><rect x="0.0035%" y="1045" width="0.0607%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="70"/><text x="0.2535%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (70 samples, 0.06%)</title><rect x="0.0035%" y="1029" width="0.0607%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="70"/><text x="0.2535%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (70 samples, 0.06%)</title><rect x="0.0035%" y="1013" width="0.0607%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="70"/><text x="0.2535%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (70 samples, 0.06%)</title><rect x="0.0035%" y="997" width="0.0607%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="70"/><text x="0.2535%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (70 samples, 0.06%)</title><rect x="0.0035%" y="981" width="0.0607%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="70"/><text x="0.2535%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (70 samples, 0.06%)</title><rect x="0.0035%" y="965" width="0.0607%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="70"/><text x="0.2535%" y="975.50"></text></g><g><title>std::panic::catch_unwind (70 samples, 0.06%)</title><rect x="0.0035%" y="949" width="0.0607%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="70"/><text x="0.2535%" y="959.50"></text></g><g><title>std::panicking::try (70 samples, 0.06%)</title><rect x="0.0035%" y="933" width="0.0607%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="70"/><text x="0.2535%" y="943.50"></text></g><g><title>std::panicking::try::do_call (70 samples, 0.06%)</title><rect x="0.0035%" y="917" width="0.0607%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="70"/><text x="0.2535%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70 samples, 0.06%)</title><rect x="0.0035%" y="901" width="0.0607%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="70"/><text x="0.2535%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (70 samples, 0.06%)</title><rect x="0.0035%" y="885" width="0.0607%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="70"/><text x="0.2535%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (70 samples, 0.06%)</title><rect x="0.0035%" y="869" width="0.0607%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="70"/><text x="0.2535%" y="879.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (70 samples, 0.06%)</title><rect x="0.0035%" y="853" width="0.0607%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="70"/><text x="0.2535%" y="863.50"></text></g><g><title>async_io::driver::main_loop (70 samples, 0.06%)</title><rect x="0.0035%" y="837" width="0.0607%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="70"/><text x="0.2535%" y="847.50"></text></g><g><title>parking::Parker::park_timeout (63 samples, 0.05%)</title><rect x="0.0095%" y="821" width="0.0546%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="63"/><text x="0.2595%" y="831.50"></text></g><g><title>parking::Inner::park (63 samples, 0.05%)</title><rect x="0.0095%" y="805" width="0.0546%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="63"/><text x="0.2595%" y="815.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (59 samples, 0.05%)</title><rect x="0.0130%" y="789" width="0.0512%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="59"/><text x="0.2630%" y="799.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (58 samples, 0.05%)</title><rect x="0.0139%" y="773" width="0.0503%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="58"/><text x="0.2639%" y="783.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (58 samples, 0.05%)</title><rect x="0.0139%" y="757" width="0.0503%" height="15" fill="rgb(249,33,26)" fg:x="16" fg:w="58"/><text x="0.2639%" y="767.50"></text></g><g><title>__pthread_cond_timedwait (58 samples, 0.05%)</title><rect x="0.0139%" y="741" width="0.0503%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="58"/><text x="0.2639%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.09%)</title><rect x="0.0833%" y="1061" width="0.0859%" height="15" fill="rgb(221,5,38)" fg:x="96" fg:w="99"/><text x="0.3333%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="0.1778%" y="1061" width="0.0104%" height="15" fill="rgb(247,18,42)" fg:x="205" fg:w="12"/><text x="0.4278%" y="1071.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (28 samples, 0.02%)</title><rect x="0.2090%" y="1045" width="0.0243%" height="15" fill="rgb(241,131,45)" fg:x="241" fg:w="28"/><text x="0.4590%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (17 samples, 0.01%)</title><rect x="0.2637%" y="1029" width="0.0147%" height="15" fill="rgb(249,31,29)" fg:x="304" fg:w="17"/><text x="0.5137%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (51 samples, 0.04%)</title><rect x="0.2498%" y="1045" width="0.0442%" height="15" fill="rgb(225,111,53)" fg:x="288" fg:w="51"/><text x="0.4998%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.02%)</title><rect x="0.2784%" y="1029" width="0.0156%" height="15" fill="rgb(238,160,17)" fg:x="321" fg:w="18"/><text x="0.5284%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 0.02%)</title><rect x="0.2784%" y="1013" width="0.0156%" height="15" fill="rgb(214,148,48)" fg:x="321" fg:w="18"/><text x="0.5284%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (18 samples, 0.02%)</title><rect x="0.2784%" y="997" width="0.0156%" height="15" fill="rgb(232,36,49)" fg:x="321" fg:w="18"/><text x="0.5284%" y="1007.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (133 samples, 0.12%)</title><rect x="0.2940%" y="1045" width="0.1154%" height="15" fill="rgb(209,103,24)" fg:x="339" fg:w="133"/><text x="0.5440%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (29 samples, 0.03%)</title><rect x="0.3842%" y="1029" width="0.0252%" height="15" fill="rgb(229,88,8)" fg:x="443" fg:w="29"/><text x="0.6342%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (29 samples, 0.03%)</title><rect x="0.3842%" y="1013" width="0.0252%" height="15" fill="rgb(213,181,19)" fg:x="443" fg:w="29"/><text x="0.6342%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (19 samples, 0.02%)</title><rect x="0.3929%" y="997" width="0.0165%" height="15" fill="rgb(254,191,54)" fg:x="453" fg:w="19"/><text x="0.6429%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="0.3929%" y="981" width="0.0165%" height="15" fill="rgb(241,83,37)" fg:x="453" fg:w="19"/><text x="0.6429%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="0.3929%" y="965" width="0.0165%" height="15" fill="rgb(233,36,39)" fg:x="453" fg:w="19"/><text x="0.6429%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.02%)</title><rect x="0.3929%" y="949" width="0.0165%" height="15" fill="rgb(226,3,54)" fg:x="453" fg:w="19"/><text x="0.6429%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="0.3929%" y="933" width="0.0165%" height="15" fill="rgb(245,192,40)" fg:x="453" fg:w="19"/><text x="0.6429%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="0.3929%" y="917" width="0.0165%" height="15" fill="rgb(238,167,29)" fg:x="453" fg:w="19"/><text x="0.6429%" y="927.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="0.3929%" y="901" width="0.0165%" height="15" fill="rgb(232,182,51)" fg:x="453" fg:w="19"/><text x="0.6429%" y="911.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="0.3929%" y="885" width="0.0165%" height="15" fill="rgb(231,60,39)" fg:x="453" fg:w="19"/><text x="0.6429%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="0.3929%" y="869" width="0.0165%" height="15" fill="rgb(208,69,12)" fg:x="453" fg:w="19"/><text x="0.6429%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (31 samples, 0.03%)</title><rect x="0.4094%" y="1045" width="0.0269%" height="15" fill="rgb(235,93,37)" fg:x="472" fg:w="31"/><text x="0.6594%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="0.4250%" y="1029" width="0.0113%" height="15" fill="rgb(213,116,39)" fg:x="490" fg:w="13"/><text x="0.6750%" y="1039.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="0.4424%" y="1045" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="510" fg:w="12"/><text x="0.6924%" y="1055.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="0.4424%" y="1029" width="0.0104%" height="15" fill="rgb(206,96,30)" fg:x="510" fg:w="12"/><text x="0.6924%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="0.4424%" y="1013" width="0.0104%" height="15" fill="rgb(218,138,4)" fg:x="510" fg:w="12"/><text x="0.6924%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.01%)</title><rect x="0.4424%" y="997" width="0.0104%" height="15" fill="rgb(250,191,14)" fg:x="510" fg:w="12"/><text x="0.6924%" y="1007.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.05%)</title><rect x="0.4606%" y="1045" width="0.0477%" height="15" fill="rgb(239,60,40)" fg:x="531" fg:w="55"/><text x="0.7106%" y="1055.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.08%)</title><rect x="0.5083%" y="1045" width="0.0815%" height="15" fill="rgb(206,27,48)" fg:x="586" fg:w="94"/><text x="0.7583%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="0.5777%" y="1029" width="0.0121%" height="15" fill="rgb(225,35,8)" fg:x="666" fg:w="14"/><text x="0.8277%" y="1039.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.5777%" y="1013" width="0.0121%" height="15" fill="rgb(250,213,24)" fg:x="666" fg:w="14"/><text x="0.8277%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="0.5777%" y="997" width="0.0121%" height="15" fill="rgb(247,123,22)" fg:x="666" fg:w="14"/><text x="0.8277%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.5777%" y="981" width="0.0121%" height="15" fill="rgb(231,138,38)" fg:x="666" fg:w="14"/><text x="0.8277%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="0.5777%" y="965" width="0.0121%" height="15" fill="rgb(231,145,46)" fg:x="666" fg:w="14"/><text x="0.8277%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="0.5777%" y="949" width="0.0121%" height="15" fill="rgb(251,118,11)" fg:x="666" fg:w="14"/><text x="0.8277%" y="959.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="0.5777%" y="933" width="0.0121%" height="15" fill="rgb(217,147,25)" fg:x="666" fg:w="14"/><text x="0.8277%" y="943.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="0.5777%" y="917" width="0.0121%" height="15" fill="rgb(247,81,37)" fg:x="666" fg:w="14"/><text x="0.8277%" y="927.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (12 samples, 0.01%)</title><rect x="0.6496%" y="1029" width="0.0104%" height="15" fill="rgb(209,12,38)" fg:x="749" fg:w="12"/><text x="0.8996%" y="1039.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (84 samples, 0.07%)</title><rect x="0.5898%" y="1045" width="0.0729%" height="15" fill="rgb(227,1,9)" fg:x="680" fg:w="84"/><text x="0.8398%" y="1055.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (92 samples, 0.08%)</title><rect x="0.6627%" y="1045" width="0.0798%" height="15" fill="rgb(248,47,43)" fg:x="764" fg:w="92"/><text x="0.9127%" y="1055.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (12 samples, 0.01%)</title><rect x="0.7477%" y="1029" width="0.0104%" height="15" fill="rgb(221,10,30)" fg:x="862" fg:w="12"/><text x="0.9977%" y="1039.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="0.7425%" y="1045" width="0.0191%" height="15" fill="rgb(210,229,1)" fg:x="856" fg:w="22"/><text x="0.9925%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="0.9341%" y="1013" width="0.0121%" height="15" fill="rgb(222,148,37)" fg:x="1077" fg:w="14"/><text x="1.1841%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="0.9341%" y="997" width="0.0121%" height="15" fill="rgb(234,67,33)" fg:x="1077" fg:w="14"/><text x="1.1841%" y="1007.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (37 samples, 0.03%)</title><rect x="0.9194%" y="1029" width="0.0321%" height="15" fill="rgb(247,98,35)" fg:x="1060" fg:w="37"/><text x="1.1694%" y="1039.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="0.9515%" y="1013" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="1097" fg:w="13"/><text x="1.2015%" y="1023.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (19 samples, 0.02%)</title><rect x="0.9515%" y="1029" width="0.0165%" height="15" fill="rgb(213,79,30)" fg:x="1097" fg:w="19"/><text x="1.2015%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (35 samples, 0.03%)</title><rect x="0.9723%" y="997" width="0.0304%" height="15" fill="rgb(246,177,23)" fg:x="1121" fg:w="35"/><text x="1.2223%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (35 samples, 0.03%)</title><rect x="0.9723%" y="981" width="0.0304%" height="15" fill="rgb(230,62,27)" fg:x="1121" fg:w="35"/><text x="1.2223%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (35 samples, 0.03%)</title><rect x="0.9723%" y="965" width="0.0304%" height="15" fill="rgb(216,154,8)" fg:x="1121" fg:w="35"/><text x="1.2223%" y="975.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (44 samples, 0.04%)</title><rect x="0.9723%" y="1029" width="0.0382%" height="15" fill="rgb(244,35,45)" fg:x="1121" fg:w="44"/><text x="1.2223%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (44 samples, 0.04%)</title><rect x="0.9723%" y="1013" width="0.0382%" height="15" fill="rgb(251,115,12)" fg:x="1121" fg:w="44"/><text x="1.2223%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (24 samples, 0.02%)</title><rect x="1.0105%" y="1029" width="0.0208%" height="15" fill="rgb(240,54,50)" fg:x="1165" fg:w="24"/><text x="1.2605%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (24 samples, 0.02%)</title><rect x="1.0313%" y="1029" width="0.0208%" height="15" fill="rgb(233,84,52)" fg:x="1189" fg:w="24"/><text x="1.2813%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (377 samples, 0.33%)</title><rect x="0.7615%" y="1045" width="0.3270%" height="15" fill="rgb(207,117,47)" fg:x="878" fg:w="377"/><text x="1.0115%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (26 samples, 0.02%)</title><rect x="1.0660%" y="1029" width="0.0226%" height="15" fill="rgb(249,43,39)" fg:x="1229" fg:w="26"/><text x="1.3160%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (20 samples, 0.02%)</title><rect x="1.1267%" y="1029" width="0.0173%" height="15" fill="rgb(209,38,44)" fg:x="1299" fg:w="20"/><text x="1.3767%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (20 samples, 0.02%)</title><rect x="1.1267%" y="1013" width="0.0173%" height="15" fill="rgb(236,212,23)" fg:x="1299" fg:w="20"/><text x="1.3767%" y="1023.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="1.1267%" y="997" width="0.0173%" height="15" fill="rgb(242,79,21)" fg:x="1299" fg:w="20"/><text x="1.3767%" y="1007.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="1.1267%" y="981" width="0.0173%" height="15" fill="rgb(211,96,35)" fg:x="1299" fg:w="20"/><text x="1.3767%" y="991.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.02%)</title><rect x="1.1267%" y="965" width="0.0173%" height="15" fill="rgb(253,215,40)" fg:x="1299" fg:w="20"/><text x="1.3767%" y="975.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="1.0885%" y="1045" width="0.0616%" height="15" fill="rgb(211,81,21)" fg:x="1255" fg:w="71"/><text x="1.3385%" y="1055.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="1.1579%" y="1045" width="0.0173%" height="15" fill="rgb(208,190,38)" fg:x="1335" fg:w="20"/><text x="1.4079%" y="1055.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.1753%" y="1045" width="0.0121%" height="15" fill="rgb(235,213,38)" fg:x="1355" fg:w="14"/><text x="1.4253%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (39 samples, 0.03%)</title><rect x="1.1874%" y="1045" width="0.0338%" height="15" fill="rgb(237,122,38)" fg:x="1369" fg:w="39"/><text x="1.4374%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (69 samples, 0.06%)</title><rect x="1.2212%" y="1045" width="0.0598%" height="15" fill="rgb(244,218,35)" fg:x="1408" fg:w="69"/><text x="1.4712%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (14 samples, 0.01%)</title><rect x="1.2941%" y="1045" width="0.0121%" height="15" fill="rgb(240,68,47)" fg:x="1492" fg:w="14"/><text x="1.5441%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (14 samples, 0.01%)</title><rect x="1.3062%" y="1045" width="0.0121%" height="15" fill="rgb(210,16,53)" fg:x="1506" fg:w="14"/><text x="1.5562%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (57 samples, 0.05%)</title><rect x="1.3201%" y="1045" width="0.0494%" height="15" fill="rgb(235,124,12)" fg:x="1522" fg:w="57"/><text x="1.5701%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="1.3505%" y="1029" width="0.0191%" height="15" fill="rgb(224,169,11)" fg:x="1557" fg:w="22"/><text x="1.6005%" y="1039.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 0.02%)</title><rect x="1.3531%" y="1013" width="0.0165%" height="15" fill="rgb(250,166,2)" fg:x="1560" fg:w="19"/><text x="1.6031%" y="1023.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (14 samples, 0.01%)</title><rect x="1.3696%" y="1045" width="0.0121%" height="15" fill="rgb(242,216,29)" fg:x="1579" fg:w="14"/><text x="1.6196%" y="1055.50"></text></g><g><title>value_trait::Builder::object (14 samples, 0.01%)</title><rect x="1.3696%" y="1029" width="0.0121%" height="15" fill="rgb(230,116,27)" fg:x="1579" fg:w="14"/><text x="1.6196%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (14 samples, 0.01%)</title><rect x="1.3696%" y="1013" width="0.0121%" height="15" fill="rgb(228,99,48)" fg:x="1579" fg:w="14"/><text x="1.6196%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (14 samples, 0.01%)</title><rect x="1.3696%" y="997" width="0.0121%" height="15" fill="rgb(253,11,6)" fg:x="1579" fg:w="14"/><text x="1.6196%" y="1007.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="1.3817%" y="1045" width="0.0121%" height="15" fill="rgb(247,143,39)" fg:x="1593" fg:w="14"/><text x="1.6317%" y="1055.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.07%)</title><rect x="1.3999%" y="1045" width="0.0729%" height="15" fill="rgb(236,97,10)" fg:x="1614" fg:w="84"/><text x="1.6499%" y="1055.50"></text></g><g><title>[tremor-pdk-halfbrown] (50 samples, 0.04%)</title><rect x="1.4728%" y="1045" width="0.0434%" height="15" fill="rgb(233,208,19)" fg:x="1698" fg:w="50"/><text x="1.7228%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (50 samples, 0.04%)</title><rect x="1.4728%" y="1029" width="0.0434%" height="15" fill="rgb(216,164,2)" fg:x="1698" fg:w="50"/><text x="1.7228%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (50 samples, 0.04%)</title><rect x="1.4728%" y="1013" width="0.0434%" height="15" fill="rgb(220,129,5)" fg:x="1698" fg:w="50"/><text x="1.7228%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (50 samples, 0.04%)</title><rect x="1.4728%" y="997" width="0.0434%" height="15" fill="rgb(242,17,10)" fg:x="1698" fg:w="50"/><text x="1.7228%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (50 samples, 0.04%)</title><rect x="1.4728%" y="981" width="0.0434%" height="15" fill="rgb(242,107,0)" fg:x="1698" fg:w="50"/><text x="1.7228%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="1.4762%" y="965" width="0.0399%" height="15" fill="rgb(251,28,31)" fg:x="1702" fg:w="46"/><text x="1.7262%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (46 samples, 0.04%)</title><rect x="1.4762%" y="949" width="0.0399%" height="15" fill="rgb(233,223,10)" fg:x="1702" fg:w="46"/><text x="1.7262%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="1.4762%" y="933" width="0.0399%" height="15" fill="rgb(215,21,27)" fg:x="1702" fg:w="46"/><text x="1.7262%" y="943.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (46 samples, 0.04%)</title><rect x="1.4762%" y="917" width="0.0399%" height="15" fill="rgb(232,23,21)" fg:x="1702" fg:w="46"/><text x="1.7262%" y="927.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (46 samples, 0.04%)</title><rect x="1.4762%" y="901" width="0.0399%" height="15" fill="rgb(244,5,23)" fg:x="1702" fg:w="46"/><text x="1.7262%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (46 samples, 0.04%)</title><rect x="1.4762%" y="885" width="0.0399%" height="15" fill="rgb(226,81,46)" fg:x="1702" fg:w="46"/><text x="1.7262%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (26 samples, 0.02%)</title><rect x="1.5161%" y="1045" width="0.0226%" height="15" fill="rgb(247,70,30)" fg:x="1748" fg:w="26"/><text x="1.7661%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (24 samples, 0.02%)</title><rect x="1.5448%" y="1045" width="0.0208%" height="15" fill="rgb(212,68,19)" fg:x="1781" fg:w="24"/><text x="1.7948%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_unlock (12 samples, 0.01%)</title><rect x="1.5656%" y="1045" width="0.0104%" height="15" fill="rgb(240,187,13)" fg:x="1805" fg:w="12"/><text x="1.8156%" y="1055.50"></text></g><g><title>__clock_gettime (17 samples, 0.01%)</title><rect x="1.5760%" y="1045" width="0.0147%" height="15" fill="rgb(223,113,26)" fg:x="1817" fg:w="17"/><text x="1.8260%" y="1055.50"></text></g><g><title>__pthread_cond_wait (26 samples, 0.02%)</title><rect x="1.6011%" y="1045" width="0.0226%" height="15" fill="rgb(206,192,2)" fg:x="1846" fg:w="26"/><text x="1.8511%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (35 samples, 0.03%)</title><rect x="1.6272%" y="1045" width="0.0304%" height="15" fill="rgb(241,108,4)" fg:x="1876" fg:w="35"/><text x="1.8772%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (23 samples, 0.02%)</title><rect x="1.6376%" y="1029" width="0.0199%" height="15" fill="rgb(247,173,49)" fg:x="1888" fg:w="23"/><text x="1.8876%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="1.6376%" y="1013" width="0.0199%" height="15" fill="rgb(224,114,35)" fg:x="1888" fg:w="23"/><text x="1.8876%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="1.6376%" y="997" width="0.0199%" height="15" fill="rgb(245,159,27)" fg:x="1888" fg:w="23"/><text x="1.8876%" y="1007.50"></text></g><g><title>abi_stable::erased_types::iterator::next (82 samples, 0.07%)</title><rect x="1.6575%" y="1045" width="0.0711%" height="15" fill="rgb(245,172,44)" fg:x="1911" fg:w="82"/><text x="1.9075%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (42 samples, 0.04%)</title><rect x="1.8110%" y="1029" width="0.0364%" height="15" fill="rgb(236,23,11)" fg:x="2088" fg:w="42"/><text x="2.0610%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (42 samples, 0.04%)</title><rect x="1.8110%" y="1013" width="0.0364%" height="15" fill="rgb(205,117,38)" fg:x="2088" fg:w="42"/><text x="2.0610%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.04%)</title><rect x="1.8110%" y="997" width="0.0364%" height="15" fill="rgb(237,72,25)" fg:x="2088" fg:w="42"/><text x="2.0610%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.04%)</title><rect x="1.8110%" y="981" width="0.0364%" height="15" fill="rgb(244,70,9)" fg:x="2088" fg:w="42"/><text x="2.0610%" y="991.50"></text></g><g><title>__rg_dealloc (42 samples, 0.04%)</title><rect x="1.8110%" y="965" width="0.0364%" height="15" fill="rgb(217,125,39)" fg:x="2088" fg:w="42"/><text x="2.0610%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (42 samples, 0.04%)</title><rect x="1.8110%" y="949" width="0.0364%" height="15" fill="rgb(235,36,10)" fg:x="2088" fg:w="42"/><text x="2.0610%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (139 samples, 0.12%)</title><rect x="1.7356%" y="1045" width="0.1206%" height="15" fill="rgb(251,123,47)" fg:x="2001" fg:w="139"/><text x="1.9856%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (44 samples, 0.04%)</title><rect x="1.8561%" y="1045" width="0.0382%" height="15" fill="rgb(221,13,13)" fg:x="2140" fg:w="44"/><text x="2.1061%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (18 samples, 0.02%)</title><rect x="1.8943%" y="1045" width="0.0156%" height="15" fill="rgb(238,131,9)" fg:x="2184" fg:w="18"/><text x="2.1443%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (26 samples, 0.02%)</title><rect x="1.9160%" y="1045" width="0.0226%" height="15" fill="rgb(211,50,8)" fg:x="2209" fg:w="26"/><text x="2.1660%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (26 samples, 0.02%)</title><rect x="1.9385%" y="1045" width="0.0226%" height="15" fill="rgb(245,182,24)" fg:x="2235" fg:w="26"/><text x="2.1885%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (18 samples, 0.02%)</title><rect x="1.9455%" y="1029" width="0.0156%" height="15" fill="rgb(242,14,37)" fg:x="2243" fg:w="18"/><text x="2.1955%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (91 samples, 0.08%)</title><rect x="1.9611%" y="1045" width="0.0789%" height="15" fill="rgb(246,228,12)" fg:x="2261" fg:w="91"/><text x="2.2111%" y="1055.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (96 samples, 0.08%)</title><rect x="2.0539%" y="981" width="0.0833%" height="15" fill="rgb(213,55,15)" fg:x="2368" fg:w="96"/><text x="2.3039%" y="991.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (124 samples, 0.11%)</title><rect x="2.0400%" y="1045" width="0.1076%" height="15" fill="rgb(209,9,3)" fg:x="2352" fg:w="124"/><text x="2.2900%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (108 samples, 0.09%)</title><rect x="2.0539%" y="1029" width="0.0937%" height="15" fill="rgb(230,59,30)" fg:x="2368" fg:w="108"/><text x="2.3039%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (108 samples, 0.09%)</title><rect x="2.0539%" y="1013" width="0.0937%" height="15" fill="rgb(209,121,21)" fg:x="2368" fg:w="108"/><text x="2.3039%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (108 samples, 0.09%)</title><rect x="2.0539%" y="997" width="0.0937%" height="15" fill="rgb(220,109,13)" fg:x="2368" fg:w="108"/><text x="2.3039%" y="1007.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (12 samples, 0.01%)</title><rect x="2.1372%" y="981" width="0.0104%" height="15" fill="rgb(232,18,1)" fg:x="2464" fg:w="12"/><text x="2.3872%" y="991.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (18 samples, 0.02%)</title><rect x="2.1476%" y="1045" width="0.0156%" height="15" fill="rgb(215,41,42)" fg:x="2476" fg:w="18"/><text x="2.3976%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (16 samples, 0.01%)</title><rect x="2.1493%" y="1029" width="0.0139%" height="15" fill="rgb(224,123,36)" fg:x="2478" fg:w="16"/><text x="2.3993%" y="1039.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="2.1493%" y="1013" width="0.0139%" height="15" fill="rgb(240,125,3)" fg:x="2478" fg:w="16"/><text x="2.3993%" y="1023.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (16 samples, 0.01%)</title><rect x="2.1493%" y="997" width="0.0139%" height="15" fill="rgb(205,98,50)" fg:x="2478" fg:w="16"/><text x="2.3993%" y="1007.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="2.1493%" y="981" width="0.0139%" height="15" fill="rgb(205,185,37)" fg:x="2478" fg:w="16"/><text x="2.3993%" y="991.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (16 samples, 0.01%)</title><rect x="2.1493%" y="965" width="0.0139%" height="15" fill="rgb(238,207,15)" fg:x="2478" fg:w="16"/><text x="2.3993%" y="975.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (16 samples, 0.01%)</title><rect x="2.1493%" y="949" width="0.0139%" height="15" fill="rgb(213,199,42)" fg:x="2478" fg:w="16"/><text x="2.3993%" y="959.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (38 samples, 0.03%)</title><rect x="2.1632%" y="1045" width="0.0330%" height="15" fill="rgb(235,201,11)" fg:x="2494" fg:w="38"/><text x="2.4132%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (70 samples, 0.06%)</title><rect x="2.1961%" y="1045" width="0.0607%" height="15" fill="rgb(207,46,11)" fg:x="2532" fg:w="70"/><text x="2.4461%" y="1055.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (37 samples, 0.03%)</title><rect x="2.2248%" y="1029" width="0.0321%" height="15" fill="rgb(241,35,35)" fg:x="2565" fg:w="37"/><text x="2.4748%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (37 samples, 0.03%)</title><rect x="2.2248%" y="1013" width="0.0321%" height="15" fill="rgb(243,32,47)" fg:x="2565" fg:w="37"/><text x="2.4748%" y="1023.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (37 samples, 0.03%)</title><rect x="2.2248%" y="997" width="0.0321%" height="15" fill="rgb(247,202,23)" fg:x="2565" fg:w="37"/><text x="2.4748%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (37 samples, 0.03%)</title><rect x="2.2248%" y="981" width="0.0321%" height="15" fill="rgb(219,102,11)" fg:x="2565" fg:w="37"/><text x="2.4748%" y="991.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (34 samples, 0.03%)</title><rect x="2.2274%" y="965" width="0.0295%" height="15" fill="rgb(243,110,44)" fg:x="2568" fg:w="34"/><text x="2.4774%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="2.2577%" y="1045" width="0.0130%" height="15" fill="rgb(222,74,54)" fg:x="2603" fg:w="15"/><text x="2.5077%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.05%)</title><rect x="2.3020%" y="981" width="0.0494%" height="15" fill="rgb(216,99,12)" fg:x="2654" fg:w="57"/><text x="2.5520%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (57 samples, 0.05%)</title><rect x="2.3020%" y="965" width="0.0494%" height="15" fill="rgb(226,22,26)" fg:x="2654" fg:w="57"/><text x="2.5520%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="2.3020%" y="949" width="0.0494%" height="15" fill="rgb(217,163,10)" fg:x="2654" fg:w="57"/><text x="2.5520%" y="959.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (57 samples, 0.05%)</title><rect x="2.3020%" y="933" width="0.0494%" height="15" fill="rgb(213,25,53)" fg:x="2654" fg:w="57"/><text x="2.5520%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (60 samples, 0.05%)</title><rect x="2.3020%" y="997" width="0.0520%" height="15" fill="rgb(252,105,26)" fg:x="2654" fg:w="60"/><text x="2.5520%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="2.3540%" y="981" width="0.0234%" height="15" fill="rgb(220,39,43)" fg:x="2714" fg:w="27"/><text x="2.6040%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (27 samples, 0.02%)</title><rect x="2.3540%" y="965" width="0.0234%" height="15" fill="rgb(229,68,48)" fg:x="2714" fg:w="27"/><text x="2.6040%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (27 samples, 0.02%)</title><rect x="2.3540%" y="949" width="0.0234%" height="15" fill="rgb(252,8,32)" fg:x="2714" fg:w="27"/><text x="2.6040%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (27 samples, 0.02%)</title><rect x="2.3540%" y="933" width="0.0234%" height="15" fill="rgb(223,20,43)" fg:x="2714" fg:w="27"/><text x="2.6040%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="2.3540%" y="917" width="0.0234%" height="15" fill="rgb(229,81,49)" fg:x="2714" fg:w="27"/><text x="2.6040%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (35 samples, 0.03%)</title><rect x="2.3540%" y="997" width="0.0304%" height="15" fill="rgb(236,28,36)" fg:x="2714" fg:w="35"/><text x="2.6040%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (132 samples, 0.11%)</title><rect x="2.2707%" y="1045" width="0.1145%" height="15" fill="rgb(249,185,26)" fg:x="2618" fg:w="132"/><text x="2.5207%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (96 samples, 0.08%)</title><rect x="2.3020%" y="1029" width="0.0833%" height="15" fill="rgb(249,174,33)" fg:x="2654" fg:w="96"/><text x="2.5520%" y="1039.50"></text></g><g><title>core::mem::drop (96 samples, 0.08%)</title><rect x="2.3020%" y="1013" width="0.0833%" height="15" fill="rgb(233,201,37)" fg:x="2654" fg:w="96"/><text x="2.5520%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14 samples, 0.01%)</title><rect x="2.3913%" y="1045" width="0.0121%" height="15" fill="rgb(221,78,26)" fg:x="2757" fg:w="14"/><text x="2.6413%" y="1055.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (12 samples, 0.01%)</title><rect x="2.4034%" y="1045" width="0.0104%" height="15" fill="rgb(250,127,30)" fg:x="2771" fg:w="12"/><text x="2.6534%" y="1055.50"></text></g><g><title>async_executor::State::notify (16 samples, 0.01%)</title><rect x="2.4147%" y="1045" width="0.0139%" height="15" fill="rgb(230,49,44)" fg:x="2784" fg:w="16"/><text x="2.6647%" y="1055.50"></text></g><g><title>async_executor::Ticker::sleep (35 samples, 0.03%)</title><rect x="2.4286%" y="1045" width="0.0304%" height="15" fill="rgb(229,67,23)" fg:x="2800" fg:w="35"/><text x="2.6786%" y="1055.50"></text></g><g><title>async_executor::Ticker::wake (13 samples, 0.01%)</title><rect x="2.4590%" y="1045" width="0.0113%" height="15" fill="rgb(249,83,47)" fg:x="2835" fg:w="13"/><text x="2.7090%" y="1055.50"></text></g><g><title>async_executor::steal (228 samples, 0.20%)</title><rect x="2.4702%" y="1045" width="0.1978%" height="15" fill="rgb(215,43,3)" fg:x="2848" fg:w="228"/><text x="2.7202%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (262 samples, 0.23%)</title><rect x="2.7131%" y="1045" width="0.2272%" height="15" fill="rgb(238,154,13)" fg:x="3128" fg:w="262"/><text x="2.9631%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (21 samples, 0.02%)</title><rect x="2.9403%" y="1045" width="0.0182%" height="15" fill="rgb(219,56,2)" fg:x="3390" fg:w="21"/><text x="3.1903%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (36 samples, 0.03%)</title><rect x="2.9585%" y="1045" width="0.0312%" height="15" fill="rgb(233,0,4)" fg:x="3411" fg:w="36"/><text x="3.2085%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.02%)</title><rect x="2.9967%" y="1045" width="0.0191%" height="15" fill="rgb(235,30,7)" fg:x="3455" fg:w="22"/><text x="3.2467%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (73 samples, 0.06%)</title><rect x="3.0158%" y="1045" width="0.0633%" height="15" fill="rgb(250,79,13)" fg:x="3477" fg:w="73"/><text x="3.2658%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="3.0843%" y="1045" width="0.0104%" height="15" fill="rgb(211,146,34)" fg:x="3556" fg:w="12"/><text x="3.3343%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="3.0956%" y="1045" width="0.0130%" height="15" fill="rgb(228,22,38)" fg:x="3569" fg:w="15"/><text x="3.3456%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (26 samples, 0.02%)</title><rect x="3.1181%" y="1045" width="0.0226%" height="15" fill="rgb(235,168,5)" fg:x="3595" fg:w="26"/><text x="3.3681%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (19 samples, 0.02%)</title><rect x="3.1242%" y="1029" width="0.0165%" height="15" fill="rgb(221,155,16)" fg:x="3602" fg:w="19"/><text x="3.3742%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="3.1407%" y="1045" width="0.0130%" height="15" fill="rgb(215,215,53)" fg:x="3621" fg:w="15"/><text x="3.3907%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (18 samples, 0.02%)</title><rect x="3.1676%" y="997" width="0.0156%" height="15" fill="rgb(223,4,10)" fg:x="3652" fg:w="18"/><text x="3.4176%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (18 samples, 0.02%)</title><rect x="3.1676%" y="981" width="0.0156%" height="15" fill="rgb(234,103,6)" fg:x="3652" fg:w="18"/><text x="3.4176%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.02%)</title><rect x="3.1676%" y="965" width="0.0156%" height="15" fill="rgb(227,97,0)" fg:x="3652" fg:w="18"/><text x="3.4176%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (36 samples, 0.03%)</title><rect x="3.1676%" y="1029" width="0.0312%" height="15" fill="rgb(234,150,53)" fg:x="3652" fg:w="36"/><text x="3.4176%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (36 samples, 0.03%)</title><rect x="3.1676%" y="1013" width="0.0312%" height="15" fill="rgb(228,201,54)" fg:x="3652" fg:w="36"/><text x="3.4176%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (18 samples, 0.02%)</title><rect x="3.1832%" y="997" width="0.0156%" height="15" fill="rgb(222,22,37)" fg:x="3670" fg:w="18"/><text x="3.4332%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.02%)</title><rect x="3.1832%" y="981" width="0.0156%" height="15" fill="rgb(237,53,32)" fg:x="3670" fg:w="18"/><text x="3.4332%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (57 samples, 0.05%)</title><rect x="3.1615%" y="1045" width="0.0494%" height="15" fill="rgb(233,25,53)" fg:x="3645" fg:w="57"/><text x="3.4115%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (18 samples, 0.02%)</title><rect x="3.2109%" y="1045" width="0.0156%" height="15" fill="rgb(210,40,34)" fg:x="3702" fg:w="18"/><text x="3.4609%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (13 samples, 0.01%)</title><rect x="3.2153%" y="1029" width="0.0113%" height="15" fill="rgb(241,220,44)" fg:x="3707" fg:w="13"/><text x="3.4653%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="3.2153%" y="1013" width="0.0113%" height="15" fill="rgb(235,28,35)" fg:x="3707" fg:w="13"/><text x="3.4653%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="3.2153%" y="997" width="0.0113%" height="15" fill="rgb(210,56,17)" fg:x="3707" fg:w="13"/><text x="3.4653%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="3.2153%" y="981" width="0.0113%" height="15" fill="rgb(224,130,29)" fg:x="3707" fg:w="13"/><text x="3.4653%" y="991.50"></text></g><g><title>event_listener::Event::listen (16 samples, 0.01%)</title><rect x="3.2266%" y="1045" width="0.0139%" height="15" fill="rgb(235,212,8)" fg:x="3720" fg:w="16"/><text x="3.4766%" y="1055.50"></text></g><g><title>event_listener::Event::notify (58 samples, 0.05%)</title><rect x="3.2404%" y="1045" width="0.0503%" height="15" fill="rgb(223,33,50)" fg:x="3736" fg:w="58"/><text x="3.4904%" y="1055.50"></text></g><g><title>event_listener::full_fence (28 samples, 0.02%)</title><rect x="3.2665%" y="1029" width="0.0243%" height="15" fill="rgb(219,149,13)" fg:x="3766" fg:w="28"/><text x="3.5165%" y="1039.50"></text></g><g><title>event_listener::List::notify (12 samples, 0.01%)</title><rect x="3.2907%" y="1045" width="0.0104%" height="15" fill="rgb(250,156,29)" fg:x="3794" fg:w="12"/><text x="3.5407%" y="1055.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (34 samples, 0.03%)</title><rect x="3.3116%" y="1045" width="0.0295%" height="15" fill="rgb(216,193,19)" fg:x="3818" fg:w="34"/><text x="3.5616%" y="1055.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (16 samples, 0.01%)</title><rect x="3.3411%" y="1045" width="0.0139%" height="15" fill="rgb(216,135,14)" fg:x="3852" fg:w="16"/><text x="3.5911%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (226 samples, 0.20%)</title><rect x="3.3636%" y="1045" width="0.1960%" height="15" fill="rgb(241,47,5)" fg:x="3878" fg:w="226"/><text x="3.6136%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (75 samples, 0.07%)</title><rect x="3.5596%" y="1045" width="0.0651%" height="15" fill="rgb(233,42,35)" fg:x="4104" fg:w="75"/><text x="3.8096%" y="1055.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (37 samples, 0.03%)</title><rect x="3.6403%" y="1045" width="0.0321%" height="15" fill="rgb(231,13,6)" fg:x="4197" fg:w="37"/><text x="3.8903%" y="1055.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (29 samples, 0.03%)</title><rect x="3.6472%" y="1029" width="0.0252%" height="15" fill="rgb(207,181,40)" fg:x="4205" fg:w="29"/><text x="3.8972%" y="1039.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.05%)</title><rect x="3.6724%" y="1045" width="0.0460%" height="15" fill="rgb(254,173,49)" fg:x="4234" fg:w="53"/><text x="3.9224%" y="1055.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="3.7184%" y="1045" width="0.0104%" height="15" fill="rgb(221,1,38)" fg:x="4287" fg:w="12"/><text x="3.9684%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="3.7305%" y="1045" width="0.0139%" height="15" fill="rgb(206,124,46)" fg:x="4301" fg:w="16"/><text x="3.9805%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="3.7444%" y="1045" width="0.0104%" height="15" fill="rgb(249,21,11)" fg:x="4317" fg:w="12"/><text x="3.9944%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (15 samples, 0.01%)</title><rect x="3.7565%" y="1045" width="0.0130%" height="15" fill="rgb(222,201,40)" fg:x="4331" fg:w="15"/><text x="4.0065%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (19 samples, 0.02%)</title><rect x="3.7695%" y="1045" width="0.0165%" height="15" fill="rgb(235,61,29)" fg:x="4346" fg:w="19"/><text x="4.0195%" y="1055.50"></text></g><g><title>tremor_common::time::nanotime (14 samples, 0.01%)</title><rect x="3.7860%" y="1045" width="0.0121%" height="15" fill="rgb(219,207,3)" fg:x="4365" fg:w="14"/><text x="4.0360%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (14 samples, 0.01%)</title><rect x="3.7860%" y="1029" width="0.0121%" height="15" fill="rgb(222,56,46)" fg:x="4365" fg:w="14"/><text x="4.0360%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (14 samples, 0.01%)</title><rect x="3.7860%" y="1013" width="0.0121%" height="15" fill="rgb(239,76,54)" fg:x="4365" fg:w="14"/><text x="4.0360%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (14 samples, 0.01%)</title><rect x="3.7860%" y="997" width="0.0121%" height="15" fill="rgb(231,124,27)" fg:x="4365" fg:w="14"/><text x="4.0360%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (43 samples, 0.04%)</title><rect x="3.7981%" y="1045" width="0.0373%" height="15" fill="rgb(249,195,6)" fg:x="4379" fg:w="43"/><text x="4.0481%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (24 samples, 0.02%)</title><rect x="3.8450%" y="1045" width="0.0208%" height="15" fill="rgb(237,174,47)" fg:x="4433" fg:w="24"/><text x="4.0950%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (14 samples, 0.01%)</title><rect x="3.9040%" y="997" width="0.0121%" height="15" fill="rgb(206,201,31)" fg:x="4501" fg:w="14"/><text x="4.1540%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (51 samples, 0.04%)</title><rect x="3.8727%" y="1045" width="0.0442%" height="15" fill="rgb(231,57,52)" fg:x="4465" fg:w="51"/><text x="4.1227%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="3.8866%" y="1029" width="0.0304%" height="15" fill="rgb(248,177,22)" fg:x="4481" fg:w="35"/><text x="4.1366%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (31 samples, 0.03%)</title><rect x="3.8901%" y="1013" width="0.0269%" height="15" fill="rgb(215,211,37)" fg:x="4485" fg:w="31"/><text x="4.1401%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (42 samples, 0.04%)</title><rect x="3.9204%" y="1045" width="0.0364%" height="15" fill="rgb(241,128,51)" fg:x="4520" fg:w="42"/><text x="4.1704%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (16 samples, 0.01%)</title><rect x="3.9603%" y="1045" width="0.0139%" height="15" fill="rgb(227,165,31)" fg:x="4566" fg:w="16"/><text x="4.2103%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (28 samples, 0.02%)</title><rect x="4.0306%" y="1029" width="0.0243%" height="15" fill="rgb(228,167,24)" fg:x="4647" fg:w="28"/><text x="4.2806%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="4.0306%" y="1013" width="0.0243%" height="15" fill="rgb(228,143,12)" fg:x="4647" fg:w="28"/><text x="4.2806%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="4.0306%" y="997" width="0.0243%" height="15" fill="rgb(249,149,8)" fg:x="4647" fg:w="28"/><text x="4.2806%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="4.0306%" y="981" width="0.0243%" height="15" fill="rgb(243,35,44)" fg:x="4647" fg:w="28"/><text x="4.2806%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (73 samples, 0.06%)</title><rect x="4.0028%" y="1045" width="0.0633%" height="15" fill="rgb(246,89,9)" fg:x="4615" fg:w="73"/><text x="4.2528%" y="1055.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (13 samples, 0.01%)</title><rect x="4.0549%" y="1029" width="0.0113%" height="15" fill="rgb(233,213,13)" fg:x="4675" fg:w="13"/><text x="4.3049%" y="1039.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (13 samples, 0.01%)</title><rect x="4.0549%" y="1013" width="0.0113%" height="15" fill="rgb(233,141,41)" fg:x="4675" fg:w="13"/><text x="4.3049%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (63 samples, 0.05%)</title><rect x="4.0662%" y="1045" width="0.0546%" height="15" fill="rgb(239,167,4)" fg:x="4688" fg:w="63"/><text x="4.3162%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (16 samples, 0.01%)</title><rect x="4.1208%" y="1045" width="0.0139%" height="15" fill="rgb(209,217,16)" fg:x="4751" fg:w="16"/><text x="4.3708%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (172 samples, 0.15%)</title><rect x="4.1347%" y="1045" width="0.1492%" height="15" fill="rgb(219,88,35)" fg:x="4767" fg:w="172"/><text x="4.3847%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (83 samples, 0.07%)</title><rect x="4.2839%" y="1045" width="0.0720%" height="15" fill="rgb(220,193,23)" fg:x="4939" fg:w="83"/><text x="4.5339%" y="1055.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (22 samples, 0.02%)</title><rect x="4.3559%" y="1045" width="0.0191%" height="15" fill="rgb(230,90,52)" fg:x="5022" fg:w="22"/><text x="4.6059%" y="1055.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (129 samples, 0.11%)</title><rect x="4.3749%" y="1045" width="0.1119%" height="15" fill="rgb(252,106,19)" fg:x="5044" fg:w="129"/><text x="4.6249%" y="1055.50"></text></g><g><title>tremor_script::interpreter::resolve (50 samples, 0.04%)</title><rect x="4.4868%" y="1045" width="0.0434%" height="15" fill="rgb(206,74,20)" fg:x="5173" fg:w="50"/><text x="4.7368%" y="1055.50"></text></g><g><title>tremor_script::interpreter::resolve_value (47 samples, 0.04%)</title><rect x="4.5302%" y="1045" width="0.0408%" height="15" fill="rgb(230,138,44)" fg:x="5223" fg:w="47"/><text x="4.7802%" y="1055.50"></text></g><g><title>tremor_script::interpreter::test_guard (41 samples, 0.04%)</title><rect x="4.5710%" y="1045" width="0.0356%" height="15" fill="rgb(235,182,43)" fg:x="5270" fg:w="41"/><text x="4.8210%" y="1055.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (140 samples, 0.12%)</title><rect x="4.6065%" y="1045" width="0.1214%" height="15" fill="rgb(242,16,51)" fg:x="5311" fg:w="140"/><text x="4.8565%" y="1055.50"></text></g><g><title>tremor_script::interpreter::val_eq (42 samples, 0.04%)</title><rect x="4.7280%" y="1045" width="0.0364%" height="15" fill="rgb(248,9,4)" fg:x="5451" fg:w="42"/><text x="4.9780%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (21 samples, 0.02%)</title><rect x="4.7644%" y="1045" width="0.0182%" height="15" fill="rgb(210,31,22)" fg:x="5493" fg:w="21"/><text x="5.0144%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (24 samples, 0.02%)</title><rect x="4.7826%" y="1045" width="0.0208%" height="15" fill="rgb(239,54,39)" fg:x="5514" fg:w="24"/><text x="5.0326%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (37 samples, 0.03%)</title><rect x="4.8398%" y="1013" width="0.0321%" height="15" fill="rgb(230,99,41)" fg:x="5580" fg:w="37"/><text x="5.0898%" y="1023.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (90 samples, 0.08%)</title><rect x="4.8034%" y="1045" width="0.0781%" height="15" fill="rgb(253,106,12)" fg:x="5538" fg:w="90"/><text x="5.0534%" y="1055.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (52 samples, 0.05%)</title><rect x="4.8364%" y="1029" width="0.0451%" height="15" fill="rgb(213,46,41)" fg:x="5576" fg:w="52"/><text x="5.0864%" y="1039.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (41 samples, 0.04%)</title><rect x="5.0948%" y="997" width="0.0356%" height="15" fill="rgb(215,133,35)" fg:x="5874" fg:w="41"/><text x="5.3448%" y="1007.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (41 samples, 0.04%)</title><rect x="5.0948%" y="981" width="0.0356%" height="15" fill="rgb(213,28,5)" fg:x="5874" fg:w="41"/><text x="5.3448%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (41 samples, 0.04%)</title><rect x="5.0948%" y="965" width="0.0356%" height="15" fill="rgb(215,77,49)" fg:x="5874" fg:w="41"/><text x="5.3448%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (41 samples, 0.04%)</title><rect x="5.0948%" y="949" width="0.0356%" height="15" fill="rgb(248,100,22)" fg:x="5874" fg:w="41"/><text x="5.3448%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (41 samples, 0.04%)</title><rect x="5.0948%" y="933" width="0.0356%" height="15" fill="rgb(208,67,9)" fg:x="5874" fg:w="41"/><text x="5.3448%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.04%)</title><rect x="5.0948%" y="917" width="0.0356%" height="15" fill="rgb(219,133,21)" fg:x="5874" fg:w="41"/><text x="5.3448%" y="927.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (311 samples, 0.27%)</title><rect x="4.8815%" y="1045" width="0.2697%" height="15" fill="rgb(246,46,29)" fg:x="5628" fg:w="311"/><text x="5.1315%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (65 samples, 0.06%)</title><rect x="5.0948%" y="1029" width="0.0564%" height="15" fill="rgb(246,185,52)" fg:x="5874" fg:w="65"/><text x="5.3448%" y="1039.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (65 samples, 0.06%)</title><rect x="5.0948%" y="1013" width="0.0564%" height="15" fill="rgb(252,136,11)" fg:x="5874" fg:w="65"/><text x="5.3448%" y="1023.50"></text></g><g><title>value_trait::generator::write_str_simd (24 samples, 0.02%)</title><rect x="5.1304%" y="997" width="0.0208%" height="15" fill="rgb(219,138,53)" fg:x="5915" fg:w="24"/><text x="5.3804%" y="1007.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (24 samples, 0.02%)</title><rect x="5.1304%" y="981" width="0.0208%" height="15" fill="rgb(211,51,23)" fg:x="5915" fg:w="24"/><text x="5.3804%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (24 samples, 0.02%)</title><rect x="5.1304%" y="965" width="0.0208%" height="15" fill="rgb(247,221,28)" fg:x="5915" fg:w="24"/><text x="5.3804%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (24 samples, 0.02%)</title><rect x="5.1304%" y="949" width="0.0208%" height="15" fill="rgb(251,222,45)" fg:x="5915" fg:w="24"/><text x="5.3804%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (24 samples, 0.02%)</title><rect x="5.1304%" y="933" width="0.0208%" height="15" fill="rgb(217,162,53)" fg:x="5915" fg:w="24"/><text x="5.3804%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="5.1304%" y="917" width="0.0208%" height="15" fill="rgb(229,93,14)" fg:x="5915" fg:w="24"/><text x="5.3804%" y="927.50"></text></g><g><title>[anon] (5,713 samples, 4.96%)</title><rect x="0.2090%" y="1061" width="4.9552%" height="15" fill="rgb(209,67,49)" fg:x="241" fg:w="5713"/><text x="0.4590%" y="1071.50">[anon]</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (21 samples, 0.02%)</title><rect x="5.2189%" y="997" width="0.0182%" height="15" fill="rgb(213,87,29)" fg:x="6017" fg:w="21"/><text x="5.4689%" y="1007.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (54 samples, 0.05%)</title><rect x="5.1929%" y="1045" width="0.0468%" height="15" fill="rgb(205,151,52)" fg:x="5987" fg:w="54"/><text x="5.4429%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (39 samples, 0.03%)</title><rect x="5.2059%" y="1029" width="0.0338%" height="15" fill="rgb(253,215,39)" fg:x="6002" fg:w="39"/><text x="5.4559%" y="1039.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (28 samples, 0.02%)</title><rect x="5.2154%" y="1013" width="0.0243%" height="15" fill="rgb(221,220,41)" fg:x="6013" fg:w="28"/><text x="5.4654%" y="1023.50"></text></g><g><title>[libc-2.31.so] (156 samples, 0.14%)</title><rect x="5.1642%" y="1061" width="0.1353%" height="15" fill="rgb(218,133,21)" fg:x="5954" fg:w="156"/><text x="5.4142%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (26 samples, 0.02%)</title><rect x="5.2770%" y="1045" width="0.0226%" height="15" fill="rgb(221,193,43)" fg:x="6084" fg:w="26"/><text x="5.5270%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="5.2995%" y="1045" width="0.0130%" height="15" fill="rgb(240,128,52)" fg:x="6110" fg:w="15"/><text x="5.5495%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (33 samples, 0.03%)</title><rect x="5.3126%" y="1045" width="0.0286%" height="15" fill="rgb(253,114,12)" fg:x="6125" fg:w="33"/><text x="5.5626%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (33 samples, 0.03%)</title><rect x="5.3412%" y="1045" width="0.0286%" height="15" fill="rgb(215,223,47)" fg:x="6158" fg:w="33"/><text x="5.5912%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (39 samples, 0.03%)</title><rect x="5.3897%" y="1045" width="0.0338%" height="15" fill="rgb(248,225,23)" fg:x="6214" fg:w="39"/><text x="5.6397%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="5.4314%" y="1045" width="0.0139%" height="15" fill="rgb(250,108,0)" fg:x="6262" fg:w="16"/><text x="5.6814%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (85 samples, 0.07%)</title><rect x="5.4617%" y="1045" width="0.0737%" height="15" fill="rgb(228,208,7)" fg:x="6297" fg:w="85"/><text x="5.7117%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.01%)</title><rect x="5.5433%" y="1045" width="0.0130%" height="15" fill="rgb(244,45,10)" fg:x="6391" fg:w="15"/><text x="5.7933%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (20 samples, 0.02%)</title><rect x="5.5563%" y="1045" width="0.0173%" height="15" fill="rgb(207,125,25)" fg:x="6406" fg:w="20"/><text x="5.8063%" y="1055.50"></text></g><g><title>tremor_script::ast::Script::run (35 samples, 0.03%)</title><rect x="5.5988%" y="1045" width="0.0304%" height="15" fill="rgb(210,195,18)" fg:x="6455" fg:w="35"/><text x="5.8488%" y="1055.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (36 samples, 0.03%)</title><rect x="5.6343%" y="1045" width="0.0312%" height="15" fill="rgb(249,80,12)" fg:x="6496" fg:w="36"/><text x="5.8843%" y="1055.50"></text></g><g><title>[tremor-pdk-halfbrown] (433 samples, 0.38%)</title><rect x="5.2995%" y="1061" width="0.3756%" height="15" fill="rgb(221,65,9)" fg:x="6110" fg:w="433"/><text x="5.5495%" y="1071.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (18 samples, 0.02%)</title><rect x="5.6751%" y="1045" width="0.0156%" height="15" fill="rgb(235,49,36)" fg:x="6543" fg:w="18"/><text x="5.9251%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (38 samples, 0.03%)</title><rect x="5.6959%" y="1045" width="0.0330%" height="15" fill="rgb(225,32,20)" fg:x="6567" fg:w="38"/><text x="5.9459%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="5.7410%" y="1045" width="0.0104%" height="15" fill="rgb(215,141,46)" fg:x="6619" fg:w="12"/><text x="5.9910%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (48 samples, 0.04%)</title><rect x="5.7514%" y="1045" width="0.0416%" height="15" fill="rgb(250,160,47)" fg:x="6631" fg:w="48"/><text x="6.0014%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="1029" width="0.0121%" height="15" fill="rgb(216,222,40)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (14 samples, 0.01%)</title><rect x="5.8121%" y="1013" width="0.0121%" height="15" fill="rgb(234,217,39)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14 samples, 0.01%)</title><rect x="5.8121%" y="997" width="0.0121%" height="15" fill="rgb(207,178,40)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.8121%" y="981" width="0.0121%" height="15" fill="rgb(221,136,13)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.8121%" y="965" width="0.0121%" height="15" fill="rgb(249,199,10)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="975.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="949" width="0.0121%" height="15" fill="rgb(249,222,13)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="959.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.8121%" y="933" width="0.0121%" height="15" fill="rgb(244,185,38)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14 samples, 0.01%)</title><rect x="5.8121%" y="917" width="0.0121%" height="15" fill="rgb(236,202,9)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14 samples, 0.01%)</title><rect x="5.8121%" y="901" width="0.0121%" height="15" fill="rgb(250,229,37)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.01%)</title><rect x="5.8121%" y="885" width="0.0121%" height="15" fill="rgb(206,174,23)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="869" width="0.0121%" height="15" fill="rgb(211,33,43)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="853" width="0.0121%" height="15" fill="rgb(245,58,50)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.8121%" y="837" width="0.0121%" height="15" fill="rgb(244,68,36)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="821" width="0.0121%" height="15" fill="rgb(232,229,15)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.8121%" y="805" width="0.0121%" height="15" fill="rgb(254,30,23)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="789" width="0.0121%" height="15" fill="rgb(235,160,14)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.8121%" y="773" width="0.0121%" height="15" fill="rgb(212,155,44)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="757" width="0.0121%" height="15" fill="rgb(226,2,50)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.8121%" y="741" width="0.0121%" height="15" fill="rgb(234,177,6)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (14 samples, 0.01%)</title><rect x="5.8121%" y="725" width="0.0121%" height="15" fill="rgb(217,24,9)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="5.8121%" y="709" width="0.0121%" height="15" fill="rgb(220,13,46)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="5.8121%" y="693" width="0.0121%" height="15" fill="rgb(239,221,27)" fg:x="6701" fg:w="14"/><text x="6.0621%" y="703.50"></text></g><g><title>[libc-2.31.so] (251 samples, 0.22%)</title><rect x="5.8893%" y="821" width="0.2177%" height="15" fill="rgb(222,198,25)" fg:x="6790" fg:w="251"/><text x="6.1393%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (275 samples, 0.24%)</title><rect x="5.8720%" y="837" width="0.2385%" height="15" fill="rgb(211,99,13)" fg:x="6770" fg:w="275"/><text x="6.1220%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (439 samples, 0.38%)</title><rect x="5.8416%" y="853" width="0.3808%" height="15" fill="rgb(232,111,31)" fg:x="6735" fg:w="439"/><text x="6.0916%" y="863.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.11%)</title><rect x="6.1105%" y="837" width="0.1119%" height="15" fill="rgb(245,82,37)" fg:x="7045" fg:w="129"/><text x="6.3605%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (458 samples, 0.40%)</title><rect x="5.8330%" y="885" width="0.3972%" height="15" fill="rgb(227,149,46)" fg:x="6725" fg:w="458"/><text x="6.0830%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (458 samples, 0.40%)</title><rect x="5.8330%" y="869" width="0.3972%" height="15" fill="rgb(218,36,50)" fg:x="6725" fg:w="458"/><text x="6.0830%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="6.3412%" y="533" width="0.0104%" height="15" fill="rgb(226,80,48)" fg:x="7311" fg:w="12"/><text x="6.5912%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 0.01%)</title><rect x="6.3412%" y="517" width="0.0104%" height="15" fill="rgb(238,224,15)" fg:x="7311" fg:w="12"/><text x="6.5912%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 0.01%)</title><rect x="6.3412%" y="501" width="0.0104%" height="15" fill="rgb(241,136,10)" fg:x="7311" fg:w="12"/><text x="6.5912%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (608 samples, 0.53%)</title><rect x="5.8330%" y="901" width="0.5274%" height="15" fill="rgb(208,32,45)" fg:x="6725" fg:w="608"/><text x="6.0830%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (150 samples, 0.13%)</title><rect x="6.2302%" y="885" width="0.1301%" height="15" fill="rgb(207,135,9)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (150 samples, 0.13%)</title><rect x="6.2302%" y="869" width="0.1301%" height="15" fill="rgb(206,86,44)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="879.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (150 samples, 0.13%)</title><rect x="6.2302%" y="853" width="0.1301%" height="15" fill="rgb(245,177,15)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (150 samples, 0.13%)</title><rect x="6.2302%" y="837" width="0.1301%" height="15" fill="rgb(206,64,50)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="847.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (150 samples, 0.13%)</title><rect x="6.2302%" y="821" width="0.1301%" height="15" fill="rgb(234,36,40)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (150 samples, 0.13%)</title><rect x="6.2302%" y="805" width="0.1301%" height="15" fill="rgb(213,64,8)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (150 samples, 0.13%)</title><rect x="6.2302%" y="789" width="0.1301%" height="15" fill="rgb(210,75,36)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="799.50"></text></g><g><title>std::panic::catch_unwind (150 samples, 0.13%)</title><rect x="6.2302%" y="773" width="0.1301%" height="15" fill="rgb(229,88,21)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="783.50"></text></g><g><title>std::panicking::try (150 samples, 0.13%)</title><rect x="6.2302%" y="757" width="0.1301%" height="15" fill="rgb(252,204,47)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="767.50"></text></g><g><title>std::panicking::try::do_call (150 samples, 0.13%)</title><rect x="6.2302%" y="741" width="0.1301%" height="15" fill="rgb(208,77,27)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (150 samples, 0.13%)</title><rect x="6.2302%" y="725" width="0.1301%" height="15" fill="rgb(221,76,26)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (150 samples, 0.13%)</title><rect x="6.2302%" y="709" width="0.1301%" height="15" fill="rgb(225,139,18)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (150 samples, 0.13%)</title><rect x="6.2302%" y="693" width="0.1301%" height="15" fill="rgb(230,137,11)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="703.50"></text></g><g><title>async_ffi::FfiContext::with_context (150 samples, 0.13%)</title><rect x="6.2302%" y="677" width="0.1301%" height="15" fill="rgb(212,28,1)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (150 samples, 0.13%)</title><rect x="6.2302%" y="661" width="0.1301%" height="15" fill="rgb(248,164,17)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (150 samples, 0.13%)</title><rect x="6.2302%" y="645" width="0.1301%" height="15" fill="rgb(222,171,42)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (150 samples, 0.13%)</title><rect x="6.2302%" y="629" width="0.1301%" height="15" fill="rgb(243,84,45)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (150 samples, 0.13%)</title><rect x="6.2302%" y="613" width="0.1301%" height="15" fill="rgb(252,49,23)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (150 samples, 0.13%)</title><rect x="6.2302%" y="597" width="0.1301%" height="15" fill="rgb(215,19,7)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (150 samples, 0.13%)</title><rect x="6.2302%" y="581" width="0.1301%" height="15" fill="rgb(238,81,41)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (150 samples, 0.13%)</title><rect x="6.2302%" y="565" width="0.1301%" height="15" fill="rgb(210,199,37)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (150 samples, 0.13%)</title><rect x="6.2302%" y="549" width="0.1301%" height="15" fill="rgb(244,192,49)" fg:x="7183" fg:w="150"/><text x="6.4802%" y="559.50"></text></g><g><title>event_listener::Inner::lock (41 samples, 0.04%)</title><rect x="6.3603%" y="709" width="0.0356%" height="15" fill="rgb(226,211,11)" fg:x="7333" fg:w="41"/><text x="6.6103%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.04%)</title><rect x="6.3603%" y="693" width="0.0356%" height="15" fill="rgb(236,162,54)" fg:x="7333" fg:w="41"/><text x="6.6103%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (41 samples, 0.04%)</title><rect x="6.3603%" y="677" width="0.0356%" height="15" fill="rgb(220,229,9)" fg:x="7333" fg:w="41"/><text x="6.6103%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (41 samples, 0.04%)</title><rect x="6.3603%" y="661" width="0.0356%" height="15" fill="rgb(250,87,22)" fg:x="7333" fg:w="41"/><text x="6.6103%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (41 samples, 0.04%)</title><rect x="6.3603%" y="645" width="0.0356%" height="15" fill="rgb(239,43,17)" fg:x="7333" fg:w="41"/><text x="6.6103%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (12 samples, 0.01%)</title><rect x="6.3993%" y="661" width="0.0104%" height="15" fill="rgb(231,177,25)" fg:x="7378" fg:w="12"/><text x="6.6493%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.01%)</title><rect x="6.3993%" y="645" width="0.0104%" height="15" fill="rgb(219,179,1)" fg:x="7378" fg:w="12"/><text x="6.6493%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.01%)</title><rect x="6.3993%" y="629" width="0.0104%" height="15" fill="rgb(238,219,53)" fg:x="7378" fg:w="12"/><text x="6.6493%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (46 samples, 0.04%)</title><rect x="6.4115%" y="613" width="0.0399%" height="15" fill="rgb(232,167,36)" fg:x="7392" fg:w="46"/><text x="6.6615%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="6.4115%" y="597" width="0.0399%" height="15" fill="rgb(244,19,51)" fg:x="7392" fg:w="46"/><text x="6.6615%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.04%)</title><rect x="6.4115%" y="581" width="0.0399%" height="15" fill="rgb(224,6,22)" fg:x="7392" fg:w="46"/><text x="6.6615%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (46 samples, 0.04%)</title><rect x="6.4115%" y="565" width="0.0399%" height="15" fill="rgb(224,145,5)" fg:x="7392" fg:w="46"/><text x="6.6615%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (46 samples, 0.04%)</title><rect x="6.4115%" y="549" width="0.0399%" height="15" fill="rgb(234,130,49)" fg:x="7392" fg:w="46"/><text x="6.6615%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (16 samples, 0.01%)</title><rect x="6.4514%" y="613" width="0.0139%" height="15" fill="rgb(254,6,2)" fg:x="7438" fg:w="16"/><text x="6.7014%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="6.4514%" y="597" width="0.0139%" height="15" fill="rgb(208,96,46)" fg:x="7438" fg:w="16"/><text x="6.7014%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (22 samples, 0.02%)</title><rect x="6.4809%" y="533" width="0.0191%" height="15" fill="rgb(239,3,39)" fg:x="7472" fg:w="22"/><text x="6.7309%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (22 samples, 0.02%)</title><rect x="6.4809%" y="517" width="0.0191%" height="15" fill="rgb(233,210,1)" fg:x="7472" fg:w="22"/><text x="6.7309%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (20 samples, 0.02%)</title><rect x="6.5000%" y="533" width="0.0173%" height="15" fill="rgb(244,137,37)" fg:x="7494" fg:w="20"/><text x="6.7500%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (20 samples, 0.02%)</title><rect x="6.5000%" y="517" width="0.0173%" height="15" fill="rgb(240,136,2)" fg:x="7494" fg:w="20"/><text x="6.7500%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (20 samples, 0.02%)</title><rect x="6.5000%" y="501" width="0.0173%" height="15" fill="rgb(239,18,37)" fg:x="7494" fg:w="20"/><text x="6.7500%" y="511.50"></text></g><g><title>__pthread_cond_signal (20 samples, 0.02%)</title><rect x="6.5000%" y="485" width="0.0173%" height="15" fill="rgb(218,185,22)" fg:x="7494" fg:w="20"/><text x="6.7500%" y="495.50"></text></g><g><title>parking::Unparker::unpark (76 samples, 0.07%)</title><rect x="6.4739%" y="565" width="0.0659%" height="15" fill="rgb(225,218,4)" fg:x="7464" fg:w="76"/><text x="6.7239%" y="575.50"></text></g><g><title>parking::Inner::unpark (72 samples, 0.06%)</title><rect x="6.4774%" y="549" width="0.0624%" height="15" fill="rgb(230,182,32)" fg:x="7468" fg:w="72"/><text x="6.7274%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (26 samples, 0.02%)</title><rect x="6.5173%" y="533" width="0.0226%" height="15" fill="rgb(242,56,43)" fg:x="7514" fg:w="26"/><text x="6.7673%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (26 samples, 0.02%)</title><rect x="6.5173%" y="517" width="0.0226%" height="15" fill="rgb(233,99,24)" fg:x="7514" fg:w="26"/><text x="6.7673%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (26 samples, 0.02%)</title><rect x="6.5173%" y="501" width="0.0226%" height="15" fill="rgb(234,209,42)" fg:x="7514" fg:w="26"/><text x="6.7673%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (26 samples, 0.02%)</title><rect x="6.5173%" y="485" width="0.0226%" height="15" fill="rgb(227,7,12)" fg:x="7514" fg:w="26"/><text x="6.7673%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (90 samples, 0.08%)</title><rect x="6.4653%" y="581" width="0.0781%" height="15" fill="rgb(245,203,43)" fg:x="7454" fg:w="90"/><text x="6.7153%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (106 samples, 0.09%)</title><rect x="6.4653%" y="613" width="0.0919%" height="15" fill="rgb(238,205,33)" fg:x="7454" fg:w="106"/><text x="6.7153%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (106 samples, 0.09%)</title><rect x="6.4653%" y="597" width="0.0919%" height="15" fill="rgb(231,56,7)" fg:x="7454" fg:w="106"/><text x="6.7153%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="6.5433%" y="581" width="0.0139%" height="15" fill="rgb(244,186,29)" fg:x="7544" fg:w="16"/><text x="6.7933%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="6.5433%" y="565" width="0.0139%" height="15" fill="rgb(234,111,31)" fg:x="7544" fg:w="16"/><text x="6.7933%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="6.5442%" y="549" width="0.0130%" height="15" fill="rgb(241,149,10)" fg:x="7545" fg:w="15"/><text x="6.7942%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="6.5442%" y="533" width="0.0130%" height="15" fill="rgb(249,206,44)" fg:x="7545" fg:w="15"/><text x="6.7942%" y="543.50"></text></g><g><title>async_executor::State::notify (211 samples, 0.18%)</title><rect x="6.4098%" y="629" width="0.1830%" height="15" fill="rgb(251,153,30)" fg:x="7390" fg:w="211"/><text x="6.6598%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.04%)</title><rect x="6.5572%" y="613" width="0.0356%" height="15" fill="rgb(239,152,38)" fg:x="7560" fg:w="41"/><text x="6.8072%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (39 samples, 0.03%)</title><rect x="6.5589%" y="597" width="0.0338%" height="15" fill="rgb(249,139,47)" fg:x="7562" fg:w="39"/><text x="6.8089%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (34 samples, 0.03%)</title><rect x="6.5633%" y="581" width="0.0295%" height="15" fill="rgb(244,64,35)" fg:x="7567" fg:w="34"/><text x="6.8133%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (34 samples, 0.03%)</title><rect x="6.5633%" y="565" width="0.0295%" height="15" fill="rgb(216,46,15)" fg:x="7567" fg:w="34"/><text x="6.8133%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (32 samples, 0.03%)</title><rect x="6.5962%" y="597" width="0.0278%" height="15" fill="rgb(250,74,19)" fg:x="7605" fg:w="32"/><text x="6.8462%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (32 samples, 0.03%)</title><rect x="6.5962%" y="581" width="0.0278%" height="15" fill="rgb(249,42,33)" fg:x="7605" fg:w="32"/><text x="6.8462%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (19 samples, 0.02%)</title><rect x="6.6249%" y="597" width="0.0165%" height="15" fill="rgb(242,149,17)" fg:x="7638" fg:w="19"/><text x="6.8749%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (19 samples, 0.02%)</title><rect x="6.6249%" y="581" width="0.0165%" height="15" fill="rgb(244,29,21)" fg:x="7638" fg:w="19"/><text x="6.8749%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (269 samples, 0.23%)</title><rect x="6.4098%" y="645" width="0.2333%" height="15" fill="rgb(220,130,37)" fg:x="7390" fg:w="269"/><text x="6.6598%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (58 samples, 0.05%)</title><rect x="6.5928%" y="629" width="0.0503%" height="15" fill="rgb(211,67,2)" fg:x="7601" fg:w="58"/><text x="6.8428%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (58 samples, 0.05%)</title><rect x="6.5928%" y="613" width="0.0503%" height="15" fill="rgb(235,68,52)" fg:x="7601" fg:w="58"/><text x="6.8428%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (53 samples, 0.05%)</title><rect x="6.6431%" y="645" width="0.0460%" height="15" fill="rgb(246,142,3)" fg:x="7659" fg:w="53"/><text x="6.8931%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (53 samples, 0.05%)</title><rect x="6.6431%" y="629" width="0.0460%" height="15" fill="rgb(241,25,7)" fg:x="7659" fg:w="53"/><text x="6.8931%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (382 samples, 0.33%)</title><rect x="6.3603%" y="821" width="0.3313%" height="15" fill="rgb(242,119,39)" fg:x="7333" fg:w="382"/><text x="6.6103%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (382 samples, 0.33%)</title><rect x="6.3603%" y="805" width="0.3313%" height="15" fill="rgb(241,98,45)" fg:x="7333" fg:w="382"/><text x="6.6103%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (382 samples, 0.33%)</title><rect x="6.3603%" y="789" width="0.3313%" height="15" fill="rgb(254,28,30)" fg:x="7333" fg:w="382"/><text x="6.6103%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (382 samples, 0.33%)</title><rect x="6.3603%" y="773" width="0.3313%" height="15" fill="rgb(241,142,54)" fg:x="7333" fg:w="382"/><text x="6.6103%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (382 samples, 0.33%)</title><rect x="6.3603%" y="757" width="0.3313%" height="15" fill="rgb(222,85,15)" fg:x="7333" fg:w="382"/><text x="6.6103%" y="767.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (382 samples, 0.33%)</title><rect x="6.3603%" y="741" width="0.3313%" height="15" fill="rgb(210,85,47)" fg:x="7333" fg:w="382"/><text x="6.6103%" y="751.50"></text></g><g><title>event_listener::Event::notify (382 samples, 0.33%)</title><rect x="6.3603%" y="725" width="0.3313%" height="15" fill="rgb(224,206,25)" fg:x="7333" fg:w="382"/><text x="6.6103%" y="735.50"></text></g><g><title>event_listener::List::notify (341 samples, 0.30%)</title><rect x="6.3959%" y="709" width="0.2958%" height="15" fill="rgb(243,201,19)" fg:x="7374" fg:w="341"/><text x="6.6459%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (338 samples, 0.29%)</title><rect x="6.3985%" y="693" width="0.2932%" height="15" fill="rgb(236,59,4)" fg:x="7377" fg:w="338"/><text x="6.6485%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (338 samples, 0.29%)</title><rect x="6.3985%" y="677" width="0.2932%" height="15" fill="rgb(254,179,45)" fg:x="7377" fg:w="338"/><text x="6.6485%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (325 samples, 0.28%)</title><rect x="6.4098%" y="661" width="0.2819%" height="15" fill="rgb(226,14,10)" fg:x="7390" fg:w="325"/><text x="6.6598%" y="671.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="6.9432%" y="805" width="0.0173%" height="15" fill="rgb(244,27,41)" fg:x="8005" fg:w="20"/><text x="7.1932%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 0.03%)</title><rect x="7.1236%" y="677" width="0.0347%" height="15" fill="rgb(235,35,32)" fg:x="8213" fg:w="40"/><text x="7.3736%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 0.03%)</title><rect x="7.1236%" y="661" width="0.0347%" height="15" fill="rgb(218,68,31)" fg:x="8213" fg:w="40"/><text x="7.3736%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (40 samples, 0.03%)</title><rect x="7.1236%" y="645" width="0.0347%" height="15" fill="rgb(207,120,37)" fg:x="8213" fg:w="40"/><text x="7.3736%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="7.1236%" y="629" width="0.0347%" height="15" fill="rgb(227,98,0)" fg:x="8213" fg:w="40"/><text x="7.3736%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="7.1236%" y="613" width="0.0347%" height="15" fill="rgb(207,7,3)" fg:x="8213" fg:w="40"/><text x="7.3736%" y="623.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.03%)</title><rect x="7.1279%" y="597" width="0.0304%" height="15" fill="rgb(206,98,19)" fg:x="8218" fg:w="35"/><text x="7.3779%" y="607.50"></text></g><g><title>__rg_alloc (35 samples, 0.03%)</title><rect x="7.1279%" y="581" width="0.0304%" height="15" fill="rgb(217,5,26)" fg:x="8218" fg:w="35"/><text x="7.3779%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.03%)</title><rect x="7.1279%" y="565" width="0.0304%" height="15" fill="rgb(235,190,38)" fg:x="8218" fg:w="35"/><text x="7.3779%" y="575.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="7.1375%" y="549" width="0.0208%" height="15" fill="rgb(247,86,24)" fg:x="8229" fg:w="24"/><text x="7.3875%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (64 samples, 0.06%)</title><rect x="7.1167%" y="789" width="0.0555%" height="15" fill="rgb(205,101,16)" fg:x="8205" fg:w="64"/><text x="7.3667%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (60 samples, 0.05%)</title><rect x="7.1201%" y="773" width="0.0520%" height="15" fill="rgb(246,168,33)" fg:x="8209" fg:w="60"/><text x="7.3701%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (58 samples, 0.05%)</title><rect x="7.1219%" y="757" width="0.0503%" height="15" fill="rgb(231,114,1)" fg:x="8211" fg:w="58"/><text x="7.3719%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (56 samples, 0.05%)</title><rect x="7.1236%" y="741" width="0.0486%" height="15" fill="rgb(207,184,53)" fg:x="8213" fg:w="56"/><text x="7.3736%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (56 samples, 0.05%)</title><rect x="7.1236%" y="725" width="0.0486%" height="15" fill="rgb(224,95,51)" fg:x="8213" fg:w="56"/><text x="7.3736%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (56 samples, 0.05%)</title><rect x="7.1236%" y="709" width="0.0486%" height="15" fill="rgb(212,188,45)" fg:x="8213" fg:w="56"/><text x="7.3736%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (56 samples, 0.05%)</title><rect x="7.1236%" y="693" width="0.0486%" height="15" fill="rgb(223,154,38)" fg:x="8213" fg:w="56"/><text x="7.3736%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.01%)</title><rect x="7.1583%" y="677" width="0.0139%" height="15" fill="rgb(251,22,52)" fg:x="8253" fg:w="16"/><text x="7.4083%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="7.1583%" y="661" width="0.0139%" height="15" fill="rgb(229,209,22)" fg:x="8253" fg:w="16"/><text x="7.4083%" y="671.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="7.1592%" y="645" width="0.0130%" height="15" fill="rgb(234,138,34)" fg:x="8254" fg:w="15"/><text x="7.4092%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="7.1938%" y="581" width="0.0304%" height="15" fill="rgb(212,95,11)" fg:x="8294" fg:w="35"/><text x="7.4438%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="7.1938%" y="565" width="0.0304%" height="15" fill="rgb(240,179,47)" fg:x="8294" fg:w="35"/><text x="7.4438%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (35 samples, 0.03%)</title><rect x="7.1938%" y="549" width="0.0304%" height="15" fill="rgb(240,163,11)" fg:x="8294" fg:w="35"/><text x="7.4438%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="7.1956%" y="533" width="0.0286%" height="15" fill="rgb(236,37,12)" fg:x="8296" fg:w="33"/><text x="7.4456%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="7.1956%" y="517" width="0.0286%" height="15" fill="rgb(232,164,16)" fg:x="8296" fg:w="33"/><text x="7.4456%" y="527.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="7.1956%" y="501" width="0.0286%" height="15" fill="rgb(244,205,15)" fg:x="8296" fg:w="33"/><text x="7.4456%" y="511.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="7.1956%" y="485" width="0.0286%" height="15" fill="rgb(223,117,47)" fg:x="8296" fg:w="33"/><text x="7.4456%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="7.1956%" y="469" width="0.0286%" height="15" fill="rgb(244,107,35)" fg:x="8296" fg:w="33"/><text x="7.4456%" y="479.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.03%)</title><rect x="7.1973%" y="453" width="0.0269%" height="15" fill="rgb(205,140,8)" fg:x="8298" fg:w="31"/><text x="7.4473%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="7.1921%" y="693" width="0.0494%" height="15" fill="rgb(228,84,46)" fg:x="8292" fg:w="57"/><text x="7.4421%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (57 samples, 0.05%)</title><rect x="7.1921%" y="677" width="0.0494%" height="15" fill="rgb(254,188,9)" fg:x="8292" fg:w="57"/><text x="7.4421%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (57 samples, 0.05%)</title><rect x="7.1921%" y="661" width="0.0494%" height="15" fill="rgb(206,112,54)" fg:x="8292" fg:w="57"/><text x="7.4421%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (55 samples, 0.05%)</title><rect x="7.1938%" y="645" width="0.0477%" height="15" fill="rgb(216,84,49)" fg:x="8294" fg:w="55"/><text x="7.4438%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (55 samples, 0.05%)</title><rect x="7.1938%" y="629" width="0.0477%" height="15" fill="rgb(214,194,35)" fg:x="8294" fg:w="55"/><text x="7.4438%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (55 samples, 0.05%)</title><rect x="7.1938%" y="613" width="0.0477%" height="15" fill="rgb(249,28,3)" fg:x="8294" fg:w="55"/><text x="7.4438%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (55 samples, 0.05%)</title><rect x="7.1938%" y="597" width="0.0477%" height="15" fill="rgb(222,56,52)" fg:x="8294" fg:w="55"/><text x="7.4438%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.02%)</title><rect x="7.2242%" y="581" width="0.0173%" height="15" fill="rgb(245,217,50)" fg:x="8329" fg:w="20"/><text x="7.4742%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="7.2242%" y="565" width="0.0173%" height="15" fill="rgb(213,201,24)" fg:x="8329" fg:w="20"/><text x="7.4742%" y="575.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="7.2242%" y="549" width="0.0173%" height="15" fill="rgb(248,116,28)" fg:x="8329" fg:w="20"/><text x="7.4742%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33 samples, 0.03%)</title><rect x="7.2485%" y="693" width="0.0286%" height="15" fill="rgb(219,72,43)" fg:x="8357" fg:w="33"/><text x="7.4985%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26 samples, 0.02%)</title><rect x="7.2546%" y="677" width="0.0226%" height="15" fill="rgb(209,138,14)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26 samples, 0.02%)</title><rect x="7.2546%" y="661" width="0.0226%" height="15" fill="rgb(222,18,33)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="7.2546%" y="645" width="0.0226%" height="15" fill="rgb(213,199,7)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="7.2546%" y="629" width="0.0226%" height="15" fill="rgb(250,110,10)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="639.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="7.2546%" y="613" width="0.0226%" height="15" fill="rgb(248,123,6)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="623.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="7.2546%" y="597" width="0.0226%" height="15" fill="rgb(206,91,31)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="7.2546%" y="581" width="0.0226%" height="15" fill="rgb(211,154,13)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="591.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="7.2546%" y="565" width="0.0226%" height="15" fill="rgb(225,148,7)" fg:x="8364" fg:w="26"/><text x="7.5046%" y="575.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (364 samples, 0.32%)</title><rect x="6.9649%" y="805" width="0.3157%" height="15" fill="rgb(220,160,43)" fg:x="8030" fg:w="364"/><text x="7.2149%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (125 samples, 0.11%)</title><rect x="7.1722%" y="789" width="0.1084%" height="15" fill="rgb(213,52,39)" fg:x="8269" fg:w="125"/><text x="7.4222%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (111 samples, 0.10%)</title><rect x="7.1843%" y="773" width="0.0963%" height="15" fill="rgb(243,137,7)" fg:x="8283" fg:w="111"/><text x="7.4343%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (111 samples, 0.10%)</title><rect x="7.1843%" y="757" width="0.0963%" height="15" fill="rgb(230,79,13)" fg:x="8283" fg:w="111"/><text x="7.4343%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (111 samples, 0.10%)</title><rect x="7.1843%" y="741" width="0.0963%" height="15" fill="rgb(247,105,23)" fg:x="8283" fg:w="111"/><text x="7.4343%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (111 samples, 0.10%)</title><rect x="7.1843%" y="725" width="0.0963%" height="15" fill="rgb(223,179,41)" fg:x="8283" fg:w="111"/><text x="7.4343%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (111 samples, 0.10%)</title><rect x="7.1843%" y="709" width="0.0963%" height="15" fill="rgb(218,9,34)" fg:x="8283" fg:w="111"/><text x="7.4343%" y="719.50"></text></g><g><title>[libc-2.31.so] (59 samples, 0.05%)</title><rect x="7.2806%" y="805" width="0.0512%" height="15" fill="rgb(222,106,8)" fg:x="8394" fg:w="59"/><text x="7.5306%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (142 samples, 0.12%)</title><rect x="7.3370%" y="805" width="0.1232%" height="15" fill="rgb(211,220,0)" fg:x="8459" fg:w="142"/><text x="7.5870%" y="815.50"></text></g><g><title>core::ptr::write (135 samples, 0.12%)</title><rect x="7.3430%" y="789" width="0.1171%" height="15" fill="rgb(229,52,16)" fg:x="8466" fg:w="135"/><text x="7.5930%" y="799.50"></text></g><g><title>[libc-2.31.so] (133 samples, 0.12%)</title><rect x="7.3448%" y="773" width="0.1154%" height="15" fill="rgb(212,155,18)" fg:x="8468" fg:w="133"/><text x="7.5948%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (168 samples, 0.15%)</title><rect x="7.4801%" y="645" width="0.1457%" height="15" fill="rgb(242,21,14)" fg:x="8624" fg:w="168"/><text x="7.7301%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (196 samples, 0.17%)</title><rect x="7.4627%" y="741" width="0.1700%" height="15" fill="rgb(222,19,48)" fg:x="8604" fg:w="196"/><text x="7.7127%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (196 samples, 0.17%)</title><rect x="7.4627%" y="725" width="0.1700%" height="15" fill="rgb(232,45,27)" fg:x="8604" fg:w="196"/><text x="7.7127%" y="735.50"></text></g><g><title>alloc::alloc::alloc (194 samples, 0.17%)</title><rect x="7.4645%" y="709" width="0.1683%" height="15" fill="rgb(249,103,42)" fg:x="8606" fg:w="194"/><text x="7.7145%" y="719.50"></text></g><g><title>__rg_alloc (194 samples, 0.17%)</title><rect x="7.4645%" y="693" width="0.1683%" height="15" fill="rgb(246,81,33)" fg:x="8606" fg:w="194"/><text x="7.7145%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (194 samples, 0.17%)</title><rect x="7.4645%" y="677" width="0.1683%" height="15" fill="rgb(252,33,42)" fg:x="8606" fg:w="194"/><text x="7.7145%" y="687.50"></text></g><g><title>sn_rust_alloc (194 samples, 0.17%)</title><rect x="7.4645%" y="661" width="0.1683%" height="15" fill="rgb(209,212,41)" fg:x="8606" fg:w="194"/><text x="7.7145%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (202 samples, 0.18%)</title><rect x="7.4601%" y="805" width="0.1752%" height="15" fill="rgb(207,154,6)" fg:x="8601" fg:w="202"/><text x="7.7101%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (202 samples, 0.18%)</title><rect x="7.4601%" y="789" width="0.1752%" height="15" fill="rgb(223,64,47)" fg:x="8601" fg:w="202"/><text x="7.7101%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (201 samples, 0.17%)</title><rect x="7.4610%" y="773" width="0.1743%" height="15" fill="rgb(211,161,38)" fg:x="8602" fg:w="201"/><text x="7.7110%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (201 samples, 0.17%)</title><rect x="7.4610%" y="757" width="0.1743%" height="15" fill="rgb(219,138,40)" fg:x="8602" fg:w="201"/><text x="7.7110%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="7.6449%" y="709" width="0.0165%" height="15" fill="rgb(241,228,46)" fg:x="8814" fg:w="19"/><text x="7.8949%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="7.6449%" y="693" width="0.0165%" height="15" fill="rgb(223,209,38)" fg:x="8814" fg:w="19"/><text x="7.8949%" y="703.50"></text></g><g><title>__rg_dealloc (19 samples, 0.02%)</title><rect x="7.6449%" y="677" width="0.0165%" height="15" fill="rgb(236,164,45)" fg:x="8814" fg:w="19"/><text x="7.8949%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (19 samples, 0.02%)</title><rect x="7.6449%" y="661" width="0.0165%" height="15" fill="rgb(231,15,5)" fg:x="8814" fg:w="19"/><text x="7.8949%" y="671.50"></text></g><g><title>sn_rust_dealloc (19 samples, 0.02%)</title><rect x="7.6449%" y="645" width="0.0165%" height="15" fill="rgb(252,35,15)" fg:x="8814" fg:w="19"/><text x="7.8949%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (32 samples, 0.03%)</title><rect x="7.6353%" y="805" width="0.0278%" height="15" fill="rgb(248,181,18)" fg:x="8803" fg:w="32"/><text x="7.8853%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="7.6353%" y="789" width="0.0278%" height="15" fill="rgb(233,39,42)" fg:x="8803" fg:w="32"/><text x="7.8853%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (24 samples, 0.02%)</title><rect x="7.6423%" y="773" width="0.0208%" height="15" fill="rgb(238,110,33)" fg:x="8811" fg:w="24"/><text x="7.8923%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="7.6423%" y="757" width="0.0208%" height="15" fill="rgb(233,195,10)" fg:x="8811" fg:w="24"/><text x="7.8923%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="7.6449%" y="741" width="0.0182%" height="15" fill="rgb(254,105,3)" fg:x="8814" fg:w="21"/><text x="7.8949%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="7.6449%" y="725" width="0.0182%" height="15" fill="rgb(221,225,9)" fg:x="8814" fg:w="21"/><text x="7.8949%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,511 samples, 1.31%)</title><rect x="6.3603%" y="901" width="1.3106%" height="15" fill="rgb(224,227,45)" fg:x="7333" fg:w="1511"/><text x="6.6103%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,511 samples, 1.31%)</title><rect x="6.3603%" y="885" width="1.3106%" height="15" fill="rgb(229,198,43)" fg:x="7333" fg:w="1511"/><text x="6.6103%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,511 samples, 1.31%)</title><rect x="6.3603%" y="869" width="1.3106%" height="15" fill="rgb(206,209,35)" fg:x="7333" fg:w="1511"/><text x="6.6103%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,511 samples, 1.31%)</title><rect x="6.3603%" y="853" width="1.3106%" height="15" fill="rgb(245,195,53)" fg:x="7333" fg:w="1511"/><text x="6.6103%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,511 samples, 1.31%)</title><rect x="6.3603%" y="837" width="1.3106%" height="15" fill="rgb(240,92,26)" fg:x="7333" fg:w="1511"/><text x="6.6103%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,129 samples, 0.98%)</title><rect x="6.6916%" y="821" width="0.9792%" height="15" fill="rgb(207,40,23)" fg:x="7715" fg:w="1129"/><text x="6.9416%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (34 samples, 0.03%)</title><rect x="7.7299%" y="837" width="0.0295%" height="15" fill="rgb(223,111,35)" fg:x="8912" fg:w="34"/><text x="7.9799%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="7.7359%" y="821" width="0.0234%" height="15" fill="rgb(229,147,28)" fg:x="8919" fg:w="27"/><text x="7.9859%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (324 samples, 0.28%)</title><rect x="7.6830%" y="853" width="0.2810%" height="15" fill="rgb(211,29,28)" fg:x="8858" fg:w="324"/><text x="7.9330%" y="863.50"></text></g><g><title>[libc-2.31.so] (236 samples, 0.20%)</title><rect x="7.7594%" y="837" width="0.2047%" height="15" fill="rgb(228,72,33)" fg:x="8946" fg:w="236"/><text x="8.0094%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (476 samples, 0.41%)</title><rect x="7.6709%" y="885" width="0.4129%" height="15" fill="rgb(205,214,31)" fg:x="8844" fg:w="476"/><text x="7.9209%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (476 samples, 0.41%)</title><rect x="7.6709%" y="869" width="0.4129%" height="15" fill="rgb(224,111,15)" fg:x="8844" fg:w="476"/><text x="7.9209%" y="879.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.12%)</title><rect x="7.9641%" y="853" width="0.1197%" height="15" fill="rgb(253,21,26)" fg:x="9182" fg:w="138"/><text x="8.2141%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (310 samples, 0.27%)</title><rect x="8.2043%" y="757" width="0.2689%" height="15" fill="rgb(245,139,43)" fg:x="9459" fg:w="310"/><text x="8.4543%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (16 samples, 0.01%)</title><rect x="8.4593%" y="741" width="0.0139%" height="15" fill="rgb(252,170,7)" fg:x="9753" fg:w="16"/><text x="8.7093%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="8.4758%" y="741" width="0.0139%" height="15" fill="rgb(231,118,14)" fg:x="9772" fg:w="16"/><text x="8.7258%" y="751.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="8.4897%" y="741" width="0.0173%" height="15" fill="rgb(238,83,0)" fg:x="9788" fg:w="20"/><text x="8.7397%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (44 samples, 0.04%)</title><rect x="8.4732%" y="757" width="0.0382%" height="15" fill="rgb(221,39,39)" fg:x="9769" fg:w="44"/><text x="8.7232%" y="767.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (372 samples, 0.32%)</title><rect x="8.1974%" y="773" width="0.3227%" height="15" fill="rgb(222,119,46)" fg:x="9451" fg:w="372"/><text x="8.4474%" y="783.50"></text></g><g><title>[libc-2.31.so] (234 samples, 0.20%)</title><rect x="8.5200%" y="773" width="0.2030%" height="15" fill="rgb(222,165,49)" fg:x="9823" fg:w="234"/><text x="8.7700%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="8.7490%" y="661" width="0.0113%" height="15" fill="rgb(219,113,52)" fg:x="10087" fg:w="13"/><text x="8.9990%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (46 samples, 0.04%)</title><rect x="8.7230%" y="773" width="0.0399%" height="15" fill="rgb(214,7,15)" fg:x="10057" fg:w="46"/><text x="8.9730%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.04%)</title><rect x="8.7230%" y="757" width="0.0399%" height="15" fill="rgb(235,32,4)" fg:x="10057" fg:w="46"/><text x="8.9730%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.04%)</title><rect x="8.7230%" y="741" width="0.0399%" height="15" fill="rgb(238,90,54)" fg:x="10057" fg:w="46"/><text x="8.9730%" y="751.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.04%)</title><rect x="8.7239%" y="725" width="0.0390%" height="15" fill="rgb(213,208,19)" fg:x="10058" fg:w="45"/><text x="8.9739%" y="735.50"></text></g><g><title>__rg_alloc (45 samples, 0.04%)</title><rect x="8.7239%" y="709" width="0.0390%" height="15" fill="rgb(233,156,4)" fg:x="10058" fg:w="45"/><text x="8.9739%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.04%)</title><rect x="8.7239%" y="693" width="0.0390%" height="15" fill="rgb(207,194,5)" fg:x="10058" fg:w="45"/><text x="8.9739%" y="703.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="8.7239%" y="677" width="0.0390%" height="15" fill="rgb(206,111,30)" fg:x="10058" fg:w="45"/><text x="8.9739%" y="687.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (31 samples, 0.03%)</title><rect x="8.7664%" y="773" width="0.0269%" height="15" fill="rgb(243,70,54)" fg:x="10107" fg:w="31"/><text x="9.0164%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (257 samples, 0.22%)</title><rect x="8.7932%" y="773" width="0.2229%" height="15" fill="rgb(242,28,8)" fg:x="10138" fg:w="257"/><text x="9.0432%" y="783.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (252 samples, 0.22%)</title><rect x="8.7976%" y="757" width="0.2186%" height="15" fill="rgb(219,106,18)" fg:x="10143" fg:w="252"/><text x="9.0476%" y="767.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (252 samples, 0.22%)</title><rect x="8.7976%" y="741" width="0.2186%" height="15" fill="rgb(244,222,10)" fg:x="10143" fg:w="252"/><text x="9.0476%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (252 samples, 0.22%)</title><rect x="8.7976%" y="725" width="0.2186%" height="15" fill="rgb(236,179,52)" fg:x="10143" fg:w="252"/><text x="9.0476%" y="735.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (252 samples, 0.22%)</title><rect x="8.7976%" y="709" width="0.2186%" height="15" fill="rgb(213,23,39)" fg:x="10143" fg:w="252"/><text x="9.0476%" y="719.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (237 samples, 0.21%)</title><rect x="8.8106%" y="693" width="0.2056%" height="15" fill="rgb(238,48,10)" fg:x="10158" fg:w="237"/><text x="9.0606%" y="703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (226 samples, 0.20%)</title><rect x="8.8201%" y="677" width="0.1960%" height="15" fill="rgb(251,196,23)" fg:x="10169" fg:w="226"/><text x="9.0701%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (226 samples, 0.20%)</title><rect x="8.8201%" y="661" width="0.1960%" height="15" fill="rgb(250,152,24)" fg:x="10169" fg:w="226"/><text x="9.0701%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (226 samples, 0.20%)</title><rect x="8.8201%" y="645" width="0.1960%" height="15" fill="rgb(209,150,17)" fg:x="10169" fg:w="226"/><text x="9.0701%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (226 samples, 0.20%)</title><rect x="8.8201%" y="629" width="0.1960%" height="15" fill="rgb(234,202,34)" fg:x="10169" fg:w="226"/><text x="9.0701%" y="639.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.15%)</title><rect x="8.8704%" y="613" width="0.1457%" height="15" fill="rgb(253,148,53)" fg:x="10227" fg:w="168"/><text x="9.1204%" y="623.50"></text></g><g><title>ahash::operations::folded_multiply (24 samples, 0.02%)</title><rect x="9.0240%" y="693" width="0.0208%" height="15" fill="rgb(218,129,16)" fg:x="10404" fg:w="24"/><text x="9.2740%" y="703.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (15 samples, 0.01%)</title><rect x="9.0318%" y="677" width="0.0130%" height="15" fill="rgb(216,85,19)" fg:x="10413" fg:w="15"/><text x="9.2818%" y="687.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (28 samples, 0.02%)</title><rect x="9.0240%" y="709" width="0.0243%" height="15" fill="rgb(235,228,7)" fg:x="10404" fg:w="28"/><text x="9.2740%" y="719.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (20 samples, 0.02%)</title><rect x="9.0656%" y="661" width="0.0173%" height="15" fill="rgb(245,175,0)" fg:x="10452" fg:w="20"/><text x="9.3156%" y="671.50"></text></g><g><title>ahash::operations::folded_multiply (13 samples, 0.01%)</title><rect x="9.0717%" y="645" width="0.0113%" height="15" fill="rgb(208,168,36)" fg:x="10459" fg:w="13"/><text x="9.3217%" y="655.50"></text></g><g><title>ahash::operations::read_small (14 samples, 0.01%)</title><rect x="9.0829%" y="661" width="0.0121%" height="15" fill="rgb(246,171,24)" fg:x="10472" fg:w="14"/><text x="9.3329%" y="671.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (52 samples, 0.05%)</title><rect x="9.0543%" y="677" width="0.0451%" height="15" fill="rgb(215,142,24)" fg:x="10439" fg:w="52"/><text x="9.3043%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (114 samples, 0.10%)</title><rect x="9.0170%" y="725" width="0.0989%" height="15" fill="rgb(250,187,7)" fg:x="10396" fg:w="114"/><text x="9.2670%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (72 samples, 0.06%)</title><rect x="9.0535%" y="709" width="0.0624%" height="15" fill="rgb(228,66,33)" fg:x="10438" fg:w="72"/><text x="9.3035%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (71 samples, 0.06%)</title><rect x="9.0543%" y="693" width="0.0616%" height="15" fill="rgb(234,215,21)" fg:x="10439" fg:w="71"/><text x="9.3043%" y="703.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (19 samples, 0.02%)</title><rect x="9.0994%" y="677" width="0.0165%" height="15" fill="rgb(222,191,20)" fg:x="10491" fg:w="19"/><text x="9.3494%" y="687.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (19 samples, 0.02%)</title><rect x="9.0994%" y="661" width="0.0165%" height="15" fill="rgb(245,79,54)" fg:x="10491" fg:w="19"/><text x="9.3494%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="9.1428%" y="677" width="0.0156%" height="15" fill="rgb(240,10,37)" fg:x="10541" fg:w="18"/><text x="9.3928%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="9.1428%" y="693" width="0.0226%" height="15" fill="rgb(214,192,32)" fg:x="10541" fg:w="26"/><text x="9.3928%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (127 samples, 0.11%)</title><rect x="9.1653%" y="677" width="0.1102%" height="15" fill="rgb(209,36,54)" fg:x="10567" fg:w="127"/><text x="9.4153%" y="687.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (119 samples, 0.10%)</title><rect x="9.1723%" y="661" width="0.1032%" height="15" fill="rgb(220,10,11)" fg:x="10575" fg:w="119"/><text x="9.4223%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (119 samples, 0.10%)</title><rect x="9.1723%" y="645" width="0.1032%" height="15" fill="rgb(221,106,17)" fg:x="10575" fg:w="119"/><text x="9.4223%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (119 samples, 0.10%)</title><rect x="9.1723%" y="629" width="0.1032%" height="15" fill="rgb(251,142,44)" fg:x="10575" fg:w="119"/><text x="9.4223%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (119 samples, 0.10%)</title><rect x="9.1723%" y="613" width="0.1032%" height="15" fill="rgb(238,13,15)" fg:x="10575" fg:w="119"/><text x="9.4223%" y="623.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="9.2356%" y="597" width="0.0399%" height="15" fill="rgb(208,107,27)" fg:x="10648" fg:w="46"/><text x="9.4856%" y="607.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (218 samples, 0.19%)</title><rect x="9.1653%" y="693" width="0.1891%" height="15" fill="rgb(205,136,37)" fg:x="10567" fg:w="218"/><text x="9.4153%" y="703.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (91 samples, 0.08%)</title><rect x="9.2755%" y="677" width="0.0789%" height="15" fill="rgb(250,205,27)" fg:x="10694" fg:w="91"/><text x="9.5255%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (552 samples, 0.48%)</title><rect x="9.0170%" y="757" width="0.4788%" height="15" fill="rgb(210,80,43)" fg:x="10396" fg:w="552"/><text x="9.2670%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (552 samples, 0.48%)</title><rect x="9.0170%" y="741" width="0.4788%" height="15" fill="rgb(247,160,36)" fg:x="10396" fg:w="552"/><text x="9.2670%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (438 samples, 0.38%)</title><rect x="9.1159%" y="725" width="0.3799%" height="15" fill="rgb(234,13,49)" fg:x="10510" fg:w="438"/><text x="9.3659%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (438 samples, 0.38%)</title><rect x="9.1159%" y="709" width="0.3799%" height="15" fill="rgb(234,122,0)" fg:x="10510" fg:w="438"/><text x="9.3659%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (163 samples, 0.14%)</title><rect x="9.3544%" y="693" width="0.1414%" height="15" fill="rgb(207,146,38)" fg:x="10785" fg:w="163"/><text x="9.6044%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (163 samples, 0.14%)</title><rect x="9.3544%" y="677" width="0.1414%" height="15" fill="rgb(207,177,25)" fg:x="10785" fg:w="163"/><text x="9.6044%" y="687.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (163 samples, 0.14%)</title><rect x="9.3544%" y="661" width="0.1414%" height="15" fill="rgb(211,178,42)" fg:x="10785" fg:w="163"/><text x="9.6044%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (151 samples, 0.13%)</title><rect x="9.3648%" y="645" width="0.1310%" height="15" fill="rgb(230,69,54)" fg:x="10797" fg:w="151"/><text x="9.6148%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (151 samples, 0.13%)</title><rect x="9.3648%" y="629" width="0.1310%" height="15" fill="rgb(214,135,41)" fg:x="10797" fg:w="151"/><text x="9.6148%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (151 samples, 0.13%)</title><rect x="9.3648%" y="613" width="0.1310%" height="15" fill="rgb(237,67,25)" fg:x="10797" fg:w="151"/><text x="9.6148%" y="623.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (28 samples, 0.02%)</title><rect x="9.4958%" y="757" width="0.0243%" height="15" fill="rgb(222,189,50)" fg:x="10948" fg:w="28"/><text x="9.7458%" y="767.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (609 samples, 0.53%)</title><rect x="9.0162%" y="773" width="0.5282%" height="15" fill="rgb(245,148,34)" fg:x="10395" fg:w="609"/><text x="9.2662%" y="783.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (28 samples, 0.02%)</title><rect x="9.5201%" y="757" width="0.0243%" height="15" fill="rgb(222,29,6)" fg:x="10976" fg:w="28"/><text x="9.7701%" y="767.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.03%)</title><rect x="9.5444%" y="773" width="0.0252%" height="15" fill="rgb(221,189,43)" fg:x="11004" fg:w="29"/><text x="9.7944%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="9.6459%" y="565" width="0.0234%" height="15" fill="rgb(207,36,27)" fg:x="11121" fg:w="27"/><text x="9.8959%" y="575.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (119 samples, 0.10%)</title><rect x="9.5773%" y="773" width="0.1032%" height="15" fill="rgb(217,90,24)" fg:x="11042" fg:w="119"/><text x="9.8273%" y="783.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (96 samples, 0.08%)</title><rect x="9.5973%" y="757" width="0.0833%" height="15" fill="rgb(224,66,35)" fg:x="11065" fg:w="96"/><text x="9.8473%" y="767.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (96 samples, 0.08%)</title><rect x="9.5973%" y="741" width="0.0833%" height="15" fill="rgb(221,13,50)" fg:x="11065" fg:w="96"/><text x="9.8473%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (90 samples, 0.08%)</title><rect x="9.6025%" y="725" width="0.0781%" height="15" fill="rgb(236,68,49)" fg:x="11071" fg:w="90"/><text x="9.8525%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="9.6025%" y="709" width="0.0781%" height="15" fill="rgb(229,146,28)" fg:x="11071" fg:w="90"/><text x="9.8525%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="9.6025%" y="693" width="0.0781%" height="15" fill="rgb(225,31,38)" fg:x="11071" fg:w="90"/><text x="9.8525%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 0.08%)</title><rect x="9.6025%" y="677" width="0.0781%" height="15" fill="rgb(250,208,3)" fg:x="11071" fg:w="90"/><text x="9.8525%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.08%)</title><rect x="9.6025%" y="661" width="0.0781%" height="15" fill="rgb(246,54,23)" fg:x="11071" fg:w="90"/><text x="9.8525%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.08%)</title><rect x="9.6025%" y="645" width="0.0781%" height="15" fill="rgb(243,76,11)" fg:x="11071" fg:w="90"/><text x="9.8525%" y="655.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.08%)</title><rect x="9.6034%" y="629" width="0.0772%" height="15" fill="rgb(245,21,50)" fg:x="11072" fg:w="89"/><text x="9.8534%" y="639.50"></text></g><g><title>__rg_alloc (89 samples, 0.08%)</title><rect x="9.6034%" y="613" width="0.0772%" height="15" fill="rgb(228,9,43)" fg:x="11072" fg:w="89"/><text x="9.8534%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (89 samples, 0.08%)</title><rect x="9.6034%" y="597" width="0.0772%" height="15" fill="rgb(208,100,47)" fg:x="11072" fg:w="89"/><text x="9.8534%" y="607.50"></text></g><g><title>sn_rust_alloc (83 samples, 0.07%)</title><rect x="9.6086%" y="581" width="0.0720%" height="15" fill="rgb(232,26,8)" fg:x="11078" fg:w="83"/><text x="9.8586%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="9.6693%" y="565" width="0.0113%" height="15" fill="rgb(216,166,38)" fg:x="11148" fg:w="13"/><text x="9.9193%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (112 samples, 0.10%)</title><rect x="9.7673%" y="581" width="0.0971%" height="15" fill="rgb(251,202,51)" fg:x="11261" fg:w="112"/><text x="10.0173%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (103 samples, 0.09%)</title><rect x="9.7751%" y="565" width="0.0893%" height="15" fill="rgb(254,216,34)" fg:x="11270" fg:w="103"/><text x="10.0251%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (103 samples, 0.09%)</title><rect x="9.7751%" y="549" width="0.0893%" height="15" fill="rgb(251,32,27)" fg:x="11270" fg:w="103"/><text x="10.0251%" y="559.50"></text></g><g><title>hashbrown::raw::inner::h2 (19 samples, 0.02%)</title><rect x="9.8809%" y="533" width="0.0165%" height="15" fill="rgb(208,127,28)" fg:x="11392" fg:w="19"/><text x="10.1309%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (16 samples, 0.01%)</title><rect x="9.8974%" y="533" width="0.0139%" height="15" fill="rgb(224,137,22)" fg:x="11411" fg:w="16"/><text x="10.1474%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.01%)</title><rect x="9.8974%" y="517" width="0.0139%" height="15" fill="rgb(254,70,32)" fg:x="11411" fg:w="16"/><text x="10.1474%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="9.8974%" y="501" width="0.0139%" height="15" fill="rgb(229,75,37)" fg:x="11411" fg:w="16"/><text x="10.1474%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="9.9113%" y="533" width="0.0139%" height="15" fill="rgb(252,64,23)" fg:x="11427" fg:w="16"/><text x="10.1613%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="9.9113%" y="517" width="0.0139%" height="15" fill="rgb(232,162,48)" fg:x="11427" fg:w="16"/><text x="10.1613%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (78 samples, 0.07%)</title><rect x="9.8644%" y="581" width="0.0677%" height="15" fill="rgb(246,160,12)" fg:x="11373" fg:w="78"/><text x="10.1144%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (78 samples, 0.07%)</title><rect x="9.8644%" y="565" width="0.0677%" height="15" fill="rgb(247,166,0)" fg:x="11373" fg:w="78"/><text x="10.1144%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (78 samples, 0.07%)</title><rect x="9.8644%" y="549" width="0.0677%" height="15" fill="rgb(249,219,21)" fg:x="11373" fg:w="78"/><text x="10.1144%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (215 samples, 0.19%)</title><rect x="9.7517%" y="693" width="0.1865%" height="15" fill="rgb(205,209,3)" fg:x="11243" fg:w="215"/><text x="10.0017%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (211 samples, 0.18%)</title><rect x="9.7551%" y="677" width="0.1830%" height="15" fill="rgb(243,44,1)" fg:x="11247" fg:w="211"/><text x="10.0051%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (211 samples, 0.18%)</title><rect x="9.7551%" y="661" width="0.1830%" height="15" fill="rgb(206,159,16)" fg:x="11247" fg:w="211"/><text x="10.0051%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (211 samples, 0.18%)</title><rect x="9.7551%" y="645" width="0.1830%" height="15" fill="rgb(244,77,30)" fg:x="11247" fg:w="211"/><text x="10.0051%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (200 samples, 0.17%)</title><rect x="9.7647%" y="629" width="0.1735%" height="15" fill="rgb(218,69,12)" fg:x="11258" fg:w="200"/><text x="10.0147%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (200 samples, 0.17%)</title><rect x="9.7647%" y="613" width="0.1735%" height="15" fill="rgb(212,87,7)" fg:x="11258" fg:w="200"/><text x="10.0147%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (197 samples, 0.17%)</title><rect x="9.7673%" y="597" width="0.1709%" height="15" fill="rgb(245,114,25)" fg:x="11261" fg:w="197"/><text x="10.0173%" y="607.50"></text></g><g><title>value_trait::ValueAccess::get (302 samples, 0.26%)</title><rect x="9.6806%" y="773" width="0.2619%" height="15" fill="rgb(210,61,42)" fg:x="11161" fg:w="302"/><text x="9.9306%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (302 samples, 0.26%)</title><rect x="9.6806%" y="757" width="0.2619%" height="15" fill="rgb(211,52,33)" fg:x="11161" fg:w="302"/><text x="9.9306%" y="767.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (302 samples, 0.26%)</title><rect x="9.6806%" y="741" width="0.2619%" height="15" fill="rgb(234,58,33)" fg:x="11161" fg:w="302"/><text x="9.9306%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (302 samples, 0.26%)</title><rect x="9.6806%" y="725" width="0.2619%" height="15" fill="rgb(220,115,36)" fg:x="11161" fg:w="302"/><text x="9.9306%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (302 samples, 0.26%)</title><rect x="9.6806%" y="709" width="0.2619%" height="15" fill="rgb(243,153,54)" fg:x="11161" fg:w="302"/><text x="9.9306%" y="719.50"></text></g><g><title>abi_stable::std_types::map::_::&lt;impl abi_stable::std_types::map::VTable_Ref&lt;K,V,S&gt;&gt;::get_elem (17 samples, 0.01%)</title><rect x="10.0613%" y="677" width="0.0147%" height="15" fill="rgb(251,47,18)" fg:x="11600" fg:w="17"/><text x="10.3113%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (116 samples, 0.10%)</title><rect x="10.0960%" y="565" width="0.1006%" height="15" fill="rgb(242,102,42)" fg:x="11640" fg:w="116"/><text x="10.3460%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (110 samples, 0.10%)</title><rect x="10.1012%" y="549" width="0.0954%" height="15" fill="rgb(234,31,38)" fg:x="11646" fg:w="110"/><text x="10.3512%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (106 samples, 0.09%)</title><rect x="10.1047%" y="533" width="0.0919%" height="15" fill="rgb(221,117,51)" fg:x="11650" fg:w="106"/><text x="10.3547%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="10.2018%" y="517" width="0.0156%" height="15" fill="rgb(212,20,18)" fg:x="11762" fg:w="18"/><text x="10.4518%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (18 samples, 0.02%)</title><rect x="10.2018%" y="501" width="0.0156%" height="15" fill="rgb(245,133,36)" fg:x="11762" fg:w="18"/><text x="10.4518%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (35 samples, 0.03%)</title><rect x="10.2174%" y="501" width="0.0304%" height="15" fill="rgb(212,6,19)" fg:x="11780" fg:w="35"/><text x="10.4674%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="10.2313%" y="485" width="0.0165%" height="15" fill="rgb(218,1,36)" fg:x="11796" fg:w="19"/><text x="10.4813%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.01%)</title><rect x="10.2504%" y="469" width="0.0104%" height="15" fill="rgb(246,84,54)" fg:x="11818" fg:w="12"/><text x="10.5004%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (12 samples, 0.01%)</title><rect x="10.2504%" y="453" width="0.0104%" height="15" fill="rgb(242,110,6)" fg:x="11818" fg:w="12"/><text x="10.5004%" y="463.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (12 samples, 0.01%)</title><rect x="10.2504%" y="437" width="0.0104%" height="15" fill="rgb(214,47,5)" fg:x="11818" fg:w="12"/><text x="10.5004%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (55 samples, 0.05%)</title><rect x="10.2174%" y="517" width="0.0477%" height="15" fill="rgb(218,159,25)" fg:x="11780" fg:w="55"/><text x="10.4674%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (17 samples, 0.01%)</title><rect x="10.2504%" y="501" width="0.0147%" height="15" fill="rgb(215,211,28)" fg:x="11818" fg:w="17"/><text x="10.5004%" y="511.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (17 samples, 0.01%)</title><rect x="10.2504%" y="485" width="0.0147%" height="15" fill="rgb(238,59,32)" fg:x="11818" fg:w="17"/><text x="10.5004%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (111 samples, 0.10%)</title><rect x="10.1966%" y="565" width="0.0963%" height="15" fill="rgb(226,82,3)" fg:x="11756" fg:w="111"/><text x="10.4466%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (111 samples, 0.10%)</title><rect x="10.1966%" y="549" width="0.0963%" height="15" fill="rgb(240,164,32)" fg:x="11756" fg:w="111"/><text x="10.4466%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (111 samples, 0.10%)</title><rect x="10.1966%" y="533" width="0.0963%" height="15" fill="rgb(232,46,7)" fg:x="11756" fg:w="111"/><text x="10.4466%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (12 samples, 0.01%)</title><rect x="10.2825%" y="517" width="0.0104%" height="15" fill="rgb(229,129,53)" fg:x="11855" fg:w="12"/><text x="10.5325%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="10.2825%" y="501" width="0.0104%" height="15" fill="rgb(234,188,29)" fg:x="11855" fg:w="12"/><text x="10.5325%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (251 samples, 0.22%)</title><rect x="10.0761%" y="677" width="0.2177%" height="15" fill="rgb(246,141,4)" fg:x="11617" fg:w="251"/><text x="10.3261%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (248 samples, 0.22%)</title><rect x="10.0787%" y="661" width="0.2151%" height="15" fill="rgb(229,23,39)" fg:x="11620" fg:w="248"/><text x="10.3287%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (245 samples, 0.21%)</title><rect x="10.0813%" y="645" width="0.2125%" height="15" fill="rgb(206,12,3)" fg:x="11623" fg:w="245"/><text x="10.3313%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (245 samples, 0.21%)</title><rect x="10.0813%" y="629" width="0.2125%" height="15" fill="rgb(252,226,20)" fg:x="11623" fg:w="245"/><text x="10.3313%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (238 samples, 0.21%)</title><rect x="10.0873%" y="613" width="0.2064%" height="15" fill="rgb(216,123,35)" fg:x="11630" fg:w="238"/><text x="10.3373%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (229 samples, 0.20%)</title><rect x="10.0951%" y="597" width="0.1986%" height="15" fill="rgb(212,68,40)" fg:x="11639" fg:w="229"/><text x="10.3451%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (228 samples, 0.20%)</title><rect x="10.0960%" y="581" width="0.1978%" height="15" fill="rgb(254,125,32)" fg:x="11640" fg:w="228"/><text x="10.3460%" y="591.50"></text></g><g><title>value_trait::ValueAccess::get_str (410 samples, 0.36%)</title><rect x="9.9425%" y="773" width="0.3556%" height="15" fill="rgb(253,97,22)" fg:x="11463" fg:w="410"/><text x="10.1925%" y="783.50"></text></g><g><title>value_trait::ValueAccess::get (407 samples, 0.35%)</title><rect x="9.9451%" y="757" width="0.3530%" height="15" fill="rgb(241,101,14)" fg:x="11466" fg:w="407"/><text x="10.1951%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (404 samples, 0.35%)</title><rect x="9.9477%" y="741" width="0.3504%" height="15" fill="rgb(238,103,29)" fg:x="11469" fg:w="404"/><text x="10.1977%" y="751.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (398 samples, 0.35%)</title><rect x="9.9529%" y="725" width="0.3452%" height="15" fill="rgb(233,195,47)" fg:x="11475" fg:w="398"/><text x="10.2029%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (398 samples, 0.35%)</title><rect x="9.9529%" y="709" width="0.3452%" height="15" fill="rgb(246,218,30)" fg:x="11475" fg:w="398"/><text x="10.2029%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (398 samples, 0.35%)</title><rect x="9.9529%" y="693" width="0.3452%" height="15" fill="rgb(219,145,47)" fg:x="11475" fg:w="398"/><text x="10.2029%" y="703.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (48 samples, 0.04%)</title><rect x="10.3198%" y="725" width="0.0416%" height="15" fill="rgb(243,12,26)" fg:x="11898" fg:w="48"/><text x="10.5698%" y="735.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (59 samples, 0.05%)</title><rect x="10.3137%" y="741" width="0.0512%" height="15" fill="rgb(214,87,16)" fg:x="11891" fg:w="59"/><text x="10.5637%" y="751.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,631 samples, 2.28%)</title><rect x="8.0838%" y="869" width="2.2820%" height="15" fill="rgb(208,99,42)" fg:x="9320" fg:w="2631"/><text x="8.3338%" y="879.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,631 samples, 2.28%)</title><rect x="8.0838%" y="853" width="2.2820%" height="15" fill="rgb(253,99,2)" fg:x="9320" fg:w="2631"/><text x="8.3338%" y="863.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,631 samples, 2.28%)</title><rect x="8.0838%" y="837" width="2.2820%" height="15" fill="rgb(220,168,23)" fg:x="9320" fg:w="2631"/><text x="8.3338%" y="847.50">t..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,631 samples, 2.28%)</title><rect x="8.0838%" y="821" width="2.2820%" height="15" fill="rgb(242,38,24)" fg:x="9320" fg:w="2631"/><text x="8.3338%" y="831.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,631 samples, 2.28%)</title><rect x="8.0838%" y="805" width="2.2820%" height="15" fill="rgb(225,182,9)" fg:x="9320" fg:w="2631"/><text x="8.3338%" y="815.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,631 samples, 2.28%)</title><rect x="8.0838%" y="789" width="2.2820%" height="15" fill="rgb(243,178,37)" fg:x="9320" fg:w="2631"/><text x="8.3338%" y="799.50">&lt;..</text></g><g><title>window::TimeWindow::inc_t (78 samples, 0.07%)</title><rect x="10.2981%" y="773" width="0.0677%" height="15" fill="rgb(232,139,19)" fg:x="11873" fg:w="78"/><text x="10.5481%" y="783.50"></text></g><g><title>window::TimeWindow::add_t (78 samples, 0.07%)</title><rect x="10.2981%" y="757" width="0.0677%" height="15" fill="rgb(225,201,24)" fg:x="11873" fg:w="78"/><text x="10.5481%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (19 samples, 0.02%)</title><rect x="10.3666%" y="853" width="0.0165%" height="15" fill="rgb(221,47,46)" fg:x="11952" fg:w="19"/><text x="10.6166%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="10.3666%" y="837" width="0.0165%" height="15" fill="rgb(249,23,13)" fg:x="11952" fg:w="19"/><text x="10.6166%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (86 samples, 0.07%)</title><rect x="10.3944%" y="821" width="0.0746%" height="15" fill="rgb(219,9,5)" fg:x="11984" fg:w="86"/><text x="10.6444%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.07%)</title><rect x="10.3996%" y="805" width="0.0694%" height="15" fill="rgb(254,171,16)" fg:x="11990" fg:w="80"/><text x="10.6496%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (80 samples, 0.07%)</title><rect x="10.3996%" y="789" width="0.0694%" height="15" fill="rgb(230,171,20)" fg:x="11990" fg:w="80"/><text x="10.6496%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.07%)</title><rect x="10.3996%" y="773" width="0.0694%" height="15" fill="rgb(210,71,41)" fg:x="11990" fg:w="80"/><text x="10.6496%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (80 samples, 0.07%)</title><rect x="10.3996%" y="757" width="0.0694%" height="15" fill="rgb(206,173,20)" fg:x="11990" fg:w="80"/><text x="10.6496%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (80 samples, 0.07%)</title><rect x="10.3996%" y="741" width="0.0694%" height="15" fill="rgb(233,88,34)" fg:x="11990" fg:w="80"/><text x="10.6496%" y="751.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="10.4239%" y="725" width="0.0451%" height="15" fill="rgb(223,209,46)" fg:x="12018" fg:w="52"/><text x="10.6739%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,351 samples, 4.64%)</title><rect x="5.8330%" y="1029" width="4.6412%" height="15" fill="rgb(250,43,18)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="1039.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,351 samples, 4.64%)</title><rect x="5.8330%" y="1013" width="4.6412%" height="15" fill="rgb(208,13,10)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="1023.50">&lt;asyn..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,351 samples, 4.64%)</title><rect x="5.8330%" y="997" width="4.6412%" height="15" fill="rgb(212,200,36)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="1007.50">async..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,351 samples, 4.64%)</title><rect x="5.8330%" y="981" width="4.6412%" height="15" fill="rgb(225,90,30)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="991.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,351 samples, 4.64%)</title><rect x="5.8330%" y="965" width="4.6412%" height="15" fill="rgb(236,182,39)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="975.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,351 samples, 4.64%)</title><rect x="5.8330%" y="949" width="4.6412%" height="15" fill="rgb(212,144,35)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="959.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,351 samples, 4.64%)</title><rect x="5.8330%" y="933" width="4.6412%" height="15" fill="rgb(228,63,44)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="943.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,351 samples, 4.64%)</title><rect x="5.8330%" y="917" width="4.6412%" height="15" fill="rgb(228,109,6)" fg:x="6725" fg:w="5351"/><text x="6.0830%" y="927.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,232 samples, 2.80%)</title><rect x="7.6709%" y="901" width="2.8033%" height="15" fill="rgb(238,117,24)" fg:x="8844" fg:w="3232"/><text x="7.9209%" y="911.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,756 samples, 2.39%)</title><rect x="8.0838%" y="885" width="2.3904%" height="15" fill="rgb(242,26,26)" fg:x="9320" fg:w="2756"/><text x="8.3338%" y="895.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (125 samples, 0.11%)</title><rect x="10.3658%" y="869" width="0.1084%" height="15" fill="rgb(221,92,48)" fg:x="11951" fg:w="125"/><text x="10.6158%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (105 samples, 0.09%)</title><rect x="10.3831%" y="853" width="0.0911%" height="15" fill="rgb(209,209,32)" fg:x="11971" fg:w="105"/><text x="10.6331%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (95 samples, 0.08%)</title><rect x="10.3918%" y="837" width="0.0824%" height="15" fill="rgb(221,70,22)" fg:x="11981" fg:w="95"/><text x="10.6418%" y="847.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (36 samples, 0.03%)</title><rect x="10.5141%" y="677" width="0.0312%" height="15" fill="rgb(248,145,5)" fg:x="12122" fg:w="36"/><text x="10.7641%" y="687.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (70 samples, 0.06%)</title><rect x="10.4881%" y="837" width="0.0607%" height="15" fill="rgb(226,116,26)" fg:x="12092" fg:w="70"/><text x="10.7381%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (70 samples, 0.06%)</title><rect x="10.4881%" y="821" width="0.0607%" height="15" fill="rgb(244,5,17)" fg:x="12092" fg:w="70"/><text x="10.7381%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (64 samples, 0.06%)</title><rect x="10.4933%" y="805" width="0.0555%" height="15" fill="rgb(252,159,33)" fg:x="12098" fg:w="64"/><text x="10.7433%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (55 samples, 0.05%)</title><rect x="10.5011%" y="789" width="0.0477%" height="15" fill="rgb(206,71,0)" fg:x="12107" fg:w="55"/><text x="10.7511%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.05%)</title><rect x="10.5011%" y="773" width="0.0477%" height="15" fill="rgb(233,118,54)" fg:x="12107" fg:w="55"/><text x="10.7511%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.05%)</title><rect x="10.5011%" y="757" width="0.0477%" height="15" fill="rgb(234,83,48)" fg:x="12107" fg:w="55"/><text x="10.7511%" y="767.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.05%)</title><rect x="10.5011%" y="741" width="0.0477%" height="15" fill="rgb(228,3,54)" fg:x="12107" fg:w="55"/><text x="10.7511%" y="751.50"></text></g><g><title>__rg_alloc (55 samples, 0.05%)</title><rect x="10.5011%" y="725" width="0.0477%" height="15" fill="rgb(226,155,13)" fg:x="12107" fg:w="55"/><text x="10.7511%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.05%)</title><rect x="10.5011%" y="709" width="0.0477%" height="15" fill="rgb(241,28,37)" fg:x="12107" fg:w="55"/><text x="10.7511%" y="719.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.05%)</title><rect x="10.5011%" y="693" width="0.0477%" height="15" fill="rgb(233,93,10)" fg:x="12107" fg:w="55"/><text x="10.7511%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (86 samples, 0.07%)</title><rect x="10.4803%" y="901" width="0.0746%" height="15" fill="rgb(225,113,19)" fg:x="12083" fg:w="86"/><text x="10.7303%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (86 samples, 0.07%)</title><rect x="10.4803%" y="885" width="0.0746%" height="15" fill="rgb(241,2,18)" fg:x="12083" fg:w="86"/><text x="10.7303%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (86 samples, 0.07%)</title><rect x="10.4803%" y="869" width="0.0746%" height="15" fill="rgb(228,207,21)" fg:x="12083" fg:w="86"/><text x="10.7303%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (86 samples, 0.07%)</title><rect x="10.4803%" y="853" width="0.0746%" height="15" fill="rgb(213,211,35)" fg:x="12083" fg:w="86"/><text x="10.7303%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (117 samples, 0.10%)</title><rect x="10.6416%" y="613" width="0.1015%" height="15" fill="rgb(209,83,10)" fg:x="12269" fg:w="117"/><text x="10.8916%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (181 samples, 0.16%)</title><rect x="10.5913%" y="773" width="0.1570%" height="15" fill="rgb(209,164,1)" fg:x="12211" fg:w="181"/><text x="10.8413%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (181 samples, 0.16%)</title><rect x="10.5913%" y="757" width="0.1570%" height="15" fill="rgb(213,184,43)" fg:x="12211" fg:w="181"/><text x="10.8413%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (175 samples, 0.15%)</title><rect x="10.5965%" y="741" width="0.1518%" height="15" fill="rgb(231,61,34)" fg:x="12217" fg:w="175"/><text x="10.8465%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (160 samples, 0.14%)</title><rect x="10.6095%" y="725" width="0.1388%" height="15" fill="rgb(235,75,3)" fg:x="12232" fg:w="160"/><text x="10.8595%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (160 samples, 0.14%)</title><rect x="10.6095%" y="709" width="0.1388%" height="15" fill="rgb(220,106,47)" fg:x="12232" fg:w="160"/><text x="10.8595%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (160 samples, 0.14%)</title><rect x="10.6095%" y="693" width="0.1388%" height="15" fill="rgb(210,196,33)" fg:x="12232" fg:w="160"/><text x="10.8595%" y="703.50"></text></g><g><title>alloc::alloc::alloc (159 samples, 0.14%)</title><rect x="10.6104%" y="677" width="0.1379%" height="15" fill="rgb(229,154,42)" fg:x="12233" fg:w="159"/><text x="10.8604%" y="687.50"></text></g><g><title>__rg_alloc (159 samples, 0.14%)</title><rect x="10.6104%" y="661" width="0.1379%" height="15" fill="rgb(228,114,26)" fg:x="12233" fg:w="159"/><text x="10.8604%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (159 samples, 0.14%)</title><rect x="10.6104%" y="645" width="0.1379%" height="15" fill="rgb(208,144,1)" fg:x="12233" fg:w="159"/><text x="10.8604%" y="655.50"></text></g><g><title>sn_rust_alloc (159 samples, 0.14%)</title><rect x="10.6104%" y="629" width="0.1379%" height="15" fill="rgb(239,112,37)" fg:x="12233" fg:w="159"/><text x="10.8604%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (210 samples, 0.18%)</title><rect x="10.5809%" y="821" width="0.1821%" height="15" fill="rgb(210,96,50)" fg:x="12199" fg:w="210"/><text x="10.8309%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (210 samples, 0.18%)</title><rect x="10.5809%" y="805" width="0.1821%" height="15" fill="rgb(222,178,2)" fg:x="12199" fg:w="210"/><text x="10.8309%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (210 samples, 0.18%)</title><rect x="10.5809%" y="789" width="0.1821%" height="15" fill="rgb(226,74,18)" fg:x="12199" fg:w="210"/><text x="10.8309%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="10.7483%" y="773" width="0.0147%" height="15" fill="rgb(225,67,54)" fg:x="12392" fg:w="17"/><text x="10.9983%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (221 samples, 0.19%)</title><rect x="10.5809%" y="837" width="0.1917%" height="15" fill="rgb(251,92,32)" fg:x="12199" fg:w="221"/><text x="10.8309%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (676 samples, 0.59%)</title><rect x="10.4803%" y="917" width="0.5863%" height="15" fill="rgb(228,149,22)" fg:x="12083" fg:w="676"/><text x="10.7303%" y="927.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (590 samples, 0.51%)</title><rect x="10.5548%" y="901" width="0.5117%" height="15" fill="rgb(243,54,13)" fg:x="12169" fg:w="590"/><text x="10.8048%" y="911.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (590 samples, 0.51%)</title><rect x="10.5548%" y="885" width="0.5117%" height="15" fill="rgb(243,180,28)" fg:x="12169" fg:w="590"/><text x="10.8048%" y="895.50"></text></g><g><title>value_trait::Builder::object (560 samples, 0.49%)</title><rect x="10.5809%" y="869" width="0.4857%" height="15" fill="rgb(208,167,24)" fg:x="12199" fg:w="560"/><text x="10.8309%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (560 samples, 0.49%)</title><rect x="10.5809%" y="853" width="0.4857%" height="15" fill="rgb(245,73,45)" fg:x="12199" fg:w="560"/><text x="10.8309%" y="863.50"></text></g><g><title>tremor_value::value::Value::Object (339 samples, 0.29%)</title><rect x="10.7726%" y="837" width="0.2940%" height="15" fill="rgb(237,203,48)" fg:x="12420" fg:w="339"/><text x="11.0226%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="11.0666%" y="901" width="0.0113%" height="15" fill="rgb(211,197,16)" fg:x="12759" fg:w="13"/><text x="11.3166%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (711 samples, 0.62%)</title><rect x="10.4803%" y="933" width="0.6167%" height="15" fill="rgb(243,99,51)" fg:x="12083" fg:w="711"/><text x="10.7303%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (35 samples, 0.03%)</title><rect x="11.0666%" y="917" width="0.0304%" height="15" fill="rgb(215,123,29)" fg:x="12759" fg:w="35"/><text x="11.3166%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (13 samples, 0.01%)</title><rect x="11.0857%" y="901" width="0.0113%" height="15" fill="rgb(239,186,37)" fg:x="12781" fg:w="13"/><text x="11.3357%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (13 samples, 0.01%)</title><rect x="11.0857%" y="885" width="0.0113%" height="15" fill="rgb(252,136,39)" fg:x="12781" fg:w="13"/><text x="11.3357%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="11.0857%" y="869" width="0.0113%" height="15" fill="rgb(223,213,32)" fg:x="12781" fg:w="13"/><text x="11.3357%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="11.0857%" y="853" width="0.0113%" height="15" fill="rgb(233,115,5)" fg:x="12781" fg:w="13"/><text x="11.3357%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="11.0857%" y="837" width="0.0113%" height="15" fill="rgb(207,226,44)" fg:x="12781" fg:w="13"/><text x="11.3357%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="11.0857%" y="821" width="0.0113%" height="15" fill="rgb(208,126,0)" fg:x="12781" fg:w="13"/><text x="11.3357%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (38 samples, 0.03%)</title><rect x="11.1767%" y="917" width="0.0330%" height="15" fill="rgb(244,66,21)" fg:x="12886" fg:w="38"/><text x="11.4267%" y="927.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (34 samples, 0.03%)</title><rect x="11.2097%" y="917" width="0.0295%" height="15" fill="rgb(222,97,12)" fg:x="12924" fg:w="34"/><text x="11.4597%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="11.2097%" y="901" width="0.0295%" height="15" fill="rgb(219,213,19)" fg:x="12924" fg:w="34"/><text x="11.4597%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="11.2158%" y="885" width="0.0234%" height="15" fill="rgb(252,169,30)" fg:x="12931" fg:w="27"/><text x="11.4658%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="11.2158%" y="869" width="0.0234%" height="15" fill="rgb(206,32,51)" fg:x="12931" fg:w="27"/><text x="11.4658%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="11.2158%" y="853" width="0.0234%" height="15" fill="rgb(250,172,42)" fg:x="12931" fg:w="27"/><text x="11.4658%" y="863.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="11.2166%" y="837" width="0.0226%" height="15" fill="rgb(209,34,43)" fg:x="12932" fg:w="26"/><text x="11.4666%" y="847.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="11.2166%" y="821" width="0.0226%" height="15" fill="rgb(223,11,35)" fg:x="12932" fg:w="26"/><text x="11.4666%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="11.2166%" y="805" width="0.0226%" height="15" fill="rgb(251,219,26)" fg:x="12932" fg:w="26"/><text x="11.4666%" y="815.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="11.2227%" y="789" width="0.0165%" height="15" fill="rgb(231,119,3)" fg:x="12939" fg:w="19"/><text x="11.4727%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="11.2279%" y="773" width="0.0113%" height="15" fill="rgb(216,97,11)" fg:x="12945" fg:w="13"/><text x="11.4779%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="11.2392%" y="917" width="0.0147%" height="15" fill="rgb(223,59,9)" fg:x="12958" fg:w="17"/><text x="11.4892%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="11.2392%" y="901" width="0.0147%" height="15" fill="rgb(233,93,31)" fg:x="12958" fg:w="17"/><text x="11.4892%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="11.2392%" y="885" width="0.0147%" height="15" fill="rgb(239,81,33)" fg:x="12958" fg:w="17"/><text x="11.4892%" y="895.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="11.2409%" y="869" width="0.0130%" height="15" fill="rgb(213,120,34)" fg:x="12960" fg:w="15"/><text x="11.4909%" y="879.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="11.2409%" y="853" width="0.0130%" height="15" fill="rgb(243,49,53)" fg:x="12960" fg:w="15"/><text x="11.4909%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="11.2409%" y="837" width="0.0130%" height="15" fill="rgb(247,216,33)" fg:x="12960" fg:w="15"/><text x="11.4909%" y="847.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="11.5011%" y="725" width="0.0104%" height="15" fill="rgb(226,26,14)" fg:x="13260" fg:w="12"/><text x="11.7511%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.04%)</title><rect x="11.4977%" y="789" width="0.0356%" height="15" fill="rgb(215,49,53)" fg:x="13256" fg:w="41"/><text x="11.7477%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.04%)</title><rect x="11.4977%" y="773" width="0.0356%" height="15" fill="rgb(245,162,40)" fg:x="13256" fg:w="41"/><text x="11.7477%" y="783.50"></text></g><g><title>__rg_dealloc (41 samples, 0.04%)</title><rect x="11.4977%" y="757" width="0.0356%" height="15" fill="rgb(229,68,17)" fg:x="13256" fg:w="41"/><text x="11.7477%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (41 samples, 0.04%)</title><rect x="11.4977%" y="741" width="0.0356%" height="15" fill="rgb(213,182,10)" fg:x="13256" fg:w="41"/><text x="11.7477%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (25 samples, 0.02%)</title><rect x="11.5115%" y="725" width="0.0217%" height="15" fill="rgb(245,125,30)" fg:x="13272" fg:w="25"/><text x="11.7615%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (43 samples, 0.04%)</title><rect x="11.4977%" y="869" width="0.0373%" height="15" fill="rgb(232,202,2)" fg:x="13256" fg:w="43"/><text x="11.7477%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (43 samples, 0.04%)</title><rect x="11.4977%" y="853" width="0.0373%" height="15" fill="rgb(237,140,51)" fg:x="13256" fg:w="43"/><text x="11.7477%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (43 samples, 0.04%)</title><rect x="11.4977%" y="837" width="0.0373%" height="15" fill="rgb(236,157,25)" fg:x="13256" fg:w="43"/><text x="11.7477%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (43 samples, 0.04%)</title><rect x="11.4977%" y="821" width="0.0373%" height="15" fill="rgb(219,209,0)" fg:x="13256" fg:w="43"/><text x="11.7477%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="11.4977%" y="805" width="0.0373%" height="15" fill="rgb(240,116,54)" fg:x="13256" fg:w="43"/><text x="11.7477%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (119 samples, 0.10%)</title><rect x="11.5714%" y="853" width="0.1032%" height="15" fill="rgb(216,10,36)" fg:x="13341" fg:w="119"/><text x="11.8214%" y="863.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (119 samples, 0.10%)</title><rect x="11.5714%" y="837" width="0.1032%" height="15" fill="rgb(222,72,44)" fg:x="13341" fg:w="119"/><text x="11.8214%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (119 samples, 0.10%)</title><rect x="11.5714%" y="821" width="0.1032%" height="15" fill="rgb(232,159,9)" fg:x="13341" fg:w="119"/><text x="11.8214%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.10%)</title><rect x="11.5714%" y="805" width="0.1032%" height="15" fill="rgb(210,39,32)" fg:x="13341" fg:w="119"/><text x="11.8214%" y="815.50"></text></g><g><title>[libc-2.31.so] (115 samples, 0.10%)</title><rect x="11.5749%" y="789" width="0.0997%" height="15" fill="rgb(216,194,45)" fg:x="13345" fg:w="115"/><text x="11.8249%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (23 samples, 0.02%)</title><rect x="11.8932%" y="821" width="0.0199%" height="15" fill="rgb(218,18,35)" fg:x="13712" fg:w="23"/><text x="12.1432%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (22 samples, 0.02%)</title><rect x="11.9131%" y="821" width="0.0191%" height="15" fill="rgb(207,83,51)" fg:x="13735" fg:w="22"/><text x="12.1631%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (68 samples, 0.06%)</title><rect x="11.9322%" y="821" width="0.0590%" height="15" fill="rgb(225,63,43)" fg:x="13757" fg:w="68"/><text x="12.1822%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (51 samples, 0.04%)</title><rect x="11.9912%" y="821" width="0.0442%" height="15" fill="rgb(207,57,36)" fg:x="13825" fg:w="51"/><text x="12.2412%" y="831.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (221 samples, 0.19%)</title><rect x="11.8559%" y="837" width="0.1917%" height="15" fill="rgb(216,99,33)" fg:x="13669" fg:w="221"/><text x="12.1059%" y="847.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (14 samples, 0.01%)</title><rect x="12.0354%" y="821" width="0.0121%" height="15" fill="rgb(225,42,16)" fg:x="13876" fg:w="14"/><text x="12.2854%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.01%)</title><rect x="12.4457%" y="757" width="0.0104%" height="15" fill="rgb(220,201,45)" fg:x="14349" fg:w="12"/><text x="12.6957%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (63 samples, 0.05%)</title><rect x="12.4119%" y="821" width="0.0546%" height="15" fill="rgb(225,33,4)" fg:x="14310" fg:w="63"/><text x="12.6619%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (63 samples, 0.05%)</title><rect x="12.4119%" y="805" width="0.0546%" height="15" fill="rgb(224,33,50)" fg:x="14310" fg:w="63"/><text x="12.6619%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (38 samples, 0.03%)</title><rect x="12.4335%" y="789" width="0.0330%" height="15" fill="rgb(246,198,51)" fg:x="14335" fg:w="38"/><text x="12.6835%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (38 samples, 0.03%)</title><rect x="12.4335%" y="773" width="0.0330%" height="15" fill="rgb(205,22,4)" fg:x="14335" fg:w="38"/><text x="12.6835%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (19 samples, 0.02%)</title><rect x="12.4682%" y="821" width="0.0165%" height="15" fill="rgb(206,3,8)" fg:x="14375" fg:w="19"/><text x="12.7182%" y="831.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (209 samples, 0.18%)</title><rect x="12.4847%" y="821" width="0.1813%" height="15" fill="rgb(251,23,15)" fg:x="14394" fg:w="209"/><text x="12.7347%" y="831.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (209 samples, 0.18%)</title><rect x="12.4847%" y="805" width="0.1813%" height="15" fill="rgb(252,88,28)" fg:x="14394" fg:w="209"/><text x="12.7347%" y="815.50"></text></g><g><title>core::core_arch::simd::i32x8::new (209 samples, 0.18%)</title><rect x="12.4847%" y="789" width="0.1813%" height="15" fill="rgb(212,127,14)" fg:x="14394" fg:w="209"/><text x="12.7347%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (17 samples, 0.01%)</title><rect x="12.6660%" y="821" width="0.0147%" height="15" fill="rgb(247,145,37)" fg:x="14603" fg:w="17"/><text x="12.9160%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (167 samples, 0.14%)</title><rect x="12.6807%" y="821" width="0.1448%" height="15" fill="rgb(209,117,53)" fg:x="14620" fg:w="167"/><text x="12.9307%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (141 samples, 0.12%)</title><rect x="12.8256%" y="821" width="0.1223%" height="15" fill="rgb(212,90,42)" fg:x="14787" fg:w="141"/><text x="13.0756%" y="831.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (1,118 samples, 0.97%)</title><rect x="12.0476%" y="837" width="0.9697%" height="15" fill="rgb(218,164,37)" fg:x="13890" fg:w="1118"/><text x="12.2976%" y="847.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (80 samples, 0.07%)</title><rect x="12.9479%" y="821" width="0.0694%" height="15" fill="rgb(246,65,34)" fg:x="14928" fg:w="80"/><text x="13.1979%" y="831.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (32 samples, 0.03%)</title><rect x="13.0390%" y="789" width="0.0278%" height="15" fill="rgb(231,100,33)" fg:x="15033" fg:w="32"/><text x="13.2890%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (75 samples, 0.07%)</title><rect x="13.0207%" y="821" width="0.0651%" height="15" fill="rgb(228,126,14)" fg:x="15012" fg:w="75"/><text x="13.2707%" y="831.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (54 samples, 0.05%)</title><rect x="13.0390%" y="805" width="0.0468%" height="15" fill="rgb(215,173,21)" fg:x="15033" fg:w="54"/><text x="13.2890%" y="815.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (22 samples, 0.02%)</title><rect x="13.0667%" y="789" width="0.0191%" height="15" fill="rgb(210,6,40)" fg:x="15065" fg:w="22"/><text x="13.3167%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (22 samples, 0.02%)</title><rect x="13.0667%" y="773" width="0.0191%" height="15" fill="rgb(212,48,18)" fg:x="15065" fg:w="22"/><text x="13.3167%" y="783.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (146 samples, 0.13%)</title><rect x="13.0207%" y="837" width="0.1266%" height="15" fill="rgb(230,214,11)" fg:x="15012" fg:w="146"/><text x="13.2707%" y="847.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (71 samples, 0.06%)</title><rect x="13.0858%" y="821" width="0.0616%" height="15" fill="rgb(254,105,39)" fg:x="15087" fg:w="71"/><text x="13.3358%" y="831.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (71 samples, 0.06%)</title><rect x="13.0858%" y="805" width="0.0616%" height="15" fill="rgb(245,158,5)" fg:x="15087" fg:w="71"/><text x="13.3358%" y="815.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (71 samples, 0.06%)</title><rect x="13.0858%" y="789" width="0.0616%" height="15" fill="rgb(249,208,11)" fg:x="15087" fg:w="71"/><text x="13.3358%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.06%)</title><rect x="13.0858%" y="773" width="0.0616%" height="15" fill="rgb(210,39,28)" fg:x="15087" fg:w="71"/><text x="13.3358%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (149 samples, 0.13%)</title><rect x="13.2324%" y="677" width="0.1292%" height="15" fill="rgb(211,56,53)" fg:x="15256" fg:w="149"/><text x="13.4824%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (246 samples, 0.21%)</title><rect x="13.1517%" y="837" width="0.2134%" height="15" fill="rgb(226,201,30)" fg:x="15163" fg:w="246"/><text x="13.4017%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (246 samples, 0.21%)</title><rect x="13.1517%" y="821" width="0.2134%" height="15" fill="rgb(239,101,34)" fg:x="15163" fg:w="246"/><text x="13.4017%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (240 samples, 0.21%)</title><rect x="13.1569%" y="805" width="0.2082%" height="15" fill="rgb(226,209,5)" fg:x="15169" fg:w="240"/><text x="13.4069%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (240 samples, 0.21%)</title><rect x="13.1569%" y="789" width="0.2082%" height="15" fill="rgb(250,105,47)" fg:x="15169" fg:w="240"/><text x="13.4069%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (240 samples, 0.21%)</title><rect x="13.1569%" y="773" width="0.2082%" height="15" fill="rgb(230,72,3)" fg:x="15169" fg:w="240"/><text x="13.4069%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (240 samples, 0.21%)</title><rect x="13.1569%" y="757" width="0.2082%" height="15" fill="rgb(232,218,39)" fg:x="15169" fg:w="240"/><text x="13.4069%" y="767.50"></text></g><g><title>alloc::alloc::alloc (239 samples, 0.21%)</title><rect x="13.1578%" y="741" width="0.2073%" height="15" fill="rgb(248,166,6)" fg:x="15170" fg:w="239"/><text x="13.4078%" y="751.50"></text></g><g><title>__rg_alloc (239 samples, 0.21%)</title><rect x="13.1578%" y="725" width="0.2073%" height="15" fill="rgb(247,89,20)" fg:x="15170" fg:w="239"/><text x="13.4078%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (239 samples, 0.21%)</title><rect x="13.1578%" y="709" width="0.2073%" height="15" fill="rgb(248,130,54)" fg:x="15170" fg:w="239"/><text x="13.4078%" y="719.50"></text></g><g><title>sn_rust_alloc (237 samples, 0.21%)</title><rect x="13.1595%" y="693" width="0.2056%" height="15" fill="rgb(234,196,4)" fg:x="15172" fg:w="237"/><text x="13.4095%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (41 samples, 0.04%)</title><rect x="13.3651%" y="837" width="0.0356%" height="15" fill="rgb(250,143,31)" fg:x="15409" fg:w="41"/><text x="13.6151%" y="847.50"></text></g><g><title>core::intrinsics::copy (41 samples, 0.04%)</title><rect x="13.3651%" y="821" width="0.0356%" height="15" fill="rgb(211,110,34)" fg:x="15409" fg:w="41"/><text x="13.6151%" y="831.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.03%)</title><rect x="13.3746%" y="805" width="0.0260%" height="15" fill="rgb(215,124,48)" fg:x="15420" fg:w="30"/><text x="13.6246%" y="815.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (138 samples, 0.12%)</title><rect x="13.4006%" y="837" width="0.1197%" height="15" fill="rgb(216,46,13)" fg:x="15450" fg:w="138"/><text x="13.6506%" y="847.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (58 samples, 0.05%)</title><rect x="13.6262%" y="821" width="0.0503%" height="15" fill="rgb(205,184,25)" fg:x="15710" fg:w="58"/><text x="13.8762%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (34 samples, 0.03%)</title><rect x="13.6470%" y="805" width="0.0295%" height="15" fill="rgb(228,1,10)" fg:x="15734" fg:w="34"/><text x="13.8970%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (18 samples, 0.02%)</title><rect x="13.6765%" y="821" width="0.0156%" height="15" fill="rgb(213,116,27)" fg:x="15768" fg:w="18"/><text x="13.9265%" y="831.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (207 samples, 0.18%)</title><rect x="13.5203%" y="837" width="0.1795%" height="15" fill="rgb(241,95,50)" fg:x="15588" fg:w="207"/><text x="13.7703%" y="847.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (52 samples, 0.05%)</title><rect x="13.8083%" y="821" width="0.0451%" height="15" fill="rgb(238,48,32)" fg:x="15920" fg:w="52"/><text x="14.0583%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (36 samples, 0.03%)</title><rect x="13.8222%" y="805" width="0.0312%" height="15" fill="rgb(235,113,49)" fg:x="15936" fg:w="36"/><text x="14.0722%" y="815.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (123 samples, 0.11%)</title><rect x="13.9158%" y="805" width="0.1067%" height="15" fill="rgb(205,127,43)" fg:x="16044" fg:w="123"/><text x="14.1658%" y="815.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (2,712 samples, 2.35%)</title><rect x="11.6781%" y="853" width="2.3523%" height="15" fill="rgb(250,162,2)" fg:x="13464" fg:w="2712"/><text x="11.9281%" y="863.50">s..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (381 samples, 0.33%)</title><rect x="13.6999%" y="837" width="0.3305%" height="15" fill="rgb(220,13,41)" fg:x="15795" fg:w="381"/><text x="13.9499%" y="847.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (204 samples, 0.18%)</title><rect x="13.8534%" y="821" width="0.1769%" height="15" fill="rgb(249,221,25)" fg:x="15972" fg:w="204"/><text x="14.1034%" y="831.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="14.0329%" y="853" width="0.0382%" height="15" fill="rgb(215,208,19)" fg:x="16179" fg:w="44"/><text x="14.2829%" y="863.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (2,930 samples, 2.54%)</title><rect x="11.5350%" y="869" width="2.5414%" height="15" fill="rgb(236,175,2)" fg:x="13299" fg:w="2930"/><text x="11.7850%" y="879.50">si..</text></g><g><title>simd_json::Deserializer::next_ (58 samples, 0.05%)</title><rect x="14.0780%" y="853" width="0.0503%" height="15" fill="rgb(241,52,2)" fg:x="16231" fg:w="58"/><text x="14.3280%" y="863.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (42 samples, 0.04%)</title><rect x="14.1639%" y="837" width="0.0364%" height="15" fill="rgb(248,140,14)" fg:x="16330" fg:w="42"/><text x="14.4139%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (42 samples, 0.04%)</title><rect x="14.1639%" y="821" width="0.0364%" height="15" fill="rgb(253,22,42)" fg:x="16330" fg:w="42"/><text x="14.4139%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (30 samples, 0.03%)</title><rect x="17.0106%" y="805" width="0.0260%" height="15" fill="rgb(234,61,47)" fg:x="19612" fg:w="30"/><text x="17.2606%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (3,307 samples, 2.87%)</title><rect x="14.2003%" y="837" width="2.8683%" height="15" fill="rgb(208,226,15)" fg:x="16372" fg:w="3307"/><text x="14.4503%" y="847.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (1,284 samples, 1.11%)</title><rect x="15.9550%" y="821" width="1.1137%" height="15" fill="rgb(217,221,4)" fg:x="18395" fg:w="1284"/><text x="16.2050%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (37 samples, 0.03%)</title><rect x="17.0366%" y="805" width="0.0321%" height="15" fill="rgb(212,174,34)" fg:x="19642" fg:w="37"/><text x="17.2866%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (51 samples, 0.04%)</title><rect x="17.1346%" y="613" width="0.0442%" height="15" fill="rgb(253,83,4)" fg:x="19755" fg:w="51"/><text x="17.3846%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (124 samples, 0.11%)</title><rect x="17.0739%" y="773" width="0.1076%" height="15" fill="rgb(250,195,49)" fg:x="19685" fg:w="124"/><text x="17.3239%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (124 samples, 0.11%)</title><rect x="17.0739%" y="757" width="0.1076%" height="15" fill="rgb(241,192,25)" fg:x="19685" fg:w="124"/><text x="17.3239%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (110 samples, 0.10%)</title><rect x="17.0860%" y="741" width="0.0954%" height="15" fill="rgb(208,124,10)" fg:x="19699" fg:w="110"/><text x="17.3360%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (102 samples, 0.09%)</title><rect x="17.0930%" y="725" width="0.0885%" height="15" fill="rgb(222,33,0)" fg:x="19707" fg:w="102"/><text x="17.3430%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (102 samples, 0.09%)</title><rect x="17.0930%" y="709" width="0.0885%" height="15" fill="rgb(234,209,28)" fg:x="19707" fg:w="102"/><text x="17.3430%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (102 samples, 0.09%)</title><rect x="17.0930%" y="693" width="0.0885%" height="15" fill="rgb(224,11,23)" fg:x="19707" fg:w="102"/><text x="17.3430%" y="703.50"></text></g><g><title>alloc::alloc::alloc (101 samples, 0.09%)</title><rect x="17.0938%" y="677" width="0.0876%" height="15" fill="rgb(232,99,1)" fg:x="19708" fg:w="101"/><text x="17.3438%" y="687.50"></text></g><g><title>__rg_alloc (101 samples, 0.09%)</title><rect x="17.0938%" y="661" width="0.0876%" height="15" fill="rgb(237,95,45)" fg:x="19708" fg:w="101"/><text x="17.3438%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (101 samples, 0.09%)</title><rect x="17.0938%" y="645" width="0.0876%" height="15" fill="rgb(208,109,11)" fg:x="19708" fg:w="101"/><text x="17.3438%" y="655.50"></text></g><g><title>sn_rust_alloc (99 samples, 0.09%)</title><rect x="17.0956%" y="629" width="0.0859%" height="15" fill="rgb(216,190,48)" fg:x="19710" fg:w="99"/><text x="17.3456%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (137 samples, 0.12%)</title><rect x="17.0687%" y="821" width="0.1188%" height="15" fill="rgb(251,171,36)" fg:x="19679" fg:w="137"/><text x="17.3187%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (137 samples, 0.12%)</title><rect x="17.0687%" y="805" width="0.1188%" height="15" fill="rgb(230,62,22)" fg:x="19679" fg:w="137"/><text x="17.3187%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (137 samples, 0.12%)</title><rect x="17.0687%" y="789" width="0.1188%" height="15" fill="rgb(225,114,35)" fg:x="19679" fg:w="137"/><text x="17.3187%" y="799.50"></text></g><g><title>core::mem::swap (216 samples, 0.19%)</title><rect x="17.2153%" y="645" width="0.1873%" height="15" fill="rgb(215,118,42)" fg:x="19848" fg:w="216"/><text x="17.4653%" y="655.50"></text></g><g><title>core::mem::swap_simple (216 samples, 0.19%)</title><rect x="17.2153%" y="629" width="0.1873%" height="15" fill="rgb(243,119,21)" fg:x="19848" fg:w="216"/><text x="17.4653%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (234 samples, 0.20%)</title><rect x="17.2057%" y="661" width="0.2030%" height="15" fill="rgb(252,177,53)" fg:x="19837" fg:w="234"/><text x="17.4557%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (394 samples, 0.34%)</title><rect x="17.0687%" y="837" width="0.3417%" height="15" fill="rgb(237,209,29)" fg:x="19679" fg:w="394"/><text x="17.3187%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (257 samples, 0.22%)</title><rect x="17.1875%" y="821" width="0.2229%" height="15" fill="rgb(212,65,23)" fg:x="19816" fg:w="257"/><text x="17.4375%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (252 samples, 0.22%)</title><rect x="17.1919%" y="805" width="0.2186%" height="15" fill="rgb(230,222,46)" fg:x="19821" fg:w="252"/><text x="17.4419%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (252 samples, 0.22%)</title><rect x="17.1919%" y="789" width="0.2186%" height="15" fill="rgb(215,135,32)" fg:x="19821" fg:w="252"/><text x="17.4419%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (252 samples, 0.22%)</title><rect x="17.1919%" y="773" width="0.2186%" height="15" fill="rgb(246,101,22)" fg:x="19821" fg:w="252"/><text x="17.4419%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (252 samples, 0.22%)</title><rect x="17.1919%" y="757" width="0.2186%" height="15" fill="rgb(206,107,13)" fg:x="19821" fg:w="252"/><text x="17.4419%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (252 samples, 0.22%)</title><rect x="17.1919%" y="741" width="0.2186%" height="15" fill="rgb(250,100,44)" fg:x="19821" fg:w="252"/><text x="17.4419%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (245 samples, 0.21%)</title><rect x="17.1979%" y="725" width="0.2125%" height="15" fill="rgb(231,147,38)" fg:x="19828" fg:w="245"/><text x="17.4479%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (245 samples, 0.21%)</title><rect x="17.1979%" y="709" width="0.2125%" height="15" fill="rgb(229,8,40)" fg:x="19828" fg:w="245"/><text x="17.4479%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (245 samples, 0.21%)</title><rect x="17.1979%" y="693" width="0.2125%" height="15" fill="rgb(221,135,30)" fg:x="19828" fg:w="245"/><text x="17.4479%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (242 samples, 0.21%)</title><rect x="17.2005%" y="677" width="0.2099%" height="15" fill="rgb(249,193,18)" fg:x="19831" fg:w="242"/><text x="17.4505%" y="687.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (27 samples, 0.02%)</title><rect x="17.4104%" y="837" width="0.0234%" height="15" fill="rgb(209,133,39)" fg:x="20073" fg:w="27"/><text x="17.6604%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (27 samples, 0.02%)</title><rect x="17.4104%" y="821" width="0.0234%" height="15" fill="rgb(232,100,14)" fg:x="20073" fg:w="27"/><text x="17.6604%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (23 samples, 0.02%)</title><rect x="17.4139%" y="805" width="0.0199%" height="15" fill="rgb(224,185,1)" fg:x="20077" fg:w="23"/><text x="17.6639%" y="815.50"></text></g><g><title>simd_json::Deserializer::next_ (91 samples, 0.08%)</title><rect x="17.4338%" y="837" width="0.0789%" height="15" fill="rgb(223,139,8)" fg:x="20100" fg:w="91"/><text x="17.6838%" y="847.50"></text></g><g><title>simd_json::Deserializer::next_ (111 samples, 0.10%)</title><rect x="17.5718%" y="821" width="0.0963%" height="15" fill="rgb(232,213,38)" fg:x="20259" fg:w="111"/><text x="17.8218%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (21 samples, 0.02%)</title><rect x="17.7227%" y="805" width="0.0182%" height="15" fill="rgb(207,94,22)" fg:x="20433" fg:w="21"/><text x="17.9727%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.01%)</title><rect x="17.7279%" y="789" width="0.0130%" height="15" fill="rgb(219,183,54)" fg:x="20439" fg:w="15"/><text x="17.9779%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="17.7279%" y="773" width="0.0130%" height="15" fill="rgb(216,185,54)" fg:x="20439" fg:w="15"/><text x="17.9779%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="17.7279%" y="757" width="0.0130%" height="15" fill="rgb(254,217,39)" fg:x="20439" fg:w="15"/><text x="17.9779%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="17.7279%" y="741" width="0.0130%" height="15" fill="rgb(240,178,23)" fg:x="20439" fg:w="15"/><text x="17.9779%" y="751.50"></text></g><g><title>core::ptr::write (1,086 samples, 0.94%)</title><rect x="17.7426%" y="805" width="0.9419%" height="15" fill="rgb(218,11,47)" fg:x="20456" fg:w="1086"/><text x="17.9926%" y="815.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (1,205 samples, 1.05%)</title><rect x="17.6680%" y="821" width="1.0452%" height="15" fill="rgb(218,51,51)" fg:x="20370" fg:w="1205"/><text x="17.9180%" y="831.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (33 samples, 0.03%)</title><rect x="18.6846%" y="805" width="0.0286%" height="15" fill="rgb(238,126,27)" fg:x="21542" fg:w="33"/><text x="18.9346%" y="815.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (1,412 samples, 1.22%)</title><rect x="17.5128%" y="837" width="1.2247%" height="15" fill="rgb(249,202,22)" fg:x="20191" fg:w="1412"/><text x="17.7628%" y="847.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (28 samples, 0.02%)</title><rect x="18.7132%" y="821" width="0.0243%" height="15" fill="rgb(254,195,49)" fg:x="21575" fg:w="28"/><text x="18.9632%" y="831.50"></text></g><g><title>tremor_value::value::Value::String (28 samples, 0.02%)</title><rect x="18.7132%" y="805" width="0.0243%" height="15" fill="rgb(208,123,14)" fg:x="21575" fg:w="28"/><text x="18.9632%" y="815.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (8,526 samples, 7.40%)</title><rect x="11.3433%" y="901" width="7.3951%" height="15" fill="rgb(224,200,8)" fg:x="13078" fg:w="8526"/><text x="11.5933%" y="911.50">&lt;tremor_ru..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (8,495 samples, 7.37%)</title><rect x="11.3702%" y="885" width="7.3682%" height="15" fill="rgb(217,61,36)" fg:x="13109" fg:w="8495"/><text x="11.6202%" y="895.50">tremor_val..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (5,375 samples, 4.66%)</title><rect x="14.0763%" y="869" width="4.6620%" height="15" fill="rgb(206,35,45)" fg:x="16229" fg:w="5375"/><text x="14.3263%" y="879.50">tremo..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (5,315 samples, 4.61%)</title><rect x="14.1284%" y="853" width="4.6100%" height="15" fill="rgb(217,65,33)" fg:x="16289" fg:w="5315"/><text x="14.3784%" y="863.50">tremo..</text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (54 samples, 0.05%)</title><rect x="18.8060%" y="789" width="0.0468%" height="15" fill="rgb(222,158,48)" fg:x="21682" fg:w="54"/><text x="19.0560%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (53 samples, 0.05%)</title><rect x="18.8069%" y="773" width="0.0460%" height="15" fill="rgb(254,2,54)" fg:x="21683" fg:w="53"/><text x="19.0569%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (53 samples, 0.05%)</title><rect x="18.8069%" y="757" width="0.0460%" height="15" fill="rgb(250,143,38)" fg:x="21683" fg:w="53"/><text x="19.0569%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (47 samples, 0.04%)</title><rect x="18.8121%" y="741" width="0.0408%" height="15" fill="rgb(248,25,0)" fg:x="21689" fg:w="47"/><text x="19.0621%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="18.8138%" y="725" width="0.0390%" height="15" fill="rgb(206,152,27)" fg:x="21691" fg:w="45"/><text x="19.0638%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="18.8138%" y="709" width="0.0390%" height="15" fill="rgb(240,77,30)" fg:x="21691" fg:w="45"/><text x="19.0638%" y="719.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.04%)</title><rect x="18.8138%" y="693" width="0.0390%" height="15" fill="rgb(231,5,3)" fg:x="21691" fg:w="45"/><text x="19.0638%" y="703.50"></text></g><g><title>__rg_alloc (45 samples, 0.04%)</title><rect x="18.8138%" y="677" width="0.0390%" height="15" fill="rgb(207,226,32)" fg:x="21691" fg:w="45"/><text x="19.0638%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.04%)</title><rect x="18.8138%" y="661" width="0.0390%" height="15" fill="rgb(222,207,47)" fg:x="21691" fg:w="45"/><text x="19.0638%" y="671.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="18.8138%" y="645" width="0.0390%" height="15" fill="rgb(229,115,45)" fg:x="21691" fg:w="45"/><text x="19.0638%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="18.8390%" y="629" width="0.0139%" height="15" fill="rgb(224,191,6)" fg:x="21720" fg:w="16"/><text x="19.0890%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (78 samples, 0.07%)</title><rect x="18.7982%" y="869" width="0.0677%" height="15" fill="rgb(230,227,24)" fg:x="21673" fg:w="78"/><text x="19.0482%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (70 samples, 0.06%)</title><rect x="18.8051%" y="853" width="0.0607%" height="15" fill="rgb(228,80,19)" fg:x="21681" fg:w="70"/><text x="19.0551%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (70 samples, 0.06%)</title><rect x="18.8051%" y="837" width="0.0607%" height="15" fill="rgb(247,229,0)" fg:x="21681" fg:w="70"/><text x="19.0551%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (69 samples, 0.06%)</title><rect x="18.8060%" y="821" width="0.0598%" height="15" fill="rgb(237,194,15)" fg:x="21682" fg:w="69"/><text x="19.0560%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (69 samples, 0.06%)</title><rect x="18.8060%" y="805" width="0.0598%" height="15" fill="rgb(219,203,20)" fg:x="21682" fg:w="69"/><text x="19.0560%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (15 samples, 0.01%)</title><rect x="18.8528%" y="789" width="0.0130%" height="15" fill="rgb(234,128,8)" fg:x="21736" fg:w="15"/><text x="19.1028%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (56 samples, 0.05%)</title><rect x="18.9734%" y="629" width="0.0486%" height="15" fill="rgb(248,202,8)" fg:x="21875" fg:w="56"/><text x="19.2234%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (83 samples, 0.07%)</title><rect x="18.9508%" y="789" width="0.0720%" height="15" fill="rgb(206,104,37)" fg:x="21849" fg:w="83"/><text x="19.2008%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (83 samples, 0.07%)</title><rect x="18.9508%" y="773" width="0.0720%" height="15" fill="rgb(223,8,27)" fg:x="21849" fg:w="83"/><text x="19.2008%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (77 samples, 0.07%)</title><rect x="18.9561%" y="757" width="0.0668%" height="15" fill="rgb(216,217,28)" fg:x="21855" fg:w="77"/><text x="19.2061%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (74 samples, 0.06%)</title><rect x="18.9587%" y="741" width="0.0642%" height="15" fill="rgb(249,199,1)" fg:x="21858" fg:w="74"/><text x="19.2087%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74 samples, 0.06%)</title><rect x="18.9587%" y="725" width="0.0642%" height="15" fill="rgb(240,85,17)" fg:x="21858" fg:w="74"/><text x="19.2087%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (74 samples, 0.06%)</title><rect x="18.9587%" y="709" width="0.0642%" height="15" fill="rgb(206,108,45)" fg:x="21858" fg:w="74"/><text x="19.2087%" y="719.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 0.06%)</title><rect x="18.9587%" y="693" width="0.0642%" height="15" fill="rgb(245,210,41)" fg:x="21858" fg:w="74"/><text x="19.2087%" y="703.50"></text></g><g><title>__rg_alloc (74 samples, 0.06%)</title><rect x="18.9587%" y="677" width="0.0642%" height="15" fill="rgb(206,13,37)" fg:x="21858" fg:w="74"/><text x="19.2087%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (74 samples, 0.06%)</title><rect x="18.9587%" y="661" width="0.0642%" height="15" fill="rgb(250,61,18)" fg:x="21858" fg:w="74"/><text x="19.2087%" y="671.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.06%)</title><rect x="18.9613%" y="645" width="0.0616%" height="15" fill="rgb(235,172,48)" fg:x="21861" fg:w="71"/><text x="19.2113%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (98 samples, 0.09%)</title><rect x="18.9448%" y="837" width="0.0850%" height="15" fill="rgb(249,201,17)" fg:x="21842" fg:w="98"/><text x="19.1948%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (96 samples, 0.08%)</title><rect x="18.9465%" y="821" width="0.0833%" height="15" fill="rgb(219,208,6)" fg:x="21844" fg:w="96"/><text x="19.1965%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (96 samples, 0.08%)</title><rect x="18.9465%" y="805" width="0.0833%" height="15" fill="rgb(248,31,23)" fg:x="21844" fg:w="96"/><text x="19.1965%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="19.0367%" y="821" width="0.0113%" height="15" fill="rgb(245,15,42)" fg:x="21948" fg:w="13"/><text x="19.2867%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (13 samples, 0.01%)</title><rect x="19.0367%" y="805" width="0.0113%" height="15" fill="rgb(222,217,39)" fg:x="21948" fg:w="13"/><text x="19.2867%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="19.0480%" y="821" width="0.0156%" height="15" fill="rgb(210,219,27)" fg:x="21961" fg:w="18"/><text x="19.2980%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (18 samples, 0.02%)</title><rect x="19.0480%" y="805" width="0.0156%" height="15" fill="rgb(252,166,36)" fg:x="21961" fg:w="18"/><text x="19.2980%" y="815.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="19.0783%" y="709" width="0.0338%" height="15" fill="rgb(245,132,34)" fg:x="21996" fg:w="39"/><text x="19.3283%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (432 samples, 0.37%)</title><rect x="18.7383%" y="901" width="0.3747%" height="15" fill="rgb(236,54,3)" fg:x="21604" fg:w="432"/><text x="18.9883%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (363 samples, 0.31%)</title><rect x="18.7982%" y="885" width="0.3148%" height="15" fill="rgb(241,173,43)" fg:x="21673" fg:w="363"/><text x="19.0482%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (285 samples, 0.25%)</title><rect x="18.8658%" y="869" width="0.2472%" height="15" fill="rgb(215,190,9)" fg:x="21751" fg:w="285"/><text x="19.1158%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (194 samples, 0.17%)</title><rect x="18.9448%" y="853" width="0.1683%" height="15" fill="rgb(242,101,16)" fg:x="21842" fg:w="194"/><text x="19.1948%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (96 samples, 0.08%)</title><rect x="19.0298%" y="837" width="0.0833%" height="15" fill="rgb(223,190,21)" fg:x="21940" fg:w="96"/><text x="19.2798%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (51 samples, 0.04%)</title><rect x="19.0688%" y="821" width="0.0442%" height="15" fill="rgb(215,228,25)" fg:x="21985" fg:w="51"/><text x="19.3188%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="19.0688%" y="805" width="0.0442%" height="15" fill="rgb(225,36,22)" fg:x="21985" fg:w="51"/><text x="19.3188%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="19.0688%" y="789" width="0.0442%" height="15" fill="rgb(251,106,46)" fg:x="21985" fg:w="51"/><text x="19.3188%" y="799.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (50 samples, 0.04%)</title><rect x="19.0697%" y="773" width="0.0434%" height="15" fill="rgb(208,90,1)" fg:x="21986" fg:w="50"/><text x="19.3197%" y="783.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (47 samples, 0.04%)</title><rect x="19.0723%" y="757" width="0.0408%" height="15" fill="rgb(243,10,4)" fg:x="21989" fg:w="47"/><text x="19.3223%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="19.0723%" y="741" width="0.0408%" height="15" fill="rgb(212,137,27)" fg:x="21989" fg:w="47"/><text x="19.3223%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (47 samples, 0.04%)</title><rect x="19.0723%" y="725" width="0.0408%" height="15" fill="rgb(231,220,49)" fg:x="21989" fg:w="47"/><text x="19.3223%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,506 samples, 13.45%)</title><rect x="5.7939%" y="1045" width="13.4492%" height="15" fill="rgb(237,96,20)" fg:x="6680" fg:w="15506"/><text x="6.0439%" y="1055.50">&lt;core::future::from_..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (10,103 samples, 8.76%)</title><rect x="10.4803%" y="1029" width="8.7629%" height="15" fill="rgb(239,229,30)" fg:x="12083" fg:w="10103"/><text x="10.7303%" y="1039.50">tremor_runti..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,103 samples, 8.76%)</title><rect x="10.4803%" y="1013" width="8.7629%" height="15" fill="rgb(219,65,33)" fg:x="12083" fg:w="10103"/><text x="10.7303%" y="1023.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (10,103 samples, 8.76%)</title><rect x="10.4803%" y="997" width="8.7629%" height="15" fill="rgb(243,134,7)" fg:x="12083" fg:w="10103"/><text x="10.7303%" y="1007.50">tremor_runti..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,103 samples, 8.76%)</title><rect x="10.4803%" y="981" width="8.7629%" height="15" fill="rgb(216,177,54)" fg:x="12083" fg:w="10103"/><text x="10.7303%" y="991.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (10,103 samples, 8.76%)</title><rect x="10.4803%" y="965" width="8.7629%" height="15" fill="rgb(211,160,20)" fg:x="12083" fg:w="10103"/><text x="10.7303%" y="975.50">tremor_runti..</text></g><g><title>tremor_runtime::connectors::source::build_events (10,103 samples, 8.76%)</title><rect x="10.4803%" y="949" width="8.7629%" height="15" fill="rgb(239,85,39)" fg:x="12083" fg:w="10103"/><text x="10.7303%" y="959.50">tremor_runti..</text></g><g><title>tremor_script::srs::EventPayload::try_new (9,392 samples, 8.15%)</title><rect x="11.0969%" y="933" width="8.1462%" height="15" fill="rgb(232,125,22)" fg:x="12794" fg:w="9392"/><text x="11.3469%" y="943.50">tremor_scri..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (9,206 samples, 7.98%)</title><rect x="11.2583%" y="917" width="7.9849%" height="15" fill="rgb(244,57,34)" fg:x="12980" fg:w="9206"/><text x="11.5083%" y="927.50">tremor_runt..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (150 samples, 0.13%)</title><rect x="19.1130%" y="901" width="0.1301%" height="15" fill="rgb(214,203,32)" fg:x="22036" fg:w="150"/><text x="19.3630%" y="911.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="19.2431%" y="1045" width="0.0104%" height="15" fill="rgb(207,58,43)" fg:x="22186" fg:w="12"/><text x="19.4931%" y="1055.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="19.3082%" y="741" width="0.0234%" height="15" fill="rgb(215,193,15)" fg:x="22261" fg:w="27"/><text x="19.5582%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="19.3039%" y="789" width="0.0442%" height="15" fill="rgb(232,15,44)" fg:x="22256" fg:w="51"/><text x="19.5539%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="19.3039%" y="773" width="0.0442%" height="15" fill="rgb(212,3,48)" fg:x="22256" fg:w="51"/><text x="19.5539%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="19.3039%" y="757" width="0.0442%" height="15" fill="rgb(218,128,7)" fg:x="22256" fg:w="51"/><text x="19.5539%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (19 samples, 0.02%)</title><rect x="19.3316%" y="741" width="0.0165%" height="15" fill="rgb(226,216,39)" fg:x="22288" fg:w="19"/><text x="19.5816%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (55 samples, 0.05%)</title><rect x="19.3039%" y="805" width="0.0477%" height="15" fill="rgb(243,47,51)" fg:x="22256" fg:w="55"/><text x="19.5539%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (73 samples, 0.06%)</title><rect x="19.2969%" y="869" width="0.0633%" height="15" fill="rgb(241,183,40)" fg:x="22248" fg:w="73"/><text x="19.5469%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (68 samples, 0.06%)</title><rect x="19.3013%" y="853" width="0.0590%" height="15" fill="rgb(231,217,32)" fg:x="22253" fg:w="68"/><text x="19.5513%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (68 samples, 0.06%)</title><rect x="19.3013%" y="837" width="0.0590%" height="15" fill="rgb(229,61,38)" fg:x="22253" fg:w="68"/><text x="19.5513%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (68 samples, 0.06%)</title><rect x="19.3013%" y="821" width="0.0590%" height="15" fill="rgb(225,210,5)" fg:x="22253" fg:w="68"/><text x="19.5513%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (19 samples, 0.02%)</title><rect x="19.3654%" y="741" width="0.0165%" height="15" fill="rgb(231,79,45)" fg:x="22327" fg:w="19"/><text x="19.6154%" y="751.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (12 samples, 0.01%)</title><rect x="19.3715%" y="725" width="0.0104%" height="15" fill="rgb(224,100,7)" fg:x="22334" fg:w="12"/><text x="19.6215%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (26 samples, 0.02%)</title><rect x="19.3602%" y="837" width="0.0226%" height="15" fill="rgb(241,198,18)" fg:x="22321" fg:w="26"/><text x="19.6102%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="19.3611%" y="821" width="0.0217%" height="15" fill="rgb(252,97,53)" fg:x="22322" fg:w="25"/><text x="19.6111%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="19.3637%" y="805" width="0.0191%" height="15" fill="rgb(220,88,7)" fg:x="22325" fg:w="22"/><text x="19.6137%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (22 samples, 0.02%)</title><rect x="19.3637%" y="789" width="0.0191%" height="15" fill="rgb(213,176,14)" fg:x="22325" fg:w="22"/><text x="19.6137%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (22 samples, 0.02%)</title><rect x="19.3637%" y="773" width="0.0191%" height="15" fill="rgb(246,73,7)" fg:x="22325" fg:w="22"/><text x="19.6137%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (20 samples, 0.02%)</title><rect x="19.3654%" y="757" width="0.0173%" height="15" fill="rgb(245,64,36)" fg:x="22327" fg:w="20"/><text x="19.6154%" y="767.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (56 samples, 0.05%)</title><rect x="19.4366%" y="805" width="0.0486%" height="15" fill="rgb(245,80,10)" fg:x="22409" fg:w="56"/><text x="19.6866%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (55 samples, 0.05%)</title><rect x="19.4374%" y="789" width="0.0477%" height="15" fill="rgb(232,107,50)" fg:x="22410" fg:w="55"/><text x="19.6874%" y="799.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (41 samples, 0.04%)</title><rect x="19.4496%" y="773" width="0.0356%" height="15" fill="rgb(253,3,0)" fg:x="22424" fg:w="41"/><text x="19.6996%" y="783.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="19.4548%" y="757" width="0.0304%" height="15" fill="rgb(212,99,53)" fg:x="22430" fg:w="35"/><text x="19.7048%" y="767.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (34 samples, 0.03%)</title><rect x="19.4556%" y="741" width="0.0295%" height="15" fill="rgb(249,111,54)" fg:x="22431" fg:w="34"/><text x="19.7056%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (14 samples, 0.01%)</title><rect x="19.4730%" y="725" width="0.0121%" height="15" fill="rgb(249,55,30)" fg:x="22451" fg:w="14"/><text x="19.7230%" y="735.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (88 samples, 0.08%)</title><rect x="19.4097%" y="821" width="0.0763%" height="15" fill="rgb(237,47,42)" fg:x="22378" fg:w="88"/><text x="19.6597%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (22 samples, 0.02%)</title><rect x="19.4973%" y="757" width="0.0191%" height="15" fill="rgb(211,20,18)" fg:x="22479" fg:w="22"/><text x="19.7473%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (22 samples, 0.02%)</title><rect x="19.4973%" y="741" width="0.0191%" height="15" fill="rgb(231,203,46)" fg:x="22479" fg:w="22"/><text x="19.7473%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (22 samples, 0.02%)</title><rect x="19.4973%" y="725" width="0.0191%" height="15" fill="rgb(237,142,3)" fg:x="22479" fg:w="22"/><text x="19.7473%" y="735.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (21 samples, 0.02%)</title><rect x="19.4981%" y="709" width="0.0182%" height="15" fill="rgb(241,107,1)" fg:x="22480" fg:w="21"/><text x="19.7481%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (21 samples, 0.02%)</title><rect x="19.4981%" y="693" width="0.0182%" height="15" fill="rgb(229,83,13)" fg:x="22480" fg:w="21"/><text x="19.7481%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="19.4990%" y="677" width="0.0173%" height="15" fill="rgb(241,91,40)" fg:x="22481" fg:w="20"/><text x="19.7490%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.02%)</title><rect x="19.4990%" y="661" width="0.0173%" height="15" fill="rgb(225,3,45)" fg:x="22481" fg:w="20"/><text x="19.7490%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.02%)</title><rect x="19.4990%" y="645" width="0.0173%" height="15" fill="rgb(244,223,14)" fg:x="22481" fg:w="20"/><text x="19.7490%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.02%)</title><rect x="19.4990%" y="629" width="0.0173%" height="15" fill="rgb(224,124,37)" fg:x="22481" fg:w="20"/><text x="19.7490%" y="639.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.02%)</title><rect x="19.4990%" y="613" width="0.0173%" height="15" fill="rgb(251,171,30)" fg:x="22481" fg:w="20"/><text x="19.7490%" y="623.50"></text></g><g><title>__rg_alloc (20 samples, 0.02%)</title><rect x="19.4990%" y="597" width="0.0173%" height="15" fill="rgb(236,46,54)" fg:x="22481" fg:w="20"/><text x="19.7490%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.02%)</title><rect x="19.4990%" y="581" width="0.0173%" height="15" fill="rgb(245,213,5)" fg:x="22481" fg:w="20"/><text x="19.7490%" y="591.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="19.5008%" y="565" width="0.0156%" height="15" fill="rgb(230,144,27)" fg:x="22483" fg:w="18"/><text x="19.7508%" y="575.50"></text></g><g><title>core::mem::swap (57 samples, 0.05%)</title><rect x="19.5302%" y="581" width="0.0494%" height="15" fill="rgb(220,86,6)" fg:x="22517" fg:w="57"/><text x="19.7802%" y="591.50"></text></g><g><title>core::mem::swap_simple (57 samples, 0.05%)</title><rect x="19.5302%" y="565" width="0.0494%" height="15" fill="rgb(240,20,13)" fg:x="22517" fg:w="57"/><text x="19.7802%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (73 samples, 0.06%)</title><rect x="19.6256%" y="437" width="0.0633%" height="15" fill="rgb(217,89,34)" fg:x="22627" fg:w="73"/><text x="19.8756%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (128 samples, 0.11%)</title><rect x="19.5884%" y="549" width="0.1110%" height="15" fill="rgb(229,13,5)" fg:x="22584" fg:w="128"/><text x="19.8384%" y="559.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (125 samples, 0.11%)</title><rect x="19.5910%" y="533" width="0.1084%" height="15" fill="rgb(244,67,35)" fg:x="22587" fg:w="125"/><text x="19.8410%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (125 samples, 0.11%)</title><rect x="19.5910%" y="517" width="0.1084%" height="15" fill="rgb(221,40,2)" fg:x="22587" fg:w="125"/><text x="19.8410%" y="527.50"></text></g><g><title>alloc::alloc::alloc (125 samples, 0.11%)</title><rect x="19.5910%" y="501" width="0.1084%" height="15" fill="rgb(237,157,21)" fg:x="22587" fg:w="125"/><text x="19.8410%" y="511.50"></text></g><g><title>__rg_alloc (125 samples, 0.11%)</title><rect x="19.5910%" y="485" width="0.1084%" height="15" fill="rgb(222,94,11)" fg:x="22587" fg:w="125"/><text x="19.8410%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (125 samples, 0.11%)</title><rect x="19.5910%" y="469" width="0.1084%" height="15" fill="rgb(249,113,6)" fg:x="22587" fg:w="125"/><text x="19.8410%" y="479.50"></text></g><g><title>sn_rust_alloc (125 samples, 0.11%)</title><rect x="19.5910%" y="453" width="0.1084%" height="15" fill="rgb(238,137,36)" fg:x="22587" fg:w="125"/><text x="19.8410%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="19.6890%" y="437" width="0.0104%" height="15" fill="rgb(210,102,26)" fg:x="22700" fg:w="12"/><text x="19.9390%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (213 samples, 0.18%)</title><rect x="19.5233%" y="597" width="0.1847%" height="15" fill="rgb(218,30,30)" fg:x="22509" fg:w="213"/><text x="19.7733%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (146 samples, 0.13%)</title><rect x="19.5814%" y="581" width="0.1266%" height="15" fill="rgb(214,67,26)" fg:x="22576" fg:w="146"/><text x="19.8314%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (145 samples, 0.13%)</title><rect x="19.5823%" y="565" width="0.1258%" height="15" fill="rgb(251,9,53)" fg:x="22577" fg:w="145"/><text x="19.8323%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (246 samples, 0.21%)</title><rect x="19.4973%" y="773" width="0.2134%" height="15" fill="rgb(228,204,25)" fg:x="22479" fg:w="246"/><text x="19.7473%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (224 samples, 0.19%)</title><rect x="19.5164%" y="757" width="0.1943%" height="15" fill="rgb(207,153,8)" fg:x="22501" fg:w="224"/><text x="19.7664%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (223 samples, 0.19%)</title><rect x="19.5172%" y="741" width="0.1934%" height="15" fill="rgb(242,9,16)" fg:x="22502" fg:w="223"/><text x="19.7672%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (223 samples, 0.19%)</title><rect x="19.5172%" y="725" width="0.1934%" height="15" fill="rgb(217,211,10)" fg:x="22502" fg:w="223"/><text x="19.7672%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (222 samples, 0.19%)</title><rect x="19.5181%" y="709" width="0.1926%" height="15" fill="rgb(219,228,52)" fg:x="22503" fg:w="222"/><text x="19.7681%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (222 samples, 0.19%)</title><rect x="19.5181%" y="693" width="0.1926%" height="15" fill="rgb(231,92,29)" fg:x="22503" fg:w="222"/><text x="19.7681%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (222 samples, 0.19%)</title><rect x="19.5181%" y="677" width="0.1926%" height="15" fill="rgb(232,8,23)" fg:x="22503" fg:w="222"/><text x="19.7681%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (222 samples, 0.19%)</title><rect x="19.5181%" y="661" width="0.1926%" height="15" fill="rgb(216,211,34)" fg:x="22503" fg:w="222"/><text x="19.7681%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (222 samples, 0.19%)</title><rect x="19.5181%" y="645" width="0.1926%" height="15" fill="rgb(236,151,0)" fg:x="22503" fg:w="222"/><text x="19.7681%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (220 samples, 0.19%)</title><rect x="19.5198%" y="629" width="0.1908%" height="15" fill="rgb(209,168,3)" fg:x="22505" fg:w="220"/><text x="19.7698%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (217 samples, 0.19%)</title><rect x="19.5224%" y="613" width="0.1882%" height="15" fill="rgb(208,129,28)" fg:x="22508" fg:w="217"/><text x="19.7724%" y="623.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (506 samples, 0.44%)</title><rect x="19.2726%" y="901" width="0.4389%" height="15" fill="rgb(229,78,22)" fg:x="22220" fg:w="506"/><text x="19.5226%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (506 samples, 0.44%)</title><rect x="19.2726%" y="885" width="0.4389%" height="15" fill="rgb(228,187,13)" fg:x="22220" fg:w="506"/><text x="19.5226%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (405 samples, 0.35%)</title><rect x="19.3602%" y="869" width="0.3513%" height="15" fill="rgb(240,119,24)" fg:x="22321" fg:w="405"/><text x="19.6102%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (405 samples, 0.35%)</title><rect x="19.3602%" y="853" width="0.3513%" height="15" fill="rgb(209,194,42)" fg:x="22321" fg:w="405"/><text x="19.6102%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (379 samples, 0.33%)</title><rect x="19.3828%" y="837" width="0.3287%" height="15" fill="rgb(247,200,46)" fg:x="22347" fg:w="379"/><text x="19.6328%" y="847.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (260 samples, 0.23%)</title><rect x="19.4860%" y="821" width="0.2255%" height="15" fill="rgb(218,76,16)" fg:x="22466" fg:w="260"/><text x="19.7360%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (247 samples, 0.21%)</title><rect x="19.4973%" y="805" width="0.2142%" height="15" fill="rgb(225,21,48)" fg:x="22479" fg:w="247"/><text x="19.7473%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (247 samples, 0.21%)</title><rect x="19.4973%" y="789" width="0.2142%" height="15" fill="rgb(239,223,50)" fg:x="22479" fg:w="247"/><text x="19.7473%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (588 samples, 0.51%)</title><rect x="19.2726%" y="933" width="0.5100%" height="15" fill="rgb(244,45,21)" fg:x="22220" fg:w="588"/><text x="19.5226%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (588 samples, 0.51%)</title><rect x="19.2726%" y="917" width="0.5100%" height="15" fill="rgb(232,33,43)" fg:x="22220" fg:w="588"/><text x="19.5226%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (82 samples, 0.07%)</title><rect x="19.7115%" y="901" width="0.0711%" height="15" fill="rgb(209,8,3)" fg:x="22726" fg:w="82"/><text x="19.9615%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (593 samples, 0.51%)</title><rect x="19.2726%" y="949" width="0.5143%" height="15" fill="rgb(214,25,53)" fg:x="22220" fg:w="593"/><text x="19.5226%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (24 samples, 0.02%)</title><rect x="20.5468%" y="645" width="0.0208%" height="15" fill="rgb(254,186,54)" fg:x="23689" fg:w="24"/><text x="20.7968%" y="655.50"></text></g><g><title>core::ptr::write (24 samples, 0.02%)</title><rect x="20.5468%" y="629" width="0.0208%" height="15" fill="rgb(208,174,49)" fg:x="23689" fg:w="24"/><text x="20.7968%" y="639.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (27 samples, 0.02%)</title><rect x="20.5468%" y="661" width="0.0234%" height="15" fill="rgb(233,191,51)" fg:x="23689" fg:w="27"/><text x="20.7968%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (12 samples, 0.01%)</title><rect x="20.5702%" y="661" width="0.0104%" height="15" fill="rgb(222,134,10)" fg:x="23716" fg:w="12"/><text x="20.8202%" y="671.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (12 samples, 0.01%)</title><rect x="20.5702%" y="645" width="0.0104%" height="15" fill="rgb(230,226,20)" fg:x="23716" fg:w="12"/><text x="20.8202%" y="655.50"></text></g><g><title>core::mem::swap (188 samples, 0.16%)</title><rect x="20.6205%" y="597" width="0.1631%" height="15" fill="rgb(251,111,25)" fg:x="23774" fg:w="188"/><text x="20.8705%" y="607.50"></text></g><g><title>core::mem::swap_simple (188 samples, 0.16%)</title><rect x="20.6205%" y="581" width="0.1631%" height="15" fill="rgb(224,40,46)" fg:x="23774" fg:w="188"/><text x="20.8705%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (29 samples, 0.03%)</title><rect x="20.8035%" y="565" width="0.0252%" height="15" fill="rgb(236,108,47)" fg:x="23985" fg:w="29"/><text x="21.0535%" y="575.50"></text></g><g><title>core::intrinsics::write_bytes (29 samples, 0.03%)</title><rect x="20.8035%" y="549" width="0.0252%" height="15" fill="rgb(234,93,0)" fg:x="23985" fg:w="29"/><text x="21.0535%" y="559.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="20.8105%" y="533" width="0.0182%" height="15" fill="rgb(224,213,32)" fg:x="23993" fg:w="21"/><text x="21.0605%" y="543.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (56 samples, 0.05%)</title><rect x="20.8399%" y="549" width="0.0486%" height="15" fill="rgb(251,11,48)" fg:x="24027" fg:w="56"/><text x="21.0899%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="20.8399%" y="533" width="0.0486%" height="15" fill="rgb(236,173,5)" fg:x="24027" fg:w="56"/><text x="21.0899%" y="543.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.05%)</title><rect x="20.8399%" y="517" width="0.0486%" height="15" fill="rgb(230,95,12)" fg:x="24027" fg:w="56"/><text x="21.0899%" y="527.50"></text></g><g><title>__rg_alloc (56 samples, 0.05%)</title><rect x="20.8399%" y="501" width="0.0486%" height="15" fill="rgb(232,209,1)" fg:x="24027" fg:w="56"/><text x="21.0899%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (56 samples, 0.05%)</title><rect x="20.8399%" y="485" width="0.0486%" height="15" fill="rgb(232,6,1)" fg:x="24027" fg:w="56"/><text x="21.0899%" y="495.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.05%)</title><rect x="20.8408%" y="469" width="0.0477%" height="15" fill="rgb(210,224,50)" fg:x="24028" fg:w="55"/><text x="21.0908%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (76 samples, 0.07%)</title><rect x="20.8287%" y="565" width="0.0659%" height="15" fill="rgb(228,127,35)" fg:x="24014" fg:w="76"/><text x="21.0787%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (131 samples, 0.11%)</title><rect x="20.7853%" y="597" width="0.1136%" height="15" fill="rgb(245,102,45)" fg:x="23964" fg:w="131"/><text x="21.0353%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (124 samples, 0.11%)</title><rect x="20.7914%" y="581" width="0.1076%" height="15" fill="rgb(214,1,49)" fg:x="23971" fg:w="124"/><text x="21.0414%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (351 samples, 0.30%)</title><rect x="20.6014%" y="613" width="0.3044%" height="15" fill="rgb(226,163,40)" fg:x="23752" fg:w="351"/><text x="20.8514%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (380 samples, 0.33%)</title><rect x="20.5806%" y="661" width="0.3296%" height="15" fill="rgb(239,212,28)" fg:x="23728" fg:w="380"/><text x="20.8306%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (376 samples, 0.33%)</title><rect x="20.5841%" y="645" width="0.3261%" height="15" fill="rgb(220,20,13)" fg:x="23732" fg:w="376"/><text x="20.8341%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (365 samples, 0.32%)</title><rect x="20.5936%" y="629" width="0.3166%" height="15" fill="rgb(210,164,35)" fg:x="23743" fg:w="365"/><text x="20.8436%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (21 samples, 0.02%)</title><rect x="20.9319%" y="645" width="0.0182%" height="15" fill="rgb(248,109,41)" fg:x="24133" fg:w="21"/><text x="21.1819%" y="655.50"></text></g><g><title>hashbrown::raw::inner::is_full (15 samples, 0.01%)</title><rect x="20.9570%" y="645" width="0.0130%" height="15" fill="rgb(238,23,50)" fg:x="24162" fg:w="15"/><text x="21.2070%" y="655.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (27 samples, 0.02%)</title><rect x="20.9701%" y="645" width="0.0234%" height="15" fill="rgb(211,48,49)" fg:x="24177" fg:w="27"/><text x="21.2201%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (27 samples, 0.02%)</title><rect x="20.9701%" y="629" width="0.0234%" height="15" fill="rgb(223,36,21)" fg:x="24177" fg:w="27"/><text x="21.2201%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.02%)</title><rect x="20.9701%" y="613" width="0.0234%" height="15" fill="rgb(207,123,46)" fg:x="24177" fg:w="27"/><text x="21.2201%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (121 samples, 0.10%)</title><rect x="20.9102%" y="661" width="0.1049%" height="15" fill="rgb(240,218,32)" fg:x="24108" fg:w="121"/><text x="21.1602%" y="671.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (25 samples, 0.02%)</title><rect x="20.9935%" y="645" width="0.0217%" height="15" fill="rgb(252,5,43)" fg:x="24204" fg:w="25"/><text x="21.2435%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.02%)</title><rect x="20.9935%" y="629" width="0.0217%" height="15" fill="rgb(252,84,19)" fg:x="24204" fg:w="25"/><text x="21.2435%" y="639.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (900 samples, 0.78%)</title><rect x="20.2606%" y="709" width="0.7806%" height="15" fill="rgb(243,152,39)" fg:x="23359" fg:w="900"/><text x="20.5106%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (727 samples, 0.63%)</title><rect x="20.4106%" y="693" width="0.6306%" height="15" fill="rgb(234,160,15)" fg:x="23532" fg:w="727"/><text x="20.6606%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (579 samples, 0.50%)</title><rect x="20.5390%" y="677" width="0.5022%" height="15" fill="rgb(237,34,20)" fg:x="23680" fg:w="579"/><text x="20.7890%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (30 samples, 0.03%)</title><rect x="21.0152%" y="661" width="0.0260%" height="15" fill="rgb(229,97,13)" fg:x="24229" fg:w="30"/><text x="21.2652%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (15 samples, 0.01%)</title><rect x="21.0282%" y="645" width="0.0130%" height="15" fill="rgb(234,71,50)" fg:x="24244" fg:w="15"/><text x="21.2782%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="21.0672%" y="661" width="0.0104%" height="15" fill="rgb(253,155,4)" fg:x="24289" fg:w="12"/><text x="21.3172%" y="671.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (17 samples, 0.01%)</title><rect x="21.1114%" y="597" width="0.0147%" height="15" fill="rgb(222,185,37)" fg:x="24340" fg:w="17"/><text x="21.3614%" y="607.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (55 samples, 0.05%)</title><rect x="21.0811%" y="645" width="0.0477%" height="15" fill="rgb(251,177,13)" fg:x="24305" fg:w="55"/><text x="21.3311%" y="655.50"></text></g><g><title>fxhash::write (52 samples, 0.05%)</title><rect x="21.0837%" y="629" width="0.0451%" height="15" fill="rgb(250,179,40)" fg:x="24308" fg:w="52"/><text x="21.3337%" y="639.50"></text></g><g><title>fxhash::write64 (52 samples, 0.05%)</title><rect x="21.0837%" y="613" width="0.0451%" height="15" fill="rgb(242,44,2)" fg:x="24308" fg:w="52"/><text x="21.3337%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,558 samples, 1.35%)</title><rect x="19.7870%" y="821" width="1.3513%" height="15" fill="rgb(216,177,13)" fg:x="22813" fg:w="1558"/><text x="20.0370%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,558 samples, 1.35%)</title><rect x="19.7870%" y="805" width="1.3513%" height="15" fill="rgb(216,106,43)" fg:x="22813" fg:w="1558"/><text x="20.0370%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,544 samples, 1.34%)</title><rect x="19.7991%" y="789" width="1.3392%" height="15" fill="rgb(216,183,2)" fg:x="22827" fg:w="1544"/><text x="20.0491%" y="799.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,405 samples, 1.22%)</title><rect x="19.9197%" y="773" width="1.2186%" height="15" fill="rgb(249,75,3)" fg:x="22966" fg:w="1405"/><text x="20.1697%" y="783.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,334 samples, 1.16%)</title><rect x="19.9813%" y="757" width="1.1571%" height="15" fill="rgb(219,67,39)" fg:x="23037" fg:w="1334"/><text x="20.2313%" y="767.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (1,305 samples, 1.13%)</title><rect x="20.0064%" y="741" width="1.1319%" height="15" fill="rgb(253,228,2)" fg:x="23066" fg:w="1305"/><text x="20.2564%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,109 samples, 0.96%)</title><rect x="20.1764%" y="725" width="0.9619%" height="15" fill="rgb(235,138,27)" fg:x="23262" fg:w="1109"/><text x="20.4264%" y="735.50"></text></g><g><title>hashbrown::map::make_insert_hash (112 samples, 0.10%)</title><rect x="21.0412%" y="709" width="0.0971%" height="15" fill="rgb(236,97,51)" fg:x="24259" fg:w="112"/><text x="21.2912%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (94 samples, 0.08%)</title><rect x="21.0568%" y="693" width="0.0815%" height="15" fill="rgb(240,80,30)" fg:x="24277" fg:w="94"/><text x="21.3068%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (94 samples, 0.08%)</title><rect x="21.0568%" y="677" width="0.0815%" height="15" fill="rgb(230,178,19)" fg:x="24277" fg:w="94"/><text x="21.3068%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (70 samples, 0.06%)</title><rect x="21.0776%" y="661" width="0.0607%" height="15" fill="rgb(210,190,27)" fg:x="24301" fg:w="70"/><text x="21.3276%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="21.3864%" y="549" width="0.0139%" height="15" fill="rgb(222,107,31)" fg:x="24657" fg:w="16"/><text x="21.6364%" y="559.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (283 samples, 0.25%)</title><rect x="21.1617%" y="709" width="0.2455%" height="15" fill="rgb(216,127,34)" fg:x="24398" fg:w="283"/><text x="21.4117%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (283 samples, 0.25%)</title><rect x="21.1617%" y="693" width="0.2455%" height="15" fill="rgb(234,116,52)" fg:x="24398" fg:w="283"/><text x="21.4117%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (251 samples, 0.22%)</title><rect x="21.1895%" y="677" width="0.2177%" height="15" fill="rgb(222,124,15)" fg:x="24430" fg:w="251"/><text x="21.4395%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (239 samples, 0.21%)</title><rect x="21.1999%" y="661" width="0.2073%" height="15" fill="rgb(231,179,28)" fg:x="24442" fg:w="239"/><text x="21.4499%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (239 samples, 0.21%)</title><rect x="21.1999%" y="645" width="0.2073%" height="15" fill="rgb(226,93,45)" fg:x="24442" fg:w="239"/><text x="21.4499%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (239 samples, 0.21%)</title><rect x="21.1999%" y="629" width="0.2073%" height="15" fill="rgb(215,8,51)" fg:x="24442" fg:w="239"/><text x="21.4499%" y="639.50"></text></g><g><title>alloc::alloc::alloc (234 samples, 0.20%)</title><rect x="21.2042%" y="613" width="0.2030%" height="15" fill="rgb(223,106,5)" fg:x="24447" fg:w="234"/><text x="21.4542%" y="623.50"></text></g><g><title>__rg_alloc (234 samples, 0.20%)</title><rect x="21.2042%" y="597" width="0.2030%" height="15" fill="rgb(250,191,5)" fg:x="24447" fg:w="234"/><text x="21.4542%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (234 samples, 0.20%)</title><rect x="21.2042%" y="581" width="0.2030%" height="15" fill="rgb(242,132,44)" fg:x="24447" fg:w="234"/><text x="21.4542%" y="591.50"></text></g><g><title>sn_rust_alloc (223 samples, 0.19%)</title><rect x="21.2138%" y="565" width="0.1934%" height="15" fill="rgb(251,152,29)" fg:x="24458" fg:w="223"/><text x="21.4638%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (332 samples, 0.29%)</title><rect x="21.1383%" y="757" width="0.2880%" height="15" fill="rgb(218,179,5)" fg:x="24371" fg:w="332"/><text x="21.3883%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (329 samples, 0.29%)</title><rect x="21.1409%" y="741" width="0.2854%" height="15" fill="rgb(227,67,19)" fg:x="24374" fg:w="329"/><text x="21.3909%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (329 samples, 0.29%)</title><rect x="21.1409%" y="725" width="0.2854%" height="15" fill="rgb(233,119,31)" fg:x="24374" fg:w="329"/><text x="21.3909%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (22 samples, 0.02%)</title><rect x="21.4072%" y="709" width="0.0191%" height="15" fill="rgb(241,120,22)" fg:x="24681" fg:w="22"/><text x="21.6572%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="21.4115%" y="693" width="0.0147%" height="15" fill="rgb(224,102,30)" fg:x="24686" fg:w="17"/><text x="21.6615%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (16 samples, 0.01%)</title><rect x="21.4124%" y="677" width="0.0139%" height="15" fill="rgb(210,164,37)" fg:x="24687" fg:w="16"/><text x="21.6624%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (16 samples, 0.01%)</title><rect x="21.4124%" y="661" width="0.0139%" height="15" fill="rgb(226,191,16)" fg:x="24687" fg:w="16"/><text x="21.6624%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (16 samples, 0.01%)</title><rect x="21.4124%" y="645" width="0.0139%" height="15" fill="rgb(214,40,45)" fg:x="24687" fg:w="16"/><text x="21.6624%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (12 samples, 0.01%)</title><rect x="21.4159%" y="629" width="0.0104%" height="15" fill="rgb(244,29,26)" fg:x="24691" fg:w="12"/><text x="21.6659%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (12 samples, 0.01%)</title><rect x="21.4159%" y="613" width="0.0104%" height="15" fill="rgb(216,16,5)" fg:x="24691" fg:w="12"/><text x="21.6659%" y="623.50"></text></g><g><title>core::cmp::Ord::max (15 samples, 0.01%)</title><rect x="21.4696%" y="597" width="0.0130%" height="15" fill="rgb(249,76,35)" fg:x="24753" fg:w="15"/><text x="21.7196%" y="607.50"></text></g><g><title>core::cmp::max_by (15 samples, 0.01%)</title><rect x="21.4696%" y="581" width="0.0130%" height="15" fill="rgb(207,11,44)" fg:x="24753" fg:w="15"/><text x="21.7196%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13 samples, 0.01%)</title><rect x="21.5269%" y="581" width="0.0113%" height="15" fill="rgb(228,190,49)" fg:x="24819" fg:w="13"/><text x="21.7769%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (13 samples, 0.01%)</title><rect x="21.5269%" y="565" width="0.0113%" height="15" fill="rgb(214,173,12)" fg:x="24819" fg:w="13"/><text x="21.7769%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (13 samples, 0.01%)</title><rect x="21.5269%" y="549" width="0.0113%" height="15" fill="rgb(218,26,35)" fg:x="24819" fg:w="13"/><text x="21.7769%" y="559.50"></text></g><g><title>core::mem::swap (577 samples, 0.50%)</title><rect x="21.5382%" y="581" width="0.5005%" height="15" fill="rgb(220,200,19)" fg:x="24832" fg:w="577"/><text x="21.7882%" y="591.50"></text></g><g><title>core::mem::swap_simple (577 samples, 0.50%)</title><rect x="21.5382%" y="565" width="0.5005%" height="15" fill="rgb(239,95,49)" fg:x="24832" fg:w="577"/><text x="21.7882%" y="575.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="22.0248%" y="549" width="0.0139%" height="15" fill="rgb(235,85,53)" fg:x="25393" fg:w="16"/><text x="22.2748%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (13 samples, 0.01%)</title><rect x="22.0612%" y="565" width="0.0113%" height="15" fill="rgb(233,133,31)" fg:x="25435" fg:w="13"/><text x="22.3112%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (83 samples, 0.07%)</title><rect x="22.1063%" y="549" width="0.0720%" height="15" fill="rgb(218,25,20)" fg:x="25487" fg:w="83"/><text x="22.3563%" y="559.50"></text></g><g><title>core::intrinsics::write_bytes (83 samples, 0.07%)</title><rect x="22.1063%" y="533" width="0.0720%" height="15" fill="rgb(252,210,38)" fg:x="25487" fg:w="83"/><text x="22.3563%" y="543.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.06%)</title><rect x="22.1219%" y="517" width="0.0564%" height="15" fill="rgb(242,134,21)" fg:x="25505" fg:w="65"/><text x="22.3719%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (22 samples, 0.02%)</title><rect x="22.2060%" y="517" width="0.0191%" height="15" fill="rgb(213,28,48)" fg:x="25602" fg:w="22"/><text x="22.4560%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (22 samples, 0.02%)</title><rect x="22.2060%" y="501" width="0.0191%" height="15" fill="rgb(250,196,2)" fg:x="25602" fg:w="22"/><text x="22.4560%" y="511.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (59 samples, 0.05%)</title><rect x="22.1843%" y="533" width="0.0512%" height="15" fill="rgb(227,5,17)" fg:x="25577" fg:w="59"/><text x="22.4343%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12 samples, 0.01%)</title><rect x="22.2251%" y="517" width="0.0104%" height="15" fill="rgb(221,226,24)" fg:x="25624" fg:w="12"/><text x="22.4751%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (12 samples, 0.01%)</title><rect x="22.2251%" y="501" width="0.0104%" height="15" fill="rgb(211,5,48)" fg:x="25624" fg:w="12"/><text x="22.4751%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (727 samples, 0.63%)</title><rect x="22.6865%" y="437" width="0.6306%" height="15" fill="rgb(219,150,6)" fg:x="26156" fg:w="727"/><text x="22.9365%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,376 samples, 1.19%)</title><rect x="22.2355%" y="533" width="1.1935%" height="15" fill="rgb(251,46,16)" fg:x="25636" fg:w="1376"/><text x="22.4855%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,376 samples, 1.19%)</title><rect x="22.2355%" y="517" width="1.1935%" height="15" fill="rgb(220,204,40)" fg:x="25636" fg:w="1376"/><text x="22.4855%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1,376 samples, 1.19%)</title><rect x="22.2355%" y="501" width="1.1935%" height="15" fill="rgb(211,85,2)" fg:x="25636" fg:w="1376"/><text x="22.4855%" y="511.50"></text></g><g><title>__rg_alloc (1,376 samples, 1.19%)</title><rect x="22.2355%" y="485" width="1.1935%" height="15" fill="rgb(229,17,7)" fg:x="25636" fg:w="1376"/><text x="22.4855%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,376 samples, 1.19%)</title><rect x="22.2355%" y="469" width="1.1935%" height="15" fill="rgb(239,72,28)" fg:x="25636" fg:w="1376"/><text x="22.4855%" y="479.50"></text></g><g><title>sn_rust_alloc (1,362 samples, 1.18%)</title><rect x="22.2477%" y="453" width="1.1813%" height="15" fill="rgb(230,47,54)" fg:x="25650" fg:w="1362"/><text x="22.4977%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (129 samples, 0.11%)</title><rect x="23.3171%" y="437" width="0.1119%" height="15" fill="rgb(214,50,8)" fg:x="26883" fg:w="129"/><text x="23.5671%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,462 samples, 1.27%)</title><rect x="22.1783%" y="549" width="1.2681%" height="15" fill="rgb(216,198,43)" fg:x="25570" fg:w="1462"/><text x="22.4283%" y="559.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (20 samples, 0.02%)</title><rect x="23.4290%" y="533" width="0.0173%" height="15" fill="rgb(234,20,35)" fg:x="27012" fg:w="20"/><text x="23.6790%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,705 samples, 1.48%)</title><rect x="22.0482%" y="581" width="1.4788%" height="15" fill="rgb(254,45,19)" fg:x="25420" fg:w="1705"/><text x="22.2982%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,677 samples, 1.45%)</title><rect x="22.0725%" y="565" width="1.4546%" height="15" fill="rgb(219,14,44)" fg:x="25448" fg:w="1677"/><text x="22.3225%" y="575.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (93 samples, 0.08%)</title><rect x="23.4463%" y="549" width="0.0807%" height="15" fill="rgb(217,220,26)" fg:x="27032" fg:w="93"/><text x="23.6963%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (43 samples, 0.04%)</title><rect x="23.4897%" y="533" width="0.0373%" height="15" fill="rgb(213,158,28)" fg:x="27082" fg:w="43"/><text x="23.7397%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (43 samples, 0.04%)</title><rect x="23.4897%" y="517" width="0.0373%" height="15" fill="rgb(252,51,52)" fg:x="27082" fg:w="43"/><text x="23.7397%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,366 samples, 2.05%)</title><rect x="21.4827%" y="597" width="2.0522%" height="15" fill="rgb(246,89,16)" fg:x="24768" fg:w="2366"/><text x="21.7327%" y="607.50">h..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,337 samples, 3.76%)</title><rect x="19.7870%" y="901" width="3.7617%" height="15" fill="rgb(216,158,49)" fg:x="22813" fg:w="4337"/><text x="20.0370%" y="911.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,337 samples, 3.76%)</title><rect x="19.7870%" y="885" width="3.7617%" height="15" fill="rgb(236,107,19)" fg:x="22813" fg:w="4337"/><text x="20.0370%" y="895.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,337 samples, 3.76%)</title><rect x="19.7870%" y="869" width="3.7617%" height="15" fill="rgb(228,185,30)" fg:x="22813" fg:w="4337"/><text x="20.0370%" y="879.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,337 samples, 3.76%)</title><rect x="19.7870%" y="853" width="3.7617%" height="15" fill="rgb(246,134,8)" fg:x="22813" fg:w="4337"/><text x="20.0370%" y="863.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,337 samples, 3.76%)</title><rect x="19.7870%" y="837" width="3.7617%" height="15" fill="rgb(214,143,50)" fg:x="22813" fg:w="4337"/><text x="20.0370%" y="847.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,779 samples, 2.41%)</title><rect x="21.1383%" y="821" width="2.4104%" height="15" fill="rgb(228,75,8)" fg:x="24371" fg:w="2779"/><text x="21.3883%" y="831.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,779 samples, 2.41%)</title><rect x="21.1383%" y="805" width="2.4104%" height="15" fill="rgb(207,175,4)" fg:x="24371" fg:w="2779"/><text x="21.3883%" y="815.50">tr..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,779 samples, 2.41%)</title><rect x="21.1383%" y="789" width="2.4104%" height="15" fill="rgb(205,108,24)" fg:x="24371" fg:w="2779"/><text x="21.3883%" y="799.50">&lt;t..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (2,779 samples, 2.41%)</title><rect x="21.1383%" y="773" width="2.4104%" height="15" fill="rgb(244,120,49)" fg:x="24371" fg:w="2779"/><text x="21.3883%" y="783.50">ab..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (2,447 samples, 2.12%)</title><rect x="21.4263%" y="757" width="2.1224%" height="15" fill="rgb(223,47,38)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="767.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,447 samples, 2.12%)</title><rect x="21.4263%" y="741" width="2.1224%" height="15" fill="rgb(229,179,11)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="751.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,447 samples, 2.12%)</title><rect x="21.4263%" y="725" width="2.1224%" height="15" fill="rgb(231,122,1)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="735.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,447 samples, 2.12%)</title><rect x="21.4263%" y="709" width="2.1224%" height="15" fill="rgb(245,119,9)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="719.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,447 samples, 2.12%)</title><rect x="21.4263%" y="693" width="2.1224%" height="15" fill="rgb(241,163,25)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="703.50">a..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (2,447 samples, 2.12%)</title><rect x="21.4263%" y="677" width="2.1224%" height="15" fill="rgb(217,214,3)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="687.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,447 samples, 2.12%)</title><rect x="21.4263%" y="661" width="2.1224%" height="15" fill="rgb(240,86,28)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="671.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,447 samples, 2.12%)</title><rect x="21.4263%" y="645" width="2.1224%" height="15" fill="rgb(215,47,9)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="655.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,447 samples, 2.12%)</title><rect x="21.4263%" y="629" width="2.1224%" height="15" fill="rgb(252,25,45)" fg:x="24703" fg:w="2447"/><text x="21.6763%" y="639.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,429 samples, 2.11%)</title><rect x="21.4419%" y="613" width="2.1068%" height="15" fill="rgb(251,164,9)" fg:x="24721" fg:w="2429"/><text x="21.6919%" y="623.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (16 samples, 0.01%)</title><rect x="23.5348%" y="597" width="0.0139%" height="15" fill="rgb(233,194,0)" fg:x="27134" fg:w="16"/><text x="23.7848%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (5,002 samples, 4.34%)</title><rect x="19.2726%" y="1045" width="4.3385%" height="15" fill="rgb(249,111,24)" fg:x="22220" fg:w="5002"/><text x="19.5226%" y="1055.50">&lt;trem..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (5,002 samples, 4.34%)</title><rect x="19.2726%" y="1029" width="4.3385%" height="15" fill="rgb(250,223,3)" fg:x="22220" fg:w="5002"/><text x="19.5226%" y="1039.50">tremo..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (5,002 samples, 4.34%)</title><rect x="19.2726%" y="1013" width="4.3385%" height="15" fill="rgb(236,178,37)" fg:x="22220" fg:w="5002"/><text x="19.5226%" y="1023.50">&lt;trem..</text></g><g><title>tremor_script::script::Script::run (5,002 samples, 4.34%)</title><rect x="19.2726%" y="997" width="4.3385%" height="15" fill="rgb(241,158,50)" fg:x="22220" fg:w="5002"/><text x="19.5226%" y="1007.50">tremo..</text></g><g><title>tremor_script::ast::Script::run (5,002 samples, 4.34%)</title><rect x="19.2726%" y="981" width="4.3385%" height="15" fill="rgb(213,121,41)" fg:x="22220" fg:w="5002"/><text x="19.5226%" y="991.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,002 samples, 4.34%)</title><rect x="19.2726%" y="965" width="4.3385%" height="15" fill="rgb(240,92,3)" fg:x="22220" fg:w="5002"/><text x="19.5226%" y="975.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,409 samples, 3.82%)</title><rect x="19.7870%" y="949" width="3.8242%" height="15" fill="rgb(205,123,3)" fg:x="22813" fg:w="4409"/><text x="20.0370%" y="959.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,409 samples, 3.82%)</title><rect x="19.7870%" y="933" width="3.8242%" height="15" fill="rgb(205,97,47)" fg:x="22813" fg:w="4409"/><text x="20.0370%" y="943.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,409 samples, 3.82%)</title><rect x="19.7870%" y="917" width="3.8242%" height="15" fill="rgb(247,152,14)" fg:x="22813" fg:w="4409"/><text x="20.0370%" y="927.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (72 samples, 0.06%)</title><rect x="23.5487%" y="901" width="0.0624%" height="15" fill="rgb(248,195,53)" fg:x="27150" fg:w="72"/><text x="23.7987%" y="911.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (72 samples, 0.06%)</title><rect x="23.5487%" y="885" width="0.0624%" height="15" fill="rgb(226,201,16)" fg:x="27150" fg:w="72"/><text x="23.7987%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.01%)</title><rect x="23.6250%" y="1045" width="0.0104%" height="15" fill="rgb(205,98,0)" fg:x="27238" fg:w="12"/><text x="23.8750%" y="1055.50"></text></g><g><title>[libc-2.31.so] (170 samples, 0.15%)</title><rect x="23.6372%" y="1045" width="0.1475%" height="15" fill="rgb(214,191,48)" fg:x="27252" fg:w="170"/><text x="23.8872%" y="1055.50"></text></g><g><title>__clock_gettime (42 samples, 0.04%)</title><rect x="23.7976%" y="1045" width="0.0364%" height="15" fill="rgb(237,112,39)" fg:x="27437" fg:w="42"/><text x="24.0476%" y="1055.50"></text></g><g><title>__vdso_clock_gettime (19 samples, 0.02%)</title><rect x="23.8393%" y="1045" width="0.0165%" height="15" fill="rgb(247,203,27)" fg:x="27485" fg:w="19"/><text x="24.0893%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (19 samples, 0.02%)</title><rect x="23.8557%" y="1045" width="0.0165%" height="15" fill="rgb(235,124,28)" fg:x="27504" fg:w="19"/><text x="24.1057%" y="1055.50"></text></g><g><title>abi_stable::erased_types::iterator::next (15 samples, 0.01%)</title><rect x="23.8722%" y="1045" width="0.0130%" height="15" fill="rgb(208,207,46)" fg:x="27523" fg:w="15"/><text x="24.1222%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (17 samples, 0.01%)</title><rect x="23.9017%" y="1045" width="0.0147%" height="15" fill="rgb(234,176,4)" fg:x="27557" fg:w="17"/><text x="24.1517%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (100 samples, 0.09%)</title><rect x="23.9165%" y="1045" width="0.0867%" height="15" fill="rgb(230,133,28)" fg:x="27574" fg:w="100"/><text x="24.1665%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (44 samples, 0.04%)</title><rect x="24.0032%" y="1045" width="0.0382%" height="15" fill="rgb(211,137,40)" fg:x="27674" fg:w="44"/><text x="24.2532%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (20 samples, 0.02%)</title><rect x="24.0509%" y="1045" width="0.0173%" height="15" fill="rgb(254,35,13)" fg:x="27729" fg:w="20"/><text x="24.3009%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (15 samples, 0.01%)</title><rect x="24.0682%" y="1045" width="0.0130%" height="15" fill="rgb(225,49,51)" fg:x="27749" fg:w="15"/><text x="24.3182%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (33 samples, 0.03%)</title><rect x="24.0865%" y="1045" width="0.0286%" height="15" fill="rgb(251,10,15)" fg:x="27770" fg:w="33"/><text x="24.3365%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (40 samples, 0.03%)</title><rect x="24.1151%" y="1045" width="0.0347%" height="15" fill="rgb(228,207,15)" fg:x="27803" fg:w="40"/><text x="24.3651%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.02%)</title><rect x="24.1342%" y="1029" width="0.0156%" height="15" fill="rgb(241,99,19)" fg:x="27825" fg:w="18"/><text x="24.3842%" y="1039.50"></text></g><g><title>core::mem::drop (18 samples, 0.02%)</title><rect x="24.1342%" y="1013" width="0.0156%" height="15" fill="rgb(207,104,49)" fg:x="27825" fg:w="18"/><text x="24.3842%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="24.1342%" y="997" width="0.0156%" height="15" fill="rgb(234,99,18)" fg:x="27825" fg:w="18"/><text x="24.3842%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="24.1342%" y="981" width="0.0156%" height="15" fill="rgb(213,191,49)" fg:x="27825" fg:w="18"/><text x="24.3842%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (18 samples, 0.02%)</title><rect x="24.1342%" y="965" width="0.0156%" height="15" fill="rgb(210,226,19)" fg:x="27825" fg:w="18"/><text x="24.3842%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (18 samples, 0.02%)</title><rect x="24.1342%" y="949" width="0.0156%" height="15" fill="rgb(229,97,18)" fg:x="27825" fg:w="18"/><text x="24.3842%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.02%)</title><rect x="24.1342%" y="933" width="0.0156%" height="15" fill="rgb(211,167,15)" fg:x="27825" fg:w="18"/><text x="24.3842%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (22 samples, 0.02%)</title><rect x="24.1671%" y="1045" width="0.0191%" height="15" fill="rgb(210,169,34)" fg:x="27863" fg:w="22"/><text x="24.4171%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="24.1723%" y="1029" width="0.0139%" height="15" fill="rgb(241,121,31)" fg:x="27869" fg:w="16"/><text x="24.4223%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="24.1723%" y="1013" width="0.0139%" height="15" fill="rgb(232,40,11)" fg:x="27869" fg:w="16"/><text x="24.4223%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="24.1723%" y="997" width="0.0139%" height="15" fill="rgb(205,86,26)" fg:x="27869" fg:w="16"/><text x="24.4223%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (21 samples, 0.02%)</title><rect x="24.1862%" y="1045" width="0.0182%" height="15" fill="rgb(231,126,28)" fg:x="27885" fg:w="21"/><text x="24.4362%" y="1055.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (19 samples, 0.02%)</title><rect x="24.2070%" y="1045" width="0.0165%" height="15" fill="rgb(219,221,18)" fg:x="27909" fg:w="19"/><text x="24.4570%" y="1055.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (36 samples, 0.03%)</title><rect x="24.3649%" y="661" width="0.0312%" height="15" fill="rgb(211,40,0)" fg:x="28091" fg:w="36"/><text x="24.6149%" y="671.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="24.3744%" y="645" width="0.0217%" height="15" fill="rgb(239,85,43)" fg:x="28102" fg:w="25"/><text x="24.6244%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (63 samples, 0.05%)</title><rect x="24.3961%" y="661" width="0.0546%" height="15" fill="rgb(231,55,21)" fg:x="28127" fg:w="63"/><text x="24.6461%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (61 samples, 0.05%)</title><rect x="24.3978%" y="645" width="0.0529%" height="15" fill="rgb(225,184,43)" fg:x="28129" fg:w="61"/><text x="24.6478%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (59 samples, 0.05%)</title><rect x="24.3996%" y="629" width="0.0512%" height="15" fill="rgb(251,158,41)" fg:x="28131" fg:w="59"/><text x="24.6496%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (46 samples, 0.04%)</title><rect x="24.4108%" y="613" width="0.0399%" height="15" fill="rgb(234,159,37)" fg:x="28144" fg:w="46"/><text x="24.6608%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (46 samples, 0.04%)</title><rect x="24.4108%" y="597" width="0.0399%" height="15" fill="rgb(216,204,22)" fg:x="28144" fg:w="46"/><text x="24.6608%" y="607.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.10%)</title><rect x="24.4568%" y="645" width="0.0963%" height="15" fill="rgb(214,17,3)" fg:x="28197" fg:w="111"/><text x="24.7068%" y="655.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="24.6303%" y="629" width="0.0451%" height="15" fill="rgb(212,111,17)" fg:x="28397" fg:w="52"/><text x="24.8803%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (62 samples, 0.05%)</title><rect x="24.7179%" y="341" width="0.0538%" height="15" fill="rgb(221,157,24)" fg:x="28498" fg:w="62"/><text x="24.9679%" y="351.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (89 samples, 0.08%)</title><rect x="24.6953%" y="501" width="0.0772%" height="15" fill="rgb(252,16,13)" fg:x="28472" fg:w="89"/><text x="24.9453%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (89 samples, 0.08%)</title><rect x="24.6953%" y="485" width="0.0772%" height="15" fill="rgb(221,62,2)" fg:x="28472" fg:w="89"/><text x="24.9453%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (87 samples, 0.08%)</title><rect x="24.6971%" y="469" width="0.0755%" height="15" fill="rgb(247,87,22)" fg:x="28474" fg:w="87"/><text x="24.9471%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (85 samples, 0.07%)</title><rect x="24.6988%" y="453" width="0.0737%" height="15" fill="rgb(215,73,9)" fg:x="28476" fg:w="85"/><text x="24.9488%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.07%)</title><rect x="24.6997%" y="437" width="0.0729%" height="15" fill="rgb(207,175,33)" fg:x="28477" fg:w="84"/><text x="24.9497%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.07%)</title><rect x="24.6997%" y="421" width="0.0729%" height="15" fill="rgb(243,129,54)" fg:x="28477" fg:w="84"/><text x="24.9497%" y="431.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.07%)</title><rect x="24.6997%" y="405" width="0.0729%" height="15" fill="rgb(227,119,45)" fg:x="28477" fg:w="84"/><text x="24.9497%" y="415.50"></text></g><g><title>__rg_alloc (84 samples, 0.07%)</title><rect x="24.6997%" y="389" width="0.0729%" height="15" fill="rgb(205,109,36)" fg:x="28477" fg:w="84"/><text x="24.9497%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (84 samples, 0.07%)</title><rect x="24.6997%" y="373" width="0.0729%" height="15" fill="rgb(205,6,39)" fg:x="28477" fg:w="84"/><text x="24.9497%" y="383.50"></text></g><g><title>sn_rust_alloc (83 samples, 0.07%)</title><rect x="24.7005%" y="357" width="0.0720%" height="15" fill="rgb(221,32,16)" fg:x="28478" fg:w="83"/><text x="24.9505%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (108 samples, 0.09%)</title><rect x="24.6884%" y="549" width="0.0937%" height="15" fill="rgb(228,144,50)" fg:x="28464" fg:w="108"/><text x="24.9384%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (107 samples, 0.09%)</title><rect x="24.6893%" y="533" width="0.0928%" height="15" fill="rgb(229,201,53)" fg:x="28465" fg:w="107"/><text x="24.9393%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (107 samples, 0.09%)</title><rect x="24.6893%" y="517" width="0.0928%" height="15" fill="rgb(249,153,27)" fg:x="28465" fg:w="107"/><text x="24.9393%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (119 samples, 0.10%)</title><rect x="24.6884%" y="565" width="0.1032%" height="15" fill="rgb(227,106,25)" fg:x="28464" fg:w="119"/><text x="24.9384%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (281 samples, 0.24%)</title><rect x="24.6797%" y="629" width="0.2437%" height="15" fill="rgb(230,65,29)" fg:x="28454" fg:w="281"/><text x="24.9297%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (278 samples, 0.24%)</title><rect x="24.6823%" y="613" width="0.2411%" height="15" fill="rgb(221,57,46)" fg:x="28457" fg:w="278"/><text x="24.9323%" y="623.50"></text></g><g><title>value_trait::Builder::object (276 samples, 0.24%)</title><rect x="24.6841%" y="597" width="0.2394%" height="15" fill="rgb(229,161,17)" fg:x="28459" fg:w="276"/><text x="24.9341%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (271 samples, 0.24%)</title><rect x="24.6884%" y="581" width="0.2351%" height="15" fill="rgb(222,213,11)" fg:x="28464" fg:w="271"/><text x="24.9384%" y="591.50"></text></g><g><title>tremor_value::value::Value::Object (152 samples, 0.13%)</title><rect x="24.7916%" y="565" width="0.1318%" height="15" fill="rgb(235,35,13)" fg:x="28583" fg:w="152"/><text x="25.0416%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (49 samples, 0.04%)</title><rect x="24.9278%" y="613" width="0.0425%" height="15" fill="rgb(233,158,34)" fg:x="28740" fg:w="49"/><text x="25.1778%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (49 samples, 0.04%)</title><rect x="24.9278%" y="597" width="0.0425%" height="15" fill="rgb(215,151,48)" fg:x="28740" fg:w="49"/><text x="25.1778%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (49 samples, 0.04%)</title><rect x="24.9278%" y="581" width="0.0425%" height="15" fill="rgb(229,84,14)" fg:x="28740" fg:w="49"/><text x="25.1778%" y="591.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="24.9391%" y="565" width="0.0312%" height="15" fill="rgb(229,68,14)" fg:x="28753" fg:w="36"/><text x="25.1891%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="24.9746%" y="517" width="0.0278%" height="15" fill="rgb(243,106,26)" fg:x="28794" fg:w="32"/><text x="25.2246%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (32 samples, 0.03%)</title><rect x="24.9746%" y="501" width="0.0278%" height="15" fill="rgb(206,45,38)" fg:x="28794" fg:w="32"/><text x="25.2246%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (26 samples, 0.02%)</title><rect x="24.9798%" y="485" width="0.0226%" height="15" fill="rgb(226,6,15)" fg:x="28800" fg:w="26"/><text x="25.2298%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (26 samples, 0.02%)</title><rect x="24.9798%" y="469" width="0.0226%" height="15" fill="rgb(232,22,54)" fg:x="28800" fg:w="26"/><text x="25.2298%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="24.9798%" y="453" width="0.0226%" height="15" fill="rgb(229,222,32)" fg:x="28800" fg:w="26"/><text x="25.2298%" y="463.50"></text></g><g><title>sn_rust_dealloc (20 samples, 0.02%)</title><rect x="24.9850%" y="437" width="0.0173%" height="15" fill="rgb(228,62,29)" fg:x="28806" fg:w="20"/><text x="25.2350%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (46 samples, 0.04%)</title><rect x="24.9703%" y="581" width="0.0399%" height="15" fill="rgb(251,103,34)" fg:x="28789" fg:w="46"/><text x="25.2203%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (45 samples, 0.04%)</title><rect x="24.9712%" y="565" width="0.0390%" height="15" fill="rgb(233,12,30)" fg:x="28790" fg:w="45"/><text x="25.2212%" y="575.50"></text></g><g><title>core::mem::drop (41 samples, 0.04%)</title><rect x="24.9746%" y="549" width="0.0356%" height="15" fill="rgb(238,52,0)" fg:x="28794" fg:w="41"/><text x="25.2246%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (41 samples, 0.04%)</title><rect x="24.9746%" y="533" width="0.0356%" height="15" fill="rgb(223,98,5)" fg:x="28794" fg:w="41"/><text x="25.2246%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (107 samples, 0.09%)</title><rect x="24.9278%" y="629" width="0.0928%" height="15" fill="rgb(228,75,37)" fg:x="28740" fg:w="107"/><text x="25.1778%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (58 samples, 0.05%)</title><rect x="24.9703%" y="613" width="0.0503%" height="15" fill="rgb(205,115,49)" fg:x="28789" fg:w="58"/><text x="25.2203%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (58 samples, 0.05%)</title><rect x="24.9703%" y="597" width="0.0503%" height="15" fill="rgb(250,154,43)" fg:x="28789" fg:w="58"/><text x="25.2203%" y="607.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="25.0102%" y="581" width="0.0104%" height="15" fill="rgb(226,43,29)" fg:x="28835" fg:w="12"/><text x="25.2602%" y="591.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="25.0388%" y="565" width="0.0104%" height="15" fill="rgb(249,228,39)" fg:x="28868" fg:w="12"/><text x="25.2888%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (34 samples, 0.03%)</title><rect x="25.0206%" y="629" width="0.0295%" height="15" fill="rgb(216,79,43)" fg:x="28847" fg:w="34"/><text x="25.2706%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="25.0258%" y="613" width="0.0243%" height="15" fill="rgb(228,95,12)" fg:x="28853" fg:w="28"/><text x="25.2758%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="25.0258%" y="597" width="0.0243%" height="15" fill="rgb(249,221,15)" fg:x="28853" fg:w="28"/><text x="25.2758%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="25.0258%" y="581" width="0.0243%" height="15" fill="rgb(233,34,13)" fg:x="28853" fg:w="28"/><text x="25.2758%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (17 samples, 0.01%)</title><rect x="25.0553%" y="613" width="0.0147%" height="15" fill="rgb(214,103,39)" fg:x="28887" fg:w="17"/><text x="25.3053%" y="623.50"></text></g><g><title>core::time::Duration::as_nanos (14 samples, 0.01%)</title><rect x="25.0700%" y="613" width="0.0121%" height="15" fill="rgb(251,126,39)" fg:x="28904" fg:w="14"/><text x="25.3200%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (40 samples, 0.03%)</title><rect x="25.0822%" y="597" width="0.0347%" height="15" fill="rgb(214,216,36)" fg:x="28918" fg:w="40"/><text x="25.3322%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (70 samples, 0.06%)</title><rect x="25.0822%" y="613" width="0.0607%" height="15" fill="rgb(220,221,8)" fg:x="28918" fg:w="70"/><text x="25.3322%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (30 samples, 0.03%)</title><rect x="25.1169%" y="597" width="0.0260%" height="15" fill="rgb(240,216,3)" fg:x="28958" fg:w="30"/><text x="25.3669%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.03%)</title><rect x="25.1169%" y="581" width="0.0260%" height="15" fill="rgb(232,218,17)" fg:x="28958" fg:w="30"/><text x="25.3669%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (974 samples, 0.84%)</title><rect x="24.4507%" y="661" width="0.8448%" height="15" fill="rgb(229,163,45)" fg:x="28190" fg:w="974"/><text x="24.7007%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (856 samples, 0.74%)</title><rect x="24.5531%" y="645" width="0.7425%" height="15" fill="rgb(231,110,42)" fg:x="28308" fg:w="856"/><text x="24.8031%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (283 samples, 0.25%)</title><rect x="25.0501%" y="629" width="0.2455%" height="15" fill="rgb(208,170,48)" fg:x="28881" fg:w="283"/><text x="25.3001%" y="639.50"></text></g><g><title>std::time::SystemTime::now (176 samples, 0.15%)</title><rect x="25.1429%" y="613" width="0.1527%" height="15" fill="rgb(239,116,25)" fg:x="28988" fg:w="176"/><text x="25.3929%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (176 samples, 0.15%)</title><rect x="25.1429%" y="597" width="0.1527%" height="15" fill="rgb(219,200,50)" fg:x="28988" fg:w="176"/><text x="25.3929%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::now (176 samples, 0.15%)</title><rect x="25.1429%" y="581" width="0.1527%" height="15" fill="rgb(245,200,0)" fg:x="28988" fg:w="176"/><text x="25.3929%" y="591.50"></text></g><g><title>__clock_gettime (140 samples, 0.12%)</title><rect x="25.1741%" y="565" width="0.1214%" height="15" fill="rgb(245,119,33)" fg:x="29024" fg:w="140"/><text x="25.4241%" y="575.50"></text></g><g><title>__vdso_clock_gettime (128 samples, 0.11%)</title><rect x="25.1845%" y="549" width="0.1110%" height="15" fill="rgb(231,125,12)" fg:x="29036" fg:w="128"/><text x="25.4345%" y="559.50"></text></g><g><title>[[vdso]] (114 samples, 0.10%)</title><rect x="25.1967%" y="533" width="0.0989%" height="15" fill="rgb(216,96,41)" fg:x="29050" fg:w="114"/><text x="25.4467%" y="543.50"></text></g><g><title>[libc-2.31.so] (224 samples, 0.19%)</title><rect x="25.2956%" y="661" width="0.1943%" height="15" fill="rgb(248,43,45)" fg:x="29164" fg:w="224"/><text x="25.5456%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,507 samples, 1.31%)</title><rect x="24.2322%" y="693" width="1.3071%" height="15" fill="rgb(217,222,7)" fg:x="27938" fg:w="1507"/><text x="24.4822%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,507 samples, 1.31%)</title><rect x="24.2322%" y="677" width="1.3071%" height="15" fill="rgb(233,28,6)" fg:x="27938" fg:w="1507"/><text x="24.4822%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (43 samples, 0.04%)</title><rect x="25.5020%" y="661" width="0.0373%" height="15" fill="rgb(231,218,15)" fg:x="29402" fg:w="43"/><text x="25.7520%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (154 samples, 0.13%)</title><rect x="25.5436%" y="533" width="0.1336%" height="15" fill="rgb(226,171,48)" fg:x="29450" fg:w="154"/><text x="25.7936%" y="543.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (154 samples, 0.13%)</title><rect x="25.5436%" y="517" width="0.1336%" height="15" fill="rgb(235,201,9)" fg:x="29450" fg:w="154"/><text x="25.7936%" y="527.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (154 samples, 0.13%)</title><rect x="25.5436%" y="501" width="0.1336%" height="15" fill="rgb(217,80,15)" fg:x="29450" fg:w="154"/><text x="25.7936%" y="511.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.13%)</title><rect x="25.5497%" y="485" width="0.1275%" height="15" fill="rgb(219,152,8)" fg:x="29457" fg:w="147"/><text x="25.7997%" y="495.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (243 samples, 0.21%)</title><rect x="25.5393%" y="613" width="0.2108%" height="15" fill="rgb(243,107,38)" fg:x="29445" fg:w="243"/><text x="25.7893%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (243 samples, 0.21%)</title><rect x="25.5393%" y="597" width="0.2108%" height="15" fill="rgb(231,17,5)" fg:x="29445" fg:w="243"/><text x="25.7893%" y="607.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (243 samples, 0.21%)</title><rect x="25.5393%" y="581" width="0.2108%" height="15" fill="rgb(209,25,54)" fg:x="29445" fg:w="243"/><text x="25.7893%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (243 samples, 0.21%)</title><rect x="25.5393%" y="565" width="0.2108%" height="15" fill="rgb(219,0,2)" fg:x="29445" fg:w="243"/><text x="25.7893%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (243 samples, 0.21%)</title><rect x="25.5393%" y="549" width="0.2108%" height="15" fill="rgb(246,9,5)" fg:x="29445" fg:w="243"/><text x="25.7893%" y="559.50"></text></g><g><title>std::panic::catch_unwind (84 samples, 0.07%)</title><rect x="25.6772%" y="533" width="0.0729%" height="15" fill="rgb(226,159,4)" fg:x="29604" fg:w="84"/><text x="25.9272%" y="543.50"></text></g><g><title>std::panicking::try (84 samples, 0.07%)</title><rect x="25.6772%" y="517" width="0.0729%" height="15" fill="rgb(219,175,34)" fg:x="29604" fg:w="84"/><text x="25.9272%" y="527.50"></text></g><g><title>std::panicking::try::do_call (84 samples, 0.07%)</title><rect x="25.6772%" y="501" width="0.0729%" height="15" fill="rgb(236,10,46)" fg:x="29604" fg:w="84"/><text x="25.9272%" y="511.50"></text></g><g><title>[libc-2.31.so] (59 samples, 0.05%)</title><rect x="25.6989%" y="485" width="0.0512%" height="15" fill="rgb(240,211,16)" fg:x="29629" fg:w="59"/><text x="25.9489%" y="495.50"></text></g><g><title>async_global_executor::reactor::block_on (1,772 samples, 1.54%)</title><rect x="24.2322%" y="1045" width="1.5370%" height="15" fill="rgb(205,3,43)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="1055.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,772 samples, 1.54%)</title><rect x="24.2322%" y="1029" width="1.5370%" height="15" fill="rgb(245,7,22)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="1039.50"></text></g><g><title>async_io::driver::block_on (1,772 samples, 1.54%)</title><rect x="24.2322%" y="1013" width="1.5370%" height="15" fill="rgb(239,132,32)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="1023.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="997" width="1.5370%" height="15" fill="rgb(228,202,34)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="981" width="1.5370%" height="15" fill="rgb(254,200,22)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="991.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,772 samples, 1.54%)</title><rect x="24.2322%" y="965" width="1.5370%" height="15" fill="rgb(219,10,39)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="975.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="949" width="1.5370%" height="15" fill="rgb(226,210,39)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="933" width="1.5370%" height="15" fill="rgb(208,219,16)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="943.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,772 samples, 1.54%)</title><rect x="24.2322%" y="917" width="1.5370%" height="15" fill="rgb(216,158,51)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="927.50"></text></g><g><title>async_task::runnable::Runnable::run (1,772 samples, 1.54%)</title><rect x="24.2322%" y="901" width="1.5370%" height="15" fill="rgb(233,14,44)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,772 samples, 1.54%)</title><rect x="24.2322%" y="885" width="1.5370%" height="15" fill="rgb(237,97,39)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="895.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="869" width="1.5370%" height="15" fill="rgb(218,198,43)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="853" width="1.5370%" height="15" fill="rgb(231,104,20)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="863.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,772 samples, 1.54%)</title><rect x="24.2322%" y="837" width="1.5370%" height="15" fill="rgb(254,36,13)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="847.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="821" width="1.5370%" height="15" fill="rgb(248,14,50)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="831.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,772 samples, 1.54%)</title><rect x="24.2322%" y="805" width="1.5370%" height="15" fill="rgb(217,107,29)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,772 samples, 1.54%)</title><rect x="24.2322%" y="789" width="1.5370%" height="15" fill="rgb(251,169,33)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,772 samples, 1.54%)</title><rect x="24.2322%" y="773" width="1.5370%" height="15" fill="rgb(217,108,32)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="783.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,772 samples, 1.54%)</title><rect x="24.2322%" y="757" width="1.5370%" height="15" fill="rgb(219,66,42)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="767.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,772 samples, 1.54%)</title><rect x="24.2322%" y="741" width="1.5370%" height="15" fill="rgb(206,180,7)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,772 samples, 1.54%)</title><rect x="24.2322%" y="725" width="1.5370%" height="15" fill="rgb(208,226,31)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,772 samples, 1.54%)</title><rect x="24.2322%" y="709" width="1.5370%" height="15" fill="rgb(218,26,49)" fg:x="27938" fg:w="1772"/><text x="24.4822%" y="719.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (265 samples, 0.23%)</title><rect x="25.5393%" y="693" width="0.2298%" height="15" fill="rgb(233,197,48)" fg:x="29445" fg:w="265"/><text x="25.7893%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (265 samples, 0.23%)</title><rect x="25.5393%" y="677" width="0.2298%" height="15" fill="rgb(252,181,51)" fg:x="29445" fg:w="265"/><text x="25.7893%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (265 samples, 0.23%)</title><rect x="25.5393%" y="661" width="0.2298%" height="15" fill="rgb(253,90,19)" fg:x="29445" fg:w="265"/><text x="25.7893%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (265 samples, 0.23%)</title><rect x="25.5393%" y="645" width="0.2298%" height="15" fill="rgb(215,171,30)" fg:x="29445" fg:w="265"/><text x="25.7893%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (265 samples, 0.23%)</title><rect x="25.5393%" y="629" width="0.2298%" height="15" fill="rgb(214,222,9)" fg:x="29445" fg:w="265"/><text x="25.7893%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (22 samples, 0.02%)</title><rect x="25.7500%" y="613" width="0.0191%" height="15" fill="rgb(223,3,22)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (22 samples, 0.02%)</title><rect x="25.7500%" y="597" width="0.0191%" height="15" fill="rgb(225,196,46)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (22 samples, 0.02%)</title><rect x="25.7500%" y="581" width="0.0191%" height="15" fill="rgb(209,110,37)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (22 samples, 0.02%)</title><rect x="25.7500%" y="565" width="0.0191%" height="15" fill="rgb(249,89,12)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="25.7500%" y="549" width="0.0191%" height="15" fill="rgb(226,27,33)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="25.7500%" y="533" width="0.0191%" height="15" fill="rgb(213,82,22)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="25.7500%" y="517" width="0.0191%" height="15" fill="rgb(248,140,0)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="25.7500%" y="501" width="0.0191%" height="15" fill="rgb(228,106,3)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="25.7500%" y="485" width="0.0191%" height="15" fill="rgb(209,23,37)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="25.7500%" y="469" width="0.0191%" height="15" fill="rgb(241,93,50)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="479.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="25.7500%" y="453" width="0.0191%" height="15" fill="rgb(253,46,43)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="463.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="25.7500%" y="437" width="0.0191%" height="15" fill="rgb(226,206,43)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="25.7500%" y="421" width="0.0191%" height="15" fill="rgb(217,54,7)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="431.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="25.7500%" y="405" width="0.0191%" height="15" fill="rgb(223,5,52)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="25.7500%" y="389" width="0.0191%" height="15" fill="rgb(206,52,46)" fg:x="29688" fg:w="22"/><text x="26.0000%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (50 samples, 0.04%)</title><rect x="25.8116%" y="485" width="0.0434%" height="15" fill="rgb(253,136,11)" fg:x="29759" fg:w="50"/><text x="26.0616%" y="495.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.08%)</title><rect x="25.8559%" y="469" width="0.0798%" height="15" fill="rgb(208,106,33)" fg:x="29810" fg:w="92"/><text x="26.1059%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (158 samples, 0.14%)</title><rect x="25.8550%" y="485" width="0.1370%" height="15" fill="rgb(206,54,4)" fg:x="29809" fg:w="158"/><text x="26.1050%" y="495.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (65 samples, 0.06%)</title><rect x="25.9357%" y="469" width="0.0564%" height="15" fill="rgb(213,3,15)" fg:x="29902" fg:w="65"/><text x="26.1857%" y="479.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.05%)</title><rect x="25.9383%" y="453" width="0.0538%" height="15" fill="rgb(252,211,39)" fg:x="29905" fg:w="62"/><text x="26.1883%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (64 samples, 0.06%)</title><rect x="25.9920%" y="453" width="0.0555%" height="15" fill="rgb(223,6,36)" fg:x="29967" fg:w="64"/><text x="26.2420%" y="463.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (60 samples, 0.05%)</title><rect x="25.9955%" y="437" width="0.0520%" height="15" fill="rgb(252,169,45)" fg:x="29971" fg:w="60"/><text x="26.2455%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (60 samples, 0.05%)</title><rect x="25.9955%" y="421" width="0.0520%" height="15" fill="rgb(212,48,26)" fg:x="29971" fg:w="60"/><text x="26.2455%" y="431.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="25.9981%" y="405" width="0.0494%" height="15" fill="rgb(251,102,48)" fg:x="29974" fg:w="57"/><text x="26.2481%" y="415.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (146 samples, 0.13%)</title><rect x="25.9920%" y="485" width="0.1266%" height="15" fill="rgb(243,208,16)" fg:x="29967" fg:w="146"/><text x="26.2420%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (146 samples, 0.13%)</title><rect x="25.9920%" y="469" width="0.1266%" height="15" fill="rgb(219,96,24)" fg:x="29967" fg:w="146"/><text x="26.2420%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (74 samples, 0.06%)</title><rect x="26.0545%" y="453" width="0.0642%" height="15" fill="rgb(219,33,29)" fg:x="30039" fg:w="74"/><text x="26.3045%" y="463.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.06%)</title><rect x="26.0554%" y="437" width="0.0633%" height="15" fill="rgb(223,176,5)" fg:x="30040" fg:w="73"/><text x="26.3054%" y="447.50"></text></g><g><title>[libc-2.31.so] (146 samples, 0.13%)</title><rect x="26.1187%" y="485" width="0.1266%" height="15" fill="rgb(228,140,14)" fg:x="30113" fg:w="146"/><text x="26.3687%" y="495.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (37 samples, 0.03%)</title><rect x="26.2453%" y="485" width="0.0321%" height="15" fill="rgb(217,179,31)" fg:x="30259" fg:w="37"/><text x="26.4953%" y="495.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="26.2488%" y="469" width="0.0286%" height="15" fill="rgb(230,9,30)" fg:x="30263" fg:w="33"/><text x="26.4988%" y="479.50"></text></g><g><title>sn_rust_dealloc (56 samples, 0.05%)</title><rect x="26.2887%" y="437" width="0.0486%" height="15" fill="rgb(230,136,20)" fg:x="30309" fg:w="56"/><text x="26.5387%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (70 samples, 0.06%)</title><rect x="26.2774%" y="485" width="0.0607%" height="15" fill="rgb(215,210,22)" fg:x="30296" fg:w="70"/><text x="26.5274%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (70 samples, 0.06%)</title><rect x="26.2774%" y="469" width="0.0607%" height="15" fill="rgb(218,43,5)" fg:x="30296" fg:w="70"/><text x="26.5274%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.06%)</title><rect x="26.2774%" y="453" width="0.0607%" height="15" fill="rgb(216,11,5)" fg:x="30296" fg:w="70"/><text x="26.5274%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (37 samples, 0.03%)</title><rect x="26.3398%" y="469" width="0.0321%" height="15" fill="rgb(209,82,29)" fg:x="30368" fg:w="37"/><text x="26.5898%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (29 samples, 0.03%)</title><rect x="26.3468%" y="453" width="0.0252%" height="15" fill="rgb(244,115,12)" fg:x="30376" fg:w="29"/><text x="26.5968%" y="463.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (29 samples, 0.03%)</title><rect x="26.3468%" y="437" width="0.0252%" height="15" fill="rgb(222,82,18)" fg:x="30376" fg:w="29"/><text x="26.5968%" y="447.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (29 samples, 0.03%)</title><rect x="26.3468%" y="421" width="0.0252%" height="15" fill="rgb(249,227,8)" fg:x="30376" fg:w="29"/><text x="26.5968%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (29 samples, 0.03%)</title><rect x="26.3468%" y="405" width="0.0252%" height="15" fill="rgb(253,141,45)" fg:x="30376" fg:w="29"/><text x="26.5968%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="26.3477%" y="389" width="0.0243%" height="15" fill="rgb(234,184,4)" fg:x="30377" fg:w="28"/><text x="26.5977%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="26.3477%" y="373" width="0.0243%" height="15" fill="rgb(218,194,23)" fg:x="30377" fg:w="28"/><text x="26.5977%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="26.3477%" y="357" width="0.0243%" height="15" fill="rgb(235,66,41)" fg:x="30377" fg:w="28"/><text x="26.5977%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="26.3477%" y="341" width="0.0243%" height="15" fill="rgb(245,217,1)" fg:x="30377" fg:w="28"/><text x="26.5977%" y="351.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="26.3485%" y="325" width="0.0234%" height="15" fill="rgb(229,91,1)" fg:x="30378" fg:w="27"/><text x="26.5985%" y="335.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="26.3485%" y="309" width="0.0234%" height="15" fill="rgb(207,101,30)" fg:x="30378" fg:w="27"/><text x="26.5985%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="26.3485%" y="293" width="0.0234%" height="15" fill="rgb(223,82,49)" fg:x="30378" fg:w="27"/><text x="26.5985%" y="303.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="26.3485%" y="277" width="0.0234%" height="15" fill="rgb(218,167,17)" fg:x="30378" fg:w="27"/><text x="26.5985%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (700 samples, 0.61%)</title><rect x="25.7717%" y="581" width="0.6071%" height="15" fill="rgb(208,103,14)" fg:x="29713" fg:w="700"/><text x="26.0217%" y="591.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (700 samples, 0.61%)</title><rect x="25.7717%" y="565" width="0.6071%" height="15" fill="rgb(238,20,8)" fg:x="29713" fg:w="700"/><text x="26.0217%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (700 samples, 0.61%)</title><rect x="25.7717%" y="549" width="0.6071%" height="15" fill="rgb(218,80,54)" fg:x="29713" fg:w="700"/><text x="26.0217%" y="559.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (700 samples, 0.61%)</title><rect x="25.7717%" y="533" width="0.6071%" height="15" fill="rgb(240,144,17)" fg:x="29713" fg:w="700"/><text x="26.0217%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (700 samples, 0.61%)</title><rect x="25.7717%" y="517" width="0.6071%" height="15" fill="rgb(245,27,50)" fg:x="29713" fg:w="700"/><text x="26.0217%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (697 samples, 0.60%)</title><rect x="25.7743%" y="501" width="0.6045%" height="15" fill="rgb(251,51,7)" fg:x="29716" fg:w="697"/><text x="26.0243%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (47 samples, 0.04%)</title><rect x="26.3381%" y="485" width="0.0408%" height="15" fill="rgb(245,217,29)" fg:x="30366" fg:w="47"/><text x="26.5881%" y="495.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (708 samples, 0.61%)</title><rect x="25.7691%" y="1045" width="0.6141%" height="15" fill="rgb(221,176,29)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (708 samples, 0.61%)</title><rect x="25.7691%" y="1029" width="0.6141%" height="15" fill="rgb(212,180,24)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="1039.50"></text></g><g><title>std::panicking::try (708 samples, 0.61%)</title><rect x="25.7691%" y="1013" width="0.6141%" height="15" fill="rgb(254,24,2)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (708 samples, 0.61%)</title><rect x="25.7691%" y="997" width="0.6141%" height="15" fill="rgb(230,100,2)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="1007.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="981" width="0.6141%" height="15" fill="rgb(219,142,25)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (708 samples, 0.61%)</title><rect x="25.7691%" y="965" width="0.6141%" height="15" fill="rgb(240,73,43)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (708 samples, 0.61%)</title><rect x="25.7691%" y="949" width="0.6141%" height="15" fill="rgb(214,114,15)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="933" width="0.6141%" height="15" fill="rgb(207,130,4)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on (708 samples, 0.61%)</title><rect x="25.7691%" y="917" width="0.6141%" height="15" fill="rgb(221,25,40)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="927.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="901" width="0.6141%" height="15" fill="rgb(241,184,7)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="911.50"></text></g><g><title>async_io::driver::block_on (708 samples, 0.61%)</title><rect x="25.7691%" y="885" width="0.6141%" height="15" fill="rgb(235,159,4)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="895.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="869" width="0.6141%" height="15" fill="rgb(214,87,48)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="853" width="0.6141%" height="15" fill="rgb(246,198,24)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="837" width="0.6141%" height="15" fill="rgb(209,66,40)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="847.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="821" width="0.6141%" height="15" fill="rgb(233,147,39)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="805" width="0.6141%" height="15" fill="rgb(231,145,52)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="789" width="0.6141%" height="15" fill="rgb(206,20,26)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="799.50"></text></g><g><title>async_task::runnable::Runnable::run (708 samples, 0.61%)</title><rect x="25.7691%" y="773" width="0.6141%" height="15" fill="rgb(238,220,4)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (708 samples, 0.61%)</title><rect x="25.7691%" y="757" width="0.6141%" height="15" fill="rgb(252,195,42)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="741" width="0.6141%" height="15" fill="rgb(209,10,6)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="725" width="0.6141%" height="15" fill="rgb(229,3,52)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="709" width="0.6141%" height="15" fill="rgb(253,49,37)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="719.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="693" width="0.6141%" height="15" fill="rgb(240,103,49)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="703.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (708 samples, 0.61%)</title><rect x="25.7691%" y="677" width="0.6141%" height="15" fill="rgb(250,182,30)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (708 samples, 0.61%)</title><rect x="25.7691%" y="661" width="0.6141%" height="15" fill="rgb(248,8,30)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (708 samples, 0.61%)</title><rect x="25.7691%" y="645" width="0.6141%" height="15" fill="rgb(237,120,30)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="655.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="629" width="0.6141%" height="15" fill="rgb(221,146,34)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="639.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (708 samples, 0.61%)</title><rect x="25.7691%" y="613" width="0.6141%" height="15" fill="rgb(242,55,13)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (708 samples, 0.61%)</title><rect x="25.7691%" y="597" width="0.6141%" height="15" fill="rgb(242,112,31)" fg:x="29710" fg:w="708"/><text x="26.0191%" y="607.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (287 samples, 0.25%)</title><rect x="26.6295%" y="725" width="0.2489%" height="15" fill="rgb(249,192,27)" fg:x="30702" fg:w="287"/><text x="26.8795%" y="735.50"></text></g><g><title>[libc-2.31.so] (242 samples, 0.21%)</title><rect x="26.6686%" y="709" width="0.2099%" height="15" fill="rgb(208,204,44)" fg:x="30747" fg:w="242"/><text x="26.9186%" y="719.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.10%)</title><rect x="26.9019%" y="709" width="0.1032%" height="15" fill="rgb(208,93,54)" fg:x="31016" fg:w="119"/><text x="27.1519%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (403 samples, 0.35%)</title><rect x="27.1083%" y="693" width="0.3495%" height="15" fill="rgb(242,1,31)" fg:x="31254" fg:w="403"/><text x="27.3583%" y="703.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.10%)</title><rect x="27.4657%" y="677" width="0.0989%" height="15" fill="rgb(241,83,25)" fg:x="31666" fg:w="114"/><text x="27.7157%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (205 samples, 0.18%)</title><rect x="27.4579%" y="693" width="0.1778%" height="15" fill="rgb(205,169,50)" fg:x="31657" fg:w="205"/><text x="27.7079%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (82 samples, 0.07%)</title><rect x="27.5646%" y="677" width="0.0711%" height="15" fill="rgb(239,186,37)" fg:x="31780" fg:w="82"/><text x="27.8146%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (103 samples, 0.09%)</title><rect x="27.6357%" y="661" width="0.0893%" height="15" fill="rgb(205,221,10)" fg:x="31862" fg:w="103"/><text x="27.8857%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (94 samples, 0.08%)</title><rect x="27.6435%" y="645" width="0.0815%" height="15" fill="rgb(218,196,15)" fg:x="31871" fg:w="94"/><text x="27.8935%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (94 samples, 0.08%)</title><rect x="27.6435%" y="629" width="0.0815%" height="15" fill="rgb(218,196,35)" fg:x="31871" fg:w="94"/><text x="27.8935%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="27.7476%" y="613" width="0.0104%" height="15" fill="rgb(233,63,24)" fg:x="31991" fg:w="12"/><text x="27.9976%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (12 samples, 0.01%)</title><rect x="27.7476%" y="597" width="0.0104%" height="15" fill="rgb(225,8,4)" fg:x="31991" fg:w="12"/><text x="27.9976%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (12 samples, 0.01%)</title><rect x="27.7476%" y="581" width="0.0104%" height="15" fill="rgb(234,105,35)" fg:x="31991" fg:w="12"/><text x="27.9976%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,224 samples, 1.93%)</title><rect x="27.7285%" y="645" width="1.9290%" height="15" fill="rgb(236,21,32)" fg:x="31969" fg:w="2224"/><text x="27.9785%" y="655.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,210 samples, 1.92%)</title><rect x="27.7406%" y="629" width="1.9169%" height="15" fill="rgb(228,109,6)" fg:x="31983" fg:w="2210"/><text x="27.9906%" y="639.50">a..</text></g><g><title>std::panic::catch_unwind (2,190 samples, 1.90%)</title><rect x="27.7580%" y="613" width="1.8995%" height="15" fill="rgb(229,215,31)" fg:x="32003" fg:w="2190"/><text x="28.0080%" y="623.50">s..</text></g><g><title>std::panicking::try (2,190 samples, 1.90%)</title><rect x="27.7580%" y="597" width="1.8995%" height="15" fill="rgb(221,52,54)" fg:x="32003" fg:w="2190"/><text x="28.0080%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (2,190 samples, 1.90%)</title><rect x="27.7580%" y="581" width="1.8995%" height="15" fill="rgb(252,129,43)" fg:x="32003" fg:w="2190"/><text x="28.0080%" y="591.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,231 samples, 1.94%)</title><rect x="27.7250%" y="661" width="1.9351%" height="15" fill="rgb(248,183,27)" fg:x="31965" fg:w="2231"/><text x="27.9750%" y="671.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,401 samples, 2.08%)</title><rect x="27.6357%" y="693" width="2.0825%" height="15" fill="rgb(250,0,22)" fg:x="31862" fg:w="2401"/><text x="27.8857%" y="703.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,401 samples, 2.08%)</title><rect x="27.6357%" y="677" width="2.0825%" height="15" fill="rgb(213,166,10)" fg:x="31862" fg:w="2401"/><text x="27.8857%" y="687.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (67 samples, 0.06%)</title><rect x="29.6601%" y="661" width="0.0581%" height="15" fill="rgb(207,163,36)" fg:x="34196" fg:w="67"/><text x="29.9101%" y="671.50"></text></g><g><title>[libc-2.31.so] (345 samples, 0.30%)</title><rect x="29.7182%" y="693" width="0.2992%" height="15" fill="rgb(208,122,22)" fg:x="34263" fg:w="345"/><text x="29.9682%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (37 samples, 0.03%)</title><rect x="30.0174%" y="693" width="0.0321%" height="15" fill="rgb(207,104,49)" fg:x="34608" fg:w="37"/><text x="30.2674%" y="703.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.03%)</title><rect x="30.0660%" y="645" width="0.0252%" height="15" fill="rgb(248,211,50)" fg:x="34664" fg:w="29"/><text x="30.3160%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="30.0495%" y="693" width="0.0425%" height="15" fill="rgb(217,13,45)" fg:x="34645" fg:w="49"/><text x="30.2995%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="30.0495%" y="677" width="0.0425%" height="15" fill="rgb(211,216,49)" fg:x="34645" fg:w="49"/><text x="30.2995%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="30.0495%" y="661" width="0.0425%" height="15" fill="rgb(221,58,53)" fg:x="34645" fg:w="49"/><text x="30.2995%" y="671.50"></text></g><g><title>[libc-2.31.so] (59 samples, 0.05%)</title><rect x="30.2603%" y="677" width="0.0512%" height="15" fill="rgb(220,112,41)" fg:x="34888" fg:w="59"/><text x="30.5103%" y="687.50"></text></g><g><title>[libc-2.31.so] (112 samples, 0.10%)</title><rect x="30.3288%" y="597" width="0.0971%" height="15" fill="rgb(236,38,28)" fg:x="34967" fg:w="112"/><text x="30.5788%" y="607.50"></text></g><g><title>[libc-2.31.so] (76 samples, 0.07%)</title><rect x="30.4364%" y="581" width="0.0659%" height="15" fill="rgb(227,195,22)" fg:x="35091" fg:w="76"/><text x="30.6864%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="30.5899%" y="469" width="0.0165%" height="15" fill="rgb(214,55,33)" fg:x="35268" fg:w="19"/><text x="30.8399%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (356 samples, 0.31%)</title><rect x="30.3115%" y="677" width="0.3088%" height="15" fill="rgb(248,80,13)" fg:x="34947" fg:w="356"/><text x="30.5615%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (346 samples, 0.30%)</title><rect x="30.3201%" y="661" width="0.3001%" height="15" fill="rgb(238,52,6)" fg:x="34957" fg:w="346"/><text x="30.5701%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (346 samples, 0.30%)</title><rect x="30.3201%" y="645" width="0.3001%" height="15" fill="rgb(224,198,47)" fg:x="34957" fg:w="346"/><text x="30.5701%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (346 samples, 0.30%)</title><rect x="30.3201%" y="629" width="0.3001%" height="15" fill="rgb(233,171,20)" fg:x="34957" fg:w="346"/><text x="30.5701%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (346 samples, 0.30%)</title><rect x="30.3201%" y="613" width="0.3001%" height="15" fill="rgb(241,30,25)" fg:x="34957" fg:w="346"/><text x="30.5701%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (224 samples, 0.19%)</title><rect x="30.4260%" y="597" width="0.1943%" height="15" fill="rgb(207,171,38)" fg:x="35079" fg:w="224"/><text x="30.6760%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (136 samples, 0.12%)</title><rect x="30.5023%" y="581" width="0.1180%" height="15" fill="rgb(234,70,1)" fg:x="35167" fg:w="136"/><text x="30.7523%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (136 samples, 0.12%)</title><rect x="30.5023%" y="565" width="0.1180%" height="15" fill="rgb(232,178,18)" fg:x="35167" fg:w="136"/><text x="30.7523%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (136 samples, 0.12%)</title><rect x="30.5023%" y="549" width="0.1180%" height="15" fill="rgb(241,78,40)" fg:x="35167" fg:w="136"/><text x="30.7523%" y="559.50"></text></g><g><title>alloc::alloc::alloc (134 samples, 0.12%)</title><rect x="30.5040%" y="533" width="0.1162%" height="15" fill="rgb(222,35,25)" fg:x="35169" fg:w="134"/><text x="30.7540%" y="543.50"></text></g><g><title>__rg_alloc (134 samples, 0.12%)</title><rect x="30.5040%" y="517" width="0.1162%" height="15" fill="rgb(207,92,16)" fg:x="35169" fg:w="134"/><text x="30.7540%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (134 samples, 0.12%)</title><rect x="30.5040%" y="501" width="0.1162%" height="15" fill="rgb(216,59,51)" fg:x="35169" fg:w="134"/><text x="30.7540%" y="511.50"></text></g><g><title>sn_rust_alloc (130 samples, 0.11%)</title><rect x="30.5075%" y="485" width="0.1128%" height="15" fill="rgb(213,80,28)" fg:x="35173" fg:w="130"/><text x="30.7575%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="30.6064%" y="469" width="0.0139%" height="15" fill="rgb(220,93,7)" fg:x="35287" fg:w="16"/><text x="30.8564%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,172 samples, 3.62%)</title><rect x="27.0051%" y="709" width="3.6186%" height="15" fill="rgb(225,24,44)" fg:x="31135" fg:w="4172"/><text x="27.2551%" y="719.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (613 samples, 0.53%)</title><rect x="30.0920%" y="693" width="0.5317%" height="15" fill="rgb(243,74,40)" fg:x="34694" fg:w="613"/><text x="30.3420%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="30.7599%" y="597" width="0.0226%" height="15" fill="rgb(228,39,7)" fg:x="35464" fg:w="26"/><text x="31.0099%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (26 samples, 0.02%)</title><rect x="30.7599%" y="581" width="0.0226%" height="15" fill="rgb(227,79,8)" fg:x="35464" fg:w="26"/><text x="31.0099%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (26 samples, 0.02%)</title><rect x="30.7599%" y="565" width="0.0226%" height="15" fill="rgb(236,58,11)" fg:x="35464" fg:w="26"/><text x="31.0099%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (45 samples, 0.04%)</title><rect x="30.7530%" y="613" width="0.0390%" height="15" fill="rgb(249,63,35)" fg:x="35456" fg:w="45"/><text x="31.0030%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,577 samples, 3.97%)</title><rect x="26.8880%" y="725" width="3.9699%" height="15" fill="rgb(252,114,16)" fg:x="31000" fg:w="4577"/><text x="27.1380%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (270 samples, 0.23%)</title><rect x="30.6237%" y="709" width="0.2342%" height="15" fill="rgb(254,151,24)" fg:x="35307" fg:w="270"/><text x="30.8737%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (135 samples, 0.12%)</title><rect x="30.7408%" y="693" width="0.1171%" height="15" fill="rgb(253,54,39)" fg:x="35442" fg:w="135"/><text x="30.9908%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (124 samples, 0.11%)</title><rect x="30.7503%" y="677" width="0.1076%" height="15" fill="rgb(243,25,45)" fg:x="35453" fg:w="124"/><text x="31.0003%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (124 samples, 0.11%)</title><rect x="30.7503%" y="661" width="0.1076%" height="15" fill="rgb(234,134,9)" fg:x="35453" fg:w="124"/><text x="31.0003%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (124 samples, 0.11%)</title><rect x="30.7503%" y="645" width="0.1076%" height="15" fill="rgb(227,166,31)" fg:x="35453" fg:w="124"/><text x="31.0003%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (124 samples, 0.11%)</title><rect x="30.7503%" y="629" width="0.1076%" height="15" fill="rgb(245,143,41)" fg:x="35453" fg:w="124"/><text x="31.0003%" y="639.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.07%)</title><rect x="30.7920%" y="613" width="0.0659%" height="15" fill="rgb(238,181,32)" fg:x="35501" fg:w="76"/><text x="31.0420%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (33 samples, 0.03%)</title><rect x="30.8744%" y="613" width="0.0286%" height="15" fill="rgb(224,113,18)" fg:x="35596" fg:w="33"/><text x="31.1244%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (29 samples, 0.03%)</title><rect x="30.8779%" y="597" width="0.0252%" height="15" fill="rgb(240,229,28)" fg:x="35600" fg:w="29"/><text x="31.1279%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (29 samples, 0.03%)</title><rect x="30.8779%" y="581" width="0.0252%" height="15" fill="rgb(250,185,3)" fg:x="35600" fg:w="29"/><text x="31.1279%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (21 samples, 0.02%)</title><rect x="30.8848%" y="565" width="0.0182%" height="15" fill="rgb(212,59,25)" fg:x="35608" fg:w="21"/><text x="31.1348%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.02%)</title><rect x="30.8857%" y="549" width="0.0173%" height="15" fill="rgb(221,87,20)" fg:x="35609" fg:w="20"/><text x="31.1357%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.02%)</title><rect x="30.8857%" y="533" width="0.0173%" height="15" fill="rgb(213,74,28)" fg:x="35609" fg:w="20"/><text x="31.1357%" y="543.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.02%)</title><rect x="30.8857%" y="517" width="0.0173%" height="15" fill="rgb(224,132,34)" fg:x="35609" fg:w="20"/><text x="31.1357%" y="527.50"></text></g><g><title>__rg_alloc (20 samples, 0.02%)</title><rect x="30.8857%" y="501" width="0.0173%" height="15" fill="rgb(222,101,24)" fg:x="35609" fg:w="20"/><text x="31.1357%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.02%)</title><rect x="30.8857%" y="485" width="0.0173%" height="15" fill="rgb(254,142,4)" fg:x="35609" fg:w="20"/><text x="31.1357%" y="495.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="30.8865%" y="469" width="0.0165%" height="15" fill="rgb(230,229,49)" fg:x="35610" fg:w="19"/><text x="31.1365%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (60 samples, 0.05%)</title><rect x="30.8666%" y="693" width="0.0520%" height="15" fill="rgb(238,70,47)" fg:x="35587" fg:w="60"/><text x="31.1166%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (59 samples, 0.05%)</title><rect x="30.8674%" y="677" width="0.0512%" height="15" fill="rgb(231,160,17)" fg:x="35588" fg:w="59"/><text x="31.1174%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (58 samples, 0.05%)</title><rect x="30.8683%" y="661" width="0.0503%" height="15" fill="rgb(218,68,53)" fg:x="35589" fg:w="58"/><text x="31.1183%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (51 samples, 0.04%)</title><rect x="30.8744%" y="645" width="0.0442%" height="15" fill="rgb(236,111,10)" fg:x="35596" fg:w="51"/><text x="31.1244%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (51 samples, 0.04%)</title><rect x="30.8744%" y="629" width="0.0442%" height="15" fill="rgb(224,34,41)" fg:x="35596" fg:w="51"/><text x="31.1244%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (18 samples, 0.02%)</title><rect x="30.9030%" y="613" width="0.0156%" height="15" fill="rgb(241,118,19)" fg:x="35629" fg:w="18"/><text x="31.1530%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (14 samples, 0.01%)</title><rect x="30.9065%" y="597" width="0.0121%" height="15" fill="rgb(238,129,25)" fg:x="35633" fg:w="14"/><text x="31.1565%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (14 samples, 0.01%)</title><rect x="30.9065%" y="581" width="0.0121%" height="15" fill="rgb(238,22,31)" fg:x="35633" fg:w="14"/><text x="31.1565%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (40 samples, 0.03%)</title><rect x="31.0990%" y="613" width="0.0347%" height="15" fill="rgb(222,174,48)" fg:x="35855" fg:w="40"/><text x="31.3490%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (40 samples, 0.03%)</title><rect x="31.0990%" y="597" width="0.0347%" height="15" fill="rgb(206,152,40)" fg:x="35855" fg:w="40"/><text x="31.3490%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="31.1068%" y="581" width="0.0269%" height="15" fill="rgb(218,99,54)" fg:x="35864" fg:w="31"/><text x="31.3568%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="31.1129%" y="565" width="0.0208%" height="15" fill="rgb(220,174,26)" fg:x="35871" fg:w="24"/><text x="31.3629%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="31.1146%" y="549" width="0.0191%" height="15" fill="rgb(245,116,9)" fg:x="35873" fg:w="22"/><text x="31.3646%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="31.1146%" y="533" width="0.0191%" height="15" fill="rgb(209,72,35)" fg:x="35873" fg:w="22"/><text x="31.3646%" y="543.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="31.1146%" y="517" width="0.0191%" height="15" fill="rgb(226,126,21)" fg:x="35873" fg:w="22"/><text x="31.3646%" y="527.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="31.1146%" y="501" width="0.0191%" height="15" fill="rgb(227,192,1)" fg:x="35873" fg:w="22"/><text x="31.3646%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="31.1146%" y="485" width="0.0191%" height="15" fill="rgb(237,180,29)" fg:x="35873" fg:w="22"/><text x="31.3646%" y="495.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="31.1146%" y="469" width="0.0191%" height="15" fill="rgb(230,197,35)" fg:x="35873" fg:w="22"/><text x="31.3646%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (65 samples, 0.06%)</title><rect x="31.0886%" y="661" width="0.0564%" height="15" fill="rgb(246,193,31)" fg:x="35843" fg:w="65"/><text x="31.3386%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (65 samples, 0.06%)</title><rect x="31.0886%" y="645" width="0.0564%" height="15" fill="rgb(241,36,4)" fg:x="35843" fg:w="65"/><text x="31.3386%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (65 samples, 0.06%)</title><rect x="31.0886%" y="629" width="0.0564%" height="15" fill="rgb(241,130,17)" fg:x="35843" fg:w="65"/><text x="31.3386%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="31.1337%" y="613" width="0.0113%" height="15" fill="rgb(206,137,32)" fg:x="35895" fg:w="13"/><text x="31.3837%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (13 samples, 0.01%)</title><rect x="31.1615%" y="613" width="0.0113%" height="15" fill="rgb(237,228,51)" fg:x="35927" fg:w="13"/><text x="31.4115%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="31.1563%" y="645" width="0.0199%" height="15" fill="rgb(243,6,42)" fg:x="35921" fg:w="23"/><text x="31.4063%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (23 samples, 0.02%)</title><rect x="31.1563%" y="629" width="0.0199%" height="15" fill="rgb(251,74,28)" fg:x="35921" fg:w="23"/><text x="31.4063%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="31.1762%" y="645" width="0.0243%" height="15" fill="rgb(218,20,49)" fg:x="35944" fg:w="28"/><text x="31.4262%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (28 samples, 0.02%)</title><rect x="31.1762%" y="629" width="0.0243%" height="15" fill="rgb(238,28,14)" fg:x="35944" fg:w="28"/><text x="31.4262%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (455 samples, 0.39%)</title><rect x="30.8579%" y="725" width="0.3946%" height="15" fill="rgb(229,40,46)" fg:x="35577" fg:w="455"/><text x="31.1079%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (446 samples, 0.39%)</title><rect x="30.8657%" y="709" width="0.3868%" height="15" fill="rgb(244,195,20)" fg:x="35586" fg:w="446"/><text x="31.1157%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (385 samples, 0.33%)</title><rect x="30.9186%" y="693" width="0.3339%" height="15" fill="rgb(253,56,35)" fg:x="35647" fg:w="385"/><text x="31.1686%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (194 samples, 0.17%)</title><rect x="31.0843%" y="677" width="0.1683%" height="15" fill="rgb(210,149,44)" fg:x="35838" fg:w="194"/><text x="31.3343%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (124 samples, 0.11%)</title><rect x="31.1450%" y="661" width="0.1076%" height="15" fill="rgb(240,135,12)" fg:x="35908" fg:w="124"/><text x="31.3950%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (49 samples, 0.04%)</title><rect x="31.2100%" y="645" width="0.0425%" height="15" fill="rgb(251,24,50)" fg:x="35983" fg:w="49"/><text x="31.4600%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="31.2100%" y="629" width="0.0425%" height="15" fill="rgb(243,200,47)" fg:x="35983" fg:w="49"/><text x="31.4600%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="31.2100%" y="613" width="0.0425%" height="15" fill="rgb(224,166,26)" fg:x="35983" fg:w="49"/><text x="31.4600%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (45 samples, 0.04%)</title><rect x="31.2135%" y="597" width="0.0390%" height="15" fill="rgb(233,0,47)" fg:x="35987" fg:w="45"/><text x="31.4635%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (45 samples, 0.04%)</title><rect x="31.2135%" y="581" width="0.0390%" height="15" fill="rgb(253,80,5)" fg:x="35987" fg:w="45"/><text x="31.4635%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="31.2135%" y="565" width="0.0390%" height="15" fill="rgb(214,133,25)" fg:x="35987" fg:w="45"/><text x="31.4635%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (45 samples, 0.04%)</title><rect x="31.2135%" y="549" width="0.0390%" height="15" fill="rgb(209,27,14)" fg:x="35987" fg:w="45"/><text x="31.4635%" y="559.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="31.2283%" y="533" width="0.0243%" height="15" fill="rgb(219,102,51)" fg:x="36004" fg:w="28"/><text x="31.4783%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (41 samples, 0.04%)</title><rect x="31.2604%" y="709" width="0.0356%" height="15" fill="rgb(237,18,16)" fg:x="36041" fg:w="41"/><text x="31.5104%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (28 samples, 0.02%)</title><rect x="31.2716%" y="693" width="0.0243%" height="15" fill="rgb(241,85,17)" fg:x="36054" fg:w="28"/><text x="31.5216%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (13 samples, 0.01%)</title><rect x="31.2846%" y="677" width="0.0113%" height="15" fill="rgb(236,90,42)" fg:x="36069" fg:w="13"/><text x="31.5346%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.01%)</title><rect x="31.2846%" y="661" width="0.0113%" height="15" fill="rgb(249,57,21)" fg:x="36069" fg:w="13"/><text x="31.5346%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="31.2846%" y="645" width="0.0113%" height="15" fill="rgb(243,12,36)" fg:x="36069" fg:w="13"/><text x="31.5346%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="31.2846%" y="629" width="0.0113%" height="15" fill="rgb(253,128,47)" fg:x="36069" fg:w="13"/><text x="31.5346%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="31.2846%" y="613" width="0.0113%" height="15" fill="rgb(207,33,20)" fg:x="36069" fg:w="13"/><text x="31.5346%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (56 samples, 0.05%)</title><rect x="31.3332%" y="597" width="0.0486%" height="15" fill="rgb(233,215,35)" fg:x="36125" fg:w="56"/><text x="31.5832%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (50 samples, 0.04%)</title><rect x="31.3384%" y="581" width="0.0434%" height="15" fill="rgb(249,188,52)" fg:x="36131" fg:w="50"/><text x="31.5884%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (50 samples, 0.04%)</title><rect x="31.3384%" y="565" width="0.0434%" height="15" fill="rgb(225,12,32)" fg:x="36131" fg:w="50"/><text x="31.5884%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (40 samples, 0.03%)</title><rect x="31.3471%" y="549" width="0.0347%" height="15" fill="rgb(247,98,14)" fg:x="36141" fg:w="40"/><text x="31.5971%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="31.3471%" y="533" width="0.0347%" height="15" fill="rgb(247,219,48)" fg:x="36141" fg:w="40"/><text x="31.5971%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="31.3471%" y="517" width="0.0347%" height="15" fill="rgb(253,60,48)" fg:x="36141" fg:w="40"/><text x="31.5971%" y="527.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="31.3471%" y="501" width="0.0347%" height="15" fill="rgb(245,15,52)" fg:x="36141" fg:w="40"/><text x="31.5971%" y="511.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="31.3471%" y="485" width="0.0347%" height="15" fill="rgb(220,133,28)" fg:x="36141" fg:w="40"/><text x="31.5971%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="31.3471%" y="469" width="0.0347%" height="15" fill="rgb(217,180,4)" fg:x="36141" fg:w="40"/><text x="31.5971%" y="479.50"></text></g><g><title>sn_rust_alloc (39 samples, 0.03%)</title><rect x="31.3480%" y="453" width="0.0338%" height="15" fill="rgb(251,24,1)" fg:x="36142" fg:w="39"/><text x="31.5980%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (18 samples, 0.02%)</title><rect x="31.6507%" y="533" width="0.0156%" height="15" fill="rgb(212,185,49)" fg:x="36491" fg:w="18"/><text x="31.9007%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (18 samples, 0.02%)</title><rect x="31.6507%" y="517" width="0.0156%" height="15" fill="rgb(215,175,22)" fg:x="36491" fg:w="18"/><text x="31.9007%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (64 samples, 0.06%)</title><rect x="31.6663%" y="533" width="0.0555%" height="15" fill="rgb(250,205,14)" fg:x="36509" fg:w="64"/><text x="31.9163%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (64 samples, 0.06%)</title><rect x="31.6663%" y="517" width="0.0555%" height="15" fill="rgb(225,211,22)" fg:x="36509" fg:w="64"/><text x="31.9163%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (99 samples, 0.09%)</title><rect x="31.6507%" y="549" width="0.0859%" height="15" fill="rgb(251,179,42)" fg:x="36491" fg:w="99"/><text x="31.9007%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (17 samples, 0.01%)</title><rect x="31.7218%" y="533" width="0.0147%" height="15" fill="rgb(208,216,51)" fg:x="36573" fg:w="17"/><text x="31.9718%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (15 samples, 0.01%)</title><rect x="31.7235%" y="517" width="0.0130%" height="15" fill="rgb(235,36,11)" fg:x="36575" fg:w="15"/><text x="31.9735%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="31.7235%" y="501" width="0.0130%" height="15" fill="rgb(213,189,28)" fg:x="36575" fg:w="15"/><text x="31.9735%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (472 samples, 0.41%)</title><rect x="31.3306%" y="677" width="0.4094%" height="15" fill="rgb(227,203,42)" fg:x="36122" fg:w="472"/><text x="31.5806%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (469 samples, 0.41%)</title><rect x="31.3332%" y="661" width="0.4068%" height="15" fill="rgb(244,72,36)" fg:x="36125" fg:w="469"/><text x="31.5832%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (469 samples, 0.41%)</title><rect x="31.3332%" y="645" width="0.4068%" height="15" fill="rgb(213,53,17)" fg:x="36125" fg:w="469"/><text x="31.5832%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (469 samples, 0.41%)</title><rect x="31.3332%" y="629" width="0.4068%" height="15" fill="rgb(207,167,3)" fg:x="36125" fg:w="469"/><text x="31.5832%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (469 samples, 0.41%)</title><rect x="31.3332%" y="613" width="0.4068%" height="15" fill="rgb(216,98,30)" fg:x="36125" fg:w="469"/><text x="31.5832%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (413 samples, 0.36%)</title><rect x="31.3818%" y="597" width="0.3582%" height="15" fill="rgb(236,123,15)" fg:x="36181" fg:w="413"/><text x="31.6318%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (117 samples, 0.10%)</title><rect x="31.6385%" y="581" width="0.1015%" height="15" fill="rgb(248,81,50)" fg:x="36477" fg:w="117"/><text x="31.8885%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (117 samples, 0.10%)</title><rect x="31.6385%" y="565" width="0.1015%" height="15" fill="rgb(214,120,4)" fg:x="36477" fg:w="117"/><text x="31.8885%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (58 samples, 0.05%)</title><rect x="31.8649%" y="597" width="0.0503%" height="15" fill="rgb(208,179,34)" fg:x="36738" fg:w="58"/><text x="32.1149%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (58 samples, 0.05%)</title><rect x="31.8649%" y="581" width="0.0503%" height="15" fill="rgb(227,140,7)" fg:x="36738" fg:w="58"/><text x="32.1149%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (52 samples, 0.05%)</title><rect x="31.8701%" y="565" width="0.0451%" height="15" fill="rgb(214,22,6)" fg:x="36744" fg:w="52"/><text x="32.1201%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (43 samples, 0.04%)</title><rect x="31.8779%" y="549" width="0.0373%" height="15" fill="rgb(207,137,27)" fg:x="36753" fg:w="43"/><text x="32.1279%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="31.8788%" y="533" width="0.0364%" height="15" fill="rgb(210,8,46)" fg:x="36754" fg:w="42"/><text x="32.1288%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="31.8788%" y="517" width="0.0364%" height="15" fill="rgb(240,16,54)" fg:x="36754" fg:w="42"/><text x="32.1288%" y="527.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="31.8788%" y="501" width="0.0364%" height="15" fill="rgb(211,209,29)" fg:x="36754" fg:w="42"/><text x="32.1288%" y="511.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="31.8788%" y="485" width="0.0364%" height="15" fill="rgb(226,228,24)" fg:x="36754" fg:w="42"/><text x="32.1288%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="31.8788%" y="469" width="0.0364%" height="15" fill="rgb(222,84,9)" fg:x="36754" fg:w="42"/><text x="32.1288%" y="479.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.04%)</title><rect x="31.8788%" y="453" width="0.0364%" height="15" fill="rgb(234,203,30)" fg:x="36754" fg:w="42"/><text x="32.1288%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (89 samples, 0.08%)</title><rect x="31.8554%" y="645" width="0.0772%" height="15" fill="rgb(238,109,14)" fg:x="36727" fg:w="89"/><text x="32.1054%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (88 samples, 0.08%)</title><rect x="31.8562%" y="629" width="0.0763%" height="15" fill="rgb(233,206,34)" fg:x="36728" fg:w="88"/><text x="32.1062%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (88 samples, 0.08%)</title><rect x="31.8562%" y="613" width="0.0763%" height="15" fill="rgb(220,167,47)" fg:x="36728" fg:w="88"/><text x="32.1062%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (20 samples, 0.02%)</title><rect x="31.9152%" y="597" width="0.0173%" height="15" fill="rgb(238,105,10)" fg:x="36796" fg:w="20"/><text x="32.1652%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="31.9178%" y="581" width="0.0147%" height="15" fill="rgb(213,227,17)" fg:x="36799" fg:w="17"/><text x="32.1678%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (17 samples, 0.01%)</title><rect x="31.9178%" y="565" width="0.0147%" height="15" fill="rgb(217,132,38)" fg:x="36799" fg:w="17"/><text x="32.1678%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (17 samples, 0.01%)</title><rect x="31.9178%" y="549" width="0.0147%" height="15" fill="rgb(242,146,4)" fg:x="36799" fg:w="17"/><text x="32.1678%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="31.9178%" y="533" width="0.0147%" height="15" fill="rgb(212,61,9)" fg:x="36799" fg:w="17"/><text x="32.1678%" y="543.50"></text></g><g><title>abi_stable::erased_types::iterator::next (17 samples, 0.01%)</title><rect x="31.9473%" y="597" width="0.0147%" height="15" fill="rgb(247,126,22)" fg:x="36833" fg:w="17"/><text x="32.1973%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (14 samples, 0.01%)</title><rect x="31.9499%" y="581" width="0.0121%" height="15" fill="rgb(220,196,2)" fg:x="36836" fg:w="14"/><text x="32.1999%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="31.9404%" y="629" width="0.0226%" height="15" fill="rgb(208,46,4)" fg:x="36825" fg:w="26"/><text x="32.1904%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (26 samples, 0.02%)</title><rect x="31.9404%" y="613" width="0.0226%" height="15" fill="rgb(252,104,46)" fg:x="36825" fg:w="26"/><text x="32.1904%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (13 samples, 0.01%)</title><rect x="31.9716%" y="597" width="0.0113%" height="15" fill="rgb(237,152,48)" fg:x="36861" fg:w="13"/><text x="32.2216%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (46 samples, 0.04%)</title><rect x="31.9629%" y="629" width="0.0399%" height="15" fill="rgb(221,59,37)" fg:x="36851" fg:w="46"/><text x="32.2129%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (46 samples, 0.04%)</title><rect x="31.9629%" y="613" width="0.0399%" height="15" fill="rgb(209,202,51)" fg:x="36851" fg:w="46"/><text x="32.2129%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (23 samples, 0.02%)</title><rect x="31.9829%" y="597" width="0.0199%" height="15" fill="rgb(228,81,30)" fg:x="36874" fg:w="23"/><text x="32.2329%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (23 samples, 0.02%)</title><rect x="31.9829%" y="581" width="0.0199%" height="15" fill="rgb(227,42,39)" fg:x="36874" fg:w="23"/><text x="32.2329%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (13 samples, 0.01%)</title><rect x="31.9915%" y="565" width="0.0113%" height="15" fill="rgb(221,26,2)" fg:x="36884" fg:w="13"/><text x="32.2415%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="32.0028%" y="629" width="0.0113%" height="15" fill="rgb(254,61,31)" fg:x="36897" fg:w="13"/><text x="32.2528%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="32.0028%" y="613" width="0.0113%" height="15" fill="rgb(222,173,38)" fg:x="36897" fg:w="13"/><text x="32.2528%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (13 samples, 0.01%)</title><rect x="32.0028%" y="597" width="0.0113%" height="15" fill="rgb(218,50,12)" fg:x="36897" fg:w="13"/><text x="32.2528%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="32.0219%" y="517" width="0.0113%" height="15" fill="rgb(223,88,40)" fg:x="36919" fg:w="13"/><text x="32.2719%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (989 samples, 0.86%)</title><rect x="31.2525%" y="725" width="0.8578%" height="15" fill="rgb(237,54,19)" fg:x="36032" fg:w="989"/><text x="31.5025%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (939 samples, 0.81%)</title><rect x="31.2959%" y="709" width="0.8144%" height="15" fill="rgb(251,129,25)" fg:x="36082" fg:w="939"/><text x="31.5459%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (901 samples, 0.78%)</title><rect x="31.3289%" y="693" width="0.7815%" height="15" fill="rgb(238,97,19)" fg:x="36120" fg:w="901"/><text x="31.5789%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (427 samples, 0.37%)</title><rect x="31.7400%" y="677" width="0.3704%" height="15" fill="rgb(240,169,18)" fg:x="36594" fg:w="427"/><text x="31.9900%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (303 samples, 0.26%)</title><rect x="31.8476%" y="661" width="0.2628%" height="15" fill="rgb(230,187,49)" fg:x="36718" fg:w="303"/><text x="32.0976%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (205 samples, 0.18%)</title><rect x="31.9326%" y="645" width="0.1778%" height="15" fill="rgb(209,44,26)" fg:x="36816" fg:w="205"/><text x="32.1826%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (111 samples, 0.10%)</title><rect x="32.0141%" y="629" width="0.0963%" height="15" fill="rgb(244,0,6)" fg:x="36910" fg:w="111"/><text x="32.2641%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (111 samples, 0.10%)</title><rect x="32.0141%" y="613" width="0.0963%" height="15" fill="rgb(248,18,21)" fg:x="36910" fg:w="111"/><text x="32.2641%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (111 samples, 0.10%)</title><rect x="32.0141%" y="597" width="0.0963%" height="15" fill="rgb(245,180,19)" fg:x="36910" fg:w="111"/><text x="32.2641%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (106 samples, 0.09%)</title><rect x="32.0184%" y="581" width="0.0919%" height="15" fill="rgb(252,118,36)" fg:x="36915" fg:w="106"/><text x="32.2684%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (106 samples, 0.09%)</title><rect x="32.0184%" y="565" width="0.0919%" height="15" fill="rgb(210,224,19)" fg:x="36915" fg:w="106"/><text x="32.2684%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (106 samples, 0.09%)</title><rect x="32.0184%" y="549" width="0.0919%" height="15" fill="rgb(218,30,24)" fg:x="36915" fg:w="106"/><text x="32.2684%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (106 samples, 0.09%)</title><rect x="32.0184%" y="533" width="0.0919%" height="15" fill="rgb(219,75,50)" fg:x="36915" fg:w="106"/><text x="32.2684%" y="543.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.08%)</title><rect x="32.0332%" y="517" width="0.0772%" height="15" fill="rgb(234,72,50)" fg:x="36932" fg:w="89"/><text x="32.2832%" y="527.50"></text></g><g><title>[libc-2.31.so] (761 samples, 0.66%)</title><rect x="32.1104%" y="725" width="0.6601%" height="15" fill="rgb(219,100,48)" fg:x="37021" fg:w="761"/><text x="32.3604%" y="735.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="32.7817%" y="565" width="0.0624%" height="15" fill="rgb(253,5,41)" fg:x="37795" fg:w="72"/><text x="33.0317%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (103 samples, 0.09%)</title><rect x="32.7722%" y="725" width="0.0893%" height="15" fill="rgb(247,181,11)" fg:x="37784" fg:w="103"/><text x="33.0222%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (103 samples, 0.09%)</title><rect x="32.7722%" y="709" width="0.0893%" height="15" fill="rgb(222,223,25)" fg:x="37784" fg:w="103"/><text x="33.0222%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (99 samples, 0.09%)</title><rect x="32.7756%" y="693" width="0.0859%" height="15" fill="rgb(214,198,28)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (99 samples, 0.09%)</title><rect x="32.7756%" y="677" width="0.0859%" height="15" fill="rgb(230,46,43)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (99 samples, 0.09%)</title><rect x="32.7756%" y="661" width="0.0859%" height="15" fill="rgb(233,65,53)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.09%)</title><rect x="32.7756%" y="645" width="0.0859%" height="15" fill="rgb(221,121,27)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (99 samples, 0.09%)</title><rect x="32.7756%" y="629" width="0.0859%" height="15" fill="rgb(247,70,47)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (99 samples, 0.09%)</title><rect x="32.7756%" y="613" width="0.0859%" height="15" fill="rgb(228,85,35)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="623.50"></text></g><g><title>__rg_dealloc (99 samples, 0.09%)</title><rect x="32.7756%" y="597" width="0.0859%" height="15" fill="rgb(209,50,18)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (99 samples, 0.09%)</title><rect x="32.7756%" y="581" width="0.0859%" height="15" fill="rgb(250,19,35)" fg:x="37788" fg:w="99"/><text x="33.0256%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (20 samples, 0.02%)</title><rect x="32.8441%" y="565" width="0.0173%" height="15" fill="rgb(253,107,29)" fg:x="37867" fg:w="20"/><text x="33.0941%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (30 samples, 0.03%)</title><rect x="32.8615%" y="725" width="0.0260%" height="15" fill="rgb(252,179,29)" fg:x="37887" fg:w="30"/><text x="33.1115%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (30 samples, 0.03%)</title><rect x="32.8615%" y="709" width="0.0260%" height="15" fill="rgb(238,194,6)" fg:x="37887" fg:w="30"/><text x="33.1115%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="32.9083%" y="709" width="0.0234%" height="15" fill="rgb(238,164,29)" fg:x="37941" fg:w="27"/><text x="33.1583%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (24 samples, 0.02%)</title><rect x="32.9317%" y="709" width="0.0208%" height="15" fill="rgb(224,25,9)" fg:x="37968" fg:w="24"/><text x="33.1817%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (113 samples, 0.10%)</title><rect x="32.9526%" y="693" width="0.0980%" height="15" fill="rgb(244,153,23)" fg:x="37992" fg:w="113"/><text x="33.2026%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (45 samples, 0.04%)</title><rect x="33.0957%" y="661" width="0.0390%" height="15" fill="rgb(212,203,14)" fg:x="38157" fg:w="45"/><text x="33.3457%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (45 samples, 0.04%)</title><rect x="33.0957%" y="645" width="0.0390%" height="15" fill="rgb(220,164,20)" fg:x="38157" fg:w="45"/><text x="33.3457%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (44 samples, 0.04%)</title><rect x="33.0965%" y="629" width="0.0382%" height="15" fill="rgb(222,203,48)" fg:x="38158" fg:w="44"/><text x="33.3465%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (44 samples, 0.04%)</title><rect x="33.0965%" y="613" width="0.0382%" height="15" fill="rgb(215,159,22)" fg:x="38158" fg:w="44"/><text x="33.3465%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (44 samples, 0.04%)</title><rect x="33.0965%" y="597" width="0.0382%" height="15" fill="rgb(216,183,47)" fg:x="38158" fg:w="44"/><text x="33.3465%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (25 samples, 0.02%)</title><rect x="33.1130%" y="581" width="0.0217%" height="15" fill="rgb(229,195,25)" fg:x="38177" fg:w="25"/><text x="33.3630%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (238 samples, 0.21%)</title><rect x="32.9526%" y="709" width="0.2064%" height="15" fill="rgb(224,132,51)" fg:x="37992" fg:w="238"/><text x="33.2026%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (125 samples, 0.11%)</title><rect x="33.0506%" y="693" width="0.1084%" height="15" fill="rgb(240,63,7)" fg:x="38105" fg:w="125"/><text x="33.3006%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (125 samples, 0.11%)</title><rect x="33.0506%" y="677" width="0.1084%" height="15" fill="rgb(249,182,41)" fg:x="38105" fg:w="125"/><text x="33.3006%" y="687.50"></text></g><g><title>core::time::Duration::new (28 samples, 0.02%)</title><rect x="33.1347%" y="661" width="0.0243%" height="15" fill="rgb(243,47,26)" fg:x="38202" fg:w="28"/><text x="33.3847%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (876 samples, 0.76%)</title><rect x="32.8875%" y="725" width="0.7598%" height="15" fill="rgb(233,48,2)" fg:x="37917" fg:w="876"/><text x="33.1375%" y="735.50"></text></g><g><title>std::time::SystemTime::now (563 samples, 0.49%)</title><rect x="33.1590%" y="709" width="0.4883%" height="15" fill="rgb(244,165,34)" fg:x="38230" fg:w="563"/><text x="33.4090%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (563 samples, 0.49%)</title><rect x="33.1590%" y="693" width="0.4883%" height="15" fill="rgb(207,89,7)" fg:x="38230" fg:w="563"/><text x="33.4090%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (563 samples, 0.49%)</title><rect x="33.1590%" y="677" width="0.4883%" height="15" fill="rgb(244,117,36)" fg:x="38230" fg:w="563"/><text x="33.4090%" y="687.50"></text></g><g><title>__clock_gettime (448 samples, 0.39%)</title><rect x="33.2587%" y="661" width="0.3886%" height="15" fill="rgb(226,144,34)" fg:x="38345" fg:w="448"/><text x="33.5087%" y="671.50"></text></g><g><title>__vdso_clock_gettime (401 samples, 0.35%)</title><rect x="33.2995%" y="645" width="0.3478%" height="15" fill="rgb(213,23,19)" fg:x="38392" fg:w="401"/><text x="33.5495%" y="655.50"></text></g><g><title>[[vdso]] (355 samples, 0.31%)</title><rect x="33.3394%" y="629" width="0.3079%" height="15" fill="rgb(217,75,12)" fg:x="38438" fg:w="355"/><text x="33.5894%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="33.6673%" y="581" width="0.0165%" height="15" fill="rgb(224,159,17)" fg:x="38816" fg:w="19"/><text x="33.9173%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::next (33 samples, 0.03%)</title><rect x="33.6595%" y="613" width="0.0286%" height="15" fill="rgb(217,118,1)" fg:x="38807" fg:w="33"/><text x="33.9095%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (24 samples, 0.02%)</title><rect x="33.6673%" y="597" width="0.0208%" height="15" fill="rgb(232,180,48)" fg:x="38816" fg:w="24"/><text x="33.9173%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="33.6517%" y="677" width="0.0416%" height="15" fill="rgb(230,27,33)" fg:x="38798" fg:w="48"/><text x="33.9017%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="33.6517%" y="661" width="0.0416%" height="15" fill="rgb(205,31,21)" fg:x="38798" fg:w="48"/><text x="33.9017%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="33.6517%" y="645" width="0.0416%" height="15" fill="rgb(253,59,4)" fg:x="38798" fg:w="48"/><text x="33.9017%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (48 samples, 0.04%)</title><rect x="33.6517%" y="629" width="0.0416%" height="15" fill="rgb(224,201,9)" fg:x="38798" fg:w="48"/><text x="33.9017%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.03%)</title><rect x="33.6933%" y="677" width="0.0278%" height="15" fill="rgb(229,206,30)" fg:x="38846" fg:w="32"/><text x="33.9433%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.03%)</title><rect x="33.6933%" y="661" width="0.0278%" height="15" fill="rgb(212,67,47)" fg:x="38846" fg:w="32"/><text x="33.9433%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.03%)</title><rect x="33.6933%" y="645" width="0.0278%" height="15" fill="rgb(211,96,50)" fg:x="38846" fg:w="32"/><text x="33.9433%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (32 samples, 0.03%)</title><rect x="33.6933%" y="629" width="0.0278%" height="15" fill="rgb(252,114,18)" fg:x="38846" fg:w="32"/><text x="33.9433%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (12 samples, 0.01%)</title><rect x="33.7106%" y="613" width="0.0104%" height="15" fill="rgb(223,58,37)" fg:x="38866" fg:w="12"/><text x="33.9606%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (12 samples, 0.01%)</title><rect x="33.7106%" y="597" width="0.0104%" height="15" fill="rgb(237,70,4)" fg:x="38866" fg:w="12"/><text x="33.9606%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (111 samples, 0.10%)</title><rect x="33.6473%" y="709" width="0.0963%" height="15" fill="rgb(244,85,46)" fg:x="38793" fg:w="111"/><text x="33.8973%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (109 samples, 0.09%)</title><rect x="33.6491%" y="693" width="0.0945%" height="15" fill="rgb(223,39,52)" fg:x="38795" fg:w="109"/><text x="33.8991%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (26 samples, 0.02%)</title><rect x="33.7210%" y="677" width="0.0226%" height="15" fill="rgb(218,200,14)" fg:x="38878" fg:w="26"/><text x="33.9710%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (23 samples, 0.02%)</title><rect x="33.7236%" y="661" width="0.0199%" height="15" fill="rgb(208,171,16)" fg:x="38881" fg:w="23"/><text x="33.9736%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (23 samples, 0.02%)</title><rect x="33.7236%" y="645" width="0.0199%" height="15" fill="rgb(234,200,18)" fg:x="38881" fg:w="23"/><text x="33.9736%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (22 samples, 0.02%)</title><rect x="33.7245%" y="629" width="0.0191%" height="15" fill="rgb(228,45,11)" fg:x="38882" fg:w="22"/><text x="33.9745%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (22 samples, 0.02%)</title><rect x="33.7245%" y="613" width="0.0191%" height="15" fill="rgb(237,182,11)" fg:x="38882" fg:w="22"/><text x="33.9745%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (22 samples, 0.02%)</title><rect x="33.7245%" y="597" width="0.0191%" height="15" fill="rgb(241,175,49)" fg:x="38882" fg:w="22"/><text x="33.9745%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (170 samples, 0.15%)</title><rect x="33.7531%" y="629" width="0.1475%" height="15" fill="rgb(247,38,35)" fg:x="38915" fg:w="170"/><text x="34.0031%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (170 samples, 0.15%)</title><rect x="33.7531%" y="613" width="0.1475%" height="15" fill="rgb(228,39,49)" fg:x="38915" fg:w="170"/><text x="34.0031%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (161 samples, 0.14%)</title><rect x="33.7609%" y="597" width="0.1396%" height="15" fill="rgb(226,101,26)" fg:x="38924" fg:w="161"/><text x="34.0109%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (145 samples, 0.13%)</title><rect x="33.7748%" y="581" width="0.1258%" height="15" fill="rgb(206,141,19)" fg:x="38940" fg:w="145"/><text x="34.0248%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (138 samples, 0.12%)</title><rect x="33.7809%" y="565" width="0.1197%" height="15" fill="rgb(211,200,13)" fg:x="38947" fg:w="138"/><text x="34.0309%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (138 samples, 0.12%)</title><rect x="33.7809%" y="549" width="0.1197%" height="15" fill="rgb(241,121,6)" fg:x="38947" fg:w="138"/><text x="34.0309%" y="559.50"></text></g><g><title>alloc::alloc::alloc (138 samples, 0.12%)</title><rect x="33.7809%" y="533" width="0.1197%" height="15" fill="rgb(234,221,29)" fg:x="38947" fg:w="138"/><text x="34.0309%" y="543.50"></text></g><g><title>__rg_alloc (138 samples, 0.12%)</title><rect x="33.7809%" y="517" width="0.1197%" height="15" fill="rgb(229,136,5)" fg:x="38947" fg:w="138"/><text x="34.0309%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (138 samples, 0.12%)</title><rect x="33.7809%" y="501" width="0.1197%" height="15" fill="rgb(238,36,11)" fg:x="38947" fg:w="138"/><text x="34.0309%" y="511.50"></text></g><g><title>sn_rust_alloc (137 samples, 0.12%)</title><rect x="33.7818%" y="485" width="0.1188%" height="15" fill="rgb(251,55,41)" fg:x="38948" fg:w="137"/><text x="34.0318%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="33.9110%" y="565" width="0.0139%" height="15" fill="rgb(242,34,40)" fg:x="39097" fg:w="16"/><text x="34.1610%" y="575.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="33.9249%" y="565" width="0.0382%" height="15" fill="rgb(215,42,17)" fg:x="39113" fg:w="44"/><text x="34.1749%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (71 samples, 0.06%)</title><rect x="33.9041%" y="581" width="0.0616%" height="15" fill="rgb(207,44,46)" fg:x="39089" fg:w="71"/><text x="34.1541%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (100 samples, 0.09%)</title><rect x="33.9041%" y="629" width="0.0867%" height="15" fill="rgb(211,206,28)" fg:x="39089" fg:w="100"/><text x="34.1541%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (100 samples, 0.09%)</title><rect x="33.9041%" y="613" width="0.0867%" height="15" fill="rgb(237,167,16)" fg:x="39089" fg:w="100"/><text x="34.1541%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (100 samples, 0.09%)</title><rect x="33.9041%" y="597" width="0.0867%" height="15" fill="rgb(233,66,6)" fg:x="39089" fg:w="100"/><text x="34.1541%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (29 samples, 0.03%)</title><rect x="33.9656%" y="581" width="0.0252%" height="15" fill="rgb(246,123,29)" fg:x="39160" fg:w="29"/><text x="34.2156%" y="591.50"></text></g><g><title>core::ptr::read (29 samples, 0.03%)</title><rect x="33.9656%" y="565" width="0.0252%" height="15" fill="rgb(209,62,40)" fg:x="39160" fg:w="29"/><text x="34.2156%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (297 samples, 0.26%)</title><rect x="33.7436%" y="709" width="0.2576%" height="15" fill="rgb(218,4,25)" fg:x="38904" fg:w="297"/><text x="33.9936%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (290 samples, 0.25%)</title><rect x="33.7497%" y="693" width="0.2515%" height="15" fill="rgb(253,91,49)" fg:x="38911" fg:w="290"/><text x="33.9997%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (289 samples, 0.25%)</title><rect x="33.7505%" y="677" width="0.2507%" height="15" fill="rgb(228,155,29)" fg:x="38912" fg:w="289"/><text x="34.0005%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (289 samples, 0.25%)</title><rect x="33.7505%" y="661" width="0.2507%" height="15" fill="rgb(243,57,37)" fg:x="38912" fg:w="289"/><text x="34.0005%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (289 samples, 0.25%)</title><rect x="33.7505%" y="645" width="0.2507%" height="15" fill="rgb(244,167,17)" fg:x="38912" fg:w="289"/><text x="34.0005%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (12 samples, 0.01%)</title><rect x="33.9908%" y="629" width="0.0104%" height="15" fill="rgb(207,181,38)" fg:x="39189" fg:w="12"/><text x="34.2408%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (19 samples, 0.02%)</title><rect x="34.0142%" y="597" width="0.0165%" height="15" fill="rgb(211,8,23)" fg:x="39216" fg:w="19"/><text x="34.2642%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="34.0203%" y="581" width="0.0104%" height="15" fill="rgb(235,11,44)" fg:x="39223" fg:w="12"/><text x="34.2703%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="34.0203%" y="565" width="0.0104%" height="15" fill="rgb(248,18,52)" fg:x="39223" fg:w="12"/><text x="34.2703%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="34.0203%" y="549" width="0.0104%" height="15" fill="rgb(208,4,7)" fg:x="39223" fg:w="12"/><text x="34.2703%" y="559.50"></text></g><g><title>sn_rust_dealloc (70 samples, 0.06%)</title><rect x="34.0307%" y="597" width="0.0607%" height="15" fill="rgb(240,17,39)" fg:x="39235" fg:w="70"/><text x="34.2807%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (514 samples, 0.45%)</title><rect x="33.6473%" y="725" width="0.4458%" height="15" fill="rgb(207,170,3)" fg:x="38793" fg:w="514"/><text x="33.8973%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (106 samples, 0.09%)</title><rect x="34.0012%" y="709" width="0.0919%" height="15" fill="rgb(236,100,52)" fg:x="39201" fg:w="106"/><text x="34.2512%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (106 samples, 0.09%)</title><rect x="34.0012%" y="693" width="0.0919%" height="15" fill="rgb(246,78,51)" fg:x="39201" fg:w="106"/><text x="34.2512%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.09%)</title><rect x="34.0012%" y="677" width="0.0919%" height="15" fill="rgb(211,17,15)" fg:x="39201" fg:w="106"/><text x="34.2512%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (96 samples, 0.08%)</title><rect x="34.0099%" y="661" width="0.0833%" height="15" fill="rgb(209,59,46)" fg:x="39211" fg:w="96"/><text x="34.2599%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (96 samples, 0.08%)</title><rect x="34.0099%" y="645" width="0.0833%" height="15" fill="rgb(210,92,25)" fg:x="39211" fg:w="96"/><text x="34.2599%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (96 samples, 0.08%)</title><rect x="34.0099%" y="629" width="0.0833%" height="15" fill="rgb(238,174,52)" fg:x="39211" fg:w="96"/><text x="34.2599%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (96 samples, 0.08%)</title><rect x="34.0099%" y="613" width="0.0833%" height="15" fill="rgb(230,73,7)" fg:x="39211" fg:w="96"/><text x="34.2599%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,908 samples, 7.73%)</title><rect x="26.3832%" y="741" width="7.7264%" height="15" fill="rgb(243,124,40)" fg:x="30418" fg:w="8908"/><text x="26.6332%" y="751.50">tremor_runt..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 0.15%)</title><rect x="34.1608%" y="629" width="0.1457%" height="15" fill="rgb(244,170,11)" fg:x="39385" fg:w="168"/><text x="34.4108%" y="639.50"></text></g><g><title>core::ptr::read (156 samples, 0.14%)</title><rect x="34.1712%" y="613" width="0.1353%" height="15" fill="rgb(207,114,54)" fg:x="39397" fg:w="156"/><text x="34.4212%" y="623.50"></text></g><g><title>[libc-2.31.so] (153 samples, 0.13%)</title><rect x="34.1738%" y="597" width="0.1327%" height="15" fill="rgb(205,42,20)" fg:x="39400" fg:w="153"/><text x="34.4238%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (89 samples, 0.08%)</title><rect x="34.3082%" y="501" width="0.0772%" height="15" fill="rgb(230,30,28)" fg:x="39555" fg:w="89"/><text x="34.5582%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (89 samples, 0.08%)</title><rect x="34.3082%" y="485" width="0.0772%" height="15" fill="rgb(205,73,54)" fg:x="39555" fg:w="89"/><text x="34.5582%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (89 samples, 0.08%)</title><rect x="34.3082%" y="469" width="0.0772%" height="15" fill="rgb(254,227,23)" fg:x="39555" fg:w="89"/><text x="34.5582%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (88 samples, 0.08%)</title><rect x="34.3091%" y="453" width="0.0763%" height="15" fill="rgb(228,202,34)" fg:x="39556" fg:w="88"/><text x="34.5591%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (88 samples, 0.08%)</title><rect x="34.3091%" y="437" width="0.0763%" height="15" fill="rgb(222,225,37)" fg:x="39556" fg:w="88"/><text x="34.5591%" y="447.50"></text></g><g><title>alloc::alloc::alloc (88 samples, 0.08%)</title><rect x="34.3091%" y="421" width="0.0763%" height="15" fill="rgb(221,14,54)" fg:x="39556" fg:w="88"/><text x="34.5591%" y="431.50"></text></g><g><title>__rg_alloc (88 samples, 0.08%)</title><rect x="34.3091%" y="405" width="0.0763%" height="15" fill="rgb(254,102,2)" fg:x="39556" fg:w="88"/><text x="34.5591%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (88 samples, 0.08%)</title><rect x="34.3091%" y="389" width="0.0763%" height="15" fill="rgb(232,104,17)" fg:x="39556" fg:w="88"/><text x="34.5591%" y="399.50"></text></g><g><title>sn_rust_alloc (87 samples, 0.08%)</title><rect x="34.3100%" y="373" width="0.0755%" height="15" fill="rgb(250,220,14)" fg:x="39557" fg:w="87"/><text x="34.5600%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (96 samples, 0.08%)</title><rect x="34.3082%" y="629" width="0.0833%" height="15" fill="rgb(241,158,9)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (96 samples, 0.08%)</title><rect x="34.3082%" y="613" width="0.0833%" height="15" fill="rgb(246,9,43)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (96 samples, 0.08%)</title><rect x="34.3082%" y="597" width="0.0833%" height="15" fill="rgb(206,73,33)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (96 samples, 0.08%)</title><rect x="34.3082%" y="581" width="0.0833%" height="15" fill="rgb(222,79,8)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (96 samples, 0.08%)</title><rect x="34.3082%" y="565" width="0.0833%" height="15" fill="rgb(234,8,54)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (96 samples, 0.08%)</title><rect x="34.3082%" y="549" width="0.0833%" height="15" fill="rgb(209,134,38)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (96 samples, 0.08%)</title><rect x="34.3082%" y="533" width="0.0833%" height="15" fill="rgb(230,127,29)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (96 samples, 0.08%)</title><rect x="34.3082%" y="517" width="0.0833%" height="15" fill="rgb(242,44,41)" fg:x="39555" fg:w="96"/><text x="34.5582%" y="527.50"></text></g><g><title>[libc-2.31.so] (249 samples, 0.22%)</title><rect x="34.3915%" y="629" width="0.2160%" height="15" fill="rgb(222,56,43)" fg:x="39651" fg:w="249"/><text x="34.6415%" y="639.50"></text></g><g><title>[libc-2.31.so] (105 samples, 0.09%)</title><rect x="34.6092%" y="613" width="0.0911%" height="15" fill="rgb(238,39,47)" fg:x="39902" fg:w="105"/><text x="34.8592%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (147 samples, 0.13%)</title><rect x="34.6075%" y="629" width="0.1275%" height="15" fill="rgb(226,79,43)" fg:x="39900" fg:w="147"/><text x="34.8575%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (40 samples, 0.03%)</title><rect x="34.7003%" y="613" width="0.0347%" height="15" fill="rgb(242,105,53)" fg:x="40007" fg:w="40"/><text x="34.9503%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="34.7003%" y="597" width="0.0347%" height="15" fill="rgb(251,132,46)" fg:x="40007" fg:w="40"/><text x="34.9503%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="34.7003%" y="581" width="0.0347%" height="15" fill="rgb(231,77,14)" fg:x="40007" fg:w="40"/><text x="34.9503%" y="591.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="34.7003%" y="565" width="0.0347%" height="15" fill="rgb(240,135,9)" fg:x="40007" fg:w="40"/><text x="34.9503%" y="575.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="34.7003%" y="549" width="0.0347%" height="15" fill="rgb(248,109,14)" fg:x="40007" fg:w="40"/><text x="34.9503%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="34.7003%" y="533" width="0.0347%" height="15" fill="rgb(227,146,52)" fg:x="40007" fg:w="40"/><text x="34.9503%" y="543.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.03%)</title><rect x="34.7003%" y="517" width="0.0347%" height="15" fill="rgb(232,54,3)" fg:x="40007" fg:w="40"/><text x="34.9503%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="34.7246%" y="501" width="0.0104%" height="15" fill="rgb(229,201,43)" fg:x="40035" fg:w="12"/><text x="34.9746%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (28 samples, 0.02%)</title><rect x="34.7350%" y="629" width="0.0243%" height="15" fill="rgb(252,161,33)" fg:x="40047" fg:w="28"/><text x="34.9850%" y="639.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="34.7376%" y="613" width="0.0217%" height="15" fill="rgb(226,146,40)" fg:x="40050" fg:w="25"/><text x="34.9876%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (21 samples, 0.02%)</title><rect x="34.7662%" y="629" width="0.0182%" height="15" fill="rgb(219,47,25)" fg:x="40083" fg:w="21"/><text x="35.0162%" y="639.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (21 samples, 0.02%)</title><rect x="34.7662%" y="613" width="0.0182%" height="15" fill="rgb(250,135,13)" fg:x="40083" fg:w="21"/><text x="35.0162%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (21 samples, 0.02%)</title><rect x="34.7662%" y="597" width="0.0182%" height="15" fill="rgb(219,229,18)" fg:x="40083" fg:w="21"/><text x="35.0162%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.02%)</title><rect x="34.7662%" y="581" width="0.0182%" height="15" fill="rgb(217,152,27)" fg:x="40083" fg:w="21"/><text x="35.0162%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (16 samples, 0.01%)</title><rect x="34.7705%" y="565" width="0.0139%" height="15" fill="rgb(225,71,47)" fg:x="40088" fg:w="16"/><text x="35.0205%" y="575.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (16 samples, 0.01%)</title><rect x="34.7705%" y="549" width="0.0139%" height="15" fill="rgb(220,139,14)" fg:x="40088" fg:w="16"/><text x="35.0205%" y="559.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (16 samples, 0.01%)</title><rect x="34.7705%" y="533" width="0.0139%" height="15" fill="rgb(247,54,32)" fg:x="40088" fg:w="16"/><text x="35.0205%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (16 samples, 0.01%)</title><rect x="34.7705%" y="517" width="0.0139%" height="15" fill="rgb(252,131,39)" fg:x="40088" fg:w="16"/><text x="35.0205%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (797 samples, 0.69%)</title><rect x="34.1096%" y="661" width="0.6913%" height="15" fill="rgb(210,108,39)" fg:x="39326" fg:w="797"/><text x="34.3596%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (796 samples, 0.69%)</title><rect x="34.1105%" y="645" width="0.6904%" height="15" fill="rgb(205,23,29)" fg:x="39327" fg:w="796"/><text x="34.3605%" y="655.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (16 samples, 0.01%)</title><rect x="34.7870%" y="629" width="0.0139%" height="15" fill="rgb(246,139,46)" fg:x="40107" fg:w="16"/><text x="35.0370%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="34.7870%" y="613" width="0.0139%" height="15" fill="rgb(250,81,26)" fg:x="40107" fg:w="16"/><text x="35.0370%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.01%)</title><rect x="34.7870%" y="597" width="0.0139%" height="15" fill="rgb(214,104,7)" fg:x="40107" fg:w="16"/><text x="35.0370%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (825 samples, 0.72%)</title><rect x="34.1096%" y="725" width="0.7156%" height="15" fill="rgb(233,189,8)" fg:x="39326" fg:w="825"/><text x="34.3596%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (825 samples, 0.72%)</title><rect x="34.1096%" y="709" width="0.7156%" height="15" fill="rgb(228,141,17)" fg:x="39326" fg:w="825"/><text x="34.3596%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (825 samples, 0.72%)</title><rect x="34.1096%" y="693" width="0.7156%" height="15" fill="rgb(247,157,1)" fg:x="39326" fg:w="825"/><text x="34.3596%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (825 samples, 0.72%)</title><rect x="34.1096%" y="677" width="0.7156%" height="15" fill="rgb(249,225,5)" fg:x="39326" fg:w="825"/><text x="34.3596%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (28 samples, 0.02%)</title><rect x="34.8009%" y="661" width="0.0243%" height="15" fill="rgb(242,55,13)" fg:x="40123" fg:w="28"/><text x="35.0509%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (20 samples, 0.02%)</title><rect x="34.8078%" y="645" width="0.0173%" height="15" fill="rgb(230,49,50)" fg:x="40131" fg:w="20"/><text x="35.0578%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (17 samples, 0.01%)</title><rect x="34.8104%" y="629" width="0.0147%" height="15" fill="rgb(241,111,38)" fg:x="40134" fg:w="17"/><text x="35.0604%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (17 samples, 0.01%)</title><rect x="34.8104%" y="613" width="0.0147%" height="15" fill="rgb(252,155,4)" fg:x="40134" fg:w="17"/><text x="35.0604%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (17 samples, 0.01%)</title><rect x="34.8104%" y="597" width="0.0147%" height="15" fill="rgb(212,69,32)" fg:x="40134" fg:w="17"/><text x="35.0604%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (117 samples, 0.10%)</title><rect x="35.2250%" y="277" width="0.1015%" height="15" fill="rgb(243,107,47)" fg:x="40612" fg:w="117"/><text x="35.4750%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (117 samples, 0.10%)</title><rect x="35.2250%" y="261" width="0.1015%" height="15" fill="rgb(247,130,12)" fg:x="40612" fg:w="117"/><text x="35.4750%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (117 samples, 0.10%)</title><rect x="35.2250%" y="245" width="0.1015%" height="15" fill="rgb(233,74,16)" fg:x="40612" fg:w="117"/><text x="35.4750%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (115 samples, 0.10%)</title><rect x="35.2268%" y="229" width="0.0997%" height="15" fill="rgb(208,58,18)" fg:x="40614" fg:w="115"/><text x="35.4768%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (115 samples, 0.10%)</title><rect x="35.2268%" y="213" width="0.0997%" height="15" fill="rgb(242,225,1)" fg:x="40614" fg:w="115"/><text x="35.4768%" y="223.50"></text></g><g><title>alloc::alloc::alloc (114 samples, 0.10%)</title><rect x="35.2276%" y="197" width="0.0989%" height="15" fill="rgb(249,39,40)" fg:x="40615" fg:w="114"/><text x="35.4776%" y="207.50"></text></g><g><title>__rg_alloc (114 samples, 0.10%)</title><rect x="35.2276%" y="181" width="0.0989%" height="15" fill="rgb(207,72,44)" fg:x="40615" fg:w="114"/><text x="35.4776%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (114 samples, 0.10%)</title><rect x="35.2276%" y="165" width="0.0989%" height="15" fill="rgb(215,193,12)" fg:x="40615" fg:w="114"/><text x="35.4776%" y="175.50"></text></g><g><title>sn_rust_alloc (107 samples, 0.09%)</title><rect x="35.2337%" y="149" width="0.0928%" height="15" fill="rgb(248,41,39)" fg:x="40622" fg:w="107"/><text x="35.4837%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (156 samples, 0.14%)</title><rect x="35.2120%" y="389" width="0.1353%" height="15" fill="rgb(253,85,4)" fg:x="40597" fg:w="156"/><text x="35.4620%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (152 samples, 0.13%)</title><rect x="35.2155%" y="373" width="0.1318%" height="15" fill="rgb(243,70,31)" fg:x="40601" fg:w="152"/><text x="35.4655%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (147 samples, 0.13%)</title><rect x="35.2198%" y="357" width="0.1275%" height="15" fill="rgb(253,195,26)" fg:x="40606" fg:w="147"/><text x="35.4698%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (141 samples, 0.12%)</title><rect x="35.2250%" y="341" width="0.1223%" height="15" fill="rgb(243,42,11)" fg:x="40612" fg:w="141"/><text x="35.4750%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (141 samples, 0.12%)</title><rect x="35.2250%" y="325" width="0.1223%" height="15" fill="rgb(239,66,17)" fg:x="40612" fg:w="141"/><text x="35.4750%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (141 samples, 0.12%)</title><rect x="35.2250%" y="309" width="0.1223%" height="15" fill="rgb(217,132,21)" fg:x="40612" fg:w="141"/><text x="35.4750%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (141 samples, 0.12%)</title><rect x="35.2250%" y="293" width="0.1223%" height="15" fill="rgb(252,202,21)" fg:x="40612" fg:w="141"/><text x="35.4750%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24 samples, 0.02%)</title><rect x="35.3265%" y="277" width="0.0208%" height="15" fill="rgb(233,98,36)" fg:x="40729" fg:w="24"/><text x="35.5765%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="35.3265%" y="261" width="0.0208%" height="15" fill="rgb(216,153,54)" fg:x="40729" fg:w="24"/><text x="35.5765%" y="271.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="35.3291%" y="245" width="0.0182%" height="15" fill="rgb(250,99,7)" fg:x="40732" fg:w="21"/><text x="35.5791%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="35.4115%" y="37" width="0.0156%" height="15" fill="rgb(207,56,50)" fg:x="40827" fg:w="18"/><text x="35.6615%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (66 samples, 0.06%)</title><rect x="35.3708%" y="181" width="0.0572%" height="15" fill="rgb(244,61,34)" fg:x="40780" fg:w="66"/><text x="35.6208%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (66 samples, 0.06%)</title><rect x="35.3708%" y="165" width="0.0572%" height="15" fill="rgb(241,50,38)" fg:x="40780" fg:w="66"/><text x="35.6208%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (66 samples, 0.06%)</title><rect x="35.3708%" y="149" width="0.0572%" height="15" fill="rgb(212,166,30)" fg:x="40780" fg:w="66"/><text x="35.6208%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.06%)</title><rect x="35.3725%" y="133" width="0.0555%" height="15" fill="rgb(249,127,32)" fg:x="40782" fg:w="64"/><text x="35.6225%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.06%)</title><rect x="35.3725%" y="117" width="0.0555%" height="15" fill="rgb(209,103,0)" fg:x="40782" fg:w="64"/><text x="35.6225%" y="127.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.05%)</title><rect x="35.3734%" y="101" width="0.0546%" height="15" fill="rgb(238,209,51)" fg:x="40783" fg:w="63"/><text x="35.6234%" y="111.50"></text></g><g><title>__rg_alloc (63 samples, 0.05%)</title><rect x="35.3734%" y="85" width="0.0546%" height="15" fill="rgb(237,56,23)" fg:x="40783" fg:w="63"/><text x="35.6234%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.05%)</title><rect x="35.3734%" y="69" width="0.0546%" height="15" fill="rgb(215,153,46)" fg:x="40783" fg:w="63"/><text x="35.6234%" y="79.50"></text></g><g><title>sn_rust_alloc (58 samples, 0.05%)</title><rect x="35.3777%" y="53" width="0.0503%" height="15" fill="rgb(224,49,31)" fg:x="40788" fg:w="58"/><text x="35.6277%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (97 samples, 0.08%)</title><rect x="35.3638%" y="293" width="0.0841%" height="15" fill="rgb(250,18,42)" fg:x="40772" fg:w="97"/><text x="35.6138%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (97 samples, 0.08%)</title><rect x="35.3638%" y="277" width="0.0841%" height="15" fill="rgb(215,176,39)" fg:x="40772" fg:w="97"/><text x="35.6138%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (97 samples, 0.08%)</title><rect x="35.3638%" y="261" width="0.0841%" height="15" fill="rgb(223,77,29)" fg:x="40772" fg:w="97"/><text x="35.6138%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (89 samples, 0.08%)</title><rect x="35.3708%" y="245" width="0.0772%" height="15" fill="rgb(234,94,52)" fg:x="40780" fg:w="89"/><text x="35.6208%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (89 samples, 0.08%)</title><rect x="35.3708%" y="229" width="0.0772%" height="15" fill="rgb(220,154,50)" fg:x="40780" fg:w="89"/><text x="35.6208%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (89 samples, 0.08%)</title><rect x="35.3708%" y="213" width="0.0772%" height="15" fill="rgb(212,11,10)" fg:x="40780" fg:w="89"/><text x="35.6208%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (89 samples, 0.08%)</title><rect x="35.3708%" y="197" width="0.0772%" height="15" fill="rgb(205,166,19)" fg:x="40780" fg:w="89"/><text x="35.6208%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (23 samples, 0.02%)</title><rect x="35.4280%" y="181" width="0.0199%" height="15" fill="rgb(244,198,16)" fg:x="40846" fg:w="23"/><text x="35.6780%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="35.4280%" y="165" width="0.0199%" height="15" fill="rgb(219,69,12)" fg:x="40846" fg:w="23"/><text x="35.6780%" y="175.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="35.4306%" y="149" width="0.0173%" height="15" fill="rgb(245,30,7)" fg:x="40849" fg:w="20"/><text x="35.6806%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="35.4610%" y="245" width="0.0252%" height="15" fill="rgb(218,221,48)" fg:x="40884" fg:w="29"/><text x="35.7110%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="35.4610%" y="229" width="0.0252%" height="15" fill="rgb(216,66,15)" fg:x="40884" fg:w="29"/><text x="35.7110%" y="239.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="35.4636%" y="213" width="0.0226%" height="15" fill="rgb(226,122,50)" fg:x="40887" fg:w="26"/><text x="35.7136%" y="223.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="35.4636%" y="197" width="0.0226%" height="15" fill="rgb(239,156,16)" fg:x="40887" fg:w="26"/><text x="35.7136%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="35.4636%" y="181" width="0.0226%" height="15" fill="rgb(224,27,38)" fg:x="40887" fg:w="26"/><text x="35.7136%" y="191.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="35.4653%" y="165" width="0.0208%" height="15" fill="rgb(224,39,27)" fg:x="40889" fg:w="24"/><text x="35.7153%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 0.03%)</title><rect x="35.4575%" y="293" width="0.0312%" height="15" fill="rgb(215,92,29)" fg:x="40880" fg:w="36"/><text x="35.7075%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 0.03%)</title><rect x="35.4610%" y="277" width="0.0278%" height="15" fill="rgb(207,159,16)" fg:x="40884" fg:w="32"/><text x="35.7110%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 0.03%)</title><rect x="35.4610%" y="261" width="0.0278%" height="15" fill="rgb(238,163,47)" fg:x="40884" fg:w="32"/><text x="35.7110%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (586 samples, 0.51%)</title><rect x="34.9830%" y="405" width="0.5083%" height="15" fill="rgb(219,91,49)" fg:x="40333" fg:w="586"/><text x="35.2330%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (166 samples, 0.14%)</title><rect x="35.3473%" y="389" width="0.1440%" height="15" fill="rgb(227,167,31)" fg:x="40753" fg:w="166"/><text x="35.5973%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (154 samples, 0.13%)</title><rect x="35.3577%" y="373" width="0.1336%" height="15" fill="rgb(234,80,54)" fg:x="40765" fg:w="154"/><text x="35.6077%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (154 samples, 0.13%)</title><rect x="35.3577%" y="357" width="0.1336%" height="15" fill="rgb(212,114,2)" fg:x="40765" fg:w="154"/><text x="35.6077%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (154 samples, 0.13%)</title><rect x="35.3577%" y="341" width="0.1336%" height="15" fill="rgb(234,50,24)" fg:x="40765" fg:w="154"/><text x="35.6077%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (154 samples, 0.13%)</title><rect x="35.3577%" y="325" width="0.1336%" height="15" fill="rgb(221,68,8)" fg:x="40765" fg:w="154"/><text x="35.6077%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (154 samples, 0.13%)</title><rect x="35.3577%" y="309" width="0.1336%" height="15" fill="rgb(254,180,31)" fg:x="40765" fg:w="154"/><text x="35.6077%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (37 samples, 0.03%)</title><rect x="35.5225%" y="309" width="0.0321%" height="15" fill="rgb(247,130,50)" fg:x="40955" fg:w="37"/><text x="35.7725%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (19 samples, 0.02%)</title><rect x="35.5650%" y="277" width="0.0165%" height="15" fill="rgb(211,109,4)" fg:x="41004" fg:w="19"/><text x="35.8150%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (19 samples, 0.02%)</title><rect x="35.5650%" y="261" width="0.0165%" height="15" fill="rgb(238,50,21)" fg:x="41004" fg:w="19"/><text x="35.8150%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (19 samples, 0.02%)</title><rect x="35.5650%" y="245" width="0.0165%" height="15" fill="rgb(225,57,45)" fg:x="41004" fg:w="19"/><text x="35.8150%" y="255.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (19 samples, 0.02%)</title><rect x="35.5650%" y="229" width="0.0165%" height="15" fill="rgb(209,196,50)" fg:x="41004" fg:w="19"/><text x="35.8150%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (19 samples, 0.02%)</title><rect x="35.5650%" y="213" width="0.0165%" height="15" fill="rgb(242,140,13)" fg:x="41004" fg:w="19"/><text x="35.8150%" y="223.50"></text></g><g><title>std::time::SystemTime::duration_since (76 samples, 0.07%)</title><rect x="35.5225%" y="325" width="0.0659%" height="15" fill="rgb(217,111,7)" fg:x="40955" fg:w="76"/><text x="35.7725%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (39 samples, 0.03%)</title><rect x="35.5546%" y="309" width="0.0338%" height="15" fill="rgb(253,193,51)" fg:x="40992" fg:w="39"/><text x="35.8046%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (39 samples, 0.03%)</title><rect x="35.5546%" y="293" width="0.0338%" height="15" fill="rgb(252,70,29)" fg:x="40992" fg:w="39"/><text x="35.8046%" y="303.50"></text></g><g><title>__clock_gettime (158 samples, 0.14%)</title><rect x="35.6127%" y="277" width="0.1370%" height="15" fill="rgb(232,127,12)" fg:x="41059" fg:w="158"/><text x="35.8627%" y="287.50"></text></g><g><title>__vdso_clock_gettime (145 samples, 0.13%)</title><rect x="35.6240%" y="261" width="0.1258%" height="15" fill="rgb(211,180,21)" fg:x="41072" fg:w="145"/><text x="35.8740%" y="271.50"></text></g><g><title>[[vdso]] (122 samples, 0.11%)</title><rect x="35.6440%" y="245" width="0.1058%" height="15" fill="rgb(229,72,13)" fg:x="41095" fg:w="122"/><text x="35.8940%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (299 samples, 0.26%)</title><rect x="35.4913%" y="405" width="0.2593%" height="15" fill="rgb(240,211,49)" fg:x="40919" fg:w="299"/><text x="35.7413%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (299 samples, 0.26%)</title><rect x="35.4913%" y="389" width="0.2593%" height="15" fill="rgb(219,149,40)" fg:x="40919" fg:w="299"/><text x="35.7413%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (285 samples, 0.25%)</title><rect x="35.5035%" y="373" width="0.2472%" height="15" fill="rgb(210,127,46)" fg:x="40933" fg:w="285"/><text x="35.7535%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (285 samples, 0.25%)</title><rect x="35.5035%" y="357" width="0.2472%" height="15" fill="rgb(220,106,7)" fg:x="40933" fg:w="285"/><text x="35.7535%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (282 samples, 0.24%)</title><rect x="35.5061%" y="341" width="0.2446%" height="15" fill="rgb(249,31,22)" fg:x="40936" fg:w="282"/><text x="35.7561%" y="351.50"></text></g><g><title>std::time::SystemTime::now (187 samples, 0.16%)</title><rect x="35.5885%" y="325" width="0.1622%" height="15" fill="rgb(253,1,49)" fg:x="41031" fg:w="187"/><text x="35.8385%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (187 samples, 0.16%)</title><rect x="35.5885%" y="309" width="0.1622%" height="15" fill="rgb(227,144,33)" fg:x="41031" fg:w="187"/><text x="35.8385%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (187 samples, 0.16%)</title><rect x="35.5885%" y="293" width="0.1622%" height="15" fill="rgb(249,163,44)" fg:x="41031" fg:w="187"/><text x="35.8385%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 0.06%)</title><rect x="35.7758%" y="373" width="0.0564%" height="15" fill="rgb(234,15,39)" fg:x="41247" fg:w="65"/><text x="36.0258%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (38 samples, 0.03%)</title><rect x="35.7992%" y="357" width="0.0330%" height="15" fill="rgb(207,66,16)" fg:x="41274" fg:w="38"/><text x="36.0492%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (185 samples, 0.16%)</title><rect x="35.9423%" y="181" width="0.1605%" height="15" fill="rgb(233,112,24)" fg:x="41439" fg:w="185"/><text x="36.1923%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (319 samples, 0.28%)</title><rect x="35.8331%" y="325" width="0.2767%" height="15" fill="rgb(230,90,22)" fg:x="41313" fg:w="319"/><text x="36.0831%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (318 samples, 0.28%)</title><rect x="35.8339%" y="309" width="0.2758%" height="15" fill="rgb(229,61,13)" fg:x="41314" fg:w="318"/><text x="36.0839%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (318 samples, 0.28%)</title><rect x="35.8339%" y="293" width="0.2758%" height="15" fill="rgb(225,57,24)" fg:x="41314" fg:w="318"/><text x="36.0839%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (317 samples, 0.27%)</title><rect x="35.8348%" y="277" width="0.2750%" height="15" fill="rgb(208,169,48)" fg:x="41315" fg:w="317"/><text x="36.0848%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (317 samples, 0.27%)</title><rect x="35.8348%" y="261" width="0.2750%" height="15" fill="rgb(244,218,51)" fg:x="41315" fg:w="317"/><text x="36.0848%" y="271.50"></text></g><g><title>alloc::alloc::alloc (317 samples, 0.27%)</title><rect x="35.8348%" y="245" width="0.2750%" height="15" fill="rgb(214,148,10)" fg:x="41315" fg:w="317"/><text x="36.0848%" y="255.50"></text></g><g><title>__rg_alloc (317 samples, 0.27%)</title><rect x="35.8348%" y="229" width="0.2750%" height="15" fill="rgb(225,174,27)" fg:x="41315" fg:w="317"/><text x="36.0848%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (317 samples, 0.27%)</title><rect x="35.8348%" y="213" width="0.2750%" height="15" fill="rgb(230,96,26)" fg:x="41315" fg:w="317"/><text x="36.0848%" y="223.50"></text></g><g><title>sn_rust_alloc (316 samples, 0.27%)</title><rect x="35.8357%" y="197" width="0.2741%" height="15" fill="rgb(232,10,30)" fg:x="41316" fg:w="316"/><text x="36.0857%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (506 samples, 0.44%)</title><rect x="35.7758%" y="389" width="0.4389%" height="15" fill="rgb(222,8,50)" fg:x="41247" fg:w="506"/><text x="36.0258%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (441 samples, 0.38%)</title><rect x="35.8322%" y="373" width="0.3825%" height="15" fill="rgb(213,81,27)" fg:x="41312" fg:w="441"/><text x="36.0822%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (441 samples, 0.38%)</title><rect x="35.8322%" y="357" width="0.3825%" height="15" fill="rgb(245,50,10)" fg:x="41312" fg:w="441"/><text x="36.0822%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (441 samples, 0.38%)</title><rect x="35.8322%" y="341" width="0.3825%" height="15" fill="rgb(216,100,18)" fg:x="41312" fg:w="441"/><text x="36.0822%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (121 samples, 0.10%)</title><rect x="36.1097%" y="325" width="0.1049%" height="15" fill="rgb(236,147,54)" fg:x="41632" fg:w="121"/><text x="36.3597%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (121 samples, 0.10%)</title><rect x="36.1097%" y="309" width="0.1049%" height="15" fill="rgb(205,143,26)" fg:x="41632" fg:w="121"/><text x="36.3597%" y="319.50"></text></g><g><title>[libc-2.31.so] (121 samples, 0.10%)</title><rect x="36.1097%" y="293" width="0.1049%" height="15" fill="rgb(236,26,9)" fg:x="41632" fg:w="121"/><text x="36.3597%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,431 samples, 2.11%)</title><rect x="34.1096%" y="741" width="2.1085%" height="15" fill="rgb(221,165,53)" fg:x="39326" fg:w="2431"/><text x="34.3596%" y="751.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,606 samples, 1.39%)</title><rect x="34.8252%" y="725" width="1.3930%" height="15" fill="rgb(214,110,17)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="735.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,606 samples, 1.39%)</title><rect x="34.8252%" y="709" width="1.3930%" height="15" fill="rgb(237,197,12)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,606 samples, 1.39%)</title><rect x="34.8252%" y="693" width="1.3930%" height="15" fill="rgb(205,84,17)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,606 samples, 1.39%)</title><rect x="34.8252%" y="677" width="1.3930%" height="15" fill="rgb(237,18,45)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,606 samples, 1.39%)</title><rect x="34.8252%" y="661" width="1.3930%" height="15" fill="rgb(221,87,14)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="671.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,606 samples, 1.39%)</title><rect x="34.8252%" y="645" width="1.3930%" height="15" fill="rgb(238,186,15)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,606 samples, 1.39%)</title><rect x="34.8252%" y="629" width="1.3930%" height="15" fill="rgb(208,115,11)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="639.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,606 samples, 1.39%)</title><rect x="34.8252%" y="613" width="1.3930%" height="15" fill="rgb(254,175,0)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,606 samples, 1.39%)</title><rect x="34.8252%" y="597" width="1.3930%" height="15" fill="rgb(227,24,42)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,606 samples, 1.39%)</title><rect x="34.8252%" y="581" width="1.3930%" height="15" fill="rgb(223,211,37)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="591.50"></text></g><g><title>std::panic::catch_unwind (1,606 samples, 1.39%)</title><rect x="34.8252%" y="565" width="1.3930%" height="15" fill="rgb(235,49,27)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="575.50"></text></g><g><title>std::panicking::try (1,606 samples, 1.39%)</title><rect x="34.8252%" y="549" width="1.3930%" height="15" fill="rgb(254,97,51)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="559.50"></text></g><g><title>std::panicking::try::do_call (1,606 samples, 1.39%)</title><rect x="34.8252%" y="533" width="1.3930%" height="15" fill="rgb(249,51,40)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,606 samples, 1.39%)</title><rect x="34.8252%" y="517" width="1.3930%" height="15" fill="rgb(210,128,45)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,606 samples, 1.39%)</title><rect x="34.8252%" y="501" width="1.3930%" height="15" fill="rgb(224,137,50)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,606 samples, 1.39%)</title><rect x="34.8252%" y="485" width="1.3930%" height="15" fill="rgb(242,15,9)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="495.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,606 samples, 1.39%)</title><rect x="34.8252%" y="469" width="1.3930%" height="15" fill="rgb(233,187,41)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,606 samples, 1.39%)</title><rect x="34.8252%" y="453" width="1.3930%" height="15" fill="rgb(227,2,29)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,606 samples, 1.39%)</title><rect x="34.8252%" y="437" width="1.3930%" height="15" fill="rgb(222,70,3)" fg:x="40151" fg:w="1606"/><text x="35.0752%" y="447.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,556 samples, 1.35%)</title><rect x="34.8686%" y="421" width="1.3496%" height="15" fill="rgb(213,11,42)" fg:x="40201" fg:w="1556"/><text x="35.1186%" y="431.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (537 samples, 0.47%)</title><rect x="35.7524%" y="405" width="0.4658%" height="15" fill="rgb(225,150,9)" fg:x="41220" fg:w="537"/><text x="36.0024%" y="415.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="36.4723%" y="725" width="0.0130%" height="15" fill="rgb(230,162,45)" fg:x="42050" fg:w="15"/><text x="36.7223%" y="735.50"></text></g><g><title>[libc-2.31.so] (229 samples, 0.20%)</title><rect x="36.5026%" y="709" width="0.1986%" height="15" fill="rgb(222,14,52)" fg:x="42085" fg:w="229"/><text x="36.7526%" y="719.50"></text></g><g><title>[libc-2.31.so] (445 samples, 0.39%)</title><rect x="36.7915%" y="693" width="0.3860%" height="15" fill="rgb(254,198,14)" fg:x="42418" fg:w="445"/><text x="37.0415%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (169 samples, 0.15%)</title><rect x="37.1775%" y="693" width="0.1466%" height="15" fill="rgb(220,217,30)" fg:x="42863" fg:w="169"/><text x="37.4275%" y="703.50"></text></g><g><title>core::ptr::write (160 samples, 0.14%)</title><rect x="37.1853%" y="677" width="0.1388%" height="15" fill="rgb(215,146,41)" fg:x="42872" fg:w="160"/><text x="37.4353%" y="687.50"></text></g><g><title>[libc-2.31.so] (158 samples, 0.14%)</title><rect x="37.1870%" y="661" width="0.1370%" height="15" fill="rgb(217,27,36)" fg:x="42874" fg:w="158"/><text x="37.4370%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.01%)</title><rect x="37.3240%" y="693" width="0.0113%" height="15" fill="rgb(219,218,39)" fg:x="43032" fg:w="13"/><text x="37.5740%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (320 samples, 0.28%)</title><rect x="37.3414%" y="693" width="0.2776%" height="15" fill="rgb(219,4,42)" fg:x="43052" fg:w="320"/><text x="37.5914%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (316 samples, 0.27%)</title><rect x="37.3449%" y="677" width="0.2741%" height="15" fill="rgb(249,119,36)" fg:x="43056" fg:w="316"/><text x="37.5949%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (308 samples, 0.27%)</title><rect x="37.3518%" y="661" width="0.2671%" height="15" fill="rgb(209,23,33)" fg:x="43064" fg:w="308"/><text x="37.6018%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (308 samples, 0.27%)</title><rect x="37.3518%" y="645" width="0.2671%" height="15" fill="rgb(211,10,0)" fg:x="43064" fg:w="308"/><text x="37.6018%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (308 samples, 0.27%)</title><rect x="37.3518%" y="629" width="0.2671%" height="15" fill="rgb(208,99,37)" fg:x="43064" fg:w="308"/><text x="37.6018%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (308 samples, 0.27%)</title><rect x="37.3518%" y="613" width="0.2671%" height="15" fill="rgb(213,132,31)" fg:x="43064" fg:w="308"/><text x="37.6018%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (308 samples, 0.27%)</title><rect x="37.3518%" y="597" width="0.2671%" height="15" fill="rgb(243,129,40)" fg:x="43064" fg:w="308"/><text x="37.6018%" y="607.50"></text></g><g><title>[libc-2.31.so] (300 samples, 0.26%)</title><rect x="37.3587%" y="581" width="0.2602%" height="15" fill="rgb(210,66,33)" fg:x="43072" fg:w="300"/><text x="37.6087%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="38.0266%" y="661" width="0.0173%" height="15" fill="rgb(209,189,4)" fg:x="43842" fg:w="20"/><text x="38.2766%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="38.0491%" y="661" width="0.0130%" height="15" fill="rgb(214,107,37)" fg:x="43868" fg:w="15"/><text x="38.2991%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (281 samples, 0.24%)</title><rect x="38.0622%" y="661" width="0.2437%" height="15" fill="rgb(245,88,54)" fg:x="43883" fg:w="281"/><text x="38.3122%" y="671.50"></text></g><g><title>[libc-2.31.so] (231 samples, 0.20%)</title><rect x="38.1055%" y="645" width="0.2004%" height="15" fill="rgb(205,146,20)" fg:x="43933" fg:w="231"/><text x="38.3555%" y="655.50"></text></g><g><title>[libc-2.31.so] (590 samples, 0.51%)</title><rect x="38.3059%" y="661" width="0.5117%" height="15" fill="rgb(220,161,25)" fg:x="44164" fg:w="590"/><text x="38.5559%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (295 samples, 0.26%)</title><rect x="38.8263%" y="661" width="0.2559%" height="15" fill="rgb(215,152,15)" fg:x="44764" fg:w="295"/><text x="39.0763%" y="671.50"></text></g><g><title>core::ptr::read (268 samples, 0.23%)</title><rect x="38.8497%" y="645" width="0.2325%" height="15" fill="rgb(233,192,44)" fg:x="44791" fg:w="268"/><text x="39.0997%" y="655.50"></text></g><g><title>[libc-2.31.so] (219 samples, 0.19%)</title><rect x="38.8922%" y="629" width="0.1900%" height="15" fill="rgb(240,170,46)" fg:x="44840" fg:w="219"/><text x="39.1422%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (159 samples, 0.14%)</title><rect x="39.0822%" y="661" width="0.1379%" height="15" fill="rgb(207,104,33)" fg:x="45059" fg:w="159"/><text x="39.3322%" y="671.50"></text></g><g><title>core::ptr::write (140 samples, 0.12%)</title><rect x="39.0986%" y="645" width="0.1214%" height="15" fill="rgb(219,21,39)" fg:x="45078" fg:w="140"/><text x="39.3486%" y="655.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.12%)</title><rect x="39.0995%" y="629" width="0.1206%" height="15" fill="rgb(214,133,29)" fg:x="45079" fg:w="139"/><text x="39.3495%" y="639.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (25 samples, 0.02%)</title><rect x="39.2287%" y="629" width="0.0217%" height="15" fill="rgb(226,93,6)" fg:x="45228" fg:w="25"/><text x="39.4787%" y="639.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (19 samples, 0.02%)</title><rect x="39.2340%" y="613" width="0.0165%" height="15" fill="rgb(252,222,34)" fg:x="45234" fg:w="19"/><text x="39.4840%" y="623.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (19 samples, 0.02%)</title><rect x="39.2340%" y="597" width="0.0165%" height="15" fill="rgb(252,92,48)" fg:x="45234" fg:w="19"/><text x="39.4840%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.02%)</title><rect x="39.2340%" y="581" width="0.0165%" height="15" fill="rgb(245,223,24)" fg:x="45234" fg:w="19"/><text x="39.4840%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (19 samples, 0.02%)</title><rect x="39.2340%" y="565" width="0.0165%" height="15" fill="rgb(205,176,3)" fg:x="45234" fg:w="19"/><text x="39.4840%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (50 samples, 0.04%)</title><rect x="39.2201%" y="661" width="0.0434%" height="15" fill="rgb(235,151,15)" fg:x="45218" fg:w="50"/><text x="39.4701%" y="671.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="39.2279%" y="645" width="0.0356%" height="15" fill="rgb(237,209,11)" fg:x="45227" fg:w="41"/><text x="39.4779%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (14 samples, 0.01%)</title><rect x="39.2634%" y="661" width="0.0121%" height="15" fill="rgb(243,227,24)" fg:x="45268" fg:w="14"/><text x="39.5134%" y="671.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="39.2634%" y="645" width="0.0121%" height="15" fill="rgb(239,193,16)" fg:x="45268" fg:w="14"/><text x="39.5134%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (16 samples, 0.01%)</title><rect x="39.2756%" y="661" width="0.0139%" height="15" fill="rgb(231,27,9)" fg:x="45282" fg:w="16"/><text x="39.5256%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (16 samples, 0.01%)</title><rect x="39.2756%" y="645" width="0.0139%" height="15" fill="rgb(219,169,10)" fg:x="45282" fg:w="16"/><text x="39.5256%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (16 samples, 0.01%)</title><rect x="39.2756%" y="629" width="0.0139%" height="15" fill="rgb(244,229,43)" fg:x="45282" fg:w="16"/><text x="39.5256%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.01%)</title><rect x="39.2756%" y="613" width="0.0139%" height="15" fill="rgb(254,38,20)" fg:x="45282" fg:w="16"/><text x="39.5256%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (13 samples, 0.01%)</title><rect x="39.5098%" y="629" width="0.0113%" height="15" fill="rgb(250,47,30)" fg:x="45552" fg:w="13"/><text x="39.7598%" y="639.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (207 samples, 0.18%)</title><rect x="39.4864%" y="645" width="0.1795%" height="15" fill="rgb(224,124,36)" fg:x="45525" fg:w="207"/><text x="39.7364%" y="655.50"></text></g><g><title>core::ptr::read (167 samples, 0.14%)</title><rect x="39.5210%" y="629" width="0.1448%" height="15" fill="rgb(246,68,51)" fg:x="45565" fg:w="167"/><text x="39.7710%" y="639.50"></text></g><g><title>[libc-2.31.so] (128 samples, 0.11%)</title><rect x="39.5549%" y="613" width="0.1110%" height="15" fill="rgb(253,43,49)" fg:x="45604" fg:w="128"/><text x="39.8049%" y="623.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="39.6659%" y="645" width="0.0330%" height="15" fill="rgb(219,54,36)" fg:x="45732" fg:w="38"/><text x="39.9159%" y="655.50"></text></g><g><title>[libc-2.31.so] (452 samples, 0.39%)</title><rect x="39.6989%" y="645" width="0.3920%" height="15" fill="rgb(227,133,34)" fg:x="45770" fg:w="452"/><text x="39.9489%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (250 samples, 0.22%)</title><rect x="40.0909%" y="645" width="0.2168%" height="15" fill="rgb(247,227,15)" fg:x="46222" fg:w="250"/><text x="40.3409%" y="655.50"></text></g><g><title>core::ptr::write (225 samples, 0.20%)</title><rect x="40.1126%" y="629" width="0.1952%" height="15" fill="rgb(229,96,14)" fg:x="46247" fg:w="225"/><text x="40.3626%" y="639.50"></text></g><g><title>[libc-2.31.so] (225 samples, 0.20%)</title><rect x="40.1126%" y="613" width="0.1952%" height="15" fill="rgb(220,79,17)" fg:x="46247" fg:w="225"/><text x="40.3626%" y="623.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (20 samples, 0.02%)</title><rect x="40.3450%" y="613" width="0.0173%" height="15" fill="rgb(205,131,53)" fg:x="46515" fg:w="20"/><text x="40.5950%" y="623.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (18 samples, 0.02%)</title><rect x="40.3468%" y="597" width="0.0156%" height="15" fill="rgb(209,50,29)" fg:x="46517" fg:w="18"/><text x="40.5968%" y="607.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (18 samples, 0.02%)</title><rect x="40.3468%" y="581" width="0.0156%" height="15" fill="rgb(245,86,46)" fg:x="46517" fg:w="18"/><text x="40.5968%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="40.3468%" y="565" width="0.0156%" height="15" fill="rgb(235,66,46)" fg:x="46517" fg:w="18"/><text x="40.5968%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (18 samples, 0.02%)</title><rect x="40.3468%" y="549" width="0.0156%" height="15" fill="rgb(232,148,31)" fg:x="46517" fg:w="18"/><text x="40.5968%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="40.3685%" y="549" width="0.0104%" height="15" fill="rgb(217,149,8)" fg:x="46542" fg:w="12"/><text x="40.6185%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="40.3685%" y="533" width="0.0104%" height="15" fill="rgb(209,183,11)" fg:x="46542" fg:w="12"/><text x="40.6185%" y="543.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="40.3685%" y="517" width="0.0104%" height="15" fill="rgb(208,55,20)" fg:x="46542" fg:w="12"/><text x="40.6185%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="40.3685%" y="501" width="0.0104%" height="15" fill="rgb(218,39,14)" fg:x="46542" fg:w="12"/><text x="40.6185%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (27 samples, 0.02%)</title><rect x="40.3624%" y="613" width="0.0234%" height="15" fill="rgb(216,169,33)" fg:x="46535" fg:w="27"/><text x="40.6124%" y="623.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="40.3624%" y="597" width="0.0234%" height="15" fill="rgb(233,80,24)" fg:x="46535" fg:w="27"/><text x="40.6124%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (20 samples, 0.02%)</title><rect x="40.3685%" y="581" width="0.0173%" height="15" fill="rgb(213,179,31)" fg:x="46542" fg:w="20"/><text x="40.6185%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="40.3685%" y="565" width="0.0173%" height="15" fill="rgb(209,19,5)" fg:x="46542" fg:w="20"/><text x="40.6185%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.07%)</title><rect x="40.3364%" y="629" width="0.0720%" height="15" fill="rgb(219,18,35)" fg:x="46505" fg:w="83"/><text x="40.5864%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (26 samples, 0.02%)</title><rect x="40.3858%" y="613" width="0.0226%" height="15" fill="rgb(209,169,16)" fg:x="46562" fg:w="26"/><text x="40.6358%" y="623.50"></text></g><g><title>sn_rust_dealloc (169 samples, 0.15%)</title><rect x="40.4084%" y="629" width="0.1466%" height="15" fill="rgb(245,90,51)" fg:x="46588" fg:w="169"/><text x="40.6584%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (271 samples, 0.24%)</title><rect x="40.3260%" y="645" width="0.2351%" height="15" fill="rgb(220,99,45)" fg:x="46493" fg:w="271"/><text x="40.5760%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.04%)</title><rect x="40.5931%" y="613" width="0.0442%" height="15" fill="rgb(249,89,25)" fg:x="46801" fg:w="51"/><text x="40.8431%" y="623.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (27 samples, 0.02%)</title><rect x="40.6139%" y="597" width="0.0234%" height="15" fill="rgb(239,193,0)" fg:x="46825" fg:w="27"/><text x="40.8639%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (27 samples, 0.02%)</title><rect x="40.6139%" y="581" width="0.0234%" height="15" fill="rgb(231,126,1)" fg:x="46825" fg:w="27"/><text x="40.8639%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (112 samples, 0.10%)</title><rect x="40.6608%" y="581" width="0.0971%" height="15" fill="rgb(243,166,3)" fg:x="46879" fg:w="112"/><text x="40.9108%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (110 samples, 0.10%)</title><rect x="40.6625%" y="565" width="0.0954%" height="15" fill="rgb(223,22,34)" fg:x="46881" fg:w="110"/><text x="40.9125%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (110 samples, 0.10%)</title><rect x="40.6625%" y="549" width="0.0954%" height="15" fill="rgb(251,52,51)" fg:x="46881" fg:w="110"/><text x="40.9125%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (110 samples, 0.10%)</title><rect x="40.6625%" y="533" width="0.0954%" height="15" fill="rgb(221,165,28)" fg:x="46881" fg:w="110"/><text x="40.9125%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (110 samples, 0.10%)</title><rect x="40.6625%" y="517" width="0.0954%" height="15" fill="rgb(218,121,47)" fg:x="46881" fg:w="110"/><text x="40.9125%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (110 samples, 0.10%)</title><rect x="40.6625%" y="501" width="0.0954%" height="15" fill="rgb(209,120,9)" fg:x="46881" fg:w="110"/><text x="40.9125%" y="511.50"></text></g><g><title>[libc-2.31.so] (88 samples, 0.08%)</title><rect x="40.6816%" y="485" width="0.0763%" height="15" fill="rgb(236,68,12)" fg:x="46903" fg:w="88"/><text x="40.9316%" y="495.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (223 samples, 0.19%)</title><rect x="40.5705%" y="645" width="0.1934%" height="15" fill="rgb(225,194,26)" fg:x="46775" fg:w="223"/><text x="40.8205%" y="655.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (215 samples, 0.19%)</title><rect x="40.5775%" y="629" width="0.1865%" height="15" fill="rgb(231,84,39)" fg:x="46783" fg:w="215"/><text x="40.8275%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (146 samples, 0.13%)</title><rect x="40.6373%" y="613" width="0.1266%" height="15" fill="rgb(210,11,45)" fg:x="46852" fg:w="146"/><text x="40.8873%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (146 samples, 0.13%)</title><rect x="40.6373%" y="597" width="0.1266%" height="15" fill="rgb(224,54,52)" fg:x="46852" fg:w="146"/><text x="40.8873%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (47 samples, 0.04%)</title><rect x="40.7865%" y="613" width="0.0408%" height="15" fill="rgb(238,102,14)" fg:x="47024" fg:w="47"/><text x="41.0365%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (26 samples, 0.02%)</title><rect x="40.8446%" y="597" width="0.0226%" height="15" fill="rgb(243,160,52)" fg:x="47091" fg:w="26"/><text x="41.0946%" y="607.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (26 samples, 0.02%)</title><rect x="40.8446%" y="581" width="0.0226%" height="15" fill="rgb(216,114,19)" fg:x="47091" fg:w="26"/><text x="41.0946%" y="591.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (23 samples, 0.02%)</title><rect x="40.9140%" y="501" width="0.0199%" height="15" fill="rgb(244,166,37)" fg:x="47171" fg:w="23"/><text x="41.1640%" y="511.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (296 samples, 0.26%)</title><rect x="40.8273%" y="613" width="0.2567%" height="15" fill="rgb(246,29,44)" fg:x="47071" fg:w="296"/><text x="41.0773%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (250 samples, 0.22%)</title><rect x="40.8672%" y="597" width="0.2168%" height="15" fill="rgb(215,56,53)" fg:x="47117" fg:w="250"/><text x="41.1172%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (250 samples, 0.22%)</title><rect x="40.8672%" y="581" width="0.2168%" height="15" fill="rgb(217,60,2)" fg:x="47117" fg:w="250"/><text x="41.1172%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (250 samples, 0.22%)</title><rect x="40.8672%" y="565" width="0.2168%" height="15" fill="rgb(207,26,24)" fg:x="47117" fg:w="250"/><text x="41.1172%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (250 samples, 0.22%)</title><rect x="40.8672%" y="549" width="0.2168%" height="15" fill="rgb(252,210,15)" fg:x="47117" fg:w="250"/><text x="41.1172%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (196 samples, 0.17%)</title><rect x="40.9140%" y="533" width="0.1700%" height="15" fill="rgb(253,209,26)" fg:x="47171" fg:w="196"/><text x="41.1640%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (196 samples, 0.17%)</title><rect x="40.9140%" y="517" width="0.1700%" height="15" fill="rgb(238,170,14)" fg:x="47171" fg:w="196"/><text x="41.1640%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (173 samples, 0.15%)</title><rect x="40.9340%" y="501" width="0.1501%" height="15" fill="rgb(216,178,15)" fg:x="47194" fg:w="173"/><text x="41.1840%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (173 samples, 0.15%)</title><rect x="40.9340%" y="485" width="0.1501%" height="15" fill="rgb(250,197,2)" fg:x="47194" fg:w="173"/><text x="41.1840%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (173 samples, 0.15%)</title><rect x="40.9340%" y="469" width="0.1501%" height="15" fill="rgb(212,70,42)" fg:x="47194" fg:w="173"/><text x="41.1840%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (173 samples, 0.15%)</title><rect x="40.9340%" y="453" width="0.1501%" height="15" fill="rgb(227,213,9)" fg:x="47194" fg:w="173"/><text x="41.1840%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (173 samples, 0.15%)</title><rect x="40.9340%" y="437" width="0.1501%" height="15" fill="rgb(245,99,25)" fg:x="47194" fg:w="173"/><text x="41.1840%" y="447.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.05%)</title><rect x="41.0294%" y="421" width="0.0546%" height="15" fill="rgb(250,82,29)" fg:x="47304" fg:w="63"/><text x="41.2794%" y="431.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (2,096 samples, 1.82%)</title><rect x="39.2895%" y="661" width="1.8180%" height="15" fill="rgb(241,226,54)" fg:x="45298" fg:w="2096"/><text x="39.5395%" y="671.50">t..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (396 samples, 0.34%)</title><rect x="40.7640%" y="645" width="0.3435%" height="15" fill="rgb(221,99,41)" fg:x="46998" fg:w="396"/><text x="41.0140%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (387 samples, 0.34%)</title><rect x="40.7718%" y="629" width="0.3357%" height="15" fill="rgb(213,90,21)" fg:x="47007" fg:w="387"/><text x="41.0218%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (27 samples, 0.02%)</title><rect x="41.0840%" y="613" width="0.0234%" height="15" fill="rgb(205,208,24)" fg:x="47367" fg:w="27"/><text x="41.3340%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (17 samples, 0.01%)</title><rect x="41.0927%" y="597" width="0.0147%" height="15" fill="rgb(246,31,12)" fg:x="47377" fg:w="17"/><text x="41.3427%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (25 samples, 0.02%)</title><rect x="41.1187%" y="629" width="0.0217%" height="15" fill="rgb(213,154,6)" fg:x="47407" fg:w="25"/><text x="41.3687%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (17 samples, 0.01%)</title><rect x="41.1491%" y="613" width="0.0147%" height="15" fill="rgb(222,163,29)" fg:x="47442" fg:w="17"/><text x="41.3991%" y="623.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (17 samples, 0.01%)</title><rect x="41.1491%" y="597" width="0.0147%" height="15" fill="rgb(227,201,8)" fg:x="47442" fg:w="17"/><text x="41.3991%" y="607.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (131 samples, 0.11%)</title><rect x="41.1404%" y="629" width="0.1136%" height="15" fill="rgb(233,9,32)" fg:x="47432" fg:w="131"/><text x="41.3904%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (104 samples, 0.09%)</title><rect x="41.1638%" y="613" width="0.0902%" height="15" fill="rgb(217,54,24)" fg:x="47459" fg:w="104"/><text x="41.4138%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (104 samples, 0.09%)</title><rect x="41.1638%" y="597" width="0.0902%" height="15" fill="rgb(235,192,0)" fg:x="47459" fg:w="104"/><text x="41.4138%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (104 samples, 0.09%)</title><rect x="41.1638%" y="581" width="0.0902%" height="15" fill="rgb(235,45,9)" fg:x="47459" fg:w="104"/><text x="41.4138%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (104 samples, 0.09%)</title><rect x="41.1638%" y="565" width="0.0902%" height="15" fill="rgb(246,42,40)" fg:x="47459" fg:w="104"/><text x="41.4138%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (92 samples, 0.08%)</title><rect x="41.1742%" y="549" width="0.0798%" height="15" fill="rgb(248,111,24)" fg:x="47471" fg:w="92"/><text x="41.4242%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (92 samples, 0.08%)</title><rect x="41.1742%" y="533" width="0.0798%" height="15" fill="rgb(249,65,22)" fg:x="47471" fg:w="92"/><text x="41.4242%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (90 samples, 0.08%)</title><rect x="41.1760%" y="517" width="0.0781%" height="15" fill="rgb(238,111,51)" fg:x="47473" fg:w="90"/><text x="41.4260%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (90 samples, 0.08%)</title><rect x="41.1760%" y="501" width="0.0781%" height="15" fill="rgb(250,118,22)" fg:x="47473" fg:w="90"/><text x="41.4260%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (90 samples, 0.08%)</title><rect x="41.1760%" y="485" width="0.0781%" height="15" fill="rgb(234,84,26)" fg:x="47473" fg:w="90"/><text x="41.4260%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (90 samples, 0.08%)</title><rect x="41.1760%" y="469" width="0.0781%" height="15" fill="rgb(243,172,12)" fg:x="47473" fg:w="90"/><text x="41.4260%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (90 samples, 0.08%)</title><rect x="41.1760%" y="453" width="0.0781%" height="15" fill="rgb(236,150,49)" fg:x="47473" fg:w="90"/><text x="41.4260%" y="463.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="41.2141%" y="437" width="0.0399%" height="15" fill="rgb(225,197,26)" fg:x="47517" fg:w="46"/><text x="41.4641%" y="447.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,291 samples, 4.59%)</title><rect x="36.7013%" y="709" width="4.5892%" height="15" fill="rgb(214,17,42)" fg:x="42314" fg:w="5291"/><text x="36.9513%" y="719.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,233 samples, 3.67%)</title><rect x="37.6189%" y="693" width="3.6715%" height="15" fill="rgb(224,165,40)" fg:x="43372" fg:w="4233"/><text x="37.8689%" y="703.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,213 samples, 3.65%)</title><rect x="37.6363%" y="677" width="3.6542%" height="15" fill="rgb(246,100,4)" fg:x="43392" fg:w="4213"/><text x="37.8863%" y="687.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (211 samples, 0.18%)</title><rect x="41.1074%" y="661" width="0.1830%" height="15" fill="rgb(222,103,0)" fg:x="47394" fg:w="211"/><text x="41.3574%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (211 samples, 0.18%)</title><rect x="41.1074%" y="645" width="0.1830%" height="15" fill="rgb(227,189,26)" fg:x="47394" fg:w="211"/><text x="41.3574%" y="655.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (42 samples, 0.04%)</title><rect x="41.2540%" y="629" width="0.0364%" height="15" fill="rgb(214,202,17)" fg:x="47563" fg:w="42"/><text x="41.5040%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (22 samples, 0.02%)</title><rect x="41.2714%" y="613" width="0.0191%" height="15" fill="rgb(229,111,3)" fg:x="47583" fg:w="22"/><text x="41.5214%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (13 samples, 0.01%)</title><rect x="41.2792%" y="597" width="0.0113%" height="15" fill="rgb(229,172,15)" fg:x="47592" fg:w="13"/><text x="41.5292%" y="607.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (13 samples, 0.01%)</title><rect x="41.2792%" y="581" width="0.0113%" height="15" fill="rgb(230,224,35)" fg:x="47592" fg:w="13"/><text x="41.5292%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,570 samples, 4.83%)</title><rect x="36.4870%" y="725" width="4.8312%" height="15" fill="rgb(251,141,6)" fg:x="42067" fg:w="5570"/><text x="36.7370%" y="735.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (32 samples, 0.03%)</title><rect x="41.2905%" y="709" width="0.0278%" height="15" fill="rgb(225,208,6)" fg:x="47605" fg:w="32"/><text x="41.5405%" y="719.50"></text></g><g><title>[libc-2.31.so] (663 samples, 0.58%)</title><rect x="41.3182%" y="725" width="0.5751%" height="15" fill="rgb(246,181,16)" fg:x="47637" fg:w="663"/><text x="41.5682%" y="735.50"></text></g><g><title>sn_rust_dealloc (171 samples, 0.15%)</title><rect x="41.9002%" y="565" width="0.1483%" height="15" fill="rgb(227,129,36)" fg:x="48308" fg:w="171"/><text x="42.1502%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (181 samples, 0.16%)</title><rect x="41.8941%" y="725" width="0.1570%" height="15" fill="rgb(248,117,24)" fg:x="48301" fg:w="181"/><text x="42.1441%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (181 samples, 0.16%)</title><rect x="41.8941%" y="709" width="0.1570%" height="15" fill="rgb(214,185,35)" fg:x="48301" fg:w="181"/><text x="42.1441%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (174 samples, 0.15%)</title><rect x="41.9002%" y="693" width="0.1509%" height="15" fill="rgb(236,150,34)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (174 samples, 0.15%)</title><rect x="41.9002%" y="677" width="0.1509%" height="15" fill="rgb(243,228,27)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (174 samples, 0.15%)</title><rect x="41.9002%" y="661" width="0.1509%" height="15" fill="rgb(245,77,44)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (174 samples, 0.15%)</title><rect x="41.9002%" y="645" width="0.1509%" height="15" fill="rgb(235,214,42)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (174 samples, 0.15%)</title><rect x="41.9002%" y="629" width="0.1509%" height="15" fill="rgb(221,74,3)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (174 samples, 0.15%)</title><rect x="41.9002%" y="613" width="0.1509%" height="15" fill="rgb(206,121,29)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="623.50"></text></g><g><title>__rg_dealloc (174 samples, 0.15%)</title><rect x="41.9002%" y="597" width="0.1509%" height="15" fill="rgb(249,131,53)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (174 samples, 0.15%)</title><rect x="41.9002%" y="581" width="0.1509%" height="15" fill="rgb(236,170,29)" fg:x="48308" fg:w="174"/><text x="42.1502%" y="591.50"></text></g><g><title>async_io::driver::block_on (18,067 samples, 15.67%)</title><rect x="26.3832%" y="1045" width="15.6705%" height="15" fill="rgb(247,96,15)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="1055.50">async_io::driver::block_..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="1029" width="15.6705%" height="15" fill="rgb(211,210,7)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="1039.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="1013" width="15.6705%" height="15" fill="rgb(240,88,50)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="1023.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,067 samples, 15.67%)</title><rect x="26.3832%" y="997" width="15.6705%" height="15" fill="rgb(209,229,26)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="1007.50">async_executor::Executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="981" width="15.6705%" height="15" fill="rgb(210,68,23)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="991.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="965" width="15.6705%" height="15" fill="rgb(229,180,13)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="975.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,067 samples, 15.67%)</title><rect x="26.3832%" y="949" width="15.6705%" height="15" fill="rgb(236,53,44)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="959.50">async_executor::Executor..</text></g><g><title>async_task::runnable::Runnable::run (18,067 samples, 15.67%)</title><rect x="26.3832%" y="933" width="15.6705%" height="15" fill="rgb(244,214,29)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="943.50">async_task::runnable::Ru..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,067 samples, 15.67%)</title><rect x="26.3832%" y="917" width="15.6705%" height="15" fill="rgb(220,75,29)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="927.50">async_task::raw::RawTask..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="901" width="15.6705%" height="15" fill="rgb(214,183,37)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="885" width="15.6705%" height="15" fill="rgb(239,117,29)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="895.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,067 samples, 15.67%)</title><rect x="26.3832%" y="869" width="15.6705%" height="15" fill="rgb(237,171,35)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="879.50">async_executor::Executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="853" width="15.6705%" height="15" fill="rgb(229,178,53)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="863.50">&lt;async_std::task::builde..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,067 samples, 15.67%)</title><rect x="26.3832%" y="837" width="15.6705%" height="15" fill="rgb(210,102,19)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="847.50">async_std::task::task_lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,067 samples, 15.67%)</title><rect x="26.3832%" y="821" width="15.6705%" height="15" fill="rgb(235,127,22)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="831.50">std::thread::local::Loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,067 samples, 15.67%)</title><rect x="26.3832%" y="805" width="15.6705%" height="15" fill="rgb(244,31,31)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="815.50">std::thread::local::Loca..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,067 samples, 15.67%)</title><rect x="26.3832%" y="789" width="15.6705%" height="15" fill="rgb(231,43,21)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="799.50">async_std::task::task_lo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,067 samples, 15.67%)</title><rect x="26.3832%" y="773" width="15.6705%" height="15" fill="rgb(217,131,35)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="783.50">&lt;async_std::task::builde..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,067 samples, 15.67%)</title><rect x="26.3832%" y="757" width="15.6705%" height="15" fill="rgb(221,149,4)" fg:x="30418" fg:w="18067"/><text x="26.6332%" y="767.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,728 samples, 5.84%)</title><rect x="36.2182%" y="741" width="5.8356%" height="15" fill="rgb(232,170,28)" fg:x="41757" fg:w="6728"/><text x="36.4682%" y="751.50">tremor_..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (28 samples, 0.02%)</title><rect x="42.2706%" y="581" width="0.0243%" height="15" fill="rgb(238,56,10)" fg:x="48735" fg:w="28"/><text x="42.5206%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="42.3113%" y="517" width="0.0130%" height="15" fill="rgb(235,196,14)" fg:x="48782" fg:w="15"/><text x="42.5613%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (26 samples, 0.02%)</title><rect x="42.3096%" y="581" width="0.0226%" height="15" fill="rgb(216,45,48)" fg:x="48780" fg:w="26"/><text x="42.5596%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (26 samples, 0.02%)</title><rect x="42.3096%" y="565" width="0.0226%" height="15" fill="rgb(238,213,17)" fg:x="48780" fg:w="26"/><text x="42.5596%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26 samples, 0.02%)</title><rect x="42.3096%" y="549" width="0.0226%" height="15" fill="rgb(212,13,2)" fg:x="48780" fg:w="26"/><text x="42.5596%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (26 samples, 0.02%)</title><rect x="42.3096%" y="533" width="0.0226%" height="15" fill="rgb(240,114,20)" fg:x="48780" fg:w="26"/><text x="42.5596%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (13 samples, 0.01%)</title><rect x="42.3321%" y="581" width="0.0113%" height="15" fill="rgb(228,41,40)" fg:x="48806" fg:w="13"/><text x="42.5821%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (13 samples, 0.01%)</title><rect x="42.3321%" y="565" width="0.0113%" height="15" fill="rgb(244,132,35)" fg:x="48806" fg:w="13"/><text x="42.5821%" y="575.50"></text></g><g><title>sn_rust_dealloc (94 samples, 0.08%)</title><rect x="42.3755%" y="421" width="0.0815%" height="15" fill="rgb(253,189,4)" fg:x="48856" fg:w="94"/><text x="42.6255%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (150 samples, 0.13%)</title><rect x="42.3616%" y="485" width="0.1301%" height="15" fill="rgb(224,37,19)" fg:x="48840" fg:w="150"/><text x="42.6116%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (150 samples, 0.13%)</title><rect x="42.3616%" y="469" width="0.1301%" height="15" fill="rgb(235,223,18)" fg:x="48840" fg:w="150"/><text x="42.6116%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (146 samples, 0.13%)</title><rect x="42.3651%" y="453" width="0.1266%" height="15" fill="rgb(235,163,25)" fg:x="48844" fg:w="146"/><text x="42.6151%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (146 samples, 0.13%)</title><rect x="42.3651%" y="437" width="0.1266%" height="15" fill="rgb(217,145,28)" fg:x="48844" fg:w="146"/><text x="42.6151%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (40 samples, 0.03%)</title><rect x="42.4570%" y="421" width="0.0347%" height="15" fill="rgb(223,223,32)" fg:x="48950" fg:w="40"/><text x="42.7070%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (167 samples, 0.14%)</title><rect x="42.3521%" y="549" width="0.1448%" height="15" fill="rgb(227,189,39)" fg:x="48829" fg:w="167"/><text x="42.6021%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (164 samples, 0.14%)</title><rect x="42.3547%" y="533" width="0.1422%" height="15" fill="rgb(248,10,22)" fg:x="48832" fg:w="164"/><text x="42.6047%" y="543.50"></text></g><g><title>core::mem::drop (156 samples, 0.14%)</title><rect x="42.3616%" y="517" width="0.1353%" height="15" fill="rgb(248,46,39)" fg:x="48840" fg:w="156"/><text x="42.6116%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (156 samples, 0.14%)</title><rect x="42.3616%" y="501" width="0.1353%" height="15" fill="rgb(248,113,48)" fg:x="48840" fg:w="156"/><text x="42.6116%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (196 samples, 0.17%)</title><rect x="42.3434%" y="581" width="0.1700%" height="15" fill="rgb(245,16,25)" fg:x="48819" fg:w="196"/><text x="42.5934%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (196 samples, 0.17%)</title><rect x="42.3434%" y="565" width="0.1700%" height="15" fill="rgb(249,152,16)" fg:x="48819" fg:w="196"/><text x="42.5934%" y="575.50"></text></g><g><title>sn_rust_dealloc (19 samples, 0.02%)</title><rect x="42.4969%" y="549" width="0.0165%" height="15" fill="rgb(250,16,1)" fg:x="48996" fg:w="19"/><text x="42.7469%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (23 samples, 0.02%)</title><rect x="42.5221%" y="485" width="0.0199%" height="15" fill="rgb(249,138,3)" fg:x="49025" fg:w="23"/><text x="42.7721%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (23 samples, 0.02%)</title><rect x="42.5221%" y="469" width="0.0199%" height="15" fill="rgb(227,71,41)" fg:x="49025" fg:w="23"/><text x="42.7721%" y="479.50"></text></g><g><title>sn_rust_dealloc (125 samples, 0.11%)</title><rect x="42.5420%" y="485" width="0.1084%" height="15" fill="rgb(209,184,23)" fg:x="49048" fg:w="125"/><text x="42.7920%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (170 samples, 0.15%)</title><rect x="42.5178%" y="533" width="0.1475%" height="15" fill="rgb(223,215,31)" fg:x="49020" fg:w="170"/><text x="42.7678%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (169 samples, 0.15%)</title><rect x="42.5186%" y="517" width="0.1466%" height="15" fill="rgb(210,146,28)" fg:x="49021" fg:w="169"/><text x="42.7686%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (169 samples, 0.15%)</title><rect x="42.5186%" y="501" width="0.1466%" height="15" fill="rgb(209,183,41)" fg:x="49021" fg:w="169"/><text x="42.7686%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (17 samples, 0.01%)</title><rect x="42.6505%" y="485" width="0.0147%" height="15" fill="rgb(209,224,45)" fg:x="49173" fg:w="17"/><text x="42.9005%" y="495.50"></text></g><g><title>sn_rust_dealloc (109 samples, 0.09%)</title><rect x="42.9402%" y="357" width="0.0945%" height="15" fill="rgb(224,209,51)" fg:x="49507" fg:w="109"/><text x="43.1902%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (415 samples, 0.36%)</title><rect x="42.6765%" y="437" width="0.3600%" height="15" fill="rgb(223,17,39)" fg:x="49203" fg:w="415"/><text x="42.9265%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (415 samples, 0.36%)</title><rect x="42.6765%" y="421" width="0.3600%" height="15" fill="rgb(234,204,37)" fg:x="49203" fg:w="415"/><text x="42.9265%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (400 samples, 0.35%)</title><rect x="42.6895%" y="405" width="0.3469%" height="15" fill="rgb(236,120,5)" fg:x="49218" fg:w="400"/><text x="42.9395%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (400 samples, 0.35%)</title><rect x="42.6895%" y="389" width="0.3469%" height="15" fill="rgb(248,97,27)" fg:x="49218" fg:w="400"/><text x="42.9395%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (400 samples, 0.35%)</title><rect x="42.6895%" y="373" width="0.3469%" height="15" fill="rgb(240,66,17)" fg:x="49218" fg:w="400"/><text x="42.9395%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="43.0364%" y="405" width="0.0113%" height="15" fill="rgb(210,79,3)" fg:x="49618" fg:w="13"/><text x="43.2864%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="43.0364%" y="389" width="0.0113%" height="15" fill="rgb(214,176,27)" fg:x="49618" fg:w="13"/><text x="43.2864%" y="399.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="43.0364%" y="373" width="0.0113%" height="15" fill="rgb(235,185,3)" fg:x="49618" fg:w="13"/><text x="43.2864%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="43.0364%" y="357" width="0.0113%" height="15" fill="rgb(227,24,12)" fg:x="49618" fg:w="13"/><text x="43.2864%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (440 samples, 0.38%)</title><rect x="42.6687%" y="501" width="0.3816%" height="15" fill="rgb(252,169,48)" fg:x="49194" fg:w="440"/><text x="42.9187%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (438 samples, 0.38%)</title><rect x="42.6704%" y="485" width="0.3799%" height="15" fill="rgb(212,65,1)" fg:x="49196" fg:w="438"/><text x="42.9204%" y="495.50"></text></g><g><title>core::mem::drop (431 samples, 0.37%)</title><rect x="42.6765%" y="469" width="0.3738%" height="15" fill="rgb(242,39,24)" fg:x="49203" fg:w="431"/><text x="42.9265%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (431 samples, 0.37%)</title><rect x="42.6765%" y="453" width="0.3738%" height="15" fill="rgb(249,32,23)" fg:x="49203" fg:w="431"/><text x="42.9265%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (16 samples, 0.01%)</title><rect x="43.0364%" y="437" width="0.0139%" height="15" fill="rgb(251,195,23)" fg:x="49618" fg:w="16"/><text x="43.2864%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="43.0364%" y="421" width="0.0139%" height="15" fill="rgb(236,174,8)" fg:x="49618" fg:w="16"/><text x="43.2864%" y="431.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="43.0503%" y="501" width="0.0373%" height="15" fill="rgb(220,197,8)" fg:x="49634" fg:w="43"/><text x="43.3003%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (663 samples, 0.58%)</title><rect x="42.5134%" y="565" width="0.5751%" height="15" fill="rgb(240,108,37)" fg:x="49015" fg:w="663"/><text x="42.7634%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (659 samples, 0.57%)</title><rect x="42.5169%" y="549" width="0.5716%" height="15" fill="rgb(232,176,24)" fg:x="49019" fg:w="659"/><text x="42.7669%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (488 samples, 0.42%)</title><rect x="42.6652%" y="533" width="0.4233%" height="15" fill="rgb(243,35,29)" fg:x="49190" fg:w="488"/><text x="42.9152%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (488 samples, 0.42%)</title><rect x="42.6652%" y="517" width="0.4233%" height="15" fill="rgb(210,37,18)" fg:x="49190" fg:w="488"/><text x="42.9152%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (20 samples, 0.02%)</title><rect x="43.0885%" y="565" width="0.0173%" height="15" fill="rgb(224,184,40)" fg:x="49678" fg:w="20"/><text x="43.3385%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (20 samples, 0.02%)</title><rect x="43.0885%" y="549" width="0.0173%" height="15" fill="rgb(236,39,29)" fg:x="49678" fg:w="20"/><text x="43.3385%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="43.0885%" y="533" width="0.0173%" height="15" fill="rgb(232,48,39)" fg:x="49678" fg:w="20"/><text x="43.3385%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.02%)</title><rect x="43.0902%" y="517" width="0.0156%" height="15" fill="rgb(236,34,42)" fg:x="49680" fg:w="18"/><text x="43.3402%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.02%)</title><rect x="43.0902%" y="501" width="0.0156%" height="15" fill="rgb(243,106,37)" fg:x="49680" fg:w="18"/><text x="43.3402%" y="511.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (21 samples, 0.02%)</title><rect x="43.3790%" y="389" width="0.0182%" height="15" fill="rgb(218,96,6)" fg:x="50013" fg:w="21"/><text x="43.6290%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (13 samples, 0.01%)</title><rect x="43.3860%" y="373" width="0.0113%" height="15" fill="rgb(235,130,12)" fg:x="50021" fg:w="13"/><text x="43.6360%" y="383.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (18 samples, 0.02%)</title><rect x="43.3973%" y="389" width="0.0156%" height="15" fill="rgb(231,95,0)" fg:x="50034" fg:w="18"/><text x="43.6473%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.06%)</title><rect x="43.3695%" y="421" width="0.0624%" height="15" fill="rgb(228,12,23)" fg:x="50002" fg:w="72"/><text x="43.6195%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.06%)</title><rect x="43.3695%" y="405" width="0.0624%" height="15" fill="rgb(216,12,1)" fg:x="50002" fg:w="72"/><text x="43.6195%" y="415.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (22 samples, 0.02%)</title><rect x="43.4129%" y="389" width="0.0191%" height="15" fill="rgb(219,59,3)" fg:x="50052" fg:w="22"/><text x="43.6629%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="43.4424%" y="389" width="0.0147%" height="15" fill="rgb(215,208,46)" fg:x="50086" fg:w="17"/><text x="43.6924%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (17 samples, 0.01%)</title><rect x="43.4424%" y="373" width="0.0147%" height="15" fill="rgb(254,224,29)" fg:x="50086" fg:w="17"/><text x="43.6924%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (467 samples, 0.41%)</title><rect x="43.4571%" y="373" width="0.4051%" height="15" fill="rgb(232,14,29)" fg:x="50103" fg:w="467"/><text x="43.7071%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (28 samples, 0.02%)</title><rect x="43.8379%" y="357" width="0.0243%" height="15" fill="rgb(208,45,52)" fg:x="50542" fg:w="28"/><text x="44.0879%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (581 samples, 0.50%)</title><rect x="43.4571%" y="389" width="0.5039%" height="15" fill="rgb(234,191,28)" fg:x="50103" fg:w="581"/><text x="43.7071%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (114 samples, 0.10%)</title><rect x="43.8622%" y="373" width="0.0989%" height="15" fill="rgb(244,67,43)" fg:x="50570" fg:w="114"/><text x="44.1122%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (671 samples, 0.58%)</title><rect x="43.4320%" y="405" width="0.5820%" height="15" fill="rgb(236,189,24)" fg:x="50074" fg:w="671"/><text x="43.6820%" y="415.50"></text></g><g><title>sn_rust_dealloc (61 samples, 0.05%)</title><rect x="43.9610%" y="389" width="0.0529%" height="15" fill="rgb(239,214,33)" fg:x="50684" fg:w="61"/><text x="44.2110%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (680 samples, 0.59%)</title><rect x="43.4320%" y="421" width="0.5898%" height="15" fill="rgb(226,176,41)" fg:x="50074" fg:w="680"/><text x="43.6820%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (369 samples, 0.32%)</title><rect x="44.0304%" y="389" width="0.3201%" height="15" fill="rgb(248,47,8)" fg:x="50764" fg:w="369"/><text x="44.2804%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (369 samples, 0.32%)</title><rect x="44.0304%" y="373" width="0.3201%" height="15" fill="rgb(218,81,44)" fg:x="50764" fg:w="369"/><text x="44.2804%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (384 samples, 0.33%)</title><rect x="44.0287%" y="405" width="0.3331%" height="15" fill="rgb(213,98,6)" fg:x="50762" fg:w="384"/><text x="44.2787%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (13 samples, 0.01%)</title><rect x="44.3505%" y="389" width="0.0113%" height="15" fill="rgb(222,85,22)" fg:x="51133" fg:w="13"/><text x="44.6005%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,152 samples, 1.00%)</title><rect x="43.3652%" y="437" width="0.9992%" height="15" fill="rgb(239,46,39)" fg:x="49997" fg:w="1152"/><text x="43.6152%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (388 samples, 0.34%)</title><rect x="44.0278%" y="421" width="0.3365%" height="15" fill="rgb(237,12,29)" fg:x="50761" fg:w="388"/><text x="44.2778%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,167 samples, 1.01%)</title><rect x="43.3652%" y="485" width="1.0122%" height="15" fill="rgb(214,77,8)" fg:x="49997" fg:w="1167"/><text x="43.6152%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,167 samples, 1.01%)</title><rect x="43.3652%" y="469" width="1.0122%" height="15" fill="rgb(217,168,37)" fg:x="49997" fg:w="1167"/><text x="43.6152%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,167 samples, 1.01%)</title><rect x="43.3652%" y="453" width="1.0122%" height="15" fill="rgb(221,217,23)" fg:x="49997" fg:w="1167"/><text x="43.6152%" y="463.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.07%)</title><rect x="44.3774%" y="485" width="0.0659%" height="15" fill="rgb(243,229,36)" fg:x="51164" fg:w="76"/><text x="44.6274%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,562 samples, 1.35%)</title><rect x="43.1162%" y="533" width="1.3548%" height="15" fill="rgb(251,163,40)" fg:x="49710" fg:w="1562"/><text x="43.3662%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,562 samples, 1.35%)</title><rect x="43.1162%" y="517" width="1.3548%" height="15" fill="rgb(237,222,12)" fg:x="49710" fg:w="1562"/><text x="43.3662%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,562 samples, 1.35%)</title><rect x="43.1162%" y="501" width="1.3548%" height="15" fill="rgb(248,132,6)" fg:x="49710" fg:w="1562"/><text x="43.3662%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (32 samples, 0.03%)</title><rect x="44.4433%" y="485" width="0.0278%" height="15" fill="rgb(227,167,50)" fg:x="51240" fg:w="32"/><text x="44.6933%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,573 samples, 1.36%)</title><rect x="43.1119%" y="549" width="1.3643%" height="15" fill="rgb(242,84,37)" fg:x="49705" fg:w="1573"/><text x="43.3619%" y="559.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (179 samples, 0.16%)</title><rect x="44.4997%" y="389" width="0.1553%" height="15" fill="rgb(212,4,50)" fg:x="51305" fg:w="179"/><text x="44.7497%" y="399.50"></text></g><g><title>core::mem::drop (394 samples, 0.34%)</title><rect x="44.6731%" y="309" width="0.3417%" height="15" fill="rgb(230,228,32)" fg:x="51505" fg:w="394"/><text x="44.9231%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (394 samples, 0.34%)</title><rect x="44.6731%" y="293" width="0.3417%" height="15" fill="rgb(248,217,23)" fg:x="51505" fg:w="394"/><text x="44.9231%" y="303.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (394 samples, 0.34%)</title><rect x="44.6731%" y="277" width="0.3417%" height="15" fill="rgb(238,197,32)" fg:x="51505" fg:w="394"/><text x="44.9231%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (384 samples, 0.33%)</title><rect x="44.6818%" y="261" width="0.3331%" height="15" fill="rgb(236,106,1)" fg:x="51515" fg:w="384"/><text x="44.9318%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (384 samples, 0.33%)</title><rect x="44.6818%" y="245" width="0.3331%" height="15" fill="rgb(219,228,13)" fg:x="51515" fg:w="384"/><text x="44.9318%" y="255.50"></text></g><g><title>sn_rust_dealloc (106 samples, 0.09%)</title><rect x="45.0296%" y="261" width="0.0919%" height="15" fill="rgb(238,30,35)" fg:x="51916" fg:w="106"/><text x="45.2796%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (576 samples, 0.50%)</title><rect x="44.6653%" y="325" width="0.4996%" height="15" fill="rgb(236,70,23)" fg:x="51496" fg:w="576"/><text x="44.9153%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (173 samples, 0.15%)</title><rect x="45.0149%" y="309" width="0.1501%" height="15" fill="rgb(249,104,48)" fg:x="51899" fg:w="173"/><text x="45.2649%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (173 samples, 0.15%)</title><rect x="45.0149%" y="293" width="0.1501%" height="15" fill="rgb(254,117,50)" fg:x="51899" fg:w="173"/><text x="45.2649%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (173 samples, 0.15%)</title><rect x="45.0149%" y="277" width="0.1501%" height="15" fill="rgb(223,152,4)" fg:x="51899" fg:w="173"/><text x="45.2649%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (50 samples, 0.04%)</title><rect x="45.1216%" y="261" width="0.0434%" height="15" fill="rgb(245,6,2)" fg:x="52022" fg:w="50"/><text x="45.3716%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (484 samples, 0.42%)</title><rect x="45.1649%" y="325" width="0.4198%" height="15" fill="rgb(249,150,24)" fg:x="52072" fg:w="484"/><text x="45.4149%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (484 samples, 0.42%)</title><rect x="45.1649%" y="309" width="0.4198%" height="15" fill="rgb(228,185,42)" fg:x="52072" fg:w="484"/><text x="45.4149%" y="319.50"></text></g><g><title>sn_rust_dealloc (35 samples, 0.03%)</title><rect x="45.5847%" y="325" width="0.0304%" height="15" fill="rgb(226,39,33)" fg:x="52556" fg:w="35"/><text x="45.8347%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,309 samples, 1.14%)</title><rect x="44.4815%" y="453" width="1.1354%" height="15" fill="rgb(221,166,19)" fg:x="51284" fg:w="1309"/><text x="44.7315%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,309 samples, 1.14%)</title><rect x="44.4815%" y="437" width="1.1354%" height="15" fill="rgb(209,109,2)" fg:x="51284" fg:w="1309"/><text x="44.7315%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,298 samples, 1.13%)</title><rect x="44.4910%" y="421" width="1.1258%" height="15" fill="rgb(252,216,26)" fg:x="51295" fg:w="1298"/><text x="44.7410%" y="431.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,298 samples, 1.13%)</title><rect x="44.4910%" y="405" width="1.1258%" height="15" fill="rgb(227,173,36)" fg:x="51295" fg:w="1298"/><text x="44.7410%" y="415.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,109 samples, 0.96%)</title><rect x="44.6549%" y="389" width="0.9619%" height="15" fill="rgb(209,90,7)" fg:x="51484" fg:w="1109"/><text x="44.9049%" y="399.50"></text></g><g><title>core::mem::drop (1,097 samples, 0.95%)</title><rect x="44.6653%" y="373" width="0.9515%" height="15" fill="rgb(250,194,11)" fg:x="51496" fg:w="1097"/><text x="44.9153%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,097 samples, 0.95%)</title><rect x="44.6653%" y="357" width="0.9515%" height="15" fill="rgb(220,72,50)" fg:x="51496" fg:w="1097"/><text x="44.9153%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,097 samples, 0.95%)</title><rect x="44.6653%" y="341" width="0.9515%" height="15" fill="rgb(222,106,48)" fg:x="51496" fg:w="1097"/><text x="44.9153%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,328 samples, 1.15%)</title><rect x="44.4762%" y="517" width="1.1518%" height="15" fill="rgb(216,220,45)" fg:x="51278" fg:w="1328"/><text x="44.7262%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,327 samples, 1.15%)</title><rect x="44.4771%" y="501" width="1.1510%" height="15" fill="rgb(234,112,18)" fg:x="51279" fg:w="1327"/><text x="44.7271%" y="511.50"></text></g><g><title>core::mem::drop (1,322 samples, 1.15%)</title><rect x="44.4815%" y="485" width="1.1466%" height="15" fill="rgb(206,179,9)" fg:x="51284" fg:w="1322"/><text x="44.7315%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,322 samples, 1.15%)</title><rect x="44.4815%" y="469" width="1.1466%" height="15" fill="rgb(215,115,40)" fg:x="51284" fg:w="1322"/><text x="44.7315%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="45.6168%" y="453" width="0.0113%" height="15" fill="rgb(222,69,34)" fg:x="52593" fg:w="13"/><text x="45.8668%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="45.6168%" y="437" width="0.0113%" height="15" fill="rgb(209,161,10)" fg:x="52593" fg:w="13"/><text x="45.8668%" y="447.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="45.6281%" y="517" width="0.0295%" height="15" fill="rgb(217,6,38)" fg:x="52606" fg:w="34"/><text x="45.8781%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,366 samples, 1.18%)</title><rect x="44.4762%" y="549" width="1.1848%" height="15" fill="rgb(229,229,48)" fg:x="51278" fg:w="1366"/><text x="44.7262%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,366 samples, 1.18%)</title><rect x="44.4762%" y="533" width="1.1848%" height="15" fill="rgb(225,21,28)" fg:x="51278" fg:w="1366"/><text x="44.7262%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (60 samples, 0.05%)</title><rect x="45.7166%" y="309" width="0.0520%" height="15" fill="rgb(206,33,13)" fg:x="52708" fg:w="60"/><text x="45.9666%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (52 samples, 0.05%)</title><rect x="45.7235%" y="293" width="0.0451%" height="15" fill="rgb(242,178,17)" fg:x="52716" fg:w="52"/><text x="45.9735%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.11%)</title><rect x="45.7079%" y="341" width="0.1076%" height="15" fill="rgb(220,162,5)" fg:x="52698" fg:w="124"/><text x="45.9579%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.11%)</title><rect x="45.7079%" y="325" width="0.1076%" height="15" fill="rgb(210,33,43)" fg:x="52698" fg:w="124"/><text x="45.9579%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (51 samples, 0.04%)</title><rect x="45.7712%" y="309" width="0.0442%" height="15" fill="rgb(216,116,54)" fg:x="52771" fg:w="51"/><text x="46.0212%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (503 samples, 0.44%)</title><rect x="45.8692%" y="245" width="0.4363%" height="15" fill="rgb(249,92,24)" fg:x="52884" fg:w="503"/><text x="46.1192%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (500 samples, 0.43%)</title><rect x="45.8718%" y="229" width="0.4337%" height="15" fill="rgb(231,189,14)" fg:x="52887" fg:w="500"/><text x="46.1218%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (444 samples, 0.39%)</title><rect x="45.9204%" y="213" width="0.3851%" height="15" fill="rgb(230,8,41)" fg:x="52943" fg:w="444"/><text x="46.1704%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (40 samples, 0.03%)</title><rect x="46.2708%" y="197" width="0.0347%" height="15" fill="rgb(249,7,27)" fg:x="53347" fg:w="40"/><text x="46.5208%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (537 samples, 0.47%)</title><rect x="45.8553%" y="309" width="0.4658%" height="15" fill="rgb(232,86,5)" fg:x="52868" fg:w="537"/><text x="46.1053%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (530 samples, 0.46%)</title><rect x="45.8614%" y="293" width="0.4597%" height="15" fill="rgb(224,175,18)" fg:x="52875" fg:w="530"/><text x="46.1114%" y="303.50"></text></g><g><title>core::mem::drop (521 samples, 0.45%)</title><rect x="45.8692%" y="277" width="0.4519%" height="15" fill="rgb(220,129,12)" fg:x="52884" fg:w="521"/><text x="46.1192%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (521 samples, 0.45%)</title><rect x="45.8692%" y="261" width="0.4519%" height="15" fill="rgb(210,19,36)" fg:x="52884" fg:w="521"/><text x="46.1192%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (18 samples, 0.02%)</title><rect x="46.3055%" y="245" width="0.0156%" height="15" fill="rgb(219,96,14)" fg:x="53387" fg:w="18"/><text x="46.5555%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="46.3055%" y="229" width="0.0156%" height="15" fill="rgb(249,106,1)" fg:x="53387" fg:w="18"/><text x="46.5555%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (159 samples, 0.14%)</title><rect x="46.3237%" y="293" width="0.1379%" height="15" fill="rgb(249,155,20)" fg:x="53408" fg:w="159"/><text x="46.5737%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (57 samples, 0.05%)</title><rect x="46.4122%" y="277" width="0.0494%" height="15" fill="rgb(244,168,9)" fg:x="53510" fg:w="57"/><text x="46.6622%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (366 samples, 0.32%)</title><rect x="46.3211%" y="309" width="0.3175%" height="15" fill="rgb(216,23,50)" fg:x="53405" fg:w="366"/><text x="46.5711%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (204 samples, 0.18%)</title><rect x="46.4616%" y="293" width="0.1769%" height="15" fill="rgb(224,219,20)" fg:x="53567" fg:w="204"/><text x="46.7116%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="46.6238%" y="277" width="0.0147%" height="15" fill="rgb(222,156,15)" fg:x="53754" fg:w="17"/><text x="46.8738%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="46.6238%" y="261" width="0.0147%" height="15" fill="rgb(231,97,17)" fg:x="53754" fg:w="17"/><text x="46.8738%" y="271.50"></text></g><g><title>sn_rust_dealloc (138 samples, 0.12%)</title><rect x="46.6386%" y="309" width="0.1197%" height="15" fill="rgb(218,70,48)" fg:x="53771" fg:w="138"/><text x="46.8886%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,199 samples, 1.04%)</title><rect x="45.8154%" y="325" width="1.0400%" height="15" fill="rgb(212,196,52)" fg:x="52822" fg:w="1199"/><text x="46.0654%" y="335.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (112 samples, 0.10%)</title><rect x="46.7583%" y="309" width="0.0971%" height="15" fill="rgb(243,203,18)" fg:x="53909" fg:w="112"/><text x="47.0083%" y="319.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,203 samples, 1.04%)</title><rect x="45.8154%" y="341" width="1.0434%" height="15" fill="rgb(252,125,41)" fg:x="52822" fg:w="1203"/><text x="46.0654%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,339 samples, 1.16%)</title><rect x="45.7070%" y="357" width="1.1614%" height="15" fill="rgb(223,180,33)" fg:x="52697" fg:w="1339"/><text x="45.9570%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (21 samples, 0.02%)</title><rect x="46.8684%" y="357" width="0.0182%" height="15" fill="rgb(254,159,46)" fg:x="54036" fg:w="21"/><text x="47.1184%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (21 samples, 0.02%)</title><rect x="46.8684%" y="341" width="0.0182%" height="15" fill="rgb(254,38,10)" fg:x="54036" fg:w="21"/><text x="47.1184%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,364 samples, 1.18%)</title><rect x="45.7070%" y="405" width="1.1831%" height="15" fill="rgb(208,217,32)" fg:x="52697" fg:w="1364"/><text x="45.9570%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,364 samples, 1.18%)</title><rect x="45.7070%" y="389" width="1.1831%" height="15" fill="rgb(221,120,13)" fg:x="52697" fg:w="1364"/><text x="45.9570%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,364 samples, 1.18%)</title><rect x="45.7070%" y="373" width="1.1831%" height="15" fill="rgb(246,54,52)" fg:x="52697" fg:w="1364"/><text x="45.9570%" y="383.50"></text></g><g><title>sn_rust_dealloc (111 samples, 0.10%)</title><rect x="46.8901%" y="405" width="0.0963%" height="15" fill="rgb(242,34,25)" fg:x="54061" fg:w="111"/><text x="47.1401%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,300 samples, 1.99%)</title><rect x="45.6984%" y="453" width="1.9949%" height="15" fill="rgb(247,209,9)" fg:x="52687" fg:w="2300"/><text x="45.9484%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,300 samples, 1.99%)</title><rect x="45.6984%" y="437" width="1.9949%" height="15" fill="rgb(228,71,26)" fg:x="52687" fg:w="2300"/><text x="45.9484%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,300 samples, 1.99%)</title><rect x="45.6984%" y="421" width="1.9949%" height="15" fill="rgb(222,145,49)" fg:x="52687" fg:w="2300"/><text x="45.9484%" y="431.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (815 samples, 0.71%)</title><rect x="46.9864%" y="405" width="0.7069%" height="15" fill="rgb(218,121,17)" fg:x="54172" fg:w="815"/><text x="47.2364%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,314 samples, 2.01%)</title><rect x="45.6949%" y="469" width="2.0071%" height="15" fill="rgb(244,50,7)" fg:x="52683" fg:w="2314"/><text x="45.9449%" y="479.50">a..</text></g><g><title>sn_rust_dealloc (67 samples, 0.06%)</title><rect x="47.7019%" y="469" width="0.0581%" height="15" fill="rgb(246,229,37)" fg:x="54997" fg:w="67"/><text x="47.9519%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,432 samples, 2.11%)</title><rect x="45.6611%" y="549" width="2.1094%" height="15" fill="rgb(225,18,5)" fg:x="52644" fg:w="2432"/><text x="45.9111%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,432 samples, 2.11%)</title><rect x="45.6611%" y="533" width="2.1094%" height="15" fill="rgb(213,204,8)" fg:x="52644" fg:w="2432"/><text x="45.9111%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,410 samples, 2.09%)</title><rect x="45.6801%" y="517" width="2.0903%" height="15" fill="rgb(238,103,6)" fg:x="52666" fg:w="2410"/><text x="45.9301%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,410 samples, 2.09%)</title><rect x="45.6801%" y="501" width="2.0903%" height="15" fill="rgb(222,25,35)" fg:x="52666" fg:w="2410"/><text x="45.9301%" y="511.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,410 samples, 2.09%)</title><rect x="45.6801%" y="485" width="2.0903%" height="15" fill="rgb(213,203,35)" fg:x="52666" fg:w="2410"/><text x="45.9301%" y="495.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (12 samples, 0.01%)</title><rect x="47.7601%" y="469" width="0.0104%" height="15" fill="rgb(221,79,53)" fg:x="55064" fg:w="12"/><text x="48.0101%" y="479.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="47.7705%" y="549" width="0.0243%" height="15" fill="rgb(243,200,35)" fg:x="55076" fg:w="28"/><text x="48.0205%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,108 samples, 5.30%)</title><rect x="42.5134%" y="581" width="5.2978%" height="15" fill="rgb(248,60,25)" fg:x="49015" fg:w="6108"/><text x="42.7634%" y="591.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,418 samples, 4.70%)</title><rect x="43.1119%" y="565" width="4.6993%" height="15" fill="rgb(227,53,46)" fg:x="49705" fg:w="5418"/><text x="43.3619%" y="575.50">core:..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (19 samples, 0.02%)</title><rect x="47.7947%" y="549" width="0.0165%" height="15" fill="rgb(216,120,32)" fg:x="55104" fg:w="19"/><text x="48.0447%" y="559.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (28 samples, 0.02%)</title><rect x="47.9595%" y="533" width="0.0243%" height="15" fill="rgb(220,134,1)" fg:x="55294" fg:w="28"/><text x="48.2095%" y="543.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (21 samples, 0.02%)</title><rect x="47.9656%" y="517" width="0.0182%" height="15" fill="rgb(237,168,5)" fg:x="55301" fg:w="21"/><text x="48.2156%" y="527.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (196 samples, 0.17%)</title><rect x="47.8147%" y="581" width="0.1700%" height="15" fill="rgb(231,100,33)" fg:x="55127" fg:w="196"/><text x="48.0647%" y="591.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (192 samples, 0.17%)</title><rect x="47.8182%" y="565" width="0.1665%" height="15" fill="rgb(236,177,47)" fg:x="55131" fg:w="192"/><text x="48.0682%" y="575.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (192 samples, 0.17%)</title><rect x="47.8182%" y="549" width="0.1665%" height="15" fill="rgb(235,7,49)" fg:x="55131" fg:w="192"/><text x="48.0682%" y="559.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.03%)</title><rect x="47.9847%" y="581" width="0.0260%" height="15" fill="rgb(232,119,22)" fg:x="55323" fg:w="30"/><text x="48.2347%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (21 samples, 0.02%)</title><rect x="48.0107%" y="581" width="0.0182%" height="15" fill="rgb(254,73,53)" fg:x="55353" fg:w="21"/><text x="48.2607%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (13 samples, 0.01%)</title><rect x="48.0367%" y="565" width="0.0113%" height="15" fill="rgb(251,35,20)" fg:x="55383" fg:w="13"/><text x="48.2867%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (20 samples, 0.02%)</title><rect x="48.0480%" y="565" width="0.0173%" height="15" fill="rgb(241,119,20)" fg:x="55396" fg:w="20"/><text x="48.2980%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (66 samples, 0.06%)</title><rect x="48.0654%" y="549" width="0.0572%" height="15" fill="rgb(207,102,14)" fg:x="55416" fg:w="66"/><text x="48.3154%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (23 samples, 0.02%)</title><rect x="48.1452%" y="517" width="0.0199%" height="15" fill="rgb(248,201,50)" fg:x="55508" fg:w="23"/><text x="48.3952%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (23 samples, 0.02%)</title><rect x="48.1452%" y="501" width="0.0199%" height="15" fill="rgb(222,185,44)" fg:x="55508" fg:w="23"/><text x="48.3952%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (23 samples, 0.02%)</title><rect x="48.1452%" y="485" width="0.0199%" height="15" fill="rgb(218,107,18)" fg:x="55508" fg:w="23"/><text x="48.3952%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (23 samples, 0.02%)</title><rect x="48.1452%" y="469" width="0.0199%" height="15" fill="rgb(237,177,39)" fg:x="55508" fg:w="23"/><text x="48.3952%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (23 samples, 0.02%)</title><rect x="48.1452%" y="453" width="0.0199%" height="15" fill="rgb(246,69,6)" fg:x="55508" fg:w="23"/><text x="48.3952%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="48.1521%" y="437" width="0.0130%" height="15" fill="rgb(234,208,37)" fg:x="55516" fg:w="15"/><text x="48.4021%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (125 samples, 0.11%)</title><rect x="48.0654%" y="565" width="0.1084%" height="15" fill="rgb(225,4,6)" fg:x="55416" fg:w="125"/><text x="48.3154%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (59 samples, 0.05%)</title><rect x="48.1226%" y="549" width="0.0512%" height="15" fill="rgb(233,45,0)" fg:x="55482" fg:w="59"/><text x="48.3726%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (59 samples, 0.05%)</title><rect x="48.1226%" y="533" width="0.0512%" height="15" fill="rgb(226,136,5)" fg:x="55482" fg:w="59"/><text x="48.3726%" y="543.50"></text></g><g><title>tremor_common::time::nanotime (440 samples, 0.38%)</title><rect x="48.0289%" y="581" width="0.3816%" height="15" fill="rgb(211,91,47)" fg:x="55374" fg:w="440"/><text x="48.2789%" y="591.50"></text></g><g><title>std::time::SystemTime::now (273 samples, 0.24%)</title><rect x="48.1738%" y="565" width="0.2368%" height="15" fill="rgb(242,88,51)" fg:x="55541" fg:w="273"/><text x="48.4238%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (273 samples, 0.24%)</title><rect x="48.1738%" y="549" width="0.2368%" height="15" fill="rgb(230,91,28)" fg:x="55541" fg:w="273"/><text x="48.4238%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (273 samples, 0.24%)</title><rect x="48.1738%" y="533" width="0.2368%" height="15" fill="rgb(254,186,29)" fg:x="55541" fg:w="273"/><text x="48.4238%" y="543.50"></text></g><g><title>__clock_gettime (217 samples, 0.19%)</title><rect x="48.2224%" y="517" width="0.1882%" height="15" fill="rgb(238,6,4)" fg:x="55597" fg:w="217"/><text x="48.4724%" y="527.50"></text></g><g><title>__vdso_clock_gettime (206 samples, 0.18%)</title><rect x="48.2319%" y="501" width="0.1787%" height="15" fill="rgb(221,151,16)" fg:x="55608" fg:w="206"/><text x="48.4819%" y="511.50"></text></g><g><title>[[vdso]] (184 samples, 0.16%)</title><rect x="48.2510%" y="485" width="0.1596%" height="15" fill="rgb(251,143,52)" fg:x="55630" fg:w="184"/><text x="48.5010%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (80 samples, 0.07%)</title><rect x="48.4140%" y="565" width="0.0694%" height="15" fill="rgb(206,90,15)" fg:x="55818" fg:w="80"/><text x="48.6640%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,415 samples, 6.43%)</title><rect x="42.0581%" y="869" width="6.4314%" height="15" fill="rgb(218,35,8)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="879.50">tremor_r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,415 samples, 6.43%)</title><rect x="42.0581%" y="853" width="6.4314%" height="15" fill="rgb(239,215,6)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="863.50">&lt;core::f..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,415 samples, 6.43%)</title><rect x="42.0581%" y="837" width="6.4314%" height="15" fill="rgb(245,116,39)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="847.50">tremor_r..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,415 samples, 6.43%)</title><rect x="42.0581%" y="821" width="6.4314%" height="15" fill="rgb(242,65,28)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="831.50">&lt;async_f..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,415 samples, 6.43%)</title><rect x="42.0581%" y="805" width="6.4314%" height="15" fill="rgb(252,132,53)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="815.50">&lt;async_f..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,415 samples, 6.43%)</title><rect x="42.0581%" y="789" width="6.4314%" height="15" fill="rgb(224,159,50)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="799.50">&lt;core::t..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,415 samples, 6.43%)</title><rect x="42.0581%" y="773" width="6.4314%" height="15" fill="rgb(224,93,4)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="783.50">&lt;async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,415 samples, 6.43%)</title><rect x="42.0581%" y="757" width="6.4314%" height="15" fill="rgb(208,81,34)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="767.50">async_ff..</text></g><g><title>std::panic::catch_unwind (7,415 samples, 6.43%)</title><rect x="42.0581%" y="741" width="6.4314%" height="15" fill="rgb(233,92,54)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="751.50">std::pan..</text></g><g><title>std::panicking::try (7,415 samples, 6.43%)</title><rect x="42.0581%" y="725" width="6.4314%" height="15" fill="rgb(237,21,14)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="735.50">std::pan..</text></g><g><title>std::panicking::try::do_call (7,415 samples, 6.43%)</title><rect x="42.0581%" y="709" width="6.4314%" height="15" fill="rgb(249,128,51)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="719.50">std::pan..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,415 samples, 6.43%)</title><rect x="42.0581%" y="693" width="6.4314%" height="15" fill="rgb(223,129,24)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="703.50">&lt;core::p..</text></g><g><title>core::ops::function::FnOnce::call_once (7,415 samples, 6.43%)</title><rect x="42.0581%" y="677" width="6.4314%" height="15" fill="rgb(231,168,25)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="687.50">core::op..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,415 samples, 6.43%)</title><rect x="42.0581%" y="661" width="6.4314%" height="15" fill="rgb(224,39,20)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="671.50">async_ff..</text></g><g><title>async_ffi::FfiContext::with_context (7,415 samples, 6.43%)</title><rect x="42.0581%" y="645" width="6.4314%" height="15" fill="rgb(225,152,53)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="655.50">async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,415 samples, 6.43%)</title><rect x="42.0581%" y="629" width="6.4314%" height="15" fill="rgb(252,17,24)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="639.50">async_ff..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,415 samples, 6.43%)</title><rect x="42.0581%" y="613" width="6.4314%" height="15" fill="rgb(250,114,30)" fg:x="48490" fg:w="7415"/><text x="42.3081%" y="623.50">&lt;core::f..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,403 samples, 6.42%)</title><rect x="42.0685%" y="597" width="6.4210%" height="15" fill="rgb(229,5,4)" fg:x="48502" fg:w="7403"/><text x="42.3185%" y="607.50">&lt;tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (91 samples, 0.08%)</title><rect x="48.4106%" y="581" width="0.0789%" height="15" fill="rgb(225,176,49)" fg:x="55814" fg:w="91"/><text x="48.6606%" y="591.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="48.4938%" y="741" width="0.0451%" height="15" fill="rgb(224,221,49)" fg:x="55910" fg:w="52"/><text x="48.7438%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (82 samples, 0.07%)</title><rect x="48.6196%" y="661" width="0.0711%" height="15" fill="rgb(253,169,27)" fg:x="56055" fg:w="82"/><text x="48.8696%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (82 samples, 0.07%)</title><rect x="48.6196%" y="645" width="0.0711%" height="15" fill="rgb(211,206,16)" fg:x="56055" fg:w="82"/><text x="48.8696%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (232 samples, 0.20%)</title><rect x="48.6907%" y="661" width="0.2012%" height="15" fill="rgb(244,87,35)" fg:x="56137" fg:w="232"/><text x="48.9407%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (232 samples, 0.20%)</title><rect x="48.6907%" y="645" width="0.2012%" height="15" fill="rgb(246,28,10)" fg:x="56137" fg:w="232"/><text x="48.9407%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (368 samples, 0.32%)</title><rect x="48.5736%" y="693" width="0.3192%" height="15" fill="rgb(229,12,44)" fg:x="56002" fg:w="368"/><text x="48.8236%" y="703.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (346 samples, 0.30%)</title><rect x="48.5927%" y="677" width="0.3001%" height="15" fill="rgb(210,145,37)" fg:x="56024" fg:w="346"/><text x="48.8427%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (45 samples, 0.04%)</title><rect x="48.8946%" y="677" width="0.0390%" height="15" fill="rgb(227,112,52)" fg:x="56372" fg:w="45"/><text x="49.1446%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (42 samples, 0.04%)</title><rect x="48.8972%" y="661" width="0.0364%" height="15" fill="rgb(238,155,34)" fg:x="56375" fg:w="42"/><text x="49.1472%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="48.8972%" y="645" width="0.0364%" height="15" fill="rgb(239,226,36)" fg:x="56375" fg:w="42"/><text x="49.1472%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="48.8998%" y="629" width="0.0338%" height="15" fill="rgb(230,16,23)" fg:x="56378" fg:w="39"/><text x="49.1498%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (38 samples, 0.03%)</title><rect x="48.9006%" y="613" width="0.0330%" height="15" fill="rgb(236,171,36)" fg:x="56379" fg:w="38"/><text x="49.1506%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (38 samples, 0.03%)</title><rect x="48.9006%" y="597" width="0.0330%" height="15" fill="rgb(221,22,14)" fg:x="56379" fg:w="38"/><text x="49.1506%" y="607.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (744 samples, 0.65%)</title><rect x="48.5693%" y="709" width="0.6453%" height="15" fill="rgb(242,43,11)" fg:x="55997" fg:w="744"/><text x="48.8193%" y="719.50"></text></g><g><title>event_listener::Event::notify (371 samples, 0.32%)</title><rect x="48.8928%" y="693" width="0.3218%" height="15" fill="rgb(232,69,23)" fg:x="56370" fg:w="371"/><text x="49.1428%" y="703.50"></text></g><g><title>event_listener::full_fence (308 samples, 0.27%)</title><rect x="48.9475%" y="677" width="0.2671%" height="15" fill="rgb(216,180,54)" fg:x="56433" fg:w="308"/><text x="49.1975%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (303 samples, 0.26%)</title><rect x="48.9518%" y="661" width="0.2628%" height="15" fill="rgb(216,5,24)" fg:x="56438" fg:w="303"/><text x="49.2018%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (303 samples, 0.26%)</title><rect x="48.9518%" y="645" width="0.2628%" height="15" fill="rgb(225,89,9)" fg:x="56438" fg:w="303"/><text x="49.2018%" y="655.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (834 samples, 0.72%)</title><rect x="48.5511%" y="725" width="0.7234%" height="15" fill="rgb(243,75,33)" fg:x="55976" fg:w="834"/><text x="48.8011%" y="735.50"></text></g><g><title>event_listener::Event::notify (55 samples, 0.05%)</title><rect x="49.2268%" y="709" width="0.0477%" height="15" fill="rgb(247,141,45)" fg:x="56755" fg:w="55"/><text x="49.4768%" y="719.50"></text></g><g><title>event_listener::full_fence (54 samples, 0.05%)</title><rect x="49.2276%" y="693" width="0.0468%" height="15" fill="rgb(232,177,36)" fg:x="56756" fg:w="54"/><text x="49.4776%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (52 samples, 0.05%)</title><rect x="49.2294%" y="677" width="0.0451%" height="15" fill="rgb(219,125,36)" fg:x="56758" fg:w="52"/><text x="49.4794%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.05%)</title><rect x="49.2294%" y="661" width="0.0451%" height="15" fill="rgb(227,94,9)" fg:x="56758" fg:w="52"/><text x="49.4794%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (908 samples, 0.79%)</title><rect x="48.4895%" y="757" width="0.7876%" height="15" fill="rgb(240,34,52)" fg:x="55905" fg:w="908"/><text x="48.7395%" y="767.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (851 samples, 0.74%)</title><rect x="48.5389%" y="741" width="0.7381%" height="15" fill="rgb(216,45,12)" fg:x="55962" fg:w="851"/><text x="48.7889%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (145 samples, 0.13%)</title><rect x="49.2788%" y="757" width="0.1258%" height="15" fill="rgb(246,21,19)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (145 samples, 0.13%)</title><rect x="49.2788%" y="741" width="0.1258%" height="15" fill="rgb(213,98,42)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (145 samples, 0.13%)</title><rect x="49.2788%" y="725" width="0.1258%" height="15" fill="rgb(250,136,47)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145 samples, 0.13%)</title><rect x="49.2788%" y="709" width="0.1258%" height="15" fill="rgb(251,124,27)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="719.50"></text></g><g><title>alloc::alloc::alloc (145 samples, 0.13%)</title><rect x="49.2788%" y="693" width="0.1258%" height="15" fill="rgb(229,180,14)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="703.50"></text></g><g><title>__rg_alloc (145 samples, 0.13%)</title><rect x="49.2788%" y="677" width="0.1258%" height="15" fill="rgb(245,216,25)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (145 samples, 0.13%)</title><rect x="49.2788%" y="661" width="0.1258%" height="15" fill="rgb(251,43,5)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="671.50"></text></g><g><title>sn_rust_alloc (145 samples, 0.13%)</title><rect x="49.2788%" y="645" width="0.1258%" height="15" fill="rgb(250,128,24)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (145 samples, 0.13%)</title><rect x="49.2788%" y="629" width="0.1258%" height="15" fill="rgb(217,117,27)" fg:x="56815" fg:w="145"/><text x="49.5288%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,059 samples, 0.92%)</title><rect x="48.4895%" y="853" width="0.9185%" height="15" fill="rgb(245,147,4)" fg:x="55905" fg:w="1059"/><text x="48.7395%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,059 samples, 0.92%)</title><rect x="48.4895%" y="837" width="0.9185%" height="15" fill="rgb(242,201,35)" fg:x="55905" fg:w="1059"/><text x="48.7395%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,059 samples, 0.92%)</title><rect x="48.4895%" y="821" width="0.9185%" height="15" fill="rgb(218,181,1)" fg:x="55905" fg:w="1059"/><text x="48.7395%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,059 samples, 0.92%)</title><rect x="48.4895%" y="805" width="0.9185%" height="15" fill="rgb(222,6,29)" fg:x="55905" fg:w="1059"/><text x="48.7395%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,059 samples, 0.92%)</title><rect x="48.4895%" y="789" width="0.9185%" height="15" fill="rgb(208,186,3)" fg:x="55905" fg:w="1059"/><text x="48.7395%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,059 samples, 0.92%)</title><rect x="48.4895%" y="773" width="0.9185%" height="15" fill="rgb(216,36,26)" fg:x="55905" fg:w="1059"/><text x="48.7395%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,060 samples, 0.92%)</title><rect x="48.4895%" y="869" width="0.9194%" height="15" fill="rgb(248,201,23)" fg:x="55905" fg:w="1060"/><text x="48.7395%" y="879.50"></text></g><g><title>[libc-2.31.so] (78 samples, 0.07%)</title><rect x="49.4210%" y="837" width="0.0677%" height="15" fill="rgb(251,170,31)" fg:x="56979" fg:w="78"/><text x="49.6710%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (136 samples, 0.12%)</title><rect x="49.4887%" y="773" width="0.1180%" height="15" fill="rgb(207,110,25)" fg:x="57057" fg:w="136"/><text x="49.7387%" y="783.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.09%)</title><rect x="49.5182%" y="757" width="0.0885%" height="15" fill="rgb(250,54,15)" fg:x="57091" fg:w="102"/><text x="49.7682%" y="767.50"></text></g><g><title>[libc-2.31.so] (71 samples, 0.06%)</title><rect x="49.6656%" y="757" width="0.0616%" height="15" fill="rgb(227,68,33)" fg:x="57261" fg:w="71"/><text x="49.9156%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="50.0958%" y="677" width="0.0260%" height="15" fill="rgb(238,34,41)" fg:x="57757" fg:w="30"/><text x="50.3458%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (30 samples, 0.03%)</title><rect x="50.0958%" y="661" width="0.0260%" height="15" fill="rgb(220,11,15)" fg:x="57757" fg:w="30"/><text x="50.3458%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (431 samples, 0.37%)</title><rect x="49.7506%" y="725" width="0.3738%" height="15" fill="rgb(246,111,35)" fg:x="57359" fg:w="431"/><text x="50.0006%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (422 samples, 0.37%)</title><rect x="49.7584%" y="709" width="0.3660%" height="15" fill="rgb(209,88,53)" fg:x="57368" fg:w="422"/><text x="50.0084%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (33 samples, 0.03%)</title><rect x="50.0958%" y="693" width="0.0286%" height="15" fill="rgb(231,185,47)" fg:x="57757" fg:w="33"/><text x="50.3458%" y="703.50"></text></g><g><title>[libc-2.31.so] (106 samples, 0.09%)</title><rect x="50.1245%" y="725" width="0.0919%" height="15" fill="rgb(233,154,1)" fg:x="57790" fg:w="106"/><text x="50.3745%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="50.2546%" y="613" width="0.0121%" height="15" fill="rgb(225,15,46)" fg:x="57940" fg:w="14"/><text x="50.5046%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (609 samples, 0.53%)</title><rect x="49.7472%" y="741" width="0.5282%" height="15" fill="rgb(211,135,41)" fg:x="57355" fg:w="609"/><text x="49.9972%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (68 samples, 0.06%)</title><rect x="50.2164%" y="725" width="0.0590%" height="15" fill="rgb(208,54,0)" fg:x="57896" fg:w="68"/><text x="50.4664%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68 samples, 0.06%)</title><rect x="50.2164%" y="709" width="0.0590%" height="15" fill="rgb(244,136,14)" fg:x="57896" fg:w="68"/><text x="50.4664%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.06%)</title><rect x="50.2164%" y="693" width="0.0590%" height="15" fill="rgb(241,56,14)" fg:x="57896" fg:w="68"/><text x="50.4664%" y="703.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.06%)</title><rect x="50.2173%" y="677" width="0.0581%" height="15" fill="rgb(205,80,24)" fg:x="57897" fg:w="67"/><text x="50.4673%" y="687.50"></text></g><g><title>__rg_alloc (67 samples, 0.06%)</title><rect x="50.2173%" y="661" width="0.0581%" height="15" fill="rgb(220,57,4)" fg:x="57897" fg:w="67"/><text x="50.4673%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (67 samples, 0.06%)</title><rect x="50.2173%" y="645" width="0.0581%" height="15" fill="rgb(226,193,50)" fg:x="57897" fg:w="67"/><text x="50.4673%" y="655.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.06%)</title><rect x="50.2190%" y="629" width="0.0564%" height="15" fill="rgb(231,168,22)" fg:x="57899" fg:w="65"/><text x="50.4690%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (682 samples, 0.59%)</title><rect x="49.7298%" y="757" width="0.5915%" height="15" fill="rgb(254,215,14)" fg:x="57335" fg:w="682"/><text x="49.9798%" y="767.50"></text></g><g><title>[libc-2.31.so] (53 samples, 0.05%)</title><rect x="50.2754%" y="741" width="0.0460%" height="15" fill="rgb(211,115,16)" fg:x="57964" fg:w="53"/><text x="50.5254%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (831 samples, 0.72%)</title><rect x="49.6067%" y="773" width="0.7208%" height="15" fill="rgb(236,210,16)" fg:x="57193" fg:w="831"/><text x="49.8567%" y="783.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (972 samples, 0.84%)</title><rect x="49.4887%" y="837" width="0.8431%" height="15" fill="rgb(221,94,12)" fg:x="57057" fg:w="972"/><text x="49.7387%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (972 samples, 0.84%)</title><rect x="49.4887%" y="821" width="0.8431%" height="15" fill="rgb(235,218,49)" fg:x="57057" fg:w="972"/><text x="49.7387%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (972 samples, 0.84%)</title><rect x="49.4887%" y="805" width="0.8431%" height="15" fill="rgb(217,114,14)" fg:x="57057" fg:w="972"/><text x="49.7387%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (972 samples, 0.84%)</title><rect x="49.4887%" y="789" width="0.8431%" height="15" fill="rgb(216,145,22)" fg:x="57057" fg:w="972"/><text x="49.7387%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="50.4480%" y="805" width="0.0156%" height="15" fill="rgb(217,112,39)" fg:x="58163" fg:w="18"/><text x="50.6980%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.09%)</title><rect x="50.4480%" y="821" width="0.0919%" height="15" fill="rgb(225,85,32)" fg:x="58163" fg:w="106"/><text x="50.6980%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (88 samples, 0.08%)</title><rect x="50.4636%" y="805" width="0.0763%" height="15" fill="rgb(245,209,47)" fg:x="58181" fg:w="88"/><text x="50.7136%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (86 samples, 0.07%)</title><rect x="50.4653%" y="789" width="0.0746%" height="15" fill="rgb(218,220,15)" fg:x="58183" fg:w="86"/><text x="50.7153%" y="799.50"></text></g><g><title>core::ptr::read (86 samples, 0.07%)</title><rect x="50.4653%" y="773" width="0.0746%" height="15" fill="rgb(222,202,31)" fg:x="58183" fg:w="86"/><text x="50.7153%" y="783.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.07%)</title><rect x="50.4662%" y="757" width="0.0737%" height="15" fill="rgb(243,203,4)" fg:x="58184" fg:w="85"/><text x="50.7162%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (149 samples, 0.13%)</title><rect x="50.5443%" y="693" width="0.1292%" height="15" fill="rgb(237,92,17)" fg:x="58274" fg:w="149"/><text x="50.7943%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (149 samples, 0.13%)</title><rect x="50.5443%" y="677" width="0.1292%" height="15" fill="rgb(231,119,7)" fg:x="58274" fg:w="149"/><text x="50.7943%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (149 samples, 0.13%)</title><rect x="50.5443%" y="661" width="0.1292%" height="15" fill="rgb(237,82,41)" fg:x="58274" fg:w="149"/><text x="50.7943%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147 samples, 0.13%)</title><rect x="50.5460%" y="645" width="0.1275%" height="15" fill="rgb(226,81,48)" fg:x="58276" fg:w="147"/><text x="50.7960%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147 samples, 0.13%)</title><rect x="50.5460%" y="629" width="0.1275%" height="15" fill="rgb(234,70,51)" fg:x="58276" fg:w="147"/><text x="50.7960%" y="639.50"></text></g><g><title>alloc::alloc::alloc (147 samples, 0.13%)</title><rect x="50.5460%" y="613" width="0.1275%" height="15" fill="rgb(251,86,4)" fg:x="58276" fg:w="147"/><text x="50.7960%" y="623.50"></text></g><g><title>__rg_alloc (147 samples, 0.13%)</title><rect x="50.5460%" y="597" width="0.1275%" height="15" fill="rgb(244,144,28)" fg:x="58276" fg:w="147"/><text x="50.7960%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (147 samples, 0.13%)</title><rect x="50.5460%" y="581" width="0.1275%" height="15" fill="rgb(232,161,39)" fg:x="58276" fg:w="147"/><text x="50.7960%" y="591.50"></text></g><g><title>sn_rust_alloc (144 samples, 0.12%)</title><rect x="50.5486%" y="565" width="0.1249%" height="15" fill="rgb(247,34,51)" fg:x="58279" fg:w="144"/><text x="50.7986%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (170 samples, 0.15%)</title><rect x="50.5443%" y="821" width="0.1475%" height="15" fill="rgb(225,132,2)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (170 samples, 0.15%)</title><rect x="50.5443%" y="805" width="0.1475%" height="15" fill="rgb(209,159,44)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (170 samples, 0.15%)</title><rect x="50.5443%" y="789" width="0.1475%" height="15" fill="rgb(251,214,1)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (170 samples, 0.15%)</title><rect x="50.5443%" y="773" width="0.1475%" height="15" fill="rgb(247,84,47)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (170 samples, 0.15%)</title><rect x="50.5443%" y="757" width="0.1475%" height="15" fill="rgb(240,111,43)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (170 samples, 0.15%)</title><rect x="50.5443%" y="741" width="0.1475%" height="15" fill="rgb(215,214,35)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (170 samples, 0.15%)</title><rect x="50.5443%" y="725" width="0.1475%" height="15" fill="rgb(248,207,23)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (170 samples, 0.15%)</title><rect x="50.5443%" y="709" width="0.1475%" height="15" fill="rgb(214,186,4)" fg:x="58274" fg:w="170"/><text x="50.7943%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (21 samples, 0.02%)</title><rect x="50.6735%" y="693" width="0.0182%" height="15" fill="rgb(220,133,22)" fg:x="58423" fg:w="21"/><text x="50.9235%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="50.6735%" y="677" width="0.0182%" height="15" fill="rgb(239,134,19)" fg:x="58423" fg:w="21"/><text x="50.9235%" y="687.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="50.6752%" y="661" width="0.0165%" height="15" fill="rgb(250,140,9)" fg:x="58425" fg:w="19"/><text x="50.9252%" y="671.50"></text></g><g><title>[libc-2.31.so] (543 samples, 0.47%)</title><rect x="50.6917%" y="821" width="0.4710%" height="15" fill="rgb(225,59,14)" fg:x="58444" fg:w="543"/><text x="50.9417%" y="831.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,534 samples, 9.14%)</title><rect x="42.0563%" y="1045" width="9.1367%" height="15" fill="rgb(214,152,51)" fg:x="48488" fg:w="10534"/><text x="42.3063%" y="1055.50">async_task::r..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,532 samples, 9.13%)</title><rect x="42.0581%" y="1029" width="9.1350%" height="15" fill="rgb(251,227,43)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="1039.50">&lt;core::pin::P..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,532 samples, 9.13%)</title><rect x="42.0581%" y="1013" width="9.1350%" height="15" fill="rgb(241,96,17)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="1023.50">&lt;core::future..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,532 samples, 9.13%)</title><rect x="42.0581%" y="997" width="9.1350%" height="15" fill="rgb(234,198,43)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="1007.50">async_executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,532 samples, 9.13%)</title><rect x="42.0581%" y="981" width="9.1350%" height="15" fill="rgb(220,108,29)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="991.50">&lt;async_std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,532 samples, 9.13%)</title><rect x="42.0581%" y="965" width="9.1350%" height="15" fill="rgb(226,163,33)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="975.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,532 samples, 9.13%)</title><rect x="42.0581%" y="949" width="9.1350%" height="15" fill="rgb(205,194,45)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="959.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,532 samples, 9.13%)</title><rect x="42.0581%" y="933" width="9.1350%" height="15" fill="rgb(206,143,44)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="943.50">std::thread::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,532 samples, 9.13%)</title><rect x="42.0581%" y="917" width="9.1350%" height="15" fill="rgb(236,136,36)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="927.50">async_std::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,532 samples, 9.13%)</title><rect x="42.0581%" y="901" width="9.1350%" height="15" fill="rgb(249,172,42)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="911.50">&lt;async_std::t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,532 samples, 9.13%)</title><rect x="42.0581%" y="885" width="9.1350%" height="15" fill="rgb(216,139,23)" fg:x="48490" fg:w="10532"/><text x="42.3081%" y="895.50">&lt;core::future..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,057 samples, 1.78%)</title><rect x="49.4089%" y="869" width="1.7841%" height="15" fill="rgb(207,166,20)" fg:x="56965" fg:w="2057"/><text x="49.6589%" y="879.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,057 samples, 1.78%)</title><rect x="49.4089%" y="853" width="1.7841%" height="15" fill="rgb(210,209,22)" fg:x="56965" fg:w="2057"/><text x="49.6589%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (993 samples, 0.86%)</title><rect x="50.3318%" y="837" width="0.8613%" height="15" fill="rgb(232,118,20)" fg:x="58029" fg:w="993"/><text x="50.5818%" y="847.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (19 samples, 0.02%)</title><rect x="51.1766%" y="821" width="0.0165%" height="15" fill="rgb(238,113,42)" fg:x="59003" fg:w="19"/><text x="51.4266%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="51.1766%" y="805" width="0.0165%" height="15" fill="rgb(231,42,5)" fg:x="59003" fg:w="19"/><text x="51.4266%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="51.1766%" y="789" width="0.0165%" height="15" fill="rgb(243,166,24)" fg:x="59003" fg:w="19"/><text x="51.4266%" y="799.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (19 samples, 0.02%)</title><rect x="51.2017%" y="1045" width="0.0165%" height="15" fill="rgb(237,226,12)" fg:x="59032" fg:w="19"/><text x="51.4517%" y="1055.50"></text></g><g><title>event_listener::Event::notify (19 samples, 0.02%)</title><rect x="51.2460%" y="1045" width="0.0165%" height="15" fill="rgb(229,133,24)" fg:x="59083" fg:w="19"/><text x="51.4960%" y="1055.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (31 samples, 0.03%)</title><rect x="51.2642%" y="1045" width="0.0269%" height="15" fill="rgb(238,33,43)" fg:x="59104" fg:w="31"/><text x="51.5142%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (135 samples, 0.12%)</title><rect x="51.2911%" y="1045" width="0.1171%" height="15" fill="rgb(227,59,38)" fg:x="59135" fg:w="135"/><text x="51.5411%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.02%)</title><rect x="51.4168%" y="1045" width="0.0226%" height="15" fill="rgb(230,97,0)" fg:x="59280" fg:w="26"/><text x="51.6668%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (27 samples, 0.02%)</title><rect x="51.4394%" y="1045" width="0.0234%" height="15" fill="rgb(250,173,50)" fg:x="59306" fg:w="27"/><text x="51.6894%" y="1055.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (16 samples, 0.01%)</title><rect x="51.4628%" y="1045" width="0.0139%" height="15" fill="rgb(240,15,50)" fg:x="59333" fg:w="16"/><text x="51.7128%" y="1055.50"></text></g><g><title>parking::Inner::park (21 samples, 0.02%)</title><rect x="51.4767%" y="1045" width="0.0182%" height="15" fill="rgb(221,93,22)" fg:x="59349" fg:w="21"/><text x="51.7267%" y="1055.50"></text></g><g><title>polling::epoll::Poller::wait (12 samples, 0.01%)</title><rect x="51.5018%" y="1045" width="0.0104%" height="15" fill="rgb(245,180,53)" fg:x="59378" fg:w="12"/><text x="51.7518%" y="1055.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (20 samples, 0.02%)</title><rect x="51.5140%" y="1045" width="0.0173%" height="15" fill="rgb(231,88,51)" fg:x="59392" fg:w="20"/><text x="51.7640%" y="1055.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="51.5313%" y="1045" width="0.0382%" height="15" fill="rgb(240,58,21)" fg:x="59412" fg:w="44"/><text x="51.7813%" y="1055.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="51.5695%" y="1045" width="0.0226%" height="15" fill="rgb(237,21,10)" fg:x="59456" fg:w="26"/><text x="51.8195%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (21 samples, 0.02%)</title><rect x="51.5990%" y="1045" width="0.0182%" height="15" fill="rgb(218,43,11)" fg:x="59490" fg:w="21"/><text x="51.8490%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (16 samples, 0.01%)</title><rect x="51.6241%" y="1045" width="0.0139%" height="15" fill="rgb(218,221,29)" fg:x="59519" fg:w="16"/><text x="51.8741%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (80 samples, 0.07%)</title><rect x="51.6649%" y="597" width="0.0694%" height="15" fill="rgb(214,118,42)" fg:x="59566" fg:w="80"/><text x="51.9149%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (67 samples, 0.06%)</title><rect x="51.6762%" y="581" width="0.0581%" height="15" fill="rgb(251,200,26)" fg:x="59579" fg:w="67"/><text x="51.9262%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67 samples, 0.06%)</title><rect x="51.6762%" y="565" width="0.0581%" height="15" fill="rgb(237,101,39)" fg:x="59579" fg:w="67"/><text x="51.9262%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (63 samples, 0.05%)</title><rect x="51.6796%" y="549" width="0.0546%" height="15" fill="rgb(251,117,11)" fg:x="59583" fg:w="63"/><text x="51.9296%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (63 samples, 0.05%)</title><rect x="51.6796%" y="533" width="0.0546%" height="15" fill="rgb(216,223,23)" fg:x="59583" fg:w="63"/><text x="51.9296%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.05%)</title><rect x="51.6796%" y="517" width="0.0546%" height="15" fill="rgb(251,54,12)" fg:x="59583" fg:w="63"/><text x="51.9296%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.05%)</title><rect x="51.6796%" y="501" width="0.0546%" height="15" fill="rgb(254,176,54)" fg:x="59583" fg:w="63"/><text x="51.9296%" y="511.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.05%)</title><rect x="51.6822%" y="485" width="0.0520%" height="15" fill="rgb(210,32,8)" fg:x="59586" fg:w="60"/><text x="51.9322%" y="495.50"></text></g><g><title>__rg_alloc (60 samples, 0.05%)</title><rect x="51.6822%" y="469" width="0.0520%" height="15" fill="rgb(235,52,38)" fg:x="59586" fg:w="60"/><text x="51.9322%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.05%)</title><rect x="51.6822%" y="453" width="0.0520%" height="15" fill="rgb(231,4,44)" fg:x="59586" fg:w="60"/><text x="51.9322%" y="463.50"></text></g><g><title>sn_rust_alloc (60 samples, 0.05%)</title><rect x="51.6822%" y="437" width="0.0520%" height="15" fill="rgb(249,2,32)" fg:x="59586" fg:w="60"/><text x="51.9322%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (22 samples, 0.02%)</title><rect x="51.7152%" y="421" width="0.0191%" height="15" fill="rgb(224,65,26)" fg:x="59624" fg:w="22"/><text x="51.9652%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (72 samples, 0.06%)</title><rect x="51.8271%" y="325" width="0.0624%" height="15" fill="rgb(250,73,40)" fg:x="59753" fg:w="72"/><text x="52.0771%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (72 samples, 0.06%)</title><rect x="51.8271%" y="309" width="0.0624%" height="15" fill="rgb(253,177,16)" fg:x="59753" fg:w="72"/><text x="52.0771%" y="319.50"></text></g><g><title>__rg_dealloc (72 samples, 0.06%)</title><rect x="51.8271%" y="293" width="0.0624%" height="15" fill="rgb(217,32,34)" fg:x="59753" fg:w="72"/><text x="52.0771%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (72 samples, 0.06%)</title><rect x="51.8271%" y="277" width="0.0624%" height="15" fill="rgb(212,7,10)" fg:x="59753" fg:w="72"/><text x="52.0771%" y="287.50"></text></g><g><title>sn_rust_dealloc (64 samples, 0.06%)</title><rect x="51.8340%" y="261" width="0.0555%" height="15" fill="rgb(245,89,8)" fg:x="59761" fg:w="64"/><text x="52.0840%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (76 samples, 0.07%)</title><rect x="51.8253%" y="421" width="0.0659%" height="15" fill="rgb(237,16,53)" fg:x="59751" fg:w="76"/><text x="52.0753%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.07%)</title><rect x="51.8253%" y="405" width="0.0659%" height="15" fill="rgb(250,204,30)" fg:x="59751" fg:w="76"/><text x="52.0753%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (74 samples, 0.06%)</title><rect x="51.8271%" y="389" width="0.0642%" height="15" fill="rgb(208,77,27)" fg:x="59753" fg:w="74"/><text x="52.0771%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.06%)</title><rect x="51.8271%" y="373" width="0.0642%" height="15" fill="rgb(250,204,28)" fg:x="59753" fg:w="74"/><text x="52.0771%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (74 samples, 0.06%)</title><rect x="51.8271%" y="357" width="0.0642%" height="15" fill="rgb(244,63,21)" fg:x="59753" fg:w="74"/><text x="52.0771%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.06%)</title><rect x="51.8271%" y="341" width="0.0642%" height="15" fill="rgb(236,85,44)" fg:x="59753" fg:w="74"/><text x="52.0771%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (100 samples, 0.09%)</title><rect x="51.8097%" y="469" width="0.0867%" height="15" fill="rgb(215,98,4)" fg:x="59733" fg:w="100"/><text x="52.0597%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (96 samples, 0.08%)</title><rect x="51.8132%" y="453" width="0.0833%" height="15" fill="rgb(235,38,11)" fg:x="59737" fg:w="96"/><text x="52.0632%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (96 samples, 0.08%)</title><rect x="51.8132%" y="437" width="0.0833%" height="15" fill="rgb(254,186,25)" fg:x="59737" fg:w="96"/><text x="52.0632%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (118 samples, 0.10%)</title><rect x="51.7993%" y="485" width="0.1023%" height="15" fill="rgb(225,55,31)" fg:x="59721" fg:w="118"/><text x="52.0493%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.03%)</title><rect x="51.9017%" y="485" width="0.0338%" height="15" fill="rgb(211,15,21)" fg:x="59839" fg:w="39"/><text x="52.1517%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (27 samples, 0.02%)</title><rect x="51.9121%" y="469" width="0.0234%" height="15" fill="rgb(215,187,41)" fg:x="59851" fg:w="27"/><text x="52.1621%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (27 samples, 0.02%)</title><rect x="51.9121%" y="453" width="0.0234%" height="15" fill="rgb(248,69,32)" fg:x="59851" fg:w="27"/><text x="52.1621%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (85 samples, 0.07%)</title><rect x="51.9372%" y="421" width="0.0737%" height="15" fill="rgb(252,102,52)" fg:x="59880" fg:w="85"/><text x="52.1872%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (85 samples, 0.07%)</title><rect x="51.9372%" y="405" width="0.0737%" height="15" fill="rgb(253,140,32)" fg:x="59880" fg:w="85"/><text x="52.1872%" y="415.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.07%)</title><rect x="51.9407%" y="389" width="0.0703%" height="15" fill="rgb(216,56,42)" fg:x="59884" fg:w="81"/><text x="52.1907%" y="399.50"></text></g><g><title>__rg_alloc (81 samples, 0.07%)</title><rect x="51.9407%" y="373" width="0.0703%" height="15" fill="rgb(216,184,14)" fg:x="59884" fg:w="81"/><text x="52.1907%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (81 samples, 0.07%)</title><rect x="51.9407%" y="357" width="0.0703%" height="15" fill="rgb(237,187,27)" fg:x="59884" fg:w="81"/><text x="52.1907%" y="367.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.07%)</title><rect x="51.9433%" y="341" width="0.0677%" height="15" fill="rgb(219,65,3)" fg:x="59887" fg:w="78"/><text x="52.1933%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (404 samples, 0.35%)</title><rect x="51.6649%" y="965" width="0.3504%" height="15" fill="rgb(245,83,25)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (404 samples, 0.35%)</title><rect x="51.6649%" y="949" width="0.3504%" height="15" fill="rgb(214,205,45)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="959.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (404 samples, 0.35%)</title><rect x="51.6649%" y="933" width="0.3504%" height="15" fill="rgb(241,20,18)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="943.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (404 samples, 0.35%)</title><rect x="51.6649%" y="917" width="0.3504%" height="15" fill="rgb(232,163,23)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="927.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (404 samples, 0.35%)</title><rect x="51.6649%" y="901" width="0.3504%" height="15" fill="rgb(214,5,46)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="911.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (404 samples, 0.35%)</title><rect x="51.6649%" y="885" width="0.3504%" height="15" fill="rgb(229,78,17)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="895.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (404 samples, 0.35%)</title><rect x="51.6649%" y="869" width="0.3504%" height="15" fill="rgb(248,89,10)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="879.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (404 samples, 0.35%)</title><rect x="51.6649%" y="853" width="0.3504%" height="15" fill="rgb(248,54,15)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="863.50"></text></g><g><title>std::panic::catch_unwind (404 samples, 0.35%)</title><rect x="51.6649%" y="837" width="0.3504%" height="15" fill="rgb(223,116,6)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="847.50"></text></g><g><title>std::panicking::try (404 samples, 0.35%)</title><rect x="51.6649%" y="821" width="0.3504%" height="15" fill="rgb(205,125,38)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="831.50"></text></g><g><title>std::panicking::try::do_call (404 samples, 0.35%)</title><rect x="51.6649%" y="805" width="0.3504%" height="15" fill="rgb(251,78,38)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="815.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (404 samples, 0.35%)</title><rect x="51.6649%" y="789" width="0.3504%" height="15" fill="rgb(253,78,28)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once (404 samples, 0.35%)</title><rect x="51.6649%" y="773" width="0.3504%" height="15" fill="rgb(209,120,3)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="783.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (404 samples, 0.35%)</title><rect x="51.6649%" y="757" width="0.3504%" height="15" fill="rgb(238,229,9)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="767.50"></text></g><g><title>async_ffi::FfiContext::with_context (404 samples, 0.35%)</title><rect x="51.6649%" y="741" width="0.3504%" height="15" fill="rgb(253,159,18)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (404 samples, 0.35%)</title><rect x="51.6649%" y="725" width="0.3504%" height="15" fill="rgb(244,42,34)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (404 samples, 0.35%)</title><rect x="51.6649%" y="709" width="0.3504%" height="15" fill="rgb(224,8,7)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="719.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (404 samples, 0.35%)</title><rect x="51.6649%" y="693" width="0.3504%" height="15" fill="rgb(210,201,45)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="703.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (404 samples, 0.35%)</title><rect x="51.6649%" y="677" width="0.3504%" height="15" fill="rgb(252,185,21)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="687.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (404 samples, 0.35%)</title><rect x="51.6649%" y="661" width="0.3504%" height="15" fill="rgb(223,131,1)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (404 samples, 0.35%)</title><rect x="51.6649%" y="645" width="0.3504%" height="15" fill="rgb(245,141,16)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (404 samples, 0.35%)</title><rect x="51.6649%" y="629" width="0.3504%" height="15" fill="rgb(229,55,45)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="639.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (404 samples, 0.35%)</title><rect x="51.6649%" y="613" width="0.3504%" height="15" fill="rgb(208,92,15)" fg:x="59566" fg:w="404"/><text x="51.9149%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (324 samples, 0.28%)</title><rect x="51.7343%" y="597" width="0.2810%" height="15" fill="rgb(234,185,47)" fg:x="59646" fg:w="324"/><text x="51.9843%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (324 samples, 0.28%)</title><rect x="51.7343%" y="581" width="0.2810%" height="15" fill="rgb(253,104,50)" fg:x="59646" fg:w="324"/><text x="51.9843%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (324 samples, 0.28%)</title><rect x="51.7343%" y="565" width="0.2810%" height="15" fill="rgb(205,70,7)" fg:x="59646" fg:w="324"/><text x="51.9843%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (324 samples, 0.28%)</title><rect x="51.7343%" y="549" width="0.2810%" height="15" fill="rgb(240,178,43)" fg:x="59646" fg:w="324"/><text x="51.9843%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (324 samples, 0.28%)</title><rect x="51.7343%" y="533" width="0.2810%" height="15" fill="rgb(214,112,2)" fg:x="59646" fg:w="324"/><text x="51.9843%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (324 samples, 0.28%)</title><rect x="51.7343%" y="517" width="0.2810%" height="15" fill="rgb(206,46,17)" fg:x="59646" fg:w="324"/><text x="51.9843%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (251 samples, 0.22%)</title><rect x="51.7976%" y="501" width="0.2177%" height="15" fill="rgb(225,220,16)" fg:x="59719" fg:w="251"/><text x="52.0476%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (92 samples, 0.08%)</title><rect x="51.9355%" y="485" width="0.0798%" height="15" fill="rgb(238,65,40)" fg:x="59878" fg:w="92"/><text x="52.1855%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (92 samples, 0.08%)</title><rect x="51.9355%" y="469" width="0.0798%" height="15" fill="rgb(230,151,21)" fg:x="59878" fg:w="92"/><text x="52.1855%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="51.9372%" y="453" width="0.0781%" height="15" fill="rgb(218,58,49)" fg:x="59880" fg:w="90"/><text x="52.1872%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 0.08%)</title><rect x="51.9372%" y="437" width="0.0781%" height="15" fill="rgb(219,179,14)" fg:x="59880" fg:w="90"/><text x="52.1872%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (137 samples, 0.12%)</title><rect x="52.1150%" y="837" width="0.1188%" height="15" fill="rgb(223,72,1)" fg:x="60085" fg:w="137"/><text x="52.3650%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (227 samples, 0.20%)</title><rect x="52.0951%" y="853" width="0.1969%" height="15" fill="rgb(238,126,10)" fg:x="60062" fg:w="227"/><text x="52.3451%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (67 samples, 0.06%)</title><rect x="52.2339%" y="837" width="0.0581%" height="15" fill="rgb(224,206,38)" fg:x="60222" fg:w="67"/><text x="52.4839%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (26 samples, 0.02%)</title><rect x="52.2946%" y="853" width="0.0226%" height="15" fill="rgb(212,201,54)" fg:x="60292" fg:w="26"/><text x="52.5446%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (26 samples, 0.02%)</title><rect x="52.2946%" y="837" width="0.0226%" height="15" fill="rgb(218,154,48)" fg:x="60292" fg:w="26"/><text x="52.5446%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="52.2946%" y="821" width="0.0226%" height="15" fill="rgb(232,93,24)" fg:x="60292" fg:w="26"/><text x="52.5446%" y="831.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="52.3336%" y="757" width="0.0321%" height="15" fill="rgb(245,30,21)" fg:x="60337" fg:w="37"/><text x="52.5836%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (53 samples, 0.05%)</title><rect x="52.3215%" y="837" width="0.0460%" height="15" fill="rgb(242,148,29)" fg:x="60323" fg:w="53"/><text x="52.5715%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (53 samples, 0.05%)</title><rect x="52.3215%" y="821" width="0.0460%" height="15" fill="rgb(244,153,54)" fg:x="60323" fg:w="53"/><text x="52.5715%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (41 samples, 0.04%)</title><rect x="52.3319%" y="805" width="0.0356%" height="15" fill="rgb(252,87,22)" fg:x="60335" fg:w="41"/><text x="52.5819%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="52.3319%" y="789" width="0.0356%" height="15" fill="rgb(210,51,29)" fg:x="60335" fg:w="41"/><text x="52.5819%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (41 samples, 0.04%)</title><rect x="52.3319%" y="773" width="0.0356%" height="15" fill="rgb(242,136,47)" fg:x="60335" fg:w="41"/><text x="52.5819%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (70 samples, 0.06%)</title><rect x="52.3171%" y="853" width="0.0607%" height="15" fill="rgb(238,68,4)" fg:x="60318" fg:w="70"/><text x="52.5671%" y="863.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="52.3674%" y="837" width="0.0104%" height="15" fill="rgb(242,161,30)" fg:x="60376" fg:w="12"/><text x="52.6174%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (424 samples, 0.37%)</title><rect x="52.0153%" y="869" width="0.3678%" height="15" fill="rgb(218,58,44)" fg:x="59970" fg:w="424"/><text x="52.2653%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="52.3978%" y="853" width="0.0208%" height="15" fill="rgb(252,125,32)" fg:x="60411" fg:w="24"/><text x="52.6478%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="52.3978%" y="837" width="0.0208%" height="15" fill="rgb(219,178,0)" fg:x="60411" fg:w="24"/><text x="52.6478%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="52.3978%" y="821" width="0.0208%" height="15" fill="rgb(213,152,7)" fg:x="60411" fg:w="24"/><text x="52.6478%" y="831.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="52.3987%" y="805" width="0.0199%" height="15" fill="rgb(249,109,34)" fg:x="60412" fg:w="23"/><text x="52.6487%" y="815.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="52.3987%" y="789" width="0.0199%" height="15" fill="rgb(232,96,21)" fg:x="60412" fg:w="23"/><text x="52.6487%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="52.3987%" y="773" width="0.0199%" height="15" fill="rgb(228,27,39)" fg:x="60412" fg:w="23"/><text x="52.6487%" y="783.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="52.4013%" y="757" width="0.0173%" height="15" fill="rgb(211,182,52)" fg:x="60415" fg:w="20"/><text x="52.6513%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (472 samples, 0.41%)</title><rect x="52.0153%" y="965" width="0.4094%" height="15" fill="rgb(234,178,38)" fg:x="59970" fg:w="472"/><text x="52.2653%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (472 samples, 0.41%)</title><rect x="52.0153%" y="949" width="0.4094%" height="15" fill="rgb(221,111,3)" fg:x="59970" fg:w="472"/><text x="52.2653%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (472 samples, 0.41%)</title><rect x="52.0153%" y="933" width="0.4094%" height="15" fill="rgb(228,175,21)" fg:x="59970" fg:w="472"/><text x="52.2653%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (472 samples, 0.41%)</title><rect x="52.0153%" y="917" width="0.4094%" height="15" fill="rgb(228,174,43)" fg:x="59970" fg:w="472"/><text x="52.2653%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (472 samples, 0.41%)</title><rect x="52.0153%" y="901" width="0.4094%" height="15" fill="rgb(211,191,0)" fg:x="59970" fg:w="472"/><text x="52.2653%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (472 samples, 0.41%)</title><rect x="52.0153%" y="885" width="0.4094%" height="15" fill="rgb(253,117,3)" fg:x="59970" fg:w="472"/><text x="52.2653%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (48 samples, 0.04%)</title><rect x="52.3831%" y="869" width="0.0416%" height="15" fill="rgb(241,127,19)" fg:x="60394" fg:w="48"/><text x="52.6331%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (114 samples, 0.10%)</title><rect x="52.4611%" y="837" width="0.0989%" height="15" fill="rgb(218,103,12)" fg:x="60484" fg:w="114"/><text x="52.7111%" y="847.50"></text></g><g><title>core::mem::replace (114 samples, 0.10%)</title><rect x="52.4611%" y="821" width="0.0989%" height="15" fill="rgb(236,214,43)" fg:x="60484" fg:w="114"/><text x="52.7111%" y="831.50"></text></g><g><title>core::ptr::read (114 samples, 0.10%)</title><rect x="52.4611%" y="805" width="0.0989%" height="15" fill="rgb(244,144,19)" fg:x="60484" fg:w="114"/><text x="52.7111%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (144 samples, 0.12%)</title><rect x="52.4498%" y="853" width="0.1249%" height="15" fill="rgb(246,188,10)" fg:x="60471" fg:w="144"/><text x="52.6998%" y="863.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="52.5600%" y="837" width="0.0147%" height="15" fill="rgb(212,193,33)" fg:x="60598" fg:w="17"/><text x="52.8100%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (17 samples, 0.01%)</title><rect x="52.5600%" y="821" width="0.0147%" height="15" fill="rgb(241,51,29)" fg:x="60598" fg:w="17"/><text x="52.8100%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (118 samples, 0.10%)</title><rect x="52.5747%" y="853" width="0.1023%" height="15" fill="rgb(211,58,19)" fg:x="60615" fg:w="118"/><text x="52.8247%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (114 samples, 0.10%)</title><rect x="52.5782%" y="837" width="0.0989%" height="15" fill="rgb(229,111,26)" fg:x="60619" fg:w="114"/><text x="52.8282%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.10%)</title><rect x="52.5782%" y="821" width="0.0989%" height="15" fill="rgb(213,115,40)" fg:x="60619" fg:w="114"/><text x="52.8282%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (105 samples, 0.09%)</title><rect x="52.5860%" y="805" width="0.0911%" height="15" fill="rgb(209,56,44)" fg:x="60628" fg:w="105"/><text x="52.8360%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (105 samples, 0.09%)</title><rect x="52.5860%" y="789" width="0.0911%" height="15" fill="rgb(230,108,32)" fg:x="60628" fg:w="105"/><text x="52.8360%" y="799.50"></text></g><g><title>__GI___pthread_mutex_unlock (103 samples, 0.09%)</title><rect x="52.5878%" y="773" width="0.0893%" height="15" fill="rgb(216,165,31)" fg:x="60630" fg:w="103"/><text x="52.8378%" y="783.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="52.6780%" y="853" width="0.0147%" height="15" fill="rgb(218,122,21)" fg:x="60734" fg:w="17"/><text x="52.9280%" y="863.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="52.6780%" y="837" width="0.0147%" height="15" fill="rgb(223,224,47)" fg:x="60734" fg:w="17"/><text x="52.9280%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="52.6814%" y="821" width="0.0113%" height="15" fill="rgb(238,102,44)" fg:x="60738" fg:w="13"/><text x="52.9314%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="52.6814%" y="805" width="0.0113%" height="15" fill="rgb(236,46,40)" fg:x="60738" fg:w="13"/><text x="52.9314%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (935 samples, 0.81%)</title><rect x="52.4247%" y="949" width="0.8110%" height="15" fill="rgb(247,202,50)" fg:x="60442" fg:w="935"/><text x="52.6747%" y="959.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (935 samples, 0.81%)</title><rect x="52.4247%" y="933" width="0.8110%" height="15" fill="rgb(209,99,20)" fg:x="60442" fg:w="935"/><text x="52.6747%" y="943.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (935 samples, 0.81%)</title><rect x="52.4247%" y="917" width="0.8110%" height="15" fill="rgb(252,27,34)" fg:x="60442" fg:w="935"/><text x="52.6747%" y="927.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (935 samples, 0.81%)</title><rect x="52.4247%" y="901" width="0.8110%" height="15" fill="rgb(215,206,23)" fg:x="60442" fg:w="935"/><text x="52.6747%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (935 samples, 0.81%)</title><rect x="52.4247%" y="885" width="0.8110%" height="15" fill="rgb(212,135,36)" fg:x="60442" fg:w="935"/><text x="52.6747%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (935 samples, 0.81%)</title><rect x="52.4247%" y="869" width="0.8110%" height="15" fill="rgb(240,189,1)" fg:x="60442" fg:w="935"/><text x="52.6747%" y="879.50"></text></g><g><title>event_listener::Inner::lock (626 samples, 0.54%)</title><rect x="52.6927%" y="853" width="0.5430%" height="15" fill="rgb(242,56,20)" fg:x="60751" fg:w="626"/><text x="52.9427%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (615 samples, 0.53%)</title><rect x="52.7022%" y="837" width="0.5334%" height="15" fill="rgb(247,132,33)" fg:x="60762" fg:w="615"/><text x="52.9522%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (612 samples, 0.53%)</title><rect x="52.7048%" y="821" width="0.5308%" height="15" fill="rgb(208,149,11)" fg:x="60765" fg:w="612"/><text x="52.9548%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (593 samples, 0.51%)</title><rect x="52.7213%" y="805" width="0.5143%" height="15" fill="rgb(211,33,11)" fg:x="60784" fg:w="593"/><text x="52.9713%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (593 samples, 0.51%)</title><rect x="52.7213%" y="789" width="0.5143%" height="15" fill="rgb(221,29,38)" fg:x="60784" fg:w="593"/><text x="52.9713%" y="799.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (75 samples, 0.07%)</title><rect x="53.2443%" y="533" width="0.0651%" height="15" fill="rgb(206,182,49)" fg:x="61387" fg:w="75"/><text x="53.4943%" y="543.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (71 samples, 0.06%)</title><rect x="53.2478%" y="517" width="0.0616%" height="15" fill="rgb(216,140,1)" fg:x="61391" fg:w="71"/><text x="53.4978%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (71 samples, 0.06%)</title><rect x="53.2478%" y="501" width="0.0616%" height="15" fill="rgb(232,57,40)" fg:x="61391" fg:w="71"/><text x="53.4978%" y="511.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (71 samples, 0.06%)</title><rect x="53.2478%" y="485" width="0.0616%" height="15" fill="rgb(224,186,18)" fg:x="61391" fg:w="71"/><text x="53.4978%" y="495.50"></text></g><g><title>fxhash::write (62 samples, 0.05%)</title><rect x="53.2556%" y="469" width="0.0538%" height="15" fill="rgb(215,121,11)" fg:x="61400" fg:w="62"/><text x="53.5056%" y="479.50"></text></g><g><title>fxhash::write64 (62 samples, 0.05%)</title><rect x="53.2556%" y="453" width="0.0538%" height="15" fill="rgb(245,147,10)" fg:x="61400" fg:w="62"/><text x="53.5056%" y="463.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (26 samples, 0.02%)</title><rect x="53.2868%" y="437" width="0.0226%" height="15" fill="rgb(238,153,13)" fg:x="61436" fg:w="26"/><text x="53.5368%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (18 samples, 0.02%)</title><rect x="53.2938%" y="421" width="0.0156%" height="15" fill="rgb(233,108,0)" fg:x="61444" fg:w="18"/><text x="53.5438%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (107 samples, 0.09%)</title><rect x="53.2357%" y="645" width="0.0928%" height="15" fill="rgb(212,157,17)" fg:x="61377" fg:w="107"/><text x="53.4857%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (107 samples, 0.09%)</title><rect x="53.2357%" y="629" width="0.0928%" height="15" fill="rgb(225,213,38)" fg:x="61377" fg:w="107"/><text x="53.4857%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (107 samples, 0.09%)</title><rect x="53.2357%" y="613" width="0.0928%" height="15" fill="rgb(248,16,11)" fg:x="61377" fg:w="107"/><text x="53.4857%" y="623.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (107 samples, 0.09%)</title><rect x="53.2357%" y="597" width="0.0928%" height="15" fill="rgb(241,33,4)" fg:x="61377" fg:w="107"/><text x="53.4857%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (97 samples, 0.08%)</title><rect x="53.2443%" y="581" width="0.0841%" height="15" fill="rgb(222,26,43)" fg:x="61387" fg:w="97"/><text x="53.4943%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (97 samples, 0.08%)</title><rect x="53.2443%" y="565" width="0.0841%" height="15" fill="rgb(243,29,36)" fg:x="61387" fg:w="97"/><text x="53.4943%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (97 samples, 0.08%)</title><rect x="53.2443%" y="549" width="0.0841%" height="15" fill="rgb(241,9,27)" fg:x="61387" fg:w="97"/><text x="53.4943%" y="559.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (22 samples, 0.02%)</title><rect x="53.3094%" y="533" width="0.0191%" height="15" fill="rgb(205,117,26)" fg:x="61462" fg:w="22"/><text x="53.5594%" y="543.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (22 samples, 0.02%)</title><rect x="53.3094%" y="517" width="0.0191%" height="15" fill="rgb(209,80,39)" fg:x="61462" fg:w="22"/><text x="53.5594%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (22 samples, 0.02%)</title><rect x="53.3094%" y="501" width="0.0191%" height="15" fill="rgb(239,155,6)" fg:x="61462" fg:w="22"/><text x="53.5594%" y="511.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (22 samples, 0.02%)</title><rect x="53.3094%" y="485" width="0.0191%" height="15" fill="rgb(212,104,12)" fg:x="61462" fg:w="22"/><text x="53.5594%" y="495.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (22 samples, 0.02%)</title><rect x="53.3094%" y="469" width="0.0191%" height="15" fill="rgb(234,204,3)" fg:x="61462" fg:w="22"/><text x="53.5594%" y="479.50"></text></g><g><title>value_trait::ValueAccess::get (121 samples, 0.10%)</title><rect x="53.2357%" y="837" width="0.1049%" height="15" fill="rgb(251,218,7)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (121 samples, 0.10%)</title><rect x="53.2357%" y="821" width="0.1049%" height="15" fill="rgb(221,81,32)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="831.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (121 samples, 0.10%)</title><rect x="53.2357%" y="805" width="0.1049%" height="15" fill="rgb(214,152,26)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (121 samples, 0.10%)</title><rect x="53.2357%" y="789" width="0.1049%" height="15" fill="rgb(223,22,3)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (121 samples, 0.10%)</title><rect x="53.2357%" y="773" width="0.1049%" height="15" fill="rgb(207,174,7)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (121 samples, 0.10%)</title><rect x="53.2357%" y="757" width="0.1049%" height="15" fill="rgb(224,19,52)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (121 samples, 0.10%)</title><rect x="53.2357%" y="741" width="0.1049%" height="15" fill="rgb(228,24,14)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (121 samples, 0.10%)</title><rect x="53.2357%" y="725" width="0.1049%" height="15" fill="rgb(230,153,43)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (121 samples, 0.10%)</title><rect x="53.2357%" y="709" width="0.1049%" height="15" fill="rgb(231,106,12)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (121 samples, 0.10%)</title><rect x="53.2357%" y="693" width="0.1049%" height="15" fill="rgb(215,92,2)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (121 samples, 0.10%)</title><rect x="53.2357%" y="677" width="0.1049%" height="15" fill="rgb(249,143,25)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (121 samples, 0.10%)</title><rect x="53.2357%" y="661" width="0.1049%" height="15" fill="rgb(252,7,35)" fg:x="61377" fg:w="121"/><text x="53.4857%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (14 samples, 0.01%)</title><rect x="53.3285%" y="645" width="0.0121%" height="15" fill="rgb(216,69,40)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (14 samples, 0.01%)</title><rect x="53.3285%" y="629" width="0.0121%" height="15" fill="rgb(240,36,33)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (14 samples, 0.01%)</title><rect x="53.3285%" y="613" width="0.0121%" height="15" fill="rgb(231,128,14)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.01%)</title><rect x="53.3285%" y="597" width="0.0121%" height="15" fill="rgb(245,143,14)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="607.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (14 samples, 0.01%)</title><rect x="53.3285%" y="581" width="0.0121%" height="15" fill="rgb(222,130,28)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="53.3285%" y="565" width="0.0121%" height="15" fill="rgb(212,10,48)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (14 samples, 0.01%)</title><rect x="53.3285%" y="549" width="0.0121%" height="15" fill="rgb(254,118,45)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (14 samples, 0.01%)</title><rect x="53.3285%" y="533" width="0.0121%" height="15" fill="rgb(228,6,45)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (14 samples, 0.01%)</title><rect x="53.3285%" y="517" width="0.0121%" height="15" fill="rgb(241,18,35)" fg:x="61484" fg:w="14"/><text x="53.5785%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="53.3293%" y="501" width="0.0113%" height="15" fill="rgb(227,214,53)" fg:x="61485" fg:w="13"/><text x="53.5793%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.01%)</title><rect x="53.3293%" y="485" width="0.0113%" height="15" fill="rgb(224,107,51)" fg:x="61485" fg:w="13"/><text x="53.5793%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="53.3293%" y="469" width="0.0113%" height="15" fill="rgb(248,60,28)" fg:x="61485" fg:w="13"/><text x="53.5793%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.01%)</title><rect x="53.3293%" y="453" width="0.0113%" height="15" fill="rgb(249,101,23)" fg:x="61485" fg:w="13"/><text x="53.5793%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.01%)</title><rect x="53.3293%" y="437" width="0.0113%" height="15" fill="rgb(228,51,19)" fg:x="61485" fg:w="13"/><text x="53.5793%" y="447.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (17 samples, 0.01%)</title><rect x="53.3996%" y="421" width="0.0147%" height="15" fill="rgb(213,20,6)" fg:x="61566" fg:w="17"/><text x="53.6496%" y="431.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (17 samples, 0.01%)</title><rect x="53.3996%" y="405" width="0.0147%" height="15" fill="rgb(212,124,10)" fg:x="61566" fg:w="17"/><text x="53.6496%" y="415.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (17 samples, 0.01%)</title><rect x="53.3996%" y="389" width="0.0147%" height="15" fill="rgb(248,3,40)" fg:x="61566" fg:w="17"/><text x="53.6496%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (17 samples, 0.01%)</title><rect x="53.3996%" y="373" width="0.0147%" height="15" fill="rgb(223,178,23)" fg:x="61566" fg:w="17"/><text x="53.6496%" y="383.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (17 samples, 0.01%)</title><rect x="53.3996%" y="357" width="0.0147%" height="15" fill="rgb(240,132,45)" fg:x="61566" fg:w="17"/><text x="53.6496%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="53.4143%" y="421" width="0.0104%" height="15" fill="rgb(245,164,36)" fg:x="61583" fg:w="12"/><text x="53.6643%" y="431.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (98 samples, 0.09%)</title><rect x="53.3528%" y="517" width="0.0850%" height="15" fill="rgb(231,188,53)" fg:x="61512" fg:w="98"/><text x="53.6028%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (96 samples, 0.08%)</title><rect x="53.3545%" y="501" width="0.0833%" height="15" fill="rgb(237,198,39)" fg:x="61514" fg:w="96"/><text x="53.6045%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (61 samples, 0.05%)</title><rect x="53.3849%" y="485" width="0.0529%" height="15" fill="rgb(223,120,35)" fg:x="61549" fg:w="61"/><text x="53.6349%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (61 samples, 0.05%)</title><rect x="53.3849%" y="469" width="0.0529%" height="15" fill="rgb(253,107,49)" fg:x="61549" fg:w="61"/><text x="53.6349%" y="479.50"></text></g><g><title>fxhash::write (53 samples, 0.05%)</title><rect x="53.3918%" y="453" width="0.0460%" height="15" fill="rgb(216,44,31)" fg:x="61557" fg:w="53"/><text x="53.6418%" y="463.50"></text></g><g><title>fxhash::write64 (53 samples, 0.05%)</title><rect x="53.3918%" y="437" width="0.0460%" height="15" fill="rgb(253,87,21)" fg:x="61557" fg:w="53"/><text x="53.6418%" y="447.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (15 samples, 0.01%)</title><rect x="53.4248%" y="421" width="0.0130%" height="15" fill="rgb(226,18,2)" fg:x="61595" fg:w="15"/><text x="53.6748%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (137 samples, 0.12%)</title><rect x="53.3406%" y="629" width="0.1188%" height="15" fill="rgb(216,8,46)" fg:x="61498" fg:w="137"/><text x="53.5906%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (137 samples, 0.12%)</title><rect x="53.3406%" y="613" width="0.1188%" height="15" fill="rgb(226,140,39)" fg:x="61498" fg:w="137"/><text x="53.5906%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (137 samples, 0.12%)</title><rect x="53.3406%" y="597" width="0.1188%" height="15" fill="rgb(221,194,54)" fg:x="61498" fg:w="137"/><text x="53.5906%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (137 samples, 0.12%)</title><rect x="53.3406%" y="581" width="0.1188%" height="15" fill="rgb(213,92,11)" fg:x="61498" fg:w="137"/><text x="53.5906%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (124 samples, 0.11%)</title><rect x="53.3519%" y="565" width="0.1076%" height="15" fill="rgb(229,162,46)" fg:x="61511" fg:w="124"/><text x="53.6019%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (123 samples, 0.11%)</title><rect x="53.3528%" y="549" width="0.1067%" height="15" fill="rgb(214,111,36)" fg:x="61512" fg:w="123"/><text x="53.6028%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (123 samples, 0.11%)</title><rect x="53.3528%" y="533" width="0.1067%" height="15" fill="rgb(207,6,21)" fg:x="61512" fg:w="123"/><text x="53.6028%" y="543.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (25 samples, 0.02%)</title><rect x="53.4378%" y="517" width="0.0217%" height="15" fill="rgb(213,127,38)" fg:x="61610" fg:w="25"/><text x="53.6878%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (25 samples, 0.02%)</title><rect x="53.4378%" y="501" width="0.0217%" height="15" fill="rgb(238,118,32)" fg:x="61610" fg:w="25"/><text x="53.6878%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (25 samples, 0.02%)</title><rect x="53.4378%" y="485" width="0.0217%" height="15" fill="rgb(240,139,39)" fg:x="61610" fg:w="25"/><text x="53.6878%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (25 samples, 0.02%)</title><rect x="53.4378%" y="469" width="0.0217%" height="15" fill="rgb(235,10,37)" fg:x="61610" fg:w="25"/><text x="53.6878%" y="479.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (23 samples, 0.02%)</title><rect x="53.4395%" y="453" width="0.0199%" height="15" fill="rgb(249,171,38)" fg:x="61612" fg:w="23"/><text x="53.6895%" y="463.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (329 samples, 0.29%)</title><rect x="53.2357%" y="869" width="0.2854%" height="15" fill="rgb(242,144,32)" fg:x="61377" fg:w="329"/><text x="53.4857%" y="879.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (329 samples, 0.29%)</title><rect x="53.2357%" y="853" width="0.2854%" height="15" fill="rgb(217,117,21)" fg:x="61377" fg:w="329"/><text x="53.4857%" y="863.50"></text></g><g><title>value_trait::ValueAccess::get_str (208 samples, 0.18%)</title><rect x="53.3406%" y="837" width="0.1804%" height="15" fill="rgb(249,87,1)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="847.50"></text></g><g><title>value_trait::ValueAccess::get (208 samples, 0.18%)</title><rect x="53.3406%" y="821" width="0.1804%" height="15" fill="rgb(248,196,48)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (208 samples, 0.18%)</title><rect x="53.3406%" y="805" width="0.1804%" height="15" fill="rgb(251,206,33)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="815.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (208 samples, 0.18%)</title><rect x="53.3406%" y="789" width="0.1804%" height="15" fill="rgb(232,141,28)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (208 samples, 0.18%)</title><rect x="53.3406%" y="773" width="0.1804%" height="15" fill="rgb(209,167,14)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (208 samples, 0.18%)</title><rect x="53.3406%" y="757" width="0.1804%" height="15" fill="rgb(225,11,50)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (208 samples, 0.18%)</title><rect x="53.3406%" y="741" width="0.1804%" height="15" fill="rgb(209,50,20)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (208 samples, 0.18%)</title><rect x="53.3406%" y="725" width="0.1804%" height="15" fill="rgb(212,17,46)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (208 samples, 0.18%)</title><rect x="53.3406%" y="709" width="0.1804%" height="15" fill="rgb(216,101,39)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (208 samples, 0.18%)</title><rect x="53.3406%" y="693" width="0.1804%" height="15" fill="rgb(212,228,48)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (208 samples, 0.18%)</title><rect x="53.3406%" y="677" width="0.1804%" height="15" fill="rgb(250,6,50)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (208 samples, 0.18%)</title><rect x="53.3406%" y="661" width="0.1804%" height="15" fill="rgb(250,160,48)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (208 samples, 0.18%)</title><rect x="53.3406%" y="645" width="0.1804%" height="15" fill="rgb(244,216,33)" fg:x="61498" fg:w="208"/><text x="53.5906%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (71 samples, 0.06%)</title><rect x="53.4594%" y="629" width="0.0616%" height="15" fill="rgb(207,157,5)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (71 samples, 0.06%)</title><rect x="53.4594%" y="613" width="0.0616%" height="15" fill="rgb(228,199,8)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (71 samples, 0.06%)</title><rect x="53.4594%" y="597" width="0.0616%" height="15" fill="rgb(227,80,20)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (71 samples, 0.06%)</title><rect x="53.4594%" y="581" width="0.0616%" height="15" fill="rgb(222,9,33)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="591.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (71 samples, 0.06%)</title><rect x="53.4594%" y="565" width="0.0616%" height="15" fill="rgb(239,44,28)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (71 samples, 0.06%)</title><rect x="53.4594%" y="549" width="0.0616%" height="15" fill="rgb(249,187,43)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (71 samples, 0.06%)</title><rect x="53.4594%" y="533" width="0.0616%" height="15" fill="rgb(216,141,28)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (71 samples, 0.06%)</title><rect x="53.4594%" y="517" width="0.0616%" height="15" fill="rgb(230,154,53)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (71 samples, 0.06%)</title><rect x="53.4594%" y="501" width="0.0616%" height="15" fill="rgb(227,82,4)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (71 samples, 0.06%)</title><rect x="53.4594%" y="485" width="0.0616%" height="15" fill="rgb(220,107,16)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (71 samples, 0.06%)</title><rect x="53.4594%" y="469" width="0.0616%" height="15" fill="rgb(207,187,2)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (71 samples, 0.06%)</title><rect x="53.4594%" y="453" width="0.0616%" height="15" fill="rgb(210,162,52)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (71 samples, 0.06%)</title><rect x="53.4594%" y="437" width="0.0616%" height="15" fill="rgb(217,216,49)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (71 samples, 0.06%)</title><rect x="53.4594%" y="421" width="0.0616%" height="15" fill="rgb(218,146,49)" fg:x="61635" fg:w="71"/><text x="53.7094%" y="431.50"></text></g><g><title>[libc-2.31.so] (59 samples, 0.05%)</title><rect x="53.4699%" y="405" width="0.0512%" height="15" fill="rgb(216,55,40)" fg:x="61647" fg:w="59"/><text x="53.7199%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (53 samples, 0.05%)</title><rect x="53.5375%" y="821" width="0.0460%" height="15" fill="rgb(208,196,21)" fg:x="61725" fg:w="53"/><text x="53.7875%" y="831.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (14 samples, 0.01%)</title><rect x="53.7136%" y="789" width="0.0121%" height="15" fill="rgb(242,117,42)" fg:x="61928" fg:w="14"/><text x="53.9636%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (586 samples, 0.51%)</title><rect x="53.2357%" y="949" width="0.5083%" height="15" fill="rgb(210,11,23)" fg:x="61377" fg:w="586"/><text x="53.4857%" y="959.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (586 samples, 0.51%)</title><rect x="53.2357%" y="933" width="0.5083%" height="15" fill="rgb(217,110,2)" fg:x="61377" fg:w="586"/><text x="53.4857%" y="943.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (586 samples, 0.51%)</title><rect x="53.2357%" y="917" width="0.5083%" height="15" fill="rgb(229,77,54)" fg:x="61377" fg:w="586"/><text x="53.4857%" y="927.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (586 samples, 0.51%)</title><rect x="53.2357%" y="901" width="0.5083%" height="15" fill="rgb(218,53,16)" fg:x="61377" fg:w="586"/><text x="53.4857%" y="911.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (586 samples, 0.51%)</title><rect x="53.2357%" y="885" width="0.5083%" height="15" fill="rgb(215,38,13)" fg:x="61377" fg:w="586"/><text x="53.4857%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (257 samples, 0.22%)</title><rect x="53.5210%" y="869" width="0.2229%" height="15" fill="rgb(235,42,18)" fg:x="61706" fg:w="257"/><text x="53.7710%" y="879.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (257 samples, 0.22%)</title><rect x="53.5210%" y="853" width="0.2229%" height="15" fill="rgb(219,66,54)" fg:x="61706" fg:w="257"/><text x="53.7710%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (252 samples, 0.22%)</title><rect x="53.5254%" y="837" width="0.2186%" height="15" fill="rgb(222,205,4)" fg:x="61711" fg:w="252"/><text x="53.7754%" y="847.50"></text></g><g><title>tremor_script::script::Script::run (185 samples, 0.16%)</title><rect x="53.5835%" y="821" width="0.1605%" height="15" fill="rgb(227,213,46)" fg:x="61778" fg:w="185"/><text x="53.8335%" y="831.50"></text></g><g><title>tremor_script::ast::Script::run (182 samples, 0.16%)</title><rect x="53.5861%" y="805" width="0.1579%" height="15" fill="rgb(250,145,42)" fg:x="61781" fg:w="182"/><text x="53.8361%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,429 samples, 2.11%)</title><rect x="51.6380%" y="1045" width="2.1068%" height="15" fill="rgb(219,15,2)" fg:x="59535" fg:w="2429"/><text x="51.8880%" y="1055.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,412 samples, 2.09%)</title><rect x="51.6527%" y="1029" width="2.0921%" height="15" fill="rgb(231,181,52)" fg:x="59552" fg:w="2412"/><text x="51.9027%" y="1039.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,401 samples, 2.08%)</title><rect x="51.6623%" y="1013" width="2.0825%" height="15" fill="rgb(235,1,42)" fg:x="59563" fg:w="2401"/><text x="51.9123%" y="1023.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,401 samples, 2.08%)</title><rect x="51.6623%" y="997" width="2.0825%" height="15" fill="rgb(249,88,27)" fg:x="59563" fg:w="2401"/><text x="51.9123%" y="1007.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,401 samples, 2.08%)</title><rect x="51.6623%" y="981" width="2.0825%" height="15" fill="rgb(235,145,16)" fg:x="59563" fg:w="2401"/><text x="51.9123%" y="991.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,522 samples, 1.32%)</title><rect x="52.4247%" y="965" width="1.3201%" height="15" fill="rgb(237,114,19)" fg:x="60442" fg:w="1522"/><text x="52.6747%" y="975.50"></text></g><g><title>tremor_common::time::nanotime (31 samples, 0.03%)</title><rect x="53.7448%" y="1045" width="0.0269%" height="15" fill="rgb(238,51,50)" fg:x="61964" fg:w="31"/><text x="53.9948%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (29 samples, 0.03%)</title><rect x="53.7465%" y="1029" width="0.0252%" height="15" fill="rgb(205,194,25)" fg:x="61966" fg:w="29"/><text x="53.9965%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (29 samples, 0.03%)</title><rect x="53.7465%" y="1013" width="0.0252%" height="15" fill="rgb(215,203,17)" fg:x="61966" fg:w="29"/><text x="53.9965%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (29 samples, 0.03%)</title><rect x="53.7465%" y="997" width="0.0252%" height="15" fill="rgb(233,112,49)" fg:x="61966" fg:w="29"/><text x="53.9965%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (24 samples, 0.02%)</title><rect x="53.8359%" y="901" width="0.0208%" height="15" fill="rgb(241,130,26)" fg:x="62069" fg:w="24"/><text x="54.0859%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (24 samples, 0.02%)</title><rect x="53.8359%" y="885" width="0.0208%" height="15" fill="rgb(252,223,19)" fg:x="62069" fg:w="24"/><text x="54.0859%" y="895.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="53.8350%" y="933" width="0.0234%" height="15" fill="rgb(211,95,25)" fg:x="62068" fg:w="27"/><text x="54.0850%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (26 samples, 0.02%)</title><rect x="53.8359%" y="917" width="0.0226%" height="15" fill="rgb(251,182,27)" fg:x="62069" fg:w="26"/><text x="54.0859%" y="927.50"></text></g><g><title>core::mem::drop (29 samples, 0.03%)</title><rect x="53.8662%" y="933" width="0.0252%" height="15" fill="rgb(238,24,4)" fg:x="62104" fg:w="29"/><text x="54.1162%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (29 samples, 0.03%)</title><rect x="53.8662%" y="917" width="0.0252%" height="15" fill="rgb(224,220,25)" fg:x="62104" fg:w="29"/><text x="54.1162%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.03%)</title><rect x="53.8662%" y="901" width="0.0252%" height="15" fill="rgb(239,133,26)" fg:x="62104" fg:w="29"/><text x="54.1162%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="53.8662%" y="885" width="0.0252%" height="15" fill="rgb(211,94,48)" fg:x="62104" fg:w="29"/><text x="54.1162%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="53.8680%" y="869" width="0.0234%" height="15" fill="rgb(239,87,6)" fg:x="62106" fg:w="27"/><text x="54.1180%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="53.8680%" y="853" width="0.0234%" height="15" fill="rgb(227,62,0)" fg:x="62106" fg:w="27"/><text x="54.1180%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (27 samples, 0.02%)</title><rect x="53.8680%" y="837" width="0.0234%" height="15" fill="rgb(211,226,4)" fg:x="62106" fg:w="27"/><text x="54.1180%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (32 samples, 0.03%)</title><rect x="53.8914%" y="933" width="0.0278%" height="15" fill="rgb(253,38,52)" fg:x="62133" fg:w="32"/><text x="54.1414%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (30 samples, 0.03%)</title><rect x="53.8931%" y="917" width="0.0260%" height="15" fill="rgb(229,126,40)" fg:x="62135" fg:w="30"/><text x="54.1431%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="53.8931%" y="901" width="0.0260%" height="15" fill="rgb(229,165,44)" fg:x="62135" fg:w="30"/><text x="54.1431%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.03%)</title><rect x="53.8931%" y="885" width="0.0260%" height="15" fill="rgb(247,95,47)" fg:x="62135" fg:w="30"/><text x="54.1431%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.03%)</title><rect x="53.8931%" y="869" width="0.0260%" height="15" fill="rgb(216,140,30)" fg:x="62135" fg:w="30"/><text x="54.1431%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (29 samples, 0.03%)</title><rect x="53.8940%" y="853" width="0.0252%" height="15" fill="rgb(246,214,8)" fg:x="62136" fg:w="29"/><text x="54.1440%" y="863.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="53.9209%" y="901" width="0.0104%" height="15" fill="rgb(227,224,15)" fg:x="62167" fg:w="12"/><text x="54.1709%" y="911.50"></text></g><g><title>std::sync::poison::Flag::borrow (12 samples, 0.01%)</title><rect x="53.9209%" y="885" width="0.0104%" height="15" fill="rgb(233,175,4)" fg:x="62167" fg:w="12"/><text x="54.1709%" y="895.50"></text></g><g><title>event_listener::Inner::lock (277 samples, 0.24%)</title><rect x="53.9200%" y="933" width="0.2403%" height="15" fill="rgb(221,66,45)" fg:x="62166" fg:w="277"/><text x="54.1700%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (276 samples, 0.24%)</title><rect x="53.9209%" y="917" width="0.2394%" height="15" fill="rgb(221,178,18)" fg:x="62167" fg:w="276"/><text x="54.1709%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (264 samples, 0.23%)</title><rect x="53.9313%" y="901" width="0.2290%" height="15" fill="rgb(213,81,29)" fg:x="62179" fg:w="264"/><text x="54.1813%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (219 samples, 0.19%)</title><rect x="53.9703%" y="885" width="0.1900%" height="15" fill="rgb(220,89,49)" fg:x="62224" fg:w="219"/><text x="54.2203%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (219 samples, 0.19%)</title><rect x="53.9703%" y="869" width="0.1900%" height="15" fill="rgb(227,60,33)" fg:x="62224" fg:w="219"/><text x="54.2203%" y="879.50"></text></g><g><title>__lll_lock_wait (23 samples, 0.02%)</title><rect x="54.1403%" y="853" width="0.0199%" height="15" fill="rgb(205,113,12)" fg:x="62420" fg:w="23"/><text x="54.3903%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (447 samples, 0.39%)</title><rect x="53.8168%" y="949" width="0.3877%" height="15" fill="rgb(211,32,1)" fg:x="62047" fg:w="447"/><text x="54.0668%" y="959.50"></text></g><g><title>event_listener::List::remove (51 samples, 0.04%)</title><rect x="54.1603%" y="933" width="0.0442%" height="15" fill="rgb(246,2,12)" fg:x="62443" fg:w="51"/><text x="54.4103%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (36 samples, 0.03%)</title><rect x="54.1733%" y="917" width="0.0312%" height="15" fill="rgb(243,37,27)" fg:x="62458" fg:w="36"/><text x="54.4233%" y="927.50"></text></g><g><title>core::mem::replace (36 samples, 0.03%)</title><rect x="54.1733%" y="901" width="0.0312%" height="15" fill="rgb(248,211,31)" fg:x="62458" fg:w="36"/><text x="54.4233%" y="911.50"></text></g><g><title>core::ptr::read (36 samples, 0.03%)</title><rect x="54.1733%" y="885" width="0.0312%" height="15" fill="rgb(242,146,47)" fg:x="62458" fg:w="36"/><text x="54.4233%" y="895.50"></text></g><g><title>[libc-2.31.so] (260 samples, 0.23%)</title><rect x="54.2045%" y="949" width="0.2255%" height="15" fill="rgb(206,70,20)" fg:x="62494" fg:w="260"/><text x="54.4545%" y="959.50"></text></g><g><title>[libc-2.31.so] (458 samples, 0.40%)</title><rect x="54.4465%" y="933" width="0.3972%" height="15" fill="rgb(215,10,51)" fg:x="62773" fg:w="458"/><text x="54.6965%" y="943.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="54.9565%" y="901" width="0.0893%" height="15" fill="rgb(243,178,53)" fg:x="63361" fg:w="103"/><text x="55.2065%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (113 samples, 0.10%)</title><rect x="55.0458%" y="901" width="0.0980%" height="15" fill="rgb(233,221,20)" fg:x="63464" fg:w="113"/><text x="55.2958%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (107 samples, 0.09%)</title><rect x="55.0510%" y="885" width="0.0928%" height="15" fill="rgb(218,95,35)" fg:x="63470" fg:w="107"/><text x="55.3010%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (107 samples, 0.09%)</title><rect x="55.0510%" y="869" width="0.0928%" height="15" fill="rgb(229,13,5)" fg:x="63470" fg:w="107"/><text x="55.3010%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (107 samples, 0.09%)</title><rect x="55.0510%" y="853" width="0.0928%" height="15" fill="rgb(252,164,30)" fg:x="63470" fg:w="107"/><text x="55.3010%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (444 samples, 0.39%)</title><rect x="55.1465%" y="901" width="0.3851%" height="15" fill="rgb(232,68,36)" fg:x="63580" fg:w="444"/><text x="55.3965%" y="911.50"></text></g><g><title>core::ptr::read (444 samples, 0.39%)</title><rect x="55.1465%" y="885" width="0.3851%" height="15" fill="rgb(219,59,54)" fg:x="63580" fg:w="444"/><text x="55.3965%" y="895.50"></text></g><g><title>[libc-2.31.so] (444 samples, 0.39%)</title><rect x="55.1465%" y="869" width="0.3851%" height="15" fill="rgb(250,92,33)" fg:x="63580" fg:w="444"/><text x="55.3965%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (204 samples, 0.18%)</title><rect x="55.5316%" y="901" width="0.1769%" height="15" fill="rgb(229,162,54)" fg:x="64024" fg:w="204"/><text x="55.7816%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (204 samples, 0.18%)</title><rect x="55.5316%" y="885" width="0.1769%" height="15" fill="rgb(244,114,52)" fg:x="64024" fg:w="204"/><text x="55.7816%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,400 samples, 1.21%)</title><rect x="54.8437%" y="933" width="1.2143%" height="15" fill="rgb(212,211,43)" fg:x="63231" fg:w="1400"/><text x="55.0937%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,367 samples, 1.19%)</title><rect x="54.8724%" y="917" width="1.1857%" height="15" fill="rgb(226,147,8)" fg:x="63264" fg:w="1367"/><text x="55.1224%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (403 samples, 0.35%)</title><rect x="55.7085%" y="901" width="0.3495%" height="15" fill="rgb(226,23,13)" fg:x="64228" fg:w="403"/><text x="55.9585%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (403 samples, 0.35%)</title><rect x="55.7085%" y="885" width="0.3495%" height="15" fill="rgb(240,63,4)" fg:x="64228" fg:w="403"/><text x="55.9585%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,009 samples, 1.74%)</title><rect x="54.4300%" y="949" width="1.7425%" height="15" fill="rgb(221,1,32)" fg:x="62754" fg:w="2009"/><text x="54.6800%" y="959.50"></text></g><g><title>event_listener::Event::notify (132 samples, 0.11%)</title><rect x="56.0580%" y="933" width="0.1145%" height="15" fill="rgb(242,117,10)" fg:x="64631" fg:w="132"/><text x="56.3080%" y="943.50"></text></g><g><title>event_listener::full_fence (118 samples, 0.10%)</title><rect x="56.0702%" y="917" width="0.1023%" height="15" fill="rgb(249,172,44)" fg:x="64645" fg:w="118"/><text x="56.3202%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (118 samples, 0.10%)</title><rect x="56.0702%" y="901" width="0.1023%" height="15" fill="rgb(244,46,45)" fg:x="64645" fg:w="118"/><text x="56.3202%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (118 samples, 0.10%)</title><rect x="56.0702%" y="885" width="0.1023%" height="15" fill="rgb(206,43,17)" fg:x="64645" fg:w="118"/><text x="56.3202%" y="895.50"></text></g><g><title>event_listener::Inner::lock (15 samples, 0.01%)</title><rect x="56.1942%" y="901" width="0.0130%" height="15" fill="rgb(239,218,39)" fg:x="64788" fg:w="15"/><text x="56.4442%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (14 samples, 0.01%)</title><rect x="56.1951%" y="885" width="0.0121%" height="15" fill="rgb(208,169,54)" fg:x="64789" fg:w="14"/><text x="56.4451%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (13 samples, 0.01%)</title><rect x="56.1960%" y="869" width="0.0113%" height="15" fill="rgb(247,25,42)" fg:x="64790" fg:w="13"/><text x="56.4460%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="56.1899%" y="917" width="0.0182%" height="15" fill="rgb(226,23,31)" fg:x="64783" fg:w="21"/><text x="56.4399%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (73 samples, 0.06%)</title><rect x="56.1821%" y="949" width="0.0633%" height="15" fill="rgb(247,16,28)" fg:x="64774" fg:w="73"/><text x="56.4321%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (64 samples, 0.06%)</title><rect x="56.1899%" y="933" width="0.0555%" height="15" fill="rgb(231,147,38)" fg:x="64783" fg:w="64"/><text x="56.4399%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (43 samples, 0.04%)</title><rect x="56.2081%" y="917" width="0.0373%" height="15" fill="rgb(253,81,48)" fg:x="64804" fg:w="43"/><text x="56.4581%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="56.2081%" y="901" width="0.0373%" height="15" fill="rgb(249,222,43)" fg:x="64804" fg:w="43"/><text x="56.4581%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (42 samples, 0.04%)</title><rect x="56.2090%" y="885" width="0.0364%" height="15" fill="rgb(221,3,27)" fg:x="64805" fg:w="42"/><text x="56.4590%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (42 samples, 0.04%)</title><rect x="56.2090%" y="869" width="0.0364%" height="15" fill="rgb(228,180,5)" fg:x="64805" fg:w="42"/><text x="56.4590%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (72 samples, 0.06%)</title><rect x="56.2454%" y="933" width="0.0624%" height="15" fill="rgb(227,131,42)" fg:x="64847" fg:w="72"/><text x="56.4954%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (72 samples, 0.06%)</title><rect x="56.2454%" y="917" width="0.0624%" height="15" fill="rgb(212,3,39)" fg:x="64847" fg:w="72"/><text x="56.4954%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (72 samples, 0.06%)</title><rect x="56.2454%" y="901" width="0.0624%" height="15" fill="rgb(226,45,5)" fg:x="64847" fg:w="72"/><text x="56.4954%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (43 samples, 0.04%)</title><rect x="56.3078%" y="933" width="0.0373%" height="15" fill="rgb(215,167,45)" fg:x="64919" fg:w="43"/><text x="56.5578%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (43 samples, 0.04%)</title><rect x="56.3078%" y="917" width="0.0373%" height="15" fill="rgb(250,218,53)" fg:x="64919" fg:w="43"/><text x="56.5578%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="56.3078%" y="901" width="0.0373%" height="15" fill="rgb(207,140,0)" fg:x="64919" fg:w="43"/><text x="56.5578%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (42 samples, 0.04%)</title><rect x="56.3087%" y="885" width="0.0364%" height="15" fill="rgb(238,133,51)" fg:x="64920" fg:w="42"/><text x="56.5587%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (42 samples, 0.04%)</title><rect x="56.3087%" y="869" width="0.0364%" height="15" fill="rgb(218,203,53)" fg:x="64920" fg:w="42"/><text x="56.5587%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (38 samples, 0.03%)</title><rect x="56.3122%" y="853" width="0.0330%" height="15" fill="rgb(226,184,25)" fg:x="64924" fg:w="38"/><text x="56.5622%" y="863.50"></text></g><g><title>event_listener::Inner::lock (63 samples, 0.05%)</title><rect x="56.3469%" y="933" width="0.0546%" height="15" fill="rgb(231,121,21)" fg:x="64964" fg:w="63"/><text x="56.5969%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.05%)</title><rect x="56.3486%" y="917" width="0.0529%" height="15" fill="rgb(251,14,34)" fg:x="64966" fg:w="61"/><text x="56.5986%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.05%)</title><rect x="56.3486%" y="901" width="0.0529%" height="15" fill="rgb(249,193,11)" fg:x="64966" fg:w="61"/><text x="56.5986%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (61 samples, 0.05%)</title><rect x="56.3486%" y="885" width="0.0529%" height="15" fill="rgb(220,172,37)" fg:x="64966" fg:w="61"/><text x="56.5986%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (60 samples, 0.05%)</title><rect x="56.3495%" y="869" width="0.0520%" height="15" fill="rgb(231,229,43)" fg:x="64967" fg:w="60"/><text x="56.5995%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,046 samples, 2.64%)</title><rect x="53.7856%" y="1029" width="2.6420%" height="15" fill="rgb(250,161,5)" fg:x="62011" fg:w="3046"/><text x="54.0356%" y="1039.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,046 samples, 2.64%)</title><rect x="53.7856%" y="1013" width="2.6420%" height="15" fill="rgb(218,225,18)" fg:x="62011" fg:w="3046"/><text x="54.0356%" y="1023.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,046 samples, 2.64%)</title><rect x="53.7856%" y="997" width="2.6420%" height="15" fill="rgb(245,45,42)" fg:x="62011" fg:w="3046"/><text x="54.0356%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,046 samples, 2.64%)</title><rect x="53.7856%" y="981" width="2.6420%" height="15" fill="rgb(211,115,1)" fg:x="62011" fg:w="3046"/><text x="54.0356%" y="991.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,046 samples, 2.64%)</title><rect x="53.7856%" y="965" width="2.6420%" height="15" fill="rgb(248,133,52)" fg:x="62011" fg:w="3046"/><text x="54.0356%" y="975.50">&lt;a..</text></g><g><title>event_listener::Event::listen (210 samples, 0.18%)</title><rect x="56.2454%" y="949" width="0.1821%" height="15" fill="rgb(238,100,21)" fg:x="64847" fg:w="210"/><text x="56.4954%" y="959.50"></text></g><g><title>event_listener::full_fence (26 samples, 0.02%)</title><rect x="56.4050%" y="933" width="0.0226%" height="15" fill="rgb(247,144,11)" fg:x="65031" fg:w="26"/><text x="56.6550%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (25 samples, 0.02%)</title><rect x="56.4059%" y="917" width="0.0217%" height="15" fill="rgb(206,164,16)" fg:x="65032" fg:w="25"/><text x="56.6559%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="56.4059%" y="901" width="0.0217%" height="15" fill="rgb(222,34,3)" fg:x="65032" fg:w="25"/><text x="56.6559%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (39 samples, 0.03%)</title><rect x="56.4423%" y="613" width="0.0338%" height="15" fill="rgb(248,82,4)" fg:x="65074" fg:w="39"/><text x="56.6923%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (38 samples, 0.03%)</title><rect x="56.4431%" y="597" width="0.0330%" height="15" fill="rgb(228,81,46)" fg:x="65075" fg:w="38"/><text x="56.6931%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (38 samples, 0.03%)</title><rect x="56.4431%" y="581" width="0.0330%" height="15" fill="rgb(227,67,47)" fg:x="65075" fg:w="38"/><text x="56.6931%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.03%)</title><rect x="56.4492%" y="565" width="0.0269%" height="15" fill="rgb(215,93,53)" fg:x="65082" fg:w="31"/><text x="56.6992%" y="575.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="56.4536%" y="549" width="0.0226%" height="15" fill="rgb(248,194,39)" fg:x="65087" fg:w="26"/><text x="56.7036%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.02%)</title><rect x="56.6132%" y="597" width="0.0182%" height="15" fill="rgb(215,5,19)" fg:x="65271" fg:w="21"/><text x="56.8632%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (45 samples, 0.04%)</title><rect x="56.6496%" y="581" width="0.0390%" height="15" fill="rgb(226,215,51)" fg:x="65313" fg:w="45"/><text x="56.8996%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (45 samples, 0.04%)</title><rect x="56.6496%" y="565" width="0.0390%" height="15" fill="rgb(225,56,26)" fg:x="65313" fg:w="45"/><text x="56.8996%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (45 samples, 0.04%)</title><rect x="56.6496%" y="549" width="0.0390%" height="15" fill="rgb(222,75,29)" fg:x="65313" fg:w="45"/><text x="56.8996%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (38 samples, 0.03%)</title><rect x="56.8152%" y="469" width="0.0330%" height="15" fill="rgb(236,139,6)" fg:x="65504" fg:w="38"/><text x="57.0652%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (30 samples, 0.03%)</title><rect x="56.8222%" y="453" width="0.0260%" height="15" fill="rgb(223,137,36)" fg:x="65512" fg:w="30"/><text x="57.0722%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.11%)</title><rect x="56.7719%" y="501" width="0.1110%" height="15" fill="rgb(226,99,2)" fg:x="65454" fg:w="128"/><text x="57.0219%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.08%)</title><rect x="56.8074%" y="485" width="0.0755%" height="15" fill="rgb(206,133,23)" fg:x="65495" fg:w="87"/><text x="57.0574%" y="495.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (29 samples, 0.03%)</title><rect x="56.8577%" y="469" width="0.0252%" height="15" fill="rgb(243,173,15)" fg:x="65553" fg:w="29"/><text x="57.1077%" y="479.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (211 samples, 0.18%)</title><rect x="56.7259%" y="533" width="0.1830%" height="15" fill="rgb(228,69,28)" fg:x="65401" fg:w="211"/><text x="56.9759%" y="543.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 0.16%)</title><rect x="56.7450%" y="517" width="0.1639%" height="15" fill="rgb(212,51,22)" fg:x="65423" fg:w="189"/><text x="56.9950%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (30 samples, 0.03%)</title><rect x="56.8829%" y="501" width="0.0260%" height="15" fill="rgb(227,113,0)" fg:x="65582" fg:w="30"/><text x="57.1329%" y="511.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (30 samples, 0.03%)</title><rect x="56.8829%" y="485" width="0.0260%" height="15" fill="rgb(252,84,27)" fg:x="65582" fg:w="30"/><text x="57.1329%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (30 samples, 0.03%)</title><rect x="56.8829%" y="469" width="0.0260%" height="15" fill="rgb(223,145,39)" fg:x="65582" fg:w="30"/><text x="57.1329%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (30 samples, 0.03%)</title><rect x="56.8829%" y="453" width="0.0260%" height="15" fill="rgb(239,219,30)" fg:x="65582" fg:w="30"/><text x="57.1329%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,089 samples, 0.94%)</title><rect x="56.7259%" y="549" width="0.9445%" height="15" fill="rgb(224,196,39)" fg:x="65401" fg:w="1089"/><text x="56.9759%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (878 samples, 0.76%)</title><rect x="56.9089%" y="533" width="0.7615%" height="15" fill="rgb(205,35,43)" fg:x="65612" fg:w="878"/><text x="57.1589%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (878 samples, 0.76%)</title><rect x="56.9089%" y="517" width="0.7615%" height="15" fill="rgb(228,201,21)" fg:x="65612" fg:w="878"/><text x="57.1589%" y="527.50"></text></g><g><title>core::ops::function::FnMut::call_mut (878 samples, 0.76%)</title><rect x="56.9089%" y="501" width="0.7615%" height="15" fill="rgb(237,118,16)" fg:x="65612" fg:w="878"/><text x="57.1589%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (878 samples, 0.76%)</title><rect x="56.9089%" y="485" width="0.7615%" height="15" fill="rgb(241,17,19)" fg:x="65612" fg:w="878"/><text x="57.1589%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (878 samples, 0.76%)</title><rect x="56.9089%" y="469" width="0.7615%" height="15" fill="rgb(214,10,25)" fg:x="65612" fg:w="878"/><text x="57.1589%" y="479.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,162 samples, 1.01%)</title><rect x="56.6895%" y="581" width="1.0079%" height="15" fill="rgb(238,37,29)" fg:x="65359" fg:w="1162"/><text x="56.9395%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,139 samples, 0.99%)</title><rect x="56.7094%" y="565" width="0.9879%" height="15" fill="rgb(253,83,25)" fg:x="65382" fg:w="1139"/><text x="56.9594%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (31 samples, 0.03%)</title><rect x="57.6705%" y="549" width="0.0269%" height="15" fill="rgb(234,192,12)" fg:x="66490" fg:w="31"/><text x="57.9205%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (31 samples, 0.03%)</title><rect x="57.6705%" y="533" width="0.0269%" height="15" fill="rgb(241,216,45)" fg:x="66490" fg:w="31"/><text x="57.9205%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (31 samples, 0.03%)</title><rect x="57.6705%" y="517" width="0.0269%" height="15" fill="rgb(242,22,33)" fg:x="66490" fg:w="31"/><text x="57.9205%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (40 samples, 0.03%)</title><rect x="57.7112%" y="549" width="0.0347%" height="15" fill="rgb(231,105,49)" fg:x="66537" fg:w="40"/><text x="57.9612%" y="559.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (40 samples, 0.03%)</title><rect x="57.7112%" y="533" width="0.0347%" height="15" fill="rgb(218,204,15)" fg:x="66537" fg:w="40"/><text x="57.9612%" y="543.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,345 samples, 1.17%)</title><rect x="56.6314%" y="597" width="1.1666%" height="15" fill="rgb(235,138,41)" fg:x="65292" fg:w="1345"/><text x="56.8814%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (116 samples, 0.10%)</title><rect x="57.6973%" y="581" width="0.1006%" height="15" fill="rgb(246,0,9)" fg:x="66521" fg:w="116"/><text x="57.9473%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (116 samples, 0.10%)</title><rect x="57.6973%" y="565" width="0.1006%" height="15" fill="rgb(210,74,4)" fg:x="66521" fg:w="116"/><text x="57.9473%" y="575.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (60 samples, 0.05%)</title><rect x="57.7459%" y="549" width="0.0520%" height="15" fill="rgb(250,60,41)" fg:x="66577" fg:w="60"/><text x="57.9959%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (99 samples, 0.09%)</title><rect x="57.7980%" y="597" width="0.0859%" height="15" fill="rgb(220,115,12)" fg:x="66637" fg:w="99"/><text x="58.0480%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (97 samples, 0.08%)</title><rect x="57.7997%" y="581" width="0.0841%" height="15" fill="rgb(237,100,13)" fg:x="66639" fg:w="97"/><text x="58.0497%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (91 samples, 0.08%)</title><rect x="57.8049%" y="565" width="0.0789%" height="15" fill="rgb(213,55,26)" fg:x="66645" fg:w="91"/><text x="58.0549%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (91 samples, 0.08%)</title><rect x="57.8049%" y="549" width="0.0789%" height="15" fill="rgb(216,17,4)" fg:x="66645" fg:w="91"/><text x="58.0549%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (89 samples, 0.08%)</title><rect x="57.8066%" y="533" width="0.0772%" height="15" fill="rgb(220,153,47)" fg:x="66647" fg:w="89"/><text x="58.0566%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (89 samples, 0.08%)</title><rect x="57.8066%" y="517" width="0.0772%" height="15" fill="rgb(215,131,9)" fg:x="66647" fg:w="89"/><text x="58.0566%" y="527.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (89 samples, 0.08%)</title><rect x="57.8066%" y="501" width="0.0772%" height="15" fill="rgb(233,46,42)" fg:x="66647" fg:w="89"/><text x="58.0566%" y="511.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (28 samples, 0.02%)</title><rect x="57.8864%" y="517" width="0.0243%" height="15" fill="rgb(226,86,7)" fg:x="66739" fg:w="28"/><text x="58.1364%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="57.8899%" y="501" width="0.0208%" height="15" fill="rgb(239,226,21)" fg:x="66743" fg:w="24"/><text x="58.1399%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="57.8899%" y="485" width="0.0208%" height="15" fill="rgb(244,137,22)" fg:x="66743" fg:w="24"/><text x="58.1399%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.02%)</title><rect x="57.8934%" y="469" width="0.0173%" height="15" fill="rgb(211,139,35)" fg:x="66747" fg:w="20"/><text x="58.1434%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.02%)</title><rect x="57.8934%" y="453" width="0.0173%" height="15" fill="rgb(214,62,50)" fg:x="66747" fg:w="20"/><text x="58.1434%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.02%)</title><rect x="57.8934%" y="437" width="0.0173%" height="15" fill="rgb(212,113,44)" fg:x="66747" fg:w="20"/><text x="58.1434%" y="447.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.02%)</title><rect x="57.8934%" y="421" width="0.0173%" height="15" fill="rgb(226,150,43)" fg:x="66747" fg:w="20"/><text x="58.1434%" y="431.50"></text></g><g><title>__rg_alloc (20 samples, 0.02%)</title><rect x="57.8934%" y="405" width="0.0173%" height="15" fill="rgb(250,71,37)" fg:x="66747" fg:w="20"/><text x="58.1434%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.02%)</title><rect x="57.8934%" y="389" width="0.0173%" height="15" fill="rgb(219,76,19)" fg:x="66747" fg:w="20"/><text x="58.1434%" y="399.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="57.8994%" y="373" width="0.0113%" height="15" fill="rgb(250,39,11)" fg:x="66754" fg:w="13"/><text x="58.1494%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (160 samples, 0.14%)</title><rect x="57.9159%" y="453" width="0.1388%" height="15" fill="rgb(230,64,31)" fg:x="66773" fg:w="160"/><text x="58.1659%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (160 samples, 0.14%)</title><rect x="57.9159%" y="437" width="0.1388%" height="15" fill="rgb(208,222,23)" fg:x="66773" fg:w="160"/><text x="58.1659%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (177 samples, 0.15%)</title><rect x="57.9107%" y="469" width="0.1535%" height="15" fill="rgb(227,125,18)" fg:x="66767" fg:w="177"/><text x="58.1607%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (209 samples, 0.18%)</title><rect x="57.8838%" y="597" width="0.1813%" height="15" fill="rgb(234,210,9)" fg:x="66736" fg:w="209"/><text x="58.1338%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (208 samples, 0.18%)</title><rect x="57.8847%" y="581" width="0.1804%" height="15" fill="rgb(217,127,24)" fg:x="66737" fg:w="208"/><text x="58.1347%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (208 samples, 0.18%)</title><rect x="57.8847%" y="565" width="0.1804%" height="15" fill="rgb(239,141,48)" fg:x="66737" fg:w="208"/><text x="58.1347%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (206 samples, 0.18%)</title><rect x="57.8864%" y="549" width="0.1787%" height="15" fill="rgb(227,109,8)" fg:x="66739" fg:w="206"/><text x="58.1364%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (206 samples, 0.18%)</title><rect x="57.8864%" y="533" width="0.1787%" height="15" fill="rgb(235,184,23)" fg:x="66739" fg:w="206"/><text x="58.1364%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (178 samples, 0.15%)</title><rect x="57.9107%" y="517" width="0.1544%" height="15" fill="rgb(227,226,48)" fg:x="66767" fg:w="178"/><text x="58.1607%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (178 samples, 0.15%)</title><rect x="57.9107%" y="501" width="0.1544%" height="15" fill="rgb(206,150,11)" fg:x="66767" fg:w="178"/><text x="58.1607%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (178 samples, 0.15%)</title><rect x="57.9107%" y="485" width="0.1544%" height="15" fill="rgb(254,2,33)" fg:x="66767" fg:w="178"/><text x="58.1607%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="58.0720%" y="501" width="0.0191%" height="15" fill="rgb(243,160,20)" fg:x="66953" fg:w="22"/><text x="58.3220%" y="511.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="58.0911%" y="501" width="0.0624%" height="15" fill="rgb(218,208,30)" fg:x="66975" fg:w="72"/><text x="58.3411%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (104 samples, 0.09%)</title><rect x="58.0651%" y="597" width="0.0902%" height="15" fill="rgb(224,120,49)" fg:x="66945" fg:w="104"/><text x="58.3151%" y="607.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.09%)</title><rect x="58.0651%" y="581" width="0.0902%" height="15" fill="rgb(246,12,2)" fg:x="66945" fg:w="104"/><text x="58.3151%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (103 samples, 0.09%)</title><rect x="58.0660%" y="565" width="0.0893%" height="15" fill="rgb(236,117,3)" fg:x="66946" fg:w="103"/><text x="58.3160%" y="575.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (99 samples, 0.09%)</title><rect x="58.0694%" y="549" width="0.0859%" height="15" fill="rgb(216,128,52)" fg:x="66950" fg:w="99"/><text x="58.3194%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (99 samples, 0.09%)</title><rect x="58.0694%" y="533" width="0.0859%" height="15" fill="rgb(246,145,19)" fg:x="66950" fg:w="99"/><text x="58.3194%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (99 samples, 0.09%)</title><rect x="58.0694%" y="517" width="0.0859%" height="15" fill="rgb(222,11,46)" fg:x="66950" fg:w="99"/><text x="58.3194%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (78 samples, 0.07%)</title><rect x="58.4667%" y="581" width="0.0677%" height="15" fill="rgb(245,82,36)" fg:x="67408" fg:w="78"/><text x="58.7167%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="58.5343%" y="581" width="0.0304%" height="15" fill="rgb(250,73,51)" fg:x="67486" fg:w="35"/><text x="58.7843%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (40 samples, 0.03%)</title><rect x="58.5786%" y="581" width="0.0347%" height="15" fill="rgb(221,189,23)" fg:x="67537" fg:w="40"/><text x="58.8286%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (38 samples, 0.03%)</title><rect x="58.5803%" y="565" width="0.0330%" height="15" fill="rgb(210,33,7)" fg:x="67539" fg:w="38"/><text x="58.8303%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (38 samples, 0.03%)</title><rect x="58.5803%" y="549" width="0.0330%" height="15" fill="rgb(210,107,22)" fg:x="67539" fg:w="38"/><text x="58.8303%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="58.5838%" y="533" width="0.0295%" height="15" fill="rgb(222,116,37)" fg:x="67543" fg:w="34"/><text x="58.8338%" y="543.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.03%)</title><rect x="58.5838%" y="517" width="0.0295%" height="15" fill="rgb(254,17,48)" fg:x="67543" fg:w="34"/><text x="58.8338%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="59.4919%" y="565" width="0.0208%" height="15" fill="rgb(224,36,32)" fg:x="68590" fg:w="24"/><text x="59.7419%" y="575.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="59.5127%" y="565" width="0.0807%" height="15" fill="rgb(232,90,46)" fg:x="68614" fg:w="93"/><text x="59.7627%" y="575.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (74 samples, 0.06%)</title><rect x="59.5934%" y="565" width="0.0642%" height="15" fill="rgb(241,66,40)" fg:x="68707" fg:w="74"/><text x="59.8434%" y="575.50"></text></g><g><title>itoa::write (72 samples, 0.06%)</title><rect x="59.5951%" y="549" width="0.0624%" height="15" fill="rgb(249,184,29)" fg:x="68709" fg:w="72"/><text x="59.8451%" y="559.50"></text></g><g><title>itoa::Buffer::format (72 samples, 0.06%)</title><rect x="59.5951%" y="533" width="0.0624%" height="15" fill="rgb(231,181,1)" fg:x="68709" fg:w="72"/><text x="59.8451%" y="543.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (72 samples, 0.06%)</title><rect x="59.5951%" y="517" width="0.0624%" height="15" fill="rgb(224,94,2)" fg:x="68709" fg:w="72"/><text x="59.8451%" y="527.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (72 samples, 0.06%)</title><rect x="59.5951%" y="501" width="0.0624%" height="15" fill="rgb(229,170,15)" fg:x="68709" fg:w="72"/><text x="59.8451%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (18 samples, 0.02%)</title><rect x="59.6819%" y="469" width="0.0156%" height="15" fill="rgb(240,127,35)" fg:x="68809" fg:w="18"/><text x="59.9319%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="59.6827%" y="453" width="0.0147%" height="15" fill="rgb(248,196,34)" fg:x="68810" fg:w="17"/><text x="59.9327%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (17 samples, 0.01%)</title><rect x="59.6827%" y="437" width="0.0147%" height="15" fill="rgb(236,137,7)" fg:x="68810" fg:w="17"/><text x="59.9327%" y="447.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (57 samples, 0.05%)</title><rect x="59.6576%" y="549" width="0.0494%" height="15" fill="rgb(235,127,16)" fg:x="68781" fg:w="57"/><text x="59.9076%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (49 samples, 0.04%)</title><rect x="59.6645%" y="533" width="0.0425%" height="15" fill="rgb(250,192,54)" fg:x="68789" fg:w="49"/><text x="59.9145%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (49 samples, 0.04%)</title><rect x="59.6645%" y="517" width="0.0425%" height="15" fill="rgb(218,98,20)" fg:x="68789" fg:w="49"/><text x="59.9145%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (49 samples, 0.04%)</title><rect x="59.6645%" y="501" width="0.0425%" height="15" fill="rgb(230,176,47)" fg:x="68789" fg:w="49"/><text x="59.9145%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (49 samples, 0.04%)</title><rect x="59.6645%" y="485" width="0.0425%" height="15" fill="rgb(244,2,33)" fg:x="68789" fg:w="49"/><text x="59.9145%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.05%)</title><rect x="59.7972%" y="533" width="0.0512%" height="15" fill="rgb(231,100,17)" fg:x="68942" fg:w="59"/><text x="60.0472%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.05%)</title><rect x="59.7972%" y="517" width="0.0512%" height="15" fill="rgb(245,23,12)" fg:x="68942" fg:w="59"/><text x="60.0472%" y="527.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (56 samples, 0.05%)</title><rect x="59.8484%" y="533" width="0.0486%" height="15" fill="rgb(249,55,22)" fg:x="69001" fg:w="56"/><text x="60.0984%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (56 samples, 0.05%)</title><rect x="59.8484%" y="517" width="0.0486%" height="15" fill="rgb(207,134,9)" fg:x="69001" fg:w="56"/><text x="60.0984%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (56 samples, 0.05%)</title><rect x="59.8484%" y="501" width="0.0486%" height="15" fill="rgb(218,134,0)" fg:x="69001" fg:w="56"/><text x="60.0984%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (56 samples, 0.05%)</title><rect x="59.8484%" y="485" width="0.0486%" height="15" fill="rgb(213,212,33)" fg:x="69001" fg:w="56"/><text x="60.0984%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (56 samples, 0.05%)</title><rect x="59.8484%" y="469" width="0.0486%" height="15" fill="rgb(252,106,18)" fg:x="69001" fg:w="56"/><text x="60.0984%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.03%)</title><rect x="59.8631%" y="453" width="0.0338%" height="15" fill="rgb(208,126,42)" fg:x="69018" fg:w="39"/><text x="60.1131%" y="463.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="59.8631%" y="437" width="0.0338%" height="15" fill="rgb(246,175,29)" fg:x="69018" fg:w="39"/><text x="60.1131%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (60 samples, 0.05%)</title><rect x="59.9056%" y="453" width="0.0520%" height="15" fill="rgb(215,13,50)" fg:x="69067" fg:w="60"/><text x="60.1556%" y="463.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="59.9369%" y="437" width="0.0208%" height="15" fill="rgb(216,172,15)" fg:x="69103" fg:w="24"/><text x="60.1869%" y="447.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,555 samples, 1.35%)</title><rect x="58.6133%" y="581" width="1.3487%" height="15" fill="rgb(212,103,13)" fg:x="67577" fg:w="1555"/><text x="58.8633%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (351 samples, 0.30%)</title><rect x="59.6576%" y="565" width="0.3044%" height="15" fill="rgb(231,171,36)" fg:x="68781" fg:w="351"/><text x="59.9076%" y="575.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (294 samples, 0.26%)</title><rect x="59.7070%" y="549" width="0.2550%" height="15" fill="rgb(250,123,20)" fg:x="68838" fg:w="294"/><text x="59.9570%" y="559.50"></text></g><g><title>value_trait::generator::write_str_simd (75 samples, 0.07%)</title><rect x="59.8970%" y="533" width="0.0651%" height="15" fill="rgb(212,53,50)" fg:x="69057" fg:w="75"/><text x="60.1470%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (70 samples, 0.06%)</title><rect x="59.9013%" y="517" width="0.0607%" height="15" fill="rgb(243,54,12)" fg:x="69062" fg:w="70"/><text x="60.1513%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (70 samples, 0.06%)</title><rect x="59.9013%" y="501" width="0.0607%" height="15" fill="rgb(234,101,34)" fg:x="69062" fg:w="70"/><text x="60.1513%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (70 samples, 0.06%)</title><rect x="59.9013%" y="485" width="0.0607%" height="15" fill="rgb(254,67,22)" fg:x="69062" fg:w="70"/><text x="60.1513%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (70 samples, 0.06%)</title><rect x="59.9013%" y="469" width="0.0607%" height="15" fill="rgb(250,35,47)" fg:x="69062" fg:w="70"/><text x="60.1513%" y="479.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (74 samples, 0.06%)</title><rect x="59.9620%" y="565" width="0.0642%" height="15" fill="rgb(226,126,38)" fg:x="69132" fg:w="74"/><text x="60.2120%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (16 samples, 0.01%)</title><rect x="60.0513%" y="501" width="0.0139%" height="15" fill="rgb(216,138,53)" fg:x="69235" fg:w="16"/><text x="60.3013%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (68 samples, 0.06%)</title><rect x="60.0652%" y="501" width="0.0590%" height="15" fill="rgb(246,199,43)" fg:x="69251" fg:w="68"/><text x="60.3152%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (25 samples, 0.02%)</title><rect x="60.1025%" y="485" width="0.0217%" height="15" fill="rgb(232,125,11)" fg:x="69294" fg:w="25"/><text x="60.3525%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (21 samples, 0.02%)</title><rect x="60.1060%" y="469" width="0.0182%" height="15" fill="rgb(218,219,45)" fg:x="69298" fg:w="21"/><text x="60.3560%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (323 samples, 0.28%)</title><rect x="59.9620%" y="581" width="0.2802%" height="15" fill="rgb(216,102,54)" fg:x="69132" fg:w="323"/><text x="60.2120%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (249 samples, 0.22%)</title><rect x="60.0262%" y="565" width="0.2160%" height="15" fill="rgb(250,228,7)" fg:x="69206" fg:w="249"/><text x="60.2762%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (245 samples, 0.21%)</title><rect x="60.0297%" y="549" width="0.2125%" height="15" fill="rgb(226,125,25)" fg:x="69210" fg:w="245"/><text x="60.2797%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (245 samples, 0.21%)</title><rect x="60.0297%" y="533" width="0.2125%" height="15" fill="rgb(224,165,27)" fg:x="69210" fg:w="245"/><text x="60.2797%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (245 samples, 0.21%)</title><rect x="60.0297%" y="517" width="0.2125%" height="15" fill="rgb(233,86,3)" fg:x="69210" fg:w="245"/><text x="60.2797%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (136 samples, 0.12%)</title><rect x="60.1242%" y="501" width="0.1180%" height="15" fill="rgb(228,116,20)" fg:x="69319" fg:w="136"/><text x="60.3742%" y="511.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (45 samples, 0.04%)</title><rect x="60.2422%" y="581" width="0.0390%" height="15" fill="rgb(209,192,17)" fg:x="69455" fg:w="45"/><text x="60.4922%" y="591.50"></text></g><g><title>itoa::write (44 samples, 0.04%)</title><rect x="60.2430%" y="565" width="0.0382%" height="15" fill="rgb(224,88,34)" fg:x="69456" fg:w="44"/><text x="60.4930%" y="575.50"></text></g><g><title>itoa::Buffer::format (44 samples, 0.04%)</title><rect x="60.2430%" y="549" width="0.0382%" height="15" fill="rgb(233,38,6)" fg:x="69456" fg:w="44"/><text x="60.4930%" y="559.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (44 samples, 0.04%)</title><rect x="60.2430%" y="533" width="0.0382%" height="15" fill="rgb(212,59,30)" fg:x="69456" fg:w="44"/><text x="60.4930%" y="543.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (44 samples, 0.04%)</title><rect x="60.2430%" y="517" width="0.0382%" height="15" fill="rgb(213,80,3)" fg:x="69456" fg:w="44"/><text x="60.4930%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.03%)</title><rect x="60.2482%" y="501" width="0.0330%" height="15" fill="rgb(251,178,7)" fg:x="69462" fg:w="38"/><text x="60.4982%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (63 samples, 0.05%)</title><rect x="60.3176%" y="485" width="0.0546%" height="15" fill="rgb(213,154,26)" fg:x="69542" fg:w="63"/><text x="60.5676%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (44 samples, 0.04%)</title><rect x="60.3341%" y="469" width="0.0382%" height="15" fill="rgb(238,165,49)" fg:x="69561" fg:w="44"/><text x="60.5841%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (44 samples, 0.04%)</title><rect x="60.3341%" y="453" width="0.0382%" height="15" fill="rgb(248,91,46)" fg:x="69561" fg:w="44"/><text x="60.5841%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (148 samples, 0.13%)</title><rect x="60.2812%" y="565" width="0.1284%" height="15" fill="rgb(244,21,52)" fg:x="69500" fg:w="148"/><text x="60.5312%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (148 samples, 0.13%)</title><rect x="60.2812%" y="549" width="0.1284%" height="15" fill="rgb(247,122,20)" fg:x="69500" fg:w="148"/><text x="60.5312%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (148 samples, 0.13%)</title><rect x="60.2812%" y="533" width="0.1284%" height="15" fill="rgb(218,27,9)" fg:x="69500" fg:w="148"/><text x="60.5312%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (148 samples, 0.13%)</title><rect x="60.2812%" y="517" width="0.1284%" height="15" fill="rgb(246,7,6)" fg:x="69500" fg:w="148"/><text x="60.5312%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (148 samples, 0.13%)</title><rect x="60.2812%" y="501" width="0.1284%" height="15" fill="rgb(227,135,54)" fg:x="69500" fg:w="148"/><text x="60.5312%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.04%)</title><rect x="60.3723%" y="485" width="0.0373%" height="15" fill="rgb(247,14,11)" fg:x="69605" fg:w="43"/><text x="60.6223%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.10%)</title><rect x="60.6958%" y="549" width="0.1049%" height="15" fill="rgb(206,149,34)" fg:x="69978" fg:w="121"/><text x="60.9458%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.10%)</title><rect x="60.6958%" y="533" width="0.1049%" height="15" fill="rgb(227,228,4)" fg:x="69978" fg:w="121"/><text x="60.9458%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (48 samples, 0.04%)</title><rect x="60.8380%" y="469" width="0.0416%" height="15" fill="rgb(238,218,28)" fg:x="70142" fg:w="48"/><text x="61.0880%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (48 samples, 0.04%)</title><rect x="60.8380%" y="453" width="0.0416%" height="15" fill="rgb(252,86,40)" fg:x="70142" fg:w="48"/><text x="61.0880%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (48 samples, 0.04%)</title><rect x="60.8380%" y="437" width="0.0416%" height="15" fill="rgb(251,225,11)" fg:x="70142" fg:w="48"/><text x="61.0880%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (167 samples, 0.14%)</title><rect x="60.8797%" y="469" width="0.1448%" height="15" fill="rgb(206,46,49)" fg:x="70190" fg:w="167"/><text x="61.1297%" y="479.50"></text></g><g><title>[libc-2.31.so] (162 samples, 0.14%)</title><rect x="60.8840%" y="453" width="0.1405%" height="15" fill="rgb(245,128,24)" fg:x="70195" fg:w="162"/><text x="61.1340%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (262 samples, 0.23%)</title><rect x="60.8007%" y="549" width="0.2272%" height="15" fill="rgb(219,177,34)" fg:x="70099" fg:w="262"/><text x="61.0507%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (262 samples, 0.23%)</title><rect x="60.8007%" y="533" width="0.2272%" height="15" fill="rgb(218,60,48)" fg:x="70099" fg:w="262"/><text x="61.0507%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (262 samples, 0.23%)</title><rect x="60.8007%" y="517" width="0.2272%" height="15" fill="rgb(221,11,5)" fg:x="70099" fg:w="262"/><text x="61.0507%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (262 samples, 0.23%)</title><rect x="60.8007%" y="501" width="0.2272%" height="15" fill="rgb(220,148,13)" fg:x="70099" fg:w="262"/><text x="61.0507%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (262 samples, 0.23%)</title><rect x="60.8007%" y="485" width="0.2272%" height="15" fill="rgb(210,16,3)" fg:x="70099" fg:w="262"/><text x="61.0507%" y="495.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (73 samples, 0.06%)</title><rect x="61.0844%" y="533" width="0.0633%" height="15" fill="rgb(236,80,2)" fg:x="70426" fg:w="73"/><text x="61.3344%" y="543.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (15 samples, 0.01%)</title><rect x="61.1564%" y="533" width="0.0130%" height="15" fill="rgb(239,129,19)" fg:x="70509" fg:w="15"/><text x="61.4064%" y="543.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (73 samples, 0.06%)</title><rect x="61.1694%" y="533" width="0.0633%" height="15" fill="rgb(220,106,35)" fg:x="70524" fg:w="73"/><text x="61.4194%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.06%)</title><rect x="61.1694%" y="517" width="0.0633%" height="15" fill="rgb(252,139,45)" fg:x="70524" fg:w="73"/><text x="61.4194%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="61.2448%" y="469" width="0.0121%" height="15" fill="rgb(229,8,36)" fg:x="70611" fg:w="14"/><text x="61.4948%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.01%)</title><rect x="61.2466%" y="453" width="0.0104%" height="15" fill="rgb(230,126,33)" fg:x="70613" fg:w="12"/><text x="61.4966%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (12 samples, 0.01%)</title><rect x="61.2466%" y="437" width="0.0104%" height="15" fill="rgb(239,140,21)" fg:x="70613" fg:w="12"/><text x="61.4966%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (166 samples, 0.14%)</title><rect x="61.2570%" y="469" width="0.1440%" height="15" fill="rgb(254,104,9)" fg:x="70625" fg:w="166"/><text x="61.5070%" y="479.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.11%)</title><rect x="61.2865%" y="453" width="0.1145%" height="15" fill="rgb(239,52,14)" fg:x="70659" fg:w="132"/><text x="61.5365%" y="463.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,751 samples, 3.25%)</title><rect x="58.1553%" y="597" width="3.2534%" height="15" fill="rgb(208,227,44)" fg:x="67049" fg:w="3751"/><text x="58.4053%" y="607.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,300 samples, 1.13%)</title><rect x="60.2812%" y="581" width="1.1276%" height="15" fill="rgb(246,18,19)" fg:x="69500" fg:w="1300"/><text x="60.5312%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,152 samples, 1.00%)</title><rect x="60.4096%" y="565" width="0.9992%" height="15" fill="rgb(235,228,25)" fg:x="69648" fg:w="1152"/><text x="60.6596%" y="575.50"></text></g><g><title>value_trait::generator::write_str_simd (439 samples, 0.38%)</title><rect x="61.0280%" y="549" width="0.3808%" height="15" fill="rgb(240,156,20)" fg:x="70361" fg:w="439"/><text x="61.2780%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (203 samples, 0.18%)</title><rect x="61.2327%" y="533" width="0.1761%" height="15" fill="rgb(224,8,20)" fg:x="70597" fg:w="203"/><text x="61.4827%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (203 samples, 0.18%)</title><rect x="61.2327%" y="517" width="0.1761%" height="15" fill="rgb(214,12,52)" fg:x="70597" fg:w="203"/><text x="61.4827%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (203 samples, 0.18%)</title><rect x="61.2327%" y="501" width="0.1761%" height="15" fill="rgb(211,220,47)" fg:x="70597" fg:w="203"/><text x="61.4827%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (203 samples, 0.18%)</title><rect x="61.2327%" y="485" width="0.1761%" height="15" fill="rgb(250,173,5)" fg:x="70597" fg:w="203"/><text x="61.4827%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (92 samples, 0.08%)</title><rect x="61.4721%" y="517" width="0.0798%" height="15" fill="rgb(250,125,52)" fg:x="70873" fg:w="92"/><text x="61.7221%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (61 samples, 0.05%)</title><rect x="61.4990%" y="501" width="0.0529%" height="15" fill="rgb(209,133,18)" fg:x="70904" fg:w="61"/><text x="61.7490%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (51 samples, 0.04%)</title><rect x="61.5076%" y="485" width="0.0442%" height="15" fill="rgb(216,173,22)" fg:x="70914" fg:w="51"/><text x="61.7576%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (39 samples, 0.03%)</title><rect x="61.5180%" y="469" width="0.0338%" height="15" fill="rgb(205,3,22)" fg:x="70926" fg:w="39"/><text x="61.7680%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (253 samples, 0.22%)</title><rect x="61.4088%" y="597" width="0.2194%" height="15" fill="rgb(248,22,20)" fg:x="70800" fg:w="253"/><text x="61.6588%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (247 samples, 0.21%)</title><rect x="61.4140%" y="581" width="0.2142%" height="15" fill="rgb(233,6,29)" fg:x="70806" fg:w="247"/><text x="61.6640%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (247 samples, 0.21%)</title><rect x="61.4140%" y="565" width="0.2142%" height="15" fill="rgb(240,22,54)" fg:x="70806" fg:w="247"/><text x="61.6640%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (247 samples, 0.21%)</title><rect x="61.4140%" y="549" width="0.2142%" height="15" fill="rgb(231,133,32)" fg:x="70806" fg:w="247"/><text x="61.6640%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (247 samples, 0.21%)</title><rect x="61.4140%" y="533" width="0.2142%" height="15" fill="rgb(248,193,4)" fg:x="70806" fg:w="247"/><text x="61.6640%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (88 samples, 0.08%)</title><rect x="61.5519%" y="517" width="0.0763%" height="15" fill="rgb(211,178,46)" fg:x="70965" fg:w="88"/><text x="61.8019%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (252 samples, 0.22%)</title><rect x="62.9128%" y="581" width="0.2186%" height="15" fill="rgb(224,5,42)" fg:x="72534" fg:w="252"/><text x="63.1628%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (252 samples, 0.22%)</title><rect x="62.9128%" y="565" width="0.2186%" height="15" fill="rgb(239,176,25)" fg:x="72534" fg:w="252"/><text x="63.1628%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (46 samples, 0.04%)</title><rect x="63.1565%" y="501" width="0.0399%" height="15" fill="rgb(245,187,50)" fg:x="72815" fg:w="46"/><text x="63.4065%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="63.1799%" y="485" width="0.0165%" height="15" fill="rgb(248,24,15)" fg:x="72842" fg:w="19"/><text x="63.4299%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (12 samples, 0.01%)</title><rect x="63.1860%" y="469" width="0.0104%" height="15" fill="rgb(205,166,13)" fg:x="72849" fg:w="12"/><text x="63.4360%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (177 samples, 0.15%)</title><rect x="63.1964%" y="501" width="0.1535%" height="15" fill="rgb(208,114,23)" fg:x="72861" fg:w="177"/><text x="63.4464%" y="511.50"></text></g><g><title>[libc-2.31.so] (167 samples, 0.14%)</title><rect x="63.2051%" y="485" width="0.1448%" height="15" fill="rgb(239,127,18)" fg:x="72871" fg:w="167"/><text x="63.4551%" y="495.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (8,000 samples, 6.94%)</title><rect x="56.4275%" y="661" width="6.9388%" height="15" fill="rgb(219,154,28)" fg:x="65057" fg:w="8000"/><text x="56.6775%" y="671.50">&lt;tremor_r..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (8,000 samples, 6.94%)</title><rect x="56.4275%" y="645" width="6.9388%" height="15" fill="rgb(225,157,23)" fg:x="65057" fg:w="8000"/><text x="56.6775%" y="655.50">tremor_va..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (8,000 samples, 6.94%)</title><rect x="56.4275%" y="629" width="6.9388%" height="15" fill="rgb(219,8,6)" fg:x="65057" fg:w="8000"/><text x="56.6775%" y="639.50">tremor_va..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (7,944 samples, 6.89%)</title><rect x="56.4761%" y="613" width="6.8903%" height="15" fill="rgb(212,47,6)" fg:x="65113" fg:w="7944"/><text x="56.7261%" y="623.50">tremor_va..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,004 samples, 1.74%)</title><rect x="61.6282%" y="597" width="1.7382%" height="15" fill="rgb(224,190,4)" fg:x="71053" fg:w="2004"/><text x="61.8782%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (271 samples, 0.24%)</title><rect x="63.1313%" y="581" width="0.2351%" height="15" fill="rgb(239,183,29)" fg:x="72786" fg:w="271"/><text x="63.3813%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (265 samples, 0.23%)</title><rect x="63.1365%" y="565" width="0.2298%" height="15" fill="rgb(213,57,7)" fg:x="72792" fg:w="265"/><text x="63.3865%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (265 samples, 0.23%)</title><rect x="63.1365%" y="549" width="0.2298%" height="15" fill="rgb(216,148,1)" fg:x="72792" fg:w="265"/><text x="63.3865%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (265 samples, 0.23%)</title><rect x="63.1365%" y="533" width="0.2298%" height="15" fill="rgb(236,182,29)" fg:x="72792" fg:w="265"/><text x="63.3865%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (265 samples, 0.23%)</title><rect x="63.1365%" y="517" width="0.2298%" height="15" fill="rgb(244,120,48)" fg:x="72792" fg:w="265"/><text x="63.3865%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (19 samples, 0.02%)</title><rect x="63.3499%" y="501" width="0.0165%" height="15" fill="rgb(206,71,34)" fg:x="73038" fg:w="19"/><text x="63.5999%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.02%)</title><rect x="63.3499%" y="485" width="0.0165%" height="15" fill="rgb(242,32,6)" fg:x="73038" fg:w="19"/><text x="63.5999%" y="495.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (8,041 samples, 6.97%)</title><rect x="56.4275%" y="677" width="6.9744%" height="15" fill="rgb(241,35,3)" fg:x="65057" fg:w="8041"/><text x="56.6775%" y="687.50">&lt;tremor_r..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (41 samples, 0.04%)</title><rect x="63.3664%" y="661" width="0.0356%" height="15" fill="rgb(222,62,19)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41 samples, 0.04%)</title><rect x="63.3664%" y="645" width="0.0356%" height="15" fill="rgb(223,110,41)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41 samples, 0.04%)</title><rect x="63.3664%" y="629" width="0.0356%" height="15" fill="rgb(208,224,4)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (41 samples, 0.04%)</title><rect x="63.3664%" y="613" width="0.0356%" height="15" fill="rgb(241,137,19)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 0.04%)</title><rect x="63.3664%" y="597" width="0.0356%" height="15" fill="rgb(244,24,17)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.04%)</title><rect x="63.3664%" y="581" width="0.0356%" height="15" fill="rgb(245,178,49)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="591.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.04%)</title><rect x="63.3664%" y="565" width="0.0356%" height="15" fill="rgb(219,160,38)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="575.50"></text></g><g><title>__rg_alloc (41 samples, 0.04%)</title><rect x="63.3664%" y="549" width="0.0356%" height="15" fill="rgb(228,137,14)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (41 samples, 0.04%)</title><rect x="63.3664%" y="533" width="0.0356%" height="15" fill="rgb(237,134,11)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="543.50"></text></g><g><title>sn_rust_alloc (41 samples, 0.04%)</title><rect x="63.3664%" y="517" width="0.0356%" height="15" fill="rgb(211,126,44)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (41 samples, 0.04%)</title><rect x="63.3664%" y="501" width="0.0356%" height="15" fill="rgb(226,171,33)" fg:x="73057" fg:w="41"/><text x="63.6164%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="63.4262%" y="661" width="0.0208%" height="15" fill="rgb(253,99,13)" fg:x="73126" fg:w="24"/><text x="63.6762%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="63.4262%" y="645" width="0.0208%" height="15" fill="rgb(244,48,7)" fg:x="73126" fg:w="24"/><text x="63.6762%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="63.4262%" y="629" width="0.0208%" height="15" fill="rgb(244,217,54)" fg:x="73126" fg:w="24"/><text x="63.6762%" y="639.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="63.4271%" y="613" width="0.0199%" height="15" fill="rgb(224,15,18)" fg:x="73127" fg:w="23"/><text x="63.6771%" y="623.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="63.4271%" y="597" width="0.0199%" height="15" fill="rgb(244,99,12)" fg:x="73127" fg:w="23"/><text x="63.6771%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="63.4271%" y="581" width="0.0199%" height="15" fill="rgb(233,226,8)" fg:x="73127" fg:w="23"/><text x="63.6771%" y="591.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="63.4271%" y="565" width="0.0199%" height="15" fill="rgb(229,211,3)" fg:x="73127" fg:w="23"/><text x="63.6771%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (16 samples, 0.01%)</title><rect x="63.4583%" y="645" width="0.0139%" height="15" fill="rgb(216,140,21)" fg:x="73163" fg:w="16"/><text x="63.7083%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (47 samples, 0.04%)</title><rect x="63.4809%" y="629" width="0.0408%" height="15" fill="rgb(234,122,30)" fg:x="73189" fg:w="47"/><text x="63.7309%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (27 samples, 0.02%)</title><rect x="63.5346%" y="597" width="0.0234%" height="15" fill="rgb(236,25,46)" fg:x="73251" fg:w="27"/><text x="63.7846%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (27 samples, 0.02%)</title><rect x="63.5346%" y="581" width="0.0234%" height="15" fill="rgb(217,52,54)" fg:x="73251" fg:w="27"/><text x="63.7846%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="63.5364%" y="565" width="0.0217%" height="15" fill="rgb(222,29,26)" fg:x="73253" fg:w="25"/><text x="63.7864%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (25 samples, 0.02%)</title><rect x="63.5364%" y="549" width="0.0217%" height="15" fill="rgb(216,177,29)" fg:x="73253" fg:w="25"/><text x="63.7864%" y="559.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (25 samples, 0.02%)</title><rect x="63.5364%" y="533" width="0.0217%" height="15" fill="rgb(247,136,51)" fg:x="73253" fg:w="25"/><text x="63.7864%" y="543.50"></text></g><g><title>std::time::SystemTime::duration_since (99 samples, 0.09%)</title><rect x="63.4809%" y="645" width="0.0859%" height="15" fill="rgb(231,47,47)" fg:x="73189" fg:w="99"/><text x="63.7309%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (52 samples, 0.05%)</title><rect x="63.5216%" y="629" width="0.0451%" height="15" fill="rgb(211,192,36)" fg:x="73236" fg:w="52"/><text x="63.7716%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (52 samples, 0.05%)</title><rect x="63.5216%" y="613" width="0.0451%" height="15" fill="rgb(229,156,32)" fg:x="73236" fg:w="52"/><text x="63.7716%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,494 samples, 9.97%)</title><rect x="53.7847%" y="1045" width="9.9694%" height="15" fill="rgb(248,213,20)" fg:x="62010" fg:w="11494"/><text x="54.0347%" y="1055.50">tremor_runtime..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,447 samples, 7.33%)</title><rect x="56.4275%" y="1029" width="7.3266%" height="15" fill="rgb(217,64,7)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="1039.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,447 samples, 7.33%)</title><rect x="56.4275%" y="1013" width="7.3266%" height="15" fill="rgb(232,142,8)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="1023.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,447 samples, 7.33%)</title><rect x="56.4275%" y="997" width="7.3266%" height="15" fill="rgb(224,92,44)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="1007.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,447 samples, 7.33%)</title><rect x="56.4275%" y="981" width="7.3266%" height="15" fill="rgb(214,169,17)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="991.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,447 samples, 7.33%)</title><rect x="56.4275%" y="965" width="7.3266%" height="15" fill="rgb(210,59,37)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="975.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,447 samples, 7.33%)</title><rect x="56.4275%" y="949" width="7.3266%" height="15" fill="rgb(214,116,48)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="959.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,447 samples, 7.33%)</title><rect x="56.4275%" y="933" width="7.3266%" height="15" fill="rgb(244,191,6)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="943.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,447 samples, 7.33%)</title><rect x="56.4275%" y="917" width="7.3266%" height="15" fill="rgb(241,50,52)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="927.50">std::panic..</text></g><g><title>std::panicking::try (8,447 samples, 7.33%)</title><rect x="56.4275%" y="901" width="7.3266%" height="15" fill="rgb(236,75,39)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="911.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,447 samples, 7.33%)</title><rect x="56.4275%" y="885" width="7.3266%" height="15" fill="rgb(236,99,0)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="895.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,447 samples, 7.33%)</title><rect x="56.4275%" y="869" width="7.3266%" height="15" fill="rgb(207,202,15)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="879.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,447 samples, 7.33%)</title><rect x="56.4275%" y="853" width="7.3266%" height="15" fill="rgb(233,207,14)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="863.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,447 samples, 7.33%)</title><rect x="56.4275%" y="837" width="7.3266%" height="15" fill="rgb(226,27,51)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="847.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,447 samples, 7.33%)</title><rect x="56.4275%" y="821" width="7.3266%" height="15" fill="rgb(206,104,42)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="831.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,447 samples, 7.33%)</title><rect x="56.4275%" y="805" width="7.3266%" height="15" fill="rgb(212,225,4)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="815.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,447 samples, 7.33%)</title><rect x="56.4275%" y="789" width="7.3266%" height="15" fill="rgb(233,96,42)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="799.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,447 samples, 7.33%)</title><rect x="56.4275%" y="773" width="7.3266%" height="15" fill="rgb(229,21,32)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="783.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (8,447 samples, 7.33%)</title><rect x="56.4275%" y="757" width="7.3266%" height="15" fill="rgb(226,216,24)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="767.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (8,447 samples, 7.33%)</title><rect x="56.4275%" y="741" width="7.3266%" height="15" fill="rgb(221,163,17)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="751.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (8,447 samples, 7.33%)</title><rect x="56.4275%" y="725" width="7.3266%" height="15" fill="rgb(216,216,42)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="735.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (8,447 samples, 7.33%)</title><rect x="56.4275%" y="709" width="7.3266%" height="15" fill="rgb(240,118,7)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="719.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (8,447 samples, 7.33%)</title><rect x="56.4275%" y="693" width="7.3266%" height="15" fill="rgb(221,67,37)" fg:x="65057" fg:w="8447"/><text x="56.6775%" y="703.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (406 samples, 0.35%)</title><rect x="63.4019%" y="677" width="0.3521%" height="15" fill="rgb(241,32,44)" fg:x="73098" fg:w="406"/><text x="63.6519%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (347 samples, 0.30%)</title><rect x="63.4531%" y="661" width="0.3010%" height="15" fill="rgb(235,204,43)" fg:x="73157" fg:w="347"/><text x="63.7031%" y="671.50"></text></g><g><title>std::time::SystemTime::now (216 samples, 0.19%)</title><rect x="63.5667%" y="645" width="0.1873%" height="15" fill="rgb(213,116,10)" fg:x="73288" fg:w="216"/><text x="63.8167%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (216 samples, 0.19%)</title><rect x="63.5667%" y="629" width="0.1873%" height="15" fill="rgb(239,15,48)" fg:x="73288" fg:w="216"/><text x="63.8167%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (216 samples, 0.19%)</title><rect x="63.5667%" y="613" width="0.1873%" height="15" fill="rgb(207,123,36)" fg:x="73288" fg:w="216"/><text x="63.8167%" y="623.50"></text></g><g><title>__clock_gettime (171 samples, 0.15%)</title><rect x="63.6058%" y="597" width="0.1483%" height="15" fill="rgb(209,103,30)" fg:x="73333" fg:w="171"/><text x="63.8558%" y="607.50"></text></g><g><title>__vdso_clock_gettime (168 samples, 0.15%)</title><rect x="63.6084%" y="581" width="0.1457%" height="15" fill="rgb(238,100,19)" fg:x="73336" fg:w="168"/><text x="63.8584%" y="591.50"></text></g><g><title>[[vdso]] (144 samples, 0.12%)</title><rect x="63.6292%" y="565" width="0.1249%" height="15" fill="rgb(244,30,14)" fg:x="73360" fg:w="144"/><text x="63.8792%" y="575.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="63.8729%" y="693" width="0.0468%" height="15" fill="rgb(249,174,6)" fg:x="73641" fg:w="54"/><text x="64.1229%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (195 samples, 0.17%)</title><rect x="63.9258%" y="693" width="0.1691%" height="15" fill="rgb(235,213,41)" fg:x="73702" fg:w="195"/><text x="64.1758%" y="703.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (389 samples, 0.34%)</title><rect x="63.7636%" y="901" width="0.3374%" height="15" fill="rgb(213,118,6)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="911.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (389 samples, 0.34%)</title><rect x="63.7636%" y="885" width="0.3374%" height="15" fill="rgb(235,44,51)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (389 samples, 0.34%)</title><rect x="63.7636%" y="869" width="0.3374%" height="15" fill="rgb(217,9,53)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (389 samples, 0.34%)</title><rect x="63.7636%" y="853" width="0.3374%" height="15" fill="rgb(237,172,34)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (389 samples, 0.34%)</title><rect x="63.7636%" y="837" width="0.3374%" height="15" fill="rgb(206,206,11)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (389 samples, 0.34%)</title><rect x="63.7636%" y="821" width="0.3374%" height="15" fill="rgb(214,149,29)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (389 samples, 0.34%)</title><rect x="63.7636%" y="805" width="0.3374%" height="15" fill="rgb(208,123,3)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (389 samples, 0.34%)</title><rect x="63.7636%" y="789" width="0.3374%" height="15" fill="rgb(229,126,4)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="799.50"></text></g><g><title>alloc::alloc::Global::grow_impl (389 samples, 0.34%)</title><rect x="63.7636%" y="773" width="0.3374%" height="15" fill="rgb(222,92,36)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="783.50"></text></g><g><title>alloc::alloc::realloc (389 samples, 0.34%)</title><rect x="63.7636%" y="757" width="0.3374%" height="15" fill="rgb(216,39,41)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="767.50"></text></g><g><title>__rg_realloc (389 samples, 0.34%)</title><rect x="63.7636%" y="741" width="0.3374%" height="15" fill="rgb(253,127,28)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (389 samples, 0.34%)</title><rect x="63.7636%" y="725" width="0.3374%" height="15" fill="rgb(249,152,51)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="735.50"></text></g><g><title>sn_rust_realloc (389 samples, 0.34%)</title><rect x="63.7636%" y="709" width="0.3374%" height="15" fill="rgb(209,123,42)" fg:x="73515" fg:w="389"/><text x="64.0136%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (108 samples, 0.09%)</title><rect x="64.8504%" y="885" width="0.0937%" height="15" fill="rgb(241,118,22)" fg:x="74768" fg:w="108"/><text x="65.1004%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (108 samples, 0.09%)</title><rect x="64.8504%" y="869" width="0.0937%" height="15" fill="rgb(208,25,7)" fg:x="74768" fg:w="108"/><text x="65.1004%" y="879.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,027 samples, 0.89%)</title><rect x="65.1245%" y="725" width="0.8908%" height="15" fill="rgb(243,144,39)" fg:x="75084" fg:w="1027"/><text x="65.3745%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,254 samples, 1.09%)</title><rect x="64.9562%" y="821" width="1.0877%" height="15" fill="rgb(250,50,5)" fg:x="74890" fg:w="1254"/><text x="65.2062%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,254 samples, 1.09%)</title><rect x="64.9562%" y="805" width="1.0877%" height="15" fill="rgb(207,67,11)" fg:x="74890" fg:w="1254"/><text x="65.2062%" y="815.50"></text></g><g><title>alloc::alloc::alloc (1,254 samples, 1.09%)</title><rect x="64.9562%" y="789" width="1.0877%" height="15" fill="rgb(245,204,40)" fg:x="74890" fg:w="1254"/><text x="65.2062%" y="799.50"></text></g><g><title>__rg_alloc (1,254 samples, 1.09%)</title><rect x="64.9562%" y="773" width="1.0877%" height="15" fill="rgb(238,228,24)" fg:x="74890" fg:w="1254"/><text x="65.2062%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,254 samples, 1.09%)</title><rect x="64.9562%" y="757" width="1.0877%" height="15" fill="rgb(217,116,22)" fg:x="74890" fg:w="1254"/><text x="65.2062%" y="767.50"></text></g><g><title>sn_rust_alloc (1,241 samples, 1.08%)</title><rect x="64.9675%" y="741" width="1.0764%" height="15" fill="rgb(234,98,12)" fg:x="74903" fg:w="1241"/><text x="65.2175%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (33 samples, 0.03%)</title><rect x="66.0153%" y="725" width="0.0286%" height="15" fill="rgb(242,170,50)" fg:x="76111" fg:w="33"/><text x="66.2653%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,272 samples, 1.10%)</title><rect x="64.9441%" y="885" width="1.1033%" height="15" fill="rgb(235,7,5)" fg:x="74876" fg:w="1272"/><text x="65.1941%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,272 samples, 1.10%)</title><rect x="64.9441%" y="869" width="1.1033%" height="15" fill="rgb(241,114,28)" fg:x="74876" fg:w="1272"/><text x="65.1941%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,267 samples, 1.10%)</title><rect x="64.9484%" y="853" width="1.0989%" height="15" fill="rgb(246,112,42)" fg:x="74881" fg:w="1267"/><text x="65.1984%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,267 samples, 1.10%)</title><rect x="64.9484%" y="837" width="1.0989%" height="15" fill="rgb(248,228,14)" fg:x="74881" fg:w="1267"/><text x="65.1984%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (91 samples, 0.08%)</title><rect x="66.0526%" y="837" width="0.0789%" height="15" fill="rgb(208,133,18)" fg:x="76154" fg:w="91"/><text x="66.3026%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (91 samples, 0.08%)</title><rect x="66.0526%" y="821" width="0.0789%" height="15" fill="rgb(207,35,49)" fg:x="76154" fg:w="91"/><text x="66.3026%" y="831.50"></text></g><g><title>__rg_dealloc (91 samples, 0.08%)</title><rect x="66.0526%" y="805" width="0.0789%" height="15" fill="rgb(205,68,36)" fg:x="76154" fg:w="91"/><text x="66.3026%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (91 samples, 0.08%)</title><rect x="66.0526%" y="789" width="0.0789%" height="15" fill="rgb(245,62,40)" fg:x="76154" fg:w="91"/><text x="66.3026%" y="799.50"></text></g><g><title>sn_rust_dealloc (88 samples, 0.08%)</title><rect x="66.0552%" y="773" width="0.0763%" height="15" fill="rgb(228,27,24)" fg:x="76157" fg:w="88"/><text x="66.3052%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (103 samples, 0.09%)</title><rect x="66.0474%" y="885" width="0.0893%" height="15" fill="rgb(253,19,12)" fg:x="76148" fg:w="103"/><text x="66.2974%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (103 samples, 0.09%)</title><rect x="66.0474%" y="869" width="0.0893%" height="15" fill="rgb(232,28,20)" fg:x="76148" fg:w="103"/><text x="66.2974%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (103 samples, 0.09%)</title><rect x="66.0474%" y="853" width="0.0893%" height="15" fill="rgb(218,35,51)" fg:x="76148" fg:w="103"/><text x="66.2974%" y="863.50"></text></g><g><title>core::ptr::write (511 samples, 0.44%)</title><rect x="66.1367%" y="885" width="0.4432%" height="15" fill="rgb(212,90,40)" fg:x="76251" fg:w="511"/><text x="66.3867%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="66.5799%" y="885" width="0.0165%" height="15" fill="rgb(220,172,12)" fg:x="76762" fg:w="19"/><text x="66.8299%" y="895.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="66.5799%" y="869" width="0.0165%" height="15" fill="rgb(226,159,20)" fg:x="76762" fg:w="19"/><text x="66.8299%" y="879.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (19 samples, 0.02%)</title><rect x="66.5799%" y="853" width="0.0165%" height="15" fill="rgb(234,205,16)" fg:x="76762" fg:w="19"/><text x="66.8299%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (19 samples, 0.02%)</title><rect x="66.5799%" y="837" width="0.0165%" height="15" fill="rgb(207,9,39)" fg:x="76762" fg:w="19"/><text x="66.8299%" y="847.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (239 samples, 0.21%)</title><rect x="66.7092%" y="869" width="0.2073%" height="15" fill="rgb(249,143,15)" fg:x="76911" fg:w="239"/><text x="66.9592%" y="879.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (73 samples, 0.06%)</title><rect x="66.9165%" y="869" width="0.0633%" height="15" fill="rgb(253,133,29)" fg:x="77150" fg:w="73"/><text x="67.1665%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.06%)</title><rect x="66.9165%" y="853" width="0.0633%" height="15" fill="rgb(221,187,0)" fg:x="77150" fg:w="73"/><text x="67.1665%" y="863.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (62 samples, 0.05%)</title><rect x="66.9798%" y="869" width="0.0538%" height="15" fill="rgb(205,204,26)" fg:x="77223" fg:w="62"/><text x="67.2298%" y="879.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (554 samples, 0.48%)</title><rect x="66.5964%" y="885" width="0.4805%" height="15" fill="rgb(224,68,54)" fg:x="76781" fg:w="554"/><text x="66.8464%" y="895.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (50 samples, 0.04%)</title><rect x="67.0336%" y="869" width="0.0434%" height="15" fill="rgb(209,67,4)" fg:x="77285" fg:w="50"/><text x="67.2836%" y="879.50"></text></g><g><title>simd_json::numberparse::is_integer (19 samples, 0.02%)</title><rect x="67.3042%" y="869" width="0.0165%" height="15" fill="rgb(228,229,18)" fg:x="77597" fg:w="19"/><text x="67.5542%" y="879.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (19 samples, 0.02%)</title><rect x="67.3042%" y="853" width="0.0165%" height="15" fill="rgb(231,89,13)" fg:x="77597" fg:w="19"/><text x="67.5542%" y="863.50"></text></g><g><title>core::ops::range::RangeBounds::contains (19 samples, 0.02%)</title><rect x="67.3042%" y="837" width="0.0165%" height="15" fill="rgb(210,182,18)" fg:x="77597" fg:w="19"/><text x="67.5542%" y="847.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (289 samples, 0.25%)</title><rect x="67.0769%" y="885" width="0.2507%" height="15" fill="rgb(240,105,2)" fg:x="77335" fg:w="289"/><text x="67.3269%" y="895.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (4,120 samples, 3.57%)</title><rect x="63.7636%" y="917" width="3.5735%" height="15" fill="rgb(207,170,50)" fg:x="73515" fg:w="4120"/><text x="64.0136%" y="927.50">simd..</text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (3,731 samples, 3.24%)</title><rect x="64.1010%" y="901" width="3.2361%" height="15" fill="rgb(232,133,24)" fg:x="73904" fg:w="3731"/><text x="64.3510%" y="911.50">sim..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (30 samples, 0.03%)</title><rect x="68.3008%" y="789" width="0.0260%" height="15" fill="rgb(235,166,27)" fg:x="78746" fg:w="30"/><text x="68.5508%" y="799.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (30 samples, 0.03%)</title><rect x="68.3008%" y="773" width="0.0260%" height="15" fill="rgb(209,19,13)" fg:x="78746" fg:w="30"/><text x="68.5508%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (30 samples, 0.03%)</title><rect x="68.3008%" y="757" width="0.0260%" height="15" fill="rgb(226,79,39)" fg:x="78746" fg:w="30"/><text x="68.5508%" y="767.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (13 samples, 0.01%)</title><rect x="68.9764%" y="645" width="0.0113%" height="15" fill="rgb(222,163,10)" fg:x="79525" fg:w="13"/><text x="69.2264%" y="655.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (13 samples, 0.01%)</title><rect x="68.9764%" y="629" width="0.0113%" height="15" fill="rgb(214,44,19)" fg:x="79525" fg:w="13"/><text x="69.2264%" y="639.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (13 samples, 0.01%)</title><rect x="68.9764%" y="613" width="0.0113%" height="15" fill="rgb(210,217,13)" fg:x="79525" fg:w="13"/><text x="69.2264%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (13 samples, 0.01%)</title><rect x="68.9764%" y="597" width="0.0113%" height="15" fill="rgb(237,61,54)" fg:x="79525" fg:w="13"/><text x="69.2264%" y="607.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (13 samples, 0.01%)</title><rect x="68.9764%" y="581" width="0.0113%" height="15" fill="rgb(226,184,24)" fg:x="79525" fg:w="13"/><text x="69.2264%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.08%)</title><rect x="68.9877%" y="645" width="0.0763%" height="15" fill="rgb(223,226,4)" fg:x="79538" fg:w="88"/><text x="69.2377%" y="655.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (36 samples, 0.03%)</title><rect x="69.0640%" y="629" width="0.0312%" height="15" fill="rgb(210,26,41)" fg:x="79626" fg:w="36"/><text x="69.3140%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (36 samples, 0.03%)</title><rect x="69.0953%" y="629" width="0.0312%" height="15" fill="rgb(220,221,6)" fg:x="79662" fg:w="36"/><text x="69.3453%" y="639.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (195 samples, 0.17%)</title><rect x="69.0640%" y="645" width="0.1691%" height="15" fill="rgb(225,89,49)" fg:x="79626" fg:w="195"/><text x="69.3140%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (123 samples, 0.11%)</title><rect x="69.1265%" y="629" width="0.1067%" height="15" fill="rgb(218,70,45)" fg:x="79698" fg:w="123"/><text x="69.3765%" y="639.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (394 samples, 0.34%)</title><rect x="68.8923%" y="693" width="0.3417%" height="15" fill="rgb(238,166,21)" fg:x="79428" fg:w="394"/><text x="69.1423%" y="703.50"></text></g><g><title>fxhash::write (394 samples, 0.34%)</title><rect x="68.8923%" y="677" width="0.3417%" height="15" fill="rgb(224,141,44)" fg:x="79428" fg:w="394"/><text x="69.1423%" y="687.50"></text></g><g><title>fxhash::write64 (394 samples, 0.34%)</title><rect x="68.8923%" y="661" width="0.3417%" height="15" fill="rgb(230,12,49)" fg:x="79428" fg:w="394"/><text x="69.1423%" y="671.50"></text></g><g><title>hashbrown::map::make_insert_hash (627 samples, 0.54%)</title><rect x="68.8047%" y="757" width="0.5438%" height="15" fill="rgb(212,174,12)" fg:x="79327" fg:w="627"/><text x="69.0547%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (560 samples, 0.49%)</title><rect x="68.8628%" y="741" width="0.4857%" height="15" fill="rgb(246,67,9)" fg:x="79394" fg:w="560"/><text x="69.1128%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (535 samples, 0.46%)</title><rect x="68.8845%" y="725" width="0.4640%" height="15" fill="rgb(239,35,23)" fg:x="79419" fg:w="535"/><text x="69.1345%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (526 samples, 0.46%)</title><rect x="68.8923%" y="709" width="0.4562%" height="15" fill="rgb(211,167,0)" fg:x="79428" fg:w="526"/><text x="69.1423%" y="719.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (132 samples, 0.11%)</title><rect x="69.2340%" y="693" width="0.1145%" height="15" fill="rgb(225,119,45)" fg:x="79822" fg:w="132"/><text x="69.4840%" y="703.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (132 samples, 0.11%)</title><rect x="69.2340%" y="677" width="0.1145%" height="15" fill="rgb(210,162,6)" fg:x="79822" fg:w="132"/><text x="69.4840%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (63 samples, 0.05%)</title><rect x="69.2939%" y="661" width="0.0546%" height="15" fill="rgb(208,118,35)" fg:x="79891" fg:w="63"/><text x="69.5439%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (15 samples, 0.01%)</title><rect x="69.3581%" y="693" width="0.0130%" height="15" fill="rgb(239,4,53)" fg:x="79965" fg:w="15"/><text x="69.6081%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="69.3581%" y="677" width="0.0130%" height="15" fill="rgb(213,130,21)" fg:x="79965" fg:w="15"/><text x="69.6081%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (20 samples, 0.02%)</title><rect x="69.3581%" y="709" width="0.0173%" height="15" fill="rgb(235,148,0)" fg:x="79965" fg:w="20"/><text x="69.6081%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (152 samples, 0.13%)</title><rect x="69.3754%" y="709" width="0.1318%" height="15" fill="rgb(244,224,18)" fg:x="79985" fg:w="152"/><text x="69.6254%" y="719.50"></text></g><g><title>hashbrown::raw::inner::h2 (21 samples, 0.02%)</title><rect x="69.5073%" y="709" width="0.0182%" height="15" fill="rgb(211,214,4)" fg:x="80137" fg:w="21"/><text x="69.7573%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (69 samples, 0.06%)</title><rect x="69.5255%" y="709" width="0.0598%" height="15" fill="rgb(206,119,25)" fg:x="80158" fg:w="69"/><text x="69.7755%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (69 samples, 0.06%)</title><rect x="69.5255%" y="693" width="0.0598%" height="15" fill="rgb(243,93,47)" fg:x="80158" fg:w="69"/><text x="69.7755%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (69 samples, 0.06%)</title><rect x="69.5255%" y="677" width="0.0598%" height="15" fill="rgb(224,194,6)" fg:x="80158" fg:w="69"/><text x="69.7755%" y="687.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (121 samples, 0.10%)</title><rect x="69.5853%" y="709" width="0.1049%" height="15" fill="rgb(243,229,6)" fg:x="80227" fg:w="121"/><text x="69.8353%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (121 samples, 0.10%)</title><rect x="69.5853%" y="693" width="0.1049%" height="15" fill="rgb(207,23,50)" fg:x="80227" fg:w="121"/><text x="69.8353%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (462 samples, 0.40%)</title><rect x="69.3485%" y="757" width="0.4007%" height="15" fill="rgb(253,192,32)" fg:x="79954" fg:w="462"/><text x="69.5985%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (462 samples, 0.40%)</title><rect x="69.3485%" y="741" width="0.4007%" height="15" fill="rgb(213,21,6)" fg:x="79954" fg:w="462"/><text x="69.5985%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (462 samples, 0.40%)</title><rect x="69.3485%" y="725" width="0.4007%" height="15" fill="rgb(243,151,13)" fg:x="79954" fg:w="462"/><text x="69.5985%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (68 samples, 0.06%)</title><rect x="69.6903%" y="709" width="0.0590%" height="15" fill="rgb(233,165,41)" fg:x="80348" fg:w="68"/><text x="69.9403%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (68 samples, 0.06%)</title><rect x="69.6903%" y="693" width="0.0590%" height="15" fill="rgb(246,176,45)" fg:x="80348" fg:w="68"/><text x="69.9403%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (68 samples, 0.06%)</title><rect x="69.6903%" y="677" width="0.0590%" height="15" fill="rgb(217,170,52)" fg:x="80348" fg:w="68"/><text x="69.9403%" y="687.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (228 samples, 0.20%)</title><rect x="69.7891%" y="741" width="0.1978%" height="15" fill="rgb(214,203,54)" fg:x="80462" fg:w="228"/><text x="70.0391%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (228 samples, 0.20%)</title><rect x="69.7891%" y="725" width="0.1978%" height="15" fill="rgb(248,215,49)" fg:x="80462" fg:w="228"/><text x="70.0391%" y="735.50"></text></g><g><title>core::ptr::write (228 samples, 0.20%)</title><rect x="69.7891%" y="709" width="0.1978%" height="15" fill="rgb(208,46,10)" fg:x="80462" fg:w="228"/><text x="70.0391%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (15 samples, 0.01%)</title><rect x="69.9869%" y="741" width="0.0130%" height="15" fill="rgb(254,5,31)" fg:x="80690" fg:w="15"/><text x="70.2369%" y="751.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (15 samples, 0.01%)</title><rect x="69.9869%" y="725" width="0.0130%" height="15" fill="rgb(222,104,33)" fg:x="80690" fg:w="15"/><text x="70.2369%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15 samples, 0.01%)</title><rect x="69.9869%" y="709" width="0.0130%" height="15" fill="rgb(248,49,16)" fg:x="80690" fg:w="15"/><text x="70.2369%" y="719.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (15 samples, 0.01%)</title><rect x="69.9869%" y="693" width="0.0130%" height="15" fill="rgb(232,198,41)" fg:x="80690" fg:w="15"/><text x="70.2369%" y="703.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (15 samples, 0.01%)</title><rect x="69.9869%" y="677" width="0.0130%" height="15" fill="rgb(214,125,3)" fg:x="80690" fg:w="15"/><text x="70.2369%" y="687.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (44 samples, 0.04%)</title><rect x="70.1812%" y="725" width="0.0382%" height="15" fill="rgb(229,220,28)" fg:x="80914" fg:w="44"/><text x="70.4312%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (17 samples, 0.01%)</title><rect x="70.2194%" y="725" width="0.0147%" height="15" fill="rgb(222,64,37)" fg:x="80958" fg:w="17"/><text x="70.4694%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (17 samples, 0.01%)</title><rect x="70.2194%" y="709" width="0.0147%" height="15" fill="rgb(249,184,13)" fg:x="80958" fg:w="17"/><text x="70.4694%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="70.2194%" y="693" width="0.0147%" height="15" fill="rgb(252,176,6)" fg:x="80958" fg:w="17"/><text x="70.4694%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (283 samples, 0.25%)</title><rect x="69.9999%" y="741" width="0.2455%" height="15" fill="rgb(228,153,7)" fg:x="80705" fg:w="283"/><text x="70.2499%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (13 samples, 0.01%)</title><rect x="70.2341%" y="725" width="0.0113%" height="15" fill="rgb(242,193,5)" fg:x="80975" fg:w="13"/><text x="70.4841%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.01%)</title><rect x="70.2341%" y="709" width="0.0113%" height="15" fill="rgb(232,140,9)" fg:x="80975" fg:w="13"/><text x="70.4841%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (3,457 samples, 3.00%)</title><rect x="67.3371%" y="885" width="2.9984%" height="15" fill="rgb(213,222,16)" fg:x="77635" fg:w="3457"/><text x="67.5871%" y="895.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (3,457 samples, 3.00%)</title><rect x="67.3371%" y="869" width="2.9984%" height="15" fill="rgb(222,75,50)" fg:x="77635" fg:w="3457"/><text x="67.5871%" y="879.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (3,457 samples, 3.00%)</title><rect x="67.3371%" y="853" width="2.9984%" height="15" fill="rgb(205,180,2)" fg:x="77635" fg:w="3457"/><text x="67.5871%" y="863.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (3,029 samples, 2.63%)</title><rect x="67.7084%" y="837" width="2.6272%" height="15" fill="rgb(216,34,7)" fg:x="78063" fg:w="3029"/><text x="67.9584%" y="847.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (3,029 samples, 2.63%)</title><rect x="67.7084%" y="821" width="2.6272%" height="15" fill="rgb(253,16,32)" fg:x="78063" fg:w="3029"/><text x="67.9584%" y="831.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (2,853 samples, 2.47%)</title><rect x="67.8610%" y="805" width="2.4746%" height="15" fill="rgb(208,97,28)" fg:x="78239" fg:w="2853"/><text x="68.1110%" y="815.50">ab..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,316 samples, 2.01%)</title><rect x="68.3268%" y="789" width="2.0088%" height="15" fill="rgb(225,92,11)" fg:x="78776" fg:w="2316"/><text x="68.5768%" y="799.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,915 samples, 1.66%)</title><rect x="68.6746%" y="773" width="1.6610%" height="15" fill="rgb(243,38,12)" fg:x="79177" fg:w="1915"/><text x="68.9246%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (676 samples, 0.59%)</title><rect x="69.7492%" y="757" width="0.5863%" height="15" fill="rgb(208,139,16)" fg:x="80416" fg:w="676"/><text x="69.9992%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (104 samples, 0.09%)</title><rect x="70.2454%" y="741" width="0.0902%" height="15" fill="rgb(227,24,9)" fg:x="80988" fg:w="104"/><text x="70.4954%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (52 samples, 0.05%)</title><rect x="70.2905%" y="725" width="0.0451%" height="15" fill="rgb(206,62,11)" fg:x="81040" fg:w="52"/><text x="70.5405%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (52 samples, 0.05%)</title><rect x="70.2905%" y="709" width="0.0451%" height="15" fill="rgb(228,134,27)" fg:x="81040" fg:w="52"/><text x="70.5405%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (17 samples, 0.01%)</title><rect x="70.3451%" y="661" width="0.0147%" height="15" fill="rgb(205,55,33)" fg:x="81103" fg:w="17"/><text x="70.5951%" y="671.50"></text></g><g><title>core::intrinsics::write_bytes (17 samples, 0.01%)</title><rect x="70.3451%" y="645" width="0.0147%" height="15" fill="rgb(243,75,43)" fg:x="81103" fg:w="17"/><text x="70.5951%" y="655.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="70.3477%" y="629" width="0.0121%" height="15" fill="rgb(223,27,42)" fg:x="81106" fg:w="14"/><text x="70.5977%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (560 samples, 0.49%)</title><rect x="70.4622%" y="549" width="0.4857%" height="15" fill="rgb(232,189,33)" fg:x="81238" fg:w="560"/><text x="70.7122%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.02%)</title><rect x="70.9479%" y="549" width="0.0208%" height="15" fill="rgb(210,9,39)" fg:x="81798" fg:w="24"/><text x="71.1979%" y="559.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (702 samples, 0.61%)</title><rect x="70.3659%" y="645" width="0.6089%" height="15" fill="rgb(242,85,26)" fg:x="81127" fg:w="702"/><text x="70.6159%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (702 samples, 0.61%)</title><rect x="70.3659%" y="629" width="0.6089%" height="15" fill="rgb(248,44,4)" fg:x="81127" fg:w="702"/><text x="70.6159%" y="639.50"></text></g><g><title>alloc::alloc::alloc (702 samples, 0.61%)</title><rect x="70.3659%" y="613" width="0.6089%" height="15" fill="rgb(250,96,46)" fg:x="81127" fg:w="702"/><text x="70.6159%" y="623.50"></text></g><g><title>__rg_alloc (702 samples, 0.61%)</title><rect x="70.3659%" y="597" width="0.6089%" height="15" fill="rgb(229,116,26)" fg:x="81127" fg:w="702"/><text x="70.6159%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (702 samples, 0.61%)</title><rect x="70.3659%" y="581" width="0.6089%" height="15" fill="rgb(246,94,34)" fg:x="81127" fg:w="702"/><text x="70.6159%" y="591.50"></text></g><g><title>sn_rust_alloc (702 samples, 0.61%)</title><rect x="70.3659%" y="565" width="0.6089%" height="15" fill="rgb(251,73,21)" fg:x="81127" fg:w="702"/><text x="70.6159%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (710 samples, 0.62%)</title><rect x="70.3599%" y="661" width="0.6158%" height="15" fill="rgb(254,121,25)" fg:x="81120" fg:w="710"/><text x="70.6099%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (750 samples, 0.65%)</title><rect x="70.3356%" y="885" width="0.6505%" height="15" fill="rgb(215,161,49)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (750 samples, 0.65%)</title><rect x="70.3356%" y="869" width="0.6505%" height="15" fill="rgb(221,43,13)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (750 samples, 0.65%)</title><rect x="70.3356%" y="853" width="0.6505%" height="15" fill="rgb(249,5,37)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (750 samples, 0.65%)</title><rect x="70.3356%" y="837" width="0.6505%" height="15" fill="rgb(226,25,44)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (750 samples, 0.65%)</title><rect x="70.3356%" y="821" width="0.6505%" height="15" fill="rgb(238,189,16)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (750 samples, 0.65%)</title><rect x="70.3356%" y="805" width="0.6505%" height="15" fill="rgb(251,186,8)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (750 samples, 0.65%)</title><rect x="70.3356%" y="789" width="0.6505%" height="15" fill="rgb(254,34,31)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (750 samples, 0.65%)</title><rect x="70.3356%" y="773" width="0.6505%" height="15" fill="rgb(225,215,27)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (750 samples, 0.65%)</title><rect x="70.3356%" y="757" width="0.6505%" height="15" fill="rgb(221,192,48)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (750 samples, 0.65%)</title><rect x="70.3356%" y="741" width="0.6505%" height="15" fill="rgb(219,137,20)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (750 samples, 0.65%)</title><rect x="70.3356%" y="725" width="0.6505%" height="15" fill="rgb(219,84,11)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (750 samples, 0.65%)</title><rect x="70.3356%" y="709" width="0.6505%" height="15" fill="rgb(224,10,23)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (750 samples, 0.65%)</title><rect x="70.3356%" y="693" width="0.6505%" height="15" fill="rgb(248,22,39)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (750 samples, 0.65%)</title><rect x="70.3356%" y="677" width="0.6505%" height="15" fill="rgb(212,154,20)" fg:x="81092" fg:w="750"/><text x="70.5856%" y="687.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (12 samples, 0.01%)</title><rect x="70.9757%" y="661" width="0.0104%" height="15" fill="rgb(236,199,50)" fg:x="81830" fg:w="12"/><text x="71.2257%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (160 samples, 0.14%)</title><rect x="71.0737%" y="677" width="0.1388%" height="15" fill="rgb(211,9,17)" fg:x="81943" fg:w="160"/><text x="71.3237%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (268 samples, 0.23%)</title><rect x="70.9861%" y="853" width="0.2325%" height="15" fill="rgb(243,216,36)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (268 samples, 0.23%)</title><rect x="70.9861%" y="837" width="0.2325%" height="15" fill="rgb(250,2,10)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (268 samples, 0.23%)</title><rect x="70.9861%" y="821" width="0.2325%" height="15" fill="rgb(226,50,48)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (268 samples, 0.23%)</title><rect x="70.9861%" y="805" width="0.2325%" height="15" fill="rgb(243,81,16)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (268 samples, 0.23%)</title><rect x="70.9861%" y="789" width="0.2325%" height="15" fill="rgb(250,14,2)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (268 samples, 0.23%)</title><rect x="70.9861%" y="773" width="0.2325%" height="15" fill="rgb(233,135,29)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (268 samples, 0.23%)</title><rect x="70.9861%" y="757" width="0.2325%" height="15" fill="rgb(224,64,43)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="767.50"></text></g><g><title>alloc::alloc::alloc (268 samples, 0.23%)</title><rect x="70.9861%" y="741" width="0.2325%" height="15" fill="rgb(238,84,13)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="751.50"></text></g><g><title>__rg_alloc (268 samples, 0.23%)</title><rect x="70.9861%" y="725" width="0.2325%" height="15" fill="rgb(253,48,26)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (268 samples, 0.23%)</title><rect x="70.9861%" y="709" width="0.2325%" height="15" fill="rgb(205,223,31)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="719.50"></text></g><g><title>sn_rust_alloc (268 samples, 0.23%)</title><rect x="70.9861%" y="693" width="0.2325%" height="15" fill="rgb(221,41,32)" fg:x="81842" fg:w="268"/><text x="71.2361%" y="703.50"></text></g><g><title>simd_json::Deserializer::next_ (111 samples, 0.10%)</title><rect x="71.2420%" y="837" width="0.0963%" height="15" fill="rgb(213,158,31)" fg:x="82137" fg:w="111"/><text x="71.4920%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.03%)</title><rect x="71.3114%" y="821" width="0.0269%" height="15" fill="rgb(245,126,43)" fg:x="82217" fg:w="31"/><text x="71.5614%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (31 samples, 0.03%)</title><rect x="71.3114%" y="805" width="0.0269%" height="15" fill="rgb(227,7,22)" fg:x="82217" fg:w="31"/><text x="71.5614%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (8,763 samples, 7.60%)</title><rect x="63.7593%" y="1045" width="7.6006%" height="15" fill="rgb(252,90,44)" fg:x="73510" fg:w="8763"/><text x="64.0093%" y="1055.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,759 samples, 7.60%)</title><rect x="63.7628%" y="1029" width="7.5972%" height="15" fill="rgb(253,91,0)" fg:x="73514" fg:w="8759"/><text x="64.0128%" y="1039.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (8,759 samples, 7.60%)</title><rect x="63.7628%" y="1013" width="7.5972%" height="15" fill="rgb(252,175,49)" fg:x="73514" fg:w="8759"/><text x="64.0128%" y="1023.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::source::build_events (8,758 samples, 7.60%)</title><rect x="63.7636%" y="997" width="7.5963%" height="15" fill="rgb(246,150,1)" fg:x="73515" fg:w="8758"/><text x="64.0136%" y="1007.50">tremor_run..</text></g><g><title>tremor_script::srs::EventPayload::try_new (8,758 samples, 7.60%)</title><rect x="63.7636%" y="981" width="7.5963%" height="15" fill="rgb(241,192,25)" fg:x="73515" fg:w="8758"/><text x="64.0136%" y="991.50">tremor_scr..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (8,758 samples, 7.60%)</title><rect x="63.7636%" y="965" width="7.5963%" height="15" fill="rgb(239,187,11)" fg:x="73515" fg:w="8758"/><text x="64.0136%" y="975.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (8,758 samples, 7.60%)</title><rect x="63.7636%" y="949" width="7.5963%" height="15" fill="rgb(218,202,51)" fg:x="73515" fg:w="8758"/><text x="64.0136%" y="959.50">&lt;tremor_ru..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (8,758 samples, 7.60%)</title><rect x="63.7636%" y="933" width="7.5963%" height="15" fill="rgb(225,176,8)" fg:x="73515" fg:w="8758"/><text x="64.0136%" y="943.50">tremor_val..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (4,638 samples, 4.02%)</title><rect x="67.3371%" y="917" width="4.0228%" height="15" fill="rgb(219,122,41)" fg:x="77635" fg:w="4638"/><text x="67.5871%" y="927.50">trem..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (4,638 samples, 4.02%)</title><rect x="67.3371%" y="901" width="4.0228%" height="15" fill="rgb(248,140,20)" fg:x="77635" fg:w="4638"/><text x="67.5871%" y="911.50">trem..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (431 samples, 0.37%)</title><rect x="70.9861%" y="885" width="0.3738%" height="15" fill="rgb(245,41,37)" fg:x="81842" fg:w="431"/><text x="71.2361%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (431 samples, 0.37%)</title><rect x="70.9861%" y="869" width="0.3738%" height="15" fill="rgb(235,82,39)" fg:x="81842" fg:w="431"/><text x="71.2361%" y="879.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (163 samples, 0.14%)</title><rect x="71.2185%" y="853" width="0.1414%" height="15" fill="rgb(230,108,42)" fg:x="82110" fg:w="163"/><text x="71.4685%" y="863.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (25 samples, 0.02%)</title><rect x="71.3382%" y="837" width="0.0217%" height="15" fill="rgb(215,150,50)" fg:x="82248" fg:w="25"/><text x="71.5882%" y="847.50"></text></g><g><title>tremor_value::value::Value::String (25 samples, 0.02%)</title><rect x="71.3382%" y="821" width="0.0217%" height="15" fill="rgb(233,212,5)" fg:x="82248" fg:w="25"/><text x="71.5882%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.01%)</title><rect x="71.4900%" y="869" width="0.0147%" height="15" fill="rgb(245,80,22)" fg:x="82423" fg:w="17"/><text x="71.7400%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="71.4900%" y="853" width="0.0147%" height="15" fill="rgb(238,129,16)" fg:x="82423" fg:w="17"/><text x="71.7400%" y="863.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="71.4900%" y="901" width="0.0156%" height="15" fill="rgb(240,19,0)" fg:x="82423" fg:w="18"/><text x="71.7400%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (18 samples, 0.02%)</title><rect x="71.4900%" y="885" width="0.0156%" height="15" fill="rgb(232,42,35)" fg:x="82423" fg:w="18"/><text x="71.7400%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (75 samples, 0.07%)</title><rect x="71.5343%" y="885" width="0.0651%" height="15" fill="rgb(223,130,24)" fg:x="82474" fg:w="75"/><text x="71.7843%" y="895.50"></text></g><g><title>core::mem::replace (75 samples, 0.07%)</title><rect x="71.5343%" y="869" width="0.0651%" height="15" fill="rgb(237,16,22)" fg:x="82474" fg:w="75"/><text x="71.7843%" y="879.50"></text></g><g><title>core::ptr::read (75 samples, 0.07%)</title><rect x="71.5343%" y="853" width="0.0651%" height="15" fill="rgb(248,192,20)" fg:x="82474" fg:w="75"/><text x="71.7843%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (117 samples, 0.10%)</title><rect x="71.5152%" y="901" width="0.1015%" height="15" fill="rgb(233,167,2)" fg:x="82452" fg:w="117"/><text x="71.7652%" y="911.50"></text></g><g><title>core::mem::drop (20 samples, 0.02%)</title><rect x="71.5993%" y="885" width="0.0173%" height="15" fill="rgb(252,71,44)" fg:x="82549" fg:w="20"/><text x="71.8493%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (20 samples, 0.02%)</title><rect x="71.5993%" y="869" width="0.0173%" height="15" fill="rgb(238,37,47)" fg:x="82549" fg:w="20"/><text x="71.8493%" y="879.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="71.6167%" y="901" width="0.0182%" height="15" fill="rgb(214,202,54)" fg:x="82569" fg:w="21"/><text x="71.8667%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (21 samples, 0.02%)</title><rect x="71.6167%" y="885" width="0.0182%" height="15" fill="rgb(254,165,40)" fg:x="82569" fg:w="21"/><text x="71.8667%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.02%)</title><rect x="71.6167%" y="869" width="0.0182%" height="15" fill="rgb(246,173,38)" fg:x="82569" fg:w="21"/><text x="71.8667%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="71.6167%" y="853" width="0.0182%" height="15" fill="rgb(215,3,27)" fg:x="82569" fg:w="21"/><text x="71.8667%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="71.6167%" y="837" width="0.0182%" height="15" fill="rgb(239,169,51)" fg:x="82569" fg:w="21"/><text x="71.8667%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.02%)</title><rect x="71.6175%" y="821" width="0.0173%" height="15" fill="rgb(212,5,25)" fg:x="82570" fg:w="20"/><text x="71.8675%" y="831.50"></text></g><g><title>__GI___pthread_mutex_unlock (20 samples, 0.02%)</title><rect x="71.6175%" y="805" width="0.0173%" height="15" fill="rgb(243,45,17)" fg:x="82570" fg:w="20"/><text x="71.8675%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (139 samples, 0.12%)</title><rect x="71.6349%" y="901" width="0.1206%" height="15" fill="rgb(242,97,9)" fg:x="82590" fg:w="139"/><text x="71.8849%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (132 samples, 0.11%)</title><rect x="71.6409%" y="885" width="0.1145%" height="15" fill="rgb(228,71,31)" fg:x="82597" fg:w="132"/><text x="71.8909%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 0.11%)</title><rect x="71.6409%" y="869" width="0.1145%" height="15" fill="rgb(252,184,16)" fg:x="82597" fg:w="132"/><text x="71.8909%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (121 samples, 0.10%)</title><rect x="71.6505%" y="853" width="0.1049%" height="15" fill="rgb(236,169,46)" fg:x="82608" fg:w="121"/><text x="71.9005%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (121 samples, 0.10%)</title><rect x="71.6505%" y="837" width="0.1049%" height="15" fill="rgb(207,17,47)" fg:x="82608" fg:w="121"/><text x="71.9005%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (116 samples, 0.10%)</title><rect x="71.6548%" y="821" width="0.1006%" height="15" fill="rgb(206,201,28)" fg:x="82613" fg:w="116"/><text x="71.9048%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (14 samples, 0.01%)</title><rect x="71.7563%" y="901" width="0.0121%" height="15" fill="rgb(224,184,23)" fg:x="82730" fg:w="14"/><text x="72.0063%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="71.7563%" y="885" width="0.0121%" height="15" fill="rgb(208,139,48)" fg:x="82730" fg:w="14"/><text x="72.0063%" y="895.50"></text></g><g><title>std::sync::poison::Flag::get (14 samples, 0.01%)</title><rect x="71.7763%" y="837" width="0.0121%" height="15" fill="rgb(208,130,10)" fg:x="82753" fg:w="14"/><text x="72.0263%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (14 samples, 0.01%)</title><rect x="71.7763%" y="821" width="0.0121%" height="15" fill="rgb(211,213,45)" fg:x="82753" fg:w="14"/><text x="72.0263%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="71.7771%" y="805" width="0.0113%" height="15" fill="rgb(235,100,30)" fg:x="82754" fg:w="13"/><text x="72.0271%" y="815.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="71.7763%" y="869" width="0.0208%" height="15" fill="rgb(206,144,31)" fg:x="82753" fg:w="24"/><text x="72.0263%" y="879.50"></text></g><g><title>std::sync::poison::Flag::borrow (24 samples, 0.02%)</title><rect x="71.7763%" y="853" width="0.0208%" height="15" fill="rgb(224,200,26)" fg:x="82753" fg:w="24"/><text x="72.0263%" y="863.50"></text></g><g><title>event_listener::Inner::lock (361 samples, 0.31%)</title><rect x="71.7685%" y="901" width="0.3131%" height="15" fill="rgb(247,104,53)" fg:x="82744" fg:w="361"/><text x="72.0185%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (352 samples, 0.31%)</title><rect x="71.7763%" y="885" width="0.3053%" height="15" fill="rgb(220,14,17)" fg:x="82753" fg:w="352"/><text x="72.0263%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (328 samples, 0.28%)</title><rect x="71.7971%" y="869" width="0.2845%" height="15" fill="rgb(230,140,40)" fg:x="82777" fg:w="328"/><text x="72.0471%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (312 samples, 0.27%)</title><rect x="71.8110%" y="853" width="0.2706%" height="15" fill="rgb(229,2,41)" fg:x="82793" fg:w="312"/><text x="72.0610%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (312 samples, 0.27%)</title><rect x="71.8110%" y="837" width="0.2706%" height="15" fill="rgb(232,89,16)" fg:x="82793" fg:w="312"/><text x="72.0610%" y="847.50"></text></g><g><title>__lll_lock_wait (39 samples, 0.03%)</title><rect x="72.0477%" y="821" width="0.0338%" height="15" fill="rgb(247,59,52)" fg:x="83066" fg:w="39"/><text x="72.2977%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (775 samples, 0.67%)</title><rect x="71.4519%" y="917" width="0.6722%" height="15" fill="rgb(226,110,21)" fg:x="82379" fg:w="775"/><text x="71.7019%" y="927.50"></text></g><g><title>event_listener::List::remove (49 samples, 0.04%)</title><rect x="72.0816%" y="901" width="0.0425%" height="15" fill="rgb(224,176,43)" fg:x="83105" fg:w="49"/><text x="72.3316%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (34 samples, 0.03%)</title><rect x="72.0946%" y="885" width="0.0295%" height="15" fill="rgb(221,73,6)" fg:x="83120" fg:w="34"/><text x="72.3446%" y="895.50"></text></g><g><title>core::mem::replace (34 samples, 0.03%)</title><rect x="72.0946%" y="869" width="0.0295%" height="15" fill="rgb(232,78,19)" fg:x="83120" fg:w="34"/><text x="72.3446%" y="879.50"></text></g><g><title>core::ptr::read (34 samples, 0.03%)</title><rect x="72.0946%" y="853" width="0.0295%" height="15" fill="rgb(233,112,48)" fg:x="83120" fg:w="34"/><text x="72.3446%" y="863.50"></text></g><g><title>concurrent_queue::full_fence (24 samples, 0.02%)</title><rect x="72.2177%" y="869" width="0.0208%" height="15" fill="rgb(243,131,47)" fg:x="83262" fg:w="24"/><text x="72.4677%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (23 samples, 0.02%)</title><rect x="72.2186%" y="853" width="0.0199%" height="15" fill="rgb(226,51,1)" fg:x="83263" fg:w="23"/><text x="72.4686%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="72.2186%" y="837" width="0.0199%" height="15" fill="rgb(247,58,7)" fg:x="83263" fg:w="23"/><text x="72.4686%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="72.2186%" y="821" width="0.0199%" height="15" fill="rgb(209,7,32)" fg:x="83263" fg:w="23"/><text x="72.4686%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (71 samples, 0.06%)</title><rect x="72.2403%" y="869" width="0.0616%" height="15" fill="rgb(209,39,41)" fg:x="83288" fg:w="71"/><text x="72.4903%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (71 samples, 0.06%)</title><rect x="72.2403%" y="853" width="0.0616%" height="15" fill="rgb(226,182,46)" fg:x="83288" fg:w="71"/><text x="72.4903%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (304 samples, 0.26%)</title><rect x="72.3019%" y="869" width="0.2637%" height="15" fill="rgb(230,219,10)" fg:x="83359" fg:w="304"/><text x="72.5519%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (304 samples, 0.26%)</title><rect x="72.3019%" y="853" width="0.2637%" height="15" fill="rgb(227,175,30)" fg:x="83359" fg:w="304"/><text x="72.5519%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (500 samples, 0.43%)</title><rect x="72.1345%" y="901" width="0.4337%" height="15" fill="rgb(217,2,50)" fg:x="83166" fg:w="500"/><text x="72.3845%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (473 samples, 0.41%)</title><rect x="72.1579%" y="885" width="0.4103%" height="15" fill="rgb(229,160,0)" fg:x="83193" fg:w="473"/><text x="72.4079%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (961 samples, 0.83%)</title><rect x="72.1241%" y="917" width="0.8335%" height="15" fill="rgb(207,78,37)" fg:x="83154" fg:w="961"/><text x="72.3741%" y="927.50"></text></g><g><title>event_listener::Event::notify (449 samples, 0.39%)</title><rect x="72.5682%" y="901" width="0.3894%" height="15" fill="rgb(225,57,0)" fg:x="83666" fg:w="449"/><text x="72.8182%" y="911.50"></text></g><g><title>event_listener::full_fence (445 samples, 0.39%)</title><rect x="72.5716%" y="885" width="0.3860%" height="15" fill="rgb(232,154,2)" fg:x="83670" fg:w="445"/><text x="72.8216%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (444 samples, 0.39%)</title><rect x="72.5725%" y="869" width="0.3851%" height="15" fill="rgb(241,212,25)" fg:x="83671" fg:w="444"/><text x="72.8225%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (444 samples, 0.39%)</title><rect x="72.5725%" y="853" width="0.3851%" height="15" fill="rgb(226,69,20)" fg:x="83671" fg:w="444"/><text x="72.8225%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (15 samples, 0.01%)</title><rect x="72.9697%" y="869" width="0.0130%" height="15" fill="rgb(247,184,54)" fg:x="84129" fg:w="15"/><text x="73.2197%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (15 samples, 0.01%)</title><rect x="72.9697%" y="853" width="0.0130%" height="15" fill="rgb(210,145,0)" fg:x="84129" fg:w="15"/><text x="73.2197%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="72.9697%" y="837" width="0.0130%" height="15" fill="rgb(253,82,12)" fg:x="84129" fg:w="15"/><text x="73.2197%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (15 samples, 0.01%)</title><rect x="72.9697%" y="821" width="0.0130%" height="15" fill="rgb(245,42,11)" fg:x="84129" fg:w="15"/><text x="73.2197%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (14 samples, 0.01%)</title><rect x="72.9706%" y="805" width="0.0121%" height="15" fill="rgb(219,147,32)" fg:x="84130" fg:w="14"/><text x="73.2206%" y="815.50"></text></g><g><title>__GI___pthread_mutex_unlock (14 samples, 0.01%)</title><rect x="72.9706%" y="789" width="0.0121%" height="15" fill="rgb(246,12,7)" fg:x="84130" fg:w="14"/><text x="73.2206%" y="799.50"></text></g><g><title>event_listener::Inner::lock (22 samples, 0.02%)</title><rect x="72.9836%" y="869" width="0.0191%" height="15" fill="rgb(243,50,9)" fg:x="84145" fg:w="22"/><text x="73.2336%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (22 samples, 0.02%)</title><rect x="72.9836%" y="853" width="0.0191%" height="15" fill="rgb(219,149,6)" fg:x="84145" fg:w="22"/><text x="73.2336%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (21 samples, 0.02%)</title><rect x="72.9845%" y="837" width="0.0182%" height="15" fill="rgb(241,51,42)" fg:x="84146" fg:w="21"/><text x="73.2345%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (19 samples, 0.02%)</title><rect x="72.9862%" y="821" width="0.0165%" height="15" fill="rgb(226,128,27)" fg:x="84148" fg:w="19"/><text x="73.2362%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (19 samples, 0.02%)</title><rect x="72.9862%" y="805" width="0.0165%" height="15" fill="rgb(244,144,4)" fg:x="84148" fg:w="19"/><text x="73.2362%" y="815.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="72.9697%" y="885" width="0.0373%" height="15" fill="rgb(221,4,13)" fg:x="84129" fg:w="43"/><text x="73.2197%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (78 samples, 0.07%)</title><rect x="72.9654%" y="917" width="0.0677%" height="15" fill="rgb(208,170,28)" fg:x="84124" fg:w="78"/><text x="73.2154%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (73 samples, 0.06%)</title><rect x="72.9697%" y="901" width="0.0633%" height="15" fill="rgb(226,131,13)" fg:x="84129" fg:w="73"/><text x="73.2197%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (30 samples, 0.03%)</title><rect x="73.0070%" y="885" width="0.0260%" height="15" fill="rgb(215,72,41)" fg:x="84172" fg:w="30"/><text x="73.2570%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="73.0070%" y="869" width="0.0260%" height="15" fill="rgb(243,108,20)" fg:x="84172" fg:w="30"/><text x="73.2570%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (30 samples, 0.03%)</title><rect x="73.0070%" y="853" width="0.0260%" height="15" fill="rgb(230,189,17)" fg:x="84172" fg:w="30"/><text x="73.2570%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (30 samples, 0.03%)</title><rect x="73.0070%" y="837" width="0.0260%" height="15" fill="rgb(220,50,17)" fg:x="84172" fg:w="30"/><text x="73.2570%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="73.0331%" y="901" width="0.0373%" height="15" fill="rgb(248,152,48)" fg:x="84202" fg:w="43"/><text x="73.2831%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (43 samples, 0.04%)</title><rect x="73.0331%" y="885" width="0.0373%" height="15" fill="rgb(244,91,11)" fg:x="84202" fg:w="43"/><text x="73.2831%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (43 samples, 0.04%)</title><rect x="73.0331%" y="869" width="0.0373%" height="15" fill="rgb(220,157,5)" fg:x="84202" fg:w="43"/><text x="73.2831%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (15 samples, 0.01%)</title><rect x="73.0704%" y="901" width="0.0130%" height="15" fill="rgb(253,137,8)" fg:x="84245" fg:w="15"/><text x="73.3204%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (15 samples, 0.01%)</title><rect x="73.0704%" y="885" width="0.0130%" height="15" fill="rgb(217,137,51)" fg:x="84245" fg:w="15"/><text x="73.3204%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="73.0704%" y="869" width="0.0130%" height="15" fill="rgb(218,209,53)" fg:x="84245" fg:w="15"/><text x="73.3204%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="73.0721%" y="853" width="0.0113%" height="15" fill="rgb(249,137,25)" fg:x="84247" fg:w="13"/><text x="73.3221%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (13 samples, 0.01%)</title><rect x="73.0721%" y="837" width="0.0113%" height="15" fill="rgb(239,155,26)" fg:x="84247" fg:w="13"/><text x="73.3221%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (13 samples, 0.01%)</title><rect x="73.0721%" y="821" width="0.0113%" height="15" fill="rgb(227,85,46)" fg:x="84247" fg:w="13"/><text x="73.3221%" y="831.50"></text></g><g><title>event_listener::Inner::lock (30 samples, 0.03%)</title><rect x="73.0834%" y="901" width="0.0260%" height="15" fill="rgb(251,107,43)" fg:x="84260" fg:w="30"/><text x="73.3334%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.03%)</title><rect x="73.0842%" y="885" width="0.0252%" height="15" fill="rgb(234,170,33)" fg:x="84261" fg:w="29"/><text x="73.3342%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (29 samples, 0.03%)</title><rect x="73.0842%" y="869" width="0.0252%" height="15" fill="rgb(206,29,35)" fg:x="84261" fg:w="29"/><text x="73.3342%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (29 samples, 0.03%)</title><rect x="73.0842%" y="853" width="0.0252%" height="15" fill="rgb(227,138,25)" fg:x="84261" fg:w="29"/><text x="73.3342%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (29 samples, 0.03%)</title><rect x="73.0842%" y="837" width="0.0252%" height="15" fill="rgb(249,131,35)" fg:x="84261" fg:w="29"/><text x="73.3342%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,985 samples, 1.72%)</title><rect x="71.4137%" y="933" width="1.7217%" height="15" fill="rgb(239,6,40)" fg:x="82335" fg:w="1985"/><text x="71.6637%" y="943.50"></text></g><g><title>event_listener::Event::listen (118 samples, 0.10%)</title><rect x="73.0331%" y="917" width="0.1023%" height="15" fill="rgb(246,136,47)" fg:x="84202" fg:w="118"/><text x="73.2831%" y="927.50"></text></g><g><title>event_listener::full_fence (25 samples, 0.02%)</title><rect x="73.1137%" y="901" width="0.0217%" height="15" fill="rgb(253,58,26)" fg:x="84295" fg:w="25"/><text x="73.3637%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.02%)</title><rect x="73.1163%" y="885" width="0.0191%" height="15" fill="rgb(237,141,10)" fg:x="84298" fg:w="22"/><text x="73.3663%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="73.1163%" y="869" width="0.0191%" height="15" fill="rgb(234,156,12)" fg:x="84298" fg:w="22"/><text x="73.3663%" y="879.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.08%)</title><rect x="73.1389%" y="917" width="0.0781%" height="15" fill="rgb(243,224,36)" fg:x="84324" fg:w="90"/><text x="73.3889%" y="927.50"></text></g><g><title>[libc-2.31.so] (461 samples, 0.40%)</title><rect x="73.2204%" y="885" width="0.3999%" height="15" fill="rgb(205,229,51)" fg:x="84418" fg:w="461"/><text x="73.4704%" y="895.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="73.6237%" y="805" width="0.0364%" height="15" fill="rgb(223,189,4)" fg:x="84883" fg:w="42"/><text x="73.8737%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,743 samples, 2.38%)</title><rect x="71.3790%" y="965" width="2.3792%" height="15" fill="rgb(249,167,54)" fg:x="82295" fg:w="2743"/><text x="71.6290%" y="975.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,734 samples, 2.37%)</title><rect x="71.3868%" y="949" width="2.3713%" height="15" fill="rgb(218,34,28)" fg:x="82304" fg:w="2734"/><text x="71.6368%" y="959.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (718 samples, 0.62%)</title><rect x="73.1354%" y="933" width="0.6228%" height="15" fill="rgb(232,109,42)" fg:x="84320" fg:w="718"/><text x="73.3854%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (624 samples, 0.54%)</title><rect x="73.2169%" y="917" width="0.5412%" height="15" fill="rgb(248,214,46)" fg:x="84414" fg:w="624"/><text x="73.4669%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (624 samples, 0.54%)</title><rect x="73.2169%" y="901" width="0.5412%" height="15" fill="rgb(244,216,40)" fg:x="84414" fg:w="624"/><text x="73.4669%" y="911.50"></text></g><g><title>alloc::alloc::box_free (159 samples, 0.14%)</title><rect x="73.6203%" y="885" width="0.1379%" height="15" fill="rgb(231,226,31)" fg:x="84879" fg:w="159"/><text x="73.8703%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (159 samples, 0.14%)</title><rect x="73.6203%" y="869" width="0.1379%" height="15" fill="rgb(238,38,43)" fg:x="84879" fg:w="159"/><text x="73.8703%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (159 samples, 0.14%)</title><rect x="73.6203%" y="853" width="0.1379%" height="15" fill="rgb(208,88,43)" fg:x="84879" fg:w="159"/><text x="73.8703%" y="863.50"></text></g><g><title>__rg_dealloc (159 samples, 0.14%)</title><rect x="73.6203%" y="837" width="0.1379%" height="15" fill="rgb(205,136,37)" fg:x="84879" fg:w="159"/><text x="73.8703%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (159 samples, 0.14%)</title><rect x="73.6203%" y="821" width="0.1379%" height="15" fill="rgb(237,34,14)" fg:x="84879" fg:w="159"/><text x="73.8703%" y="831.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (113 samples, 0.10%)</title><rect x="73.6602%" y="805" width="0.0980%" height="15" fill="rgb(236,193,44)" fg:x="84925" fg:w="113"/><text x="73.9102%" y="815.50"></text></g><g><title>[libc-2.31.so] (496 samples, 0.43%)</title><rect x="73.7582%" y="965" width="0.4302%" height="15" fill="rgb(231,48,10)" fg:x="85038" fg:w="496"/><text x="74.0082%" y="975.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,256 samples, 2.82%)</title><rect x="71.3651%" y="1029" width="2.8241%" height="15" fill="rgb(213,141,34)" fg:x="82279" fg:w="3256"/><text x="71.6151%" y="1039.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,253 samples, 2.82%)</title><rect x="71.3677%" y="1013" width="2.8215%" height="15" fill="rgb(249,130,34)" fg:x="82282" fg:w="3253"/><text x="71.6177%" y="1023.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,253 samples, 2.82%)</title><rect x="71.3677%" y="997" width="2.8215%" height="15" fill="rgb(219,42,41)" fg:x="82282" fg:w="3253"/><text x="71.6177%" y="1007.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,253 samples, 2.82%)</title><rect x="71.3677%" y="981" width="2.8215%" height="15" fill="rgb(224,100,54)" fg:x="82282" fg:w="3253"/><text x="71.6177%" y="991.50">&lt;t..</text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (12 samples, 0.01%)</title><rect x="74.2101%" y="885" width="0.0104%" height="15" fill="rgb(229,200,27)" fg:x="85559" fg:w="12"/><text x="74.4601%" y="895.50"></text></g><g><title>value_trait::generator::extend_from_slice (12 samples, 0.01%)</title><rect x="74.2101%" y="869" width="0.0104%" height="15" fill="rgb(217,118,10)" fg:x="85559" fg:w="12"/><text x="74.4601%" y="879.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (78 samples, 0.07%)</title><rect x="74.1892%" y="949" width="0.0677%" height="15" fill="rgb(206,22,3)" fg:x="85535" fg:w="78"/><text x="74.4392%" y="959.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (78 samples, 0.07%)</title><rect x="74.1892%" y="933" width="0.0677%" height="15" fill="rgb(232,163,46)" fg:x="85535" fg:w="78"/><text x="74.4392%" y="943.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (78 samples, 0.07%)</title><rect x="74.1892%" y="917" width="0.0677%" height="15" fill="rgb(206,95,13)" fg:x="85535" fg:w="78"/><text x="74.4392%" y="927.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (78 samples, 0.07%)</title><rect x="74.1892%" y="901" width="0.0677%" height="15" fill="rgb(253,154,18)" fg:x="85535" fg:w="78"/><text x="74.4392%" y="911.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (42 samples, 0.04%)</title><rect x="74.2205%" y="885" width="0.0364%" height="15" fill="rgb(219,32,23)" fg:x="85571" fg:w="42"/><text x="74.4705%" y="895.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (35 samples, 0.03%)</title><rect x="74.2265%" y="869" width="0.0304%" height="15" fill="rgb(230,191,45)" fg:x="85578" fg:w="35"/><text x="74.4765%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 0.02%)</title><rect x="74.3723%" y="821" width="0.0156%" height="15" fill="rgb(229,64,36)" fg:x="85746" fg:w="18"/><text x="74.6223%" y="831.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (162 samples, 0.14%)</title><rect x="74.2630%" y="869" width="0.1405%" height="15" fill="rgb(205,129,25)" fg:x="85620" fg:w="162"/><text x="74.5130%" y="879.50"></text></g><g><title>alloc::vec::from_elem (162 samples, 0.14%)</title><rect x="74.2630%" y="853" width="0.1405%" height="15" fill="rgb(254,112,7)" fg:x="85620" fg:w="162"/><text x="74.5130%" y="863.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (162 samples, 0.14%)</title><rect x="74.2630%" y="837" width="0.1405%" height="15" fill="rgb(226,53,48)" fg:x="85620" fg:w="162"/><text x="74.5130%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="74.3879%" y="821" width="0.0156%" height="15" fill="rgb(214,153,38)" fg:x="85764" fg:w="18"/><text x="74.6379%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="74.5978%" y="629" width="0.0139%" height="15" fill="rgb(243,101,7)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="74.5978%" y="613" width="0.0139%" height="15" fill="rgb(240,140,22)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.01%)</title><rect x="74.5978%" y="597" width="0.0139%" height="15" fill="rgb(235,114,2)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="74.5978%" y="581" width="0.0139%" height="15" fill="rgb(242,59,12)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="74.5978%" y="565" width="0.0139%" height="15" fill="rgb(252,134,9)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="575.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="74.5978%" y="549" width="0.0139%" height="15" fill="rgb(236,4,44)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="559.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="74.5978%" y="533" width="0.0139%" height="15" fill="rgb(254,172,41)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="74.5978%" y="517" width="0.0139%" height="15" fill="rgb(244,63,20)" fg:x="86006" fg:w="16"/><text x="74.8478%" y="527.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="74.5986%" y="501" width="0.0130%" height="15" fill="rgb(250,73,31)" fg:x="86007" fg:w="15"/><text x="74.8486%" y="511.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (22 samples, 0.02%)</title><rect x="74.5934%" y="789" width="0.0191%" height="15" fill="rgb(241,38,36)" fg:x="86001" fg:w="22"/><text x="74.8434%" y="799.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="74.5943%" y="773" width="0.0182%" height="15" fill="rgb(245,211,2)" fg:x="86002" fg:w="21"/><text x="74.8443%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="74.5978%" y="757" width="0.0147%" height="15" fill="rgb(206,120,28)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="74.5978%" y="741" width="0.0147%" height="15" fill="rgb(211,59,34)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (17 samples, 0.01%)</title><rect x="74.5978%" y="725" width="0.0147%" height="15" fill="rgb(233,168,5)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (17 samples, 0.01%)</title><rect x="74.5978%" y="709" width="0.0147%" height="15" fill="rgb(234,33,13)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="74.5978%" y="693" width="0.0147%" height="15" fill="rgb(231,150,26)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="74.5978%" y="677" width="0.0147%" height="15" fill="rgb(217,191,4)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="74.5978%" y="661" width="0.0147%" height="15" fill="rgb(246,198,38)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="74.5978%" y="645" width="0.0147%" height="15" fill="rgb(245,64,37)" fg:x="86006" fg:w="17"/><text x="74.8478%" y="655.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (24 samples, 0.02%)</title><rect x="74.5926%" y="805" width="0.0208%" height="15" fill="rgb(250,30,36)" fg:x="86000" fg:w="24"/><text x="74.8426%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (26 samples, 0.02%)</title><rect x="74.6168%" y="805" width="0.0226%" height="15" fill="rgb(217,86,53)" fg:x="86028" fg:w="26"/><text x="74.8668%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (163 samples, 0.14%)</title><rect x="74.5136%" y="837" width="0.1414%" height="15" fill="rgb(228,157,16)" fg:x="85909" fg:w="163"/><text x="74.7636%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (140 samples, 0.12%)</title><rect x="74.5336%" y="821" width="0.1214%" height="15" fill="rgb(217,59,31)" fg:x="85932" fg:w="140"/><text x="74.7836%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (18 samples, 0.02%)</title><rect x="74.6394%" y="805" width="0.0156%" height="15" fill="rgb(237,138,41)" fg:x="86054" fg:w="18"/><text x="74.8894%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (12 samples, 0.01%)</title><rect x="74.6940%" y="805" width="0.0104%" height="15" fill="rgb(227,91,49)" fg:x="86117" fg:w="12"/><text x="74.9440%" y="815.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (105 samples, 0.09%)</title><rect x="74.7192%" y="677" width="0.0911%" height="15" fill="rgb(247,21,44)" fg:x="86146" fg:w="105"/><text x="74.9692%" y="687.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (105 samples, 0.09%)</title><rect x="74.7192%" y="661" width="0.0911%" height="15" fill="rgb(219,210,51)" fg:x="86146" fg:w="105"/><text x="74.9692%" y="671.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="74.7964%" y="645" width="0.0139%" height="15" fill="rgb(209,140,6)" fg:x="86235" fg:w="16"/><text x="75.0464%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (117 samples, 0.10%)</title><rect x="74.7140%" y="757" width="0.1015%" height="15" fill="rgb(221,188,24)" fg:x="86140" fg:w="117"/><text x="74.9640%" y="767.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (117 samples, 0.10%)</title><rect x="74.7140%" y="741" width="0.1015%" height="15" fill="rgb(232,154,20)" fg:x="86140" fg:w="117"/><text x="74.9640%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (112 samples, 0.10%)</title><rect x="74.7183%" y="725" width="0.0971%" height="15" fill="rgb(244,137,50)" fg:x="86145" fg:w="112"/><text x="74.9683%" y="735.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (112 samples, 0.10%)</title><rect x="74.7183%" y="709" width="0.0971%" height="15" fill="rgb(225,185,43)" fg:x="86145" fg:w="112"/><text x="74.9683%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (111 samples, 0.10%)</title><rect x="74.7192%" y="693" width="0.0963%" height="15" fill="rgb(213,205,38)" fg:x="86146" fg:w="111"/><text x="74.9692%" y="703.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (152 samples, 0.13%)</title><rect x="74.7105%" y="805" width="0.1318%" height="15" fill="rgb(236,73,12)" fg:x="86136" fg:w="152"/><text x="74.9605%" y="815.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (152 samples, 0.13%)</title><rect x="74.7105%" y="789" width="0.1318%" height="15" fill="rgb(235,219,13)" fg:x="86136" fg:w="152"/><text x="74.9605%" y="799.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (152 samples, 0.13%)</title><rect x="74.7105%" y="773" width="0.1318%" height="15" fill="rgb(218,59,36)" fg:x="86136" fg:w="152"/><text x="74.9605%" y="783.50"></text></g><g><title>value_trait::option::&lt;impl value_trait::ValueAccess for &amp;V&gt;::as_array (31 samples, 0.03%)</title><rect x="74.8155%" y="757" width="0.0269%" height="15" fill="rgb(205,110,39)" fg:x="86257" fg:w="31"/><text x="75.0655%" y="767.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_array (31 samples, 0.03%)</title><rect x="74.8155%" y="741" width="0.0269%" height="15" fill="rgb(218,206,42)" fg:x="86257" fg:w="31"/><text x="75.0655%" y="751.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (228 samples, 0.20%)</title><rect x="74.6646%" y="837" width="0.1978%" height="15" fill="rgb(248,125,24)" fg:x="86083" fg:w="228"/><text x="74.9146%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (211 samples, 0.18%)</title><rect x="74.6793%" y="821" width="0.1830%" height="15" fill="rgb(242,28,27)" fg:x="86100" fg:w="211"/><text x="74.9293%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (23 samples, 0.02%)</title><rect x="74.8424%" y="805" width="0.0199%" height="15" fill="rgb(216,228,15)" fg:x="86288" fg:w="23"/><text x="75.0924%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (489 samples, 0.42%)</title><rect x="74.4789%" y="853" width="0.4241%" height="15" fill="rgb(235,116,46)" fg:x="85869" fg:w="489"/><text x="74.7289%" y="863.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (47 samples, 0.04%)</title><rect x="74.8623%" y="837" width="0.0408%" height="15" fill="rgb(224,18,32)" fg:x="86311" fg:w="47"/><text x="75.1123%" y="847.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.01%)</title><rect x="75.1043%" y="837" width="0.0139%" height="15" fill="rgb(252,5,12)" fg:x="86590" fg:w="16"/><text x="75.3543%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="75.1234%" y="837" width="0.0199%" height="15" fill="rgb(251,36,5)" fg:x="86612" fg:w="23"/><text x="75.3734%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="75.1503%" y="837" width="0.0182%" height="15" fill="rgb(217,53,14)" fg:x="86643" fg:w="21"/><text x="75.4003%" y="847.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (37 samples, 0.03%)</title><rect x="75.1685%" y="837" width="0.0321%" height="15" fill="rgb(215,86,45)" fg:x="86664" fg:w="37"/><text x="75.4185%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (37 samples, 0.03%)</title><rect x="75.1685%" y="821" width="0.0321%" height="15" fill="rgb(242,169,11)" fg:x="86664" fg:w="37"/><text x="75.4185%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="75.4356%" y="821" width="0.0156%" height="15" fill="rgb(211,213,45)" fg:x="86972" fg:w="18"/><text x="75.6856%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (131 samples, 0.11%)</title><rect x="76.2119%" y="629" width="0.1136%" height="15" fill="rgb(205,88,11)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (131 samples, 0.11%)</title><rect x="76.2119%" y="613" width="0.1136%" height="15" fill="rgb(252,69,26)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (131 samples, 0.11%)</title><rect x="76.2119%" y="597" width="0.1136%" height="15" fill="rgb(246,123,37)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (131 samples, 0.11%)</title><rect x="76.2119%" y="581" width="0.1136%" height="15" fill="rgb(212,205,5)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (131 samples, 0.11%)</title><rect x="76.2119%" y="565" width="0.1136%" height="15" fill="rgb(253,148,0)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="575.50"></text></g><g><title>alloc::alloc::alloc (131 samples, 0.11%)</title><rect x="76.2119%" y="549" width="0.1136%" height="15" fill="rgb(239,22,4)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="559.50"></text></g><g><title>__rg_alloc (131 samples, 0.11%)</title><rect x="76.2119%" y="533" width="0.1136%" height="15" fill="rgb(226,26,53)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (131 samples, 0.11%)</title><rect x="76.2119%" y="517" width="0.1136%" height="15" fill="rgb(225,229,45)" fg:x="87867" fg:w="131"/><text x="76.4619%" y="527.50"></text></g><g><title>sn_rust_alloc (126 samples, 0.11%)</title><rect x="76.2162%" y="501" width="0.1093%" height="15" fill="rgb(220,60,37)" fg:x="87872" fg:w="126"/><text x="76.4662%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (169 samples, 0.15%)</title><rect x="76.2006%" y="757" width="0.1466%" height="15" fill="rgb(217,180,35)" fg:x="87854" fg:w="169"/><text x="76.4506%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (161 samples, 0.14%)</title><rect x="76.2076%" y="741" width="0.1396%" height="15" fill="rgb(229,7,53)" fg:x="87862" fg:w="161"/><text x="76.4576%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (161 samples, 0.14%)</title><rect x="76.2076%" y="725" width="0.1396%" height="15" fill="rgb(254,137,3)" fg:x="87862" fg:w="161"/><text x="76.4576%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (161 samples, 0.14%)</title><rect x="76.2076%" y="709" width="0.1396%" height="15" fill="rgb(215,140,41)" fg:x="87862" fg:w="161"/><text x="76.4576%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (156 samples, 0.14%)</title><rect x="76.2119%" y="693" width="0.1353%" height="15" fill="rgb(250,80,15)" fg:x="87867" fg:w="156"/><text x="76.4619%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (156 samples, 0.14%)</title><rect x="76.2119%" y="677" width="0.1353%" height="15" fill="rgb(252,191,6)" fg:x="87867" fg:w="156"/><text x="76.4619%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (156 samples, 0.14%)</title><rect x="76.2119%" y="661" width="0.1353%" height="15" fill="rgb(246,217,18)" fg:x="87867" fg:w="156"/><text x="76.4619%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (156 samples, 0.14%)</title><rect x="76.2119%" y="645" width="0.1353%" height="15" fill="rgb(223,93,7)" fg:x="87867" fg:w="156"/><text x="76.4619%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (25 samples, 0.02%)</title><rect x="76.3255%" y="629" width="0.0217%" height="15" fill="rgb(225,55,52)" fg:x="87998" fg:w="25"/><text x="76.5755%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="76.3255%" y="613" width="0.0217%" height="15" fill="rgb(240,31,24)" fg:x="87998" fg:w="25"/><text x="76.5755%" y="623.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="76.3281%" y="597" width="0.0191%" height="15" fill="rgb(205,56,52)" fg:x="88001" fg:w="22"/><text x="76.5781%" y="607.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (240 samples, 0.21%)</title><rect x="76.1451%" y="789" width="0.2082%" height="15" fill="rgb(246,146,12)" fg:x="87790" fg:w="240"/><text x="76.3951%" y="799.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (236 samples, 0.20%)</title><rect x="76.1486%" y="773" width="0.2047%" height="15" fill="rgb(239,84,36)" fg:x="87794" fg:w="236"/><text x="76.3986%" y="783.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (284 samples, 0.25%)</title><rect x="76.1234%" y="805" width="0.2463%" height="15" fill="rgb(207,41,40)" fg:x="87765" fg:w="284"/><text x="76.3734%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (322 samples, 0.28%)</title><rect x="76.3732%" y="805" width="0.2793%" height="15" fill="rgb(241,179,25)" fg:x="88053" fg:w="322"/><text x="76.6232%" y="815.50"></text></g><g><title>tremor_script::ast::Path::segments (38 samples, 0.03%)</title><rect x="76.8043%" y="789" width="0.0330%" height="15" fill="rgb(210,0,34)" fg:x="88550" fg:w="38"/><text x="77.0543%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.03%)</title><rect x="77.0819%" y="773" width="0.0252%" height="15" fill="rgb(225,217,29)" fg:x="88870" fg:w="29"/><text x="77.3319%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (28 samples, 0.02%)</title><rect x="77.2076%" y="597" width="0.0243%" height="15" fill="rgb(216,191,38)" fg:x="89015" fg:w="28"/><text x="77.4576%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (28 samples, 0.02%)</title><rect x="77.2076%" y="581" width="0.0243%" height="15" fill="rgb(232,140,52)" fg:x="89015" fg:w="28"/><text x="77.4576%" y="591.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (12 samples, 0.01%)</title><rect x="77.2215%" y="565" width="0.0104%" height="15" fill="rgb(223,158,51)" fg:x="89031" fg:w="12"/><text x="77.4715%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="77.2050%" y="645" width="0.0330%" height="15" fill="rgb(235,29,51)" fg:x="89012" fg:w="38"/><text x="77.4550%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (38 samples, 0.03%)</title><rect x="77.2050%" y="629" width="0.0330%" height="15" fill="rgb(215,181,18)" fg:x="89012" fg:w="38"/><text x="77.4550%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="77.2050%" y="613" width="0.0330%" height="15" fill="rgb(227,125,34)" fg:x="89012" fg:w="38"/><text x="77.4550%" y="623.50"></text></g><g><title>sn_rust_dealloc (284 samples, 0.25%)</title><rect x="77.2380%" y="645" width="0.2463%" height="15" fill="rgb(230,197,49)" fg:x="89050" fg:w="284"/><text x="77.4880%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (481 samples, 0.42%)</title><rect x="77.1981%" y="693" width="0.4172%" height="15" fill="rgb(239,141,16)" fg:x="89004" fg:w="481"/><text x="77.4481%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (481 samples, 0.42%)</title><rect x="77.1981%" y="677" width="0.4172%" height="15" fill="rgb(225,105,43)" fg:x="89004" fg:w="481"/><text x="77.4481%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (481 samples, 0.42%)</title><rect x="77.1981%" y="661" width="0.4172%" height="15" fill="rgb(214,131,14)" fg:x="89004" fg:w="481"/><text x="77.4481%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (151 samples, 0.13%)</title><rect x="77.4843%" y="645" width="0.1310%" height="15" fill="rgb(229,177,11)" fg:x="89334" fg:w="151"/><text x="77.7343%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (512 samples, 0.44%)</title><rect x="77.1860%" y="709" width="0.4441%" height="15" fill="rgb(231,180,14)" fg:x="88990" fg:w="512"/><text x="77.4360%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="77.6153%" y="693" width="0.0147%" height="15" fill="rgb(232,88,2)" fg:x="89485" fg:w="17"/><text x="77.8653%" y="703.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="77.6153%" y="677" width="0.0147%" height="15" fill="rgb(205,220,8)" fg:x="89485" fg:w="17"/><text x="77.8653%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="77.6153%" y="661" width="0.0147%" height="15" fill="rgb(225,23,53)" fg:x="89485" fg:w="17"/><text x="77.8653%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="77.6153%" y="645" width="0.0147%" height="15" fill="rgb(213,62,29)" fg:x="89485" fg:w="17"/><text x="77.8653%" y="655.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="77.6153%" y="629" width="0.0147%" height="15" fill="rgb(227,75,7)" fg:x="89485" fg:w="17"/><text x="77.8653%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="77.6153%" y="613" width="0.0147%" height="15" fill="rgb(207,105,14)" fg:x="89485" fg:w="17"/><text x="77.8653%" y="623.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.08%)</title><rect x="77.6300%" y="709" width="0.0772%" height="15" fill="rgb(245,62,29)" fg:x="89502" fg:w="89"/><text x="77.8800%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (701 samples, 0.61%)</title><rect x="77.1070%" y="773" width="0.6080%" height="15" fill="rgb(236,202,4)" fg:x="88899" fg:w="701"/><text x="77.3570%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (651 samples, 0.56%)</title><rect x="77.1504%" y="757" width="0.5646%" height="15" fill="rgb(250,67,1)" fg:x="88949" fg:w="651"/><text x="77.4004%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (651 samples, 0.56%)</title><rect x="77.1504%" y="741" width="0.5646%" height="15" fill="rgb(253,115,44)" fg:x="88949" fg:w="651"/><text x="77.4004%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (651 samples, 0.56%)</title><rect x="77.1504%" y="725" width="0.5646%" height="15" fill="rgb(251,139,18)" fg:x="88949" fg:w="651"/><text x="77.4004%" y="735.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::new (23 samples, 0.02%)</title><rect x="77.7948%" y="661" width="0.0199%" height="15" fill="rgb(218,22,32)" fg:x="89692" fg:w="23"/><text x="78.0448%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (141 samples, 0.12%)</title><rect x="77.8148%" y="629" width="0.1223%" height="15" fill="rgb(243,53,5)" fg:x="89715" fg:w="141"/><text x="78.0648%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (15 samples, 0.01%)</title><rect x="77.9466%" y="533" width="0.0130%" height="15" fill="rgb(227,56,16)" fg:x="89867" fg:w="15"/><text x="78.1966%" y="543.50"></text></g><g><title>hashbrown::raw::inner::h2 (17 samples, 0.01%)</title><rect x="77.9596%" y="533" width="0.0147%" height="15" fill="rgb(245,53,0)" fg:x="89882" fg:w="17"/><text x="78.2096%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (22 samples, 0.02%)</title><rect x="77.9744%" y="533" width="0.0191%" height="15" fill="rgb(216,170,35)" fg:x="89899" fg:w="22"/><text x="78.2244%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.02%)</title><rect x="77.9744%" y="517" width="0.0191%" height="15" fill="rgb(211,200,8)" fg:x="89899" fg:w="22"/><text x="78.2244%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="77.9744%" y="501" width="0.0191%" height="15" fill="rgb(228,204,44)" fg:x="89899" fg:w="22"/><text x="78.2244%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (13 samples, 0.01%)</title><rect x="77.9935%" y="533" width="0.0113%" height="15" fill="rgb(214,121,17)" fg:x="89921" fg:w="13"/><text x="78.2435%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.01%)</title><rect x="77.9935%" y="517" width="0.0113%" height="15" fill="rgb(233,64,38)" fg:x="89921" fg:w="13"/><text x="78.2435%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (241 samples, 0.21%)</title><rect x="77.8148%" y="645" width="0.2090%" height="15" fill="rgb(253,54,19)" fg:x="89715" fg:w="241"/><text x="78.0648%" y="655.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (100 samples, 0.09%)</title><rect x="77.9371%" y="629" width="0.0867%" height="15" fill="rgb(253,94,18)" fg:x="89856" fg:w="100"/><text x="78.1871%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (93 samples, 0.08%)</title><rect x="77.9432%" y="613" width="0.0807%" height="15" fill="rgb(227,57,52)" fg:x="89863" fg:w="93"/><text x="78.1932%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (93 samples, 0.08%)</title><rect x="77.9432%" y="597" width="0.0807%" height="15" fill="rgb(230,228,50)" fg:x="89863" fg:w="93"/><text x="78.1932%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (93 samples, 0.08%)</title><rect x="77.9432%" y="581" width="0.0807%" height="15" fill="rgb(217,205,27)" fg:x="89863" fg:w="93"/><text x="78.1932%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (93 samples, 0.08%)</title><rect x="77.9432%" y="565" width="0.0807%" height="15" fill="rgb(252,71,50)" fg:x="89863" fg:w="93"/><text x="78.1932%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (93 samples, 0.08%)</title><rect x="77.9432%" y="549" width="0.0807%" height="15" fill="rgb(209,86,4)" fg:x="89863" fg:w="93"/><text x="78.1932%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (22 samples, 0.02%)</title><rect x="78.0047%" y="533" width="0.0191%" height="15" fill="rgb(229,94,0)" fg:x="89934" fg:w="22"/><text x="78.2547%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (22 samples, 0.02%)</title><rect x="78.0047%" y="517" width="0.0191%" height="15" fill="rgb(252,223,21)" fg:x="89934" fg:w="22"/><text x="78.2547%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.02%)</title><rect x="78.0047%" y="501" width="0.0191%" height="15" fill="rgb(230,210,4)" fg:x="89934" fg:w="22"/><text x="78.2547%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (334 samples, 0.29%)</title><rect x="77.7523%" y="741" width="0.2897%" height="15" fill="rgb(240,149,38)" fg:x="89643" fg:w="334"/><text x="78.0023%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (313 samples, 0.27%)</title><rect x="77.7705%" y="725" width="0.2715%" height="15" fill="rgb(254,105,20)" fg:x="89664" fg:w="313"/><text x="78.0205%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (293 samples, 0.25%)</title><rect x="77.7879%" y="709" width="0.2541%" height="15" fill="rgb(253,87,46)" fg:x="89684" fg:w="293"/><text x="78.0379%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (290 samples, 0.25%)</title><rect x="77.7905%" y="693" width="0.2515%" height="15" fill="rgb(253,116,33)" fg:x="89687" fg:w="290"/><text x="78.0405%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (290 samples, 0.25%)</title><rect x="77.7905%" y="677" width="0.2515%" height="15" fill="rgb(229,198,5)" fg:x="89687" fg:w="290"/><text x="78.0405%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (262 samples, 0.23%)</title><rect x="77.8148%" y="661" width="0.2272%" height="15" fill="rgb(242,38,37)" fg:x="89715" fg:w="262"/><text x="78.0648%" y="671.50"></text></g><g><title>core::mem::replace (21 samples, 0.02%)</title><rect x="78.0238%" y="645" width="0.0182%" height="15" fill="rgb(242,69,53)" fg:x="89956" fg:w="21"/><text x="78.2738%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (14 samples, 0.01%)</title><rect x="78.7880%" y="709" width="0.0121%" height="15" fill="rgb(249,80,16)" fg:x="90837" fg:w="14"/><text x="79.0380%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (469 samples, 0.41%)</title><rect x="78.3968%" y="725" width="0.4068%" height="15" fill="rgb(206,128,11)" fg:x="90386" fg:w="469"/><text x="78.6468%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="78.9571%" y="709" width="0.0156%" height="15" fill="rgb(212,35,20)" fg:x="91032" fg:w="18"/><text x="79.2071%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (58 samples, 0.05%)</title><rect x="78.9727%" y="677" width="0.0503%" height="15" fill="rgb(236,79,13)" fg:x="91050" fg:w="58"/><text x="79.2227%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (58 samples, 0.05%)</title><rect x="78.9727%" y="661" width="0.0503%" height="15" fill="rgb(233,123,3)" fg:x="91050" fg:w="58"/><text x="79.2227%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (47 samples, 0.04%)</title><rect x="78.9822%" y="645" width="0.0408%" height="15" fill="rgb(214,93,52)" fg:x="91061" fg:w="47"/><text x="79.2322%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (46 samples, 0.04%)</title><rect x="78.9831%" y="629" width="0.0399%" height="15" fill="rgb(251,37,40)" fg:x="91062" fg:w="46"/><text x="79.2331%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (41 samples, 0.04%)</title><rect x="78.9874%" y="613" width="0.0356%" height="15" fill="rgb(227,80,54)" fg:x="91067" fg:w="41"/><text x="79.2374%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (41 samples, 0.04%)</title><rect x="78.9874%" y="597" width="0.0356%" height="15" fill="rgb(254,48,11)" fg:x="91067" fg:w="41"/><text x="79.2374%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (41 samples, 0.04%)</title><rect x="78.9874%" y="581" width="0.0356%" height="15" fill="rgb(235,193,26)" fg:x="91067" fg:w="41"/><text x="79.2374%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (37 samples, 0.03%)</title><rect x="78.9909%" y="565" width="0.0321%" height="15" fill="rgb(229,99,21)" fg:x="91071" fg:w="37"/><text x="79.2409%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (37 samples, 0.03%)</title><rect x="78.9909%" y="549" width="0.0321%" height="15" fill="rgb(211,140,41)" fg:x="91071" fg:w="37"/><text x="79.2409%" y="559.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,746 samples, 2.38%)</title><rect x="76.6525%" y="805" width="2.3818%" height="15" fill="rgb(240,227,30)" fg:x="88375" fg:w="2746"/><text x="76.9025%" y="815.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,533 samples, 2.20%)</title><rect x="76.8373%" y="789" width="2.1970%" height="15" fill="rgb(215,224,45)" fg:x="88588" fg:w="2533"/><text x="77.0873%" y="799.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,514 samples, 1.31%)</title><rect x="77.7211%" y="773" width="1.3132%" height="15" fill="rgb(206,123,31)" fg:x="89607" fg:w="1514"/><text x="77.9711%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,491 samples, 1.29%)</title><rect x="77.7411%" y="757" width="1.2932%" height="15" fill="rgb(210,138,16)" fg:x="89630" fg:w="1491"/><text x="77.9911%" y="767.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,144 samples, 0.99%)</title><rect x="78.0420%" y="741" width="0.9923%" height="15" fill="rgb(228,57,28)" fg:x="89977" fg:w="1144"/><text x="78.2920%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (266 samples, 0.23%)</title><rect x="78.8036%" y="725" width="0.2307%" height="15" fill="rgb(242,170,10)" fg:x="90855" fg:w="266"/><text x="79.0536%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (71 samples, 0.06%)</title><rect x="78.9727%" y="709" width="0.0616%" height="15" fill="rgb(228,214,39)" fg:x="91050" fg:w="71"/><text x="79.2227%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (71 samples, 0.06%)</title><rect x="78.9727%" y="693" width="0.0616%" height="15" fill="rgb(218,179,33)" fg:x="91050" fg:w="71"/><text x="79.2227%" y="703.50"></text></g><g><title>tremor_value::value::Value::Object (13 samples, 0.01%)</title><rect x="79.0230%" y="677" width="0.0113%" height="15" fill="rgb(235,193,39)" fg:x="91108" fg:w="13"/><text x="79.2730%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (5,290 samples, 4.59%)</title><rect x="75.2006%" y="837" width="4.5883%" height="15" fill="rgb(219,221,36)" fg:x="86701" fg:w="5290"/><text x="75.4506%" y="847.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,990 samples, 4.33%)</title><rect x="75.4608%" y="821" width="4.3281%" height="15" fill="rgb(248,218,19)" fg:x="87001" fg:w="4990"/><text x="75.7108%" y="831.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (870 samples, 0.75%)</title><rect x="79.0343%" y="805" width="0.7546%" height="15" fill="rgb(205,50,9)" fg:x="91121" fg:w="870"/><text x="79.2843%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (63 samples, 0.05%)</title><rect x="79.7342%" y="789" width="0.0546%" height="15" fill="rgb(238,81,28)" fg:x="91928" fg:w="63"/><text x="79.9842%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="79.9476%" y="789" width="0.0208%" height="15" fill="rgb(235,110,19)" fg:x="92174" fg:w="24"/><text x="80.1976%" y="799.50"></text></g><g><title>tremor_script::ast::Path::segments (44 samples, 0.04%)</title><rect x="79.9780%" y="789" width="0.0382%" height="15" fill="rgb(214,7,14)" fg:x="92209" fg:w="44"/><text x="80.2280%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (107 samples, 0.09%)</title><rect x="80.3119%" y="645" width="0.0928%" height="15" fill="rgb(211,77,3)" fg:x="92594" fg:w="107"/><text x="80.5619%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="80.4160%" y="533" width="0.0217%" height="15" fill="rgb(229,5,9)" fg:x="92714" fg:w="25"/><text x="80.6660%" y="543.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (25 samples, 0.02%)</title><rect x="80.4160%" y="517" width="0.0217%" height="15" fill="rgb(225,90,11)" fg:x="92714" fg:w="25"/><text x="80.6660%" y="527.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (932 samples, 0.81%)</title><rect x="80.4377%" y="517" width="0.8084%" height="15" fill="rgb(242,56,8)" fg:x="92739" fg:w="932"/><text x="80.6877%" y="527.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (928 samples, 0.80%)</title><rect x="80.4411%" y="501" width="0.8049%" height="15" fill="rgb(249,212,39)" fg:x="92743" fg:w="928"/><text x="80.6911%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (928 samples, 0.80%)</title><rect x="80.4411%" y="485" width="0.8049%" height="15" fill="rgb(236,90,9)" fg:x="92743" fg:w="928"/><text x="80.6911%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (525 samples, 0.46%)</title><rect x="80.7907%" y="469" width="0.4554%" height="15" fill="rgb(206,88,35)" fg:x="93146" fg:w="525"/><text x="81.0407%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (525 samples, 0.46%)</title><rect x="80.7907%" y="453" width="0.4554%" height="15" fill="rgb(205,126,30)" fg:x="93146" fg:w="525"/><text x="81.0407%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (525 samples, 0.46%)</title><rect x="80.7907%" y="437" width="0.4554%" height="15" fill="rgb(230,176,12)" fg:x="93146" fg:w="525"/><text x="81.0407%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (523 samples, 0.45%)</title><rect x="80.7924%" y="421" width="0.4536%" height="15" fill="rgb(243,19,9)" fg:x="93148" fg:w="523"/><text x="81.0424%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (523 samples, 0.45%)</title><rect x="80.7924%" y="405" width="0.4536%" height="15" fill="rgb(245,171,17)" fg:x="93148" fg:w="523"/><text x="81.0424%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (523 samples, 0.45%)</title><rect x="80.7924%" y="389" width="0.4536%" height="15" fill="rgb(227,52,21)" fg:x="93148" fg:w="523"/><text x="81.0424%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (523 samples, 0.45%)</title><rect x="80.7924%" y="373" width="0.4536%" height="15" fill="rgb(238,69,14)" fg:x="93148" fg:w="523"/><text x="81.0424%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (523 samples, 0.45%)</title><rect x="80.7924%" y="357" width="0.4536%" height="15" fill="rgb(241,156,39)" fg:x="93148" fg:w="523"/><text x="81.0424%" y="367.50"></text></g><g><title>[libc-2.31.so] (510 samples, 0.44%)</title><rect x="80.8037%" y="341" width="0.4424%" height="15" fill="rgb(212,227,28)" fg:x="93161" fg:w="510"/><text x="81.0537%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (942 samples, 0.82%)</title><rect x="80.4377%" y="533" width="0.8170%" height="15" fill="rgb(209,118,27)" fg:x="92739" fg:w="942"/><text x="80.6877%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (377 samples, 0.33%)</title><rect x="81.2695%" y="533" width="0.3270%" height="15" fill="rgb(226,102,5)" fg:x="93698" fg:w="377"/><text x="81.5195%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (377 samples, 0.33%)</title><rect x="81.2695%" y="517" width="0.3270%" height="15" fill="rgb(223,34,3)" fg:x="93698" fg:w="377"/><text x="81.5195%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (377 samples, 0.33%)</title><rect x="81.2695%" y="501" width="0.3270%" height="15" fill="rgb(221,81,38)" fg:x="93698" fg:w="377"/><text x="81.5195%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,514 samples, 1.31%)</title><rect x="80.2937%" y="709" width="1.3132%" height="15" fill="rgb(236,219,28)" fg:x="92573" fg:w="1514"/><text x="80.5437%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,512 samples, 1.31%)</title><rect x="80.2954%" y="693" width="1.3114%" height="15" fill="rgb(213,200,14)" fg:x="92575" fg:w="1512"/><text x="80.5454%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,512 samples, 1.31%)</title><rect x="80.2954%" y="677" width="1.3114%" height="15" fill="rgb(240,33,19)" fg:x="92575" fg:w="1512"/><text x="80.5454%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,512 samples, 1.31%)</title><rect x="80.2954%" y="661" width="1.3114%" height="15" fill="rgb(233,113,27)" fg:x="92575" fg:w="1512"/><text x="80.5454%" y="671.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,386 samples, 1.20%)</title><rect x="80.4047%" y="645" width="1.2022%" height="15" fill="rgb(220,221,18)" fg:x="92701" fg:w="1386"/><text x="80.6547%" y="655.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,384 samples, 1.20%)</title><rect x="80.4064%" y="629" width="1.2004%" height="15" fill="rgb(238,92,8)" fg:x="92703" fg:w="1384"/><text x="80.6564%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,384 samples, 1.20%)</title><rect x="80.4064%" y="613" width="1.2004%" height="15" fill="rgb(222,164,16)" fg:x="92703" fg:w="1384"/><text x="80.6564%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,384 samples, 1.20%)</title><rect x="80.4064%" y="597" width="1.2004%" height="15" fill="rgb(241,119,3)" fg:x="92703" fg:w="1384"/><text x="80.6564%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,376 samples, 1.19%)</title><rect x="80.4134%" y="581" width="1.1935%" height="15" fill="rgb(241,44,8)" fg:x="92711" fg:w="1376"/><text x="80.6634%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,376 samples, 1.19%)</title><rect x="80.4134%" y="565" width="1.1935%" height="15" fill="rgb(230,36,40)" fg:x="92711" fg:w="1376"/><text x="80.6634%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,376 samples, 1.19%)</title><rect x="80.4134%" y="549" width="1.1935%" height="15" fill="rgb(243,16,36)" fg:x="92711" fg:w="1376"/><text x="80.6634%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (12 samples, 0.01%)</title><rect x="81.5965%" y="533" width="0.0104%" height="15" fill="rgb(231,4,26)" fg:x="94075" fg:w="12"/><text x="81.8465%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="81.5965%" y="517" width="0.0104%" height="15" fill="rgb(240,9,31)" fg:x="94075" fg:w="12"/><text x="81.8465%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (1,832 samples, 1.59%)</title><rect x="80.0239%" y="725" width="1.5890%" height="15" fill="rgb(207,173,15)" fg:x="92262" fg:w="1832"/><text x="80.2739%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,110 samples, 1.83%)</title><rect x="79.7889%" y="837" width="1.8301%" height="15" fill="rgb(224,192,53)" fg:x="91991" fg:w="2110"/><text x="80.0389%" y="847.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,045 samples, 1.77%)</title><rect x="79.8453%" y="821" width="1.7737%" height="15" fill="rgb(223,67,28)" fg:x="92056" fg:w="2045"/><text x="80.0953%" y="831.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (1,995 samples, 1.73%)</title><rect x="79.8886%" y="805" width="1.7304%" height="15" fill="rgb(211,20,47)" fg:x="92106" fg:w="1995"/><text x="80.1386%" y="815.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (1,848 samples, 1.60%)</title><rect x="80.0161%" y="789" width="1.6029%" height="15" fill="rgb(240,228,2)" fg:x="92253" fg:w="1848"/><text x="80.2661%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,845 samples, 1.60%)</title><rect x="80.0187%" y="773" width="1.6003%" height="15" fill="rgb(248,151,12)" fg:x="92256" fg:w="1845"/><text x="80.2687%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (1,845 samples, 1.60%)</title><rect x="80.0187%" y="757" width="1.6003%" height="15" fill="rgb(244,8,39)" fg:x="92256" fg:w="1845"/><text x="80.2687%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (1,845 samples, 1.60%)</title><rect x="80.0187%" y="741" width="1.6003%" height="15" fill="rgb(222,26,8)" fg:x="92256" fg:w="1845"/><text x="80.2687%" y="751.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (64 samples, 0.06%)</title><rect x="82.1672%" y="821" width="0.0555%" height="15" fill="rgb(213,106,44)" fg:x="94733" fg:w="64"/><text x="82.4172%" y="831.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (64 samples, 0.06%)</title><rect x="82.1672%" y="805" width="0.0555%" height="15" fill="rgb(214,129,20)" fg:x="94733" fg:w="64"/><text x="82.4172%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="82.2227%" y="821" width="0.0139%" height="15" fill="rgb(212,32,13)" fg:x="94797" fg:w="16"/><text x="82.4727%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (72 samples, 0.06%)</title><rect x="82.2366%" y="821" width="0.0624%" height="15" fill="rgb(208,168,33)" fg:x="94813" fg:w="72"/><text x="82.4866%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (50 samples, 0.04%)</title><rect x="82.3033%" y="805" width="0.0434%" height="15" fill="rgb(231,207,8)" fg:x="94890" fg:w="50"/><text x="82.5533%" y="815.50"></text></g><g><title>tremor_script::interpreter::test_guard (58 samples, 0.05%)</title><rect x="82.2990%" y="821" width="0.0503%" height="15" fill="rgb(235,219,23)" fg:x="94885" fg:w="58"/><text x="82.5490%" y="831.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,790 samples, 8.49%)</title><rect x="74.1892%" y="965" width="8.4914%" height="15" fill="rgb(226,216,26)" fg:x="85535" fg:w="9790"/><text x="74.4392%" y="975.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,712 samples, 8.42%)</title><rect x="74.2569%" y="949" width="8.4238%" height="15" fill="rgb(239,137,16)" fg:x="85613" fg:w="9712"/><text x="74.5069%" y="959.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,712 samples, 8.42%)</title><rect x="74.2569%" y="933" width="8.4238%" height="15" fill="rgb(207,12,36)" fg:x="85613" fg:w="9712"/><text x="74.5069%" y="943.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,712 samples, 8.42%)</title><rect x="74.2569%" y="917" width="8.4238%" height="15" fill="rgb(210,214,24)" fg:x="85613" fg:w="9712"/><text x="74.5069%" y="927.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,712 samples, 8.42%)</title><rect x="74.2569%" y="901" width="8.4238%" height="15" fill="rgb(206,56,30)" fg:x="85613" fg:w="9712"/><text x="74.5069%" y="911.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,712 samples, 8.42%)</title><rect x="74.2569%" y="885" width="8.4238%" height="15" fill="rgb(228,143,26)" fg:x="85613" fg:w="9712"/><text x="74.5069%" y="895.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (9,543 samples, 8.28%)</title><rect x="74.4035%" y="869" width="8.2772%" height="15" fill="rgb(216,218,46)" fg:x="85782" fg:w="9543"/><text x="74.6535%" y="879.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (8,967 samples, 7.78%)</title><rect x="74.9031%" y="853" width="7.7776%" height="15" fill="rgb(206,6,19)" fg:x="86358" fg:w="8967"/><text x="75.1531%" y="863.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,224 samples, 1.06%)</title><rect x="81.6190%" y="837" width="1.0616%" height="15" fill="rgb(239,177,51)" fg:x="94101" fg:w="1224"/><text x="81.8690%" y="847.50"></text></g><g><title>tremor_script::interpreter::val_eq (382 samples, 0.33%)</title><rect x="82.3493%" y="821" width="0.3313%" height="15" fill="rgb(216,55,25)" fg:x="94943" fg:w="382"/><text x="82.5993%" y="831.50"></text></g><g><title>[libc-2.31.so] (276 samples, 0.24%)</title><rect x="82.4413%" y="805" width="0.2394%" height="15" fill="rgb(231,163,29)" fg:x="95049" fg:w="276"/><text x="82.6913%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,791 samples, 8.49%)</title><rect x="74.1892%" y="1013" width="8.4923%" height="15" fill="rgb(232,149,50)" fg:x="85535" fg:w="9791"/><text x="74.4392%" y="1023.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,791 samples, 8.49%)</title><rect x="74.1892%" y="997" width="8.4923%" height="15" fill="rgb(223,142,48)" fg:x="85535" fg:w="9791"/><text x="74.4392%" y="1007.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,791 samples, 8.49%)</title><rect x="74.1892%" y="981" width="8.4923%" height="15" fill="rgb(245,83,23)" fg:x="85535" fg:w="9791"/><text x="74.4392%" y="991.50">tremor_pipel..</text></g><g><title>[libc-2.31.so] (63 samples, 0.05%)</title><rect x="82.6824%" y="981" width="0.0546%" height="15" fill="rgb(224,63,2)" fg:x="95327" fg:w="63"/><text x="82.9324%" y="991.50"></text></g><g><title>[libc-2.31.so] (184 samples, 0.16%)</title><rect x="82.8836%" y="917" width="0.1596%" height="15" fill="rgb(218,65,53)" fg:x="95559" fg:w="184"/><text x="83.1336%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (78 samples, 0.07%)</title><rect x="83.0892%" y="901" width="0.0677%" height="15" fill="rgb(221,84,29)" fg:x="95796" fg:w="78"/><text x="83.3392%" y="911.50"></text></g><g><title>core::ptr::write (78 samples, 0.07%)</title><rect x="83.0892%" y="885" width="0.0677%" height="15" fill="rgb(234,0,32)" fg:x="95796" fg:w="78"/><text x="83.3392%" y="895.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.06%)</title><rect x="83.0935%" y="869" width="0.0633%" height="15" fill="rgb(206,20,16)" fg:x="95801" fg:w="73"/><text x="83.3435%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (164 samples, 0.14%)</title><rect x="83.1568%" y="901" width="0.1422%" height="15" fill="rgb(244,172,18)" fg:x="95874" fg:w="164"/><text x="83.4068%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (164 samples, 0.14%)</title><rect x="83.1568%" y="885" width="0.1422%" height="15" fill="rgb(254,133,1)" fg:x="95874" fg:w="164"/><text x="83.4068%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (119 samples, 0.10%)</title><rect x="83.2991%" y="901" width="0.1032%" height="15" fill="rgb(222,206,41)" fg:x="96038" fg:w="119"/><text x="83.5491%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (115 samples, 0.10%)</title><rect x="83.3025%" y="885" width="0.0997%" height="15" fill="rgb(212,3,42)" fg:x="96042" fg:w="115"/><text x="83.5525%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (689 samples, 0.60%)</title><rect x="82.8090%" y="933" width="0.5976%" height="15" fill="rgb(241,11,4)" fg:x="95473" fg:w="689"/><text x="83.0590%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (419 samples, 0.36%)</title><rect x="83.0432%" y="917" width="0.3634%" height="15" fill="rgb(205,19,26)" fg:x="95743" fg:w="419"/><text x="83.2932%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (71 samples, 0.06%)</title><rect x="83.4136%" y="917" width="0.0616%" height="15" fill="rgb(210,179,32)" fg:x="96170" fg:w="71"/><text x="83.6636%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (65 samples, 0.06%)</title><rect x="83.4188%" y="901" width="0.0564%" height="15" fill="rgb(227,116,49)" fg:x="96176" fg:w="65"/><text x="83.6688%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.06%)</title><rect x="83.4188%" y="885" width="0.0564%" height="15" fill="rgb(211,146,6)" fg:x="96176" fg:w="65"/><text x="83.6688%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.06%)</title><rect x="83.4196%" y="869" width="0.0555%" height="15" fill="rgb(219,44,39)" fg:x="96177" fg:w="64"/><text x="83.6696%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (64 samples, 0.06%)</title><rect x="83.4196%" y="853" width="0.0555%" height="15" fill="rgb(234,128,11)" fg:x="96177" fg:w="64"/><text x="83.6696%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (64 samples, 0.06%)</title><rect x="83.4196%" y="837" width="0.0555%" height="15" fill="rgb(220,183,53)" fg:x="96177" fg:w="64"/><text x="83.6696%" y="847.50"></text></g><g><title>event_listener::Inner::lock (118 samples, 0.10%)</title><rect x="83.4847%" y="917" width="0.1023%" height="15" fill="rgb(213,219,32)" fg:x="96252" fg:w="118"/><text x="83.7347%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (116 samples, 0.10%)</title><rect x="83.4864%" y="901" width="0.1006%" height="15" fill="rgb(232,156,16)" fg:x="96254" fg:w="116"/><text x="83.7364%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (116 samples, 0.10%)</title><rect x="83.4864%" y="885" width="0.1006%" height="15" fill="rgb(246,135,34)" fg:x="96254" fg:w="116"/><text x="83.7364%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (115 samples, 0.10%)</title><rect x="83.4873%" y="869" width="0.0997%" height="15" fill="rgb(241,99,0)" fg:x="96255" fg:w="115"/><text x="83.7373%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (115 samples, 0.10%)</title><rect x="83.4873%" y="853" width="0.0997%" height="15" fill="rgb(222,103,45)" fg:x="96255" fg:w="115"/><text x="83.7373%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (17 samples, 0.01%)</title><rect x="83.5974%" y="869" width="0.0147%" height="15" fill="rgb(212,57,4)" fg:x="96382" fg:w="17"/><text x="83.8474%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.01%)</title><rect x="83.5974%" y="853" width="0.0147%" height="15" fill="rgb(215,68,47)" fg:x="96382" fg:w="17"/><text x="83.8474%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.01%)</title><rect x="83.5974%" y="837" width="0.0147%" height="15" fill="rgb(230,84,2)" fg:x="96382" fg:w="17"/><text x="83.8474%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (85 samples, 0.07%)</title><rect x="83.6217%" y="821" width="0.0737%" height="15" fill="rgb(220,102,14)" fg:x="96410" fg:w="85"/><text x="83.8717%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.07%)</title><rect x="83.6217%" y="805" width="0.0737%" height="15" fill="rgb(240,10,32)" fg:x="96410" fg:w="85"/><text x="83.8717%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (85 samples, 0.07%)</title><rect x="83.6217%" y="789" width="0.0737%" height="15" fill="rgb(215,47,27)" fg:x="96410" fg:w="85"/><text x="83.8717%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (85 samples, 0.07%)</title><rect x="83.6217%" y="773" width="0.0737%" height="15" fill="rgb(233,188,43)" fg:x="96410" fg:w="85"/><text x="83.8717%" y="783.50"></text></g><g><title>__GI___pthread_mutex_unlock (85 samples, 0.07%)</title><rect x="83.6217%" y="757" width="0.0737%" height="15" fill="rgb(253,190,1)" fg:x="96410" fg:w="85"/><text x="83.8717%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (26 samples, 0.02%)</title><rect x="83.6955%" y="821" width="0.0226%" height="15" fill="rgb(206,114,52)" fg:x="96495" fg:w="26"/><text x="83.9455%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="83.6955%" y="805" width="0.0226%" height="15" fill="rgb(233,120,37)" fg:x="96495" fg:w="26"/><text x="83.9455%" y="815.50"></text></g><g><title>async_io::reactor::Reactor::notify (25 samples, 0.02%)</title><rect x="83.7258%" y="773" width="0.0217%" height="15" fill="rgb(214,52,39)" fg:x="96530" fg:w="25"/><text x="83.9758%" y="783.50"></text></g><g><title>polling::Poller::notify (24 samples, 0.02%)</title><rect x="83.7267%" y="757" width="0.0208%" height="15" fill="rgb(223,80,29)" fg:x="96531" fg:w="24"/><text x="83.9767%" y="767.50"></text></g><g><title>polling::epoll::Poller::notify (14 samples, 0.01%)</title><rect x="83.7354%" y="741" width="0.0121%" height="15" fill="rgb(230,101,40)" fg:x="96541" fg:w="14"/><text x="83.9854%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (44 samples, 0.04%)</title><rect x="83.7770%" y="741" width="0.0382%" height="15" fill="rgb(219,211,8)" fg:x="96589" fg:w="44"/><text x="84.0270%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (44 samples, 0.04%)</title><rect x="83.7770%" y="725" width="0.0382%" height="15" fill="rgb(252,126,28)" fg:x="96589" fg:w="44"/><text x="84.0270%" y="735.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (64 samples, 0.06%)</title><rect x="83.8151%" y="741" width="0.0555%" height="15" fill="rgb(215,56,38)" fg:x="96633" fg:w="64"/><text x="84.0651%" y="751.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (64 samples, 0.06%)</title><rect x="83.8151%" y="725" width="0.0555%" height="15" fill="rgb(249,55,44)" fg:x="96633" fg:w="64"/><text x="84.0651%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (64 samples, 0.06%)</title><rect x="83.8151%" y="709" width="0.0555%" height="15" fill="rgb(220,221,32)" fg:x="96633" fg:w="64"/><text x="84.0651%" y="719.50"></text></g><g><title>__pthread_cond_signal (64 samples, 0.06%)</title><rect x="83.8151%" y="693" width="0.0555%" height="15" fill="rgb(212,216,41)" fg:x="96633" fg:w="64"/><text x="84.0651%" y="703.50"></text></g><g><title>parking::Unparker::unpark (197 samples, 0.17%)</title><rect x="83.7536%" y="773" width="0.1709%" height="15" fill="rgb(228,213,43)" fg:x="96562" fg:w="197"/><text x="84.0036%" y="783.50"></text></g><g><title>parking::Inner::unpark (182 samples, 0.16%)</title><rect x="83.7666%" y="757" width="0.1579%" height="15" fill="rgb(211,31,26)" fg:x="96577" fg:w="182"/><text x="84.0166%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.05%)</title><rect x="83.8707%" y="741" width="0.0538%" height="15" fill="rgb(229,202,19)" fg:x="96697" fg:w="62"/><text x="84.1207%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.05%)</title><rect x="83.8707%" y="725" width="0.0538%" height="15" fill="rgb(229,105,46)" fg:x="96697" fg:w="62"/><text x="84.1207%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (61 samples, 0.05%)</title><rect x="83.8715%" y="709" width="0.0529%" height="15" fill="rgb(235,108,1)" fg:x="96698" fg:w="61"/><text x="84.1215%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (61 samples, 0.05%)</title><rect x="83.8715%" y="693" width="0.0529%" height="15" fill="rgb(245,111,35)" fg:x="96698" fg:w="61"/><text x="84.1215%" y="703.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (243 samples, 0.21%)</title><rect x="83.7189%" y="789" width="0.2108%" height="15" fill="rgb(219,185,31)" fg:x="96522" fg:w="243"/><text x="83.9689%" y="799.50"></text></g><g><title>core::task::wake::Waker::wake (304 samples, 0.26%)</title><rect x="83.7180%" y="821" width="0.2637%" height="15" fill="rgb(214,4,43)" fg:x="96521" fg:w="304"/><text x="83.9680%" y="831.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (304 samples, 0.26%)</title><rect x="83.7180%" y="805" width="0.2637%" height="15" fill="rgb(235,227,40)" fg:x="96521" fg:w="304"/><text x="83.9680%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (60 samples, 0.05%)</title><rect x="83.9296%" y="789" width="0.0520%" height="15" fill="rgb(230,88,30)" fg:x="96765" fg:w="60"/><text x="84.1796%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="83.9296%" y="773" width="0.0520%" height="15" fill="rgb(216,217,1)" fg:x="96765" fg:w="60"/><text x="84.1796%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (57 samples, 0.05%)</title><rect x="83.9322%" y="757" width="0.0494%" height="15" fill="rgb(248,139,50)" fg:x="96768" fg:w="57"/><text x="84.1822%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (57 samples, 0.05%)</title><rect x="83.9322%" y="741" width="0.0494%" height="15" fill="rgb(233,1,21)" fg:x="96768" fg:w="57"/><text x="84.1822%" y="751.50"></text></g><g><title>async_executor::State::notify (512 samples, 0.44%)</title><rect x="83.6148%" y="837" width="0.4441%" height="15" fill="rgb(215,183,12)" fg:x="96402" fg:w="512"/><text x="83.8648%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (89 samples, 0.08%)</title><rect x="83.9817%" y="821" width="0.0772%" height="15" fill="rgb(229,104,42)" fg:x="96825" fg:w="89"/><text x="84.2317%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (86 samples, 0.07%)</title><rect x="83.9843%" y="805" width="0.0746%" height="15" fill="rgb(243,34,48)" fg:x="96828" fg:w="86"/><text x="84.2343%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (77 samples, 0.07%)</title><rect x="83.9921%" y="789" width="0.0668%" height="15" fill="rgb(239,11,44)" fg:x="96837" fg:w="77"/><text x="84.2421%" y="799.50"></text></g><g><title>__GI___pthread_mutex_lock (77 samples, 0.07%)</title><rect x="83.9921%" y="773" width="0.0668%" height="15" fill="rgb(231,98,35)" fg:x="96837" fg:w="77"/><text x="84.2421%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (67 samples, 0.06%)</title><rect x="84.0675%" y="805" width="0.0581%" height="15" fill="rgb(233,28,25)" fg:x="96924" fg:w="67"/><text x="84.3175%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (67 samples, 0.06%)</title><rect x="84.0675%" y="789" width="0.0581%" height="15" fill="rgb(234,123,11)" fg:x="96924" fg:w="67"/><text x="84.3175%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (27 samples, 0.02%)</title><rect x="84.1257%" y="805" width="0.0234%" height="15" fill="rgb(220,69,3)" fg:x="96991" fg:w="27"/><text x="84.3757%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_or (27 samples, 0.02%)</title><rect x="84.1257%" y="789" width="0.0234%" height="15" fill="rgb(214,64,36)" fg:x="96991" fg:w="27"/><text x="84.3757%" y="799.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (620 samples, 0.54%)</title><rect x="83.6148%" y="853" width="0.5378%" height="15" fill="rgb(211,138,32)" fg:x="96402" fg:w="620"/><text x="83.8648%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (108 samples, 0.09%)</title><rect x="84.0589%" y="837" width="0.0937%" height="15" fill="rgb(213,118,47)" fg:x="96914" fg:w="108"/><text x="84.3089%" y="847.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (106 samples, 0.09%)</title><rect x="84.0606%" y="821" width="0.0919%" height="15" fill="rgb(243,124,49)" fg:x="96916" fg:w="106"/><text x="84.3106%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (102 samples, 0.09%)</title><rect x="84.1526%" y="853" width="0.0885%" height="15" fill="rgb(221,30,28)" fg:x="97022" fg:w="102"/><text x="84.4026%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (102 samples, 0.09%)</title><rect x="84.1526%" y="837" width="0.0885%" height="15" fill="rgb(246,37,13)" fg:x="97022" fg:w="102"/><text x="84.4026%" y="847.50"></text></g><g><title>event_listener::List::notify (755 samples, 0.65%)</title><rect x="83.5870%" y="917" width="0.6549%" height="15" fill="rgb(249,66,14)" fg:x="96370" fg:w="755"/><text x="83.8370%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (748 samples, 0.65%)</title><rect x="83.5931%" y="901" width="0.6488%" height="15" fill="rgb(213,166,5)" fg:x="96377" fg:w="748"/><text x="83.8431%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (748 samples, 0.65%)</title><rect x="83.5931%" y="885" width="0.6488%" height="15" fill="rgb(221,66,24)" fg:x="96377" fg:w="748"/><text x="83.8431%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (726 samples, 0.63%)</title><rect x="83.6122%" y="869" width="0.6297%" height="15" fill="rgb(210,132,17)" fg:x="96399" fg:w="726"/><text x="83.8622%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,388 samples, 2.07%)</title><rect x="82.8038%" y="949" width="2.0712%" height="15" fill="rgb(243,202,5)" fg:x="95467" fg:w="2388"/><text x="83.0538%" y="959.50">a..</text></g><g><title>event_listener::Event::notify (1,693 samples, 1.47%)</title><rect x="83.4066%" y="933" width="1.4684%" height="15" fill="rgb(233,70,48)" fg:x="96162" fg:w="1693"/><text x="83.6566%" y="943.50"></text></g><g><title>event_listener::full_fence (730 samples, 0.63%)</title><rect x="84.2419%" y="917" width="0.6332%" height="15" fill="rgb(238,41,26)" fg:x="97125" fg:w="730"/><text x="84.4919%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (722 samples, 0.63%)</title><rect x="84.2488%" y="901" width="0.6262%" height="15" fill="rgb(241,19,31)" fg:x="97133" fg:w="722"/><text x="84.4988%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (722 samples, 0.63%)</title><rect x="84.2488%" y="885" width="0.6262%" height="15" fill="rgb(214,76,10)" fg:x="97133" fg:w="722"/><text x="84.4988%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (12 samples, 0.01%)</title><rect x="84.8751%" y="949" width="0.0104%" height="15" fill="rgb(254,202,22)" fg:x="97855" fg:w="12"/><text x="85.1251%" y="959.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,516 samples, 2.18%)</title><rect x="82.7787%" y="965" width="2.1823%" height="15" fill="rgb(214,72,24)" fg:x="95438" fg:w="2516"/><text x="83.0287%" y="975.50">&lt;..</text></g><g><title>event_listener::Event::notify (86 samples, 0.07%)</title><rect x="84.8863%" y="949" width="0.0746%" height="15" fill="rgb(221,92,46)" fg:x="97868" fg:w="86"/><text x="85.1363%" y="959.50"></text></g><g><title>event_listener::full_fence (82 samples, 0.07%)</title><rect x="84.8898%" y="933" width="0.0711%" height="15" fill="rgb(246,13,50)" fg:x="97872" fg:w="82"/><text x="85.1398%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (82 samples, 0.07%)</title><rect x="84.8898%" y="917" width="0.0711%" height="15" fill="rgb(240,165,38)" fg:x="97872" fg:w="82"/><text x="85.1398%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (82 samples, 0.07%)</title><rect x="84.8898%" y="901" width="0.0711%" height="15" fill="rgb(241,24,51)" fg:x="97872" fg:w="82"/><text x="85.1398%" y="911.50"></text></g><g><title>[libc-2.31.so] (312 samples, 0.27%)</title><rect x="84.9635%" y="965" width="0.2706%" height="15" fill="rgb(227,51,44)" fg:x="97957" fg:w="312"/><text x="85.2135%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (16,000 samples, 13.88%)</title><rect x="71.3643%" y="1045" width="13.8777%" height="15" fill="rgb(231,121,3)" fg:x="82278" fg:w="16000"/><text x="71.6143%" y="1055.50">tremor_runtime::pipel..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,743 samples, 11.05%)</title><rect x="74.1892%" y="1029" width="11.0527%" height="15" fill="rgb(245,3,41)" fg:x="85535" fg:w="12743"/><text x="74.4392%" y="1039.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,952 samples, 2.56%)</title><rect x="82.6815%" y="1013" width="2.5604%" height="15" fill="rgb(214,13,26)" fg:x="95326" fg:w="2952"/><text x="82.9315%" y="1023.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,952 samples, 2.56%)</title><rect x="82.6815%" y="997" width="2.5604%" height="15" fill="rgb(252,75,11)" fg:x="95326" fg:w="2952"/><text x="82.9315%" y="1007.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,888 samples, 2.50%)</title><rect x="82.7370%" y="981" width="2.5049%" height="15" fill="rgb(218,226,17)" fg:x="95390" fg:w="2888"/><text x="82.9870%" y="991.50">tr..</text></g><g><title>tremor_runtime::postprocessor::postprocess (36 samples, 0.03%)</title><rect x="85.2419%" y="1045" width="0.0312%" height="15" fill="rgb(248,89,38)" fg:x="98278" fg:w="36"/><text x="85.4919%" y="1055.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (44 samples, 0.04%)</title><rect x="85.5820%" y="629" width="0.0382%" height="15" fill="rgb(237,73,46)" fg:x="98670" fg:w="44"/><text x="85.8320%" y="639.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (42 samples, 0.04%)</title><rect x="85.5837%" y="613" width="0.0364%" height="15" fill="rgb(242,78,33)" fg:x="98672" fg:w="42"/><text x="85.8337%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (42 samples, 0.04%)</title><rect x="85.5837%" y="597" width="0.0364%" height="15" fill="rgb(235,60,3)" fg:x="98672" fg:w="42"/><text x="85.8337%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (28 samples, 0.02%)</title><rect x="85.5958%" y="581" width="0.0243%" height="15" fill="rgb(216,172,19)" fg:x="98686" fg:w="28"/><text x="85.8458%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (28 samples, 0.02%)</title><rect x="85.5958%" y="565" width="0.0243%" height="15" fill="rgb(227,6,42)" fg:x="98686" fg:w="28"/><text x="85.8458%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (28 samples, 0.02%)</title><rect x="85.5958%" y="549" width="0.0243%" height="15" fill="rgb(223,207,42)" fg:x="98686" fg:w="28"/><text x="85.8458%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.02%)</title><rect x="85.5993%" y="533" width="0.0208%" height="15" fill="rgb(246,138,30)" fg:x="98690" fg:w="24"/><text x="85.8493%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (24 samples, 0.02%)</title><rect x="85.5993%" y="517" width="0.0208%" height="15" fill="rgb(251,199,47)" fg:x="98690" fg:w="24"/><text x="85.8493%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.02%)</title><rect x="85.5993%" y="501" width="0.0208%" height="15" fill="rgb(228,218,44)" fg:x="98690" fg:w="24"/><text x="85.8493%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (24 samples, 0.02%)</title><rect x="85.5993%" y="485" width="0.0208%" height="15" fill="rgb(220,68,6)" fg:x="98690" fg:w="24"/><text x="85.8493%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (24 samples, 0.02%)</title><rect x="85.5993%" y="469" width="0.0208%" height="15" fill="rgb(240,60,26)" fg:x="98690" fg:w="24"/><text x="85.8493%" y="479.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="85.6045%" y="453" width="0.0156%" height="15" fill="rgb(211,200,19)" fg:x="98696" fg:w="18"/><text x="85.8545%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (48 samples, 0.04%)</title><rect x="85.5820%" y="645" width="0.0416%" height="15" fill="rgb(242,145,30)" fg:x="98670" fg:w="48"/><text x="85.8320%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (91 samples, 0.08%)</title><rect x="85.5629%" y="821" width="0.0789%" height="15" fill="rgb(225,64,13)" fg:x="98648" fg:w="91"/><text x="85.8129%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (90 samples, 0.08%)</title><rect x="85.5637%" y="805" width="0.0781%" height="15" fill="rgb(218,103,35)" fg:x="98649" fg:w="90"/><text x="85.8137%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (90 samples, 0.08%)</title><rect x="85.5637%" y="789" width="0.0781%" height="15" fill="rgb(216,93,46)" fg:x="98649" fg:w="90"/><text x="85.8137%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (90 samples, 0.08%)</title><rect x="85.5637%" y="773" width="0.0781%" height="15" fill="rgb(225,159,27)" fg:x="98649" fg:w="90"/><text x="85.8137%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (76 samples, 0.07%)</title><rect x="85.5759%" y="757" width="0.0659%" height="15" fill="rgb(225,204,11)" fg:x="98663" fg:w="76"/><text x="85.8259%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (76 samples, 0.07%)</title><rect x="85.5759%" y="741" width="0.0659%" height="15" fill="rgb(205,56,4)" fg:x="98663" fg:w="76"/><text x="85.8259%" y="751.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (76 samples, 0.07%)</title><rect x="85.5759%" y="725" width="0.0659%" height="15" fill="rgb(206,6,35)" fg:x="98663" fg:w="76"/><text x="85.8259%" y="735.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (76 samples, 0.07%)</title><rect x="85.5759%" y="709" width="0.0659%" height="15" fill="rgb(247,73,52)" fg:x="98663" fg:w="76"/><text x="85.8259%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (75 samples, 0.07%)</title><rect x="85.5767%" y="693" width="0.0651%" height="15" fill="rgb(246,97,4)" fg:x="98664" fg:w="75"/><text x="85.8267%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (75 samples, 0.07%)</title><rect x="85.5767%" y="677" width="0.0651%" height="15" fill="rgb(212,37,15)" fg:x="98664" fg:w="75"/><text x="85.8267%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (75 samples, 0.07%)</title><rect x="85.5767%" y="661" width="0.0651%" height="15" fill="rgb(208,130,40)" fg:x="98664" fg:w="75"/><text x="85.8267%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (290 samples, 0.25%)</title><rect x="85.3989%" y="837" width="0.2515%" height="15" fill="rgb(236,55,29)" fg:x="98459" fg:w="290"/><text x="85.6489%" y="847.50"></text></g><g><title>tremor_script::ast::Script::run (431 samples, 0.37%)</title><rect x="85.2801%" y="1045" width="0.3738%" height="15" fill="rgb(209,156,45)" fg:x="98322" fg:w="431"/><text x="85.5301%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (420 samples, 0.36%)</title><rect x="85.2897%" y="1029" width="0.3643%" height="15" fill="rgb(249,107,4)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (420 samples, 0.36%)</title><rect x="85.2897%" y="1013" width="0.3643%" height="15" fill="rgb(227,7,13)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (420 samples, 0.36%)</title><rect x="85.2897%" y="997" width="0.3643%" height="15" fill="rgb(250,129,14)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (420 samples, 0.36%)</title><rect x="85.2897%" y="981" width="0.3643%" height="15" fill="rgb(229,92,13)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (420 samples, 0.36%)</title><rect x="85.2897%" y="965" width="0.3643%" height="15" fill="rgb(245,98,39)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (420 samples, 0.36%)</title><rect x="85.2897%" y="949" width="0.3643%" height="15" fill="rgb(234,135,48)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve (420 samples, 0.36%)</title><rect x="85.2897%" y="933" width="0.3643%" height="15" fill="rgb(230,98,28)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="943.50"></text></g><g><title>tremor_script::interpreter::resolve_value (420 samples, 0.36%)</title><rect x="85.2897%" y="917" width="0.3643%" height="15" fill="rgb(223,121,0)" fg:x="98333" fg:w="420"/><text x="85.5397%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (310 samples, 0.27%)</title><rect x="85.3851%" y="901" width="0.2689%" height="15" fill="rgb(234,173,33)" fg:x="98443" fg:w="310"/><text x="85.6351%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (309 samples, 0.27%)</title><rect x="85.3859%" y="885" width="0.2680%" height="15" fill="rgb(245,47,8)" fg:x="98444" fg:w="309"/><text x="85.6359%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (309 samples, 0.27%)</title><rect x="85.3859%" y="869" width="0.2680%" height="15" fill="rgb(205,17,20)" fg:x="98444" fg:w="309"/><text x="85.6359%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (309 samples, 0.27%)</title><rect x="85.3859%" y="853" width="0.2680%" height="15" fill="rgb(232,151,16)" fg:x="98444" fg:w="309"/><text x="85.6359%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (35 samples, 0.03%)</title><rect x="85.6539%" y="1045" width="0.0304%" height="15" fill="rgb(208,30,32)" fg:x="98753" fg:w="35"/><text x="85.9039%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (17 samples, 0.01%)</title><rect x="85.6843%" y="1045" width="0.0147%" height="15" fill="rgb(254,26,3)" fg:x="98788" fg:w="17"/><text x="85.9343%" y="1055.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (28 samples, 0.02%)</title><rect x="85.7546%" y="645" width="0.0243%" height="15" fill="rgb(240,177,30)" fg:x="98869" fg:w="28"/><text x="86.0046%" y="655.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (28 samples, 0.02%)</title><rect x="85.7546%" y="629" width="0.0243%" height="15" fill="rgb(248,76,44)" fg:x="98869" fg:w="28"/><text x="86.0046%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="85.7546%" y="613" width="0.0243%" height="15" fill="rgb(241,186,54)" fg:x="98869" fg:w="28"/><text x="86.0046%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (29 samples, 0.03%)</title><rect x="85.7546%" y="661" width="0.0252%" height="15" fill="rgb(249,171,29)" fg:x="98869" fg:w="29"/><text x="86.0046%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (94 samples, 0.08%)</title><rect x="85.6999%" y="1045" width="0.0815%" height="15" fill="rgb(237,151,44)" fg:x="98806" fg:w="94"/><text x="85.9499%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (71 samples, 0.06%)</title><rect x="85.7199%" y="1029" width="0.0616%" height="15" fill="rgb(228,174,30)" fg:x="98829" fg:w="71"/><text x="85.9699%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (71 samples, 0.06%)</title><rect x="85.7199%" y="1013" width="0.0616%" height="15" fill="rgb(252,14,37)" fg:x="98829" fg:w="71"/><text x="85.9699%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (71 samples, 0.06%)</title><rect x="85.7199%" y="997" width="0.0616%" height="15" fill="rgb(207,111,40)" fg:x="98829" fg:w="71"/><text x="85.9699%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (71 samples, 0.06%)</title><rect x="85.7199%" y="981" width="0.0616%" height="15" fill="rgb(248,171,54)" fg:x="98829" fg:w="71"/><text x="85.9699%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (71 samples, 0.06%)</title><rect x="85.7199%" y="965" width="0.0616%" height="15" fill="rgb(211,127,2)" fg:x="98829" fg:w="71"/><text x="85.9699%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve (71 samples, 0.06%)</title><rect x="85.7199%" y="949" width="0.0616%" height="15" fill="rgb(236,87,47)" fg:x="98829" fg:w="71"/><text x="85.9699%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve_value (71 samples, 0.06%)</title><rect x="85.7199%" y="933" width="0.0616%" height="15" fill="rgb(223,190,45)" fg:x="98829" fg:w="71"/><text x="85.9699%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (58 samples, 0.05%)</title><rect x="85.7311%" y="917" width="0.0503%" height="15" fill="rgb(215,5,16)" fg:x="98842" fg:w="58"/><text x="85.9811%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (57 samples, 0.05%)</title><rect x="85.7320%" y="901" width="0.0494%" height="15" fill="rgb(252,82,33)" fg:x="98843" fg:w="57"/><text x="85.9820%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (57 samples, 0.05%)</title><rect x="85.7320%" y="885" width="0.0494%" height="15" fill="rgb(247,213,44)" fg:x="98843" fg:w="57"/><text x="85.9820%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (57 samples, 0.05%)</title><rect x="85.7320%" y="869" width="0.0494%" height="15" fill="rgb(205,196,44)" fg:x="98843" fg:w="57"/><text x="85.9820%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (57 samples, 0.05%)</title><rect x="85.7320%" y="853" width="0.0494%" height="15" fill="rgb(237,96,54)" fg:x="98843" fg:w="57"/><text x="85.9820%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (36 samples, 0.03%)</title><rect x="85.7502%" y="837" width="0.0312%" height="15" fill="rgb(230,113,34)" fg:x="98864" fg:w="36"/><text x="86.0002%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (36 samples, 0.03%)</title><rect x="85.7502%" y="821" width="0.0312%" height="15" fill="rgb(221,224,12)" fg:x="98864" fg:w="36"/><text x="86.0002%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (36 samples, 0.03%)</title><rect x="85.7502%" y="805" width="0.0312%" height="15" fill="rgb(219,112,44)" fg:x="98864" fg:w="36"/><text x="86.0002%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (36 samples, 0.03%)</title><rect x="85.7502%" y="789" width="0.0312%" height="15" fill="rgb(210,31,13)" fg:x="98864" fg:w="36"/><text x="86.0002%" y="799.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (33 samples, 0.03%)</title><rect x="85.7528%" y="773" width="0.0286%" height="15" fill="rgb(230,25,16)" fg:x="98867" fg:w="33"/><text x="86.0028%" y="783.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (33 samples, 0.03%)</title><rect x="85.7528%" y="757" width="0.0286%" height="15" fill="rgb(246,108,53)" fg:x="98867" fg:w="33"/><text x="86.0028%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (33 samples, 0.03%)</title><rect x="85.7528%" y="741" width="0.0286%" height="15" fill="rgb(241,172,50)" fg:x="98867" fg:w="33"/><text x="86.0028%" y="751.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (33 samples, 0.03%)</title><rect x="85.7528%" y="725" width="0.0286%" height="15" fill="rgb(235,141,10)" fg:x="98867" fg:w="33"/><text x="86.0028%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (32 samples, 0.03%)</title><rect x="85.7537%" y="709" width="0.0278%" height="15" fill="rgb(220,174,43)" fg:x="98868" fg:w="32"/><text x="86.0037%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (32 samples, 0.03%)</title><rect x="85.7537%" y="693" width="0.0278%" height="15" fill="rgb(215,181,40)" fg:x="98868" fg:w="32"/><text x="86.0037%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (32 samples, 0.03%)</title><rect x="85.7537%" y="677" width="0.0278%" height="15" fill="rgb(230,97,2)" fg:x="98868" fg:w="32"/><text x="86.0037%" y="687.50"></text></g><g><title>tremor_script::interpreter::val_eq (54 samples, 0.05%)</title><rect x="85.7953%" y="1045" width="0.0468%" height="15" fill="rgb(211,25,27)" fg:x="98916" fg:w="54"/><text x="86.0453%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (28 samples, 0.02%)</title><rect x="85.8656%" y="677" width="0.0243%" height="15" fill="rgb(230,87,26)" fg:x="98997" fg:w="28"/><text x="86.1156%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (28 samples, 0.02%)</title><rect x="85.8656%" y="661" width="0.0243%" height="15" fill="rgb(227,160,17)" fg:x="98997" fg:w="28"/><text x="86.1156%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (24 samples, 0.02%)</title><rect x="85.8690%" y="645" width="0.0208%" height="15" fill="rgb(244,85,34)" fg:x="99001" fg:w="24"/><text x="86.1190%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (23 samples, 0.02%)</title><rect x="85.8699%" y="629" width="0.0199%" height="15" fill="rgb(207,70,0)" fg:x="99002" fg:w="23"/><text x="86.1199%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (12 samples, 0.01%)</title><rect x="85.8795%" y="613" width="0.0104%" height="15" fill="rgb(223,129,7)" fg:x="99013" fg:w="12"/><text x="86.1295%" y="623.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (65 samples, 0.06%)</title><rect x="85.8422%" y="917" width="0.0564%" height="15" fill="rgb(246,105,7)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (65 samples, 0.06%)</title><rect x="85.8422%" y="901" width="0.0564%" height="15" fill="rgb(215,154,42)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (65 samples, 0.06%)</title><rect x="85.8422%" y="885" width="0.0564%" height="15" fill="rgb(220,215,30)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (65 samples, 0.06%)</title><rect x="85.8422%" y="869" width="0.0564%" height="15" fill="rgb(228,81,51)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (65 samples, 0.06%)</title><rect x="85.8422%" y="853" width="0.0564%" height="15" fill="rgb(247,71,54)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (65 samples, 0.06%)</title><rect x="85.8422%" y="837" width="0.0564%" height="15" fill="rgb(234,176,34)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (65 samples, 0.06%)</title><rect x="85.8422%" y="821" width="0.0564%" height="15" fill="rgb(241,103,54)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (65 samples, 0.06%)</title><rect x="85.8422%" y="805" width="0.0564%" height="15" fill="rgb(228,22,34)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (65 samples, 0.06%)</title><rect x="85.8422%" y="789" width="0.0564%" height="15" fill="rgb(241,179,48)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (65 samples, 0.06%)</title><rect x="85.8422%" y="773" width="0.0564%" height="15" fill="rgb(235,167,37)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (65 samples, 0.06%)</title><rect x="85.8422%" y="757" width="0.0564%" height="15" fill="rgb(213,109,30)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (65 samples, 0.06%)</title><rect x="85.8422%" y="741" width="0.0564%" height="15" fill="rgb(222,172,16)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (65 samples, 0.06%)</title><rect x="85.8422%" y="725" width="0.0564%" height="15" fill="rgb(233,192,5)" fg:x="98970" fg:w="65"/><text x="86.0922%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (52 samples, 0.05%)</title><rect x="85.8534%" y="709" width="0.0451%" height="15" fill="rgb(247,189,41)" fg:x="98983" fg:w="52"/><text x="86.1034%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (41 samples, 0.04%)</title><rect x="85.8630%" y="693" width="0.0356%" height="15" fill="rgb(218,134,47)" fg:x="98994" fg:w="41"/><text x="86.1130%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (72 samples, 0.06%)</title><rect x="85.8422%" y="949" width="0.0624%" height="15" fill="rgb(216,29,3)" fg:x="98970" fg:w="72"/><text x="86.0922%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (72 samples, 0.06%)</title><rect x="85.8422%" y="933" width="0.0624%" height="15" fill="rgb(246,140,12)" fg:x="98970" fg:w="72"/><text x="86.0922%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (131 samples, 0.11%)</title><rect x="85.8422%" y="965" width="0.1136%" height="15" fill="rgb(230,136,11)" fg:x="98970" fg:w="131"/><text x="86.0922%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (59 samples, 0.05%)</title><rect x="85.9046%" y="949" width="0.0512%" height="15" fill="rgb(247,22,47)" fg:x="99042" fg:w="59"/><text x="86.1546%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (59 samples, 0.05%)</title><rect x="85.9046%" y="933" width="0.0512%" height="15" fill="rgb(218,84,22)" fg:x="99042" fg:w="59"/><text x="86.1546%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (59 samples, 0.05%)</title><rect x="85.9046%" y="917" width="0.0512%" height="15" fill="rgb(216,87,39)" fg:x="99042" fg:w="59"/><text x="86.1546%" y="927.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (59 samples, 0.05%)</title><rect x="85.9046%" y="901" width="0.0512%" height="15" fill="rgb(221,178,8)" fg:x="99042" fg:w="59"/><text x="86.1546%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve (59 samples, 0.05%)</title><rect x="85.9046%" y="885" width="0.0512%" height="15" fill="rgb(230,42,11)" fg:x="99042" fg:w="59"/><text x="86.1546%" y="895.50"></text></g><g><title>tremor_script::interpreter::resolve_value (59 samples, 0.05%)</title><rect x="85.9046%" y="869" width="0.0512%" height="15" fill="rgb(237,229,4)" fg:x="99042" fg:w="59"/><text x="86.1546%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (48 samples, 0.04%)</title><rect x="85.9141%" y="853" width="0.0416%" height="15" fill="rgb(222,31,33)" fg:x="99053" fg:w="48"/><text x="86.1641%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (48 samples, 0.04%)</title><rect x="85.9141%" y="837" width="0.0416%" height="15" fill="rgb(210,17,39)" fg:x="99053" fg:w="48"/><text x="86.1641%" y="847.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (48 samples, 0.04%)</title><rect x="85.9141%" y="821" width="0.0416%" height="15" fill="rgb(244,93,20)" fg:x="99053" fg:w="48"/><text x="86.1641%" y="831.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (48 samples, 0.04%)</title><rect x="85.9141%" y="805" width="0.0416%" height="15" fill="rgb(210,40,47)" fg:x="99053" fg:w="48"/><text x="86.1641%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (48 samples, 0.04%)</title><rect x="85.9141%" y="789" width="0.0416%" height="15" fill="rgb(239,211,47)" fg:x="99053" fg:w="48"/><text x="86.1641%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (18 samples, 0.02%)</title><rect x="85.9402%" y="773" width="0.0156%" height="15" fill="rgb(251,223,49)" fg:x="99083" fg:w="18"/><text x="86.1902%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (17 samples, 0.01%)</title><rect x="85.9410%" y="757" width="0.0147%" height="15" fill="rgb(221,149,5)" fg:x="99084" fg:w="17"/><text x="86.1910%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (17 samples, 0.01%)</title><rect x="85.9410%" y="741" width="0.0147%" height="15" fill="rgb(219,224,51)" fg:x="99084" fg:w="17"/><text x="86.1910%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (17 samples, 0.01%)</title><rect x="85.9410%" y="725" width="0.0147%" height="15" fill="rgb(223,7,8)" fg:x="99084" fg:w="17"/><text x="86.1910%" y="735.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="85.9428%" y="709" width="0.0130%" height="15" fill="rgb(241,217,22)" fg:x="99086" fg:w="15"/><text x="86.1928%" y="719.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="85.9428%" y="693" width="0.0130%" height="15" fill="rgb(248,209,0)" fg:x="99086" fg:w="15"/><text x="86.1928%" y="703.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (15 samples, 0.01%)</title><rect x="85.9428%" y="677" width="0.0130%" height="15" fill="rgb(217,205,4)" fg:x="99086" fg:w="15"/><text x="86.1928%" y="687.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (15 samples, 0.01%)</title><rect x="85.9428%" y="661" width="0.0130%" height="15" fill="rgb(228,124,39)" fg:x="99086" fg:w="15"/><text x="86.1928%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (15 samples, 0.01%)</title><rect x="85.9428%" y="645" width="0.0130%" height="15" fill="rgb(250,116,42)" fg:x="99086" fg:w="15"/><text x="86.1928%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (15 samples, 0.01%)</title><rect x="85.9428%" y="629" width="0.0130%" height="15" fill="rgb(223,202,9)" fg:x="99086" fg:w="15"/><text x="86.1928%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (15 samples, 0.01%)</title><rect x="85.9428%" y="613" width="0.0130%" height="15" fill="rgb(242,222,40)" fg:x="99086" fg:w="15"/><text x="86.1928%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.01%)</title><rect x="85.9436%" y="597" width="0.0121%" height="15" fill="rgb(229,99,46)" fg:x="99087" fg:w="14"/><text x="86.1936%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (14 samples, 0.01%)</title><rect x="85.9436%" y="581" width="0.0121%" height="15" fill="rgb(225,56,46)" fg:x="99087" fg:w="14"/><text x="86.1936%" y="591.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (13 samples, 0.01%)</title><rect x="85.9445%" y="565" width="0.0113%" height="15" fill="rgb(227,94,5)" fg:x="99088" fg:w="13"/><text x="86.1945%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="85.9445%" y="549" width="0.0113%" height="15" fill="rgb(205,112,38)" fg:x="99088" fg:w="13"/><text x="86.1945%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (13 samples, 0.01%)</title><rect x="85.9445%" y="533" width="0.0113%" height="15" fill="rgb(231,133,46)" fg:x="99088" fg:w="13"/><text x="86.1945%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (13 samples, 0.01%)</title><rect x="85.9445%" y="517" width="0.0113%" height="15" fill="rgb(217,16,9)" fg:x="99088" fg:w="13"/><text x="86.1945%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (13 samples, 0.01%)</title><rect x="85.9445%" y="501" width="0.0113%" height="15" fill="rgb(249,173,9)" fg:x="99088" fg:w="13"/><text x="86.1945%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="85.9454%" y="485" width="0.0104%" height="15" fill="rgb(205,163,53)" fg:x="99089" fg:w="12"/><text x="86.1954%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (12 samples, 0.01%)</title><rect x="85.9454%" y="469" width="0.0104%" height="15" fill="rgb(217,54,41)" fg:x="99089" fg:w="12"/><text x="86.1954%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="85.9454%" y="453" width="0.0104%" height="15" fill="rgb(228,216,12)" fg:x="99089" fg:w="12"/><text x="86.1954%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (12 samples, 0.01%)</title><rect x="85.9454%" y="437" width="0.0104%" height="15" fill="rgb(244,228,15)" fg:x="99089" fg:w="12"/><text x="86.1954%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12 samples, 0.01%)</title><rect x="85.9454%" y="421" width="0.0104%" height="15" fill="rgb(221,176,53)" fg:x="99089" fg:w="12"/><text x="86.1954%" y="431.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="85.9454%" y="405" width="0.0104%" height="15" fill="rgb(205,94,34)" fg:x="99089" fg:w="12"/><text x="86.1954%" y="415.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (17 samples, 0.01%)</title><rect x="85.9558%" y="917" width="0.0147%" height="15" fill="rgb(213,110,48)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (17 samples, 0.01%)</title><rect x="85.9558%" y="901" width="0.0147%" height="15" fill="rgb(236,142,28)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (17 samples, 0.01%)</title><rect x="85.9558%" y="885" width="0.0147%" height="15" fill="rgb(225,135,29)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (17 samples, 0.01%)</title><rect x="85.9558%" y="869" width="0.0147%" height="15" fill="rgb(252,45,31)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (17 samples, 0.01%)</title><rect x="85.9558%" y="853" width="0.0147%" height="15" fill="rgb(211,187,50)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (17 samples, 0.01%)</title><rect x="85.9558%" y="837" width="0.0147%" height="15" fill="rgb(229,109,7)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (17 samples, 0.01%)</title><rect x="85.9558%" y="821" width="0.0147%" height="15" fill="rgb(251,131,51)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (17 samples, 0.01%)</title><rect x="85.9558%" y="805" width="0.0147%" height="15" fill="rgb(251,180,35)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (17 samples, 0.01%)</title><rect x="85.9558%" y="789" width="0.0147%" height="15" fill="rgb(211,46,32)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (17 samples, 0.01%)</title><rect x="85.9558%" y="773" width="0.0147%" height="15" fill="rgb(248,123,17)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (17 samples, 0.01%)</title><rect x="85.9558%" y="757" width="0.0147%" height="15" fill="rgb(227,141,18)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (17 samples, 0.01%)</title><rect x="85.9558%" y="741" width="0.0147%" height="15" fill="rgb(216,102,9)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="751.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (17 samples, 0.01%)</title><rect x="85.9558%" y="725" width="0.0147%" height="15" fill="rgb(253,47,13)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (17 samples, 0.01%)</title><rect x="85.9558%" y="709" width="0.0147%" height="15" fill="rgb(226,93,23)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (17 samples, 0.01%)</title><rect x="85.9558%" y="693" width="0.0147%" height="15" fill="rgb(247,104,17)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="85.9558%" y="677" width="0.0147%" height="15" fill="rgb(233,203,26)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="85.9558%" y="661" width="0.0147%" height="15" fill="rgb(244,98,49)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (17 samples, 0.01%)</title><rect x="85.9558%" y="645" width="0.0147%" height="15" fill="rgb(235,134,22)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (17 samples, 0.01%)</title><rect x="85.9558%" y="629" width="0.0147%" height="15" fill="rgb(221,70,32)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (17 samples, 0.01%)</title><rect x="85.9558%" y="613" width="0.0147%" height="15" fill="rgb(238,15,50)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (17 samples, 0.01%)</title><rect x="85.9558%" y="597" width="0.0147%" height="15" fill="rgb(215,221,48)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (17 samples, 0.01%)</title><rect x="85.9558%" y="581" width="0.0147%" height="15" fill="rgb(236,73,3)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="591.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (17 samples, 0.01%)</title><rect x="85.9558%" y="565" width="0.0147%" height="15" fill="rgb(250,107,11)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="85.9558%" y="549" width="0.0147%" height="15" fill="rgb(242,39,14)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="559.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="85.9558%" y="533" width="0.0147%" height="15" fill="rgb(248,164,37)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="543.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="85.9558%" y="517" width="0.0147%" height="15" fill="rgb(217,60,12)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="85.9558%" y="501" width="0.0147%" height="15" fill="rgb(240,125,29)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="511.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="85.9558%" y="485" width="0.0147%" height="15" fill="rgb(208,207,28)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="85.9558%" y="469" width="0.0147%" height="15" fill="rgb(209,159,27)" fg:x="99101" fg:w="17"/><text x="86.2058%" y="479.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (184 samples, 0.16%)</title><rect x="85.8422%" y="1045" width="0.1596%" height="15" fill="rgb(251,176,53)" fg:x="98970" fg:w="184"/><text x="86.0922%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (184 samples, 0.16%)</title><rect x="85.8422%" y="1029" width="0.1596%" height="15" fill="rgb(211,85,7)" fg:x="98970" fg:w="184"/><text x="86.0922%" y="1039.50"></text></g><g><title>tremor_script::script::Script::run (184 samples, 0.16%)</title><rect x="85.8422%" y="1013" width="0.1596%" height="15" fill="rgb(216,64,54)" fg:x="98970" fg:w="184"/><text x="86.0922%" y="1023.50"></text></g><g><title>tremor_script::ast::Script::run (184 samples, 0.16%)</title><rect x="85.8422%" y="997" width="0.1596%" height="15" fill="rgb(217,54,24)" fg:x="98970" fg:w="184"/><text x="86.0922%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (184 samples, 0.16%)</title><rect x="85.8422%" y="981" width="0.1596%" height="15" fill="rgb(208,206,53)" fg:x="98970" fg:w="184"/><text x="86.0922%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (53 samples, 0.05%)</title><rect x="85.9558%" y="965" width="0.0460%" height="15" fill="rgb(251,74,39)" fg:x="99101" fg:w="53"/><text x="86.2058%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (53 samples, 0.05%)</title><rect x="85.9558%" y="949" width="0.0460%" height="15" fill="rgb(226,47,5)" fg:x="99101" fg:w="53"/><text x="86.2058%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (53 samples, 0.05%)</title><rect x="85.9558%" y="933" width="0.0460%" height="15" fill="rgb(234,111,33)" fg:x="99101" fg:w="53"/><text x="86.2058%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (36 samples, 0.03%)</title><rect x="85.9705%" y="917" width="0.0312%" height="15" fill="rgb(251,14,10)" fg:x="99118" fg:w="36"/><text x="86.2205%" y="927.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (36 samples, 0.03%)</title><rect x="85.9705%" y="901" width="0.0312%" height="15" fill="rgb(232,43,0)" fg:x="99118" fg:w="36"/><text x="86.2205%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve (36 samples, 0.03%)</title><rect x="85.9705%" y="885" width="0.0312%" height="15" fill="rgb(222,68,43)" fg:x="99118" fg:w="36"/><text x="86.2205%" y="895.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (20 samples, 0.02%)</title><rect x="86.0061%" y="1045" width="0.0173%" height="15" fill="rgb(217,24,23)" fg:x="99159" fg:w="20"/><text x="86.2561%" y="1055.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (214 samples, 0.19%)</title><rect x="86.0234%" y="1045" width="0.1856%" height="15" fill="rgb(229,209,14)" fg:x="99179" fg:w="214"/><text x="86.2734%" y="1055.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (37 samples, 0.03%)</title><rect x="86.3331%" y="1013" width="0.0321%" height="15" fill="rgb(250,149,48)" fg:x="99536" fg:w="37"/><text x="86.5831%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (14 samples, 0.01%)</title><rect x="86.3652%" y="1013" width="0.0121%" height="15" fill="rgb(210,120,37)" fg:x="99573" fg:w="14"/><text x="86.6152%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (14 samples, 0.01%)</title><rect x="86.3652%" y="997" width="0.0121%" height="15" fill="rgb(210,21,8)" fg:x="99573" fg:w="14"/><text x="86.6152%" y="1007.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (97 samples, 0.08%)</title><rect x="86.3296%" y="1029" width="0.0841%" height="15" fill="rgb(243,145,7)" fg:x="99532" fg:w="97"/><text x="86.5796%" y="1039.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (33 samples, 0.03%)</title><rect x="86.3851%" y="1013" width="0.0286%" height="15" fill="rgb(238,178,32)" fg:x="99596" fg:w="33"/><text x="86.6351%" y="1023.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (33 samples, 0.03%)</title><rect x="86.3851%" y="997" width="0.0286%" height="15" fill="rgb(222,4,10)" fg:x="99596" fg:w="33"/><text x="86.6351%" y="1007.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (33 samples, 0.03%)</title><rect x="86.3851%" y="981" width="0.0286%" height="15" fill="rgb(239,7,37)" fg:x="99596" fg:w="33"/><text x="86.6351%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (33 samples, 0.03%)</title><rect x="86.3851%" y="965" width="0.0286%" height="15" fill="rgb(215,31,37)" fg:x="99596" fg:w="33"/><text x="86.6351%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (33 samples, 0.03%)</title><rect x="86.3851%" y="949" width="0.0286%" height="15" fill="rgb(224,83,33)" fg:x="99596" fg:w="33"/><text x="86.6351%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (33 samples, 0.03%)</title><rect x="86.3851%" y="933" width="0.0286%" height="15" fill="rgb(239,55,3)" fg:x="99596" fg:w="33"/><text x="86.6351%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.03%)</title><rect x="86.3851%" y="917" width="0.0286%" height="15" fill="rgb(247,92,11)" fg:x="99596" fg:w="33"/><text x="86.6351%" y="927.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (241 samples, 0.21%)</title><rect x="86.2090%" y="1045" width="0.2090%" height="15" fill="rgb(239,200,7)" fg:x="99393" fg:w="241"/><text x="86.4590%" y="1055.50"></text></g><g><title>[unknown] (93,120 samples, 80.77%)</title><rect x="5.6751%" y="1061" width="80.7681%" height="15" fill="rgb(227,115,8)" fg:x="6543" fg:w="93120"/><text x="5.9251%" y="1071.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (18 samples, 0.02%)</title><rect x="86.4276%" y="1045" width="0.0156%" height="15" fill="rgb(215,189,27)" fg:x="99645" fg:w="18"/><text x="86.6776%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="86.4727%" y="1061" width="0.0139%" height="15" fill="rgb(251,216,39)" fg:x="99697" fg:w="16"/><text x="86.7227%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (28 samples, 0.02%)</title><rect x="86.5074%" y="1045" width="0.0243%" height="15" fill="rgb(207,29,47)" fg:x="99737" fg:w="28"/><text x="86.7574%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (14 samples, 0.01%)</title><rect x="86.5196%" y="1029" width="0.0121%" height="15" fill="rgb(210,71,34)" fg:x="99751" fg:w="14"/><text x="86.7696%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="86.5196%" y="1013" width="0.0121%" height="15" fill="rgb(253,217,51)" fg:x="99751" fg:w="14"/><text x="86.7696%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="86.5196%" y="997" width="0.0121%" height="15" fill="rgb(222,117,46)" fg:x="99751" fg:w="14"/><text x="86.7696%" y="1007.50"></text></g><g><title>anon.0aa9e3ca3f82b3064368f949511cad26.19.llvm.10277307269286780556 (35 samples, 0.03%)</title><rect x="86.5074%" y="1061" width="0.0304%" height="15" fill="rgb(226,132,6)" fg:x="99737" fg:w="35"/><text x="86.7574%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (18 samples, 0.02%)</title><rect x="86.5785%" y="1045" width="0.0156%" height="15" fill="rgb(254,145,51)" fg:x="99819" fg:w="18"/><text x="86.8285%" y="1055.50"></text></g><g><title>anon.721695a4fa8e1a5c50b311b0da0a9e88.35.llvm.6249933525401338342 (23 samples, 0.02%)</title><rect x="86.5777%" y="1061" width="0.0199%" height="15" fill="rgb(231,199,27)" fg:x="99818" fg:w="23"/><text x="86.8277%" y="1071.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (14 samples, 0.01%)</title><rect x="86.6202%" y="1045" width="0.0121%" height="15" fill="rgb(245,158,14)" fg:x="99867" fg:w="14"/><text x="86.8702%" y="1055.50"></text></g><g><title>anon.83ac5d38449a157d082c7cd70222d9fa.47.llvm.2321870770912432649 (38 samples, 0.03%)</title><rect x="86.6063%" y="1061" width="0.0330%" height="15" fill="rgb(240,113,14)" fg:x="99851" fg:w="38"/><text x="86.8563%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="86.6479%" y="1045" width="0.0121%" height="15" fill="rgb(210,20,13)" fg:x="99899" fg:w="14"/><text x="86.8979%" y="1055.50"></text></g><g><title>anon.8e44a1a3939ac65e12d6f6b11f5adf69.13.llvm.17348626053875357348 (36 samples, 0.03%)</title><rect x="86.6393%" y="1061" width="0.0312%" height="15" fill="rgb(241,144,13)" fg:x="99889" fg:w="36"/><text x="86.8893%" y="1071.50"></text></g><g><title>anon.bad05d1a978d454772d4e6b7cf31350e.43.llvm.1074922121173280541 (27 samples, 0.02%)</title><rect x="86.6766%" y="1061" width="0.0234%" height="15" fill="rgb(235,43,34)" fg:x="99932" fg:w="27"/><text x="86.9266%" y="1071.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (27 samples, 0.02%)</title><rect x="86.7000%" y="1061" width="0.0234%" height="15" fill="rgb(208,36,20)" fg:x="99959" fg:w="27"/><text x="86.9500%" y="1071.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (41 samples, 0.04%)</title><rect x="86.7711%" y="1029" width="0.0356%" height="15" fill="rgb(239,204,10)" fg:x="100041" fg:w="41"/><text x="87.0211%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (40 samples, 0.03%)</title><rect x="86.7720%" y="1013" width="0.0347%" height="15" fill="rgb(217,84,43)" fg:x="100042" fg:w="40"/><text x="87.0220%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (89 samples, 0.08%)</title><rect x="86.7407%" y="1045" width="0.0772%" height="15" fill="rgb(241,170,50)" fg:x="100006" fg:w="89"/><text x="86.9907%" y="1055.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (20 samples, 0.02%)</title><rect x="86.8500%" y="997" width="0.0173%" height="15" fill="rgb(226,205,29)" fg:x="100132" fg:w="20"/><text x="87.1000%" y="1007.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (63 samples, 0.05%)</title><rect x="86.8197%" y="1045" width="0.0546%" height="15" fill="rgb(233,113,1)" fg:x="100097" fg:w="63"/><text x="87.0697%" y="1055.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (56 samples, 0.05%)</title><rect x="86.8257%" y="1029" width="0.0486%" height="15" fill="rgb(253,98,13)" fg:x="100104" fg:w="56"/><text x="87.0757%" y="1039.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (50 samples, 0.04%)</title><rect x="86.8309%" y="1013" width="0.0434%" height="15" fill="rgb(211,115,12)" fg:x="100110" fg:w="50"/><text x="87.0809%" y="1023.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (13 samples, 0.01%)</title><rect x="86.8865%" y="1045" width="0.0113%" height="15" fill="rgb(208,12,16)" fg:x="100174" fg:w="13"/><text x="87.1365%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (23 samples, 0.02%)</title><rect x="86.8995%" y="1045" width="0.0199%" height="15" fill="rgb(237,193,54)" fg:x="100189" fg:w="23"/><text x="87.1495%" y="1055.50"></text></g><g><title>parking::Inner::park (13 samples, 0.01%)</title><rect x="86.9229%" y="1045" width="0.0113%" height="15" fill="rgb(243,22,42)" fg:x="100216" fg:w="13"/><text x="87.1729%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (17 samples, 0.01%)</title><rect x="87.0044%" y="965" width="0.0147%" height="15" fill="rgb(233,151,36)" fg:x="100310" fg:w="17"/><text x="87.2544%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (18 samples, 0.02%)</title><rect x="87.0625%" y="949" width="0.0156%" height="15" fill="rgb(237,57,45)" fg:x="100377" fg:w="18"/><text x="87.3125%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (107 samples, 0.09%)</title><rect x="86.9914%" y="1029" width="0.0928%" height="15" fill="rgb(221,88,17)" fg:x="100295" fg:w="107"/><text x="87.2414%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (105 samples, 0.09%)</title><rect x="86.9931%" y="1013" width="0.0911%" height="15" fill="rgb(230,79,15)" fg:x="100297" fg:w="105"/><text x="87.2431%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (100 samples, 0.09%)</title><rect x="86.9975%" y="997" width="0.0867%" height="15" fill="rgb(213,57,13)" fg:x="100302" fg:w="100"/><text x="87.2475%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (100 samples, 0.09%)</title><rect x="86.9975%" y="981" width="0.0867%" height="15" fill="rgb(222,116,39)" fg:x="100302" fg:w="100"/><text x="87.2475%" y="991.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (73 samples, 0.06%)</title><rect x="87.0209%" y="965" width="0.0633%" height="15" fill="rgb(245,107,2)" fg:x="100329" fg:w="73"/><text x="87.2709%" y="975.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (407 samples, 0.35%)</title><rect x="86.7329%" y="1061" width="0.3530%" height="15" fill="rgb(238,1,10)" fg:x="99997" fg:w="407"/><text x="86.9829%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (153 samples, 0.13%)</title><rect x="86.9532%" y="1045" width="0.1327%" height="15" fill="rgb(249,4,48)" fg:x="100251" fg:w="153"/><text x="87.2032%" y="1055.50"></text></g><g><title>async_channel::bounded (14 samples, 0.01%)</title><rect x="87.0868%" y="821" width="0.0121%" height="15" fill="rgb(223,151,18)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="87.0868%" y="805" width="0.0121%" height="15" fill="rgb(227,65,43)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="87.0868%" y="789" width="0.0121%" height="15" fill="rgb(218,40,45)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="87.0868%" y="773" width="0.0121%" height="15" fill="rgb(252,121,31)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="87.0868%" y="757" width="0.0121%" height="15" fill="rgb(219,158,43)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="767.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="87.0868%" y="741" width="0.0121%" height="15" fill="rgb(231,162,42)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="751.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="87.0868%" y="725" width="0.0121%" height="15" fill="rgb(217,179,25)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="87.0868%" y="709" width="0.0121%" height="15" fill="rgb(206,212,31)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="719.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="87.0868%" y="693" width="0.0121%" height="15" fill="rgb(235,144,12)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="703.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (14 samples, 0.01%)</title><rect x="87.0868%" y="677" width="0.0121%" height="15" fill="rgb(213,51,10)" fg:x="100405" fg:w="14"/><text x="87.3368%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="87.5092%" y="453" width="0.0199%" height="15" fill="rgb(231,145,14)" fg:x="100892" fg:w="23"/><text x="87.7592%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (28 samples, 0.02%)</title><rect x="87.6697%" y="357" width="0.0243%" height="15" fill="rgb(235,15,28)" fg:x="101077" fg:w="28"/><text x="87.9197%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (28 samples, 0.02%)</title><rect x="87.6697%" y="341" width="0.0243%" height="15" fill="rgb(237,206,10)" fg:x="101077" fg:w="28"/><text x="87.9197%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26 samples, 0.02%)</title><rect x="87.6714%" y="325" width="0.0226%" height="15" fill="rgb(236,227,27)" fg:x="101079" fg:w="26"/><text x="87.9214%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="87.6749%" y="309" width="0.0191%" height="15" fill="rgb(246,83,35)" fg:x="101083" fg:w="22"/><text x="87.9249%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (22 samples, 0.02%)</title><rect x="87.6749%" y="293" width="0.0191%" height="15" fill="rgb(220,136,24)" fg:x="101083" fg:w="22"/><text x="87.9249%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.07%)</title><rect x="87.6940%" y="357" width="0.0746%" height="15" fill="rgb(217,3,25)" fg:x="101105" fg:w="86"/><text x="87.9440%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (340 samples, 0.29%)</title><rect x="87.5292%" y="405" width="0.2949%" height="15" fill="rgb(239,24,14)" fg:x="100915" fg:w="340"/><text x="87.7792%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (283 samples, 0.25%)</title><rect x="87.5786%" y="389" width="0.2455%" height="15" fill="rgb(244,16,53)" fg:x="100972" fg:w="283"/><text x="87.8286%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (234 samples, 0.20%)</title><rect x="87.6211%" y="373" width="0.2030%" height="15" fill="rgb(208,175,44)" fg:x="101021" fg:w="234"/><text x="87.8711%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (64 samples, 0.06%)</title><rect x="87.7686%" y="357" width="0.0555%" height="15" fill="rgb(252,18,48)" fg:x="101191" fg:w="64"/><text x="88.0186%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (64 samples, 0.06%)</title><rect x="87.7686%" y="341" width="0.0555%" height="15" fill="rgb(234,199,32)" fg:x="101191" fg:w="64"/><text x="88.0186%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (34 samples, 0.03%)</title><rect x="87.7946%" y="325" width="0.0295%" height="15" fill="rgb(225,77,54)" fg:x="101221" fg:w="34"/><text x="88.0446%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (34 samples, 0.03%)</title><rect x="87.7946%" y="309" width="0.0295%" height="15" fill="rgb(225,42,25)" fg:x="101221" fg:w="34"/><text x="88.0446%" y="319.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (18 samples, 0.02%)</title><rect x="87.8085%" y="293" width="0.0156%" height="15" fill="rgb(242,227,46)" fg:x="101237" fg:w="18"/><text x="88.0585%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (18 samples, 0.02%)</title><rect x="87.8085%" y="277" width="0.0156%" height="15" fill="rgb(246,197,35)" fg:x="101237" fg:w="18"/><text x="88.0585%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (361 samples, 0.31%)</title><rect x="87.5292%" y="453" width="0.3131%" height="15" fill="rgb(215,159,26)" fg:x="100915" fg:w="361"/><text x="87.7792%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (361 samples, 0.31%)</title><rect x="87.5292%" y="437" width="0.3131%" height="15" fill="rgb(212,194,50)" fg:x="100915" fg:w="361"/><text x="87.7792%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (361 samples, 0.31%)</title><rect x="87.5292%" y="421" width="0.3131%" height="15" fill="rgb(246,132,1)" fg:x="100915" fg:w="361"/><text x="87.7792%" y="431.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (21 samples, 0.02%)</title><rect x="87.8241%" y="405" width="0.0182%" height="15" fill="rgb(217,71,7)" fg:x="101255" fg:w="21"/><text x="88.0741%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,070 samples, 0.93%)</title><rect x="88.2100%" y="421" width="0.9281%" height="15" fill="rgb(252,59,32)" fg:x="101700" fg:w="1070"/><text x="88.4600%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (825 samples, 0.72%)</title><rect x="88.4225%" y="405" width="0.7156%" height="15" fill="rgb(253,204,25)" fg:x="101945" fg:w="825"/><text x="88.6725%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (825 samples, 0.72%)</title><rect x="88.4225%" y="389" width="0.7156%" height="15" fill="rgb(232,21,16)" fg:x="101945" fg:w="825"/><text x="88.6725%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,416 samples, 1.23%)</title><rect x="87.9238%" y="437" width="1.2282%" height="15" fill="rgb(248,90,29)" fg:x="101370" fg:w="1416"/><text x="88.1738%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (16 samples, 0.01%)</title><rect x="89.1381%" y="421" width="0.0139%" height="15" fill="rgb(249,223,7)" fg:x="102770" fg:w="16"/><text x="89.3881%" y="431.50"></text></g><g><title>async_executor::steal (1,515 samples, 1.31%)</title><rect x="87.8423%" y="453" width="1.3140%" height="15" fill="rgb(231,119,42)" fg:x="101276" fg:w="1515"/><text x="88.0923%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (1,367 samples, 1.19%)</title><rect x="89.7539%" y="421" width="1.1857%" height="15" fill="rgb(215,41,35)" fg:x="103480" fg:w="1367"/><text x="90.0039%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,318 samples, 1.14%)</title><rect x="89.7964%" y="405" width="1.1432%" height="15" fill="rgb(220,44,45)" fg:x="103529" fg:w="1318"/><text x="90.0464%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,318 samples, 1.14%)</title><rect x="89.7964%" y="389" width="1.1432%" height="15" fill="rgb(253,197,36)" fg:x="103529" fg:w="1318"/><text x="90.0464%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,318 samples, 1.14%)</title><rect x="89.7964%" y="373" width="1.1432%" height="15" fill="rgb(245,225,54)" fg:x="103529" fg:w="1318"/><text x="90.0464%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,020 samples, 1.75%)</title><rect x="89.3029%" y="437" width="1.7521%" height="15" fill="rgb(239,94,37)" fg:x="102960" fg:w="2020"/><text x="89.5529%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (133 samples, 0.12%)</title><rect x="90.9396%" y="421" width="0.1154%" height="15" fill="rgb(242,217,10)" fg:x="104847" fg:w="133"/><text x="91.1896%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (121 samples, 0.10%)</title><rect x="90.9500%" y="405" width="0.1049%" height="15" fill="rgb(250,193,7)" fg:x="104859" fg:w="121"/><text x="91.2000%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (191 samples, 0.17%)</title><rect x="91.0949%" y="421" width="0.1657%" height="15" fill="rgb(230,104,19)" fg:x="105026" fg:w="191"/><text x="91.3449%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (188 samples, 0.16%)</title><rect x="91.0975%" y="405" width="0.1631%" height="15" fill="rgb(230,181,4)" fg:x="105029" fg:w="188"/><text x="91.3475%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (188 samples, 0.16%)</title><rect x="91.0975%" y="389" width="0.1631%" height="15" fill="rgb(216,219,49)" fg:x="105029" fg:w="188"/><text x="91.3475%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (188 samples, 0.16%)</title><rect x="91.0975%" y="373" width="0.1631%" height="15" fill="rgb(254,144,0)" fg:x="105029" fg:w="188"/><text x="91.3475%" y="383.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (34 samples, 0.03%)</title><rect x="91.2631%" y="421" width="0.0295%" height="15" fill="rgb(205,209,38)" fg:x="105220" fg:w="34"/><text x="91.5131%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (33 samples, 0.03%)</title><rect x="91.2640%" y="405" width="0.0286%" height="15" fill="rgb(240,21,42)" fg:x="105221" fg:w="33"/><text x="91.5140%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (33 samples, 0.03%)</title><rect x="91.2640%" y="389" width="0.0286%" height="15" fill="rgb(241,132,3)" fg:x="105221" fg:w="33"/><text x="91.5140%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (14 samples, 0.01%)</title><rect x="91.2996%" y="421" width="0.0121%" height="15" fill="rgb(225,14,2)" fg:x="105262" fg:w="14"/><text x="91.5496%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="91.2996%" y="405" width="0.0121%" height="15" fill="rgb(210,141,35)" fg:x="105262" fg:w="14"/><text x="91.5496%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (79 samples, 0.07%)</title><rect x="91.3117%" y="421" width="0.0685%" height="15" fill="rgb(251,14,44)" fg:x="105276" fg:w="79"/><text x="91.5617%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (79 samples, 0.07%)</title><rect x="91.3117%" y="405" width="0.0685%" height="15" fill="rgb(247,48,18)" fg:x="105276" fg:w="79"/><text x="91.5617%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (119 samples, 0.10%)</title><rect x="91.3802%" y="421" width="0.1032%" height="15" fill="rgb(225,0,40)" fg:x="105355" fg:w="119"/><text x="91.6302%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_or (119 samples, 0.10%)</title><rect x="91.3802%" y="405" width="0.1032%" height="15" fill="rgb(221,31,33)" fg:x="105355" fg:w="119"/><text x="91.6302%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,802 samples, 2.43%)</title><rect x="89.1563%" y="453" width="2.4303%" height="15" fill="rgb(237,42,40)" fg:x="102791" fg:w="2802"/><text x="89.4063%" y="463.50">co..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (613 samples, 0.53%)</title><rect x="91.0550%" y="437" width="0.5317%" height="15" fill="rgb(233,51,29)" fg:x="104980" fg:w="613"/><text x="91.3050%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (119 samples, 0.10%)</title><rect x="91.4834%" y="421" width="0.1032%" height="15" fill="rgb(226,58,20)" fg:x="105474" fg:w="119"/><text x="91.7334%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (119 samples, 0.10%)</title><rect x="91.4834%" y="405" width="0.1032%" height="15" fill="rgb(208,98,7)" fg:x="105474" fg:w="119"/><text x="91.7334%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (132 samples, 0.11%)</title><rect x="91.6014%" y="389" width="0.1145%" height="15" fill="rgb(228,143,44)" fg:x="105610" fg:w="132"/><text x="91.8514%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (132 samples, 0.11%)</title><rect x="91.6014%" y="373" width="0.1145%" height="15" fill="rgb(246,55,38)" fg:x="105610" fg:w="132"/><text x="91.8514%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (329 samples, 0.29%)</title><rect x="91.5867%" y="453" width="0.2854%" height="15" fill="rgb(247,87,16)" fg:x="105593" fg:w="329"/><text x="91.8367%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (329 samples, 0.29%)</title><rect x="91.5867%" y="437" width="0.2854%" height="15" fill="rgb(234,129,42)" fg:x="105593" fg:w="329"/><text x="91.8367%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (326 samples, 0.28%)</title><rect x="91.5893%" y="421" width="0.2828%" height="15" fill="rgb(220,82,16)" fg:x="105596" fg:w="326"/><text x="91.8393%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (312 samples, 0.27%)</title><rect x="91.6014%" y="405" width="0.2706%" height="15" fill="rgb(211,88,4)" fg:x="105610" fg:w="312"/><text x="91.8514%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (180 samples, 0.16%)</title><rect x="91.7159%" y="389" width="0.1561%" height="15" fill="rgb(248,151,21)" fg:x="105742" fg:w="180"/><text x="91.9659%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_unlock (180 samples, 0.16%)</title><rect x="91.7159%" y="373" width="0.1561%" height="15" fill="rgb(238,163,6)" fg:x="105742" fg:w="180"/><text x="91.9659%" y="383.50"></text></g><g><title>fastrand::usize (35 samples, 0.03%)</title><rect x="91.8720%" y="453" width="0.0304%" height="15" fill="rgb(209,183,11)" fg:x="105922" fg:w="35"/><text x="92.1220%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (33 samples, 0.03%)</title><rect x="91.8737%" y="437" width="0.0286%" height="15" fill="rgb(219,37,20)" fg:x="105924" fg:w="33"/><text x="92.1237%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (27 samples, 0.02%)</title><rect x="91.8790%" y="421" width="0.0234%" height="15" fill="rgb(210,158,4)" fg:x="105930" fg:w="27"/><text x="92.1290%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (17 samples, 0.01%)</title><rect x="91.8876%" y="405" width="0.0147%" height="15" fill="rgb(221,167,53)" fg:x="105940" fg:w="17"/><text x="92.1376%" y="415.50"></text></g><g><title>fastrand::Rng::usize (17 samples, 0.01%)</title><rect x="91.8876%" y="389" width="0.0147%" height="15" fill="rgb(237,151,45)" fg:x="105940" fg:w="17"/><text x="92.1376%" y="399.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (12 samples, 0.01%)</title><rect x="91.8920%" y="373" width="0.0104%" height="15" fill="rgb(231,39,3)" fg:x="105945" fg:w="12"/><text x="92.1420%" y="383.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (351 samples, 0.30%)</title><rect x="91.9440%" y="405" width="0.3044%" height="15" fill="rgb(212,167,28)" fg:x="106005" fg:w="351"/><text x="92.1940%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (5,836 samples, 5.06%)</title><rect x="87.2950%" y="469" width="5.0619%" height="15" fill="rgb(232,178,8)" fg:x="100645" fg:w="5836"/><text x="87.5450%" y="479.50">async_..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (524 samples, 0.45%)</title><rect x="91.9024%" y="453" width="0.4545%" height="15" fill="rgb(225,151,20)" fg:x="105957" fg:w="524"/><text x="92.1524%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (513 samples, 0.44%)</title><rect x="91.9119%" y="437" width="0.4450%" height="15" fill="rgb(238,3,37)" fg:x="105968" fg:w="513"/><text x="92.1619%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (488 samples, 0.42%)</title><rect x="91.9336%" y="421" width="0.4233%" height="15" fill="rgb(251,147,42)" fg:x="105993" fg:w="488"/><text x="92.1836%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (125 samples, 0.11%)</title><rect x="92.2484%" y="405" width="0.1084%" height="15" fill="rgb(208,173,10)" fg:x="106356" fg:w="125"/><text x="92.4984%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (125 samples, 0.11%)</title><rect x="92.2484%" y="389" width="0.1084%" height="15" fill="rgb(246,225,4)" fg:x="106356" fg:w="125"/><text x="92.4984%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (40 samples, 0.03%)</title><rect x="92.3629%" y="453" width="0.0347%" height="15" fill="rgb(248,102,6)" fg:x="106488" fg:w="40"/><text x="92.6129%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="92.3629%" y="437" width="0.0347%" height="15" fill="rgb(232,6,21)" fg:x="106488" fg:w="40"/><text x="92.6129%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="92.3647%" y="421" width="0.0330%" height="15" fill="rgb(221,179,22)" fg:x="106490" fg:w="38"/><text x="92.6147%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (38 samples, 0.03%)</title><rect x="92.3647%" y="405" width="0.0330%" height="15" fill="rgb(252,50,20)" fg:x="106490" fg:w="38"/><text x="92.6147%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (38 samples, 0.03%)</title><rect x="92.3647%" y="389" width="0.0330%" height="15" fill="rgb(222,56,38)" fg:x="106490" fg:w="38"/><text x="92.6147%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (43 samples, 0.04%)</title><rect x="92.3976%" y="453" width="0.0373%" height="15" fill="rgb(206,193,29)" fg:x="106528" fg:w="43"/><text x="92.6476%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (43 samples, 0.04%)</title><rect x="92.3976%" y="437" width="0.0373%" height="15" fill="rgb(239,192,45)" fg:x="106528" fg:w="43"/><text x="92.6476%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::notify (54 samples, 0.05%)</title><rect x="92.4471%" y="405" width="0.0468%" height="15" fill="rgb(254,18,36)" fg:x="106585" fg:w="54"/><text x="92.6971%" y="415.50"></text></g><g><title>polling::Poller::notify (51 samples, 0.04%)</title><rect x="92.4497%" y="389" width="0.0442%" height="15" fill="rgb(221,127,11)" fg:x="106588" fg:w="51"/><text x="92.6997%" y="399.50"></text></g><g><title>polling::epoll::Poller::notify (36 samples, 0.03%)</title><rect x="92.4627%" y="373" width="0.0312%" height="15" fill="rgb(234,146,35)" fg:x="106603" fg:w="36"/><text x="92.7127%" y="383.50"></text></g><g><title>__libc_write (35 samples, 0.03%)</title><rect x="92.4635%" y="357" width="0.0304%" height="15" fill="rgb(254,201,37)" fg:x="106604" fg:w="35"/><text x="92.7135%" y="367.50"></text></g><g><title>core::mem::drop (12 samples, 0.01%)</title><rect x="92.5121%" y="373" width="0.0104%" height="15" fill="rgb(211,202,23)" fg:x="106660" fg:w="12"/><text x="92.7621%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (12 samples, 0.01%)</title><rect x="92.5121%" y="357" width="0.0104%" height="15" fill="rgb(237,91,2)" fg:x="106660" fg:w="12"/><text x="92.7621%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="92.5121%" y="341" width="0.0104%" height="15" fill="rgb(226,228,36)" fg:x="106660" fg:w="12"/><text x="92.7621%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (12 samples, 0.01%)</title><rect x="92.5121%" y="325" width="0.0104%" height="15" fill="rgb(213,63,50)" fg:x="106660" fg:w="12"/><text x="92.7621%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (12 samples, 0.01%)</title><rect x="92.5121%" y="309" width="0.0104%" height="15" fill="rgb(235,194,19)" fg:x="106660" fg:w="12"/><text x="92.7621%" y="319.50"></text></g><g><title>__GI___pthread_mutex_unlock (12 samples, 0.01%)</title><rect x="92.5121%" y="293" width="0.0104%" height="15" fill="rgb(207,204,18)" fg:x="106660" fg:w="12"/><text x="92.7621%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (101 samples, 0.09%)</title><rect x="92.5225%" y="373" width="0.0876%" height="15" fill="rgb(248,8,7)" fg:x="106672" fg:w="101"/><text x="92.7725%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (101 samples, 0.09%)</title><rect x="92.5225%" y="357" width="0.0876%" height="15" fill="rgb(223,145,47)" fg:x="106672" fg:w="101"/><text x="92.7725%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (109 samples, 0.09%)</title><rect x="92.6101%" y="373" width="0.0945%" height="15" fill="rgb(228,84,11)" fg:x="106773" fg:w="109"/><text x="92.8601%" y="383.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (109 samples, 0.09%)</title><rect x="92.6101%" y="357" width="0.0945%" height="15" fill="rgb(218,76,45)" fg:x="106773" fg:w="109"/><text x="92.8601%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (109 samples, 0.09%)</title><rect x="92.6101%" y="341" width="0.0945%" height="15" fill="rgb(223,80,15)" fg:x="106773" fg:w="109"/><text x="92.8601%" y="351.50"></text></g><g><title>__pthread_cond_signal (109 samples, 0.09%)</title><rect x="92.6101%" y="325" width="0.0945%" height="15" fill="rgb(219,218,33)" fg:x="106773" fg:w="109"/><text x="92.8601%" y="335.50"></text></g><g><title>parking::Unparker::unpark (348 samples, 0.30%)</title><rect x="92.4982%" y="405" width="0.3018%" height="15" fill="rgb(208,51,11)" fg:x="106644" fg:w="348"/><text x="92.7482%" y="415.50"></text></g><g><title>parking::Inner::unpark (335 samples, 0.29%)</title><rect x="92.5095%" y="389" width="0.2906%" height="15" fill="rgb(229,165,39)" fg:x="106657" fg:w="335"/><text x="92.7595%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (110 samples, 0.10%)</title><rect x="92.7047%" y="373" width="0.0954%" height="15" fill="rgb(241,100,24)" fg:x="106882" fg:w="110"/><text x="92.9547%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (110 samples, 0.10%)</title><rect x="92.7047%" y="357" width="0.0954%" height="15" fill="rgb(228,14,23)" fg:x="106882" fg:w="110"/><text x="92.9547%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (110 samples, 0.10%)</title><rect x="92.7047%" y="341" width="0.0954%" height="15" fill="rgb(247,116,52)" fg:x="106882" fg:w="110"/><text x="92.9547%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (110 samples, 0.10%)</title><rect x="92.7047%" y="325" width="0.0954%" height="15" fill="rgb(216,149,33)" fg:x="106882" fg:w="110"/><text x="92.9547%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (430 samples, 0.37%)</title><rect x="92.4401%" y="421" width="0.3730%" height="15" fill="rgb(238,142,29)" fg:x="106577" fg:w="430"/><text x="92.6901%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="92.8001%" y="405" width="0.0130%" height="15" fill="rgb(224,83,40)" fg:x="106992" fg:w="15"/><text x="93.0501%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 0.01%)</title><rect x="92.8001%" y="389" width="0.0130%" height="15" fill="rgb(234,165,11)" fg:x="106992" fg:w="15"/><text x="93.0501%" y="399.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (15 samples, 0.01%)</title><rect x="92.8001%" y="373" width="0.0130%" height="15" fill="rgb(215,96,23)" fg:x="106992" fg:w="15"/><text x="93.0501%" y="383.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="92.8001%" y="357" width="0.0130%" height="15" fill="rgb(233,179,26)" fg:x="106992" fg:w="15"/><text x="93.0501%" y="367.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="92.8001%" y="341" width="0.0130%" height="15" fill="rgb(225,129,33)" fg:x="106992" fg:w="15"/><text x="93.0501%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.01%)</title><rect x="92.8001%" y="325" width="0.0130%" height="15" fill="rgb(237,49,13)" fg:x="106992" fg:w="15"/><text x="93.0501%" y="335.50"></text></g><g><title>core::task::wake::Waker::wake (502 samples, 0.44%)</title><rect x="92.4349%" y="453" width="0.4354%" height="15" fill="rgb(211,3,31)" fg:x="106571" fg:w="502"/><text x="92.6849%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (499 samples, 0.43%)</title><rect x="92.4375%" y="437" width="0.4328%" height="15" fill="rgb(216,152,19)" fg:x="106574" fg:w="499"/><text x="92.6875%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (66 samples, 0.06%)</title><rect x="92.8131%" y="421" width="0.0572%" height="15" fill="rgb(251,121,35)" fg:x="107007" fg:w="66"/><text x="93.0631%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.06%)</title><rect x="92.8131%" y="405" width="0.0572%" height="15" fill="rgb(210,217,47)" fg:x="107007" fg:w="66"/><text x="93.0631%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (61 samples, 0.05%)</title><rect x="92.8174%" y="389" width="0.0529%" height="15" fill="rgb(244,116,22)" fg:x="107012" fg:w="61"/><text x="93.0674%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (61 samples, 0.05%)</title><rect x="92.8174%" y="373" width="0.0529%" height="15" fill="rgb(228,17,21)" fg:x="107012" fg:w="61"/><text x="93.0674%" y="383.50"></text></g><g><title>async_executor::State::notify (626 samples, 0.54%)</title><rect x="92.3569%" y="469" width="0.5430%" height="15" fill="rgb(240,149,34)" fg:x="106481" fg:w="626"/><text x="92.6069%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (34 samples, 0.03%)</title><rect x="92.8703%" y="453" width="0.0295%" height="15" fill="rgb(208,125,47)" fg:x="107073" fg:w="34"/><text x="93.1203%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (32 samples, 0.03%)</title><rect x="92.8721%" y="437" width="0.0278%" height="15" fill="rgb(249,186,39)" fg:x="107075" fg:w="32"/><text x="93.1221%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (31 samples, 0.03%)</title><rect x="92.8729%" y="421" width="0.0269%" height="15" fill="rgb(240,220,33)" fg:x="107076" fg:w="31"/><text x="93.1229%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (31 samples, 0.03%)</title><rect x="92.8729%" y="405" width="0.0269%" height="15" fill="rgb(243,110,23)" fg:x="107076" fg:w="31"/><text x="93.1229%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (120 samples, 0.10%)</title><rect x="92.9154%" y="437" width="0.1041%" height="15" fill="rgb(219,163,46)" fg:x="107125" fg:w="120"/><text x="93.1654%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (118 samples, 0.10%)</title><rect x="92.9172%" y="421" width="0.1023%" height="15" fill="rgb(216,126,30)" fg:x="107127" fg:w="118"/><text x="93.1672%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (116 samples, 0.10%)</title><rect x="92.9189%" y="405" width="0.1006%" height="15" fill="rgb(208,139,11)" fg:x="107129" fg:w="116"/><text x="93.1689%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (116 samples, 0.10%)</title><rect x="92.9189%" y="389" width="0.1006%" height="15" fill="rgb(213,118,36)" fg:x="107129" fg:w="116"/><text x="93.1689%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (116 samples, 0.10%)</title><rect x="92.9189%" y="373" width="0.1006%" height="15" fill="rgb(226,43,17)" fg:x="107129" fg:w="116"/><text x="93.1689%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (116 samples, 0.10%)</title><rect x="92.9189%" y="357" width="0.1006%" height="15" fill="rgb(254,217,4)" fg:x="107129" fg:w="116"/><text x="93.1689%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (13 samples, 0.01%)</title><rect x="93.0195%" y="437" width="0.0113%" height="15" fill="rgb(210,134,47)" fg:x="107245" fg:w="13"/><text x="93.2695%" y="447.50"></text></g><g><title>async_executor::Sleepers::insert (154 samples, 0.13%)</title><rect x="92.9146%" y="453" width="0.1336%" height="15" fill="rgb(237,24,49)" fg:x="107124" fg:w="154"/><text x="93.1646%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.02%)</title><rect x="93.0308%" y="437" width="0.0173%" height="15" fill="rgb(251,39,46)" fg:x="107258" fg:w="20"/><text x="93.2808%" y="447.50"></text></g><g><title>core::ptr::write (19 samples, 0.02%)</title><rect x="93.0317%" y="421" width="0.0165%" height="15" fill="rgb(251,220,3)" fg:x="107259" fg:w="19"/><text x="93.2817%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="93.1011%" y="437" width="0.0226%" height="15" fill="rgb(228,105,12)" fg:x="107339" fg:w="26"/><text x="93.3511%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (55 samples, 0.05%)</title><rect x="93.1236%" y="437" width="0.0477%" height="15" fill="rgb(215,196,1)" fg:x="107365" fg:w="55"/><text x="93.3736%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (55 samples, 0.05%)</title><rect x="93.1236%" y="421" width="0.0477%" height="15" fill="rgb(214,33,39)" fg:x="107365" fg:w="55"/><text x="93.3736%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (52 samples, 0.05%)</title><rect x="93.1262%" y="405" width="0.0451%" height="15" fill="rgb(220,19,52)" fg:x="107368" fg:w="52"/><text x="93.3762%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (52 samples, 0.05%)</title><rect x="93.1262%" y="389" width="0.0451%" height="15" fill="rgb(221,78,38)" fg:x="107368" fg:w="52"/><text x="93.3762%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (52 samples, 0.05%)</title><rect x="93.1262%" y="373" width="0.0451%" height="15" fill="rgb(253,30,16)" fg:x="107368" fg:w="52"/><text x="93.3762%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (52 samples, 0.05%)</title><rect x="93.1262%" y="357" width="0.0451%" height="15" fill="rgb(242,65,0)" fg:x="107368" fg:w="52"/><text x="93.3762%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.02%)</title><rect x="93.1713%" y="437" width="0.0191%" height="15" fill="rgb(235,201,12)" fg:x="107420" fg:w="22"/><text x="93.4213%" y="447.50"></text></g><g><title>core::ptr::write (20 samples, 0.02%)</title><rect x="93.1730%" y="421" width="0.0173%" height="15" fill="rgb(233,161,9)" fg:x="107422" fg:w="20"/><text x="93.4230%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (163 samples, 0.14%)</title><rect x="93.0560%" y="453" width="0.1414%" height="15" fill="rgb(241,207,41)" fg:x="107287" fg:w="163"/><text x="93.3060%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (182 samples, 0.16%)</title><rect x="93.1973%" y="453" width="0.1579%" height="15" fill="rgb(212,69,46)" fg:x="107450" fg:w="182"/><text x="93.4473%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (182 samples, 0.16%)</title><rect x="93.1973%" y="437" width="0.1579%" height="15" fill="rgb(239,69,45)" fg:x="107450" fg:w="182"/><text x="93.4473%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (175 samples, 0.15%)</title><rect x="93.2034%" y="421" width="0.1518%" height="15" fill="rgb(242,117,48)" fg:x="107457" fg:w="175"/><text x="93.4534%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (174 samples, 0.15%)</title><rect x="93.2043%" y="405" width="0.1509%" height="15" fill="rgb(228,41,36)" fg:x="107458" fg:w="174"/><text x="93.4543%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (170 samples, 0.15%)</title><rect x="93.2077%" y="389" width="0.1475%" height="15" fill="rgb(212,3,32)" fg:x="107462" fg:w="170"/><text x="93.4577%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (200 samples, 0.17%)</title><rect x="93.3552%" y="453" width="0.1735%" height="15" fill="rgb(233,41,49)" fg:x="107632" fg:w="200"/><text x="93.6052%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (200 samples, 0.17%)</title><rect x="93.3552%" y="437" width="0.1735%" height="15" fill="rgb(252,170,49)" fg:x="107632" fg:w="200"/><text x="93.6052%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (142 samples, 0.12%)</title><rect x="93.5287%" y="453" width="0.1232%" height="15" fill="rgb(229,53,26)" fg:x="107832" fg:w="142"/><text x="93.7787%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (142 samples, 0.12%)</title><rect x="93.5287%" y="437" width="0.1232%" height="15" fill="rgb(217,157,12)" fg:x="107832" fg:w="142"/><text x="93.7787%" y="447.50"></text></g><g><title>async_executor::Ticker::sleep (1,327 samples, 1.15%)</title><rect x="92.8998%" y="469" width="1.1510%" height="15" fill="rgb(227,17,9)" fg:x="107107" fg:w="1327"/><text x="93.1498%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (460 samples, 0.40%)</title><rect x="93.6518%" y="453" width="0.3990%" height="15" fill="rgb(218,84,12)" fg:x="107974" fg:w="460"/><text x="93.9018%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (449 samples, 0.39%)</title><rect x="93.6614%" y="437" width="0.3894%" height="15" fill="rgb(212,79,24)" fg:x="107985" fg:w="449"/><text x="93.9114%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (437 samples, 0.38%)</title><rect x="93.6718%" y="421" width="0.3790%" height="15" fill="rgb(217,222,37)" fg:x="107997" fg:w="437"/><text x="93.9218%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (437 samples, 0.38%)</title><rect x="93.6718%" y="405" width="0.3790%" height="15" fill="rgb(246,208,8)" fg:x="107997" fg:w="437"/><text x="93.9218%" y="415.50"></text></g><g><title>__lll_lock_wait (21 samples, 0.02%)</title><rect x="94.0326%" y="389" width="0.0182%" height="15" fill="rgb(244,133,10)" fg:x="108413" fg:w="21"/><text x="94.2826%" y="399.50"></text></g><g><title>async_executor::Sleepers::remove (75 samples, 0.07%)</title><rect x="94.0569%" y="453" width="0.0651%" height="15" fill="rgb(209,219,41)" fg:x="108441" fg:w="75"/><text x="94.3069%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (39 samples, 0.03%)</title><rect x="94.0881%" y="437" width="0.0338%" height="15" fill="rgb(253,175,45)" fg:x="108477" fg:w="39"/><text x="94.3381%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (39 samples, 0.03%)</title><rect x="94.0881%" y="421" width="0.0338%" height="15" fill="rgb(235,100,37)" fg:x="108477" fg:w="39"/><text x="94.3381%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="94.0881%" y="405" width="0.0338%" height="15" fill="rgb(225,87,19)" fg:x="108477" fg:w="39"/><text x="94.3381%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (39 samples, 0.03%)</title><rect x="94.0881%" y="389" width="0.0338%" height="15" fill="rgb(217,152,17)" fg:x="108477" fg:w="39"/><text x="94.3381%" y="399.50"></text></g><g><title>core::mem::drop (38 samples, 0.03%)</title><rect x="94.0890%" y="373" width="0.0330%" height="15" fill="rgb(235,72,13)" fg:x="108478" fg:w="38"/><text x="94.3390%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (38 samples, 0.03%)</title><rect x="94.0890%" y="357" width="0.0330%" height="15" fill="rgb(233,140,18)" fg:x="108478" fg:w="38"/><text x="94.3390%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="94.0890%" y="341" width="0.0330%" height="15" fill="rgb(207,212,28)" fg:x="108478" fg:w="38"/><text x="94.3390%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (38 samples, 0.03%)</title><rect x="94.0890%" y="325" width="0.0330%" height="15" fill="rgb(220,130,25)" fg:x="108478" fg:w="38"/><text x="94.3390%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (38 samples, 0.03%)</title><rect x="94.0890%" y="309" width="0.0330%" height="15" fill="rgb(205,55,34)" fg:x="108478" fg:w="38"/><text x="94.3390%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (52 samples, 0.05%)</title><rect x="94.1219%" y="453" width="0.0451%" height="15" fill="rgb(237,54,35)" fg:x="108516" fg:w="52"/><text x="94.3719%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.05%)</title><rect x="94.1219%" y="437" width="0.0451%" height="15" fill="rgb(208,67,23)" fg:x="108516" fg:w="52"/><text x="94.3719%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (51 samples, 0.04%)</title><rect x="94.1228%" y="421" width="0.0442%" height="15" fill="rgb(206,207,50)" fg:x="108517" fg:w="51"/><text x="94.3728%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (51 samples, 0.04%)</title><rect x="94.1228%" y="405" width="0.0442%" height="15" fill="rgb(213,211,42)" fg:x="108517" fg:w="51"/><text x="94.3728%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (49 samples, 0.04%)</title><rect x="94.1245%" y="389" width="0.0425%" height="15" fill="rgb(252,197,50)" fg:x="108519" fg:w="49"/><text x="94.3745%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (78 samples, 0.07%)</title><rect x="94.1670%" y="453" width="0.0677%" height="15" fill="rgb(251,211,41)" fg:x="108568" fg:w="78"/><text x="94.4170%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (78 samples, 0.07%)</title><rect x="94.1670%" y="437" width="0.0677%" height="15" fill="rgb(229,211,5)" fg:x="108568" fg:w="78"/><text x="94.4170%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (78 samples, 0.07%)</title><rect x="94.2347%" y="453" width="0.0677%" height="15" fill="rgb(239,36,31)" fg:x="108646" fg:w="78"/><text x="94.4847%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (78 samples, 0.07%)</title><rect x="94.2347%" y="437" width="0.0677%" height="15" fill="rgb(248,67,31)" fg:x="108646" fg:w="78"/><text x="94.4847%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,196 samples, 7.11%)</title><rect x="87.2724%" y="533" width="7.1088%" height="15" fill="rgb(249,55,44)" fg:x="100619" fg:w="8196"/><text x="87.5224%" y="543.50">&lt;core::fut..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (8,196 samples, 7.11%)</title><rect x="87.2724%" y="517" width="7.1088%" height="15" fill="rgb(216,82,12)" fg:x="100619" fg:w="8196"/><text x="87.5224%" y="527.50">async_exec..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (8,183 samples, 7.10%)</title><rect x="87.2837%" y="501" width="7.0976%" height="15" fill="rgb(242,174,1)" fg:x="100632" fg:w="8183"/><text x="87.5337%" y="511.50">&lt;futures_l..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (8,173 samples, 7.09%)</title><rect x="87.2924%" y="485" width="7.0889%" height="15" fill="rgb(208,120,29)" fg:x="100642" fg:w="8173"/><text x="87.5424%" y="495.50">async_exec..</text></g><g><title>async_executor::Ticker::wake (381 samples, 0.33%)</title><rect x="94.0508%" y="469" width="0.3305%" height="15" fill="rgb(221,105,43)" fg:x="108434" fg:w="381"/><text x="94.3008%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (91 samples, 0.08%)</title><rect x="94.3023%" y="453" width="0.0789%" height="15" fill="rgb(234,124,22)" fg:x="108724" fg:w="91"/><text x="94.5523%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (88 samples, 0.08%)</title><rect x="94.3049%" y="437" width="0.0763%" height="15" fill="rgb(212,23,30)" fg:x="108727" fg:w="88"/><text x="94.5549%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (83 samples, 0.07%)</title><rect x="94.3093%" y="421" width="0.0720%" height="15" fill="rgb(219,122,53)" fg:x="108732" fg:w="83"/><text x="94.5593%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (83 samples, 0.07%)</title><rect x="94.3093%" y="405" width="0.0720%" height="15" fill="rgb(248,84,24)" fg:x="108732" fg:w="83"/><text x="94.5593%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,269 samples, 7.17%)</title><rect x="87.2421%" y="565" width="7.1722%" height="15" fill="rgb(245,115,18)" fg:x="100584" fg:w="8269"/><text x="87.4921%" y="575.50">&lt;core::fut..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (8,267 samples, 7.17%)</title><rect x="87.2438%" y="549" width="7.1704%" height="15" fill="rgb(227,176,51)" fg:x="100586" fg:w="8267"/><text x="87.4938%" y="559.50">async_exec..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (37 samples, 0.03%)</title><rect x="94.3821%" y="533" width="0.0321%" height="15" fill="rgb(229,63,42)" fg:x="108816" fg:w="37"/><text x="94.6321%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (37 samples, 0.03%)</title><rect x="94.3821%" y="517" width="0.0321%" height="15" fill="rgb(247,202,24)" fg:x="108816" fg:w="37"/><text x="94.6321%" y="527.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.07%)</title><rect x="94.6094%" y="421" width="0.0651%" height="15" fill="rgb(244,173,20)" fg:x="109078" fg:w="75"/><text x="94.8594%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (140 samples, 0.12%)</title><rect x="94.8679%" y="357" width="0.1214%" height="15" fill="rgb(242,81,47)" fg:x="109376" fg:w="140"/><text x="95.1179%" y="367.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.11%)</title><rect x="94.8748%" y="341" width="0.1145%" height="15" fill="rgb(231,185,54)" fg:x="109384" fg:w="132"/><text x="95.1248%" y="351.50"></text></g><g><title>[libc-2.31.so] (155 samples, 0.13%)</title><rect x="95.0301%" y="341" width="0.1344%" height="15" fill="rgb(243,55,32)" fg:x="109563" fg:w="155"/><text x="95.2801%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="95.1680%" y="341" width="0.0130%" height="15" fill="rgb(208,167,19)" fg:x="109722" fg:w="15"/><text x="95.4180%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="95.1680%" y="325" width="0.0130%" height="15" fill="rgb(231,72,35)" fg:x="109722" fg:w="15"/><text x="95.4180%" y="335.50"></text></g><g><title>alloc::alloc::box_free (15 samples, 0.01%)</title><rect x="95.1680%" y="309" width="0.0130%" height="15" fill="rgb(250,173,51)" fg:x="109722" fg:w="15"/><text x="95.4180%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="95.1680%" y="293" width="0.0130%" height="15" fill="rgb(209,5,22)" fg:x="109722" fg:w="15"/><text x="95.4180%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="95.1680%" y="277" width="0.0130%" height="15" fill="rgb(250,174,19)" fg:x="109722" fg:w="15"/><text x="95.4180%" y="287.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="95.1680%" y="261" width="0.0130%" height="15" fill="rgb(217,3,49)" fg:x="109722" fg:w="15"/><text x="95.4180%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="95.1680%" y="245" width="0.0130%" height="15" fill="rgb(218,225,5)" fg:x="109722" fg:w="15"/><text x="95.4180%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (40 samples, 0.03%)</title><rect x="95.2321%" y="277" width="0.0347%" height="15" fill="rgb(236,89,11)" fg:x="109796" fg:w="40"/><text x="95.4821%" y="287.50"></text></g><g><title>core::mem::replace (40 samples, 0.03%)</title><rect x="95.2321%" y="261" width="0.0347%" height="15" fill="rgb(206,33,28)" fg:x="109796" fg:w="40"/><text x="95.4821%" y="271.50"></text></g><g><title>core::ptr::read (40 samples, 0.03%)</title><rect x="95.2321%" y="245" width="0.0347%" height="15" fill="rgb(241,56,42)" fg:x="109796" fg:w="40"/><text x="95.4821%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (72 samples, 0.06%)</title><rect x="95.2200%" y="293" width="0.0624%" height="15" fill="rgb(222,44,11)" fg:x="109782" fg:w="72"/><text x="95.4700%" y="303.50"></text></g><g><title>core::mem::drop (18 samples, 0.02%)</title><rect x="95.2668%" y="277" width="0.0156%" height="15" fill="rgb(234,111,20)" fg:x="109836" fg:w="18"/><text x="95.5168%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (18 samples, 0.02%)</title><rect x="95.2668%" y="261" width="0.0156%" height="15" fill="rgb(237,77,6)" fg:x="109836" fg:w="18"/><text x="95.5168%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (78 samples, 0.07%)</title><rect x="95.2825%" y="293" width="0.0677%" height="15" fill="rgb(235,111,23)" fg:x="109854" fg:w="78"/><text x="95.5325%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (75 samples, 0.07%)</title><rect x="95.2851%" y="277" width="0.0651%" height="15" fill="rgb(251,135,29)" fg:x="109857" fg:w="75"/><text x="95.5351%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.07%)</title><rect x="95.2851%" y="261" width="0.0651%" height="15" fill="rgb(217,57,1)" fg:x="109857" fg:w="75"/><text x="95.5351%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (66 samples, 0.06%)</title><rect x="95.2929%" y="245" width="0.0572%" height="15" fill="rgb(249,119,31)" fg:x="109866" fg:w="66"/><text x="95.5429%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (66 samples, 0.06%)</title><rect x="95.2929%" y="229" width="0.0572%" height="15" fill="rgb(233,164,33)" fg:x="109866" fg:w="66"/><text x="95.5429%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (62 samples, 0.05%)</title><rect x="95.2963%" y="213" width="0.0538%" height="15" fill="rgb(250,217,43)" fg:x="109870" fg:w="62"/><text x="95.5463%" y="223.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (383 samples, 0.33%)</title><rect x="95.2035%" y="309" width="0.3322%" height="15" fill="rgb(232,154,50)" fg:x="109763" fg:w="383"/><text x="95.4535%" y="319.50"></text></g><g><title>event_listener::Inner::lock (206 samples, 0.18%)</title><rect x="95.3570%" y="293" width="0.1787%" height="15" fill="rgb(227,190,8)" fg:x="109940" fg:w="206"/><text x="95.6070%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (202 samples, 0.18%)</title><rect x="95.3605%" y="277" width="0.1752%" height="15" fill="rgb(209,217,32)" fg:x="109944" fg:w="202"/><text x="95.6105%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (201 samples, 0.17%)</title><rect x="95.3614%" y="261" width="0.1743%" height="15" fill="rgb(243,203,50)" fg:x="109945" fg:w="201"/><text x="95.6114%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (197 samples, 0.17%)</title><rect x="95.3649%" y="245" width="0.1709%" height="15" fill="rgb(232,152,27)" fg:x="109949" fg:w="197"/><text x="95.6149%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (197 samples, 0.17%)</title><rect x="95.3649%" y="229" width="0.1709%" height="15" fill="rgb(240,34,29)" fg:x="109949" fg:w="197"/><text x="95.6149%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (81 samples, 0.07%)</title><rect x="95.5704%" y="261" width="0.0703%" height="15" fill="rgb(215,185,52)" fg:x="110186" fg:w="81"/><text x="95.8204%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (80 samples, 0.07%)</title><rect x="95.5713%" y="245" width="0.0694%" height="15" fill="rgb(240,89,49)" fg:x="110187" fg:w="80"/><text x="95.8213%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (80 samples, 0.07%)</title><rect x="95.5713%" y="229" width="0.0694%" height="15" fill="rgb(225,12,52)" fg:x="110187" fg:w="80"/><text x="95.8213%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (80 samples, 0.07%)</title><rect x="95.5713%" y="213" width="0.0694%" height="15" fill="rgb(239,128,45)" fg:x="110187" fg:w="80"/><text x="95.8213%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (12 samples, 0.01%)</title><rect x="95.6407%" y="261" width="0.0104%" height="15" fill="rgb(211,78,47)" fg:x="110267" fg:w="12"/><text x="95.8907%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="95.6407%" y="245" width="0.0104%" height="15" fill="rgb(232,31,21)" fg:x="110267" fg:w="12"/><text x="95.8907%" y="255.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (785 samples, 0.68%)</title><rect x="94.9893%" y="357" width="0.6809%" height="15" fill="rgb(222,168,14)" fg:x="109516" fg:w="785"/><text x="95.2393%" y="367.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (564 samples, 0.49%)</title><rect x="95.1810%" y="341" width="0.4892%" height="15" fill="rgb(209,128,24)" fg:x="109737" fg:w="564"/><text x="95.4310%" y="351.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (564 samples, 0.49%)</title><rect x="95.1810%" y="325" width="0.4892%" height="15" fill="rgb(249,35,13)" fg:x="109737" fg:w="564"/><text x="95.4310%" y="335.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (155 samples, 0.13%)</title><rect x="95.5357%" y="309" width="0.1344%" height="15" fill="rgb(218,7,2)" fg:x="110146" fg:w="155"/><text x="95.7857%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (150 samples, 0.13%)</title><rect x="95.5401%" y="293" width="0.1301%" height="15" fill="rgb(238,107,27)" fg:x="110151" fg:w="150"/><text x="95.7901%" y="303.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (125 samples, 0.11%)</title><rect x="95.5617%" y="277" width="0.1084%" height="15" fill="rgb(217,88,38)" fg:x="110176" fg:w="125"/><text x="95.8117%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.02%)</title><rect x="95.6511%" y="261" width="0.0191%" height="15" fill="rgb(230,207,0)" fg:x="110279" fg:w="22"/><text x="95.9011%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="95.6511%" y="245" width="0.0191%" height="15" fill="rgb(249,64,54)" fg:x="110279" fg:w="22"/><text x="95.9011%" y="255.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.11%)</title><rect x="95.6702%" y="357" width="0.1093%" height="15" fill="rgb(231,7,11)" fg:x="110301" fg:w="126"/><text x="95.9202%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="95.8601%" y="229" width="0.0104%" height="15" fill="rgb(205,149,21)" fg:x="110520" fg:w="12"/><text x="96.1101%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (106 samples, 0.09%)</title><rect x="95.7794%" y="357" width="0.0919%" height="15" fill="rgb(215,126,34)" fg:x="110427" fg:w="106"/><text x="96.0294%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.03%)</title><rect x="95.8454%" y="341" width="0.0260%" height="15" fill="rgb(241,132,45)" fg:x="110503" fg:w="30"/><text x="96.0954%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="95.8454%" y="325" width="0.0260%" height="15" fill="rgb(252,69,32)" fg:x="110503" fg:w="30"/><text x="96.0954%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="95.8454%" y="309" width="0.0260%" height="15" fill="rgb(232,204,19)" fg:x="110503" fg:w="30"/><text x="96.0954%" y="319.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="95.8454%" y="293" width="0.0260%" height="15" fill="rgb(249,15,47)" fg:x="110503" fg:w="30"/><text x="96.0954%" y="303.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="95.8454%" y="277" width="0.0260%" height="15" fill="rgb(209,227,23)" fg:x="110503" fg:w="30"/><text x="96.0954%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="95.8454%" y="261" width="0.0260%" height="15" fill="rgb(248,92,24)" fg:x="110503" fg:w="30"/><text x="96.0954%" y="271.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="95.8480%" y="245" width="0.0234%" height="15" fill="rgb(247,59,2)" fg:x="110506" fg:w="27"/><text x="96.0980%" y="255.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,342 samples, 1.16%)</title><rect x="94.7187%" y="373" width="1.1640%" height="15" fill="rgb(221,30,5)" fg:x="109204" fg:w="1342"/><text x="94.9687%" y="383.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,386 samples, 1.20%)</title><rect x="94.6822%" y="405" width="1.2022%" height="15" fill="rgb(208,108,53)" fg:x="109162" fg:w="1386"/><text x="94.9322%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,385 samples, 1.20%)</title><rect x="94.6831%" y="389" width="1.2013%" height="15" fill="rgb(211,183,26)" fg:x="109163" fg:w="1385"/><text x="94.9331%" y="399.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,573 samples, 1.36%)</title><rect x="94.5261%" y="533" width="1.3643%" height="15" fill="rgb(232,132,4)" fg:x="108982" fg:w="1573"/><text x="94.7761%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,573 samples, 1.36%)</title><rect x="94.5261%" y="517" width="1.3643%" height="15" fill="rgb(253,128,37)" fg:x="108982" fg:w="1573"/><text x="94.7761%" y="527.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,566 samples, 1.36%)</title><rect x="94.5322%" y="501" width="1.3583%" height="15" fill="rgb(221,58,24)" fg:x="108989" fg:w="1566"/><text x="94.7822%" y="511.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,485 samples, 1.29%)</title><rect x="94.6024%" y="485" width="1.2880%" height="15" fill="rgb(230,54,45)" fg:x="109070" fg:w="1485"/><text x="94.8524%" y="495.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,485 samples, 1.29%)</title><rect x="94.6024%" y="469" width="1.2880%" height="15" fill="rgb(254,21,18)" fg:x="109070" fg:w="1485"/><text x="94.8524%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,482 samples, 1.29%)</title><rect x="94.6050%" y="453" width="1.2854%" height="15" fill="rgb(221,108,0)" fg:x="109073" fg:w="1482"/><text x="94.8550%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,481 samples, 1.28%)</title><rect x="94.6059%" y="437" width="1.2846%" height="15" fill="rgb(206,95,1)" fg:x="109074" fg:w="1481"/><text x="94.8559%" y="447.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,394 samples, 1.21%)</title><rect x="94.6814%" y="421" width="1.2091%" height="15" fill="rgb(237,52,5)" fg:x="109161" fg:w="1394"/><text x="94.9314%" y="431.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (28 samples, 0.02%)</title><rect x="95.8905%" y="533" width="0.0243%" height="15" fill="rgb(218,150,34)" fg:x="110555" fg:w="28"/><text x="96.1405%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (28 samples, 0.02%)</title><rect x="95.8905%" y="517" width="0.0243%" height="15" fill="rgb(235,194,28)" fg:x="110555" fg:w="28"/><text x="96.1405%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (28 samples, 0.02%)</title><rect x="95.8905%" y="501" width="0.0243%" height="15" fill="rgb(245,92,18)" fg:x="110555" fg:w="28"/><text x="96.1405%" y="511.50"></text></g><g><title>async_executor::State::notify (12 samples, 0.01%)</title><rect x="95.9148%" y="501" width="0.0104%" height="15" fill="rgb(253,203,53)" fg:x="110583" fg:w="12"/><text x="96.1648%" y="511.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (19 samples, 0.02%)</title><rect x="95.9148%" y="517" width="0.0165%" height="15" fill="rgb(249,185,47)" fg:x="110583" fg:w="19"/><text x="96.1648%" y="527.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (20 samples, 0.02%)</title><rect x="95.9148%" y="533" width="0.0173%" height="15" fill="rgb(252,194,52)" fg:x="110583" fg:w="20"/><text x="96.1648%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (218 samples, 0.19%)</title><rect x="95.9321%" y="533" width="0.1891%" height="15" fill="rgb(210,53,36)" fg:x="110603" fg:w="218"/><text x="96.1821%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (218 samples, 0.19%)</title><rect x="95.9321%" y="517" width="0.1891%" height="15" fill="rgb(237,37,25)" fg:x="110603" fg:w="218"/><text x="96.1821%" y="527.50"></text></g><g><title>async_task::runnable::Runnable::run (1,973 samples, 1.71%)</title><rect x="94.4151%" y="565" width="1.7113%" height="15" fill="rgb(242,116,27)" fg:x="108854" fg:w="1973"/><text x="94.6651%" y="575.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,908 samples, 1.65%)</title><rect x="94.4715%" y="549" width="1.6549%" height="15" fill="rgb(213,185,26)" fg:x="108919" fg:w="1908"/><text x="94.7215%" y="559.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (10,349 samples, 8.98%)</title><rect x="87.2030%" y="629" width="8.9763%" height="15" fill="rgb(225,204,8)" fg:x="100539" fg:w="10349"/><text x="87.4530%" y="639.50">async_executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,319 samples, 8.95%)</title><rect x="87.2291%" y="613" width="8.9502%" height="15" fill="rgb(254,111,37)" fg:x="100569" fg:w="10319"/><text x="87.4791%" y="623.50">&lt;futures_lite..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,319 samples, 8.95%)</title><rect x="87.2291%" y="597" width="8.9502%" height="15" fill="rgb(242,35,9)" fg:x="100569" fg:w="10319"/><text x="87.4791%" y="607.50">&lt;core::future..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (10,316 samples, 8.95%)</title><rect x="87.2317%" y="581" width="8.9476%" height="15" fill="rgb(232,138,49)" fg:x="100572" fg:w="10316"/><text x="87.4817%" y="591.50">async_executo..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (61 samples, 0.05%)</title><rect x="96.1264%" y="565" width="0.0529%" height="15" fill="rgb(247,56,4)" fg:x="110827" fg:w="61"/><text x="96.3764%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (61 samples, 0.05%)</title><rect x="96.1264%" y="549" width="0.0529%" height="15" fill="rgb(226,179,17)" fg:x="110827" fg:w="61"/><text x="96.3764%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.01%)</title><rect x="96.2669%" y="373" width="0.0104%" height="15" fill="rgb(216,163,45)" fg:x="110989" fg:w="12"/><text x="96.5169%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.01%)</title><rect x="96.2669%" y="357" width="0.0104%" height="15" fill="rgb(211,157,3)" fg:x="110989" fg:w="12"/><text x="96.5169%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="96.2669%" y="421" width="0.0121%" height="15" fill="rgb(234,44,20)" fg:x="110989" fg:w="14"/><text x="96.5169%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (14 samples, 0.01%)</title><rect x="96.2669%" y="405" width="0.0121%" height="15" fill="rgb(254,138,23)" fg:x="110989" fg:w="14"/><text x="96.5169%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.01%)</title><rect x="96.2669%" y="389" width="0.0121%" height="15" fill="rgb(206,119,39)" fg:x="110989" fg:w="14"/><text x="96.5169%" y="399.50"></text></g><g><title>concurrent_queue::full_fence (49 samples, 0.04%)</title><rect x="96.3111%" y="389" width="0.0425%" height="15" fill="rgb(231,105,52)" fg:x="111040" fg:w="49"/><text x="96.5611%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (48 samples, 0.04%)</title><rect x="96.3120%" y="373" width="0.0416%" height="15" fill="rgb(250,20,5)" fg:x="111041" fg:w="48"/><text x="96.5620%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (48 samples, 0.04%)</title><rect x="96.3120%" y="357" width="0.0416%" height="15" fill="rgb(215,198,30)" fg:x="111041" fg:w="48"/><text x="96.5620%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.04%)</title><rect x="96.3120%" y="341" width="0.0416%" height="15" fill="rgb(246,142,8)" fg:x="111041" fg:w="48"/><text x="96.5620%" y="351.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (139 samples, 0.12%)</title><rect x="96.2929%" y="405" width="0.1206%" height="15" fill="rgb(243,26,38)" fg:x="111019" fg:w="139"/><text x="96.5429%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (69 samples, 0.06%)</title><rect x="96.3536%" y="389" width="0.0598%" height="15" fill="rgb(205,133,28)" fg:x="111089" fg:w="69"/><text x="96.6036%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (69 samples, 0.06%)</title><rect x="96.3536%" y="373" width="0.0598%" height="15" fill="rgb(212,34,0)" fg:x="111089" fg:w="69"/><text x="96.6036%" y="383.50"></text></g><g><title>concurrent_queue::full_fence (39 samples, 0.03%)</title><rect x="96.4256%" y="389" width="0.0338%" height="15" fill="rgb(251,226,22)" fg:x="111172" fg:w="39"/><text x="96.6756%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (38 samples, 0.03%)</title><rect x="96.4265%" y="373" width="0.0330%" height="15" fill="rgb(252,119,9)" fg:x="111173" fg:w="38"/><text x="96.6765%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (38 samples, 0.03%)</title><rect x="96.4265%" y="357" width="0.0330%" height="15" fill="rgb(213,150,50)" fg:x="111173" fg:w="38"/><text x="96.6765%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="96.4265%" y="341" width="0.0330%" height="15" fill="rgb(212,24,39)" fg:x="111173" fg:w="38"/><text x="96.6765%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (230 samples, 0.20%)</title><rect x="96.2790%" y="421" width="0.1995%" height="15" fill="rgb(213,46,39)" fg:x="111003" fg:w="230"/><text x="96.5290%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (75 samples, 0.07%)</title><rect x="96.4135%" y="405" width="0.0651%" height="15" fill="rgb(239,106,12)" fg:x="111158" fg:w="75"/><text x="96.6635%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="96.4612%" y="389" width="0.0173%" height="15" fill="rgb(249,229,21)" fg:x="111213" fg:w="20"/><text x="96.7112%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="96.4612%" y="373" width="0.0173%" height="15" fill="rgb(212,158,3)" fg:x="111213" fg:w="20"/><text x="96.7112%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (30 samples, 0.03%)</title><rect x="96.4803%" y="357" width="0.0260%" height="15" fill="rgb(253,26,48)" fg:x="111235" fg:w="30"/><text x="96.7303%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (30 samples, 0.03%)</title><rect x="96.4803%" y="341" width="0.0260%" height="15" fill="rgb(238,178,20)" fg:x="111235" fg:w="30"/><text x="96.7303%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (86 samples, 0.07%)</title><rect x="96.4785%" y="421" width="0.0746%" height="15" fill="rgb(208,86,15)" fg:x="111233" fg:w="86"/><text x="96.7285%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.07%)</title><rect x="96.4785%" y="405" width="0.0746%" height="15" fill="rgb(239,42,53)" fg:x="111233" fg:w="86"/><text x="96.7285%" y="415.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (85 samples, 0.07%)</title><rect x="96.4794%" y="389" width="0.0737%" height="15" fill="rgb(245,226,8)" fg:x="111234" fg:w="85"/><text x="96.7294%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (84 samples, 0.07%)</title><rect x="96.4803%" y="373" width="0.0729%" height="15" fill="rgb(216,176,32)" fg:x="111235" fg:w="84"/><text x="96.7303%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (54 samples, 0.05%)</title><rect x="96.5063%" y="357" width="0.0468%" height="15" fill="rgb(231,186,21)" fg:x="111265" fg:w="54"/><text x="96.7563%" y="367.50"></text></g><g><title>__GI___pthread_rwlock_unlock (54 samples, 0.05%)</title><rect x="96.5063%" y="341" width="0.0468%" height="15" fill="rgb(205,95,49)" fg:x="111265" fg:w="54"/><text x="96.7563%" y="351.50"></text></g><g><title>fastrand::usize (16 samples, 0.01%)</title><rect x="96.5531%" y="421" width="0.0139%" height="15" fill="rgb(217,145,8)" fg:x="111319" fg:w="16"/><text x="96.8031%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.01%)</title><rect x="96.5531%" y="405" width="0.0139%" height="15" fill="rgb(239,144,48)" fg:x="111319" fg:w="16"/><text x="96.8031%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.01%)</title><rect x="96.5531%" y="389" width="0.0139%" height="15" fill="rgb(214,189,23)" fg:x="111319" fg:w="16"/><text x="96.8031%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (59 samples, 0.05%)</title><rect x="96.5739%" y="373" width="0.0512%" height="15" fill="rgb(229,157,17)" fg:x="111343" fg:w="59"/><text x="96.8239%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (459 samples, 0.40%)</title><rect x="96.2539%" y="437" width="0.3981%" height="15" fill="rgb(230,5,48)" fg:x="110974" fg:w="459"/><text x="96.5039%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (98 samples, 0.09%)</title><rect x="96.5670%" y="421" width="0.0850%" height="15" fill="rgb(224,156,48)" fg:x="111335" fg:w="98"/><text x="96.8170%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (94 samples, 0.08%)</title><rect x="96.5705%" y="405" width="0.0815%" height="15" fill="rgb(223,14,29)" fg:x="111339" fg:w="94"/><text x="96.8205%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (93 samples, 0.08%)</title><rect x="96.5713%" y="389" width="0.0807%" height="15" fill="rgb(229,96,36)" fg:x="111340" fg:w="93"/><text x="96.8213%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (31 samples, 0.03%)</title><rect x="96.6251%" y="373" width="0.0269%" height="15" fill="rgb(231,102,53)" fg:x="111402" fg:w="31"/><text x="96.8751%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (31 samples, 0.03%)</title><rect x="96.6251%" y="357" width="0.0269%" height="15" fill="rgb(210,77,38)" fg:x="111402" fg:w="31"/><text x="96.8751%" y="367.50"></text></g><g><title>async_executor::Sleepers::update (40 samples, 0.03%)</title><rect x="96.6581%" y="421" width="0.0347%" height="15" fill="rgb(235,131,6)" fg:x="111440" fg:w="40"/><text x="96.9081%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (24 samples, 0.02%)</title><rect x="96.6720%" y="405" width="0.0208%" height="15" fill="rgb(252,55,38)" fg:x="111456" fg:w="24"/><text x="96.9220%" y="415.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="96.6720%" y="389" width="0.0208%" height="15" fill="rgb(246,38,14)" fg:x="111456" fg:w="24"/><text x="96.9220%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="96.6798%" y="373" width="0.0130%" height="15" fill="rgb(242,27,5)" fg:x="111465" fg:w="15"/><text x="96.9298%" y="383.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="96.6798%" y="357" width="0.0130%" height="15" fill="rgb(228,65,35)" fg:x="111465" fg:w="15"/><text x="96.9298%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (50 samples, 0.04%)</title><rect x="96.6928%" y="421" width="0.0434%" height="15" fill="rgb(245,93,11)" fg:x="111480" fg:w="50"/><text x="96.9428%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="96.6928%" y="405" width="0.0434%" height="15" fill="rgb(213,1,31)" fg:x="111480" fg:w="50"/><text x="96.9428%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (47 samples, 0.04%)</title><rect x="96.6954%" y="389" width="0.0408%" height="15" fill="rgb(237,205,14)" fg:x="111483" fg:w="47"/><text x="96.9454%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (45 samples, 0.04%)</title><rect x="96.6971%" y="373" width="0.0390%" height="15" fill="rgb(232,118,45)" fg:x="111485" fg:w="45"/><text x="96.9471%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (44 samples, 0.04%)</title><rect x="96.6980%" y="357" width="0.0382%" height="15" fill="rgb(218,5,6)" fg:x="111486" fg:w="44"/><text x="96.9480%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (631 samples, 0.55%)</title><rect x="96.2287%" y="549" width="0.5473%" height="15" fill="rgb(251,87,51)" fg:x="110945" fg:w="631"/><text x="96.4787%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (624 samples, 0.54%)</title><rect x="96.2348%" y="533" width="0.5412%" height="15" fill="rgb(207,225,20)" fg:x="110952" fg:w="624"/><text x="96.4848%" y="543.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (623 samples, 0.54%)</title><rect x="96.2357%" y="517" width="0.5404%" height="15" fill="rgb(222,78,54)" fg:x="110953" fg:w="623"/><text x="96.4857%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (619 samples, 0.54%)</title><rect x="96.2391%" y="501" width="0.5369%" height="15" fill="rgb(232,85,16)" fg:x="110957" fg:w="619"/><text x="96.4891%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (619 samples, 0.54%)</title><rect x="96.2391%" y="485" width="0.5369%" height="15" fill="rgb(244,25,33)" fg:x="110957" fg:w="619"/><text x="96.4891%" y="495.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (613 samples, 0.53%)</title><rect x="96.2444%" y="469" width="0.5317%" height="15" fill="rgb(233,24,36)" fg:x="110963" fg:w="613"/><text x="96.4944%" y="479.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (606 samples, 0.53%)</title><rect x="96.2504%" y="453" width="0.5256%" height="15" fill="rgb(253,49,54)" fg:x="110970" fg:w="606"/><text x="96.5004%" y="463.50"></text></g><g><title>async_executor::Ticker::sleep (143 samples, 0.12%)</title><rect x="96.6520%" y="437" width="0.1240%" height="15" fill="rgb(245,12,22)" fg:x="111433" fg:w="143"/><text x="96.9020%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (46 samples, 0.04%)</title><rect x="96.7361%" y="421" width="0.0399%" height="15" fill="rgb(253,141,28)" fg:x="111530" fg:w="46"/><text x="96.9861%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.04%)</title><rect x="96.7370%" y="405" width="0.0390%" height="15" fill="rgb(225,207,27)" fg:x="111531" fg:w="45"/><text x="96.9870%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (45 samples, 0.04%)</title><rect x="96.7370%" y="389" width="0.0390%" height="15" fill="rgb(220,84,2)" fg:x="111531" fg:w="45"/><text x="96.9870%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (45 samples, 0.04%)</title><rect x="96.7370%" y="373" width="0.0390%" height="15" fill="rgb(224,37,37)" fg:x="111531" fg:w="45"/><text x="96.9870%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (16 samples, 0.01%)</title><rect x="96.8532%" y="485" width="0.0139%" height="15" fill="rgb(220,143,18)" fg:x="111665" fg:w="16"/><text x="97.1032%" y="495.50"></text></g><g><title>core::mem::replace (16 samples, 0.01%)</title><rect x="96.8532%" y="469" width="0.0139%" height="15" fill="rgb(210,88,33)" fg:x="111665" fg:w="16"/><text x="97.1032%" y="479.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="96.8532%" y="453" width="0.0139%" height="15" fill="rgb(219,87,51)" fg:x="111665" fg:w="16"/><text x="97.1032%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (34 samples, 0.03%)</title><rect x="96.8420%" y="501" width="0.0295%" height="15" fill="rgb(211,7,35)" fg:x="111652" fg:w="34"/><text x="97.0920%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (39 samples, 0.03%)</title><rect x="96.8714%" y="501" width="0.0338%" height="15" fill="rgb(232,77,2)" fg:x="111686" fg:w="39"/><text x="97.1214%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (38 samples, 0.03%)</title><rect x="96.8723%" y="485" width="0.0330%" height="15" fill="rgb(249,94,25)" fg:x="111687" fg:w="38"/><text x="97.1223%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="96.8723%" y="469" width="0.0330%" height="15" fill="rgb(215,112,2)" fg:x="111687" fg:w="38"/><text x="97.1223%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (36 samples, 0.03%)</title><rect x="96.8741%" y="453" width="0.0312%" height="15" fill="rgb(226,115,48)" fg:x="111689" fg:w="36"/><text x="97.1241%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (36 samples, 0.03%)</title><rect x="96.8741%" y="437" width="0.0312%" height="15" fill="rgb(249,196,10)" fg:x="111689" fg:w="36"/><text x="97.1241%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (34 samples, 0.03%)</title><rect x="96.8758%" y="421" width="0.0295%" height="15" fill="rgb(237,109,14)" fg:x="111691" fg:w="34"/><text x="97.1258%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="96.9053%" y="501" width="0.0130%" height="15" fill="rgb(217,103,53)" fg:x="111725" fg:w="15"/><text x="97.1553%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="96.9053%" y="485" width="0.0130%" height="15" fill="rgb(244,137,9)" fg:x="111725" fg:w="15"/><text x="97.1553%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.01%)</title><rect x="96.9070%" y="469" width="0.0113%" height="15" fill="rgb(227,201,3)" fg:x="111727" fg:w="13"/><text x="97.1570%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="96.9070%" y="453" width="0.0113%" height="15" fill="rgb(243,94,6)" fg:x="111727" fg:w="13"/><text x="97.1570%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (295 samples, 0.26%)</title><rect x="96.8116%" y="517" width="0.2559%" height="15" fill="rgb(235,118,5)" fg:x="111617" fg:w="295"/><text x="97.0616%" y="527.50"></text></g><g><title>event_listener::Inner::lock (172 samples, 0.15%)</title><rect x="96.9183%" y="501" width="0.1492%" height="15" fill="rgb(247,10,30)" fg:x="111740" fg:w="172"/><text x="97.1683%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (167 samples, 0.14%)</title><rect x="96.9226%" y="485" width="0.1448%" height="15" fill="rgb(205,26,28)" fg:x="111745" fg:w="167"/><text x="97.1726%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (165 samples, 0.14%)</title><rect x="96.9244%" y="469" width="0.1431%" height="15" fill="rgb(206,99,35)" fg:x="111747" fg:w="165"/><text x="97.1744%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (142 samples, 0.12%)</title><rect x="96.9443%" y="453" width="0.1232%" height="15" fill="rgb(238,130,40)" fg:x="111770" fg:w="142"/><text x="97.1943%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (142 samples, 0.12%)</title><rect x="96.9443%" y="437" width="0.1232%" height="15" fill="rgb(224,126,31)" fg:x="111770" fg:w="142"/><text x="97.1943%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,061 samples, 0.92%)</title><rect x="96.2287%" y="565" width="0.9203%" height="15" fill="rgb(254,105,17)" fg:x="110945" fg:w="1061"/><text x="96.4787%" y="575.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (430 samples, 0.37%)</title><rect x="96.7760%" y="549" width="0.3730%" height="15" fill="rgb(216,87,36)" fg:x="111576" fg:w="430"/><text x="97.0260%" y="559.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (408 samples, 0.35%)</title><rect x="96.7951%" y="533" width="0.3539%" height="15" fill="rgb(240,21,12)" fg:x="111598" fg:w="408"/><text x="97.0451%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (94 samples, 0.08%)</title><rect x="97.0675%" y="517" width="0.0815%" height="15" fill="rgb(245,192,34)" fg:x="111912" fg:w="94"/><text x="97.3175%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (94 samples, 0.08%)</title><rect x="97.0675%" y="501" width="0.0815%" height="15" fill="rgb(226,100,49)" fg:x="111912" fg:w="94"/><text x="97.3175%" y="511.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (61 samples, 0.05%)</title><rect x="97.0961%" y="485" width="0.0529%" height="15" fill="rgb(245,188,27)" fg:x="111945" fg:w="61"/><text x="97.3461%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (60 samples, 0.05%)</title><rect x="97.0970%" y="469" width="0.0520%" height="15" fill="rgb(212,170,8)" fg:x="111946" fg:w="60"/><text x="97.3470%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 0.05%)</title><rect x="97.0970%" y="453" width="0.0520%" height="15" fill="rgb(217,113,29)" fg:x="111946" fg:w="60"/><text x="97.3470%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.05%)</title><rect x="97.0970%" y="437" width="0.0520%" height="15" fill="rgb(237,30,3)" fg:x="111946" fg:w="60"/><text x="97.3470%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,065 samples, 0.92%)</title><rect x="96.2261%" y="581" width="0.9237%" height="15" fill="rgb(227,19,28)" fg:x="110942" fg:w="1065"/><text x="96.4761%" y="591.50"></text></g><g><title>async_executor::Executor::state (15 samples, 0.01%)</title><rect x="97.1499%" y="581" width="0.0130%" height="15" fill="rgb(239,172,45)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="591.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (15 samples, 0.01%)</title><rect x="97.1499%" y="565" width="0.0130%" height="15" fill="rgb(254,55,39)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="575.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (15 samples, 0.01%)</title><rect x="97.1499%" y="549" width="0.0130%" height="15" fill="rgb(249,208,12)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="559.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (15 samples, 0.01%)</title><rect x="97.1499%" y="533" width="0.0130%" height="15" fill="rgb(240,52,13)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="543.50"></text></g><g><title>once_cell::imp::initialize_or_wait (15 samples, 0.01%)</title><rect x="97.1499%" y="517" width="0.0130%" height="15" fill="rgb(252,149,13)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (15 samples, 0.01%)</title><rect x="97.1499%" y="501" width="0.0130%" height="15" fill="rgb(232,81,48)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="511.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (15 samples, 0.01%)</title><rect x="97.1499%" y="485" width="0.0130%" height="15" fill="rgb(222,144,2)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="495.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (15 samples, 0.01%)</title><rect x="97.1499%" y="469" width="0.0130%" height="15" fill="rgb(216,81,32)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="479.50"></text></g><g><title>async_executor::Executor::state::{{closure}} (15 samples, 0.01%)</title><rect x="97.1499%" y="453" width="0.0130%" height="15" fill="rgb(244,78,51)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="97.1499%" y="437" width="0.0130%" height="15" fill="rgb(217,66,21)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="97.1499%" y="421" width="0.0130%" height="15" fill="rgb(247,101,42)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="97.1499%" y="405" width="0.0130%" height="15" fill="rgb(227,81,39)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="97.1499%" y="389" width="0.0130%" height="15" fill="rgb(220,223,44)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="399.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="97.1499%" y="373" width="0.0130%" height="15" fill="rgb(205,218,2)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="383.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="97.1499%" y="357" width="0.0130%" height="15" fill="rgb(212,207,28)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="97.1499%" y="341" width="0.0130%" height="15" fill="rgb(224,12,41)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="351.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="97.1499%" y="325" width="0.0130%" height="15" fill="rgb(216,118,12)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="97.1499%" y="309" width="0.0130%" height="15" fill="rgb(252,97,46)" fg:x="112007" fg:w="15"/><text x="97.3999%" y="319.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,553 samples, 10.02%)</title><rect x="87.1475%" y="661" width="10.0206%" height="15" fill="rgb(244,206,19)" fg:x="100475" fg:w="11553"/><text x="87.3975%" y="671.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,491 samples, 9.97%)</title><rect x="87.2013%" y="645" width="9.9668%" height="15" fill="rgb(231,84,31)" fg:x="100537" fg:w="11491"/><text x="87.4513%" y="655.50">&lt;core::future:..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,140 samples, 0.99%)</title><rect x="96.1793%" y="629" width="0.9888%" height="15" fill="rgb(244,133,0)" fg:x="110888" fg:w="1140"/><text x="96.4293%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,090 samples, 0.95%)</title><rect x="96.2227%" y="613" width="0.9454%" height="15" fill="rgb(223,15,50)" fg:x="110938" fg:w="1090"/><text x="96.4727%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,090 samples, 0.95%)</title><rect x="96.2227%" y="597" width="0.9454%" height="15" fill="rgb(250,118,49)" fg:x="110938" fg:w="1090"/><text x="96.4727%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (215 samples, 0.19%)</title><rect x="97.1785%" y="661" width="0.1865%" height="15" fill="rgb(248,25,38)" fg:x="112040" fg:w="215"/><text x="97.4285%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (215 samples, 0.19%)</title><rect x="97.1785%" y="645" width="0.1865%" height="15" fill="rgb(215,70,14)" fg:x="112040" fg:w="215"/><text x="97.4285%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (211 samples, 0.18%)</title><rect x="97.1820%" y="629" width="0.1830%" height="15" fill="rgb(215,28,15)" fg:x="112044" fg:w="211"/><text x="97.4320%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (202 samples, 0.18%)</title><rect x="97.1898%" y="613" width="0.1752%" height="15" fill="rgb(243,6,28)" fg:x="112053" fg:w="202"/><text x="97.4398%" y="623.50"></text></g><g><title>__GI___pthread_mutex_trylock (202 samples, 0.18%)</title><rect x="97.1898%" y="597" width="0.1752%" height="15" fill="rgb(222,130,1)" fg:x="112053" fg:w="202"/><text x="97.4398%" y="607.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="97.4014%" y="485" width="0.0182%" height="15" fill="rgb(236,166,44)" fg:x="112297" fg:w="21"/><text x="97.6514%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.02%)</title><rect x="97.3997%" y="549" width="0.0217%" height="15" fill="rgb(221,108,14)" fg:x="112295" fg:w="25"/><text x="97.6497%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.02%)</title><rect x="97.3997%" y="533" width="0.0217%" height="15" fill="rgb(252,3,45)" fg:x="112295" fg:w="25"/><text x="97.6497%" y="543.50"></text></g><g><title>__rg_dealloc (25 samples, 0.02%)</title><rect x="97.3997%" y="517" width="0.0217%" height="15" fill="rgb(237,68,30)" fg:x="112295" fg:w="25"/><text x="97.6497%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (25 samples, 0.02%)</title><rect x="97.3997%" y="501" width="0.0217%" height="15" fill="rgb(211,79,22)" fg:x="112295" fg:w="25"/><text x="97.6497%" y="511.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (27 samples, 0.02%)</title><rect x="97.3988%" y="581" width="0.0234%" height="15" fill="rgb(252,185,21)" fg:x="112294" fg:w="27"/><text x="97.6488%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (27 samples, 0.02%)</title><rect x="97.3988%" y="565" width="0.0234%" height="15" fill="rgb(225,189,26)" fg:x="112294" fg:w="27"/><text x="97.6488%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="97.3971%" y="629" width="0.0260%" height="15" fill="rgb(241,30,40)" fg:x="112292" fg:w="30"/><text x="97.6471%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (29 samples, 0.03%)</title><rect x="97.3979%" y="613" width="0.0252%" height="15" fill="rgb(235,215,44)" fg:x="112293" fg:w="29"/><text x="97.6479%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (28 samples, 0.02%)</title><rect x="97.3988%" y="597" width="0.0243%" height="15" fill="rgb(205,8,29)" fg:x="112294" fg:w="28"/><text x="97.6488%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="97.4231%" y="629" width="0.0104%" height="15" fill="rgb(241,137,42)" fg:x="112322" fg:w="12"/><text x="97.6731%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (25 samples, 0.02%)</title><rect x="97.4491%" y="597" width="0.0217%" height="15" fill="rgb(237,155,2)" fg:x="112352" fg:w="25"/><text x="97.6991%" y="607.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (23 samples, 0.02%)</title><rect x="97.4508%" y="581" width="0.0199%" height="15" fill="rgb(245,29,42)" fg:x="112354" fg:w="23"/><text x="97.7008%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="97.4508%" y="565" width="0.0199%" height="15" fill="rgb(234,101,35)" fg:x="112354" fg:w="23"/><text x="97.7008%" y="575.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="97.4517%" y="549" width="0.0191%" height="15" fill="rgb(228,64,37)" fg:x="112355" fg:w="22"/><text x="97.7017%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (13 samples, 0.01%)</title><rect x="97.4751%" y="597" width="0.0113%" height="15" fill="rgb(217,214,36)" fg:x="112382" fg:w="13"/><text x="97.7251%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (13 samples, 0.01%)</title><rect x="97.4751%" y="581" width="0.0113%" height="15" fill="rgb(243,70,3)" fg:x="112382" fg:w="13"/><text x="97.7251%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="97.5332%" y="389" width="0.0130%" height="15" fill="rgb(253,158,52)" fg:x="112449" fg:w="15"/><text x="97.7832%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (71 samples, 0.06%)</title><rect x="97.4864%" y="581" width="0.0616%" height="15" fill="rgb(234,111,54)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (71 samples, 0.06%)</title><rect x="97.4864%" y="565" width="0.0616%" height="15" fill="rgb(217,70,32)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="575.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (71 samples, 0.06%)</title><rect x="97.4864%" y="549" width="0.0616%" height="15" fill="rgb(234,18,33)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (71 samples, 0.06%)</title><rect x="97.4864%" y="533" width="0.0616%" height="15" fill="rgb(234,12,49)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (71 samples, 0.06%)</title><rect x="97.4864%" y="517" width="0.0616%" height="15" fill="rgb(236,10,21)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (71 samples, 0.06%)</title><rect x="97.4864%" y="501" width="0.0616%" height="15" fill="rgb(248,182,45)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.06%)</title><rect x="97.4864%" y="485" width="0.0616%" height="15" fill="rgb(217,95,36)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.06%)</title><rect x="97.4864%" y="469" width="0.0616%" height="15" fill="rgb(212,110,31)" fg:x="112395" fg:w="71"/><text x="97.7364%" y="479.50"></text></g><g><title>alloc::alloc::alloc (70 samples, 0.06%)</title><rect x="97.4873%" y="453" width="0.0607%" height="15" fill="rgb(206,32,53)" fg:x="112396" fg:w="70"/><text x="97.7373%" y="463.50"></text></g><g><title>__rg_alloc (70 samples, 0.06%)</title><rect x="97.4873%" y="437" width="0.0607%" height="15" fill="rgb(246,141,37)" fg:x="112396" fg:w="70"/><text x="97.7373%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (70 samples, 0.06%)</title><rect x="97.4873%" y="421" width="0.0607%" height="15" fill="rgb(219,16,7)" fg:x="112396" fg:w="70"/><text x="97.7373%" y="431.50"></text></g><g><title>sn_rust_alloc (70 samples, 0.06%)</title><rect x="97.4873%" y="405" width="0.0607%" height="15" fill="rgb(230,205,45)" fg:x="112396" fg:w="70"/><text x="97.7373%" y="415.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (119 samples, 0.10%)</title><rect x="97.4474%" y="613" width="0.1032%" height="15" fill="rgb(231,43,49)" fg:x="112350" fg:w="119"/><text x="97.6974%" y="623.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (74 samples, 0.06%)</title><rect x="97.4864%" y="597" width="0.0642%" height="15" fill="rgb(212,106,34)" fg:x="112395" fg:w="74"/><text x="97.7364%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (135 samples, 0.12%)</title><rect x="97.4352%" y="629" width="0.1171%" height="15" fill="rgb(206,83,17)" fg:x="112336" fg:w="135"/><text x="97.6852%" y="639.50"></text></g><g><title>concurrent_queue::full_fence (17 samples, 0.01%)</title><rect x="97.5697%" y="581" width="0.0147%" height="15" fill="rgb(244,154,49)" fg:x="112491" fg:w="17"/><text x="97.8197%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (17 samples, 0.01%)</title><rect x="97.5697%" y="565" width="0.0147%" height="15" fill="rgb(244,149,49)" fg:x="112491" fg:w="17"/><text x="97.8197%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (17 samples, 0.01%)</title><rect x="97.5697%" y="549" width="0.0147%" height="15" fill="rgb(227,134,18)" fg:x="112491" fg:w="17"/><text x="97.8197%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="97.5697%" y="533" width="0.0147%" height="15" fill="rgb(237,116,36)" fg:x="112491" fg:w="17"/><text x="97.8197%" y="543.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (39 samples, 0.03%)</title><rect x="97.5627%" y="613" width="0.0338%" height="15" fill="rgb(205,129,40)" fg:x="112483" fg:w="39"/><text x="97.8127%" y="623.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (39 samples, 0.03%)</title><rect x="97.5627%" y="597" width="0.0338%" height="15" fill="rgb(236,178,4)" fg:x="112483" fg:w="39"/><text x="97.8127%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.01%)</title><rect x="97.5844%" y="581" width="0.0121%" height="15" fill="rgb(251,76,53)" fg:x="112508" fg:w="14"/><text x="97.8344%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="97.5844%" y="565" width="0.0121%" height="15" fill="rgb(242,92,40)" fg:x="112508" fg:w="14"/><text x="97.8344%" y="575.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (52 samples, 0.05%)</title><rect x="97.5523%" y="629" width="0.0451%" height="15" fill="rgb(209,45,30)" fg:x="112471" fg:w="52"/><text x="97.8023%" y="639.50"></text></g><g><title>core::mem::drop (120 samples, 0.10%)</title><rect x="97.5974%" y="629" width="0.1041%" height="15" fill="rgb(218,157,36)" fg:x="112523" fg:w="120"/><text x="97.8474%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (120 samples, 0.10%)</title><rect x="97.5974%" y="613" width="0.1041%" height="15" fill="rgb(222,186,16)" fg:x="112523" fg:w="120"/><text x="97.8474%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.10%)</title><rect x="97.5974%" y="597" width="0.1041%" height="15" fill="rgb(254,72,35)" fg:x="112523" fg:w="120"/><text x="97.8474%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (119 samples, 0.10%)</title><rect x="97.5983%" y="581" width="0.1032%" height="15" fill="rgb(224,25,35)" fg:x="112524" fg:w="119"/><text x="97.8483%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (110 samples, 0.10%)</title><rect x="97.6061%" y="565" width="0.0954%" height="15" fill="rgb(206,135,52)" fg:x="112533" fg:w="110"/><text x="97.8561%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (110 samples, 0.10%)</title><rect x="97.6061%" y="549" width="0.0954%" height="15" fill="rgb(229,174,47)" fg:x="112533" fg:w="110"/><text x="97.8561%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (12 samples, 0.01%)</title><rect x="97.7024%" y="629" width="0.0104%" height="15" fill="rgb(242,184,21)" fg:x="112644" fg:w="12"/><text x="97.9524%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (71 samples, 0.06%)</title><rect x="97.7163%" y="629" width="0.0616%" height="15" fill="rgb(213,22,45)" fg:x="112660" fg:w="71"/><text x="97.9663%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (71 samples, 0.06%)</title><rect x="97.7163%" y="613" width="0.0616%" height="15" fill="rgb(237,81,54)" fg:x="112660" fg:w="71"/><text x="97.9663%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (71 samples, 0.06%)</title><rect x="97.7163%" y="597" width="0.0616%" height="15" fill="rgb(248,177,18)" fg:x="112660" fg:w="71"/><text x="97.9663%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (71 samples, 0.06%)</title><rect x="97.7163%" y="581" width="0.0616%" height="15" fill="rgb(254,31,16)" fg:x="112660" fg:w="71"/><text x="97.9663%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (502 samples, 0.44%)</title><rect x="97.3858%" y="645" width="0.4354%" height="15" fill="rgb(235,20,31)" fg:x="112279" fg:w="502"/><text x="97.6358%" y="655.50"></text></g><g><title>std::time::Instant::now (50 samples, 0.04%)</title><rect x="97.7778%" y="629" width="0.0434%" height="15" fill="rgb(240,56,43)" fg:x="112731" fg:w="50"/><text x="98.0278%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (50 samples, 0.04%)</title><rect x="97.7778%" y="613" width="0.0434%" height="15" fill="rgb(237,197,51)" fg:x="112731" fg:w="50"/><text x="98.0278%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::now (50 samples, 0.04%)</title><rect x="97.7778%" y="597" width="0.0434%" height="15" fill="rgb(241,162,44)" fg:x="112731" fg:w="50"/><text x="98.0278%" y="607.50"></text></g><g><title>__clock_gettime (48 samples, 0.04%)</title><rect x="97.7796%" y="581" width="0.0416%" height="15" fill="rgb(224,23,20)" fg:x="112733" fg:w="48"/><text x="98.0296%" y="591.50"></text></g><g><title>__vdso_clock_gettime (41 samples, 0.04%)</title><rect x="97.7856%" y="565" width="0.0356%" height="15" fill="rgb(250,109,34)" fg:x="112740" fg:w="41"/><text x="98.0356%" y="575.50"></text></g><g><title>[[vdso]] (37 samples, 0.03%)</title><rect x="97.7891%" y="549" width="0.0321%" height="15" fill="rgb(214,175,50)" fg:x="112744" fg:w="37"/><text x="98.0391%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (25 samples, 0.02%)</title><rect x="97.8221%" y="645" width="0.0217%" height="15" fill="rgb(213,182,5)" fg:x="112782" fg:w="25"/><text x="98.0721%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (25 samples, 0.02%)</title><rect x="97.8221%" y="629" width="0.0217%" height="15" fill="rgb(209,199,19)" fg:x="112782" fg:w="25"/><text x="98.0721%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (63 samples, 0.05%)</title><rect x="97.8793%" y="629" width="0.0546%" height="15" fill="rgb(236,224,42)" fg:x="112848" fg:w="63"/><text x="98.1293%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.05%)</title><rect x="97.8793%" y="613" width="0.0546%" height="15" fill="rgb(246,226,29)" fg:x="112848" fg:w="63"/><text x="98.1293%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (61 samples, 0.05%)</title><rect x="97.8811%" y="597" width="0.0529%" height="15" fill="rgb(227,223,11)" fg:x="112850" fg:w="61"/><text x="98.1311%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (61 samples, 0.05%)</title><rect x="97.8811%" y="581" width="0.0529%" height="15" fill="rgb(219,7,51)" fg:x="112850" fg:w="61"/><text x="98.1311%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (61 samples, 0.05%)</title><rect x="97.8811%" y="565" width="0.0529%" height="15" fill="rgb(245,167,10)" fg:x="112850" fg:w="61"/><text x="98.1311%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (15 samples, 0.01%)</title><rect x="97.9340%" y="629" width="0.0130%" height="15" fill="rgb(237,224,16)" fg:x="112911" fg:w="15"/><text x="98.1840%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (15 samples, 0.01%)</title><rect x="97.9340%" y="613" width="0.0130%" height="15" fill="rgb(226,132,13)" fg:x="112911" fg:w="15"/><text x="98.1840%" y="623.50"></text></g><g><title>__pthread_disable_asynccancel (12 samples, 0.01%)</title><rect x="98.0502%" y="597" width="0.0104%" height="15" fill="rgb(214,140,3)" fg:x="113045" fg:w="12"/><text x="98.3002%" y="607.50"></text></g><g><title>__libc_read (89 samples, 0.08%)</title><rect x="98.0268%" y="613" width="0.0772%" height="15" fill="rgb(221,177,4)" fg:x="113018" fg:w="89"/><text x="98.2768%" y="623.50"></text></g><g><title>__pthread_enable_asynccancel (50 samples, 0.04%)</title><rect x="98.0606%" y="597" width="0.0434%" height="15" fill="rgb(238,139,3)" fg:x="113057" fg:w="50"/><text x="98.3106%" y="607.50"></text></g><g><title>epoll_wait (157 samples, 0.14%)</title><rect x="98.1040%" y="613" width="0.1362%" height="15" fill="rgb(216,17,39)" fg:x="113107" fg:w="157"/><text x="98.3540%" y="623.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="98.2080%" y="597" width="0.0321%" height="15" fill="rgb(238,120,9)" fg:x="113227" fg:w="37"/><text x="98.4580%" y="607.50"></text></g><g><title>polling::epoll::Poller::modify (54 samples, 0.05%)</title><rect x="98.2410%" y="613" width="0.0468%" height="15" fill="rgb(244,92,53)" fg:x="113265" fg:w="54"/><text x="98.4910%" y="623.50"></text></g><g><title>polling::epoll::Poller::ctl (47 samples, 0.04%)</title><rect x="98.2471%" y="597" width="0.0408%" height="15" fill="rgb(224,148,33)" fg:x="113272" fg:w="47"/><text x="98.4971%" y="607.50"></text></g><g><title>epoll_ctl (38 samples, 0.03%)</title><rect x="98.2549%" y="581" width="0.0330%" height="15" fill="rgb(243,6,36)" fg:x="113281" fg:w="38"/><text x="98.5049%" y="591.50"></text></g><g><title>polling::epoll::Poller::wait (419 samples, 0.36%)</title><rect x="97.9470%" y="629" width="0.3634%" height="15" fill="rgb(230,102,11)" fg:x="112926" fg:w="419"/><text x="98.1970%" y="639.50"></text></g><g><title>syscall (24 samples, 0.02%)</title><rect x="98.2896%" y="613" width="0.0208%" height="15" fill="rgb(234,148,36)" fg:x="113321" fg:w="24"/><text x="98.5396%" y="623.50"></text></g><g><title>polling::Poller::wait (556 samples, 0.48%)</title><rect x="97.8438%" y="645" width="0.4822%" height="15" fill="rgb(251,153,25)" fg:x="112807" fg:w="556"/><text x="98.0938%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (18 samples, 0.02%)</title><rect x="98.3104%" y="629" width="0.0156%" height="15" fill="rgb(215,129,8)" fg:x="113345" fg:w="18"/><text x="98.5604%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (15 samples, 0.01%)</title><rect x="98.3130%" y="613" width="0.0130%" height="15" fill="rgb(224,128,35)" fg:x="113348" fg:w="15"/><text x="98.5630%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (15 samples, 0.01%)</title><rect x="98.3130%" y="597" width="0.0130%" height="15" fill="rgb(237,56,52)" fg:x="113348" fg:w="15"/><text x="98.5630%" y="607.50"></text></g><g><title>__GI___pthread_mutex_trylock (15 samples, 0.01%)</title><rect x="98.3130%" y="581" width="0.0130%" height="15" fill="rgb(234,213,19)" fg:x="113348" fg:w="15"/><text x="98.5630%" y="591.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,109 samples, 0.96%)</title><rect x="97.3650%" y="661" width="0.9619%" height="15" fill="rgb(252,82,23)" fg:x="112255" fg:w="1109"/><text x="97.6150%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (18 samples, 0.02%)</title><rect x="98.3269%" y="613" width="0.0156%" height="15" fill="rgb(254,201,21)" fg:x="113364" fg:w="18"/><text x="98.5769%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_store (18 samples, 0.02%)</title><rect x="98.3269%" y="597" width="0.0156%" height="15" fill="rgb(250,186,11)" fg:x="113364" fg:w="18"/><text x="98.5769%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="98.3269%" y="661" width="0.0191%" height="15" fill="rgb(211,174,5)" fg:x="113364" fg:w="22"/><text x="98.5769%" y="671.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="98.3269%" y="645" width="0.0191%" height="15" fill="rgb(214,121,10)" fg:x="113364" fg:w="22"/><text x="98.5769%" y="655.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (22 samples, 0.02%)</title><rect x="98.3269%" y="629" width="0.0191%" height="15" fill="rgb(241,66,2)" fg:x="113364" fg:w="22"/><text x="98.5769%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (27 samples, 0.02%)</title><rect x="98.3460%" y="661" width="0.0234%" height="15" fill="rgb(220,167,19)" fg:x="113386" fg:w="27"/><text x="98.5960%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="98.3460%" y="645" width="0.0234%" height="15" fill="rgb(231,54,50)" fg:x="113386" fg:w="27"/><text x="98.5960%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="98.3460%" y="629" width="0.0234%" height="15" fill="rgb(239,217,53)" fg:x="113386" fg:w="27"/><text x="98.5960%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (26 samples, 0.02%)</title><rect x="98.3468%" y="613" width="0.0226%" height="15" fill="rgb(248,8,0)" fg:x="113387" fg:w="26"/><text x="98.5968%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="98.3477%" y="597" width="0.0217%" height="15" fill="rgb(229,118,37)" fg:x="113388" fg:w="25"/><text x="98.5977%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (25 samples, 0.02%)</title><rect x="98.3477%" y="581" width="0.0217%" height="15" fill="rgb(253,223,43)" fg:x="113388" fg:w="25"/><text x="98.5977%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (18 samples, 0.02%)</title><rect x="98.3711%" y="661" width="0.0156%" height="15" fill="rgb(211,77,36)" fg:x="113415" fg:w="18"/><text x="98.6211%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_store (18 samples, 0.02%)</title><rect x="98.3711%" y="645" width="0.0156%" height="15" fill="rgb(219,3,53)" fg:x="113415" fg:w="18"/><text x="98.6211%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (85 samples, 0.07%)</title><rect x="98.4049%" y="629" width="0.0737%" height="15" fill="rgb(244,45,42)" fg:x="113454" fg:w="85"/><text x="98.6549%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (106 samples, 0.09%)</title><rect x="98.4813%" y="629" width="0.0919%" height="15" fill="rgb(225,95,27)" fg:x="113542" fg:w="106"/><text x="98.7313%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (106 samples, 0.09%)</title><rect x="98.4813%" y="613" width="0.0919%" height="15" fill="rgb(207,74,8)" fg:x="113542" fg:w="106"/><text x="98.7313%" y="623.50"></text></g><g><title>std::sync::poison::Flag::get (107 samples, 0.09%)</title><rect x="98.5741%" y="613" width="0.0928%" height="15" fill="rgb(243,63,36)" fg:x="113649" fg:w="107"/><text x="98.8241%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (107 samples, 0.09%)</title><rect x="98.5741%" y="597" width="0.0928%" height="15" fill="rgb(211,180,12)" fg:x="113649" fg:w="107"/><text x="98.8241%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (107 samples, 0.09%)</title><rect x="98.5741%" y="581" width="0.0928%" height="15" fill="rgb(254,166,49)" fg:x="113649" fg:w="107"/><text x="98.8241%" y="591.50"></text></g><g><title>__pthread_disable_asynccancel (60 samples, 0.05%)</title><rect x="99.1743%" y="565" width="0.0520%" height="15" fill="rgb(205,19,0)" fg:x="114341" fg:w="60"/><text x="99.4243%" y="575.50"></text></g><g><title>__pthread_enable_asynccancel (24 samples, 0.02%)</title><rect x="99.2263%" y="565" width="0.0208%" height="15" fill="rgb(224,172,32)" fg:x="114401" fg:w="24"/><text x="99.4763%" y="575.50"></text></g><g><title>__pthread_mutex_cond_lock (59 samples, 0.05%)</title><rect x="99.2471%" y="565" width="0.0512%" height="15" fill="rgb(254,136,30)" fg:x="114425" fg:w="59"/><text x="99.4971%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (753 samples, 0.65%)</title><rect x="98.6669%" y="597" width="0.6531%" height="15" fill="rgb(246,19,35)" fg:x="113756" fg:w="753"/><text x="98.9169%" y="607.50"></text></g><g><title>__pthread_cond_wait (753 samples, 0.65%)</title><rect x="98.6669%" y="581" width="0.6531%" height="15" fill="rgb(219,24,36)" fg:x="113756" fg:w="753"/><text x="98.9169%" y="591.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (25 samples, 0.02%)</title><rect x="99.2983%" y="565" width="0.0217%" height="15" fill="rgb(251,55,1)" fg:x="114484" fg:w="25"/><text x="99.5483%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (874 samples, 0.76%)</title><rect x="98.5741%" y="629" width="0.7581%" height="15" fill="rgb(218,117,39)" fg:x="113649" fg:w="874"/><text x="98.8241%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (767 samples, 0.67%)</title><rect x="98.6669%" y="613" width="0.6653%" height="15" fill="rgb(248,169,11)" fg:x="113756" fg:w="767"/><text x="98.9169%" y="623.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (14 samples, 0.01%)</title><rect x="99.3200%" y="597" width="0.0121%" height="15" fill="rgb(244,40,44)" fg:x="114509" fg:w="14"/><text x="99.5700%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (13 samples, 0.01%)</title><rect x="99.3209%" y="581" width="0.0113%" height="15" fill="rgb(234,62,37)" fg:x="114510" fg:w="13"/><text x="99.5709%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="99.3209%" y="565" width="0.0113%" height="15" fill="rgb(207,117,42)" fg:x="114510" fg:w="13"/><text x="99.5709%" y="575.50"></text></g><g><title>parking::Parker::park (1,125 samples, 0.98%)</title><rect x="98.3937%" y="661" width="0.9758%" height="15" fill="rgb(213,43,2)" fg:x="113441" fg:w="1125"/><text x="98.6437%" y="671.50"></text></g><g><title>parking::Inner::park (1,122 samples, 0.97%)</title><rect x="98.3963%" y="645" width="0.9732%" height="15" fill="rgb(244,202,51)" fg:x="113444" fg:w="1122"/><text x="98.6463%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.04%)</title><rect x="99.3321%" y="629" width="0.0373%" height="15" fill="rgb(253,174,46)" fg:x="114523" fg:w="43"/><text x="99.5821%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (42 samples, 0.04%)</title><rect x="99.3330%" y="613" width="0.0364%" height="15" fill="rgb(251,23,1)" fg:x="114524" fg:w="42"/><text x="99.5830%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (41 samples, 0.04%)</title><rect x="99.3339%" y="597" width="0.0356%" height="15" fill="rgb(253,26,1)" fg:x="114525" fg:w="41"/><text x="99.5839%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (41 samples, 0.04%)</title><rect x="99.3339%" y="581" width="0.0356%" height="15" fill="rgb(216,89,31)" fg:x="114525" fg:w="41"/><text x="99.5839%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (205 samples, 0.18%)</title><rect x="99.3694%" y="661" width="0.1778%" height="15" fill="rgb(209,109,5)" fg:x="114566" fg:w="205"/><text x="99.6194%" y="671.50"></text></g><g><title>parking::Inner::park (161 samples, 0.14%)</title><rect x="99.4076%" y="645" width="0.1396%" height="15" fill="rgb(229,63,13)" fg:x="114610" fg:w="161"/><text x="99.6576%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (149 samples, 0.13%)</title><rect x="99.4180%" y="629" width="0.1292%" height="15" fill="rgb(238,137,54)" fg:x="114622" fg:w="149"/><text x="99.6680%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (149 samples, 0.13%)</title><rect x="99.4180%" y="613" width="0.1292%" height="15" fill="rgb(228,1,9)" fg:x="114622" fg:w="149"/><text x="99.6680%" y="623.50"></text></g><g><title>std::panic::catch_unwind (14,405 samples, 12.49%)</title><rect x="87.0868%" y="949" width="12.4943%" height="15" fill="rgb(249,120,48)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="959.50">std::panic::catch_u..</text></g><g><title>std::panicking::try (14,405 samples, 12.49%)</title><rect x="87.0868%" y="933" width="12.4943%" height="15" fill="rgb(209,72,36)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,405 samples, 12.49%)</title><rect x="87.0868%" y="917" width="12.4943%" height="15" fill="rgb(247,98,49)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="927.50">std::panicking::try..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (14,405 samples, 12.49%)</title><rect x="87.0868%" y="901" width="12.4943%" height="15" fill="rgb(233,75,36)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="911.50">&lt;core::panic::unwin..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (14,405 samples, 12.49%)</title><rect x="87.0868%" y="885" width="12.4943%" height="15" fill="rgb(225,14,24)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="895.50">std::thread::Builde..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14,405 samples, 12.49%)</title><rect x="87.0868%" y="869" width="12.4943%" height="15" fill="rgb(237,193,20)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="879.50">std::sys_common::ba..</text></g><g><title>core::ops::function::FnOnce::call_once (14,405 samples, 12.49%)</title><rect x="87.0868%" y="853" width="12.4943%" height="15" fill="rgb(239,122,19)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="863.50">core::ops::function..</text></g><g><title>async_global_executor::threading::thread_main_loop (14,405 samples, 12.49%)</title><rect x="87.0868%" y="837" width="12.4943%" height="15" fill="rgb(231,220,10)" fg:x="100405" fg:w="14405"/><text x="87.3368%" y="847.50">async_global_execut..</text></g><g><title>std::panic::catch_unwind (14,391 samples, 12.48%)</title><rect x="87.0990%" y="821" width="12.4821%" height="15" fill="rgb(220,66,15)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="831.50">std::panic::catch_u..</text></g><g><title>std::panicking::try (14,391 samples, 12.48%)</title><rect x="87.0990%" y="805" width="12.4821%" height="15" fill="rgb(215,171,52)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,391 samples, 12.48%)</title><rect x="87.0990%" y="789" width="12.4821%" height="15" fill="rgb(241,169,50)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="799.50">std::panicking::try..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (14,391 samples, 12.48%)</title><rect x="87.0990%" y="773" width="12.4821%" height="15" fill="rgb(236,189,0)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="783.50">async_global_execut..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,391 samples, 12.48%)</title><rect x="87.0990%" y="757" width="12.4821%" height="15" fill="rgb(217,147,20)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="767.50">std::thread::local:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,391 samples, 12.48%)</title><rect x="87.0990%" y="741" width="12.4821%" height="15" fill="rgb(206,188,39)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="751.50">std::thread::local:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (14,391 samples, 12.48%)</title><rect x="87.0990%" y="725" width="12.4821%" height="15" fill="rgb(227,118,25)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="735.50">async_global_execut..</text></g><g><title>async_global_executor::reactor::block_on (14,391 samples, 12.48%)</title><rect x="87.0990%" y="709" width="12.4821%" height="15" fill="rgb(248,171,40)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="719.50">async_global_execut..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (14,391 samples, 12.48%)</title><rect x="87.0990%" y="693" width="12.4821%" height="15" fill="rgb(251,90,54)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="703.50">async_global_execut..</text></g><g><title>async_io::driver::block_on (14,391 samples, 12.48%)</title><rect x="87.0990%" y="677" width="12.4821%" height="15" fill="rgb(234,11,46)" fg:x="100419" fg:w="14391"/><text x="87.3490%" y="687.50">async_io::driver::b..</text></g><g><title>std::time::Instant::now (27 samples, 0.02%)</title><rect x="99.5576%" y="661" width="0.0234%" height="15" fill="rgb(229,134,13)" fg:x="114783" fg:w="27"/><text x="99.8076%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (27 samples, 0.02%)</title><rect x="99.5576%" y="645" width="0.0234%" height="15" fill="rgb(223,129,3)" fg:x="114783" fg:w="27"/><text x="99.8076%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::now (27 samples, 0.02%)</title><rect x="99.5576%" y="629" width="0.0234%" height="15" fill="rgb(221,124,13)" fg:x="114783" fg:w="27"/><text x="99.8076%" y="639.50"></text></g><g><title>__clock_gettime (22 samples, 0.02%)</title><rect x="99.5620%" y="613" width="0.0191%" height="15" fill="rgb(234,3,18)" fg:x="114788" fg:w="22"/><text x="99.8120%" y="623.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.02%)</title><rect x="99.5655%" y="597" width="0.0156%" height="15" fill="rgb(249,199,20)" fg:x="114792" fg:w="18"/><text x="99.8155%" y="607.50"></text></g><g><title>[[vdso]] (15 samples, 0.01%)</title><rect x="99.5681%" y="581" width="0.0130%" height="15" fill="rgb(224,134,6)" fg:x="114795" fg:w="15"/><text x="99.8181%" y="591.50"></text></g><g><title>clone (14,412 samples, 12.50%)</title><rect x="87.0868%" y="1061" width="12.5003%" height="15" fill="rgb(254,83,26)" fg:x="100405" fg:w="14412"/><text x="87.3368%" y="1071.50">clone</text></g><g><title>start_thread (14,412 samples, 12.50%)</title><rect x="87.0868%" y="1045" width="12.5003%" height="15" fill="rgb(217,88,9)" fg:x="100405" fg:w="14412"/><text x="87.3368%" y="1055.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (14,412 samples, 12.50%)</title><rect x="87.0868%" y="1029" width="12.5003%" height="15" fill="rgb(225,73,2)" fg:x="100405" fg:w="14412"/><text x="87.3368%" y="1039.50">std::sys::unix::thr..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (14,412 samples, 12.50%)</title><rect x="87.0868%" y="1013" width="12.5003%" height="15" fill="rgb(226,44,39)" fg:x="100405" fg:w="14412"/><text x="87.3368%" y="1023.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (14,412 samples, 12.50%)</title><rect x="87.0868%" y="997" width="12.5003%" height="15" fill="rgb(228,53,17)" fg:x="100405" fg:w="14412"/><text x="87.3368%" y="1007.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (14,412 samples, 12.50%)</title><rect x="87.0868%" y="981" width="12.5003%" height="15" fill="rgb(212,27,27)" fg:x="100405" fg:w="14412"/><text x="87.3368%" y="991.50">core::ops::function..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (14,412 samples, 12.50%)</title><rect x="87.0868%" y="965" width="12.5003%" height="15" fill="rgb(241,50,6)" fg:x="100405" fg:w="14412"/><text x="87.3368%" y="975.50">std::thread::Builde..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (14 samples, 0.01%)</title><rect x="99.6088%" y="1061" width="0.0121%" height="15" fill="rgb(225,28,51)" fg:x="114842" fg:w="14"/><text x="99.8588%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.03%)</title><rect x="99.6210%" y="1061" width="0.0252%" height="15" fill="rgb(215,33,16)" fg:x="114856" fg:w="29"/><text x="99.8710%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (14 samples, 0.01%)</title><rect x="99.6565%" y="1061" width="0.0121%" height="15" fill="rgb(243,40,39)" fg:x="114897" fg:w="14"/><text x="99.9065%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (104 samples, 0.09%)</title><rect x="99.6704%" y="1061" width="0.0902%" height="15" fill="rgb(225,11,42)" fg:x="114913" fg:w="104"/><text x="99.9204%" y="1071.50"></text></g><g><title>async-std/runti (114,962 samples, 99.71%)</title><rect x="0.0642%" y="1077" width="99.7129%" height="15" fill="rgb(241,220,38)" fg:x="74" fg:w="114962"/><text x="0.3142%" y="1087.50">async-std/runti</text></g><g><title>tremor_value::value::ValueDeserializer::parse (15 samples, 0.01%)</title><rect x="99.7641%" y="1061" width="0.0130%" height="15" fill="rgb(244,52,35)" fg:x="115021" fg:w="15"/><text x="100.0141%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (32 samples, 0.03%)</title><rect x="99.7953%" y="949" width="0.0278%" height="15" fill="rgb(246,42,46)" fg:x="115057" fg:w="32"/><text x="100.0453%" y="959.50"></text></g><g><title>std::panicking::try (32 samples, 0.03%)</title><rect x="99.7953%" y="933" width="0.0278%" height="15" fill="rgb(205,184,13)" fg:x="115057" fg:w="32"/><text x="100.0453%" y="943.50"></text></g><g><title>std::panicking::try::do_call (32 samples, 0.03%)</title><rect x="99.7953%" y="917" width="0.0278%" height="15" fill="rgb(209,48,36)" fg:x="115057" fg:w="32"/><text x="100.0453%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (32 samples, 0.03%)</title><rect x="99.7953%" y="901" width="0.0278%" height="15" fill="rgb(244,34,51)" fg:x="115057" fg:w="32"/><text x="100.0453%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (32 samples, 0.03%)</title><rect x="99.7953%" y="885" width="0.0278%" height="15" fill="rgb(221,107,33)" fg:x="115057" fg:w="32"/><text x="100.0453%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (32 samples, 0.03%)</title><rect x="99.7953%" y="869" width="0.0278%" height="15" fill="rgb(224,203,12)" fg:x="115057" fg:w="32"/><text x="100.0453%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (31 samples, 0.03%)</title><rect x="99.7962%" y="853" width="0.0269%" height="15" fill="rgb(230,215,18)" fg:x="115058" fg:w="31"/><text x="100.0462%" y="863.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (31 samples, 0.03%)</title><rect x="99.7962%" y="837" width="0.0269%" height="15" fill="rgb(206,185,35)" fg:x="115058" fg:w="31"/><text x="100.0462%" y="847.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.03%)</title><rect x="99.7962%" y="821" width="0.0269%" height="15" fill="rgb(228,140,34)" fg:x="115058" fg:w="31"/><text x="100.0462%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.03%)</title><rect x="99.7962%" y="805" width="0.0269%" height="15" fill="rgb(208,93,13)" fg:x="115058" fg:w="31"/><text x="100.0462%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (31 samples, 0.03%)</title><rect x="99.7962%" y="789" width="0.0269%" height="15" fill="rgb(221,193,39)" fg:x="115058" fg:w="31"/><text x="100.0462%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (31 samples, 0.03%)</title><rect x="99.7962%" y="773" width="0.0269%" height="15" fill="rgb(241,132,34)" fg:x="115058" fg:w="31"/><text x="100.0462%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (31 samples, 0.03%)</title><rect x="99.7962%" y="757" width="0.0269%" height="15" fill="rgb(221,141,10)" fg:x="115058" fg:w="31"/><text x="100.0462%" y="767.50"></text></g><g><title>__lll_lock_wait (30 samples, 0.03%)</title><rect x="99.7970%" y="741" width="0.0260%" height="15" fill="rgb(226,90,31)" fg:x="115059" fg:w="30"/><text x="100.0470%" y="751.50"></text></g><g><title>tokio-runtime-w (40 samples, 0.03%)</title><rect x="99.7936%" y="1077" width="0.0347%" height="15" fill="rgb(243,75,5)" fg:x="115055" fg:w="40"/><text x="100.0436%" y="1087.50"></text></g><g><title>clone (38 samples, 0.03%)</title><rect x="99.7953%" y="1061" width="0.0330%" height="15" fill="rgb(227,156,21)" fg:x="115057" fg:w="38"/><text x="100.0453%" y="1071.50"></text></g><g><title>start_thread (38 samples, 0.03%)</title><rect x="99.7953%" y="1045" width="0.0330%" height="15" fill="rgb(250,195,8)" fg:x="115057" fg:w="38"/><text x="100.0453%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (38 samples, 0.03%)</title><rect x="99.7953%" y="1029" width="0.0330%" height="15" fill="rgb(220,134,5)" fg:x="115057" fg:w="38"/><text x="100.0453%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (38 samples, 0.03%)</title><rect x="99.7953%" y="1013" width="0.0330%" height="15" fill="rgb(246,106,34)" fg:x="115057" fg:w="38"/><text x="100.0453%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (38 samples, 0.03%)</title><rect x="99.7953%" y="997" width="0.0330%" height="15" fill="rgb(205,1,4)" fg:x="115057" fg:w="38"/><text x="100.0453%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (38 samples, 0.03%)</title><rect x="99.7953%" y="981" width="0.0330%" height="15" fill="rgb(224,151,29)" fg:x="115057" fg:w="38"/><text x="100.0453%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (38 samples, 0.03%)</title><rect x="99.7953%" y="965" width="0.0330%" height="15" fill="rgb(251,196,0)" fg:x="115057" fg:w="38"/><text x="100.0453%" y="975.50"></text></g><g><title>[ld-2.31.so] (13 samples, 0.01%)</title><rect x="99.8309%" y="1061" width="0.0113%" height="15" fill="rgb(212,127,0)" fg:x="115098" fg:w="13"/><text x="100.0809%" y="1071.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="99.8421%" y="1061" width="0.0173%" height="15" fill="rgb(236,71,53)" fg:x="115111" fg:w="20"/><text x="100.0921%" y="1071.50"></text></g><g><title>all (115,293 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(227,99,0)" fg:x="0" fg:w="115293"/><text x="0.2500%" y="1103.50"></text></g><g><title>tremor-pdk-half (198 samples, 0.17%)</title><rect x="99.8283%" y="1077" width="0.1717%" height="15" fill="rgb(239,89,21)" fg:x="115095" fg:w="198"/><text x="100.0783%" y="1087.50"></text></g><g><title>clone (162 samples, 0.14%)</title><rect x="99.8595%" y="1061" width="0.1405%" height="15" fill="rgb(243,122,19)" fg:x="115131" fg:w="162"/><text x="100.1095%" y="1071.50"></text></g><g><title>start_thread (15 samples, 0.01%)</title><rect x="99.9870%" y="1045" width="0.0130%" height="15" fill="rgb(229,192,45)" fg:x="115278" fg:w="15"/><text x="100.2370%" y="1055.50"></text></g></svg></svg>